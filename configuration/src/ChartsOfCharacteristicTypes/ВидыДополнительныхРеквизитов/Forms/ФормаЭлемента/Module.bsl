///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьДеревоОбъектов();
		
	Если Параметры.Ключ.Пустая() Тогда
		Объект.ТипЗначения = Неопределено;
		Элементы.ОбязательноеЗаполнение.Доступность = Ложь;
	Иначе
		Элементы.ОбязательноеЗаполнение.Доступность = ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.РазрешеноСоздаватьДоступныеЗначения(Объект.Ссылка);
		ОтметитьОбъектыВДереве();
	КонецЕсли;
	
	// Получение всех возможных типов значения объекта
	МассивТипов = Метаданные.ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.Тип.Типы();
	
	// Создание и заполнение списка для выбора типа значения
	СписокТипов = Новый СписокЗначений;
	Для Каждого ЭлементМассиваТипов Из МассивТипов Цикл
		СписокТипов.Добавить(ЭлементМассиваТипов, Строка(ЭлементМассиваТипов));
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипЗначения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Тип объекта"" не заполнено.", Объект.Ссылка, "ТипЗначения", "Объект.ТипЗначения", Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Очистка таблицы объектов
	ТекущийОбъект.ИспользоватьВОбъектах.Очистить();
	
	Дерево = РеквизитФормыВЗначение("ДеревоОбъектов", Тип("ДеревоЗначений"));
	
	ВыбранныТипы = Ложь;
		
	// Документы, справочники
	Для Каждого СтрокаРодителя Из Дерево.Строки Цикл
		
		// Типы документов, справочников
		Для Каждого СтрокаТипа Из СтрокаРодителя.Строки Цикл
			
			// Если строка помечена, значит она используется
			Если СтрокаТипа.Пометка = 1 Тогда
				
				// Проверка количества выбранных филиалов
				Если СтрокаТипа.Филиалы.Количество() > 0 Тогда
					
					// Добавление строк для каждого из указанных филиалов
					Для Каждого ЭлементСпискаФилиал Из СтрокаТипа.Филиалы Цикл
						НоваяСтрока = ТекущийОбъект.ИспользоватьВОбъектах.Добавить();
						НоваяСтрока.Тип = СтрокаТипа.Тип;
						НоваяСтрока.Филиал = ЭлементСпискаФилиал.Значение;
						НоваяСтрока.Описание = СтрокаТипа.Описание;
					КонецЦикла;
				Иначе // Добавление строки с пустой ссылкой (для всех филиалов)
					НоваяСтрока = ТекущийОбъект.ИспользоватьВОбъектах.Добавить();
					НоваяСтрока.Тип = СтрокаТипа.Тип;
					НоваяСтрока.Филиал = Справочники.Филиалы.ПустаяСсылка();
					НоваяСтрока.Описание = СтрокаТипа.Описание;
				КонецЕсли;
				
				ВыбранныТипы = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если НЕ ВыбранныТипы Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Требуется выбрать хотябы один объект.", Объект.Ссылка, "ДеревоОбъектов", "ДеревоОбъектов", Отказ);
	КонецЕсли;
	
	// Передача признака изменения типа реквизита
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ИзменилсяТипЗначения", ИзменилсяТипЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДеревоОбъектовФилиалыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
		
	ПараметрыОткрытия = Новый Структура("ВыбранныеФилиалы", ТекущиеДанные.Филиалы);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборФилиалов", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.Филиалы.Форма.МножественныйВыбор", ПараметрыОткрытия, ЭтотОбъект, КлючУникальности,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Избавление от невыбранного положения
	ТекущиеДанные.Пометка = ?(ТекущиеДанные.Пометка = 2, 0, ТекущиеДанные.Пометка);
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		УстановитьОтметкиПодчиненных(ТекущиеДанные);
	Иначе
		УстановитьОтметкуРодителя(ТекущиеДанные.ПолучитьРодителя());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЗначенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Ложь);
	ПараметрыОткрытия.Вставить("ВариантЗаполнения", 1);
	ПараметрыОткрытия.Вставить("ОтмеченныеЗначения", СписокТипов);
	ПараметрыОткрытия.Вставить("ЗаголовокОкна", "Тип значения");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборТипа", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ПодборЗначений", ПараметрыОткрытия, ЭтотОбъект, КлючУникальности,
		, , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещения

&НаКлиенте
Процедура ОбработатьВыборФилиалов(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("СписокЗначений") Тогда
		// Очистка предыдущих значений
		ТекущиеДанные.Филиалы.Очистить();
		ТекущиеДанные.ПредставлениеФилиалов = "";
		
		МассивПредставленийФилиалов = Новый Массив;
		
		// Обход списка значений и заполнение новыми значениями
		Для Каждого ЭлементСпискаЗначений Из Результат Цикл
			ТекущиеДанные.Филиалы.Добавить(ЭлементСпискаЗначений.Значение);
			МассивПредставленийФилиалов.Добавить(ЭлементСпискаЗначений.Представление);
		КонецЦикла;
		
		ТекущиеДанные.ПредставлениеФилиалов = СтрСоединить(МассивПредставленийФилиалов, ", ");
		
		// Установка отметки, если она ещё не установлена
		ТекущиеДанные.Пометка = 1;
		УстановитьОтметкуРодителя(ТекущиеДанные.ПолучитьРодителя());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборТипа(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Объект.ТипЗначения = Новый ОписаниеТипов(Результат);
		
		// Для примитивных типов отключим возможность установки обязательного заполнения
		ТипРезультата = Результат.Получить(0);
		Если ТипРезультата <> Тип("СправочникСсылка.ДоступныеЗначенияРеквизитов") Тогда
			Объект.ОбязательноеЗаполнение = Ложь;
			Элементы.ОбязательноеЗаполнение.Доступность = Ложь;
		Иначе
			Элементы.ОбязательноеЗаполнение.Доступность = Истина;
		КонецЕсли;
		
		// Установка модифицированности при изменении типа значения объекта
		Модифицированность = Истина;
		
		// Установка признака изменения типа значения
		ИзменилсяТипЗначения = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

&НаСервере
Процедура ЗаполнитьДеревоОбъектов()
	
	Дерево = РеквизитФормыВЗначение("ДеревоОбъектов", Тип("ДеревоЗначений"));
	Дерево.Строки.Очистить();
	
	// Получение типов, входящих в определяемый тип
	МассивТипов = Метаданные.ОпределяемыеТипы.ВладелецДополнительныхРеквизитов.Тип.Типы();
	
	// Перебор типов, поиск объектов метаданных и заполнение дерева
	Для Каждого ЭлементМассиваТипов Из МассивТипов Цикл
		НайденныйОбъект = Метаданные.НайтиПоТипу(ЭлементМассиваТипов);
		
		// Если в конфигурации есть такой тип
		Если НайденныйОбъект <> Неопределено Тогда			
			ПолноеИмяМетаданных = НайденныйОбъект.ПолноеИмя();
			
			// Получение принадлежности типа, например: Справочник, Документ и т.п.
			Принадлежность = Лев(ПолноеИмяМетаданных, СтрНайти(ПолноеИмяМетаданных, ".") - 1);
			ИмяМетаданных = НайденныйОбъект.Представление();
			
			// Поиск ветки родителя в дереве содание в случае отсутствия
			НайденнаяСтрока = Дерево.Строки.Найти(Принадлежность, "Представление");
			Если НайденнаяСтрока = Неопределено Тогда
				НайденнаяСтрока = Дерево.Строки.Добавить();
				НайденнаяСтрока.Представление = Принадлежность;
				НайденнаяСтрока.Картинка = БиблиотекаКартинок[Принадлежность];
				НайденнаяСтрока.ЭтоГруппа = Истина;
			КонецЕсли;
			
			// Добавление подчиненной строки
			СтрокаИмениМетаданных = НайденнаяСтрока.Строки.Добавить();
			СтрокаИмениМетаданных.Представление = ИмяМетаданных;
			СтрокаИмениМетаданных.Картинка = НайденнаяСтрока.Картинка;
			СтрокаИмениМетаданных.Тип = Новый(ЭлементМассиваТипов);
			СтрокаИмениМетаданных.Описание = ИмяМетаданных;
		КонецЕсли;
	КонецЦикла;
	
	Дерево.Строки.Сортировать("Представление", Истина);
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоОбъектов");
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьОбъектыВДереве()
	
	// Получение и очистка дерева
	Дерево = РеквизитФормыВЗначение("ДеревоОбъектов", Тип("ДеревоЗначений"));
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИспользоватьВОбъектах.Тип КАК Тип,
	|	ИспользоватьВОбъектах.Описание КАК Описание,
	|	ИспользоватьВОбъектах.Филиал КАК Филиал,
	|	ПРЕДСТАВЛЕНИЕ(ИспользоватьВОбъектах.Филиал) КАК ПредставлениеФилиал
	|ИЗ
	|	ПланВидовХарактеристик.ВидыДополнительныхРеквизитов.ИспользоватьВОбъектах КАК ИспользоватьВОбъектах
	|ГДЕ
	|	ИспользоватьВОбъектах.Ссылка = &Ссылка
	|ИТОГИ 
	|	МАКСИМУМ(Описание)
	|ПО
	|	Тип";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		// Обход дерева и заполнение пометок и филиалов
		ВыборкаТипы = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаТипы.Следующий() Цикл
			// Поиск строки дерева с указанным типом
			СтрокаДерева = Дерево.Строки.Найти(ВыборкаТипы.Тип, "Тип", Истина);
			Если СтрокаДерева <> Неопределено Тогда
				СтрокаДерева.Пометка = Истина;
				СтрокаДерева.Описание = ВыборкаТипы.Описание;
				
				МассивПредставленийФилиалов = Новый Массив;
				
				// Заполнение списка филиалов
				ВыборкаФилиалы = ВыборкаТипы.Выбрать();
				Пока ВыборкаФилиалы.Следующий() Цикл
					СтрокаДерева.Филиалы.Добавить(ВыборкаФилиалы.Филиал);
					МассивПредставленийФилиалов.Добавить(ВыборкаФилиалы.ПредставлениеФилиал);
				КонецЦикла;
				
				СтрокаДерева.ПредставлениеФилиалов = СтрСоединить(МассивПредставленийФилиалов, ", ");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоОбъектов");
	
	Для Каждого ПодчиненныйЭлемент Из ДеревоОбъектов.ПолучитьЭлементы() Цикл
		УстановитьОтметкуРодителя(ПодчиненныйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметкиПодчиненных(СтрокаДерева)
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		ПодчиненнаяСтрока.Пометка = СтрокаДерева.Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтметкуРодителя(Родитель)
	
	Подчиненные = Родитель.ПолучитьЭлементы();
	
	Всего = Подчиненные.Количество();
	Выбрано = 0;
	
	Для Каждого ПодчиненныйЭлемент Из Подчиненные Цикл
		Выбрано = Выбрано + ?(ПодчиненныйЭлемент.Пометка = 1, 1, 0);
	КонецЦикла;
	
	Если Выбрано = 0 Тогда
		Родитель.Пометка = 0;
	ИначеЕсли Выбрано = Всего Тогда
		Родитель.Пометка = 1;
	Иначе
		Родитель.Пометка = 2;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
