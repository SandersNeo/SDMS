///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Добавляет обработчики обновления
//
// Параметры:
//  Обработчики	 - ТаблицаЗначений	 - см. ПриложениеВызовСервера.ПолучитьОбработчикиДанных
//
Процедура ДобавлениеОбработчиковОбновления(Обработчики) Экспорт     
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ПланыВидовХарактеристик.ВидыНастроекФилиалов.ПроверитьПредопределенныеЭлементы";
	  
КонецПроцедуры

// Проверяет предопределенные настройки
//
Процедура ПроверитьПредопределенныеЭлементы() Экспорт 
	
	Тип_IT_QA = Новый Массив; 
	Тип_IT_QA.Добавить(Перечисления.ТипыФилиалов.IT);
	Тип_IT_QA.Добавить(Перечисления.ТипыФилиалов.QA);

	Тип_QA = Новый Массив; 
	Тип_QA.Добавить(Перечисления.ТипыФилиалов.QA);

	Тип_IT = Новый Массив; 
	Тип_IT.Добавить(Перечисления.ТипыФилиалов.IT);

	Тип_Все = Новый Массив; 
	Тип_Все.Добавить(Перечисления.ТипыФилиалов.IT);
	Тип_Все.Добавить(Перечисления.ТипыФилиалов.QA);
	Тип_Все.Добавить(Перечисления.ТипыФилиалов.НеIT);  

	ЗаполнитьПредопределеннуюГруппу("СотрудникиФилиала", 1, "Вертикальная");		
	
	Группа = "Основное";
	ЗаполнитьПредопределеннуюГруппу(Группа, 2, "");	
	ЗаполнитьПредопределенныйЭлемент("НаправлениеРазработки", "", 1, "",,, Истина,,,, Группа);   
	
	ЗаполнитьПредопределеннуюГруппу("КомандыРазработчиков", 1, "",, Истина, Тип_IT_QA);
	
	ЗаполнитьПредопределеннуюГруппу("СвязанныеФилиалы", 3, "",, Истина);
	ЗаполнитьПредопределеннуюГруппу("РазрабатываемыеСистемы", 4, "",, Истина, Тип_IT_QA); 
	
	Группа = "ПроцессРазработки";
	ЗаполнитьПредопределеннуюГруппу(Группа, 3, "Вертикальная",,, Тип_Все);		
	ЗаполнитьПредопределенныйЭлемент("ФилиалТестирования", "", 1, "",,, Истина,, Истина, Тип_IT, Группа);      
	ЗаполнитьПредопределенныйЭлемент("КомандаТестирования", "", 2, "",,, Истина,,, Тип_IT, Группа); 
	ЗаполнитьПредопределенныйЭлемент("ОцениватьЗадачиВStoryPoint", "", 4, "",,, Истина,,, Тип_IT_QA, Группа); 
	
    Группа = "CodeReview";
	ЗаполнитьПредопределеннуюГруппу(Группа, 1, "Вертикальная",, Истина, Тип_IT);		
	ЗаполнитьПредопределенныйЭлемент("ИсполнителяCodeReviewНазначаетРуководитель", "", 1, "",,, Истина,,, Тип_IT, Группа); 
	
	Группа = "АвтопулЗадач";
	ЗаполнитьПредопределеннуюГруппу(Группа, 1, "Вертикальная",, Истина, Тип_IT);
	ЗаполнитьПредопределенныйЭлемент("ИспользованиеАвтопулаЗадач", "", 1, "",, Истина, Истина,,, Тип_IT, Группа); 
	ЗаполнитьПредопределенныйЭлемент("ОтображатьСложностьЗадач", "", 2, "ИспользованиеАвтопулаЗадач",,, Истина,,, Тип_IT, Группа); 
	
	Группа = "ПодсветкаСрокаРеализации";
	ЗаполнитьПредопределеннуюГруппу(Группа, 5, "Горизонтальная",,, Тип_IT);		
	ЗаполнитьПредопределенныйЭлемент("ПодсвечиватьПриПриближенииСрокаРеализации", "", 1, "",, Истина, Истина,,, Тип_IT, Группа); 
	ЗаполнитьПредопределенныйЭлемент("КоличествоДнейДоСрокаРеализации", "", 2, "ПодсвечиватьПриПриближенииСрокаРеализации",,,,,, Тип_IT, Группа); 
	
	Группа = "ГруппаПроцессУстановкиСтатусов";
	ЗаполнитьПредопределеннуюГруппу(Группа, 8, "Вертикальная", Истина);		
	ЗаполнитьПредопределенныйЭлемент("ПроцессУстановкиСтатусовВнутреннееЗадание", "", 1, "",,, Истина,,,, Группа); 
	ЗаполнитьПредопределенныйЭлемент("ПроцессУстановкиСтатусов", "", 2, "",,, Истина,,, Тип_IT_QA, Группа); 
	
	Группа = "КонтрольКачества";
	ЗаполнитьПредопределеннуюГруппу(Группа, 4, "Вертикальная",,, Тип_QA);		
	ЗаполнитьПредопределенныйЭлемент("ЗапросСозданияЗадачиАвтотеста", "", 1, "",,, Истина,,, Тип_QA, Группа); 
	ЗаполнитьПредопределенныйЭлемент("РазрешениеРаботатьСПуломЗадач", "", 2, "",,, Истина,,, Тип_QA, Группа); 
	ЗаполнитьПредопределенныйЭлемент("УведомлятьОПереводеЗадач", "", 3, "",,, Истина,,, Тип_QA, Группа); 
	
	Группа = "Автотесты";
	ЗаполнитьПредопределеннуюГруппу(Группа, 1, "Вертикальная",,, Тип_QA);		
	ЗаполнитьПредопределенныйЭлемент("ПрефиксЗадачиАвтотеста", "", 1, "",,, Истина,,, Тип_QA, Группа); 
	ЗаполнитьПредопределенныйЭлемент("ТипДляЗадачиАвтотеста", "", 2, "",,, Истина,,, Тип_QA, Группа); 	
	
	Группа = "Документация";
	ЗаполнитьПредопределеннуюГруппу(Группа, 1, "Вертикальная",,, Тип_QA);		
	ЗаполнитьПредопределенныйЭлемент("ПрефиксЗадачиДокументации", "", 1, "",,, Истина,,, Тип_QA, Группа); 
	ЗаполнитьПредопределенныйЭлемент("ТипДляЗадачиДокументации", "", 2, "",,, Истина,,,Тип_QA, Группа); 	
	
	Группа = "ЗаполнениеДополнительныхЗадач";
	ЗаполнитьПредопределеннуюГруппу(Группа, 1, "Вертикальная",,, Тип_QA);
	ЗаполнитьПредопределенныйЭлемент("НазначениеДополнительныхЗадач", "", 1, "",,, Истина,,, Тип_QA, Группа); 
	ЗаполнитьПредопределенныйЭлемент("НаправлениеДополнительныхЗадач", "", 2, "",,, Истина,,, Тип_QA, Группа); 
	ЗаполнитьПредопределенныйЭлемент("СистемаУчетаДополнительныхЗадач", "", 3, "",,, Истина,,, Тип_QA, Группа); 
	
	ЗаполнитьПредопределеннуюГруппу("ТипыЗадач", 1, "",, Истина, Тип_QA); 
	
	ЗаполнитьПредопределеннуюГруппу("Трудозатраты", 5, "Вертикальная");		
	ЗаполнитьПредопределеннуюГруппу("ВидыДеятельности", 1, "Вертикальная",, Истина);
	
	Группа = "НапоминанияОТрудозатратах";
	ЗаполнитьПредопределеннуюГруппу(Группа, 2, "Вертикальная", Истина,, Тип_IT_QA);
	ЗаполнитьПредопределенныйЭлемент("УведомлятьОТрудозатратах", "", 1, "",, Истина, Истина,,,, Группа); 
    ЗаполнитьПредопределенныйЭлемент("ВремяНапоминанияОТрудозатратах", "", 2, "УведомлятьОТрудозатратах",,, Истина,,, Тип_IT_QA, Группа);
	
	Группа = "ВнутренниеТрудозатраты";
	ЗаполнитьПредопределеннуюГруппу(Группа, 3, "", Истина);		
	Подсказка = "При занесении трудозатрат у сотрудника будет автоматически сниматься флаг активности.";
	ЗаполнитьПредопределенныйЭлемент("СниматьАктивностьПриЗанесенииТрудозатрат", Подсказка, 1, "",,, Истина,,,, Группа); 

	Группа = "Прочее";
	ЗаполнитьПредопределеннуюГруппу(Группа, 7, "Вертикальная");		
	
	Список = Новый СписокЗначений;      
	Список.Добавить(-8, "Калининградское время (МСК-1)");
	Список.Добавить(-7, "Московское время (МСК)");
	Список.Добавить(-6, "Самарское время (МСК+1)");
	Список.Добавить(-5, "Екатеринбургское время (МСК+2)");
	Список.Добавить(-4, "Омское время (МСК+3)");
	Список.Добавить(-3, "Красноярское время (МСК+4)");
	Список.Добавить(-2, "Иркутское время (МСК+5)");
	Список.Добавить(-1, "Якутское время (МСК+6)");
	Список.Добавить(0, "Владивостокское время (МСК+7)");
	Список.Добавить(1, "Магаданское время (МСК+8)");
	Список.Добавить(2, "Камчатское время (МСК+9)");

	ЗаполнитьПредопределенныйЭлемент("СмещениеЧасовогоПоясаОтносительноВладивостока", "", 1, "", Список,, Истина,,,, Группа); 

КонецПроцедуры     

#КонецОбласти  

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПредопределенныйЭлемент(ИмяЭлемента, Подсказка, ПорядокСледования, ГлавныйРеквизит, СписокВыбора = Неопределено,
	Основной = Ложь, ОтображатьЗаголовок = Ложь, Скрытый = Ложь, СохранятьИсториюИзменений = Ложь, ТипыФилиалов = Неопределено, Родитель = "")
 
	Попытка
		Объект = ОбщегоНазначения.ПредопределенныйЭлемент("ПланВидовХарактеристик.ВидыНастроекФилиалов." + ИмяЭлемента);
	Исключение
		Сообщение = НСтр("ru = 'Предопределенная группа ""%Параметр%"" не найден.'");
		Сообщение = СтрЗаменить(Сообщение, "%Параметр%", "ПланыВидовХарактеристик.ВидыНастроекФилиалов." + ИмяЭлемента);
		ВызватьИсключение Сообщение;
	КонецПопытки;
	
	Если Объект = Неопределено Тогда  
		Сообщение = НСтр("ru = 'Предопределенная группа ""%Параметр%"" не найден.'");
		Сообщение = СтрЗаменить(Сообщение, "%Параметр%", "ПланыВидовХарактеристик.ВидыНастроекФилиалов." + ИмяЭлемента);
		ВызватьИсключение Сообщение;
	КонецЕсли;

	Объект = Объект.ПолучитьОбъект();  
	
	Если Объект.ПорядокСледования = 0 Тогда 	
		Объект.ПорядокСледования = ПорядокСледования;
		Объект.ГлавныйРеквизит = ОбщегоНазначения.ПредопределенныйЭлемент("ПланВидовХарактеристик.ВидыНастроекФилиалов." + ГлавныйРеквизит);
		Объект.Основной = Основной;
		Объект.ОтображатьЗаголовок = ОтображатьЗаголовок;
		Объект.СохранятьИсториюИзменений = СохранятьИсториюИзменений;
		Объект.ИспользоватьСписокВыбора = СписокВыбора <> Неопределено;
		
		Если Родитель <> "" Тогда 
			Объект.Родитель = ОбщегоНазначения.ПредопределенныйЭлемент("ПланВидовХарактеристик.ВидыНастроекФилиалов." + Родитель);
		КонецЕсли;
		
		Если Объект.ИспользоватьСписокВыбора Тогда 
			Объект.СписокВыбора.Очистить();
			
			Для Каждого Элемент Из СписокВыбора Цикл  
				НоваяСтрока = Объект.СписокВыбора.Добавить();
				НоваяСтрока.Значение = Элемент.Значение;
				НоваяСтрока.Представление = Элемент.Представление;
			КонецЦикла;
		КонецЕсли; 
		
		Если ТипыФилиалов <> Неопределено Тогда 
			Объект.ТипыФилиалов.Очистить();
			
			Для Каждого Элемент Из ТипыФилиалов Цикл  
				НоваяСтрока = Объект.ТипыФилиалов.Добавить();
				НоваяСтрока.ТипФилиала = Элемент;
			КонецЦикла;
		КонецЕсли;
		
		Объект.Записать();                     
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПредопределеннуюГруппу(ИмяЭлемента, ПорядокСледования, ВариантГруппировки,
	ОтображатьЗаголовок = Ложь, ОтображатьКакПодраздел = Ложь, ТипыФилиалов = Неопределено)
 
	Попытка
		Объект = ОбщегоНазначения.ПредопределенныйЭлемент("ПланВидовХарактеристик.ВидыНастроекФилиалов." + ИмяЭлемента);
	Исключение
		Сообщение = НСтр("ru = 'Предопределенная группа ""%Параметр%"" не найден.'");
		Сообщение = СтрЗаменить(Сообщение, "%Параметр%", "ПланыВидовХарактеристик.ВидыНастроекФилиалов." + ИмяЭлемента);
		ВызватьИсключение Сообщение;
	КонецПопытки;
	
	Если Объект = Неопределено Тогда  
		Сообщение = НСтр("ru = 'Предопределенная группа ""%Параметр%"" не найден.'");
		Сообщение = СтрЗаменить(Сообщение, "%Параметр%", "ПланыВидовХарактеристик.ВидыНастроекФилиалов." + ИмяЭлемента);
		ВызватьИсключение Сообщение;
	КонецЕсли;
	
	Объект = Объект.ПолучитьОбъект();  
	
	Если Объект.ПорядокСледования = 0 Тогда
		Объект.ВариантГруппировки = ВариантГруппировки;
		Объект.ПорядокСледования = ПорядокСледования;
		Объект.ОтображатьЗаголовок = ОтображатьЗаголовок;
		Объект.ОтображатьКакПодраздел = ОтображатьКакПодраздел;   
		
		Если ТипыФилиалов <> Неопределено Тогда 
			Объект.ТипыФилиалов.Очистить();
			
			Для Каждого Элемент Из ТипыФилиалов Цикл  
				НоваяСтрока = Объект.ТипыФилиалов.Добавить();
				НоваяСтрока.ТипФилиала = Элемент;
			КонецЦикла;
		КонецЕсли;
		
		Объект.Записать();                     
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
