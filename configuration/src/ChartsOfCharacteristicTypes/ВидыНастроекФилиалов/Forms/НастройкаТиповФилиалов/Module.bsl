///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

// Хранит измененные данные
&НаКлиенте
Перем ИзмененныеДанные;

// Хранит идентификаторы строк настроек с измененными типами филиалов
&НаКлиенте
Перем ИдентификаторыСтрок;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСписок();
	ЗаполнитьТипыФилиалов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросСохраненияНастроек", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сохранить(Команда)
	
	Если ИзмененныеДанные.Количество() > 0 Тогда
		ДанныеСохранены = СохранитьДанныеНаСервере(ИзмененныеДанные);
		
		Если ДанныеСохранены Тогда
			Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
				НайденнаяСтрока = Список.НайтиПоИдентификатору(ИдентификаторСтроки.Ключ);
				Если НайденнаяСтрока <> Неопределено Тогда
					НайденнаяСтрока.КартинкаИзменено = Неопределено;
					НайденнаяСтрока.ЕстьОграничения = ИзмененныеДанные.Получить(НайденнаяСтрока.Ссылка);
				КонецЕсли;
			КонецЦикла;
			
			ИдентификаторыСтрок.Очистить();
			ИзмененныеДанные.Очистить();
			Модифицированность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Ссылка);
		Если ТекущиеДанные.ЭтоГруппа Тогда
			ИмяОткрываемойФормы = "ПланВидовХарактеристик.ВидыНастроекФилиалов.Форма.ФормаГруппы";
		Иначе
			ИмяОткрываемойФормы = "ПланВидовХарактеристик.ВидыНастроекФилиалов.Форма.ФормаЭлемента";
		КонецЕсли;
		
		ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОтборСтрок = Новый ФиксированнаяСтруктура("Настройка", ТекущиеДанные.Ссылка);
		Элементы.ТипыФилиалов.ОтборСтрок = ОтборСтрок;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипыФилиаловПометкаПриИзменении(Элемент)
	
	СохранитьИзмененныеДанные();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВывестиСтрокуДереваСПодчиненными(Элемент, Строка, Подчиненные)
	
	НоваяСтрока = Элемент.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	
	ОтборСтрок = Новый Структура("Родитель", Строка.Ссылка);
	НайденныеСтроки = Подчиненные.НайтиСтроки(ОтборСтрок);
	
	Для Каждого ПодчиненнаяСтрока Из НайденныеСтроки Цикл
		ВывестиСтрокуДереваСПодчиненными(НоваяСтрока, ПодчиненнаяСтрока, Подчиненные);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписок()
	
	Список.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыНастроекФилиала.Ссылка КАК Ссылка,
	|	ВидыНастроекФилиала.Наименование КАК Наименование,
	|	ВидыНастроекФилиала.ЭтоГруппа КАК ЭтоГруппа,
	|	ВидыНастроекФилиалаТипыФилиалов.Ссылка ЕСТЬ НЕ NULL  КАК ЕстьОграничения,
	|	ВЫБОР
	|		КОГДА ВидыНастроекФилиала.ЭтоГруппа
	|			ТОГДА ВЫБОР
	|					КОГДА ВидыНастроекФилиала.ПометкаУдаления
	|						ТОГДА 1
	|					КОГДА ВидыНастроекФилиала.Предопределенный
	|						ТОГДА 2
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВидыНастроекФилиала.ПометкаУдаления
	|					ТОГДА 4
	|				КОГДА ВидыНастроекФилиала.Предопределенный
	|					ТОГДА 5
	|				ИНАЧЕ 3
	|			КОНЕЦ
	|	КОНЕЦ КАК ИндексКартинки,
	|	ВидыНастроекФилиала.Родитель КАК Родитель
	|ИЗ
	|	ПланВидовХарактеристик.ВидыНастроекФилиалов КАК ВидыНастроекФилиала
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ВидыНастроекФилиалов.ТипыФилиалов КАК ВидыНастроекФилиалаТипыФилиалов
	|		ПО ВидыНастроекФилиала.Ссылка = ВидыНастроекФилиалаТипыФилиалов.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаЗначений = РезультатЗапроса.Выгрузить();
		
		ОтборСтрок = Новый Структура("Родитель", ПланыВидовХарактеристик.ВидыНастроекФилиалов.ПустаяСсылка());
		КорневыеЭлементы = ТаблицаЗначений.Скопировать(ОтборСтрок);
		
		Для Каждого Строка Из КорневыеЭлементы Цикл
			ВывестиСтрокуДереваСПодчиненными(Список, Строка, ТаблицаЗначений);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипыФилиалов()
	
	ТипыФилиалов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыНастроекФилиалов.Ссылка КАК Ссылка,
	|	ПеречислениеТипыФилиалов.Ссылка КАК ТипФилиала
	|ПОМЕСТИТЬ ДанныеТаблицы
	|ИЗ
	|	ПланВидовХарактеристик.ВидыНастроекФилиалов КАК ВидыНастроекФилиалов,
	|	Перечисление.ТипыФилиалов КАК ПеречислениеТипыФилиалов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТаблицы.Ссылка КАК Настройка,
	|	ДанныеТаблицы.ТипФилиала КАК ТипФилиала,
	|	ВидыНастроекФилиаловТипыФилиалов.Ссылка ЕСТЬ НЕ NULL  КАК Пометка
	|ИЗ
	|	ДанныеТаблицы КАК ДанныеТаблицы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ВидыНастроекФилиалов.ТипыФилиалов КАК ВидыНастроекФилиаловТипыФилиалов
	|		ПО ДанныеТаблицы.Ссылка = ВидыНастроекФилиаловТипыФилиалов.Ссылка
	|			И ДанныеТаблицы.ТипФилиала = ВидыНастроекФилиаловТипыФилиалов.ТипФилиала";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаЗначений = РезультатЗапроса.Выгрузить();
		ТипыФилиалов.Загрузить(ТаблицаЗначений);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросСохраненияНастроек(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДанныеСохранены = СохранитьДанныеНаСервере(ИзмененныеДанные);
		Если ДанныеСохранены Тогда
			ИзмененныеДанные.Очистить();
			Модифицированность = Ложь;
		КонецЕсли;
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ИзмененныеДанные.Очистить();
		Модифицированность = Ложь;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция СохранитьДанныеНаСервере(ИзмененныеДанные)
	
	Результат = Истина;
	
	ТаблицаСсылок = Новый ТаблицаЗначений;
	ТаблицаСсылок.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыНастроекФилиалов"));
	
	СохраняемыеОбъекты = Новый Массив;
	ДополнительныеДанные = Новый Соответствие;
	
	ОтборСтрок = Новый Структура("Настройка");
	
	Для Каждого ЭлементСоответствия Из ИзмененныеДанные Цикл
		ОтборСтрок.Настройка = ЭлементСоответствия.Ключ;
		ТипыФилиаловНастройки = ТипыФилиалов.НайтиСтроки(ОтборСтрок);
		
		НастройкаОбъект = ЭлементСоответствия.Ключ.ПолучитьОбъект();
		НастройкаОбъект.ОбменДанными.Загрузка = Истина;
		
		НастройкаОбъект.ТипыФилиалов.Очистить();
		
		ЕстьПомеченные = Ложь;
		Для Каждого СтрокаТаблицы Из ТипыФилиаловНастройки Цикл
			Если СтрокаТаблицы.Пометка Тогда
				НастройкаОбъект.ТипыФилиалов.Добавить().ТипФилиала = СтрокаТаблицы.ТипФилиала;
				ЕстьПомеченные = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаСсылок.Добавить().Ссылка = ЭлементСоответствия.Ключ;
		СохраняемыеОбъекты.Добавить(НастройкаОбъект);
		ДополнительныеДанные.Вставить(ЭлементСоответствия.Ключ, ЕстьПомеченные);
	КонецЦикла;
	
	ИзмененныеДанные = ДополнительныеДанные;
	
	Если СохраняемыеОбъекты.Количество() > 0 Тогда
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("ПланВидовХарактеристик.ВидыНастроекФилиалов");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.ИсточникДанных = ТаблицаСсылок;
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		НачатьТранзакцию();
		Попытка
			БлокировкаДанных.Заблокировать();
			
			Для Каждого НастройкаОбъект Из СохраняемыеОбъекты Цикл
				НастройкаОбъект.Записать();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Результат = Ложь;
			
			Информация = ИнформацияОбОшибке();
			ПодробнаяИнформация = ПодробноеПредставлениеОшибки(Информация);
			
			ЗаписьЖурналаРегистрации("Настройки филиалов.Установка типов филиалов", УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ПланыВидовХарактеристик.ВидыНастроекФилиалов, , ПодробнаяИнформация);
		КонецПопытки;
	КонецЕсли;
	
	Если Результат Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СохранитьИзмененныеДанные()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.КартинкаИзменено = БиблиотекаКартинок.Редактирование;
		Модифицированность = Истина;
		
		ИзмененныеДанные.Вставить(ТекущиеДанные.Ссылка);
		ИдентификаторыСтрок.Вставить(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияПеременных

#Если ТонкийКлиент ИЛИ ВебКлиент Тогда

ИзмененныеДанные = Новый Соответствие;
ИдентификаторыСтрок = Новый Соответствие;

#КонецЕсли

#КонецОбласти
