///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет запись/записи в регистр сведений ПодготовленныеСообщенияПользователяПоКатегориям.
//
// Параметры:
//  Получатели     				 - Массив - массив получателей сообщения.
//  Ссылка 						 - СправочникСсылка, ДокументСсылка - ссылка на объект.
//  ТаблицаСообщенийПользователю - ТаблицаЗначений, Структура - 
//		текст сообщения, значение реквизита / текст сообщения, категория сообщения(структура)
//
Процедура Добавить(Знач Получатели, Знач Ссылка, Знач ТаблицаСообщенийПользователю, Знач Инициатор = Неопределено) Экспорт
	
	ИдентификаторКомментария = Неопределено;
	
	Если ТипЗнч(ТаблицаСообщенийПользователю) = Тип("ТаблицаЗначений") Тогда
		ТаблицаПолучателейСообщенийПоКатегориям = ПолучитьТаблицуПолучателейОповещенийИзТаблицыЗначений(Получатели, ТаблицаСообщенийПользователю, Ссылка);
	Иначе
		ТаблицаПолучателейСообщенийПоКатегориям = ПолучитьТаблицуПолучателейОповещенийИзСтруктуры(Получатели, ТаблицаСообщенийПользователю, ИдентификаторКомментария);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
#Область ТекстЗапроса
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВнешняяТаблицаДанных.Пользователь КАК Пользователь,
	|	ВнешняяТаблицаДанных.КатегорияСообщения КАК Категория,
	|	ВнешняяТаблицаДанных.ТекстСообщения КАК ТекстСообщения,
	|	ВнешняяТаблицаДанных.ТекстSDMS КАК ТекстSDMS,
	|	ВнешняяТаблицаДанных.Данные КАК Данные,
	|	ВнешняяТаблицаДанных.ДатаСобытия КАК ДатаСобытия
	|ПОМЕСТИТЬ ТаблицаДанныхДляОтправки
	|ИЗ
	|	&ВнешняяТаблицаДанных КАК ВнешняяТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаДанныхДляОтправки.Пользователь КАК Справочник.Пользователи) КАК Пользователь
	|ПОМЕСТИТЬ ПользователиДляОповещения
	|ИЗ
	|	ТаблицаДанныхДляОтправки КАК ТаблицаДанныхДляОтправки
	|ГДЕ
	|	ТаблицаДанныхДляОтправки.Пользователь ССЫЛКА Справочник.Пользователи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПользователиДляОповещения.Пользователь КАК Пользователь,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(НастройкиПользователяИспользованиеГруппировки.Значение, ЛОЖЬ) КАК БУЛЕВО) КАК ИспользоватьГруппировкуСообщений,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА НастройкиПользователяИспользованиеГруппировки.Значение ЕСТЬ NULL
	|					ИЛИ НЕ ВЫРАЗИТЬ(НастройкиПользователяИспользованиеГруппировки.Значение КАК БУЛЕВО)
	|				ТОГДА 0
	|			ИНАЧЕ ЕСТЬNULL(НастройкиПользователяВариантГруппировки.Значение, 0)
	|		КОНЕЦ КАК ЧИСЛО(10, 0)) КАК ВариантГруппировки,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(НастройкиПользователяГруппировкаКатегорий.Значение, ИСТИНА) КАК БУЛЕВО) КАК ГруппироватьКатегории
	|ПОМЕСТИТЬ НастройкиГруппировкиСообщенийПользователей
	|ИЗ
	|	ПользователиДляОповещения КАК ПользователиДляОповещения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователя КАК НастройкиПользователяИспользованиеГруппировки
	|		ПО ПользователиДляОповещения.Пользователь = НастройкиПользователяИспользованиеГруппировки.Пользователь
	|			И (НастройкиПользователяИспользованиеГруппировки.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ИспользоватьГруппировкуСообщений))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователя КАК НастройкиПользователяВариантГруппировки
	|		ПО ПользователиДляОповещения.Пользователь = НастройкиПользователяВариантГруппировки.Пользователь
	|			И (НастройкиПользователяВариантГруппировки.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ВариантГруппировкиСообщений))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователя КАК НастройкиПользователяГруппировкаКатегорий
	|		ПО ПользователиДляОповещения.Пользователь = НастройкиПользователяГруппировкаКатегорий.Пользователь
	|			И (НастройкиПользователяГруппировкаКатегорий.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ГруппироватьСообщенияПоКатегориям))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанныхДляОтправки.ТекстСообщения КАК ТекстСообщения,
	|	ТаблицаДанныхДляОтправки.Пользователь КАК Пользователь,
	|	ТаблицаДанныхДляОтправки.Категория КАК КатегорияОповещения,
	|	ТаблицаДанныхДляОтправки.ДатаСобытия КАК ДатаСобытия,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОповещенийПользователя.ЭлектроннаяПочта) КАК ТипОповещения,
	|	ЗНАЧЕНИЕ(Перечисление.ЧастотаОповещенийПользователя.Незамедлительно) КАК ПериодОтправки,
	|	ЛОЖЬ КАК ИспользоватьГруппировкуСообщений,
	|	0 КАК ВариантГруппировки,
	|	ИСТИНА КАК ГруппироватьКатегории
	|ПОМЕСТИТЬ ПодготовленнаяТаблицаДляЗаписи
	|ИЗ
	|	ТаблицаДанныхДляОтправки КАК ТаблицаДанныхДляОтправки
	|ГДЕ
	|	ТаблицаДанныхДляОтправки.Пользователь ССЫЛКА Справочник.Подписчики
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДанныхДляОтправки.ТекстСообщения,
	|	ТаблицаДанныхДляОтправки.Пользователь,
	|	ТаблицаДанныхДляОтправки.Категория,
	|	ТаблицаДанныхДляОтправки.ДатаСобытия,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОповещенийПользователя.ЭлектроннаяПочта),
	|	ЕСТЬNULL(ПользователиНастройкиОповещений.ПериодОтправки, ЗНАЧЕНИЕ(Перечисление.ЧастотаОповещенийПользователя.Незамедлительно)),
	|	НастройкиГруппировкиСообщенийПользователей.ИспользоватьГруппировкуСообщений,
	|	НастройкиГруппировкиСообщенийПользователей.ВариантГруппировки,
	|	НастройкиГруппировкиСообщенийПользователей.ГруппироватьКатегории
	|ИЗ
	|	ТаблицаДанныхДляОтправки КАК ТаблицаДанныхДляОтправки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.НастройкиОповещений КАК ПользователиНастройкиОповещений
	|		ПО ((ВЫРАЗИТЬ(ТаблицаДанныхДляОтправки.Пользователь КАК Справочник.Пользователи)) = ПользователиНастройкиОповещений.Ссылка)
	|			И ТаблицаДанныхДляОтправки.Категория = ПользователиНастройкиОповещений.КатегорияОповещения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ((ВЫРАЗИТЬ(ТаблицаДанныхДляОтправки.Пользователь КАК Справочник.Пользователи)) = Пользователи.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиГруппировкиСообщенийПользователей КАК НастройкиГруппировкиСообщенийПользователей
	|		ПО (Пользователи.Ссылка = НастройкиГруппировкиСообщенийПользователей.Пользователь)
	|ГДЕ
	|	ЕСТЬNULL(ПользователиНастройкиОповещений.ЭлектроннаяПочта, ИСТИНА)
	|	И НЕ Пользователи.ОтключитьВсеОповещения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДанныхДляОтправки.ТекстСообщения,
	|	ТаблицаДанныхДляОтправки.Пользователь,
	|	ТаблицаДанныхДляОтправки.Категория,
	|	ТаблицаДанныхДляОтправки.ДатаСобытия,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОповещенийПользователя.ОповещениеВРабочийСтол),
	|	ЕСТЬNULL(ПользователиНастройкиОповещений.ПериодОтправки, ЗНАЧЕНИЕ(Перечисление.ЧастотаОповещенийПользователя.Незамедлительно)),
	|	НастройкиГруппировкиСообщенийПользователей.ИспользоватьГруппировкуСообщений,
	|	НастройкиГруппировкиСообщенийПользователей.ВариантГруппировки,
	|	НастройкиГруппировкиСообщенийПользователей.ГруппироватьКатегории
	|ИЗ
	|	ТаблицаДанныхДляОтправки КАК ТаблицаДанныхДляОтправки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.НастройкиОповещений КАК ПользователиНастройкиОповещений
	|		ПО ((ВЫРАЗИТЬ(ТаблицаДанныхДляОтправки.Пользователь КАК Справочник.Пользователи)) = ПользователиНастройкиОповещений.Ссылка)
	|			И ТаблицаДанныхДляОтправки.Категория = ПользователиНастройкиОповещений.КатегорияОповещения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ((ВЫРАЗИТЬ(ТаблицаДанныхДляОтправки.Пользователь КАК Справочник.Пользователи)) = Пользователи.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиГруппировкиСообщенийПользователей КАК НастройкиГруппировкиСообщенийПользователей
	|		ПО (ПользователиНастройкиОповещений.Ссылка = НастройкиГруппировкиСообщенийПользователей.Пользователь)
	|ГДЕ
	|	ПользователиНастройкиОповещений.ОповещениеВРабочийСтол
	|	И НЕ Пользователи.ОтключитьВсеОповещения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодготовленнаяТаблицаДляЗаписи.Пользователь КАК Пользователь,
	|	ПодготовленнаяТаблицаДляЗаписи.ТипОповещения КАК ТипОповещения,
	|	ПодготовленнаяТаблицаДляЗаписи.КатегорияОповещения КАК КатегорияОповещения,
	|	ПодготовленнаяТаблицаДляЗаписи.ТекстСообщения КАК ТекстСообщения,
	|	ПодготовленнаяТаблицаДляЗаписи.ДатаСобытия КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА ПодготовленнаяТаблицаДляЗаписи.ПериодОтправки = ЗНАЧЕНИЕ(Перечисление.ЧастотаОповещенийПользователя.Незамедлительно)
	|			ТОГДА ВЫБОР
	|					КОГДА ПодготовленнаяТаблицаДляЗаписи.КатегорияОповещения = ЗНАЧЕНИЕ(Перечисление.КатегорииСообщенийПользователя.Комментарии)
	|						ТОГДА ДОБАВИТЬКДАТЕ(ПодготовленнаяТаблицаДляЗаписи.ДатаСобытия, МИНУТА, 30)
	|					ИНАЧЕ ПодготовленнаяТаблицаДляЗаписи.ДатаСобытия
	|				КОНЕЦ
	|		КОГДА ПодготовленнаяТаблицаДляЗаписи.ПериодОтправки = ЗНАЧЕНИЕ(Перечисление.ЧастотаОповещенийПользователя.День)
	|			ТОГДА КОНЕЦПЕРИОДА(ПодготовленнаяТаблицаДляЗаписи.ДатаСобытия, ДЕНЬ)
	|		КОГДА ПодготовленнаяТаблицаДляЗаписи.ПериодОтправки = ЗНАЧЕНИЕ(Перечисление.ЧастотаОповещенийПользователя.Неделя)
	|			ТОГДА КОНЕЦПЕРИОДА(ПодготовленнаяТаблицаДляЗаписи.ДатаСобытия, НЕДЕЛЯ)
	|		КОГДА ПодготовленнаяТаблицаДляЗаписи.ПериодОтправки = ЗНАЧЕНИЕ(Перечисление.ЧастотаОповещенийПользователя.ДесятьМинут)
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПодготовленнаяТаблицаДляЗаписи.ДатаСобытия, ЧАС), МИНУТА, (ВЫРАЗИТЬ(МИНУТА(ПодготовленнаяТаблицаДляЗаписи.ДатаСобытия) / 10 + 0.5 КАК ЧИСЛО(15, 0))) * 10)
	|		КОГДА ПодготовленнаяТаблицаДляЗаписи.ПериодОтправки = ЗНАЧЕНИЕ(Перечисление.ЧастотаОповещенийПользователя.ТридцатьМинут)
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПодготовленнаяТаблицаДляЗаписи.ДатаСобытия, ЧАС), МИНУТА, (ВЫРАЗИТЬ(МИНУТА(ПодготовленнаяТаблицаДляЗаписи.ДатаСобытия) / 30 + 0.5 КАК ЧИСЛО(15, 0))) * 30)
	|		КОГДА ПодготовленнаяТаблицаДляЗаписи.ПериодОтправки = ЗНАЧЕНИЕ(Перечисление.ЧастотаОповещенийПользователя.Час)
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПодготовленнаяТаблицаДляЗаписи.ДатаСобытия, ЧАС), МИНУТА, (ВЫРАЗИТЬ(МИНУТА(ПодготовленнаяТаблицаДляЗаписи.ДатаСобытия) / 60 + 0.5 КАК ЧИСЛО(15, 0))) * 60)
	|		ИНАЧЕ ПодготовленнаяТаблицаДляЗаписи.ДатаСобытия
	|	КОНЕЦ КАК ПериодОтправки,
	|	ПодготовленнаяТаблицаДляЗаписи.ПериодОтправки КАК ПериодичностьОтправки,
	|	ВЫБОР
	|		КОГДА ПодготовленнаяТаблицаДляЗаписи.ПериодОтправки = ЗНАЧЕНИЕ(Перечисление.ЧастотаОповещенийПользователя.Незамедлительно)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ПодготовленнаяТаблицаДляЗаписи.ИспользоватьГруппировкуСообщений
	|	КОНЕЦ КАК ГруппироватьСообщения,
	|	ПодготовленнаяТаблицаДляЗаписи.ВариантГруппировки КАК ВариантГруппировки,
	|	ПодготовленнаяТаблицаДляЗаписи.ГруппироватьКатегории КАК ГруппироватьКатегории
	|ПОМЕСТИТЬ ПодготовленныеДанные
	|ИЗ
	|	ПодготовленнаяТаблицаДляЗаписи КАК ПодготовленнаяТаблицаДляЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанныхДляОтправки.ТекстSDMS КАК Текст,
	|	ТаблицаДанныхДляОтправки.Данные КАК Данные,
	|	ТаблицаДанныхДляОтправки.Пользователь КАК Пользователь,
	|	ТаблицаДанныхДляОтправки.Категория КАК КатегорияОповещения,
	|	ТаблицаДанныхДляОтправки.ДатаСобытия КАК ДатаСобытия
	|ИЗ
	|	ТаблицаДанныхДляОтправки КАК ТаблицаДанныхДляОтправки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи.НастройкиОповещений КАК ПользователиНастройкиОповещений
	|		ПО ((ВЫРАЗИТЬ(ТаблицаДанныхДляОтправки.Пользователь КАК Справочник.Пользователи)) = ПользователиНастройкиОповещений.Ссылка)
	|			И ТаблицаДанныхДляОтправки.Категория = ПользователиНастройкиОповещений.КатегорияОповещения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ((ВЫРАЗИТЬ(ТаблицаДанныхДляОтправки.Пользователь КАК Справочник.Пользователи)) = Пользователи.Ссылка)
	|ГДЕ
	|	ПользователиНастройкиОповещений.СистемаВзаимодействия
	|	И ПользователиНастройкиОповещений.КатегорияОповещения <> ЗНАЧЕНИЕ(Перечисление.КатегорииСообщенийПользователя.Комментарии)
	|	И НЕ Пользователи.ОтключитьВсеОповещения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодготовленныеДанные.Пользователь КАК Пользователь,
	|	ПодготовленныеДанные.ТипОповещения КАК ТипОповещения,
	|	ПодготовленныеДанные.КатегорияОповещения КАК КатегорияОповещения,
	|	ПодготовленныеДанные.ТекстСообщения КАК ТекстСообщения,
	|	ПодготовленныеДанные.ДатаСобытия КАК ДатаСобытия,
	|	ПодготовленныеДанные.ПериодОтправки КАК ПериодОтправки,
	|	ПодготовленныеДанные.ПериодичностьОтправки КАК ПериодичностьОтправки,
	|	ПодготовленныеДанные.ГруппироватьСообщения КАК ГруппироватьСообщения,
	|	ПодготовленныеДанные.ВариантГруппировки КАК ВариантГруппировки
	|ИЗ
	|	ПодготовленныеДанные КАК ПодготовленныеДанные
	|ГДЕ
	|	ПодготовленныеДанные.ГруппироватьКатегории
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодОтправки
	|ИТОГИ
	|	МИНИМУМ(ГруппироватьСообщения),
	|	МАКСИМУМ(ВариантГруппировки)
	|ПО
	|	Пользователь,
	|	ДатаСобытия,
	|	ТипОповещения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодготовленныеДанные.Пользователь КАК Пользователь,
	|	ПодготовленныеДанные.ТипОповещения КАК ТипОповещения,
	|	ПодготовленныеДанные.КатегорияОповещения КАК КатегорияОповещения,
	|	ПодготовленныеДанные.ТекстСообщения КАК ТекстСообщения,
	|	ПодготовленныеДанные.ДатаСобытия КАК ДатаСобытия,
	|	ПодготовленныеДанные.ПериодОтправки КАК ПериодОтправки,
	|	ПодготовленныеДанные.ПериодичностьОтправки КАК ПериодичностьОтправки,
	|	ПодготовленныеДанные.ГруппироватьСообщения КАК ГруппироватьСообщения,
	|	ПодготовленныеДанные.ВариантГруппировки КАК ВариантГруппировки
	|ИЗ
	|	ПодготовленныеДанные КАК ПодготовленныеДанные
	|ГДЕ
	|	НЕ ПодготовленныеДанные.ГруппироватьКатегории";
	
#КонецОбласти
	
	Запрос.УстановитьПараметр("ВнешняяТаблицаДанных", ТаблицаПолучателейСообщенийПоКатегориям);
	
	Пакеты = Запрос.ВыполнитьПакет();
	КоличествоПакетов = Пакеты.ВГраница();
	
	СообщенияВСистемуВзаимодействия = Пакеты.Получить(КоличествоПакетов - 2);
	РезультатСГруппировкой = Пакеты.Получить(КоличествоПакетов - 1);
	РезультатБезГруппировки = Пакеты.Получить(КоличествоПакетов);
	
	// Определение полей для группировки сообщений	
	ГруппироватьПоЗаявке = "";
	ГруппироватьПоПроекту = "";
	
	СформироватьСтрокиГруппировки(Ссылка, ГруппироватьПоЗаявке, ГруппироватьПоПроекту);
	
	Если НЕ РезультатСГруппировкой.Пустой() Тогда
		ОбработатьРезультатСГруппировкой(РезультатСГруппировкой, Ссылка, Инициатор, ГруппироватьПоЗаявке, ГруппироватьПоПроекту, ИдентификаторКомментария);
	КонецЕсли;
	
	Если НЕ РезультатБезГруппировки.Пустой() Тогда
		ОбработатьРезультатБезГруппировки(РезультатБезГруппировки, Ссылка, Инициатор, ГруппироватьПоЗаявке, ГруппироватьПоПроекту, ИдентификаторКомментария);
	КонецЕсли;
	
	Если НЕ СообщенияВСистемуВзаимодействия.Пустой() Тогда
		Взаимодействие.ОтправитьСообщенияОповещения(Ссылка, Инициатор, СообщенияВСистемуВзаимодействия.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для отметки отправленным сообщений с типом оповещения ЭлектроннаяПочта.
// Используется регламентным заданием при подготовке нового набора сообщений для отправки.
//
// Параметры:
//  ДанныеЗаписи - Структура	 - значения всех измерений регистра
//		* Пользователь	 - ОпределяемыйТип.ПолучаетьОповещения	 - пользователь или подписчик
//		* Объект	 - ДокументСсылка.ВнутреннееЗадание, СправочникСсылка.Проекты, ДокументСсылка.Задача, ДокументСсылка.ЗаявкаНаРазработку	 - объект-источник
//		* ТипОповещения	 - ПеречислениеСсылка.ТипыОповещенийПользователя	 - тип оповещения. Должно быть значение ЭлектроннаяПочта
//		* ДатаОтправки	 - Дата	 - дата и время предполагаемой отправки сообщения
//		* КлючУникальности	 - УникальныйИдентификатор	 - улюч уникальности сообщения
//
Процедура ОтметитьОбработанным(Знач ДанныеЗаписи) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ДанныеЗаписи.Пользователь);
	НаборЗаписей.Отбор.Объект.Установить(ДанныеЗаписи.Объект);
	НаборЗаписей.Отбор.ТипОповещения.Установить(ДанныеЗаписи.ТипОповещения);
	НаборЗаписей.Отбор.ДатаОтправки.Установить(ДанныеЗаписи.ДатаОтправки);
	НаборЗаписей.Отбор.КлючУникальности.Установить(ДанныеЗаписи.КлючУникальности);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Получить(0).Отправлено = Истина;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Отмечает сообщения определенной категории как просмотренные пользователем.
//
// Параметры:
//  Ссылка       - СправочникСсылка, ДокументСсылка - ссылка на объект.
//  КатегорияСообщения - ПеречислениеСсылка.КатегорииСообщенийПользователя - категория сообщения. 
//
Процедура ОтметитьПросмотренным(Знач Ссылка, Знач КатегорияСообщения = Неопределено, Знач Инициатор = Неопределено) Экспорт
	
	Пользователь = ?(Инициатор = Неопределено, ПараметрыСеанса.ТекущийПользователь, Инициатор);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПодготовленныеСообщенияПользователяПоКатегориям.Объект КАК Объект,
	|	ПодготовленныеСообщенияПользователяПоКатегориям.Пользователь КАК Пользователь,
	|	ПодготовленныеСообщенияПользователяПоКатегориям.ДатаОтправки КАК ДатаОтправки,
	|	ПодготовленныеСообщенияПользователяПоКатегориям.ТипОповещения КАК ТипОповещения
	|ИЗ
	|	РегистрСведений.ПодготовленныеСообщенияПользователяПоКатегориям КАК ПодготовленныеСообщенияПользователяПоКатегориям
	|ГДЕ
	|	ВЫРАЗИТЬ(ПодготовленныеСообщенияПользователяПоКатегориям.Объект КАК #ПолноеИмяТипа#) = &Ссылка
	|	И ПодготовленныеСообщенияПользователяПоКатегориям.ТипОповещения = ЗНАЧЕНИЕ(Перечисление.ТипыОповещенийПользователя.ОповещениеВРабочийСтол)
	|	И ПодготовленныеСообщенияПользователяПоКатегориям.Пользователь = &Пользователь
	|	И НЕ ПодготовленныеСообщенияПользователяПоКатегориям.Отправлено
	|{ГДЕ
	|	ПодготовленныеСообщенияПользователяПоКатегориям.КатегорияСообщения КАК КатегорияСообщения}";
	
	// Приведение поля "Объект" к определенному типу
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПолноеИмяТипа#", Ссылка.Метаданные().ПолноеИмя());
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст = ТекстЗапроса;
	ПостроительЗапроса.Параметры.Вставить("Ссылка", Ссылка);
	ПостроительЗапроса.Параметры.Вставить("Пользователь", Пользователь);
	
	// Отбор в зависимости от категории сообщения
	ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("КатегорияСообщения");	
	Если КатегорияСообщения = Перечисления.КатегорииСообщенийПользователя.Комментарии Тогда
		ЭлементОтбора.ВидСравнения  = ВидСравнения.Равно;
	Иначе
		ЭлементОтбора.ВидСравнения  = ВидСравнения.НеРавно;
	КонецЕсли;
	ЭлементОтбора.Значение      = Перечисления.КатегорииСообщенийПользователя.Комментарии;
	ЭлементОтбора.Использование = Истина;
	
	ПостроительЗапроса.Выполнить();
	
	Если НЕ ПостроительЗапроса.Результат.Пустой() Тогда
		НачатьТранзакцию();
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ПодготовленныеСообщенияПользователяПоКатегориям");
		ЭлементБлокировки.Режим          = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ПостроительЗапроса.Результат;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Объект", "Объект");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Пользователь", "Пользователь");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДатаОтправки", "ДатаОтправки");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОповещения", "ТипОповещения");
		
		Попытка
			БлокировкаДанных.Заблокировать();
		
			Выборка = ПостроительЗапроса.Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.ПодготовленныеСообщенияПользователяПоКатегориям.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
				НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
				НаборЗаписей.Отбор.ДатаОтправки.Установить(Выборка.ДатаОтправки);
				НаборЗаписей.Отбор.ТипОповещения.Установить(Выборка.ТипОповещения);
				НаборЗаписей.Прочитать();
				
				Для Каждого Запись Из НаборЗаписей Цикл
					Запись.Отправлено = Истина;
				КонецЦикла;
					
				НаборЗаписей.Записать();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации("Служебные обработчики.Отметка просмотренных сообщений пользователя",
				УровеньЖурналаРегистрации.Ошибка, , , 
				"При установке отметки ""Просмотрена"" возникла ошибка" + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Удаляет сообщения о добавленных и не отправленных комментариях
//
// Параметры:
//  ИдентификаторКомментария - УникальныйИдентификатор - идентификатор комментария, сообщения о публикации которого нужно удалить
//
Процедура УдалитьОповещенияКомментария(Знач ИдентификаторКомментария) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодготовленныеСообщения.Пользователь КАК Пользователь,
	|	ПодготовленныеСообщения.Объект КАК Объект,
	|	ПодготовленныеСообщения.ТипОповещения КАК ТипОповещения,
	|	ПодготовленныеСообщения.ДатаОтправки КАК ДатаОтправки,
	|	ПодготовленныеСообщения.КлючУникальности КАК КлючУникальности
	|ИЗ
	|	РегистрСведений.ПодготовленныеСообщенияПользователяПоКатегориям КАК ПодготовленныеСообщения
	|ГДЕ
	|	ПодготовленныеСообщения.ИдентификаторКомментария = &ИдентификаторКомментария
	|	И ПодготовленныеСообщения.Отправлено = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ИдентификаторКомментария", ИдентификаторКомментария);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		НаборЗаписей = СоздатьНаборЗаписей();		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
			НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
			НаборЗаписей.Отбор.ТипОповещения.Установить(Выборка.ТипОповещения);
			НаборЗаписей.Отбор.ДатаОтправки.Установить(Выборка.ДатаОтправки);
			НаборЗаписей.Отбор.КлючУникальности.Установить(Выборка.КлючУникальности);
			
			НаборЗаписей.Записать();
			НаборЗаписей.Очистить();
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьГруппировку(НоваяЗапись, ВариантГруппировки, ПериодичностьОтправки, ГруппироватьПоЗаявке, ГруппироватьПоПроекту)
	
	Дата = Формат(НоваяЗапись.ДатаОтправки, "ДФ=ггггММддЧЧммсс");
	Группировка = "";
	
	// Группировка по периоду отправки
	Если ВариантГруппировки = 0 Тогда
		Группировка = Дата;
		
	// Группировка по заявкам и задачам
	ИначеЕсли ВариантГруппировки = 1 Тогда
		Группировка = ГруппироватьПоЗаявке;
		
	// Группировка по проектам
	ИначеЕсли ВариантГруппировки = 2 Тогда
		Группировка = ГруппироватьПоПроекту;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Группировка) Тогда
		
		// Определение постфикса группировки отправки.
		// Постфикс группировки будет использоваться при определении даты начала группировки сообщения.
		// В группе сообщения будет дата в формате ггггММддЧЧммсс. В постфиксе находится время в секундах.
		// Разность даты отправки и значения постфикса даст дату начала сбора событий.
		
		Если ПериодичностьОтправки = Перечисления.ЧастотаОповещенийПользователя.ДесятьМинут Тогда
			Постфикс = "_600";
		ИначеЕсли ПериодичностьОтправки = Перечисления.ЧастотаОповещенийПользователя.ТридцатьМинут Тогда
			Постфикс = "_1800";
		ИначеЕсли ПериодичностьОтправки = Перечисления.ЧастотаОповещенийПользователя.Час Тогда
			Постфикс = "_3600";
		ИначеЕсли ПериодичностьОтправки = Перечисления.ЧастотаОповещенийПользователя.День Тогда
			Постфикс = "_86400";
		ИначеЕсли ПериодичностьОтправки = Перечисления.ЧастотаОповещенийПользователя.Неделя Тогда
			Постфикс = "_604800";
		Иначе
			Постфикс = "_0";
		КонецЕсли;
		
		НоваяЗапись.ГруппаСообщения = Группировка + "_" + Дата + Постфикс;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРезультатБезГруппировки(Знач РезультатЗапроса, Знач Ссылка, Знач Инициатор, Знач ГруппировкаПоЗаявке, Знач ГруппировкаПоПроекту, Знач ИдентификаторКомментария)
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ШаблоныПисьма = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма();
	
	// Перебор результата запроса
	Пока Выборка.Следующий() Цикл
		КлючУникальности = Новый УникальныйИдентификатор;
		
		Если Выборка.КатегорияОповещения = Перечисления.КатегорииСообщенийПользователя.ИзменениеДатВОбъекте
			ИЛИ Выборка.КатегорияОповещения = Перечисления.КатегорииСообщенийПользователя.ИзменениеНаправленияОбъекта
			ИЛИ Выборка.КатегорияОповещения = Перечисления.КатегорииСообщенийПользователя.ИзменениеОписанияИлиНазванияОбъекта
			ИЛИ Выборка.КатегорияОповещения = Перечисления.КатегорииСообщенийПользователя.ИзменениеПользователейВОбъекте
			ИЛИ Выборка.КатегорияОповещения = Перечисления.КатегорииСообщенийПользователя.ИзменениеСтатусаОбъекта
			ИЛИ Выборка.КатегорияОповещения = Перечисления.КатегорииСообщенийПользователя.ПрочиеИзмененияОбъекта Тогда
			
			Пользователь = ?(ЗначениеЗаполнено(Инициатор), Инициатор, ПараметрыСеанса.ТекущийПользователь);
			ДатаДляШаблона = Формат(Выборка.ДатаСобытия, "ДФ='dd.MM.yyyy ""в"" ЧЧ:мм'");
			
			ТекстШаблона = СтрШаблон("%1 <b>%2</b> внес(-ла) изменения:", ДатаДляШаблона, Пользователь);
			
			ЗаголовокСобытий = СтрЗаменить(ШаблоныПисьма.БлокОсновногоТекста, "<!-- content -->", ТекстШаблона);
			ЗаголовокСобытий = СтрЗаменить(ЗаголовокСобытий, "<!-- font_size -->", "14px");
			
			ТекстСообщения = ЗаголовокСобытий + Символы.ПС + Выборка.ТекстСообщения;
			
		Иначе
			ТекстСообщения = Выборка.ТекстСообщения;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ПодготовленныеСообщенияПользователяПоКатегориям.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Ссылка);
		НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
		НаборЗаписей.Отбор.ДатаОтправки.Установить(Выборка.ПериодОтправки);
		НаборЗаписей.Отбор.ТипОповещения.Установить(Выборка.ТипОповещения);
		НаборЗаписей.Отбор.КлючУникальности.Установить(КлючУникальности);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Объект = Ссылка;
		НоваяЗапись.Пользователь = Выборка.Пользователь;
		НоваяЗапись.ТипОповещения = Выборка.ТипОповещения;
		НоваяЗапись.ДатаОтправки = Выборка.ПериодОтправки;
		НоваяЗапись.КлючУникальности = КлючУникальности;
		
		Если Выборка.ТипОповещения = Перечисления.ТипыОповещенийПользователя.ЭлектроннаяПочта Тогда
			НоваяЗапись.ТекстСообщения = СтрШаблон("%1 {~%2~}", ТекстСообщения, Строка(Выборка.КатегорияОповещения));
		Иначе
			НоваяЗапись.ТекстСообщения = ТекстСообщения;
		КонецЕсли;
		
		НоваяЗапись.ДатаСоздания = Выборка.ДатаСобытия;
		НоваяЗапись.Отправлено = Ложь;
		НоваяЗапись.КатегорияСообщения = Выборка.КатегорияОповещения;
		
		Если ЗначениеЗаполнено(ИдентификаторКомментария) Тогда
			НоваяЗапись.ИдентификаторКомментария = ИдентификаторКомментария;
		КонецЕсли;
		
		// Проверка на важность текста сообщения, если есть один из ключевых параметров, то "Важность = Высокая"
		Если Выборка.КатегорияОповещения = Перечисления.КатегорииСообщенийПользователя.Комментарии
			ИЛИ СтрНайти(НоваяЗапись.ТекстСообщения, "<br>Параметр <b>Описание</b>") > 0 Тогда
			
			НоваяЗапись.Важность = Перечисления.ВажностьСообщения.Высокая;
		Иначе
			НоваяЗапись.Важность = Перечисления.ВажностьСообщения.Обычная;
		КонецЕсли;
		
		// Заполнение группы сообщения если это необходимо
		Если Выборка.ГруппироватьСообщения Тогда
			ЗаполнитьГруппировку(НоваяЗапись, Выборка.ВариантГруппировки, Выборка.ПериодичностьОтправки, ГруппировкаПоЗаявке, ГруппировкаПоПроекту);
		КонецЕсли;
		
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьРезультатСГруппировкой(Знач РезультатЗапроса, Знач Ссылка, Знач Инициатор, Знач ГруппировкаПоЗаявке, Знач ГруппировкаПоПроекту, Знач ИдентификаторКомментария)
	
	ШаблоныПисьма = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма();
	
	ВыборкаПользователь = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПользователь.Следующий() Цикл
		
		ВыборкаДатаСобытия = ВыборкаПользователь.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДатаСобытия.Следующий() Цикл
			
			ВыборкаТипОповещения = ВыборкаДатаСобытия.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаТипОповещения.Следующий() Цикл
				
				Выборка = ВыборкаТипОповещения.Выбрать();
				ТекстСообщения = "";
				ДатаОтправки = Неопределено;
				КатегорияСообщения = Неопределено;
				ПериодичностиОтправки = Новый Массив;
				ДатаСобытия = Неопределено;
				
				КатегорииСобытий = Новый Массив;
				
				// Перебор результата запроса
				Пока Выборка.Следующий() Цикл
					Если ДатаОтправки = Неопределено Тогда
						ДатаОтправки = Выборка.ПериодОтправки;
					КонецЕсли;
					
					Если ДатаСобытия = Неопределено Тогда
						ДатаСобытия = Выборка.ДатаСобытия;
					КонецЕсли;
					
					ТекстСообщения = ТекстСообщения + Выборка.ТекстСообщения;
					
					Если КатегорииСобытий.Найти(Выборка.КатегорияОповещения) = Неопределено Тогда
						КатегорииСобытий.Добавить(Выборка.КатегорияОповещения);
					КонецЕсли;
					
					Если ПериодичностиОтправки.Найти(Выборка.ПериодичностьОтправки) = Неопределено Тогда
						ПериодичностиОтправки.Добавить(Выборка.ПериодичностьОтправки);
					КонецЕсли;
				КонецЦикла;
				
				Если КатегорииСобытий.Найти(Перечисления.КатегорииСообщенийПользователя.Комментарии) = Неопределено Тогда
					КатегорияСообщения = КатегорииСобытий.Получить(0);
				Иначе
					КатегорияСообщения = Перечисления.КатегорииСообщенийПользователя.Комментарии;
				КонецЕсли;
				
				КлючУникальности = Новый УникальныйИдентификатор;
				
				Если КатегорииСобытий.Найти(Перечисления.КатегорииСообщенийПользователя.ИзменениеДатВОбъекте) <> Неопределено
					ИЛИ КатегорииСобытий.Найти(Перечисления.КатегорииСообщенийПользователя.ИзменениеНаправленияОбъекта) <> Неопределено
					ИЛИ КатегорииСобытий.Найти(Перечисления.КатегорииСообщенийПользователя.ИзменениеОписанияИлиНазванияОбъекта) <> Неопределено
					ИЛИ КатегорииСобытий.Найти(Перечисления.КатегорииСообщенийПользователя.ИзменениеПользователейВОбъекте) <> Неопределено
					ИЛИ КатегорииСобытий.Найти(Перечисления.КатегорииСообщенийПользователя.ИзменениеСтатусаОбъекта) <> Неопределено
					ИЛИ КатегорииСобытий.Найти(Перечисления.КатегорииСообщенийПользователя.ПрочиеИзмененияОбъекта) <> Неопределено Тогда
					
					
					Пользователь = ?(ЗначениеЗаполнено(Инициатор), Инициатор, ПараметрыСеанса.ТекущийПользователь);
					ДатаДляШаблона = Формат(ДатаСобытия, ШаблоныПисьма.ФорматДаты);
					
					ТекстШаблона = СтрЗаменить(ШаблоныПисьма.ЗаголовокСобытия, "<!-- event_date -->", ДатаДляШаблона);
					ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- user_name -->", Пользователь);
					ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- event -->", "внес(-ла) изменения:");

					ЗаголовокСобытий = СтрЗаменить(ШаблоныПисьма.БлокОсновногоТекста, "<!-- content -->", ТекстШаблона);
					ЗаголовокСобытий = СтрЗаменить(ЗаголовокСобытий, "<!-- font_size -->", "14px");
					
					ТекстСообщения = ЗаголовокСобытий + Символы.ПС + ТекстСообщения;
					
				КонецЕсли;
				
				НаборЗаписей = РегистрыСведений.ПодготовленныеСообщенияПользователяПоКатегориям.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.Установить(Ссылка);
				НаборЗаписей.Отбор.Пользователь.Установить(ВыборкаТипОповещения.Пользователь);
				НаборЗаписей.Отбор.ДатаОтправки.Установить(ДатаОтправки);
				НаборЗаписей.Отбор.ТипОповещения.Установить(ВыборкаТипОповещения.ТипОповещения);
				НаборЗаписей.Отбор.КлючУникальности.Установить(КлючУникальности);
				
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Объект = Ссылка;
				НоваяЗапись.Пользователь = ВыборкаТипОповещения.Пользователь;
				НоваяЗапись.ТипОповещения = ВыборкаТипОповещения.ТипОповещения;
				НоваяЗапись.ДатаОтправки = ДатаОтправки;
				НоваяЗапись.КлючУникальности = КлючУникальности;
				
				Если ВыборкаТипОповещения.ТипОповещения = Перечисления.ТипыОповещенийПользователя.ЭлектроннаяПочта Тогда
					НоваяЗапись.ТекстСообщения = СтрШаблон("%1 {~%2~}", ТекстСообщения, СтрСоединить(КатегорииСобытий, ","));
				Иначе
					НоваяЗапись.ТекстСообщения = ТекстСообщения;
				КонецЕсли;
				
				НоваяЗапись.ДатаСоздания = ВыборкаТипОповещения.ДатаСобытия;
				НоваяЗапись.Отправлено = Ложь;
				НоваяЗапись.КатегорияСообщения = КатегорияСообщения;
				
				Если ЗначениеЗаполнено(ИдентификаторКомментария) Тогда
					НоваяЗапись.ИдентификаторКомментария = ИдентификаторКомментария;
				КонецЕсли;
				
				// Проверка на важность текста сообщения, если есть один из ключевых параметров, то "Важность = Высокая"
				Если КатегорииСобытий.Найти(Перечисления.КатегорииСообщенийПользователя.Комментарии) <> Неопределено
					ИЛИ СтрНайти(НоваяЗапись.ТекстСообщения, "<br>Параметр <b>Описание</b>") > 0 Тогда
					
					НоваяЗапись.Важность = Перечисления.ВажностьСообщения.Высокая;
				Иначе
					НоваяЗапись.Важность = Перечисления.ВажностьСообщения.Обычная;
				КонецЕсли;
				
				ПериодичностьОтправки = Перечисления.ЧастотаОповещенийПользователя.Незамедлительно;
				
				Если ПериодичностиОтправки.Количество() = 1 Тогда
					ПериодичностьОтправки = ПериодичностиОтправки.Получить(0);
					
				ИначеЕсли ПериодичностиОтправки.Количество() > 1 Тогда
					НомерМинимального = Перечисления.ЧастотаОповещенийПользователя.Количество();
					
					Для Каждого ЭлементМассива Из ПериодичностиОтправки Цикл
						НомерТекущего = Перечисления.ЧастотаОповещенийПользователя.Индекс(ЭлементМассива);
						Если НомерТекущего < НомерМинимального Тогда
							НомерМинимального = НомерТекущего;
							ПериодичностьОтправки = ЭлементМассива;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				// Заполнение группы сообщения если это необходимо
				Если ВыборкаТипОповещения.ГруппироватьСообщения Тогда
					ЗаполнитьГруппировку(НоваяЗапись, ВыборкаТипОповещения.ВариантГруппировки, ПериодичностьОтправки, ГруппировкаПоЗаявке, ГруппировкаПоПроекту);
				КонецЕсли;
				
				НаборЗаписей.Записать();
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуПолучателейОповещенийИзСтруктуры(Знач Получатели, Знач СтруктураСообщения, ИдентификаторКомментария)
	
	// Формирование общей таблицы получатель/категория сообщения/текст/данные сообщения для системы взаимодействия	
	ТаблицаПолучателейСообщенийПоКатегориям = ТаблицаПолучателейОповещений();
	
	СтруктураСообщения.Свойство("ИдентификаторКомментария", ИдентификаторКомментария);
	
	Для Каждого Получатель Из Получатели Цикл
		
		ДатаСобытия = Неопределено;
		
		ТекстСообщения =  СтруктураСообщения.ТекстСообщения;
		КатегорияСообщения = СтруктураСообщения.КатегорияСообщения;
		
		// Если в структуре сообщения есть свойство "ДатаСобытия"
		СтруктураСообщения.Свойство("Период", ДатаСобытия);
		
		СтрокаТаблицы = ТаблицаПолучателейСообщенийПоКатегориям.Добавить();
		СтрокаТаблицы.Пользователь = Получатель;
		
		Если КатегорияСообщения <> Неопределено Тогда
			СтрокаТаблицы.КатегорияСообщения = КатегорияСообщения;
		Иначе
			СтрокаТаблицы.КатегорияСообщения = Перечисления.КатегорииСообщенийПользователя.ПрочиеИзмененияОбъекта;
		КонецЕсли;
		
		СтрокаТаблицы.ТекстСообщения = ТекстСообщения;
		
		Если СтруктураСообщения.Свойство("СообщениеSDMS") Тогда
			СтрокаТаблицы.ТекстSDMS = СтруктураСообщения.СообщениеSDMS;
		КонецЕсли;
		
		Если СтруктураСообщения.Свойство("Данные") Тогда
			СтрокаТаблицы.Данные = СтруктураСообщения.Данные;
		КонецЕсли;
		
		СтрокаТаблицы.ДатаСобытия = ?(ДатаСобытия = Неопределено, ТекущаяДатаСеанса(), ДатаСобытия);
	КонецЦикла;
	
	Возврат ТаблицаПолучателейСообщенийПоКатегориям;
	
КонецФункции

Функция ПолучитьТаблицуПолучателейОповещенийИзТаблицыЗначений(Знач Получатели, Знач ТаблицаИзменений, Знач Ссылка)
	
	ТаблицаПолучателейСообщенийПоКатегориям = ТаблицаПолучателейОповещений();
	
	ТаблицаПолучателей = Новый ТаблицаЗначений;
	ТаблицаПолучателей.Колонки.Добавить("Получатель", Новый ОписаниеТипов("СправочникСсылка.Пользователи, СправочникСсылка.Подписчики"));
	
	Для Каждого Получатель Из Получатели Цикл
		ТаблицаПолучателей.Добавить().Получатель = Получатель;
	КонецЦикла;
	
	Запрос = Новый Запрос;

#Область ТекстЗапроса
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПолучателей.Получатель КАК Получатель
	|ПОМЕСТИТЬ Получатели
	|ИЗ
	|	&ТаблицаПолучателей КАК ТаблицаПолучателей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИзменений.ТекстСообщения КАК ТекстСообщения,
	|	ТаблицаИзменений.ТекстSDMS КАК ТекстSDMS,
	|	ТаблицаИзменений.Данные КАК Данные,
	|	ТаблицаИзменений.ИмяРеквизита КАК ИмяРеквизита,
	|	ТаблицаИзменений.Период КАК ДатаСобытия
	|ПОМЕСТИТЬ ТаблицаИзмененийОбъекта
	|ИЗ
	|	&ТаблицаИзменений КАК ТаблицаИзменений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИзмененийОбъекта.ТекстСообщения КАК ТекстСообщения,
	|	ТаблицаИзмененийОбъекта.ТекстSDMS КАК ТекстSDMS,
	|	ТаблицаИзмененийОбъекта.Данные КАК Данные,
	|	ТаблицаИзмененийОбъекта.ДатаСобытия КАК ДатаСобытия,
	|	НастройкиОповещений.КатегорияСообщения КАК КатегорияСообщения
	|ПОМЕСТИТЬ КатегорииСобытий
	|ИЗ
	|	ТаблицаИзмененийОбъекта КАК ТаблицаИзмененийОбъекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОповещенияПриИзмененииРеквизитов КАК НастройкиОповещений
	|		ПО (ТИПЗНАЧЕНИЯ(НастройкиОповещений.ТипОбъекта) = ТИПЗНАЧЕНИЯ(&Ссылка))
	|			И (НастройкиОповещений.Реквизит = ТаблицаИзмененийОбъекта.ИмяРеквизита)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КатегорииСобытий.ТекстСообщения КАК ТекстСообщения,
	|	КатегорииСобытий.ТекстSDMS КАК ТекстSDMS,
	|	КатегорииСобытий.Данные КАК Данные,
	|	КатегорииСобытий.ДатаСобытия КАК ДатаСобытия,
	|	КатегорииСобытий.КатегорияСообщения КАК КатегорияСообщения,
	|	Получатели.Получатель КАК Пользователь
	|ИЗ
	|	Получатели КАК Получатели,
	|	КатегорииСобытий КАК КатегорииСобытий";
	
#КонецОбласти
	
	Запрос.УстановитьПараметр("ТаблицаПолучателей", ТаблицаПолучателей);
	Запрос.УстановитьПараметр("ТаблицаИзменений", ТаблицаИзменений);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СформироватьСтрокиГруппировки(Знач Ссылка, ГруппироватьПоЗаявке, ГруппироватьПоПроекту)
	
	ТипСсылки = ТипЗнч(Ссылка);
	
	// Для варианта группировки по заявкам и задачам.
	
	// Если ссылка является ссылкой на задачу
	Если ТипСсылки = Тип("ДокументСсылка.Задача") Тогда
		// Получение объекта основания задачи
		ОбъектОснованиеСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ОбъектОснование");
		
		// Проверка типа объекта основания
		Если ЗначениеЗаполнено(ОбъектОснованиеСсылка) И ТипЗнч(ОбъектОснованиеСсылка) = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
			ГруппироватьПоЗаявке = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектОснованиеСсылка, "Номер");
		Иначе
			// Если объект основание не заполнен, или не является заявкой, то используем номер задачи
			ГруппироватьПоЗаявке = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Номер");
		КонецЕсли;
		
	// Если ссылка является ссылкой на заявку
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
		// То просто возьмем номер этой заявки
		ГруппироватьПоЗаявке = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Номер");
	КонецЕсли;
	
	// Для варианта группировки по проектам
	
	// Для проектов
	Если ТипСсылки = Тип("СправочникСсылка.Проекты") Тогда
		ГруппироватьПоПроекту = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Код");
		
	// Для заявок на разработку
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
		ОбъектОснованиеСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ОбъектОснование");
		
		// Проверка типа и заполненности объекта основания
		Если ТипЗнч(ОбъектОснованиеСсылка) = Тип("СправочникСсылка.Проекты") И ЗначениеЗаполнено(ОбъектОснованиеСсылка) Тогда
			ГруппироватьПоПроекту = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектОснованиеСсылка, "Код");
		КонецЕсли;
		
	// Для задач и внутренних заданий
	Иначе
		ПроектСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Проект");
		Если ЗначениеЗаполнено(ПроектСсылка) Тогда
			ГруппироватьПоПроекту = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроектСсылка, "Код");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаПолучателейОповещений()
	
	// Формирование общей таблицы получатель/категория сообщения/текст	
	ТаблицаПолучателейСообщенийПоКатегориям = Новый ТаблицаЗначений;
	ТаблицаПолучателейСообщенийПоКатегориям.Колонки.Добавить("ТекстСообщения", Новый ОписаниеТипов("Строка"));
	ТаблицаПолучателейСообщенийПоКатегориям.Колонки.Добавить("ТекстSDMS", Новый ОписаниеТипов("Строка"));
	ТаблицаПолучателейСообщенийПоКатегориям.Колонки.Добавить("Данные", Новый ОписаниеТипов("Строка"));
	ТаблицаПолучателейСообщенийПоКатегориям.Колонки.Добавить("КатегорияСообщения", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииСообщенийПользователя"));
	ТаблицаПолучателейСообщенийПоКатегориям.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи, СправочникСсылка.Подписчики"));
	ТаблицаПолучателейСообщенийПоКатегориям.Колонки.Добавить("ДатаСобытия", ОбщегоНазначенияКлиентСервер.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Возврат ТаблицаПолучателейСообщенийПоКатегориям;
	
КонецФункции

#КонецОбласти

#КонецЕсли
