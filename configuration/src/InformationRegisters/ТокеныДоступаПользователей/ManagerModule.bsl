///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выпускает токен
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователь - Пользователь токена
//  СрокДействия - Дата							 - Срок действия токена
//  ИмяТокена	 - Строка						 - Имя токена
// 
// Возвращаемое значение:
//  Строка - Выпущенный токен
//
Функция ВыпуститьТокен(Пользователь, СрокДействия, ИмяТокена) Экспорт
	
	ИдентификаторТокена = Новый УникальныйИдентификатор;  
	АлгоритмПодписи = АлгоритмПодписиТокенаДоступа.HS256; 	
	
	Получатели = Новый Массив;  
	Получатели.Добавить("API"); 	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	ТокенДоступа = Новый ТокенДоступа;  
	ТокенДоступа.Заголовки.Вставить("alg", Строка(АлгоритмПодписи));  
	ТокенДоступа.Эмитент = "ssl";  
	ТокенДоступа.Получатели = Получатели;  
	ТокенДоступа.ВремяСоздания = ТекущаяУниверсальнаяДата() - Дата(1970, 1, 1);  
	ТокенДоступа.ВремяЖизни = КонецДня(СрокДействия) - ТекущаяДатаСеанса + 1; 
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
	
	Если НЕ ПользовательИБ.АутентификацияТокеномДоступа Тогда
		ПользовательИБ.АутентификацияТокеномДоступа = Истина;
		ПользовательИБ.Записать();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ТокенДоступа.КлючСопоставленияПользователя = ПользовательИБ.Имя;  
	ТокенДоступа.Идентификатор = Строка(ИдентификаторТокена);  	
	
	КлючПодписи = ПолучитьКлючПодписиДляВыпускаТокенаПользователя();
	
	ТокенДоступа.Подписать(АлгоритмПодписи, КлючПодписи);
	Токен = Строка(ТокенДоступа); 
	
	Добавить(ТокенДоступа.Идентификатор, Пользователь, СрокДействия, ИмяТокена);
	
	Возврат Токен;
	
КонецФункции

// Добавляет запись
//
// Параметры:
//  ИдентификаторТокена	 - Строка				 - Идентификатор токена
//  Пользователь		 - СправочникСсылка.Пользователь - Пользователь токена
//  СрокДействия		 - Дата							 - Срок действия токена
//  ИмяТокена			 - Строка						 - Имя токена
//
Процедура Добавить(ИдентификаторТокена, Пользователь, СрокДействия, ИмяТокена) Экспорт
	
	Запись = РегистрыСведений.ТокеныДоступаПользователей.СоздатьМенеджерЗаписи();
	Запись.Пользователь = Пользователь;
	Запись.ИдентификаторТокена = ИдентификаторТокена;
	Запись.ДатаОкончания = СрокДействия;
	Запись.ИмяТокена = ИмяТокена;
	Запись.ДатаСоздания = ТекущаяДатаСеанса();
	
	УстановитьПривилегированныйРежим(Истина);
	Запись.Записать();                       
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Проверить соединение
//
// Параметры:
//  Заголовки	 - ФиксированноеСоответствие - Заголовки HTTP-ответа
// 
// Возвращаемое значение:
//  Структура - Результат проверки
//
Функция ПроверитьСоединение(Заголовки) Экспорт
	
	РезультатПроверки = Новый Структура("Успешно, СтруктураОтвета", Ложь, "");	
	
	Заголовок = Заголовки.Получить("Authorization"); 
	
	Если Заголовок <> Неопределено И СтрНачинаетсяС(Заголовок, "Bearer") Тогда
		Токен = СтрЗаменить(Заголовок, "Bearer ", "");
		ЧастиТокена = СтрРазделить(Токен, ".");
		Если ЧастиТокена.Количество() <> 3 Тогда
			РезультатПроверки.СтруктураОтвета = API.ПолучитьСтруктуруОтвета(13, , "разрешен доступ только по JWT токену.");
			Возврат РезультатПроверки;
		КонецЕсли;
		
		ОсновнаяЧастьТокена = ЧастиТокена[1];
		ОсновнаяЧастьТокена = СтрЗаменить(ОсновнаяЧастьТокена, "-", "+");  
		ОсновнаяЧастьТокена = СтрЗаменить(ОсновнаяЧастьТокена, "_", "/");
		
		ДлинаТокена = СтрДлина(ОсновнаяЧастьТокена);
		ОстатокОтДеления = ДлинаТокена % 4;
		
		Если ОстатокОтДеления <> 0 Тогда
			ОстатокОтДеления = 4 - ОстатокОтДеления;
			
			Пока ОстатокОтДеления <> 0 Цикл
				ОсновнаяЧастьТокена = ОсновнаяЧастьТокена + "=";
				ОстатокОтДеления = ОстатокОтДеления - 1;
			КонецЦикла;
		КонецЕсли;
		
		Попытка
			ДвоичныеДанные = Base64Значение(ОсновнаяЧастьТокена);
			Строка = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
			Структура = ОбщегоНазначения.ПрочитатьСодержимоеJSON(Строка);
			ИдентификаторТокена = Структура.jti;
		Исключение
			РезультатПроверки.СтруктураОтвета = API.ПолучитьСтруктуруОтвета(13, , "некорректный токен.");
			Возврат РезультатПроверки;
		КонецПопытки;
		
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТокеныДоступаПользователей.ИдентификаторТокена КАК ИдентификаторТокена
		|ИЗ
		|	РегистрСведений.ТокеныДоступаПользователей КАК ТокеныДоступаПользователей
		|ГДЕ
		|	ТокеныДоступаПользователей.Пользователь = &Пользователь
		|	И ТокеныДоступаПользователей.ИдентификаторТокена = &ИдентификаторТокена
		|	И ТокеныДоступаПользователей.ДатаОкончания >= &Дата";
		
		Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса));
		Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
		Запрос.УстановитьПараметр("ИдентификаторТокена", ИдентификаторТокена);
		
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			РезультатПроверки.Успешно = Истина;
			
			Запись = СоздатьМенеджерЗаписи();
			Запись.Пользователь = ТекущийПользователь;
			Запись.ИдентификаторТокена = ИдентификаторТокена;
			Запись.Прочитать();
			Запись.ДатаИспользования = ТекущаяДатаСеанса;
			Запись.Записать();
		Иначе
			РезультатПроверки.СтруктураОтвета = API.ПолучитьСтруктуруОтвета(13, , "запрещен доступ для данного токена.");
			
			ТекстОшибки = СтрШаблон(
			"ТокенДоступа: %1
			|ИдентификаторТокена: %2
			|ТекущийПользователь: %3", Токен, ИдентификаторТокена, ТекущийПользователь.Наименование);
			
			ЗаписьЖурналаРегистрации("Проверка токена.Запрещен доступ", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		РезультатПроверки.СтруктураОтвета = API.ПолучитьСтруктуруОтвета(13, , "не JWT авторизация.");
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Удаляет запись
//
// Параметры:
//  ИдентификаторТокена	 - Строка	 - Идентификатор токена
//  Пользователь		 - 	СправочникСсылка.Пользователь - Пользователь токена
//
Процедура Удалить(ИдентификаторТокена, Пользователь) Экспорт
	
	Набор = РегистрыСведений.ТокеныДоступаПользователей.СоздатьНаборЗаписей();
	Набор.Отбор.Пользователь.Установить(Пользователь);
	Набор.Отбор.ИдентификаторТокена.Установить(ИдентификаторТокена);
	УстановитьПривилегированныйРежим(Истина);
	Набор.Записать();
	УстановитьПривилегированныйРежим(Ложь); 
	
КонецПроцедуры

#КонецОбласти 

#Область Служебные

// Возвращает ключ подписи, сохраненный в безопасном хранилище
Функция ПолучитьКлючПодписиДляВыпускаТокенаПользователя()
	
	УстановитьПривилегированныйРежим(Истина);	
	Ключ = РегистрыСведений.БезопасноеХранилищеДанных.ПолучитьДанные(
			Перечисления.НазначенияДанныхБезопасногоХранилища.КлючПодписиДляВыпускаТокенаПользователя);		
	УстановитьПривилегированныйРежим(Ложь);
		
	Возврат Ключ;
	
КонецФункции
	
#КонецОбласти
