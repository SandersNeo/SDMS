///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////
 
 #Область ОбработчикиСобытийФормы
 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Пользователь") И ЗначениеЗаполнено(Параметры.Пользователь) Тогда
		Пользователь = Параметры.Пользователь; 
	Иначе
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Элементы.Пользователь.Доступность = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("Администратор");	
	ЗаполнитьТокены();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ВыпуститьТокен(Команда)
	
	Если ПустаяСтрока(ИмяТокена) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните имя токена.", , "ИмяТокена");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните пользователя.", , "Пользователь");
		Возврат;
	КонецЕсли;

	Если СрокДействия < НачалоДня(ТекущаяДата()) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Срок действия должен быть больше текущей даты.", , "СрокДействия");
		Возврат;
	КонецЕсли;
	
	Токен = ВыпуститьТокенСервер(Пользователь, СрокДействия, ИмяТокена); 
	ОбщегоНазначенияКлиент.КопироватьТекстВБуферОбмена(Токен, "Токен скопирован в буфер обмена");
	ЗаполнитьТокены();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	ЗаполнитьТокены();
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)

	ТекущаяСтрока = Элементы.СуществующиеТокены.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда		
		ВопросАсинхронно(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры    

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Асинх Процедура ВопросАсинхронно(ТекущаяСтрока) 
	
	Обещание = ВопросАсинх("Уверены что нужно удалить токен?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Результат = Ждать Обещание;
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		УдалитьТокен(ТекущаяСтрока);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыпуститьТокенСервер(Пользователь, СрокДействия, ИмяТокена)
	
	Возврат РегистрыСведений.ТокеныДоступаПользователей.ВыпуститьТокен(Пользователь, СрокДействия, ИмяТокена);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТокены()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТокеныДоступаПользователей.ИдентификаторТокена КАК ИдентификаторТокена,
	|	ТокеныДоступаПользователей.ДатаОкончания КАК ДатаОкончания,
	|	ТокеныДоступаПользователей.ИмяТокена КАК ИмяТокена,
	|	ТокеныДоступаПользователей.ДатаИспользования КАК ДатаИспользования,
	|	ТокеныДоступаПользователей.ДатаСоздания КАК ДатаСоздания
	|ИЗ
	|	РегистрСведений.ТокеныДоступаПользователей КАК ТокеныДоступаПользователей
	|ГДЕ
	|	ТокеныДоступаПользователей.Пользователь = &Пользователь
	|	И ТокеныДоступаПользователей.ДатаОкончания >= &ТекущаяДата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания"; 
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса())); 
	УстановитьПривилегированныйРежим(Истина);     
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	СуществующиеТокены.Очистить();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СуществующиеТокены.Добавить(), Выборка);	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьТокен(ТекущаяСтрока)
	
	Данные = СуществующиеТокены.НайтиПоИдентификатору(ТекущаяСтрока);
	РегистрыСведений.ТокеныДоступаПользователей.Удалить(Данные.ИдентификаторТокена, Пользователь);
	СуществующиеТокены.Удалить(Данные);
	
КонецПроцедуры

#КонецОбласти
