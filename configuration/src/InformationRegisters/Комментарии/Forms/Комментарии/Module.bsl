///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

// ТекущиеДействия - Структура(Действие, Объект, Идентификатор)
//
// Действие - Хранит текущее действие пользователя
// Возможные варианты: 
//  - Публикация - добавление нового комментария (по умолчанию)
//  - Изменение  - изменение комментария
//  - Ответ      - ответ на комментарий пользователя
//
// Объект - Хранит уникальный идентификатор ссылки объекта к которому относится действие
// Возможные варианты:
//  - при публикации - уникальный идентификатор объекта из которого открыта форма (по умолчанию)
//  - при изменении  - уникальный идентификатор объекта к которому относится комментарий
//  - при ответе     - уникальный идентификатор объекта к которому относится комментарий,
//                     на который отвечает пользователь
//
// Идентификатор - Хранит идентификатор комментария
// Возможные варианты:
//  - при публикации - Неопределено (по умолчанию)
//  - при изменении  - уникальный идентификатор редактируемого комментария
//  - при ответе     - уникальный идентификатор комментария на который отвечает пользователь

#Область ОбъявлениеПеременных

// При изменении комментария хранит структуру
// прикрепленных к комментарию файлов
&НаКлиенте
Перем ПрикрепленныеФайлыКомментария;

// Хранит массив id комментариев панели последних комментариев,
// по которым "нажимал" пользователь.
&НаКлиенте
Перем ПросмотренныеКомментарии;

// Массив идентификаторов свернутых комментариев
&НаКлиенте
Перем СвернутыеКомментарии;

// Промежуточный контейнер для хранения структуры
// форматированного документа при изменении комментария
&НаКлиенте
Перем СодержимоеФорматированногоДокумента;

// См. описание в области Информация
&НаКлиенте
Перем ТекущиеДействия;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка объекта
	Источник = Параметры.Источник; 
	
	ПанельНавигации.Скопировать(ЭтотОбъект, Параметры);
	
	ЗагрузитьПользовательскиеНастройки();
	
	ТипИсточника = ТипЗнч(Источник);
	ФилиалПользователя = ПараметрыСеанса.Филиал;
	
	Если ЗначениеЗаполнено(ФилиалПользователя) Тогда
		ТипФилиала = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФилиалПользователя, "ТипФилиала");
		ФилиалIT = (ТипФилиала <> Перечисления.ТипыФилиалов.НеIT);
	Иначе
		ФилиалIT = Ложь;
	КонецЕсли;
	
	Если ТипИсточника = Тип("ДокументСсылка.Задача") ИЛИ ТипИсточника = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
		ДоступностьНеОбщедоступногоКомментария = ФилиалIT;
		РасширеннаяПодсказка =	
		"Определяет видимость публикуемого/изменяемого комментария для пользователей.
		|Оставлять необщедоступные комментарии для заявок и задач могут только пользователи,
		|относящиеся к IT структуре.
		|Вкл. - комментарий доступен для просмотра всем пользователям.
		|Выкл. - комментарий доступен для просмотра только пользователям, принадлежащим филиалам разработчиков.";
	Иначе
		ДоступностьНеОбщедоступногоКомментария = НЕ ФилиалIT;
		РасширеннаяПодсказка =	
		"Определяет видимость публикуемого/изменяемого комментария для пользователей.
		|Оставлять необщедоступные комментарии для заявок и задач могут только не относящиеся к IT пользователи.
		|Вкл. - комментарий доступен для просмотра всем пользователям.
		|Выкл. - комментарий доступен для просмотра только пользователям, принадлежащим текущему филиалу.";
	КонецЕсли;
	
	Элементы.ВиденВсемРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
		
	// Получение списка всех объетов участвующих в комментировании
	СвязанныеОбъекты = РегистрыСведений.Комментарии.ПолучитьСписокОбъектов(Источник);
	
	ЗаполнитьНепросмотренныеКомментарии();
	РегистрыСведений.НепросмотренныеКомментарии.УдалитьПросмотренные(НепросмотренныеКомментарии.ВыгрузитьЗначения());
	
	// Формирование адреса временного хранилища
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);	
		
	// Получение ленты комментариев
	ДанныеЛенты = ПолучитьЛентуКомментариев(СвязанныеОбъекты, АдресВременногоХранилища, 
		ОтображатьПоследниеКомментарии, НепросмотренныеКомментарии, Новый Массив);
		
	ЛентаКомментариев = ДанныеЛенты.Лента;
	
	Элементы.ПоказатьПоследниеКомментарии.Заголовок = 
			ЗаголовокКнопкиПоследниеКомментарии(ДанныеЛенты.КоличествоПоследнихКомментариев);
	
	// Добавление отметки просмотренным
	РегистрыСведений.ОчередьСобытийНаОбработку.ОтметитьПросмотренным(Источник, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) 
	
	ПанельНавигацииКлиент.ПриОткрытии(Элементы, Истина);
	
	// Установка заголовков элементов, инициализация
	// вспомогательных структур хранения
	УстановитьТекущиеДействияПоУмолчанию();
	
	// Установка значения происходит отдельно так как
	// пока форма открыта нужно хранить идентификаторы
	// развернутых комментариев для того, чтобы при
	// обновлении ленты комментариев можно было свернуть
	// необходимые ветки дерева комментариев, так как при
	// обновлении ленты все узлы дерева развернуты
	СвернутыеКомментарии = Новый Массив;
	
	ОбновитьСкриптНавигацииЛенты();
		
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ПанельНавигацииКлиент.ОбработкаОповещения(ЭтотОбъект, ЭтотОбъект.Источник, ИмяСобытия, Параметр, Источник);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	// Если начало форматированного документа совпадает с концом - комментарий пустой
	ВладелецФормы.ЕстьНеопубликованныйКомментарий = 
		НЕ (Комментарий.ПолучитьЗакладкуНачала() = Комментарий.ПолучитьЗакладкуКонца());
	
КонецПроцедуры

&НаКлиенте
Процедура ЛентаКомментариевПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
		
	// Если нет ссылки
	Если ДанныеСобытия.Href = Неопределено Тогда
		el = ДанныеСобытия.Element;
		id = el.id;
		
		Если СтрНайти(id, "link_comment") > 0 Тогда
			Если НЕ el.classList.contains("visited") Тогда
				el.classList.add("visited");
			КонецЕсли;
			
			НачинаяС = СтрДлина("link_comment_") + 1;
			ИдентификаторКомментария = Сред(id, НачинаяС);
			
			Если ПросмотренныеКомментарии.Найти(ИдентификаторКомментария) = Неопределено Тогда
				ПросмотренныеКомментарии.Добавить(ИдентификаторКомментария);
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;	
		
	// Отказываемся от стандартной обработки
	СтандартнаяОбработка = Ложь;
			
	// Получение объекта, идентификатора комментария и действия из ссылки
	СтруктураСсылки = ПолучитьСвойстваГиперссылки(ДанныеСобытия.Href);
	ИдентификаторКомментария = Строка(СтруктураСсылки.Идентификатор);
	
	ЭтоФайл = СтрНачинаетсяС(ДанныеСобытия.Href, "file") 
		ИЛИ Найти(ДанныеСобытия.Element.innerHTML, "class=""saveFile""") > 0;
		
	// Обработка  навигационных ссылок
	Если СтрНайти(ДанныеСобытия.Href, "e1cib/") > 0 Тогда
		NavigationLink = Сред(ДанныеСобытия.Href, СтрНайти(ДанныеСобытия.Href, "e1cib/"));
		ПерейтиПоНавигационнойСсылке(NavigationLink);
		Возврат;
		
	ИначеЕсли ЭтоФайл Тогда
		ПараметрыСкачивания = РаботаСФайламиКлиент.ПараметрыСкачиванияФайлов();
		ПараметрыСкачивания.Владелец = Источник;
		
		Href = СтрЗаменить(ДанныеСобытия.Href, "\", "/");
		ИмяФайла = Сред(Href, СтрНайти(Href, "/", НаправлениеПоиска.СКонца) + 1); 
		
		// Получение ссылки на объект для корректного поиска элемента справочника "Файлы"
		ПараметрыСкачивания.Файлы = ПолучитьСсылкуНаФайл(АдресВременногоХранилища, ИмяФайла, Href); 
		ПараметрыСкачивания.ИдентификаторФормы = УникальныйИдентификатор;
		ПараметрыСкачивания.Архивировать = Ложь;	
		РаботаСФайламиКлиент.СкачатьФайлы(ПараметрыСкачивания);
		
		Возврат;
		
	ИначеЕсли СтрНайти(ДанныеСобытия.Href, "sdms_user_") > 0 Тогда
		ПоказатьИнформациюОПользователе(ДанныеСобытия.Href, СтандартнаяОбработка);
		Возврат;	
		
	КонецЕсли;
		
	// При нажатии ссылки одного из возможных действий с комментарием
	// необходимо проверить какое действие происходит в данный момент.
	// Если идентификатор комментария в структуре ТекущиеДействия = 
	// Неопределено, то есть мы не храним никакие данные по комментариям,
	// значит мы можем позволить пользователю произвести желаемое
	// действие, в противном случае, нужно спросить пользователя,
	// согласен ли он отменить текущее действие и начать новое. 
	
	// Добавление комментария через ссылку в ленте
	Если СтруктураСсылки.Действие = "add" Тогда
		// Если не происходит никаких действий
		Если ТекущиеДействия.Идентификатор = Неопределено Тогда
			ТекущиеДействия.Действие = "Публикация";
			ТекущиеДействия.Объект = Источник.УникальныйИдентификатор();
			ТекущиеДействия.Идентификатор = Неопределено;
			Элементы.КнопкаОпубликоватьКомментарий.Заголовок = "Опубликовать";
			Элементы.КнопкаОчиститьКомментарий.Заголовок = "Очистить";
			ОтобразитьПанельРедактирования();
		Иначе // Если происходят действия с комментарием (Изменение, Ответ)
			ПараметрыОповещения = Новый Структура("Действие, Объект, Идентификатор");
			ПараметрыОповещения.Действие = "Публикация";
			ПараметрыОповещения.Объект = Источник.УникальныйИдентификатор();
			ПараметрыОповещения.Идентификатор = Неопределено;
			ЗадатьВопросОтменыДействия(ПараметрыОповещения);
		КонецЕсли;
	// Ответ на комментарий
	ИначеЕсли СтруктураСсылки.Действие = "answer" Тогда
		Если ТекущиеДействия.Действие = "Ответ"
			И ТекущиеДействия.Идентификатор = СтруктураСсылки.Идентификатор Тогда
			// Если пользователь несколько раз нажмет на одну и ту же ссылку
			Возврат;
		ИначеЕсли ТекущиеДействия.Идентификатор = Неопределено Тогда
			ТекущиеДействия.Действие = "Ответ";
			ТекущиеДействия.Объект = СтруктураСсылки.Объект;
			ТекущиеДействия.Идентификатор = СтруктураСсылки.Идентификатор;
			Элементы.КнопкаОпубликоватьКомментарий.Заголовок = "Ответить";
			Элементы.КнопкаОчиститьКомментарий.Заголовок = "Отменить действие и очистить";
			ОтобразитьПанельРедактирования();
			ИзменитьВыделениеКомментарияВСписке(Строка(СтруктураСсылки.Идентификатор), Истина);
			НастроитьПолеВиденВсем();
		Иначе
			ПараметрыОповещения = Новый Структура("Действие, Объект, Идентификатор");
			ПараметрыОповещения.Действие = "Ответ";
			ПараметрыОповещения.Объект = СтруктураСсылки.Объект;
			ПараметрыОповещения.Идентификатор = СтруктураСсылки.Идентификатор;
			ЗадатьВопросОтменыДействия(ПараметрыОповещения);
		КонецЕсли;
	// Изменение комментария	
	ИначеЕсли СтруктураСсылки.Действие = "edit" Тогда
		Если ТекущиеДействия.Действие = "Изменение"
			И ТекущиеДействия.Идентификатор = СтруктураСсылки.Идентификатор Тогда
			// Если пользователь несколько раз нажмет на одну и ту же ссылку
			Возврат;
 		ИначеЕсли ТекущиеДействия.Идентификатор = Неопределено Тогда
			ТекущиеДействия.Объект = СтруктураСсылки.Объект;
			ТекущиеДействия.Идентификатор = СтруктураСсылки.Идентификатор;
			Данные = ПолучитьКомментарийДляРедактирования(ТекущиеДействия.Объект, 
				ТекущиеДействия.Идентификатор, АдресВременногоХранилища);
			
			Если Данные = Неопределено Тогда
				Сообщить("Запрещено редактировать чужие комментарии!");
				Возврат;
			КонецЕсли;
			
			ТекущиеДействия.Действие = "Изменение";
			ВиденВсем = Данные.НастройкиВидимости.ВиденВсем;
			Элементы.ВиденВсем.Доступность = Данные.НастройкиВидимости.РазрешеноИзменятьВидимость;
			СодержимоеФорматированногоДокумента = Данные.ДанныеДокумента;
			ПрикрепленныеФайлыКомментария = Данные.ВспомогательныеДанные;
			Элементы.КнопкаОпубликоватьКомментарий.Заголовок = "Сохранить";
			Элементы.КнопкаОчиститьКомментарий.Заголовок = "Отменить действие и очистить";
			ОтобразитьПанельРедактирования();
			ИзменитьВыделениеКомментарияВСписке(Строка(СтруктураСсылки.Идентификатор), Истина);
			
			// Поиск в тексте комментария прикрепленных файлов
			ТекстДокумента = Данные.ДанныеДокумента.ТекстHTML;
			ТекстДокумента = Сред(ТекстДокумента, СтрНайти(ТекстДокумента, "<body>"));		
			НаименованияФайлов = ПолучитьНаименованияФайловИзТекста(ТекстДокумента);
			
			// Получим массив структур с данными файлов
			ДанныеФайлов = ПолучитьДанныеФайлов(НаименованияФайлов);
			
			// Заполним список файлов, прикрепленных к комментарию
			Для Каждого Структура Из ДанныеФайлов Цикл
				НоваяСтрока = СсылкиНаФайлыКомментария.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура);
			КонецЦикла;	
			
			ПодключитьОбработчикОжидания("ОбновитьФорматированныйДокумент", 0.1, Истина);
		Иначе
			ПараметрыОповещения = Новый Структура("Действие, Объект, Идентификатор");
			ПараметрыОповещения.Действие = "Изменение";
			ПараметрыОповещения.Объект = СтруктураСсылки.Объект;
			ПараметрыОповещения.Идентификатор = СтруктураСсылки.Идентификатор;
			ЗадатьВопросОтменыДействия(ПараметрыОповещения);
		КонецЕсли;
		// Удаление комментария
	ИначеЕсли СтруктураСсылки.Действие = "delete" Тогда
		ЗадатьВопросУдаленияКомментария(СтруктураСсылки.Объект, ИдентификаторКомментария);
		// Обновление ленты через ссылку	
	ИначеЕсли СтруктураСсылки.Действие = "refresh" Тогда
		ОбновитьЛенту();
		// Изменение видимости подчиненных комментариев
	ИначеЕсли СтруктураСсылки.Действие = "toggleChildVisible" Тогда
		ИзменитьВидимостьПодчиненных(СтруктураСсылки.Идентификатор);
		// Изменение важности комментария	
	ИначеЕсли СтруктураСсылки.Действие = "togglePriority" Тогда
		ИзменитьВажностьКомментария(СтруктураСсылки.Объект, ИдентификаторКомментария);
		
	ИначеЕсли СтруктураСсылки.Действие = "copyLink" Тогда
		ОбщегоНазначенияКлиент.КопироватьТекстВБуферОбмена(СтруктураСсылки.АдресКартинки, "Ссылка скопирована в буфер обмена.");
			
	ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураСсылки.Действие) Тогда			
		#Если ТонкийКлиент Тогда
			РасширениеСсылки = РаботаСФайламиКлиентСервер.РасширениеИмениФайла(ДанныеСобытия.Href, Истина);		
			РасширенияКартинки = ПовторноеИспользованиеВызовСервера.ДопустимыеРасширенияИзображенияВОПисанииДокумента();
			
			Если РасширенияКартинки.Найти(НРег(РасширениеСсылки)) = Неопределено Тогда
				ПерейтиПоНавигационнойСсылке(ДанныеСобытия.Href);
			Иначе
				ОбщегоНазначенияКлиент.ОткрытьПросмотрИзображения(ДанныеСобытия.Href);	
			КонецЕсли;
		#Иначе
			ПерейтиПоНавигационнойСсылке(ДанныеСобытия.Href);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВставитьНавигационнуюСсылку(Команда)
	
	ОбщегоНазначенияКлиент.ВставитьНавигационнуюСсылкуНаОбъект(ЭтотОбъект, Комментарий, "Комментарий");
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЛентуКомментариев(Команда)
	
	ОбновитьЛенту();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпубликоватьКомментарий(Команда)
	
	Если ФорматированныйДокументПустой(Комментарий) Тогда
		ПоказатьПредупреждение(, "Нельзя опубликовать пустой комментарий.", , "Комментарии");		
	Иначе
		// Формирование структуры параметров
		ПараметрыФункции = Новый Структура;
		ПараметрыФункции.Вставить("ИдентификаторОбъекта", ТекущиеДействия.Объект);
		ПараметрыФункции.Вставить("Идентификатор", ТекущиеДействия.Идентификатор);
		ПараметрыФункции.Вставить("ПрикрепленныеФайлы", ПрикрепленныеФайлыКомментария);
		ПараметрыФункции.Вставить("СсылкиНаФайлыКомментария", СсылкиНаФайлыКомментария);
		ПараметрыФункции.Вставить("ВиденВсем", ВиденВсем);
		ПараметрыФункции.Вставить("Действие", ТекущиеДействия.Действие);
		ПараметрыФункции.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
		ПараметрыФункции.Вставить("Источник", ЭтотОбъект.Источник);
		
		Если ТекущиеДействия.Действие = "Публикация" ИЛИ ТекущиеДействия.Действие = "Ответ" Тогда
			РезультатОперации = ОпубликоватьКомментарийНаСервере(ПараметрыФункции, ПросмотренныеКомментарии);
		ИначеЕсли ТекущиеДействия.Действие = "Изменение" Тогда
			РезультатОперации = ИзменитьКомментарийНаСервере(ПараметрыФункции, ПросмотренныеКомментарии);
		КонецЕсли;
		
		Если РезультатОперации.Успешно Тогда
			// При установке тела документа таким способом не произойдет обновления страницы
			Попытка
				Элементы.ЛентаКомментариев.Документ.getElementById("comments").innerHTML = РезультатОперации.ОбластьКомментариев;
				УстановитьЗаголовокКнопкиПоследниеКомментарии(РезультатОперации.КоличествоПоследнихКомментариев);
			Исключение
				ОбновитьЛенту();
				Возврат;
			КонецПопытки;
			
			// Если была публикация, то нужно спустится в самый низ ленты
			Если ТекущиеДействия.Действие = "Публикация" Тогда
				Попытка
					ЭлементКонтент = Элементы.ЛентаКомментариев.Документ.getElementById("content");
					ЭлементКонтент.scrollTo(0, ЭлементКонтент.scrollHeight);
				Исключение
				КонецПопытки;
			ИначеЕсли ТекущиеДействия.Действие = "Ответ" И РезультатОперации.Свойство("ИдентификаторКомментария") Тогда
				Попытка
					Элементы.ЛентаКомментариев.Документ.defaultView.ScrollToComment("comment_" + РезультатОперации.ИдентификаторКомментария);
				Исключение      
				КонецПопытки;
			КонецЕсли;
			// Восстановим значения по умолчанию
			УстановитьТекущиеДействияПоУмолчанию();
			// Сворачивание веток комментариев
			СвернутьВеткиКомментариев();
			// Оповестим другие формы об изменении количества комментариев
			ВладелецФормы.ЕстьНеопубликованныйКомментарий = Ложь;
			Оповестить(СобытияОповещенияКлиент.ИмяСобытияОбновленияКоличестваКомментариев(), Источник);
		Иначе
			Сообщить(РезультатОперации.ТекстОшибки);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоВладельцу(Команда)
		
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗаголовокОкна", "Источники комментариев");
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Истина);
	ПараметрыОткрытия.Вставить("ОтмеченныеЗначения", СвязанныеОбъекты);
	ПараметрыОткрытия.Вставить("ВариантЗаполнения", 1);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьОтметкуСвязанныхОбъектов", ЭтотОбъект);

	ОткрытьФорму("ОбщаяФорма.ПодборЗначений", ПараметрыОткрытия, ЭтотОбъект, КлючУникальности, , , ОписаниеОповещения, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	// Временное решение для исключения ошибки "Cannot read property of undefined"
	// при закрытии формы комментариев и повторном открытии.
	ВладелецФормы.ИскатьПодчиненныеФормы = Ложь;
	ВладелецФормы.ЕстьНеопубликованныйКомментарий = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКомментарий(Команда)
		
	ОписаниеОповещения  = Новый ОписаниеОповещения("ЗавершитьОтветНаВопрос", ЭтотОбъект);
	
	Если НЕ ФорматированныйДокументПустой(Комментарий) Тогда
		Если ТекущиеДействия.Действие = "Публикация" Тогда
			ТекстВопроса = "Содержимое неопубликованного комментария будет очищено. Продолжить?";
		ИначеЕсли ТекущиеДействия.Действие = "Изменение" Тогда
			ТекстВопроса = "Содержимое измененного комментария будет очищено и произойдет отмена изменения. Продолжить?";
		ИначеЕсли ТекущиеДействия.Действие = "Ответ" Тогда
			ТекстВопроса = "Содержимое ответа на комментарий будет очищено и произойдет отмена изменения. Продолжить?";
		КонецЕсли;
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, 
			"Очистка комментария");
	Иначе
		Если ТекущиеДействия.Действие = "Ответ" Тогда
			ТекстВопроса = "Содержимое ответа на комментарий будет очищено и произойдет отмена ответа на комментарий. Продолжить?";
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, 
				"Очистка комментария");
			Возврат;
		КонецЕсли;

		Комментарий.Удалить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФорматирование(Команда)
	
	ОчиститьФорматированиеВсегоТекста();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьВидимостьПанелиФайлов(Команда)
	
	Элементы.ФайлыКомментария.Видимость = НЕ Элементы.ФайлыКомментария.Видимость;
	Элементы.ПереключитьВидимостьПанелиФайлов.Пометка = НЕ Элементы.ПереключитьВидимостьПанелиФайлов.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельНавигацииНажатие(Команда)
	
	ПанельНавигацииКлиент.Нажатие(ЭтотОбъект, Команда, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПоследниеКомментарии(Команда)
	
	ОтображатьПоследниеКомментарии = НЕ ОтображатьПоследниеКомментарии;
	Элементы.ПоказатьПоследниеКомментарии.Пометка = ОтображатьПоследниеКомментарии;
	
	ИзменитьВидимостьПоследнихКомментариев();
	
	СохранитьПользовательскиеНастройки(ОтображатьПоследниеКомментарии);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьЭлементыКомментирования(Команда)
	
	ЛентаРазвернута = НЕ ЛентаРазвернута;
	ИзменитьВысотуЛентыКомментариев();
	ОбновитьОтображениеДанных(Элементы.КоманднаяПанельЛентаКомментариев);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФайл(Команда)
	
	ПараметрыЗагрузки = РаботаСФайламиКлиент.ПараметрыДобавленияФайлов();
	ПараметрыЗагрузки.Автосохранение 	 = Ложь;
	ПараметрыЗагрузки.Владелец           = Источник;
	ПараметрыЗагрузки.МножественныйВыбор = Истина;	
	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
	ПрикреплениеФайловКомментария = Новый Структура("СсылкиНаФайлыКомментария", СсылкиНаФайлыКомментария);
	ПараметрыЗагрузки.Вставить("ПрикреплениеФайловКомментария", ПрикреплениеФайловКомментария);
	
	РаботаСФайламиКлиент.ДобавитьФайлы(ПараметрыЗагрузки);	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОжидания

// Совершает контекстный сервереный вызов для установки
// содержимого форматированного документа
&НаКлиенте
Процедура ОбновитьФорматированныйДокумент() Экспорт
	
	ОбновитьФорматированныйДокументНаСервере(СодержимоеФорматированногоДокумента.ТекстHTML, 
		СодержимоеФорматированногоДокумента.Вложения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещений

&НаКлиенте
Процедура ЗавершитьОтветНаВопрос(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТекущиеДействия.Действие = "Ответ" ИЛИ ТекущиеДействия.Действие = "Изменение" Тогда
			ИзменитьВыделениеКомментарияВСписке(ТекущиеДействия.Идентификатор, Ложь);
		КонецЕсли;
		ВладелецФормы.ЕстьНеопубликованныйКомментарий = Ложь;
		УстановитьТекущиеДействияПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОтметкуСвязанныхОбъектов(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Для Каждого ЭлементСписка Из СвязанныеОбъекты Цикл
			ЭлементСписка.Пометка = (Результат.Найти(ЭлементСписка.Значение) <> Неопределено);
		КонецЦикла;
		
		ОбновитьЛенту();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветНаОтменуДействия(Результат, ДополнительныеПараметры) Экспорт
	
	// Если пользователь отказался от отмены
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	// Если согласился на отмену
	// Снимем выделение с текущего комментария
	ИзменитьВыделениеКомментарияВСписке(ТекущиеДействия.Идентификатор, Ложь);
	
	// Переустановим текущее действие
	ЗаполнитьЗначенияСвойств(ТекущиеДействия, ДополнительныеПараметры);
	
	// Очистка комментария
	Комментарий.Удалить();
	
	// Выделим новый комментарий в ленте
	Если ТекущиеДействия.Действие = "Публикация" Тогда
		Элементы.КнопкаОпубликоватьКомментарий.Заголовок = "Опубликовать";
		Элементы.КнопкаОчиститьКомментарий.Заголовок = "Очистить";
	ИначеЕсли ТекущиеДействия.Действие = "Ответ" Тогда
		Элементы.КнопкаОпубликоватьКомментарий.Заголовок = "Ответить";
		Элементы.КнопкаОчиститьКомментарий.Заголовок = "Отменить действие и очистить";
		ИзменитьВыделениеКомментарияВСписке(ТекущиеДействия.Идентификатор, Истина);
		НастроитьПолеВиденВсем();
	ИначеЕсли ТекущиеДействия.Действие = "Изменение" Тогда
		Данные = ПолучитьКомментарийДляРедактирования(ТекущиеДействия.Объект, ТекущиеДействия.Идентификатор, 
			АдресВременногоХранилища);
		СодержимоеФорматированногоДокумента = Данные.ДанныеДокумента;
		ПрикрепленныеФайлыКомментария = Данные.ВспомогательныеДанные;
		Элементы.КнопкаОпубликоватьКомментарий.Заголовок = "Сохранить";
		Элементы.КнопкаОчиститьКомментарий.Заголовок = "Отменить действие и очистить";
		ИзменитьВыделениеКомментарияВСписке(ТекущиеДействия.Идентификатор, Истина);
		ПодключитьОбработчикОжидания("ОбновитьФорматированныйДокумент", 0.1, Истина);
	КонецЕсли;
	
	// Отобразим и сделаем активной панель редактирования комментария
	ОтобразитьПанельРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветНаУдалениеКомментария(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьКомментарий(ДополнительныеПараметры.Объект, ДополнительныеПараметры.Идентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

&НаСервереБезКонтекста
Функция ДобавитьКартинкамОткрытиеВНовомОкнеИКопирование(Знач Комментарий, Знач Шаблоны)
	
	ИсправленныйКомментарий = Комментарий;	
	
	ПозицияОткрытияКартинки = СтрНайти(Комментарий, "<img");
	ДлинаТега = 5; // длина /img> или src="
	ДлинаКавычки = 1;
	
	Пока ПозицияОткрытияКартинки > 0 Цикл
		ПервыйЭтапКартинки = Сред(Комментарий, ПозицияОткрытияКартинки);
		ПозицияЗакрытияКартинки = СтрНайти(ПервыйЭтапКартинки, "</img>");
		ТегКартинки = Лев(ПервыйЭтапКартинки, ПозицияЗакрытияКартинки + ДлинаТега);
		
		ПозицияНачалаАдреса = СтрНайти(ТегКартинки, "src=");
		ПервыйЭтапАдреса = Сред(ТегКартинки, ПозицияНачалаАдреса + ДлинаТега);
		ПозицияЗакрытияАдреса = СтрНайти(ПервыйЭтапАдреса, """");
		АдресКартинки = Лев(ПервыйЭтапАдреса, ПозицияЗакрытияАдреса - ДлинаКавычки);
		
		ТегОткрытьВНовомОкне = СтрШаблон(Шаблоны.Ссылка_ОткрытьВНовомОкне, АдресКартинки, ТегКартинки); 	
		ТегСкопироватьСсылку = СтрШаблон(Шаблоны.Ссылка_Скопировать, АдресКартинки);
				
		ИсправленныйКомментарий = СтрЗаменить(ИсправленныйКомментарий, ТегКартинки, ТегОткрытьВНовомОкне + ТегСкопироватьСсылку);
		
		НомерВхождения = 2;
		ПозицияОткрытияКартинки = СтрНайти(Комментарий, "<img", , ПозицияОткрытияКартинки, НомерВхождения);
	КонецЦикла;
	
	Возврат ИсправленныйКомментарий;
	
КонецФункции

&НаКлиенте
Процедура ЗадатьВопросОтменыДействия(Знач НовоеДействие)
	
	// Формирование строки вопроса
	Если ТекущиеДействия.Действие = "Ответ" Тогда
		ТекстВопроса = "Отменить ответ на выделенный комментарий и ";
		Если НовоеДействие.Действие = "Изменение" Тогда
			ТекстВопроса = ТекстВопроса + "изменить выбранный?";
		ИначеЕсли НовоеДействие.Действие = "Ответ" Тогда
			ТекстВопроса = ТекстВопроса + "ответить на выбранный?";
		ИначеЕсли НовоеДействие.Действие = "Публикация" Тогда
			ТекстВопроса = ТекстВопроса + "добавить новый?";
		КонецЕсли;
	ИначеЕсли ТекущиеДействия.Действие = "Изменение" Тогда
		ТекстВопроса = "Отменить изменение выделенного комментария и ";
		Если НовоеДействие.Действие = "Изменение" Тогда
			ТекстВопроса = ТекстВопроса + "изменить выбранный?";
		ИначеЕсли НовоеДействие.Действие = "Ответ" Тогда
			ТекстВопроса = ТекстВопроса + "ответить на выбранный?";
		ИначеЕсли НовоеДействие.Действие = "Публикация" Тогда
			ТекстВопроса = ТекстВопроса + "добавить новый?";
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветНаОтменуДействия", ЭтотОбъект, НовоеДействие);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросУдаленияКомментария(Знач Объект, Знач Идентификатор)
	
	ПараметрыОповещения = Новый Структура("Объект, Идентификатор", Объект, Идентификатор);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветНаУдалениеКомментария", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьВопрос(ОписаниеОповещения, "Удалить комментарий?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНепросмотренныеКомментарии()
		
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	Комментарии.Пользователь КАК Пользователь,
	|	Комментарии.Идентификатор КАК Идентификатор,
	|	Комментарии.Общедоступный КАК Общедоступный,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы), ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК Филиал
	|ПОМЕСТИТЬ Комментарии
	|ИЗ
	|	РегистрСведений.Комментарии КАК Комментарии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела.СрезПоследних(
	|				&ТекущаяДата,
	|				Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)
	|					И НЕ (ВЫРАЗИТЬ(Данные КАК Справочник.Филиалы)) = ЗНАЧЕНИЕ(Справочник.Филиалы.пустаяссылка)) КАК ЛичныеДелаСрезПоследних
	|		ПО Комментарии.Пользователь = ЛичныеДелаСрезПоследних.Сотрудник
	|ГДЕ
	|	Комментарии.Объект В(&СвязанныеОбъекты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Комментарии.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ДоступныеКомментарии
	|ИЗ
	|	Комментарии КАК Комментарии
	|ГДЕ
	|	Комментарии.Общедоступный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Комментарии.Идентификатор
	|ИЗ
	|	Комментарии КАК Комментарии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО Комментарии.Филиал = Филиалы.Ссылка
	|ГДЕ
	|	НЕ Комментарии.Общедоступный
	|	И &ПользовательИзITФилиала
	|	И Филиалы.ТипФилиала <> ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.НеIT)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Комментарии.Идентификатор
	|ИЗ
	|	Комментарии КАК Комментарии
	|ГДЕ
	|	НЕ Комментарии.Общедоступный
	|	И &ПользовательИзITФилиала
	|	И Комментарии.Филиал = &ФилиалПользователя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Комментарии.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.Комментарии КАК Комментарии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДоступныеКомментарии КАК ДоступныеКомментарии
	|		ПО Комментарии.Идентификатор = ДоступныеКомментарии.Идентификатор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НепросмотренныеКомментарии КАК НепросмотренныеКомментарии
	|		ПО (НепросмотренныеКомментарии.Пользователь = &Пользователь)
	|			И (НепросмотренныеКомментарии.Идентификатор = Комментарии.Идентификатор)";
	#КонецОбласти
	
	// Отображение общедоступных комментариев.
	// Пользователям IT филиала и сотрудникам из IT, но принадлежащих не IT филиалу.
	ФилиалПользователя = ПараметрыСеанса.Филиал;
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Если ЗначениеЗаполнено(ФилиалПользователя) Тогда
		ТипФилиала = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФилиалПользователя, "ТипФилиала");
		ПользовательИзITФилиала = (ТипФилиала <> Перечисления.ТипыФилиалов.НеIT);
	Иначе
		ПользовательИзITФилиала = Ложь;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("СвязанныеОбъекты", СвязанныеОбъекты);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ФилиалПользователя", ФилиалПользователя);
	Запрос.УстановитьПараметр("ПользовательИзITФилиала", ПользовательИзITФилиала);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		МассивКомментариев = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Идентификатор");
		НепросмотренныеКомментарии.ЗагрузитьЗначения(МассивКомментариев);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВажностьКомментария(Знач Объект, Знач ИдентификаторКомментарий)
	
	ПараметрыФункции = Новый Структура;
	ПараметрыФункции.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
	ПараметрыФункции.Вставить("Объект", Объект);
	ПараметрыФункции.Вставить("Комментарий", ИдентификаторКомментарий);
	
	ВажностьИзменена = ИзменитьВажностьКомментарияНаСервере(ПараметрыФункции);
	
	Если ВажностьИзменена Тогда
		ИзменитьВажностьКомментарияВЛенте(Строка(ИдентификаторКомментарий));		
	Иначе
		Сообщить("Не удалось изменить важность комментария...");
	КонецЕсли;
	
КонецПроцедуры

// Добавляет/удаляет класс стиля для блока комментария.
// Не вызывает обновления ленты.
&НаКлиенте
Процедура ИзменитьВажностьКомментарияВЛенте(Знач Идентификатор)
	
	// Получение элемента
	Элемент = Элементы.ЛентаКомментариев.Документ.getElementById("comment_" + Идентификатор);
	Ссылка = Элементы.ЛентаКомментариев.Документ.getElementById("comment_link_togglePriority_id_" + Идентификатор);
	
	// Изменение стиля блока комментария
	ТекущийКласс = Элемент.className;
	Если СтрНайти(ТекущийКласс, "highPriority") > 0 Тогда
		Элемент.className = СтрЗаменить(ТекущийКласс, "highPriority", "lowPriority");
		Ссылка.innerHtml = "<span class='togglePriorityImage'></span>Отметить важным";
	Иначе
		Элемент.className = СтрЗаменить(ТекущийКласс, "lowPriority", "highPriority");
		Ссылка.innerHtml = "<span class='togglePriorityImage'></span>Снять отметку важного";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменитьВажностьКомментарияНаСервере(Знач ПараметрыФункции)
		
	Соответствие = ПолучитьИзВременногоХранилища(ПараметрыФункции.АдресВременногоХранилища);
	ОбъектСсылка = Соответствие.Получить(ПараметрыФункции.Объект);
		
	Возврат РегистрыСведений.Комментарии.ИзменитьВажность(ОбъектСсылка, ПараметрыФункции.Комментарий);
	
КонецФункции

// Добавляет/удаляет класс стиля для блока подчиненных комментариев
&НаКлиенте
Процедура ИзменитьВидимостьПодчиненных(Знач Идентификатор, Знач ПослеОбновления = Ложь)
	
	Элемент = Элементы.ЛентаКомментариев.Документ.getElementById("comment_child_" + Идентификатор);
	Ссылка = Элементы.ЛентаКомментариев.Документ.getElementById("toggleChildVisible_" + Идентификатор);
	
	// Изменение стиля блока комментария
	ТекущийКласс = Элемент.className;
	Если СтрНайти(ТекущийКласс, "hidden") > 0 Тогда
		Элемент.className = СокрЛП(СтрЗаменить(ТекущийКласс, "hidden", ""));
		Ссылка.innerHtml = "<span class='collapseImage'></span>Свернуть ветку";
		Если НЕ ПослеОбновления Тогда
			НайденныйЭлемент = СвернутыеКомментарии.Найти(Идентификатор);
			Если НайденныйЭлемент <> Неопределено Тогда
				СвернутыеКомментарии.Удалить(НайденныйЭлемент);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Элемент.className = ТекущийКласс + " hidden";
		Ссылка.innerHtml = "<span class='collapsedImage'></span>Развернуть ветку";
		Если НЕ ПослеОбновления Тогда
			НайденныйЭлемент = СвернутыеКомментарии.Найти(Идентификатор);
			Если НайденныйЭлемент = Неопределено Тогда
				СвернутыеКомментарии.Добавить(Идентификатор);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьПоследнихКомментариев()
	
	ПоследниеКомментарии = Элементы.ЛентаКомментариев.Документ.getElementById("nav");	
	ТекущийКласс = ПоследниеКомментарии.className;
	
	Если СтрНайти(ТекущийКласс, "hidden") > 0 Тогда
		ПоследниеКомментарии.className = СокрЛП(СтрЗаменить(ТекущийКласс, "hidden", ""));	
	Иначе
		ПоследниеКомментарии.className = ТекущийКласс + " hidden";
	КонецЕсли;
	
	Комментарии = Элементы.ЛентаКомментариев.Документ.getElementById("comments");	
	ТекущийКласс = Комментарии.className;
	
	Если СтрНайти(ТекущийКласс, "width85") > 0 Тогда
		Комментарии.className = СокрЛП(СтрЗаменить(ТекущийКласс, "width85", "width100"));	
	Иначе
		Комментарии.className = СокрЛП(СтрЗаменить(ТекущийКласс, "width100", "width85"));	
	КонецЕсли;
		
КонецПроцедуры

// Добавляет/удаляет класс стиля для блока комментария.
// Не вызывает обновления ленты.
&НаКлиенте
Процедура ИзменитьВыделениеКомментарияВСписке(Знач Идентификатор, Знач Выделить)
	
	// Название класса обеспечивающего выделение в списке
	КлассВыделения = " selected";
	
	// Получение элемента
	Элемент = Элементы.ЛентаКомментариев.Документ.getElementById("comment_" + Идентификатор);
	
	// Получение текущих классов блока комментария
	Попытка
		ТекущееВыделение = Элемент.className;
	Исключение
		Возврат;
	КонецПопытки;
	
	// Определение, выделен ли комментарий или нет
	Выделен = СтрНайти(ТекущееВыделение, КлассВыделения) > 0;
	
	// Если нужно снять выделение в списке
	Если Выделен И НЕ Выделить Тогда
		Элемент.className = СтрЗаменить(ТекущееВыделение, КлассВыделения, "");
	// Если нужно выделить комментарий в списке	
	ИначеЕсли НЕ Выделен И Выделить Тогда
		Элемент.className = ТекущееВыделение + КлассВыделения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВысотуЛентыКомментариев()
	
	Если ЛентаРазвернута Тогда
		Элементы.ПоказатьСкрытьЭлементыКомментирования.Картинка = БиблиотекаКартинок.РазвернутьЛенту;
	Иначе
		Элементы.ПоказатьСкрытьЭлементыКомментирования.Картинка = БиблиотекаКартинок.СвернутьЛенту;
	КонецЕсли;
	
	Элементы.УправлениеКомментарием.Видимость = НЕ ЛентаРазвернута;
	Элементы.КоманднаяПанельДействия.Видимость = НЕ ЛентаРазвернута;		
	
КонецПроцедуры

&НаСервере
Функция ИзменитьКомментарийНаСервере(Знач ПараметрыФункции, Знач ПросмотренныеКомментарии)
	
	Результат = Новый Структура("Успешно, ОбластьКомментариев, ТекстОшибки, КоличествоПоследнихКомментариев", Ложь, "", "", 0);
	
	// Получение ссылки на объект из соответствия
	Соответствие = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	ОбъектСсылка = Соответствие.Получить(ПараметрыФункции.ИдентификаторОбъекта);
	
	// Получение текста комментария без картинок и тегов
	ТекстHTML = "";
	Вложения = Новый Структура;
	Комментарий.ПолучитьHTML(ТекстHTML, Вложения);
	
	ТекстИзHTML = ОбщегоНазначения.ПолучитьТекстИзHTML(ТекстHTML);
	ЭкранированныйТекст = ОбщегоНазначенияКлиентСервер.ЭкранироватьУгловыеСкобки(ТекстИзHTML);
	ТекстБезТегов = СтрЗаменить(ЭкранированныйТекст, Символы.ПС + Символы.ПС, "<br>");
	
	ТекстСообщения = Неопределено;
	Если НЕ ПустаяСтрока(ТекстБезТегов) Тогда
		
		ЧастиСообщения = Новый Массив;
		
		Шаблоны = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма();
		
		ШаблонПисьма = Шаблоны.БлокОсновногоТекста;
		
		ТекстШаблона = СтрЗаменить(Шаблоны.ЗаголовокСобытия, "<!-- event_date -->", Формат(ТекущаяДатаСеанса(), Шаблоны.ФорматДаты));
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- user_name -->", Строка(ПараметрыСеанса.ТекущийПользователь));
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- event -->", "добавил(-а) комментарий:");
		
		ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- content -->", ТекстШаблона);
		ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- font_size -->", "14px");
		
		ЧастиСообщения.Добавить(ШаблонПисьма);
		
		ТекстШаблона = "Автоматическое закрытие задач, находящихся в статусах ""Тестирование"" и ""Протестирована"" более 10 рабочих дней.";
		
		ШаблонПисьма = СтрЗаменить(Шаблоны.Комментарий, "<!-- content -->", ЭкранированныйТекст);
		
		ЧастиСообщения.Добавить(ШаблонПисьма);

		Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.Задача") Тогда
			ТекстСтатуса = СтрШаблон("Статус: <b>%1</b>", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "Статус"));
			ШаблонСтатус = СтрЗаменить(Шаблоны.БлокОсновногоТекста, "<!-- content -->", ТекстСтатуса);
			ШаблонСтатус = СтрЗаменить(ШаблонСтатус, "<!-- font_size -->", "14px");
			ЧастиСообщения.Вставить(0, ШаблонСтатус); 
		КонецЕсли;
		
		ТекстСообщения = СтрСоединить(ЧастиСообщения, Символы.ПС);
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		// Сохранение вложений на сервере и получение текста комментария
		ТекстКомментария = СохранитьВложенияНаСервереИПолучитьТекстКомментария(ОбъектСсылка, 
			ПараметрыФункции.ПрикрепленныеФайлы, ПараметрыФункции.СсылкиНаФайлыКомментария, ПараметрыФункции.Идентификатор);
		
		Если ТекстКомментария <> Неопределено Тогда
			// Запись комментария в регистр/-ы сведений
			РезультатЗаписи = РегистрыСведений.Комментарии.Изменить(ОбъектСсылка, ПараметрыФункции.Идентификатор, 
				ТекстКомментария, ПараметрыФункции.ВиденВсем, ТекстБезТегов);
			
			Результат.Успешно = РезультатЗаписи.Успешно;
			
			// Постановка в очередь события на удаление оповещения о комментарии
			РегистрыСведений.ОчередьСобытийНаОбработку.УдалитьОповещение(ОбъектСсылка, ПараметрыФункции.Идентификатор);
			
			// Постановка в очередь события на оповещение об изменении комментария
			Если ТекстСообщения <> Неопределено Тогда
				РегистрыСведений.ОчередьСобытийНаОбработку.ОтправитьОповещение(ОбъектСсылка, ТекстСообщения, 
					РезультатЗаписи.ДатаСозданияКомментария, ПараметрыФункции.Идентификатор, ВиденВсем);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Иначе
			Результат.Успешно = Ложь;
			Результат.ТекстОшибки = "Не удалось сохранить изображение, добавленное из буфера обмена. Необходимо удалить изображения и попытаться добавить снова.";
		КонецЕсли;
	Исключение
		ОтменитьТранзакцию();
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = "Не удалось опубликовать комментарий...";
		
		// Если все пойдет не по плану запись в ЖР не помешает.
		ЗаписьЖурналаРегистрации("Комментарии.Изменение", УровеньЖурналаРегистрации.Ошибка, , ОбъектСсылка, 
			"Ошибка изменения комментария по причине: " + ОписаниеОшибки());
	КонецПопытки;
	
	Если Результат.Успешно Тогда		
		// Получение ленты полностью
		ДанныеЛенты = ПолучитьЛентуКомментариев(СвязанныеОбъекты, АдресВременногоХранилища, 
			ОтображатьПоследниеКомментарии, НепросмотренныеКомментарии, ПросмотренныеКомментарии);	
			
		// Получение только содержимого между тегами body
		Результат.ОбластьКомментариев = ДанныеЛенты.ОбластьКомментариев;
		Результат.КоличествоПоследнихКомментариев = ДанныеЛенты.КоличествоПоследнихКомментариев;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура НастроитьПолеВиденВсем()
	
	ЭлементНайден = (Элементы.ЛентаКомментариев.Документ.getElementById("privateMessage_" + ТекущиеДействия.Идентификатор) <> Неопределено);
	Если ТекущиеДействия.Действие = "Ответ" Тогда
		ВиденВсем = НЕ ЭлементНайден;
		Элементы.ВиденВсем.Доступность = НЕ ЭлементНайден;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет ленту и сбрасывает текущие действия
&НаКлиенте
Процедура ОбновитьЛенту(Знач ИдентификаторКомментария = Неопределено) Экспорт
	
	ДанныеЛенты = ПолучитьЛентуКомментариев(СвязанныеОбъекты, АдресВременногоХранилища, 
		ОтображатьПоследниеКомментарии, НепросмотренныеКомментарии, ПросмотренныеКомментарии);
		
	Попытка
		Элементы.ЛентаКомментариев.Документ.getElementById("comments").innerHTML = ДанныеЛенты.ОбластьКомментариев;
		
		Если НЕ ЗначениеЗаполнено(ИдентификаторКомментария) Тогда
			ЭлементКонтент = Элементы.ЛентаКомментариев.Документ.getElementById("content");
			ЭлементКонтент.scrollTo(0, ЭлементКонтент.scrollHeight);
		Иначе
			Элементы.ЛентаКомментариев.Документ.defaultView.ScrollToComment("comment_" + ИдентификаторКомментария);
		КонецЕсли;
	Исключение
		ЛентаКомментариев = ДанныеЛенты.Лента;
	КонецПопытки;
	
	УстановитьЗаголовокКнопкиПоследниеКомментарии(ДанныеЛенты.КоличествоПоследнихКомментариев);
	
	УстановитьТекущиеДействияПоУмолчанию(Ложь);

	СвернутьВеткиКомментариев();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСкриптНавигацииЛенты()
	
	// Поведение в тонком и веб клиенте отличаются, 
	// поэтому для разных клиентов используем свои скрипты.
	
	#Если ТонкийКлиент Тогда 
		Скрипт = 
		"<script type='text/javascript'>
		|	function ScrollToElement(link_id){
		|	id = link_id.substr(5);
		|	var el = document.getElementById(id);
		|	el.scrollIntoView();
		|	var oldColor = '#ffffff';
		|	if (el.classList.contains('selected')){oldColor = '#fff2e6';}
		|	if (el.classList.contains('service')){oldColor = '#eeeeee';}
		|	if (el.classList.contains('highPriority')){oldColor = '#ffdddd';}
		|	el.style.backgroundColor = '#fdf1a5';
		|	setTimeout(function(){el.style.backgroundColor = oldColor;}, 250);
		|	}
		|</script>";
	#Иначе
		Скрипт =
		"<script type='text/javascript'>
		|	function ScrollToElement(link_id){
		|	id = link_id.substr(5);
		|	var el = document.getElementById(id);
		|	offsetTopParent = getОffsetParent(el.offsetParent); 	
		|	document.getElementByID('content').scrollTo({top: el.offsetTop + offsetTopParent, behavior: 'smooth'});
		|	var oldColor = '#ffffff';
		|	if (el.classList.contains('selected')){oldColor = '#fff2e6';}
		|	if (el.classList.contains('service')){oldColor = '#eeeeee';}
		|	if (el.classList.contains('highPriority')){oldColor = '#ffdddd';}
		|	el.style.backgroundColor = '#fdf1a5';
		|	setTimeout(function(){el.style.backgroundColor = oldColor;}, 350);
		|	}
		|</script>
		|	<script type='text/javascript'>
		|	function getОffsetParent(Parent){
		|	offsetTop = Parent.offsetTop;
		|	if(Parent.offsetParent !== null)
		|	offsetTop = offsetTop + getОffsetParent(Parent.offsetParent);
		|	return offsetTop;
		|	}
		|</script>";
	#КонецЕсли	
	
	// Отдельный метод для скрола при добавлении ответа
	
	Скрипт = Скрипт + 
	"<script type='text/javascript'>
	|	function ScrollToComment(id){
	|		var el = document.getElementById(id);
	|		var body = document.getElementById('content');
	|		var height = body.clientHeight;
	|		var el_height = el.offsetHeight;
	|		var top  = body.scrollTop + el.getBoundingClientRect().top;
	|		body.scrollTo(body.scrollTop,  Math.round(top - height/2 + el_height/2));
	|		var oldColor = '#ffffff';                      
	|		if (el.classList.contains('selected')){oldColor = '#fff2e6';}
	|		if (el.classList.contains('service')){oldColor = '#eeeeee';}
	|		if (el.classList.contains('highPriority')){oldColor = '#ffdddd';}
	|		el.style.backgroundColor = '#fdf1a5';
	|		setTimeout(function(){el.style.backgroundColor = oldColor;}, 350);
	|	}
	|</script>";
	
	ЛентаКомментариев = СтрЗаменить(ЛентаКомментариев, "<!--script_place-->", Скрипт);	
	  
КонецПроцедуры

// Очередной костль для установки вложений форматированного документа
&НаСервере
Процедура ОбновитьФорматированныйДокументНаСервере(Знач ТекстHTML, Знач Вложения)

	Комментарий.УстановитьHTML(ТекстHTML, Вложения);
	
КонецПроцедуры

&НаСервере
Функция ОпубликоватьКомментарийНаСервере(Знач ПараметрыФункции, Знач ПросмотренныеКомментарии)
	
	Результат = Новый Структура("Успешно, ОбластьКомментариев, ТекстОшибки, КоличествоПоследнихКомментариев", Ложь, "", "", 0);
		
	// Получение ссылки на объект по уникальному идентификатору
	Соответствие = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	ОбъектСсылка = Соответствие.Получить(ПараметрыФункции.ИдентификаторОбъекта);
	ИдентификаторНовогоКомментария = Новый УникальныйИдентификатор;
	
	// Получение текста комментария без картинок и тегов
	ТекстHTML = "";
	Вложения = Новый Структура;
	Комментарий.ПолучитьHTML(ТекстHTML, Вложения);
	
	ТекстИзHTML = ОбщегоНазначения.ПолучитьТекстИзHTML(ТекстHTML);
	ЭкранированныйТекст = ОбщегоНазначенияКлиентСервер.ЭкранироватьУгловыеСкобки(ТекстИзHTML);
	ТекстДляУведомления = СтрЗаменить(ЭкранированныйТекст, Символы.ПС + Символы.ПС, "<br>");
	
	ТекстБезТегов = СтрЗаменить(ТекстИзHTML, Символы.ПС + Символы.ПС, Символы.ПС);
	
	ТекстСообщения = Неопределено;
	Если НЕ ПустаяСтрока(ТекстДляУведомления) Тогда
		
		ЧастиСообщения = Новый Массив;
		
		ШаблоныПисьма = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма();
		
		ШаблонПисьма = ШаблоныПисьма.БлокОсновногоТекста;
		
		ТекстШаблона = СтрЗаменить(ШаблоныПисьма.ЗаголовокСобытия, "<!-- event_date -->", Формат(ТекущаяДатаСеанса(), ШаблоныПисьма.ФорматДаты));
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- user_name -->", Строка(ПараметрыСеанса.ТекущийПользователь));

		// Если происходит ответ на комментарий, то 
		// получим ФИО пользователя добавившего комментарий			
		АвторРодительскогоКомментария = "";
		Если ПараметрыФункции.Действие = "Ответ" Тогда
			СсылкаНаОбъект = Соответствие.Получить(Новый УникальныйИдентификатор(ПараметрыФункции.ИдентификаторОбъекта));
			АвторРодительскогоКомментария = ПолучитьАвтораКомментария(СсылкаНаОбъект, ПараметрыФункции.Идентификатор);
			
			ТекстСобытия = СтрШаблон("ответил(-а) <b>%1</b>:", АвторРодительскогоКомментария);
		Иначе
			ТекстСобытия = "добавил(-а) комментарий:";
		КонецЕсли;
		
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- event -->", ТекстСобытия);

		ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- content -->", ТекстШаблона);
		ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- font_size -->", "14px");
		
		ЧастиСообщения.Добавить(ШаблонПисьма);
		
		ШаблонПисьма = СтрЗаменить(ШаблоныПисьма.Комментарий, "<!-- content -->", ТекстДляУведомления);
		
		ЧастиСообщения.Добавить(ШаблонПисьма);
		
		Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.Задача") Тогда 
			ТекстСтатуса = СтрШаблон("Статус: <b>%1</b>", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "Статус"));
			ШаблонСтатус = СтрЗаменить(ШаблоныПисьма.БлокОсновногоТекста, "<!-- content -->", ТекстСтатуса);
			ШаблонСтатус = СтрЗаменить(ШаблонСтатус, "<!-- font_size -->", "14px");
			ЧастиСообщения.Вставить(0, ШаблонСтатус); 
		КонецЕсли;
		
		ТекстСообщения = СтрСоединить(ЧастиСообщения, Символы.ПС);
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		// Сохранение вложений на сервере и получение текста комментария
		ТекстКомментария = СохранитьВложенияНаСервереИПолучитьТекстКомментария(ОбъектСсылка, 
			ПараметрыФункции.ПрикрепленныеФайлы, ПараметрыФункции.СсылкиНаФайлыКомментария, ИдентификаторНовогоКомментария);
		
		Если ТекстКомментария <> Неопределено Тогда
			// Добавление комментарий в регистр/-ы сведений
			РезультатОперации = РегистрыСведений.Комментарии.Добавить(ОбъектСсылка, ИдентификаторНовогоКомментария,
				ПараметрыСеанса.ТекущийПользователь, ТекстКомментария, ПараметрыФункции.Идентификатор, Ложь, ПараметрыФункции.ВиденВсем, ТекстБезТегов);	
				
			Если РезультатОперации.Успешно Тогда
				// Отправка оповещения о созданном комментарии
				Если ТекстСообщения <> Неопределено Тогда
					РегистрыСведений.ОчередьСобытийНаОбработку.ОтправитьОповещение(ОбъектСсылка, ТекстСообщения, , РезультатОперации.ИдентификаторКомментария, ВиденВсем);
				КонецЕсли;
				
				ИнтеграцияДополнительныхПодсистем.ДобавитьЗаданиеОтправитьКомментарийВTrello(ОбъектСсылка, ТекстБезТегов);
			КонецЕсли;
			
			Результат.Успешно = Истина;  
			Результат.Вставить("ИдентификаторКомментария", РезультатОперации.ИдентификаторКомментария);
			ЗафиксироватьТранзакцию();
		Иначе
			Результат.Успешно = Ложь;
			Результат.ТекстОшибки = "Не удалось сохранить изображение, добавленное из буфера обмена. Необходимо удалить изображение и попытаться добавить снова.";
		КонецЕсли;
	Исключение	
		ОтменитьТранзакцию();
		Результат.Успешно = Ложь;
		
		// Если все пойдет не по плану запись в ЖР не помешает.
		ЗаписьЖурналаРегистрации("Комментарии.Добавление", УровеньЖурналаРегистрации.Ошибка, , ОбъектСсылка, 
			"Ошибка добавления комментария по причине: " + ОписаниеОшибки());
	КонецПопытки;
	
	Если Результат.Успешно Тогда
		// Получаем ленту и вырезаем из неё тело
		ДанныеЛенты = ПолучитьЛентуКомментариев(СвязанныеОбъекты, АдресВременногоХранилища, 
			ОтображатьПоследниеКомментарии, НепросмотренныеКомментарии, ПросмотренныеКомментарии);
			
		Результат.ОбластьКомментариев = ДанныеЛенты.ОбластьКомментариев;
		Результат.КоличествоПоследнихКомментариев = ДанныеЛенты.КоличествоПоследнихКомментариев;
		
		Если ЗначениеЗаполнено(ТекстБезТегов) И ВиденВсем Тогда
			Если ИнтеграцияДополнительныхПодсистемПовтИсп.ТребуетсяОтправкаКомментарияИлиВложенияВJira(ПараметрыФункции.Источник) Тогда
				ИнтеграцияДополнительныхПодсистем.СоздатьЗаданиеОтправитьКомментарийВJira(ПараметрыФункции.Источник, 
					ТекстБезТегов, ЭтотОбъект.УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Вызывается в случае если происходит изменение,
// публикация или ответ на комментарий
&НаКлиенте
Процедура ОтобразитьПанельРедактирования()
	
	// Это признак развернутости ленты комментариев,
	// а не области редактирования, прошу не путать.
	ЛентаРазвернута = Ложь;
	ИзменитьВысотуЛентыКомментариев();
	ОбновитьОтображениеДанных(Элементы.КоманднаяПанельЛентаКомментариев);
	
	// Установка активным элементом поля редактирования комментария
	ТекущийЭлемент = Элементы.Комментарий;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьФорматированиеВсегоТекста()
	
	ОчищенныйДокумент = Новый ФорматированныйДокумент;
	
	Для Каждого Параграф Из Комментарий.Элементы Цикл
		ОчищенныйПараграф = ОчищенныйДокумент.Элементы.Добавить();
		
		Для Каждого Элемент Из Параграф.Элементы Цикл
			ТипЭлемента = ТипЗнч(Элемент);
			
			Если ТипЭлемента = Тип("ТекстФорматированногоДокумента") Тогда
				Содержание = Элемент.Текст;
			ИначеЕсли ТипЭлемента = Тип("КартинкаФорматированногоДокумента") Тогда
				Содержание = Элемент.Картинка;
			ИначеЕсли ТипЭлемента = Тип("ПереводСтрокиФорматированногоДокумента") Тогда
				Содержание = Элемент;
			КонецЕсли;
		
			ОчищенныйПараграф.Элементы.Добавить(Содержание, ТипЭлемента);
		КонецЦикла;
	КонецЦикла;
	
	Комментарий = ОчищенныйДокумент;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнформациюОПользователе(Знач СтрокаСсылки, СтандартнаяОбработка)
	
	ИдентификаторПользователя = Новый УникальныйИдентификатор(Сред(СтрокаСсылки, СтрНайти(СтрокаСсылки, "sdms_user_") + 10));
	ИнтерфейсПриложенияКлиент.ОткрытьИнформациюОПользователе(ЭтотОбъект, ИдентификаторПользователя, СтандартнаяОбработка);
	
КонецПроцедуры

// Функция - Парсит ссылку и получает действие, объект к которому относится комментария и идентификатор комментария
// 
//
// Параметры:
//  Ссылка	 - 	 НавигационнаяСсылка, URL - Ссылка на файл или на объект информационной базы, на которую нажал пользователь 
// 
// Возвращаемое значение:
//   - 
//
&НаКлиенте
Функция ПолучитьСвойстваГиперссылки(Знач Ссылка)
	
	Результат = Новый Структура;
	Результат.Вставить("Действие", "");
	Результат.Вставить("Идентификатор", "");
	Результат.Вставить("Объект", "");
	Результат.Вставить("АдресКартинки", "");
	
	// Определим, содержит ли ссылка sdms_action действие
	ПозицияSdmsДействия = СтрНайти(Ссылка, "sdms_action");
	
	Если ПозицияSdmsДействия = 0 Тогда
		Результат.Действие = "";
	Иначе
		Ссылка = СтрЗаменить(Ссылка, "&amp;", "&");
		Данные = СтрРазделить(Сред(Ссылка, ПозицияSdmsДействия), "&", Ложь);
		
		КоличествоПараметров = Данные.Количество();
		// Любая ссылка на странице комментариев имеет 1, 2 или 3 параметра
		// 1 - значит это действие, которое никак не связано с изменением данных в регистре комментариев. 
		// 2 - действие + адрес изображения.
		// 3 - действие, уникальный идентификатор объекта к которому относится комментарий, 
		// и, собственно, идентификатор самого комментария по ссылке которого произошло нажатие
		
		Если КоличествоПараметров = 1 Тогда
			Результат.Действие = СтрЗаменить(Данные.Получить(0), "sdms_action=", "");
		ИначеЕсли КоличествоПараметров = 2 Тогда
			Результат.Действие = СтрЗаменить(Данные.Получить(0), "sdms_action=", "");
			Результат.АдресКартинки = СтрЗаменить(Данные.Получить(1), "link=", "");
		Иначе
			Результат.Действие = СтрЗаменить(Данные.Получить(0), "sdms_action=", "");
			// Получим сразу уникальные идентификаторы вместо строковых значений
			
			Попытка
				Результат.Идентификатор = Новый УникальныйИдентификатор(СтрЗаменить(Данные.Получить(1), "comment=", ""));
				Результат.Объект = Новый УникальныйИдентификатор(СтрЗаменить(Данные.Получить(2), "object=", ""));
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				КомментарийОшибки = СтрШаблон(
				"Текст ошибки: %1
				|Ссылка: %2
				|Количество параметров: %3
				|Идентификатор: %4", ТекстОшибки, Ссылка, КоличествоПараметров, Данные.Получить(1));
				
				ОбщегоНазначенияВызовСервера.ЗаписьЖурналаРегистрацииНаСервере("Комментарии.ПолучитьСвойстваГиперссылки", КомментарийОшибки);
				ВызватьИсключение ТекстОшибки;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьАвтораКомментария(Знач Объект, Знач ИдентификаторКомментария)
	
	Результат = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(Комментарии.Пользователь) КАК Пользователь
	|ИЗ
	|	РегистрСведений.Комментарии КАК Комментарии
	|ГДЕ
	|	Комментарии.Объект = &Объект
	|	И Комментарии.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Идентификатор", Строка(ИдентификаторКомментария));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = ОбщегоНазначения.ПросклонятьФИО(Выборка.Пользователь, 3);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗаполненныйШаблонКомментарияВерхнегоУровня(Знач Комментарий, Знач Шаблоны)
	
	Результат = Новый Структура("БлокКомментария, ШаблонЗамены", "", "<!--comment_place-->");
	
	ИсправленныйКомментарий = ДобавитьКартинкамОткрытиеВНовомОкнеИКопирование(Комментарий.Комментарий, Шаблоны);
		
	// Поддержка старого оформления ответов на комментарии
	ИсправленныйКомментарий = СтрЗаменить(ИсправленныйКомментарий, "[quote]", "<blockquote>");
	ИсправленныйКомментарий = СтрЗаменить(ИсправленныйКомментарий, "[/quote]", "</blockquote>");
	
	// Подготовка данных для установки ссылки на объект
	КодСсылки = "<a href='%1' title='Открыть %2'>%3</a>";
	Если ТипЗнч(Комментарий.Объект) = Тип("ДокументСсылка.ВнутреннееЗадание") Тогда
		КодСсылки = СтрШаблон(КодСсылки, ПолучитьНавигационнуюСсылку(Комментарий.Объект), "внутреннее задание " + Комментарий.НомерОбъекта, "Внутреннее задание " + Комментарий.НомерОбъекта);
	ИначеЕсли ТипЗнч(Комментарий.Объект) = Тип("ДокументСсылка.Задача") Тогда
		КодСсылки = СтрШаблон(КодСсылки, ПолучитьНавигационнуюСсылку(Комментарий.Объект), "задачу " + Комментарий.НомерОбъекта, "Задача " + Комментарий.НомерОбъекта);
	ИначеЕсли ТипЗнч(Комментарий.Объект) = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
		КодСсылки = СтрШаблон(КодСсылки, ПолучитьНавигационнуюСсылку(Комментарий.Объект), "заявку на разработку " + Комментарий.НомерОбъекта, "Заявка на разработку " + Комментарий.НомерОбъекта);
	ИначеЕсли ТипЗнч(Комментарий.Объект) = Тип("СправочникСсылка.Проекты") Тогда
		КодСсылки = СтрШаблон(КодСсылки, ПолучитьНавигационнуюСсылку(Комментарий.Объект), "проект " + Комментарий.НомерОбъекта, "Проект " + Комментарий.НомерОбъекта);
	КонецЕсли;
	
	СсылкаПользователь = СтрШаблон("<a href='sdms_user_%1' title='%2'>%2</a>", Комментарий.Автор.УникальныйИдентификатор(), Комментарий.АвторПредставление);	
	
	// Заполнение основных данных 
	ШаблонКомментария = Шаблоны.Комментарий;
	ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_id-->", "comment_" + Комментарий.ИдентификаторКомментария);
	ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_author-->", СсылкаПользователь);
	ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_date-->", Формат(Комментарий.ДатаСеанса, "ДФ='dd.MM.yyyy HH:mm'"));
	ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_date_title-->", СтрШаблон("title = '%1 (%2)'", 
		Формат(Комментарий.Дата, "ДФ='dd.MM.yyyy HH:mm'"), "VLAT " + Комментарий.Смещение));	
	ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_text-->", ИсправленныйКомментарий);
	ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_child_id-->", "comment_child_" + Комментарий.ИдентификаторКомментария);
	ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_object-->", КодСсылки);
	
	// Если комментарий не служебный нужно добавить ссылки для ответа, изменения, отметки важным
	Если Комментарий.РазрешенОтвет Тогда
		// Если комментарий ограничен для просмотра
		Если НЕ Комментарий.ВиденВсем Тогда
			ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_privateMassage-->", "<span class='privateMessageImage' id='privateMessage_" + Комментарий.ИдентификаторКомментария + "'></span>");
		КонецЕсли;
		
		// Формирование общей части ссылок
		ОбщаяЧастьСсылок = "&comment=" + Комментарий.ИдентификаторКомментария + "&object=" + Комментарий.ИдентификаторОбъекта;
				
		// Ссылка "Ответить"
		ШаблонСсылки_Ответить = СтрЗаменить(Шаблоны.Ссылка_Ответить, "<!--comment_link_answer-->", "sdms_action=answer" + ОбщаяЧастьСсылок);
		ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_body_panel_item-->", ШаблонСсылки_Ответить);
		
		// Если комментарий имеет подчиненные
		Если Комментарий.ЕстьПодчиненные Тогда
			// Ссылка "Свернуть ветку"
			ШаблонСсылки_СвернутьВетку = СтрЗаменить(Шаблоны.Ссылка_СвернутьВетку, "<!--comment_link_toggleChildVisible-->", "sdms_action=toggleChildVisible" + ОбщаяЧастьСсылок);
			ШаблонСсылки_СвернутьВетку = СтрЗаменить(ШаблонСсылки_СвернутьВетку, "<!--link_toggleChildVisible_id-->", "toggleChildVisible_" + Комментарий.ИдентификаторКомментария);
			ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_body_panel_item-->", ШаблонСсылки_СвернутьВетку);
		КонецЕсли;
	
		Если НЕ Комментарий.Служебный Тогда
			
			Если Комментарий.РазрешеноУдалениеИзменение И НЕ Комментарий.ЕстьПодчиненные Тогда
				// Ссылка "Изменить"
				ШаблонСсылки_Изменить = СтрЗаменить(Шаблоны.Ссылка_Изменить, "<!--comment_link_edit-->", "sdms_action=edit" + ОбщаяЧастьСсылок);
				ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_body_panel_item-->", ШаблонСсылки_Изменить);
				
				// Ссылка "Удалить"
				ШаблонСсылки_Удалить = СтрЗаменить(Шаблоны.Ссылка_Удалить, "<!--comment_link_delete-->", "sdms_action=delete" + ОбщаяЧастьСсылок);
				ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_body_panel_item-->", ШаблонСсылки_Удалить);
			КонецЕсли;
			
			// Ссылка "Отметить важным"
			ШаблонСсылки_ОтметитьВажным = СтрЗаменить(Шаблоны.Ссылка_ОтметитьВажным, "<!--comment_link_togglePriority-->", "sdms_action=togglePriority" + ОбщаяЧастьСсылок);
			Если Комментарий.Важный Тогда
				ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_type-->", "highPriority");
				ШаблонСсылки_ОтметитьВажным = СтрЗаменить(ШаблонСсылки_ОтметитьВажным, "<!--comment_link_togglePriority_title-->", "Снять отметку важного");
				ШаблонСсылки_ОтметитьВажным = СтрЗаменить(ШаблонСсылки_ОтметитьВажным, "<!--comment_link_togglePriority_id-->", "comment_link_togglePriority_id_" + Комментарий.ИдентификаторКомментария);
			Иначе
				ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_type-->", "lowPriority");
				ШаблонСсылки_ОтметитьВажным = СтрЗаменить(ШаблонСсылки_ОтметитьВажным, "<!--comment_link_togglePriority_title-->", "Отметить важным");
				ШаблонСсылки_ОтметитьВажным = СтрЗаменить(ШаблонСсылки_ОтметитьВажным, "<!--comment_link_togglePriority_id-->", "comment_link_togglePriority_id_" + Комментарий.ИдентификаторКомментария);
			КонецЕсли;
			ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_body_panel_item-->", ШаблонСсылки_ОтметитьВажным);
		Иначе
			ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_type-->", "service");
		КонецЕсли;
	Иначе
		 ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_type-->", "service");
	КонецЕсли;
	 
	// Резервирование места для последующих дочерних комментариев
	ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_child-->", "<!--comment_child_" + Комментарий.ИдентификаторКомментария + "-->");
	Результат.БлокКомментария = ШаблонКомментария;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗаполненныйШаблонКомментарияНижнегоУровня(Знач Комментарий, Знач Шаблоны)
	
	Результат = Новый Структура("БлокКомментария, ШаблонЗамены", "", "");
	
	ИсправленныйКомментарий = ДобавитьКартинкамОткрытиеВНовомОкнеИКопирование(Комментарий.Комментарий, Шаблоны);
		
	// Подготовка данных для установки ссылки на объект
	КодСсылки = "<a href='%1' alt='Открыть %2'>%3</a>";
	Если ТипЗнч(Комментарий.Объект) = Тип("ДокументСсылка.ВнутреннееЗадание") Тогда
		КодСсылки = СтрШаблон(КодСсылки, ПолучитьНавигационнуюСсылку(Комментарий.Объект), "внутреннее задание " + Комментарий.НомерОбъекта, "Внутреннее задание " + Комментарий.НомерОбъекта);
	ИначеЕсли ТипЗнч(Комментарий.Объект) = Тип("ДокументСсылка.Задача") Тогда
		КодСсылки = СтрШаблон(КодСсылки, ПолучитьНавигационнуюСсылку(Комментарий.Объект), "задачу " + Комментарий.НомерОбъекта, "Задача " + Комментарий.НомерОбъекта);
	ИначеЕсли ТипЗнч(Комментарий.Объект) = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
		КодСсылки = СтрШаблон(КодСсылки, ПолучитьНавигационнуюСсылку(Комментарий.Объект), "заявку на разработку " + Комментарий.НомерОбъекта, "Заявка на разработку " + Комментарий.НомерОбъекта);
	ИначеЕсли ТипЗнч(Комментарий.Объект) = Тип("СправочникСсылка.Проекты") Тогда
		КодСсылки = СтрШаблон(КодСсылки, ПолучитьНавигационнуюСсылку(Комментарий.Объект), "проект " + Комментарий.НомерОбъекта, "Проект " + Комментарий.НомерОбъекта);
	КонецЕсли;
	
	СсылкаПользователь = СтрШаблон("<a href='sdms_user_%1' title='%2'>%2</a>", Комментарий.Автор.УникальныйИдентификатор(), Комментарий.АвторПредставление);
		
	// Заполнение основных данных 
	ШаблонКомментария = Шаблоны.Комментарий;
	ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_id-->", "comment_" + Комментарий.ИдентификаторКомментария);
	ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_author-->", СсылкаПользователь);
	ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_date-->", Формат(Комментарий.ДатаСеанса, "ДФ='dd.MM.yyyy HH:mm'"));
	ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_date_title-->", СтрШаблон("title = '%1 (%2)'", 
		Формат(Комментарий.Дата, "ДФ='dd.MM.yyyy HH:mm'"), "VLAT " + Комментарий.Смещение));	
	ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_text-->", ИсправленныйКомментарий);
	ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_answer-->", "<span class='answer'></span>&nbsp;" + Комментарий.РодительАвтор + " от " + Формат(Комментарий.РодительДатаСеанса, "ДФ='dd.MM.yyyy HH:mm'"));
	ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_child_id-->", "comment_child_" + Комментарий.ИдентификаторКомментария);
	ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_object-->", КодСсылки);
	
	// Если комментарий не служебный нужно добавить ссылки для ответа, изменения, отметки важным
	Если НЕ Комментарий.Служебный Тогда
		// Если комментарий ограничен для просмотра
		Если НЕ Комментарий.ВиденВсем Тогда
			ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_privateMassage-->", "<span class='privateMessageImage' id='privateMessage_" + Комментарий.ИдентификаторКомментария + "'></span>");
		КонецЕсли;

		// Формирование общей части ссылок
		ОбщаяЧастьСсылок = "&comment=" + Комментарий.ИдентификаторКомментария + "&object=" + Комментарий.ИдентификаторОбъекта;
		
		// Ссылка "Ответить"
		ШаблонСсылки_Ответить = СтрЗаменить(Шаблоны.Ссылка_Ответить, "<!--comment_link_answer-->", "sdms_action=answer" + ОбщаяЧастьСсылок);
		ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_body_panel_item-->", ШаблонСсылки_Ответить);
		
		Если Комментарий.РазрешеноУдалениеИзменение И НЕ Комментарий.ЕстьПодчиненные Тогда
			// Ссылка "Изменить"
			ШаблонСсылки_Изменить = СтрЗаменить(Шаблоны.Ссылка_Изменить, "<!--comment_link_edit-->", "sdms_action=edit" + ОбщаяЧастьСсылок);
			ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_body_panel_item-->", ШаблонСсылки_Изменить);
			
			// Ссылка "Удалить"
			ШаблонСсылки_Удалить = СтрЗаменить(Шаблоны.Ссылка_Удалить, "<!--comment_link_delete-->", "sdms_action=delete" + ОбщаяЧастьСсылок);
			ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_body_panel_item-->", ШаблонСсылки_Удалить);
		КонецЕсли;
		
		// Ссылка "Отметить важным"
		ШаблонСсылки_ОтметитьВажным = СтрЗаменить(Шаблоны.Ссылка_ОтметитьВажным, "<!--comment_link_togglePriority-->", "sdms_action=togglePriority" + ОбщаяЧастьСсылок);
		Если Комментарий.Важный Тогда
			ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_type-->", "highPriority");
			ШаблонСсылки_ОтметитьВажным = СтрЗаменить(ШаблонСсылки_ОтметитьВажным, "<!--comment_link_togglePriority_title-->", "Снять отметку важного");
			ШаблонСсылки_ОтметитьВажным = СтрЗаменить(ШаблонСсылки_ОтметитьВажным, "<!--comment_link_togglePriority_id-->", "comment_link_togglePriority_id_" + Комментарий.ИдентификаторКомментария);
		Иначе
			ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_type-->", "lowPriority");
			ШаблонСсылки_ОтметитьВажным = СтрЗаменить(ШаблонСсылки_ОтметитьВажным, "<!--comment_link_togglePriority_title-->", "Отметить важным");
			ШаблонСсылки_ОтметитьВажным = СтрЗаменить(ШаблонСсылки_ОтметитьВажным, "<!--comment_link_togglePriority_id-->", "comment_link_togglePriority_id_" + Комментарий.ИдентификаторКомментария);
		КонецЕсли;		
		ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_body_panel_item-->", ШаблонСсылки_ОтметитьВажным);
		
		// Если комментарий имеет подчиненные
		Если Комментарий.ЕстьПодчиненные Тогда
			// Ссылка "Свернуть ветку"
			ШаблонСсылки_СвернутьВетку = СтрЗаменить(Шаблоны.Ссылка_СвернутьВетку, "<!--comment_link_toggleChildVisible-->", "sdms_action=toggleChildVisible" + ОбщаяЧастьСсылок);
			ШаблонСсылки_СвернутьВетку = СтрЗаменить(ШаблонСсылки_СвернутьВетку, "<!--link_toggleChildVisible_id-->", "toggleChildVisible_" + Комментарий.ИдентификаторКомментария);
			ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_body_panel_item-->", ШаблонСсылки_СвернутьВетку);
		КонецЕсли;
	Иначе
		 ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_type-->", "service");
	КонецЕсли;
	
	Результат.ШаблонЗамены = "<!--comment_child_" + Комментарий.ИдентификаторРодителя + "-->";
	
	// Резервирование места для последующих дочерних комментариев
	ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_child-->", "<!--comment_child_" + Комментарий.ИдентификаторКомментария + "-->");
	ШаблонКомментария = СтрЗаменить(ШаблонКомментария, "<!--comment_place-->", Результат.ШаблонЗамены);
	
	Результат.БлокКомментария = ШаблонКомментария;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКомментарийДляРедактирования(Знач ИдентификаторОбъекта, Знач Идентификатор, Знач АдресВременногоХранилища)
	
	// Получение ссылки на объект
	Соответствие = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	ОбъектСсылка = Соответствие.Получить(ИдентификаторОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Комментарии.Комментарий КАК Комментарий,
	|	Комментарии.Общедоступный КАК ВиденВсем,
	|	ВЫБОР
	|		КОГДА СвязиКомментариев_Подчиненный.Родитель ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА СвязиКомментариев_Родитель.Подчиненный ЕСТЬ NULL
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ВЫБОР
	|							КОГДА Комментарий_Новый_Родители.Общедоступный
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РазрешеноИзменятьВидимость,
	|	Комментарии.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.Комментарии КАК Комментарии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКомментариев КАК СвязиКомментариев_Подчиненный
	|		ПО Комментарии.Идентификатор = СвязиКомментариев_Подчиненный.Родитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКомментариев КАК СвязиКомментариев_Родитель
	|		ПО Комментарии.Идентификатор = СвязиКомментариев_Родитель.Подчиненный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Комментарии КАК Комментарий_Новый_Родители
	|		ПО (СвязиКомментариев_Родитель.Родитель = Комментарий_Новый_Родители.Идентификатор)
	|ГДЕ
	|	Комментарии.Объект = &Объект
	|	И Комментарии.Идентификатор = &Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.Наименование КАК ИмяФайла,
	|	Файлы.Каталог КАК Каталог,
	|	Файлы.ПолучатьИзMinio КАК ПолучатьИзMinio
	|ИЗ
	|	РегистрСведений.ПрикрепленныеФайлы КАК ПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО ПрисоединенныеФайлы.Файл = Файлы.Ссылка
	|ГДЕ
	|	ПрисоединенныеФайлы.Объект = &Объект
	|	И ПрисоединенныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.ИзображениеКомментария)";
	
	Запрос.УстановитьПараметр("Объект", ОбъектСсылка);
	Запрос.УстановитьПараметр("Идентификатор", Строка(Идентификатор));
	
	Пакеты = Запрос.ВыполнитьПакет();
	ВыборкаКомментарий = Пакеты.Получить(0).Выбрать();
	ВыборкаВложения = Пакеты.Получить(1).Выбрать();
	
	// Получение тела документа
	ВыборкаКомментарий.Следующий();
	ТелоДокумента = ВыборкаКомментарий.Комментарий;
	
	// Установка тела в шаблон
	Шаблон = ПолучитьHTMLШаблонРедактированияКомментария();
	Шаблон = СтрЗаменить(Шаблон, "#ОбластьКомментария#", ТелоДокумента);
	
	КаталогФайловНаСервере = ПовторноеИспользованиеВызовСервера.КаталогХраненияФайловНаСервере();
	Вложения = Новый Структура; // Вложения форматированного документа
	ПрисоединенныеФайлы = Новый Структура; // Вспомогательная структура
	
	Пока ВыборкаВложения.Следующий() Цикл			
		ИмяФайлаБезРасширения = РаботаСФайламиКлиентСервер.ИмяФайлаБезРасширения(ВыборкаВложения.ИмяФайла);
		Если СтрНайти(Шаблон, ИмяФайлаБезРасширения) > 0 Тогда
			// Формирование вложения
			
			// TO DO: заменить реквизит ПолучатьИзMinio на значение 
			// СохранятьНаСервер = ИнтеграцияДополнительныхПодсистем.ОпределитьМестоХраненияФайлов();
			// после полного перехода на минио, когда файлы не нужно будет получать из разных источников
			Если ВыборкаВложения.ПолучатьИзMinio Тогда
				Вложение = ИнтеграцияДополнительныхПодсистем.ПолучитьФайл(ВыборкаВложения.ИмяФайла);
			Иначе
				Вложение = КаталогФайловНаСервере + ВыборкаВложения.Каталог + "\" + ВыборкаВложения.ИмяФайла;								
			КонецЕсли;
						
			Картинка = Новый Картинка(Вложение);
			Вложения.Вставить(ИмяФайлаБезРасширения, Картинка);
			
			// Формирование вспомогательных данных
			ХешированиеКартинки = Новый ХешированиеДанных(ХешФункция.MD5);
			ХешированиеКартинки.Добавить(Картинка.ПолучитьДвоичныеДанные());
			ХешСтрокой = ПолучитьПрефиксХешаКартинки() + СтрЗаменить(Строка(ХешированиеКартинки.ХешСумма), " ", "");			
			РасширениеФайла = РаботаСФайламиКлиентСервер.РасширениеИмениФайла(ВыборкаВложения.ИмяФайла);
			ПрисоединенныеФайлы.Вставить(ХешСтрокой, Новый Структура("Расширение, ИмяФайлаБезРасширения, Ссылка", РасширениеФайла, ИмяФайлаБезРасширения, ВыборкаВложения.Ссылка));
		КонецЕсли;
	КонецЦикла;
	
	Если ВыборкаКомментарий.Пользователь <> ПараметрыСеанса.ТекущийПользователь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура("ДанныеДокумента, ВспомогательныеДанные, НастройкиВидимости");
	Результат.ДанныеДокумента = Новый Структура("ТекстHTML, Вложения", Шаблон, Вложения);
	Результат.ВспомогательныеДанные = ПрисоединенныеФайлы;
	Результат.НастройкиВидимости = Новый Структура("ВиденВсем, РазрешеноИзменятьВидимость", ВыборкаКомментарий.ВиденВсем, ВыборкаКомментарий.РазрешеноИзменятьВидимость);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЛентуКомментариев(Знач СписокОбъектов, АдресВременногоХранилища, Знач ОтображатьПоследние, Знач НепросмотренныеКомментарии, Знач ПросмотренныеКомментарии)
	
	// Список для хранения выбранных объектов
	ВыбранныеСвязанныеОбъекты = Новый СписокЗначений;
	
	// Создание и заполнение вспомогательного соответствия
	// которое хранит соответствие идентификатора ссылки самой ссылке
	ИдентификаторСсылка = Новый Соответствие;
	
	Для Каждого Объект Из СписокОбъектов Цикл
		// Добавление в соответствие
		ИдентификаторСсылка.Вставить(Объект.Значение.УникальныйИдентификатор(), Объект.Значение);
		
		// Добавление выбранного объекта в список
		Если Объект.Пометка Тогда
			ВыбранныеСвязанныеОбъекты.Добавить(Объект.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументЗадача.Ссылка КАК Объект,
	|	ДокументЗадача.Номер КАК Номер
	|ПОМЕСТИТЬ НомераОбъектов
	|ИЗ
	|	Документ.Задача КАК ДокументЗадача
	|ГДЕ
	|	ДокументЗадача.Ссылка В(&СвязанныеОбъекты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументЗаявкаНаРазработку.Ссылка,
	|	ДокументЗаявкаНаРазработку.Номер
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ДокументЗаявкаНаРазработку
	|ГДЕ
	|	ДокументЗаявкаНаРазработку.Ссылка В(&СвязанныеОбъекты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументВнутреннееЗадание.Ссылка,
	|	ДокументВнутреннееЗадание.Номер
	|ИЗ
	|	Документ.ВнутреннееЗадание КАК ДокументВнутреннееЗадание
	|ГДЕ
	|	ДокументВнутреннееЗадание.Ссылка В(&СвязанныеОбъекты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СправочникПроекты.Ссылка,
	|	СправочникПроекты.Код
	|ИЗ
	|	Справочник.Проекты КАК СправочникПроекты
	|ГДЕ
	|	СправочникПроекты.Ссылка В(&СвязанныеОбъекты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Комментарии.Пользователь КАК Пользователь,
	|	Комментарии.Идентификатор КАК Идентификатор,
	|	Комментарии.Общедоступный КАК Общедоступный,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы), ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК Филиал
	|ПОМЕСТИТЬ Комментарии
	|ИЗ
	|	РегистрСведений.Комментарии КАК Комментарии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НомераОбъектов КАК НомераОбъектов
	|		ПО Комментарии.Объект = НомераОбъектов.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела.СрезПоследних(
	|				&ТекущаяДата,
	|				Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)
	|					И (ВЫРАЗИТЬ(Данные КАК Справочник.Филиалы)) <> ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК ЛичныеДелаСрезПоследних
	|		ПО Комментарии.Пользователь = ЛичныеДелаСрезПоследних.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Комментарии.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ДоступныеКомментарии
	|ИЗ
	|	Комментарии КАК Комментарии
	|ГДЕ
	|	Комментарии.Общедоступный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Комментарии.Идентификатор
	|ИЗ
	|	Комментарии КАК Комментарии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО Комментарии.Филиал = Филиалы.Ссылка
	|ГДЕ
	|	НЕ Комментарии.Общедоступный
	|	И &ПользовательИзITФилиала
	|	И Филиалы.ТипФилиала <> ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.НеIT)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Комментарии.Идентификатор
	|ИЗ
	|	Комментарии КАК Комментарии
	|ГДЕ
	|	НЕ Комментарии.Общедоступный
	|	И НЕ &ПользовательИзITФилиала
	|	И Комментарии.Филиал = &ФилиалПользователя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Комментарии.Период КАК Период,
	|	Комментарии.Идентификатор КАК Идентификатор,
	|	Комментарии.Объект КАК Объект,
	|	Пользователи.Наименование КАК АвторПредставление,
	|	Пользователи.Ссылка КАК Автор,
	|	Пользователи.Служебный КАК СлужебныйАвтор,
	|	Комментарии.Комментарий КАК Комментарий,
	|	Комментарии.Служебный КАК Служебный,
	|	Комментарии.Важный КАК Важный,
	|	Комментарии.ДатаИзменения КАК ДатаИзменения,
	|	ВЫБОР
	|		КОГДА Комментарии.Пользователь = &Пользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоАвторКомментария,
	|	Комментарии.Общедоступный КАК ВиденВсем,
	|	Комментарии.ПочтаJira КАК ПочтаJira
	|ПОМЕСТИТЬ ДанныеКомментариев
	|ИЗ
	|	РегистрСведений.Комментарии КАК Комментарии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДоступныеКомментарии КАК ДоступныеКомментарии
	|		ПО Комментарии.Идентификатор = ДоступныеКомментарии.Идентификатор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО Комментарии.Пользователь = Пользователи.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКомментариев.Идентификатор КАК Идентификатор,
	|	ДанныеКомментариев.Период КАК Период
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	ДанныеКомментариев КАК ДанныеКомментариев
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Идентификаторы.Идентификатор КАК Родитель,
	|	Связи.Подчиненный КАК Подчиненный
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	Идентификаторы КАК Идентификаторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКомментариев КАК Связи
	|		ПО Идентификаторы.Идентификатор = Связи.Родитель
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Идентификаторы КАК Идентификатор_Проверка
	|		ПО (Связи.Подчиненный = Идентификаторы.Идентификатор)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Связи.Родитель,
	|	Идентификаторы.Идентификатор
	|ИЗ
	|	Идентификаторы КАК Идентификаторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКомментариев КАК Связи
	|		ПО Идентификаторы.Идентификатор = Связи.Подчиненный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Родитель КАК Родитель,
	|	Данные.Подчиненный КАК Подчиненный,
	|	Идентификаторы.Период КАК Период,
	|	Идентификаторы.Объект КАК Объект,
	|	Идентификаторы.АвторПредставление КАК АвторПредставление,
	|	Идентификаторы.Автор КАК Автор,
	|	Идентификаторы.СлужебныйАвтор КАК СлужебныйАвтор,
	|	Идентификаторы.Комментарий КАК Комментарий,
	|	Идентификаторы.Служебный КАК Служебный,
	|	Идентификаторы.Важный КАК Важный,
	|	Идентификаторы.ДатаИзменения КАК ДатаИзменения,
	|	Идентификаторы.ЭтоАвторКомментария КАК ЭтоАвторКомментария,
	|	Идентификаторы.ВиденВсем КАК ВиденВсем,
	|	Заголовки.Период КАК РодительПериод,
	|	Заголовки.АвторПредставление КАК РодительАвтор,
	|	НомераОбъектов.Номер КАК НомерОбъекта,
	|	Идентификаторы.ПочтаJira КАК ПочтаJira
	|ПОМЕСТИТЬ ПромежуточныеДанные
	|ИЗ
	|	Данные КАК Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеКомментариев КАК Идентификаторы
	|		ПО Данные.Подчиненный = Идентификаторы.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеКомментариев КАК Заголовки
	|		ПО Данные.Родитель = Заголовки.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ НомераОбъектов КАК НомераОбъектов
	|		ПО (Идентификаторы.Объект = НомераОбъектов.Объект)
	|ГДЕ
	|	Данные.Подчиненный ЕСТЬ НЕ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПромежуточныеДанные.Родитель КАК Родитель
	|ПОМЕСТИТЬ ЕстьПодчиненные
	|ИЗ
	|	ПромежуточныеДанные КАК ПромежуточныеДанные
	|ГДЕ
	|	ПромежуточныеДанные.Подчиненный ЕСТЬ НЕ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПромежуточныеДанные.Подчиненный КАК Подчиненный,
	|	ПромежуточныеДанные.Период КАК Дата,
	|	ДОБАВИТЬКДАТЕ(ПромежуточныеДанные.Период, ЧАС, &Смещение) КАК ДатаСеанса,
	|	ПромежуточныеДанные.Объект КАК Объект,
	|	ПромежуточныеДанные.АвторПредставление КАК АвторПредставление,
	|	ПромежуточныеДанные.Автор КАК Автор,
	|	ПромежуточныеДанные.Комментарий КАК Комментарий,
	|	ПромежуточныеДанные.Служебный КАК Служебный,
	|	ПромежуточныеДанные.Важный КАК Важный,
	|	ПромежуточныеДанные.ДатаИзменения КАК ДатаИзменения,
	|	ВЫБОР
	|		КОГДА ЕстьПодчиненные.Родитель ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьПодчиненные,
	|	ВЫБОР
	|		КОГДА ПромежуточныеДанные.СлужебныйАвтор
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РазрешенОтвет,
	|	ВЫБОР
	|		КОГДА ПромежуточныеДанные.ЭтоАвторКомментария
	|			ТОГДА ВЫБОР
	|					КОГДА РАЗНОСТЬДАТ(ПромежуточныеДанные.Период, &ТекущаяДата, МИНУТА) > 30
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РазрешеноУдалениеИзменение,
	|	ПромежуточныеДанные.ВиденВсем КАК ВиденВсем,
	|	ПромежуточныеДанные.НомерОбъекта КАК НомерОбъекта,
	|	ПромежуточныеДанные.ПочтаJira КАК ПочтаJira
	|ИЗ
	|	ПромежуточныеДанные КАК ПромежуточныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЕстьПодчиненные КАК ЕстьПодчиненные
	|		ПО ПромежуточныеДанные.Подчиненный = ЕстьПодчиненные.Родитель
	|ГДЕ
	|	ПромежуточныеДанные.Родитель ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПромежуточныеДанные.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПромежуточныеДанные.Родитель КАК Родитель,
	|	ПромежуточныеДанные.Подчиненный КАК Подчиненный,
	|	ПромежуточныеДанные.Период КАК Дата,
	|	ДОБАВИТЬКДАТЕ(ПромежуточныеДанные.Период, ЧАС, &Смещение) КАК ДатаСеанса,
	|	ПромежуточныеДанные.Объект КАК Объект,
	|	ПромежуточныеДанные.АвторПредставление КАК АвторПредставление,
	|	ПромежуточныеДанные.Автор КАК Автор,
	|	ПромежуточныеДанные.Комментарий КАК Комментарий,
	|	ПромежуточныеДанные.Служебный КАК Служебный,
	|	ПромежуточныеДанные.Важный КАК Важный,
	|	ПромежуточныеДанные.ДатаИзменения КАК ДатаИзменения,
	|	ПромежуточныеДанные.РодительАвтор КАК РодительАвтор,
	|	ПромежуточныеДанные.РодительПериод КАК РодительДата,
	|	ДОБАВИТЬКДАТЕ(ПромежуточныеДанные.РодительПериод, ЧАС, &Смещение) КАК РодительДатаСеанса,
	|	ВЫБОР
	|		КОГДА ЕстьПодчиненные.Родитель ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьПодчиненные,
	|	ВЫБОР
	|		КОГДА ПромежуточныеДанные.ЭтоАвторКомментария
	|			ТОГДА ВЫБОР
	|					КОГДА РАЗНОСТЬДАТ(ПромежуточныеДанные.Период, &ТекущаяДата, МИНУТА) > 30
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РазрешеноУдалениеИзменение,
	|	ПромежуточныеДанные.ВиденВсем КАК ВиденВсем,
	|	ПромежуточныеДанные.НомерОбъекта КАК НомерОбъекта,
	|	ПромежуточныеДанные.ПочтаJira КАК ПочтаJira
	|ИЗ
	|	ПромежуточныеДанные КАК ПромежуточныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЕстьПодчиненные КАК ЕстьПодчиненные
	|		ПО ПромежуточныеДанные.Подчиненный = ЕстьПодчиненные.Родитель
	|ГДЕ
	|	ПромежуточныеДанные.Родитель ЕСТЬ НЕ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПромежуточныеДанные.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Файл.Наименование КАК ИмяФайла,
	|	ПрисоединенныеФайлы.Файл.Каталог КАК Каталог,
	|	Файлы.ПолучатьИзMinio КАК ПолучатьИзMinio
	|ИЗ
	|	РегистрСведений.ПрикрепленныеФайлы КАК ПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО ПрисоединенныеФайлы.Файл = Файлы.Ссылка
	|ГДЕ
	|	ПрисоединенныеФайлы.Объект В(&СвязанныеОбъекты)
	|	И ПрисоединенныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.ИзображениеКомментария)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоследниеНепросмотренныеКомментарии.Дата КАК Дата,
	|	ДОБАВИТЬКДАТЕ(ПоследниеНепросмотренныеКомментарии.Дата, ЧАС, &Смещение) КАК ДатаСеанса,
	|	ПоследниеНепросмотренныеКомментарии.Идентификатор КАК Идентификатор,
	|	ПоследниеНепросмотренныеКомментарии.ФИО КАК ФИО
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 10
	|		ДанныеКомментариев.Период КАК Дата,
	|		ДанныеКомментариев.Идентификатор КАК Идентификатор,
	|		Пользователи.ФИО КАК ФИО
	|	ИЗ
	|		ДанныеКомментариев КАК ДанныеКомментариев
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|			ПО ДанныеКомментариев.Автор = Пользователи.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НепросмотренныеКомментарии КАК НепросмотренныеКомментарии
	|			ПО (НепросмотренныеКомментарии.Пользователь = &Пользователь)
	|				И (НепросмотренныеКомментарии.Идентификатор = ДанныеКомментариев.Идентификатор)
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА ДанныеКомментариев.Идентификатор В (&НепросмотренныеКомментарии)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ НЕ НепросмотренныеКомментарии.Идентификатор ЕСТЬ NULL
	|			КОНЕЦ
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		ДанныеКомментариев.Период УБЫВ) КАК ПоследниеНепросмотренныеКомментарии
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоследниеНепросмотренныеКомментарии.Дата";
	#КонецОбласти
	
	// Отображение общедоступных комментариев.
	// Пользователям IT филиала и сотрудникам из IT, но принадлежащих не IT филиалу.
	ФилиалПользователя = ПараметрыСеанса.Филиал;
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Если ЗначениеЗаполнено(ФилиалПользователя) Тогда
		ТипФилиала = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФилиалПользователя, "ТипФилиала");
		ПользовательИзITФилиала = (ТипФилиала <> Перечисления.ТипыФилиалов.НеIT);
	Иначе
		ПользовательИзITФилиала = Ложь;
	КонецЕсли;
	
	Смещение = ПовторноеИспользованиеВызовСервера.ПолучитьСдвигЧасовогоПояса();
	
	Запрос.УстановитьПараметр("СвязанныеОбъекты", ВыбранныеСвязанныеОбъекты);
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ФилиалПользователя", ФилиалПользователя);
	Запрос.УстановитьПараметр("ПользовательИзITФилиала", ПользовательИзITФилиала);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("НепросмотренныеКомментарии", НепросмотренныеКомментарии);
	Запрос.УстановитьПараметр("Смещение", Смещение);
	
	Пакеты = Запрос.ВыполнитьПакет();
	
	КомментарииВерхнегоУровня = Пакеты.Получить(8).Выбрать();
	КомментарииНижнихУровней = Пакеты.Получить(9).Выбрать();
	ФайлыОбъектов = Пакеты.Получить(10).Выбрать();
	ПоследниеКомментарии = Пакеты.Получить(11).Выбрать();
		
	// Получение шаблонов
	Шаблоны = РегистрыСведений.Комментарии.ПолучитьШаблоны();
	Лента = Шаблоны.Лента;
	ОбластьКомментариев = Шаблоны.ОбластьКомментариев;
	
	ПоляСтруктуры = 
	"Дата, ДатаСеанса, Автор, АвторПредставление, Комментарий, Служебный, Важный, Объект, РазрешенОтвет,
	|НомерОбъекта, ДатаИзменения, РазрешеноУдалениеИзменение, ЕстьПодчиненные, ВиденВсем";
	
	// Добавление в ленту комментариев верхнего уровня
	Пока КомментарииВерхнегоУровня.Следующий() Цикл
		ИдентификаторОбъекта = Строка(КомментарииВерхнегоУровня.Объект.УникальныйИдентификатор());
		
		СтруктураКомментария = Новый Структура(ПоляСтруктуры);
		
		ЗаполнитьЗначенияСвойств(СтруктураКомментария, КомментарииВерхнегоУровня);
		СтруктураКомментария.Вставить("ИдентификаторКомментария", Строка(КомментарииВерхнегоУровня.Подчиненный));
		СтруктураКомментария.Вставить("ИдентификаторОбъекта", ИдентификаторОбъекта);
		СтруктураКомментария.Вставить("Смещение", Смещение);
		
		ИнтеграцияДополнительныхПодсистем.ПроверитьАвтора(СтруктураКомментария, КомментарииВерхнегоУровня.ПочтаJira); 
		
		ДанныеКомментария = ПолучитьЗаполненныйШаблонКомментарияВерхнегоУровня(СтруктураКомментария, Шаблоны);
		ОбластьКомментариев = СтрЗаменить(ОбластьКомментариев, ДанныеКомментария.ШаблонЗамены, ДанныеКомментария.БлокКомментария);
	КонецЦикла;
		
	// Добавление комментариев нижних уровней
	Пока КомментарииНижнихУровней.Следующий() Цикл
		ИдентификаторОбъекта = Строка(КомментарииНижнихУровней.Объект.УникальныйИдентификатор());
		
		СтруктураКомментария = Новый Структура(ПоляСтруктуры);
		СтруктураКомментария.Вставить("РодительАвтор");
		СтруктураКомментария.Вставить("РодительДата");
		СтруктураКомментария.Вставить("РодительДатаСеанса");
		
		ЗаполнитьЗначенияСвойств(СтруктураКомментария, КомментарииНижнихУровней);
		СтруктураКомментария.Вставить("ИдентификаторРодителя", Строка(КомментарииНижнихУровней.Родитель));
		СтруктураКомментария.Вставить("ИдентификаторКомментария", Строка(КомментарииНижнихУровней.Подчиненный));
		СтруктураКомментария.Вставить("ИдентификаторОбъекта", ИдентификаторОбъекта);
		СтруктураКомментария.Вставить("Смещение", Смещение);
				
		ДанныеКомментария = ПолучитьЗаполненныйШаблонКомментарияНижнегоУровня(СтруктураКомментария, Шаблоны);
		ОбластьКомментариев = СтрЗаменить(ОбластьКомментариев, ДанныеКомментария.ШаблонЗамены, ДанныеКомментария.БлокКомментария);
	КонецЦикла;
	
	// Добавление пунктов меню навигации (последних комментариев)	
	ПунктыНавигации = Новый Массив;
	
	Пока ПоследниеКомментарии.Следующий() Цикл
		ИдентификаторКомментария = Строка(ПоследниеКомментарии.Идентификатор);
		Если ПросмотренныеКомментарии.Найти(ИдентификаторКомментария) = Неопределено Тогда
			ШаблонКомментарияНавигации = Шаблоны.КомментарийНавигации;
		Иначе
			ШаблонКомментарияНавигации = Шаблоны.ПросмотренныйКомментарийНавигации;
		КонецЕсли;
		
		ПунктНавигации = СтрШаблон(ШаблонКомментарияНавигации, ИдентификаторКомментария, 
			Формат(ПоследниеКомментарии.ДатаСеанса, "ДФ='dd.MM.yyyy HH:mm'"), ПоследниеКомментарии.ФИО);
			
		ПунктыНавигации.Добавить(ПунктНавигации);	
	КонецЦикла;
	
	Если ПунктыНавигации.Количество() > 0 Тогда
		Лента = СтрЗаменить(Лента, "<!--navcomment_place-->", СтрСоединить(ПунктыНавигации, Символы.ПС));
	КонецЕсли;
			
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ИдентификаторСсылка, АдресВременногоХранилища);

	АдресПубликацииФайлов = ОбщегоНазначенияКлиентСервер.ДобавитьСлэш(WebОкружениеВызовСервера.АдресПубликацииФайлов());
	КаталогПубликацииФайлов = Константы.КаталогПубликацииФайлов.Получить();
	ВнешнееХранилище = "";
	
	НастройкиПодключения = ИнтеграцияДополнительныхПодсистемПовтИсп.ПолучитьНастройкиПодключенияКMinio();
	Если НастройкиПодключения <> Неопределено Тогда
		ВнешнееХранилище = СтрШаблон("https://%1:%2/", НастройкиПодключения.Сервер, НастройкиПодключения.Порт);
	КонецЕсли;
	
	// Замена ссылок на изображения.
	// Так как при обработке текста комментария мы заменили все ссылки на изображения на идентификаторы типа
	// "sdms_file_4bf8a58c9fa84bf9a77db60d9862e18f", то при формировании ленты комментариев нужно заменить идентификаторы
	// на корректные ссылки. Но, есть вероятность, что пользователь может скопировать адрес картинки из другого комментария.
	// В таком случае, адрес картинки будет представлен ссылкой вида:
	// "http://adm-sdms/attachments/3e258b37-3fc5-11e9-af3c-00155d033631/sdms_file_4bf8a58c9fa84bf9a77db60d9862e18f.png" и
	// при обработке комментария мы его не будем обрабатывать, а посчитаем, что это ссылка на внешний источник.
	// При замене идентификатора на ссылку, нужно учесть, что заменять нужно только в тех местах, где в ссылке на изображение в
	// теге img нет ничего кроме идентификатора.
	
	Пока ФайлыОбъектов.Следующий() Цикл
		// Получение строки для поиска в теле ленты новостей
		ИмяФайлаБезРасширения = РаботаСФайламиКлиентСервер.ИмяФайлаБезРасширения(ФайлыОбъектов.ИмяФайла);
		
		Если СтрНайти(ОбластьКомментариев, ИмяФайлаБезРасширения) <> 0 Тогда
			Если НЕ ФайлыОбъектов.ПолучатьИзMinio Тогда
				ПолноеИмяФайла = СтрШаблон("%1%2/%3", АдресПубликацииФайлов, ФайлыОбъектов.Каталог, ФайлыОбъектов.ИмяФайла);
			Иначе
				ПолноеИмяФайла = СтрШаблон("%1%2/%3", ВнешнееХранилище, КаталогПубликацииФайлов, ФайлыОбъектов.ИмяФайла);				
			КонецЕсли;
			
			ОбластьКомментариев = СтрЗаменить(ОбластьКомментариев, СтрШаблон("src=""%1""", ИмяФайлаБезРасширения), СтрШаблон("src=""%1""", ПолноеИмяФайла));
			ОбластьКомментариев = СтрЗаменить(ОбластьКомментариев, СтрШаблон("link=%1", ИмяФайлаБезРасширения), СтрШаблон("link=%1", ПолноеИмяФайла));
			ОбластьКомментариев = СтрЗаменить(ОбластьКомментариев, СтрШаблон("href='%1'", ИмяФайлаБезРасширения), СтрШаблон("href='%1'", ПолноеИмяФайла));
		КонецЕсли;			
	КонецЦикла;
	
	Лента = СтрЗаменить(Лента, "<!--comments_place-->", ОбластьКомментариев);
	УстановитьВидимостьПоследнихКомментариев(Лента, ОтображатьПоследние);
	
	Возврат Новый Структура("Лента, ОбластьКомментариев, КоличествоПоследнихКомментариев", Лента, ОбластьКомментариев, ПунктыНавигации.Количество());
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПрефиксХешаКартинки()
	
	Возврат "image_hash_";
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьHTMLШаблонРедактированияКомментария()
	
	// Простой шаблон для вставки комментария для редактрования
	Возврат
	"<html>
	|	<head>
	|	<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8""/>
	|	<meta http-equiv=""X-UA-Compatible"" content=""IE=Edge""/>
	|	<meta name=""format-detection"" content=""telephone=no""/>
	|	<style type=""text/css"">
	|		body{margin:0;padding:8px;}
	|		p{line-height:1.15;margin:0;}
	|		ol,ul{margin-top:0;margin-bottom:0;}
	|		img{border:1px solid #666 !important;border-radius:4px;}
	|		li>p{display:inline;}
	|	</style>
	|</head>
	|<body>
	|#ОбластьКомментария#
	|</body>
	|</html>";
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылкуПользователя(Знач УникальныйИдентификатор)
	
	Возврат Справочники.Пользователи.ПолучитьСсылку(УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаФайл(Знач АдресВременногоХранилища, Знач ИмяФайла, Знач Ссылка)
	
	Результат = Справочники.Файлы.ПустаяСсылка();
	
	// Вычленение идентификатора ссылки объекта из гиперссылки			
	// Парсинг строки в случае клика по ссылке загрузки. Нужно для получения ссылки
	// на элемент справочника "Файлы"
	ИскомаяСтрока = "attachments/";
	НачальныйНомер = СтрНайти(Ссылка, ИскомаяСтрока) + СтрДлина(ИскомаяСтрока);  
	
	ИдентификаторВладельца = Новый УникальныйИдентификатор(Сред(Ссылка, НачальныйНомер, СтрНайти(Ссылка, "/sdms_file") - НачальныйНомер));
	
	Соответствие = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	Владелец = Соответствие.Получить(ИдентификаторВладельца);
	
	// если каталог - это идентификатор комментария, то нужно использовать его как владельца
	Если Владелец = Неопределено Тогда
		Владелец = Строка(ИдентификаторВладельца);
		Назначение = Перечисления.НазначенияФайлов.ФайлыКомментария;
	Иначе 
		Назначение =  Перечисления.НазначенияФайлов.Объект;	
	КонецЕсли;
	
	СтруктураФайла = Справочники.Файлы.НайтиЗапись(Владелец, ИмяФайла, Назначение);
	Если СтруктураФайла <> Неопределено Тогда
		Результат = СтруктураФайла.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПоместитьВложенияКомментарияНаСервер(Знач УникальныйИдентификатор, ТаблицаОписанияФайлов, Знач ПрикрепленныеФайлы) Экспорт
	
	Результат = Новый Структура("ТекстHTML, Вложения", "", Новый Структура);
	
	ТекстHTML = "";
	ВложенияКомментария = Новый Структура;
	ОбновленныеВложения = Новый Структура;
	
	Комментарий.ПолучитьHTML(ТекстHTML, ВложенияКомментария);
	
	// Если в документе есть вложения
	Если ВложенияКомментария.Количество() > 0 Тогда		
		Для Каждого Вложение Из ВложенияКомментария Цикл						
			// Проверим наличие картинки в списке прикрепленных к комментарию
			ХешированиеКартинки = Новый ХешированиеДанных(ХешФункция.MD5);
			ХешированиеКартинки.Добавить(Вложение.Значение.ПолучитьДвоичныеДанные());
			ХешСтрокой = ПолучитьПрефиксХешаКартинки() + СтрЗаменить(Строка(ХешированиеКартинки.ХешСумма), " ", "");
			
			// Если картинка была в комментарии ранее
			Если ПрикрепленныеФайлы.Свойство(ХешСтрокой) Тогда
				
				// Получим имя файла без расширения
				НовоеИмяФайла = ПрикрепленныеФайлы[ХешСтрокой].ИмяФайлаБезРасширения;
				
				// Заменим имя файла в HTML-документе на имя файла без расширения
				СтрокаПоиска = СтрШаблон("src=""%1""", Вложение.Ключ);
				СтрокаЗамены = СтрШаблон("src=""%1""", НовоеИмяФайла);
				ТекстHTML    = СтрЗаменить(ТекстHTML, СтрокаПоиска, СтрокаЗамены);
				
				// Удалим из списка файлов уже имеющийся
				ПрикрепленныеФайлы.Удалить(ХешСтрокой);
				Продолжить;
				
			Иначе // Если добавлена новая картинка			
				// Получим новое имя файла для хранения файла на сервере. У форматированного документа
				// есть одна идиотская особенность - ПолучитьHTML() и УстановитьHTML() используют структуру
				// для работы с картинками. Ключ элемента структуры не может содержать точку. Соответственно,
				// в форматированном документе все имена файлов изображений без расширений. Поэтому нам нужно
				// поработать сначала с именем файла без расширения, а чтобы сохранить его в каталог, нужно 
				// нормальное имя файла, после добавим расширение. Cкажем огромное спасибо 1С за это.
				СсылкаНаНовыйФайл = Справочники.Файлы.ПолучитьСсылку();
				НовоеИмяФайла = РаботаСФайламиКлиентСервер.СоздатьУникальноеИмяФайла(Вложение.Ключ, СсылкаНаНовыйФайл);
				
				// Заменим имя файла в HTML-документе до добавления расширения
				СтрокаПоиска = СтрШаблон("src=""%1""", Вложение.Ключ);
				СтрокаЗамены = СтрШаблон("src=""%1""", НовоеИмяФайла);
				ТекстHTML = СтрЗаменить(ТекстHTML, СтрокаПоиска, СтрокаЗамены);
				
				// Добавим во возвращаемый параметр с вложениями
				ОбновленныеВложения.Вставить(НовоеИмяФайла, Вложение.Значение);
				
				// Теперь добавим файлу расширение и сохраним его в каталог на сервер
				Если РаботаСФайламиКлиентСервер.РасширениеИмениФайла(НовоеИмяФайла, Истина) = "" Тогда
					НовоеИмяФайла = НовоеИмяФайла + ОбщегоНазначения.ПолучитьРасширениеФайлаПоФорматуКартинки(Вложение.Значение.Формат(), Истина);
				КонецЕсли;
				
				ДвоичныеДанные = Вложение.Значение.ПолучитьДвоичныеДанные();
				АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
				
				// Поместим информацию о файле в таблицу
				НоваяСтрока = ТаблицаОписанияФайлов.Добавить();
				НоваяСтрока.Имя = НовоеИмяФайла;
				НоваяСтрока.ОригинальноеИмя = НовоеИмяФайла;
				НоваяСтрока.Назначение = Перечисления.НазначенияФайлов.ИзображениеКомментария;
				НоваяСтрока.Описание = "Содержимое комментария";			
				НоваяСтрока.АдресВоВременномХранилище = АдресВоВременномХранилище;
				НоваяСтрока.Размер = ДвоичныеДанные.Размер();
				НоваяСтрока.Ссылка = СсылкаНаНовыйФайл;
				НоваяСтрока.НовыйФайл = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Если остались файлы, то пометить их на удаление
		Если ПрикрепленныеФайлы.Количество() > 0 Тогда
		    СписокФайлов = Новый СписокЗначений;
			Для Каждого Файл Из ПрикрепленныеФайлы Цикл
				СписокФайлов.Добавить(Файл.Значение.Ссылка);
			КонецЦикла; 		
			Справочники.Файлы.ПометитьЗаписиНаУдаление(СписокФайлов);
		КонецЕсли;
		
	// Если в документе нет вложений, но комментарий имел прикрепленные файлы,
	// то нужно в справочнике Файлы пометить их на удаление
	ИначеЕсли ПрикрепленныеФайлы.Количество() > 0 Тогда
	    СписокФайлов = Новый СписокЗначений;
		Для Каждого Файл Из ПрикрепленныеФайлы Цикл
			СписокФайлов.Добавить(Файл.Значение.Ссылка);
		КонецЦикла; 		
		Справочники.Файлы.ПометитьЗаписиНаУдаление(СписокФайлов);
	КонецЕсли;
	
	// Формируем структуру с результатом
	Результат.ТекстHTML = ТекстHTML;
	Результат.Вложения  = ОбновленныеВложения;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СвернутьВеткиКомментариев()
	
	Для Каждого Идентификатор Из СвернутыеКомментарии Цикл
		ИзменитьВидимостьПодчиненных(Идентификатор, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СохранитьВложенияНаСервереИПолучитьТекстКомментария(Знач Объект, Знач ПрикрепленныеФайлы, Знач СсылкиНаФайлыКомментария = Неопределено, Знач Идентификатор = Неопределено)
	
	// Таблица будет хранить список выгруженных в каталог сервера файлов. Эти
	// данные пригодятся в случае, если при создании задачи произошла ошибка.
	// Тогда файлы и каталоги по этой таблице надо будет удалить с сервера.
	ТаблицаОписанияФайлов = РаботаСФайламиСервер.ТаблицаОписанияФайлов();

	// Получим прочие данные, которые пригодятся при выгрузке данных
	СохранятьНаСервер = ИнтеграцияДополнительныхПодсистем.ОпределитьМестоХраненияФайлов();
	
	Если СохранятьНаСервер Тогда
		КаталогФайловНаСервере = ПовторноеИспользованиеВызовСервера.КаталогХраненияФайловНаСервере();
		КаталогТекущихФайлов = Строка(Объект.УникальныйИдентификатор());
		КаталогФайловНаСервере = КаталогФайловНаСервере + РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(КаталогТекущихФайлов);
		
		// Создадим каталог файлов. Даже если каталог уже существует, процедура не
		// вызовет ошибку.
		СоздатьКаталог(КаталогФайловНаСервере);
	КонецЕсли;
	
	// Получим текст html и вложения из форматированного документа
	СодержимоеДокумента = ПоместитьВложенияКомментарияНаСервер(Объект.УникальныйИдентификатор(), ТаблицаОписанияФайлов, ПрикрепленныеФайлы);
	                            
	// Сохраним в базу информацию о текущих файлах
	ТаблицаОписанияФайлов.ЗаполнитьЗначения(КаталогТекущихФайлов, "Каталог");
	
	ПараметрыСохранения = Новый Структура;
	ИнтеграцияДополнительныхПодсистем.ДополнитьПараметрыДляСохраненияФайлов(Объект, ПараметрыСохранения);
	РаботаСФайламиСервер.СохранитьФайлыНаСервере(Объект, ТаблицаОписанияФайлов, ПараметрыСохранения);
	                                                                   
	// Нормализуем исходный текст HTML
	ТекстHTML = ОбщегоНазначения.ПолучитьОбъектДокументHTMLИзТекстаHTML(СодержимоеДокумента.ТекстHTML);
	ТекстHTML = ОбщегоНазначения.ПолучитьТекстHTMLИзОбъектаДокументHTML(ТекстHTML);
	
	// Получим содержимое между <body></body>
	ПозицияНачала = СтрНайти(ТекстHTML, "</head><body>") + СтрДлина("</head><body>");
	ТекстКомментария = СокрЛП(СтрЗаменить(Сред(ТекстHTML, ПозицияНачала), "</body></html>", ""));
	
	// Заменим параграфы, которые добавляет форматированный документ на переносы строк
	
	// 1. Удалим один перенос строки перед закрытие параграфа, 
	//    т.к. параграф итак ассоциируется как перевод строки
	ТекстКомментария = СтрЗаменить(ТекстКомментария, "<br></p>", "</p>");
	
	// 2. Заменяем параграфы на переносы строк. 
	//    Тег span используется для сохранения стилей, которые мог содержать тег p 
	СтрокаПоиска =
	"</p>
	|<p";
	
	СтрокаЗамены =
	"</span><br>
	|<span";
	
	ТекстКомментария = СтрЗаменить(ТекстКомментария, СтрокаПоиска, СтрокаЗамены);
	
	// 3. Удаляем оставшиеся теги открытия и закрытия параграфов
	ТекстКомментария = СтрЗаменить(ТекстКомментария, "<p", "<span");
	ТекстКомментария = СтрЗаменить(ТекстКомментария, "/<p>", "</span>");
	
	// Прикрепим к тексту комментария ссылки на файлы, если они есть
	Если СсылкиНаФайлыКомментария <> Неопределено И СсылкиНаФайлыКомментария.Количество() > 0 Тогда
		ТекстКомментария = ПрикрепитьСсылкиКТексту(СсылкиНаФайлыКомментария, ТаблицаОписанияФайлов, Объект, ТекстКомментария, Идентификатор);
	КонецЕсли;
	
	Если СтрНайти(ТекстКомментария, "e1cib/formpict?formUUID") > 0 Тогда
		ТекстКомментария = Неопределено;
	КонецЕсли;
	
	Возврат ТекстКомментария;
	
КонецФункции

&НаКлиенте
Процедура УдалитьКомментарий(Знач Объект, Знач Идентификатор)
	
	РезультатОперации = УдалитьКомментарийНаСервере(Объект, Идентификатор, АдресВременногоХранилища, 
		СвязанныеОбъекты, ОтображатьПоследниеКомментарии, НепросмотренныеКомментарии, ПросмотренныеКомментарии);
	
	Если РезультатОперации.Успешно Тогда
		Элементы.ЛентаКомментариев.Документ.getElementById("comments").innerHTML = РезультатОперации.ОбластьКомментариев;
		УстановитьЗаголовокКнопкиПоследниеКомментарии(РезультатОперации.КоличествоПоследнихКомментариев);
	Иначе
		Сообщить(РезультатОперации.Сообщение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокКнопкиПоследниеКомментарии(Знач КоличествоКомментариев)
	
	Возврат СтрШаблон("Непрочитанные комментарии (%1)", КоличествоКомментариев);

КонецФункции 

&НаКлиенте
Процедура УстановитьЗаголовокКнопкиПоследниеКомментарии(Знач КоличествоКомментариев)
	
	Элементы.ПоказатьПоследниеКомментарии.Заголовок = 
			ЗаголовокКнопкиПоследниеКомментарии(КоличествоКомментариев);
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция УдалитьКомментарийНаСервере(Знач Объект, Знач Идентификатор, Знач АдресВременногоХранилища, Знач СвязанныеОбъекты, Знач ОтображатьПоследние, Знач НепросмотренныеКомментарии, Знач ПросмотренныеКомментарии)
	
	Результат = Новый Структура("Успешно, ОбластьКомментариев, Сообщение, КоличествоПоследнихКомментариев", Ложь, "", "", 0);
	
	// Получение ссылки на объект по уникальному идентификатору
	Соответствие = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	ОбъектСсылка = Соответствие.Получить(Объект);
		
	РезультатУдаления = РегистрыСведений.Комментарии.Удалить(ОбъектСсылка, Идентификатор);
	
	Если РезультатУдаления.Успешно Тогда
		// Получаем ленту и вырезаем из неё тело
		ДанныеЛенты = ПолучитьЛентуКомментариев(СвязанныеОбъекты, АдресВременногоХранилища, 
			ОтображатьПоследние, НепросмотренныеКомментарии, ПросмотренныеКомментарии);
			
		Результат.ОбластьКомментариев = ДанныеЛенты.ОбластьКомментариев;
		Результат.КоличествоПоследнихКомментариев = ДанныеЛенты.КоличествоПоследнихКомментариев;
		Результат.Успешно = Истина;
	Иначе
		Результат.Сообщение = "Не удалось удалить комментарий по следующей причине: " + РезультатУдаления.Сообщение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьТекущиеДействияПоУмолчанию(Знач ОчиститьКомментарий = Истина)
	
	// Снятие выделения комментария в ленте
	Если ЗначениеЗаполнено(ТекущиеДействия) И ЗначениеЗаполнено(ТекущиеДействия.Идентификатор) Тогда
		ИзменитьВыделениеКомментарияВСписке(ТекущиеДействия.Идентификатор, Ложь);
	КонецЕсли;
	
	// Установка текущих действий по умолчанию
	ТекущиеДействия = Новый Структура("Действие, Объект, Идентификатор");
	ТекущиеДействия.Действие = "Публикация";
	ТекущиеДействия.Объект = Источник.УникальныйИдентификатор();
	ТекущиеДействия.Идентификатор = Неопределено;
	
	Если ОчиститьКомментарий Тогда
		// Очистка комментария
		Комментарий.Удалить();
		
		// Очистка списка прикрепленных файлов
		СсылкиНаФайлыКомментария.Очистить();
	КонецЕсли;
	
	// Установка заголовков кнопок
	Элементы.КнопкаОпубликоватьКомментарий.Заголовок = "Опубликовать";
	Элементы.КнопкаОчиститьКомментарий.Заголовок = "Очистить";
	
	// Обнуление вспомогательной информации
	ПрикрепленныеФайлыКомментария = Новый Структура;
	СодержимоеФорматированногоДокумента = Новый Структура("ТекстHTML, Вложения");
	
	// Установка видимости комментария
	ВиденВсем = Истина;
	Элементы.ВиденВсем.Доступность = ДоступностьНеОбщедоступногоКомментария;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьHTMLТекст(ФорматированныйДокумент, Знач Текст, Знач Вложения)
	
	ФорматированныйДокумент.УстановитьHTML(Текст, Вложения);
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайлов(Знач НаименованияФайлов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Файлы.ОригинальноеИмя КАК ОригинальноеИмя,
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.Наименование КАК Наименование,
	|	Файлы.Каталог КАК Каталог,
	|	Файлы.Размер КАК Размер,
	|	Файлы.ПолучатьИзMinio КАК ПолучатьИзMinio
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.Наименование В(&НаименованияФайлов)
	|	И НЕ Файлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("НаименованияФайлов", НаименованияФайлов);
	
	РезультатЗапроса = Запрос.Выполнить();
	МассивСтруктур = Новый Массив;
	Если НЕ РезультатЗапроса.Пустой() Тогда	
		
		Выборка = РезультатЗапроса.Выбрать();
		
		КаталогФайловНаСервере = ПовторноеИспользованиеВызовСервера.КаталогХраненияФайловНаСервере();
		КаталогПубликацииФайлов =  ОбщегоНазначенияКлиентСервер.ДобавитьСлэш(Константы.КаталогПубликацииФайлов.Получить());
		
		Пока Выборка.Следующий() Цикл
			СтруктураДанных = Новый Структура("АдресВоВременномХранилище, Наименование, ОригинальноеИмя, Ссылка, Размер, ПолучатьИзMinio");
			
			Если Выборка.ПолучатьИзMinio Тогда
				АдресПубликацииФайлов = КаталогПубликацииФайлов;
			Иначе
				АдресПубликацииФайлов = КаталогФайловНаСервере;
			КонецЕсли;
			
			Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьСлэш(АдресПубликацииФайлов + Выборка.Каталог) + Выборка.Наименование;
			ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);
			СтруктураДанных.АдресВоВременномХранилище = Каталог;
			МассивСтруктур.Добавить(СтруктураДанных);
		КонецЦикла;		
		
	КонецЕсли;
	
	Возврат МассивСтруктур;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьНаименованияФайловИзТекста(Знач ТекстДокумента)
		
	НаименованияФайлов = РегистрыСведений.Комментарии.ПолучитьНаименованияФайловИзТекста(ТекстДокумента);
	
	Возврат НаименованияФайлов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПрикрепитьСсылкиКТексту(СсылкиНаФайлыКомментария, Знач ТаблицаОписанияФайлов, Знач Объект, Знач Текст, Знач Идентификатор)
	
	ТаблицаОписанияФайлов.Очистить();
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Назначение = Перечисления.НазначенияФайлов.ФайлыКомментария;
	Иначе
		Назначение = Перечисления.НазначенияФайлов.Объект;
	КонецЕсли;
	
	Для Каждого Файл Из СсылкиНаФайлыКомментария Цикл 
		Если НЕ ЗначениеЗаполнено(Файл.Ссылка) Тогда 
			НоваяСтрока = ТаблицаОписанияФайлов.Добавить(); 
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Файл);
			НоваяСтрока.Назначение = Назначение;
			
			СсылкаНовогоФайла = Справочники.Файлы.ПолучитьСсылку();
			НоваяСтрока.Ссылка = СсылкаНовогоФайла;
			НоваяСтрока.НовыйФайл = Истина;
		Иначе 
			// Дополним ссылку на файл картинкой, в случае если происходит редактирование комментария
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить("<a href=""");
			
			Если НЕ Файл.ПолучатьИзMinio Тогда
				АдресВоВременномХранилище = СтрЗаменить(Файл.АдресВоВременномХранилище, "/", "\");
			Иначе
				АдресВоВременномХранилище = Файл.АдресВоВременномХранилище;
			КонецЕсли;
			
			МассивСтрок.Добавить(АдресВоВременномХранилище);
			МассивСтрок.Добавить(""">");
			ПодстрокаПоиска = СтрСоединить(МассивСтрок);
			
			МассивСтрок.Очистить();
			МассивСтрок.Добавить(ПодстрокаПоиска);
			МассивСтрок.Добавить("<span class='saveFile'></span>");
			ПодстрокаЗамены = СтрСоединить(МассивСтрок);
			
			Текст = СтрЗаменить(Текст, ПодстрокаПоиска, ПодстрокаЗамены);  	
		КонецЕсли;
	КонецЦикла;
	
	// Сохраним файлы на жесткий диск
	РаботаСФайламиСервер.СохранитьФайлыНаСервере(Объект, ТаблицаОписанияФайлов, , Идентификатор);
	
	// Присоединим ссылки на файлы к исходному тексту комментария 
	ШаблонСсылки = "<a href=""%1""><span class='saveFile'></span>%2</a>";
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Текст);
	Для Каждого Файл Из ТаблицаОписанияФайлов Цикл
		МассивСсылок.Добавить(СтрШаблон(ШаблонСсылки, Файл.ПолноеИмя, Файл.ОригинальноеИмя));
	КонецЦикла;
	Текст = СтрЗаменить(Текст, "<a href=", "<span class='saveFile'><a href=""");
	Текст = СтрСоединить(МассивСсылок, "<br>");
	
	Возврат Текст;
	
КонецФункции

&НаСервере
Функция ИзменитьТекстДокумента(Знач УдаляемыеДанные)
	
	ТекстHTML = "";
	Вложения = Новый Структура;
	Комментарий.ПолучитьHTML(ТекстHTML, Вложения);
	
	ФайлыУдалены = Истина;
	
	НачатьТранзакцию();
	Попытка
		Справочники.Файлы.ПометитьЗаписиНаУдаление(УдаляемыеДанные.СсылкиНаФайлы);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ФайлыУдалены = Ложь;
	КонецПопытки;	
		
	Если ФайлыУдалены Тогда			
		Для Каждого СтрокаКомментария Из УдаляемыеДанные.СтрокиКомментария Цикл	
			ТекстHTML = СтрЗаменить(ТекстHTML, СтрокаКомментария, "");
		КонецЦикла;
		
		Комментарий.УстановитьHTML(ТекстHTML, Вложения);
		Результат = Истина;
	Иначе 
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Процедура УдалитьПрикрепленныйФайл(Команда)
		
	СписокИндексов = Новый СписокЗначений;
	
	МассивИндексовСтрок = Элементы.ФайлыКомментария.ВыделенныеСтроки;
	
	Если МассивИндексовСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из МассивИндексовСтрок Цикл
		СписокИндексов.Добавить(Элемент);
	КонецЦикла;
		
	// Массив удаляемых ссылок на изображения из описания
	МассивУдаляемыхСтрокТаблицы = Новый Массив;
	МассивУдаляемыхСтрокКомментария = Новый Массив;
	СписокУдаляемыхФайлов = Новый СписокЗначений;
	ШаблонСсылки = "<a href=""%1"">%2</a>";
	Для Каждого ЭлементСписка Из СписокИндексов Цикл
		СтрокаТаблицы = СсылкиНаФайлыКомментария.НайтиПоИдентификатору(ЭлементСписка.Значение);
		
		// В случае, если комментарий еще не опубликован, то удаляем файл из временного хранилища,
		// и из таблицы на форме		
		АдресВоВременномХранилище = СтрокаТаблицы.АдресВоВременномХранилище;
		Если ЭтоАдресВременногоХранилища(АдресВоВременномХранилище) Тогда
			УдалитьИзВременногоХранилища(АдресВоВременномХранилище);
		Иначе
			// В случае редактирования опубликованного комментария, помечаем файл на удаление,
			// и удаляем ссылку на комментарий из текста
			АдресВХранилище = СтрЗаменить(СтрокаТаблицы.АдресВоВременномХранилище, "/", "\"); 
			УдаляемаяСтрока = СтрШаблон(ШаблонСсылки, АдресВХранилище, СтрокаТаблицы.ОригинальноеИмя);
			
			МассивУдаляемыхСтрокКомментария.Добавить(УдаляемаяСтрока);				
			СписокУдаляемыхФайлов.Добавить(СтрокаТаблицы.Ссылка);
		КонецЕсли;
		// Добавляем строки таблицы формы в массив для последующего удаления
		МассивУдаляемыхСтрокТаблицы.Добавить(СтрокаТаблицы);		
	КонецЦикла;
	
	// Если есть прикрепленные файлы для удаления, то удалим их.
	Если МассивУдаляемыхСтрокКомментария.Количество() > 0 И СписокУдаляемыхФайлов.Количество() > 0 Тогда 
		УдаляемыеДанные = Новый Структура("СтрокиКомментария, СсылкиНаФайлы",
			МассивУдаляемыхСтрокКомментария, СписокУдаляемыхФайлов);
		УдалитьСтрокиТаблицы = ИзменитьТекстДокумента(УдаляемыеДанные);
	Иначе
		УдалитьСтрокиТаблицы = Истина;
	КонецЕсли;
	
	Если УдалитьСтрокиТаблицы Тогда 
		Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрокТаблицы Цикл
			СсылкиНаФайлыКомментария.Удалить(СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли; 
	
	#Если ВебКлиент Тогда   
		// В вебе, по непонятной причине, даже если текущая строка проставлена корректно,
		// то существует вероятность, что при отображении таблицы не будет позиционирования на этой строке.
		// Нормально выделяется только если кликнуть на другую строку. То есть если при удалении 
		// осталась одна строка, то с ней ничего нельзя будет сделать. Поэтому можно просто убрать
		// текущую строку, что бы при необходимости пользователь заново выбирал нужные файлы в таблице.
		Элементы.ФайлыКомментария.ТекущаяСтрока = Неопределено;
	#КонецЕсли
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьВидимостьПоследнихКомментариев(ЛентаКомментариев, Знач ОтображатьПоследние)
	
	Если ОтображатьПоследние Тогда
		ЛентаКомментариев = СтрЗаменить(ЛентаКомментариев, 
			"<div id='comments' class='width100'>", "<div id='comments' class='width85'>");
		ЛентаКомментариев = СтрЗаменить(ЛентаКомментариев, 
			"<div id='nav' class='hidden'>", "<div id='nav'>");
	КонецЕсли;

КонецПроцедуры

// Проверяет содержимое форматированного документа. Если ПолучитьТекст() возвращает
// пустую строку и текст HTML не содержит хотя бы одного тэга <img>, тогда документ
// не содержит данных. Такая проверка нужна потому, что изначально в форматированном 
// документе содержатся ссылки на изображения, находящиеся во временном хранилище,
// и их нельзя получить методом ПолучитьHTML(), поэтому наличие изображений
// определяется по тэгу <img>.
//
// Параметры:
//  ФорматированныйДокумент - ФорматированныйДокумент - проверяемый форматированный
//                            документ.
//
// Возвращаемое значение:
//  Истина - содержит данные. Ложь - в противном случае.
//
&НаКлиенте
Функция ФорматированныйДокументПустой(Знач ФорматированныйДокумент)
	
	Перем ТекстHTML;
	
	ФорматированныйДокумент.ПолучитьHTML(ТекстHTML, Новый Структура);

	Возврат ПустаяСтрока(ФорматированныйДокумент.ПолучитьТекст())
		И СтрНайти(НРег(ТекстHTML), "<img ") = 0;
	
КонецФункции

#КонецОбласти

#Область ПользовательскиеНастройки

&НаСервере
Процедура ЗагрузитьПользовательскиеНастройки()
	
	Ключи = ПолучитьКлючиНастроек();	
	Настройки = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(Ключи.Объект, Ключи.Настройка);
	
	Если Настройки <> Неопределено Тогда
		ОтображатьПоследниеКомментарии = Настройки.ОтображатьПоследниеКомментарии;
		Элементы.ПоказатьПоследниеКомментарии.Пометка = ОтображатьПоследниеКомментарии;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьПользовательскиеНастройки(Знач ОтображатьПоследниеКомментарии)

	Настройки = Новый Структура;
	Настройки.Вставить("ОтображатьПоследниеКомментарии", ОтображатьПоследниеКомментарии);
		
	Ключи = ПолучитьКлючиНастроек();
	
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(Ключи.Объект, Ключи.Настройка, Настройки);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлючиНастроек()
	
	КлючиНастроек = Новый Структура("Объект, Настройка");
	КлючиНастроек.Объект = "РегистрСведений.Комментарии";
	КлючиНастроек.Настройка = "ФормаКомментарии";
	
	Возврат КлючиНастроек;
	
КонецФункции

#КонецОбласти

#Область Инициализация

#Если Клиент Тогда
	
	ПросмотренныеКомментарии = Новый Массив;
	
#КонецЕсли

#КонецОбласти
