///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ВнешнееСоединение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
	
#Область ПрограммныйИнтерфейс

// Определяет статусы заявки по системам на основании статусов подчиненных задач
//  первого уровня иерархии.
//
// Параметры:
//  Заявка				 - ДокументСсылка.ЗаявкаНаРазработку - заявка на разработку, статусы которой нужно рассчитать.
//  Система				 - СправочникСсылка.СистемыУчета, Массив - разрабатываемые системы, по которым рассчитываются статусы.
//  ПредыдущаяСистема	 - СправочникСсылка.СистемыУчета		 - предыдущая система задачи
//  ДатаЗаписи			 - Дата (дата и время)					 - дата, на которую будут записаны записи
//
Процедура РассчитатьСтатусыПоСистемам(Знач Заявка, Знач Система = Неопределено,
									Знач ПредыдущаяСистема = Неопределено, Знач ДатаЗаписи = Неопределено) Экспорт
	
	// Используется для передачи данных в блокировку данных
	ТаблицаСистем = Новый ТаблицаЗначений;
	ТаблицаСистем.Колонки.Добавить("Система", Новый ОписаниеТипов("СправочникСсылка.СистемыУчета"));
	
	// Если в процедуру переданы одна или несколько систем
	ТипЗначенияПараметра = ТипЗнч(Система);
	Если ТипЗначенияПараметра = Тип("СправочникСсылка.СистемыУчета") Тогда
		ТаблицаСистем.Добавить().Система = Система;
	ИначеЕсли ТипЗначенияПараметра = Тип("Массив") Тогда
		ТаблицаСистем.ЗагрузитьКолонку(Система, "Система");
	КонецЕсли;
	
	УчаствуютСистемы = (ТаблицаСистем.Количество() > 0);
	ПредыдущаяСистемаЗаполнена = (ПредыдущаяСистема <> Неопределено);
	
	// Если у заявки заполнен реквизит ФинальныйСтатус, то он применяется как основной
	// для всех систем. Во всех остальных случаях статус заявки по системе считается как
	// минимальный статус по всем подчиненным задачам первого уровня иерархии.	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ЗаявкаНаРазработку.Ссылка КАК Заявка,
	|	СистемыУчета.Система КАК Система,
	|	ВЫБОР
	|		КОГДА &ПредыдущаяСистемаЗаполнена
	|				И &ПредыдущаяСистема = СтатусыЗаявокПоСистемам.Система
	|			ТОГДА ЕСТЬNULL(СтатусыОбъектовПользовательский.Порядок, ЕСТЬNULL(СтатусыОбъектовЗадача.Порядок, 0))
	|		ИНАЧЕ ЕСТЬNULL(СтатусыОбъектовПользовательский.Порядок, ЕСТЬNULL(СтатусыОбъектовЗадача.Порядок, ЕСТЬNULL(СтатусыОбъектовСистема.Порядок, 0)))
	|	КОНЕЦ КАК ПорядокСтатуса,
	|	ЗаявкаНаРазработку.ФинальныйСтатус КАК ФинальныйСтатусЗаявки,
	|	ЕСТЬNULL(СтатусыОбъектовЗаявка.Порядок, 0) КАК ПорядокФинальногоСтатусаЗаявки,
	|	ВЫБОР
	|		КОГДА Задача.Статус ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоЗадач
	|ПОМЕСТИТЬ СвязанныеЗадачи
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК СистемыУчета
	|		ПО ЗаявкаНаРазработку.Ссылка = СистемыУчета.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|		ПО (СистемыУчета.Ссылка = СтатусыЗаявокПоСистемам.Заявка)
	|			И (СистемыУчета.Система = СтатусыЗаявокПоСистемам.Система)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задача КАК Задача
	|		ПО (СистемыУчета.Ссылка = (ВЫРАЗИТЬ(Задача.ОбъектОснование КАК Документ.ЗаявкаНаРазработку)))
	|			И (Задача.СистемаУчета = СистемыУчета.Система)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗадач.СрезПоследних КАК СвойстваЗадач
	|		ПО (Задача.Ссылка = СвойстваЗадач.Объект)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектовЗадача
	|		ПО (СвойстваЗадач.Статус = СтатусыОбъектовЗадача.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектовПользовательский
	|		ПО (СвойстваЗадач.ПользовательскийСтатус = СтатусыОбъектовПользовательский.Ссылка)
	|			И (СтатусыОбъектовПользовательский.Предопределенный)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектовЗаявка
	|		ПО ЗаявкаНаРазработку.ФинальныйСтатус = СтатусыОбъектовЗаявка.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектовСистема
	|		ПО (СтатусыЗаявокПоСистемам.Статус = СтатусыОбъектовСистема.Ссылка)
	|ГДЕ
	|	ЗаявкаНаРазработку.Ссылка = &Заявка
	|{ГДЕ
	|	Задача.СистемаУчета КАК Система}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвязанныеЗадачи.Система КАК Система,
	|	СУММА(СвязанныеЗадачи.КоличествоЗадач) КАК КоличествоЗадач,
	|	МИНИМУМ(СвязанныеЗадачи.ПорядокСтатуса) КАК МинимальныйПорядокСтатуса,
	|	МАКСИМУМ(СвязанныеЗадачи.ПорядокСтатуса) КАК МаксимальныйПорядокСтатуса
	|ПОМЕСТИТЬ МинимальныйМаксимальныйПорядкиСтатусов
	|ИЗ
	|	СвязанныеЗадачи КАК СвязанныеЗадачи
	|ГДЕ
	|	СвязанныеЗадачи.ПорядокСтатуса <> &ПорядокСтатусаОтклонен
	|
	|СГРУППИРОВАТЬ ПО
	|	СвязанныеЗадачи.Система
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвязанныеЗадачи.Заявка КАК Заявка,
	|	СвязанныеЗадачи.Система КАК Система,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА СвязанныеЗадачи.ФинальныйСтатусЗаявки <> ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ПустаяСсылка)
	|				ТОГДА СвязанныеЗадачи.ПорядокФинальногоСтатусаЗаявки
	|			ИНАЧЕ ВЫБОР
	|					КОГДА МинимальныйМаксимальныйПорядкиСтатусов.КоличествоЗадач ЕСТЬ NULL
	|						ТОГДА &ПорядокСтатусаОтклонен
	|					КОГДА МинимальныйМаксимальныйПорядкиСтатусов.КоличествоЗадач = 1
	|						ТОГДА СвязанныеЗадачи.ПорядокСтатуса
	|					ИНАЧЕ ВЫБОР
	|							КОГДА МинимальныйМаксимальныйПорядкиСтатусов.МинимальныйПорядокСтатуса <= &ПорядокСтатусаВРаботе
	|									И МинимальныйМаксимальныйПорядкиСтатусов.МаксимальныйПорядокСтатуса >= &ПорядокСтатусаВРаботе
	|								ТОГДА &ПорядокСтатусаВРаботе
	|							ИНАЧЕ МинимальныйМаксимальныйПорядкиСтатусов.МинимальныйПорядокСтатуса
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОНЕЦ) КАК ПорядокСтатуса
	|ПОМЕСТИТЬ МинимальныеСтатусыЗаявкиПоСистемам
	|ИЗ
	|	СвязанныеЗадачи КАК СвязанныеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ МинимальныйМаксимальныйПорядкиСтатусов КАК МинимальныйМаксимальныйПорядкиСтатусов
	|		ПО СвязанныеЗадачи.Система = МинимальныйМаксимальныйПорядкиСтатусов.Система
	|
	|СГРУППИРОВАТЬ ПО
	|	СвязанныеЗадачи.Заявка,
	|	СвязанныеЗадачи.Система
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МинимальныеСтатусыЗаявкиПоСистемам.Заявка КАК Заявка,
	|	МинимальныеСтатусыЗаявкиПоСистемам.Система КАК Система,
	|	СтатусыОбъектов.Ссылка КАК Статус,
	|	&Пользователь КАК Пользователь,
	|	ДокументЗаявкаНаРазработку.Направление КАК Направление
	|ИЗ
	|	МинимальныеСтатусыЗаявкиПоСистемам КАК МинимальныеСтатусыЗаявкиПоСистемам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО МинимальныеСтатусыЗаявкиПоСистемам.ПорядокСтатуса = СтатусыОбъектов.Порядок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ДокументЗаявкаНаРазработку
	|		ПО МинимальныеСтатусыЗаявкиПоСистемам.Заявка = ДокументЗаявкаНаРазработку.Ссылка
	|ГДЕ
	|	СтатусыОбъектов.Предопределенный";	
	#КонецОбласти
	
	ПостроительЗапроса.Параметры.Вставить("Заявка", Заявка);
	ПостроительЗапроса.Параметры.Вставить("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	ПостроительЗапроса.Параметры.Вставить("ПредыдущаяСистемаЗаполнена", ПредыдущаяСистемаЗаполнена);
	ПостроительЗапроса.Параметры.Вставить("ПредыдущаяСистема", ПредыдущаяСистема);
	
	// Получение порядка для статусов "В работе" и "Отклонен"	
	ПорядокСтатуса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтатусыОбъектов.ВРаботе, "Порядок");
	ПостроительЗапроса.Параметры.Вставить("ПорядокСтатусаВРаботе", ПорядокСтатуса);

	ПорядокСтатуса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтатусыОбъектов.Отклонен, "Порядок");
	ПостроительЗапроса.Параметры.Вставить("ПорядокСтатусаОтклонен", ПорядокСтатуса);
	
	// Перед обработкой данных нужно заблокировать записи регистра
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.СтатусыЗаявокПоСистемам");
	ЭлементБлокировки.УстановитьЗначение("Заявка", Заявка);
	
	Если УчаствуютСистемы Тогда
		ЭлементБлокировки.ИсточникДанных = ТаблицаСистем;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Система", "Система");
		
		СписокСистем = Новый СписокЗначений;
		СписокСистем.ЗагрузитьЗначения(ТаблицаСистем.ВыгрузитьКолонку("Система"));
		
		ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("Система");
		ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке;
		ЭлементОтбора.Значение = СписокСистем;
		ЭлементОтбора.Использование = Истина;
	КонецЕсли;
	
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	БлокировкаДанных.Заблокировать();
	
	// Выполнение запроса и получение таблицы записей для регистра сведений
	ПостроительЗапроса.Выполнить();
	ТаблицаЗаписейДляРегистра = ПостроительЗапроса.Результат.Выгрузить();
	
	// Если в качестве параметра были переданы системы, тогда запись выполняется
	// в рамках наборов "Заявка - Система".
	Если УчаствуютСистемы Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаЗаписейДляРегистра Цикл
			НаборЗаписей = РегистрыСведений.СтатусыЗаявокПоСистемам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Заявка.Установить(Заявка);
			НаборЗаписей.Отбор.Система.Установить(СтрокаТаблицы.Система);
			
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаТаблицы);
			
			// Необходимо отключить автоматический расчет минимального статуса заявки
			// и историю. Т.к. это запустся после.
			НаборЗаписей.АвтоматическийРасчетМинимальногоСтатуса = Ложь;
			НаборЗаписей.СохранитьИсторию = Ложь;
			
			НачатьТранзакцию();
			Попытка
				НаборЗаписей.Записать();
				
				РегистрыСведений.НаправленияИСистемыИзмененныхЗаявок.ДобавитьЗапись(СтрокаТаблицы.Направление,
				СтрокаТаблицы.Система);
				
				Если СтрокаТаблицы.Статус = Справочники.СтатусыОбъектов.Рассмотрение 
					ИЛИ СтрокаТаблицы.Статус = Справочники.СтатусыОбъектов.ВРеализацию Тогда
					
					РегистрыСведений.ДатыАктуальностиЗаявокНаРазработку.УдалитьЗаявку(Заявка);
					
				ИначеЕсли СтрокаТаблицы.Статус = Справочники.СтатусыОбъектов.Решен
					ИЛИ СтрокаТаблицы.Статус = Справочники.СтатусыОбъектов.Отклонен Тогда
					
					РегистрыСведений.СистемыЗаявокНазначеныеПользователю.Удалить(Заявка, СтрокаТаблицы.Система);
				КонецЕсли;  
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				
				Шаблон = "Ошибка при изменении статуса ""Заявки на разработку"" по причине: %1";
				ТекстОшибки = СтрШаблон(Шаблон, ОписаниеОшибки());
				ЗаписьЖурналаРегистрации("Системные операции.Изменение статуса ""Заявки на разработку""", 
					УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки); 
			КонецПопытки;
		КонецЦикла;
	Иначе
		НаборЗаписей = РегистрыСведений.СтатусыЗаявокПоСистемам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Заявка.Установить(Заявка);
		НаборЗаписей.Загрузить(ТаблицаЗаписейДляРегистра);
		
		// Необходимо отключить автоматический расчет минимального статуса заявки
		// и историю. Т.к. это запустится после.
		НаборЗаписей.АвтоматическийРасчетМинимальногоСтатуса = Ложь;
		НаборЗаписей.СохранитьИсторию = Ложь;
		НаборЗаписей.Записать();		
	КонецЕсли;
	
	// После пересчета нужно сохранить данные в регистр хранения истории
	РегистрыСведений.ИсторияСтатусовЗаявокПоСистемам.Добавить(Заявка, ТаблицаЗаписейДляРегистра, ДатаЗаписи); 
	
	// После пересчета статусов по системам нужно рассчитать минимальный статус заявки
	РегистрыСведений.МинимальныеСтатусыЗаявок.РассчитатьМинимальныйСтатус(Заявка);
	
	// После пересчета статусов по системам можно рассчитать статусы по филиалам
	РегистрыСведений.СтатусыЗаявокПоСистемамФилиалов.Рассчитать(Заявка);
	
КонецПроцедуры

// Удаляет все записи из регистра по указанной заявке
//
// Параметры:
//  Заявка	 - ДокументСсылка.ЗаявкаНаРазработку - Заявка на разработку
//
Процедура УдалитьЗаписиПоЗаявке(Знач Заявка) Экспорт
	
	НаборЗаписей = РегистрыСведений.СтатусыЗаявокПоСистемам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Заявка.Установить(Заявка);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Изменяет статус по заявке в разрезе системы
//
// Параметры:
//  Заявка		 - ДокументСсылка.ЗаявкаНаРазработку - ссылка на заявку
//  Система		 - СправочникСсылка.СистемыУчета	 - система заявки
//  Статус		 - СправочникСсылка.СтатусыОбъектов	 - новый статус заявки по системе
//  Комментарий	 - Строка							 - текст комментария
//
Процедура УстановитьСтатусЗаявкиПоСистеме(Знач Заявка, Знач Система, Знач Статус, Знач Комментарий = Неопределено, Знач Данные = "") Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Заявка.Установить(Заявка);
	НаборЗаписей.Отбор.Система.Установить(Система);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Заявка = Заявка;
	НоваяЗапись.Система = Система;
	НоваяЗапись.Статус = Статус;
	НоваяЗапись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	НаборЗаписей.Записать();
	
	НаправлениеЗаявки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заявка, "Направление");
	РегистрыСведений.НаправленияИСистемыИзмененныхЗаявок.ДобавитьЗапись(НаправлениеЗаявки, Система);	
	
	Если Комментарий <> Неопределено Тогда
		
		ШаблонТекста = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма().БлокДвеТаблицы;
		
		ТекстСообщения = СтрЗаменить(ШаблонТекста, "<!-- left_table_1 -->", Комментарий);

		СвойстваСообщения = Новый Структура;
		СвойстваСообщения.Вставить("Данные", Данные);
		СвойстваСообщения.Вставить("Категория", Перечисления.КатегорииСобытийИсторияИзменений.Главное);
			
		РегистрыСведений.ИсторияИзмененийОбъектовПоСобытиям.Добавить(Заявка, СвойстваСообщения);
		
		СвойстваОповещения = Новый Структура;
		СвойстваОповещения.Вставить("ТекстСообщения", ТекстСообщения);
		СвойстваОповещения.Вставить("КатегорияСообщения", Перечисления.КатегорииСообщенийПользователя.ИзменениеСтатусаОбъекта);
		СвойстваОповещения.Вставить("СообщениеSDMS", " внес(-ла) изменения:");
		СвойстваОповещения.Вставить("Данные", Данные);
		
		РегистрыСведений.ОчередьСобытийНаОбработку.ОтправитьОповещениеОпределяемыеПолучатели(Заявка, СвойстваОповещения);
	КонецЕсли; 
	
	Если Статус = Справочники.СтатусыОбъектов.Рассмотрение 
		ИЛИ Статус = Справочники.СтатусыОбъектов.ВРеализацию Тогда
		
		РегистрыСведений.ДатыАктуальностиЗаявокНаРазработку.УдалитьЗаявку(Заявка); 
		
	ИначеЕсли Статус = Справочники.СтатусыОбъектов.Отклонен Тогда			
		РегистрыСведений.СистемыЗаявокНазначеныеПользователю.Удалить(Заявка, Система);
	КонецЕсли;
	
	// После изменения статуса по системе нужно пересчитать статусы по филиалам
	РегистрыСведений.СтатусыЗаявокПоСистемамФилиалов.Рассчитать(Заявка);
	
КонецПроцедуры

#КонецОбласти
	
#КонецЕсли
