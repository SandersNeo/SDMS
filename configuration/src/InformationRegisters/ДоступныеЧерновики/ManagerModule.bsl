///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Добавляет запись в регистр ДоступныеЧерновики
//
// Параметры:
//  Заявка		 - ДокументСсылка.ЗаявкаНаРазработку - ссылка на документ ЗаявкаНаРазработку
//  Пользователь - СправочникСсылка.Пользователи - ссылка на элемент справочника Пользователи
//
Процедура Добавить(Знач Заявка, Знач Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	РегистрСведений.ДоступныеЧерновики КАК ДоступныеЧерновики
	|ГДЕ
	|	ДоступныеЧерновики.Заявка = &Заявка
	|	И ДоступныеЧерновики.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если Выборка.Количество = 0 Тогда
		НаборЗаписей = РегистрыСведений.ДоступныеЧерновики.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Заявка.Установить(Заявка);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Заявка = Заявка;
		НоваяЗапись.Пользователь = Пользователь;
		
		НаборЗаписей.Записать(Ложь);
		
		ШаблоныПисьма = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма();

		ШаблонСообщения = "Пользователь <b>%1</b> открыл(-а) Вам доступ к черновику %2";
		
		СсылкаНаОбъект = СтрЗаменить(ШаблоныПисьма.АктивнаяСсылка, "<!-- link -->", ОбщегоНазначения.ПолучитьШаблонНавигационнойСсылки(Заявка.Ссылка));
		СсылкаНаОбъект = СтрЗаменить(СсылкаНаОбъект, "<!-- title_link -->", Строка(Заявка));

		ШаблонСообщения = СтрШаблон(ШаблонСообщения, Заявка.Автор, СсылкаНаОбъект);
		
		СообщениеДляПочты = СтрЗаменить(ШаблоныПисьма.БлокДвеТаблицы, "<!-- left_table_1 -->", ШаблонСообщения);
		
		ДанныеСтруктура = Новый Структура("Событие, Пользователь, Добавлен", "ДоступЧерновика", Строка(Пользователь), Истина);
		
		Сообщения = Новый Структура("Почта, Данные, СообщениеSDMS, Пользователь", 
			СообщениеДляПочты, ЗаписатьЗначениеJSON(ДанныеСтруктура), " открыл(-а) Вам доступ к черновику.", Заявка.Автор);
			
		ОповеститьПользователя(Заявка, Пользователь, Сообщения);
	Иначе
		Сообщить("Такой пользователь уже имеется в списке.");
	КонецЕсли;
	
КонецПроцедуры

// Удаляет запись из регистра ДоступныеЧерновики
//
// Параметры:
//  Заявка		         - ДокументСсылка.ЗаявкаНаРазработку - ссылка на документ ЗаявкаНаРазработку
//  Пользователь         - СправочникСсылка.Пользователи - ссылка на элемент справочника Пользователи
//  УдалениеНеактуальных - Булево - признак выполнения операции по удалению неактуальных записей
//
// Внимание:
//  Если Пользователь не указан, то будут удалены все записи из регистра принадлежащие Заявке
//
Процедура Удалить(Знач Заявка, Знач Пользователь = Неопределено, Знач УдалениеНеактуальных = Ложь) Экспорт
	
	НаборЗаписей = РегистрыСведений.ДоступныеЧерновики.СоздатьНаборЗаписей();
	
	// Если с заявки снят статус черновика
	Если Пользователь = Неопределено Тогда
		НаборЗаписей.Отбор.Заявка.Установить(Заявка);
		
	Иначе // Если автор заявки перестает делиться с пользователем
		НаборЗаписей.Отбор.Заявка.Установить(Заявка);
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	КонецЕсли;
	
	НаборЗаписей.Записать();		
	
	Если НЕ УдалениеНеактуальных Тогда
		
		ШаблоныПисьма = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма();
		
		ШаблонСообщения = "Пользователь <b>%1</b> закрыл(-а) Вам доступ к черновику %2";
		
		СсылкаНаОбъект = СтрЗаменить(ШаблоныПисьма.АктивнаяСсылка, "<!-- link -->", ОбщегоНазначения.ПолучитьШаблонНавигационнойСсылки(Заявка.Ссылка));
		СсылкаНаОбъект = СтрЗаменить(СсылкаНаОбъект, "<!-- title_link -->", Строка(Заявка));
		
		ШаблонСообщения = СтрШаблон(ШаблонСообщения, Заявка.Автор, СсылкаНаОбъект);
		
		СообщениеДляПочты = СтрЗаменить(ШаблоныПисьма.БлокДвеТаблицы, "<!-- left_table_1 -->", ШаблонСообщения);
		
		ДанныеСтруктура = Новый Структура("Событие, Пользователь, Добавлен", "ДоступЧерновика", Строка(Пользователь), Ложь);
		
		Сообщения = Новый Структура("Почта, Данные, СообщениеSDMS, Пользователь", 
			СообщениеДляПочты, ЗаписатьЗначениеJSON(ДанныеСтруктура), " закрыл(-а) Вам доступ к черновику.", Заявка.Автор);
		ОповеститьПользователя(Заявка, Пользователь, Сообщения);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет из регистра сведений ДоступныеЧерновики записи по документам,
// у которых был снять признак "Черновик".
//
// Параметры:
//  ИмяСобытия - Строка - имя события для журнала регистрации.
//
Процедура УдалитьНеактуальныеЗаписи(Знач ИмяСобытия) Экспорт
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
		"Запуск процедуры ""Удаление устаревших записей регистра сведений ДоступныеЧерновики""");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоступныеЧерновики.Заявка КАК Заявка
	|ИЗ
	|	РегистрСведений.ДоступныеЧерновики КАК ДоступныеЧерновики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО ДоступныеЧерновики.Заявка = ЗаявкаНаРазработку.Ссылка
	|			И (ЗаявкаНаРазработку.Черновик = ЛОЖЬ)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ДоступныеЧерновики");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Заявка", "Заявка");
	
	НачатьТранзакцию();
	
	Попытка
		БлокировкаДанных.Заблокировать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Удалить(Выборка.Заявка, , Истина);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.РегистрыСведений.ДоступныеЧерновики, Выборка.Заявка, 
			"Ошибка при удалении записи регистра по причине: " + ОписаниеОшибки());
	КонецПопытки;
		
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
		"Завершение процедуры ""Удаление устаревших записей регистра сведений ДоступныеЧерновики""");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОповеститьПользователя(Знач Объект, Знач Пользователь, Знач Сообщения)
	
	МассивПользователей = Новый Массив;
	МассивПользователей.Добавить(Пользователь);
	
	// Отправка уведомления на электронную почту
	СообщениеПользователям = Новый Структура("ТекстСообщения, СообщениеSDMS, КатегорияСообщения", Сообщения.Почта, Сообщения.СообщениеSDMS, 
		Перечисления.КатегорииСообщенийПользователя.ДоступКОбъекту);
	
	РегистрыСведений.ПодготовленныеСообщенияПользователяПоКатегориям.Добавить(МассивПользователей, Объект.Ссылка,
		СообщениеПользователям, Сообщения.Пользователь);
	
	СтруктураСообщение = ОбщегоНазначения.ПолучитьСтруктуруДанныхДляЗаписиВИсторию(Ложь);
	СтруктураСообщение.Данные = Сообщения.Данные;
	СтруктураСообщение.Категория = Перечисления.КатегорииСобытийИсторияИзменений.Прочее;
	РегистрыСведений.ИсторияИзмененийОбъектовПоСобытиям.Добавить(Объект.Ссылка, СтруктураСообщение);
	
КонецПроцедуры

// Возвращает массив пользователей имеющих доступ к заявке
//
// Параметры:
//  Заявка	 - ДокументСсылка.ЗаявкаНаРазработку - Ссылка на заявку
// 
// Возвращаемое значение:
//   - Массив
//
Функция ПолучитьСписокПользователей(Знач Заявка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоступныеЧерновики.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.ДоступныеЧерновики КАК ДоступныеЧерновики
	|ГДЕ
	|	ДоступныеЧерновики.Заявка = &Заявка";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	
	Возврат запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
КонецФункции

#КонецОбласти
