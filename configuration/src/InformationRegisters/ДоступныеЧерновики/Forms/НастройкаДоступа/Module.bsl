///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Заявка = Параметры.Заявка;
	
	ЗаполнитьСписокРежимовДоступов();
	
	ЗаполнитьУсловноеОформление();	
	
	ЗаполнитьСпискиПользователей();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СтрокаПоискаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	ИнтерфейсПриложенияКлиент.УстановитьОтборПриИзмененииСтрокиПоиска(
		ЭтотОбъект, "ДоступныеПользователи", Текст, "Наименование");
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	ИнтерфейсПриложенияКлиент.СброситьПоиск(ЭтотОбъект, "ДоступныеПользователи");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий таблицы "ВыбранныеПользователи"

&НаКлиенте
Процедура ВыбранныеПользователиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ВыбранныеПользователиИсключить" Тогда
		НайденнаяСтрока = ВыбранныеПользователи.НайтиПоИдентификатору(ВыбраннаяСтрока);
		НайденнаяСтрока = ДоступныеПользователи.НайтиПоИдентификатору(НайденнаяСтрока.ИдентификаторСтрокиСписка);
		
		ИсключитьПользователя(НайденнаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий таблицы "ДоступныеПользователи"

&НаКлиенте
Процедура ДоступныеПользователиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДоступныеПользователиНаименование" Тогда
		НайденнаяСтрока = ДоступныеПользователи.НайтиПоИдентификатору(ВыбраннаяСтрока);
		НайденнаяСтрока.Пометка = НЕ НайденнаяСтрока.Пометка;
		
		ОбработатьИзменениеСтрокиДоступныхПользователей(НайденнаяСтрока);
		
	ИначеЕсли Поле.Имя = "ДоступныеПользователиИзбранное" Тогда
		ПриИзмененииПометкиИзбранного(ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеПользователиПометкаПриИзменении(Элемент)
	
	ОбработатьИзменениеСтрокиДоступныхПользователей(Элементы.ДоступныеПользователи.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОчиститьПоиск(Команда)
	
	ИнтерфейсПриложенияКлиент.СброситьПоиск(ЭтотОбъект, "ДоступныеПользователи");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	НаборДанных = Новый Структура("Заявка, НастройкиДоступа", Заявка, Новый Массив);
	
	Для Каждого СтрокаТаблицы Из ВыбранныеПользователи Цикл
		НаборДанных.НастройкиДоступа.Добавить(Новый Структура("Пользователь, ПолныйДоступ", 
			СтрокаТаблицы.Пользователь, СтрокаТаблицы.РежимДоступа = 1));
	КонецЦикла;
	
	ОписаниеОшибки = СохранитьИзмененияНаСервере(НаборДанных);
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ПоказатьОповещениеПользователя("Сохранение настройки", , "Настройка доступа к черновику сохранена.",
			БиблиотекаКартинок.Информация32);
			
		Закрыть();
	Иначе
		ПоказатьПредупреждение(, ОписаниеОшибки, , "Настройка доступа к черновику");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Управление пользователями в списках

&НаКлиенте
Процедура ДобавитьПользователя(СтрокаТаблицы)
	
	НоваяСтрокаВыбранных = ВыбранныеПользователи.Добавить();
	НоваяСтрокаВыбранных.РежимДоступа = 0;
	НоваяСтрокаВыбранных.Исключить = БиблиотекаКартинок.УдалитьЗначение;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрокаВыбранных, СтрокаТаблицы, "Пользователь, Наименование");
	
	СтрокаТаблицы.Пометка = Истина;
	
	СтрокаТаблицы.ИдентификаторСтрокиСписка = НоваяСтрокаВыбранных.ПолучитьИдентификатор();
	НоваяСтрокаВыбранных.ИдентификаторСтрокиСписка = СтрокаТаблицы.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьПользователя(СтрокаТаблицы)
	
	НайденнаяСтрока = ВыбранныеПользователи.НайтиПоИдентификатору(СтрокаТаблицы.ИдентификаторСтрокиСписка);
	Если НайденнаяСтрока <> Неопределено Тогда
		ВыбранныеПользователи.Удалить(НайденнаяСтрока);
	КонецЕсли;	
	
	СтрокаТаблицы.Пометка = Ложь;
	СтрокаТаблицы.ИдентификаторСтрокиСписка = -1;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСтрокиДоступныхПользователей(СтрокаТаблицы)
	
	Если СтрокаТаблицы.Пометка = Истина Тогда
		ДобавитьПользователя(СтрокаТаблицы);	
	Иначе
		ИсключитьПользователя(СтрокаТаблицы);	
	КонецЕсли;			
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

&НаСервере
Процедура ЗаполнитьСпискиПользователей()
	
	ВыбранныеПользователи.Очистить();
	ДоступныеПользователи.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИзбранныеОбъекты.Объект КАК Пользователь
	|ПОМЕСТИТЬ ИзбранныеПользователи
	|ИЗ
	|	РегистрСведений.ИзбранныеОбъекты КАК ИзбранныеОбъекты
	|ГДЕ
	|	ИзбранныеОбъекты.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыИзбранныхОбъектов.Пользователи)
	|	И ИзбранныеОбъекты.Владелец = &Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА НастройкиДоступностиЧерновиков.Пользователь ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоступПредоставлен,
	|	ВЫБОР
	|		КОГДА НастройкиДоступностиЧерновиков.ПолныйДоступ ЕСТЬ НЕ NULL 
	|				И НастройкиДоступностиЧерновиков.ПолныйДоступ = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РежимДоступа,
	|	Пользователи.ПометкаУдаления КАК ПометкаУдаления,
	|	Пользователи.Недействителен КАК Недействителен,
	|	Пользователи.Служебный КАК Служебный
	|ПОМЕСТИТЬ ПолнаяТаблицаПользователей
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеЧерновики КАК НастройкиДоступностиЧерновиков
	|		ПО (НастройкиДоступностиЧерновиков.Заявка = &Заявка)
	|			И Пользователи.Ссылка = НастройкиДоступностиЧерновиков.Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ИзбранныеПользователи.Пользователь КАК Справочник.Пользователи) КАК Пользователь
	|ИЗ
	|	ИзбранныеПользователи КАК ИзбранныеПользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ИзбранныеПользователи.Пользователь = Пользователи.Ссылка
	|			И (НЕ Пользователи.Недействителен)
	|			И (НЕ Пользователи.Служебный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПолнаяТаблицаПользователей.ДоступПредоставлен = ИСТИНА КАК Пометка,
	|	ПолнаяТаблицаПользователей.Пользователь КАК Пользователь,
	|	ПолнаяТаблицаПользователей.Наименование КАК Наименование,
	|	ПолнаяТаблицаПользователей.РежимДоступа КАК РежимДоступа,
	|	-1 КАК ИдентификаторСтрокиСписка,
	|	ВЫБОР
	|		КОГДА ИзбранныеПользователи.Пользователь ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Избранное
	|ИЗ
	|	ПолнаяТаблицаПользователей КАК ПолнаяТаблицаПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИзбранныеПользователи КАК ИзбранныеПользователи
	|		ПО ПолнаяТаблицаПользователей.Пользователь = ИзбранныеПользователи.Пользователь
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПолнаяТаблицаПользователей.ДоступПредоставлен = ИСТИНА
	|				ТОГДА ИСТИНА
	|			КОГДА ПолнаяТаблицаПользователей.ПометкаУдаления = ЛОЖЬ
	|					И ПолнаяТаблицаПользователей.Недействителен = ЛОЖЬ
	|					И ПолнаяТаблицаПользователей.Служебный = ЛОЖЬ
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Избранное УБЫВ,
	|	Наименование";
	
	Запрос.УстановитьПараметр("Владелец", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Заявка", Заявка);
	
	// Запросы пакета:
	// 1 - Избранные пользователи
	// 2 - Список доступных пользователей
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
	Если НЕ РезультатыЗапроса[3].Пустой() Тогда
		Выборка = РезультатыЗапроса[3].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			// Заполнение общей таблицы пользователей
			НоваяСтрокаДоступных = ДоступныеПользователи.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДоступных, Выборка, 
				"Пометка, Пользователь, Наименование, Избранное, ИдентификаторСтрокиСписка");
			
			// Заполнение таблицы пользователей с предоставленным доступом к черновикам
			Если Выборка.Пометка = Истина Тогда
				НоваяСтрокаВыбранных = ВыбранныеПользователи.Добавить();
				НоваяСтрокаВыбранных.Исключить = БиблиотекаКартинок.УдалитьЗначение;
				
				НоваяСтрокаВыбранных.ИдентификаторСтрокиСписка = НоваяСтрокаДоступных.ПолучитьИдентификатор();
				НоваяСтрокаДоступных.ИдентификаторСтрокиСписка = НоваяСтрокаВыбранных.ПолучитьИдентификатор();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаВыбранных, Выборка, "Пользователь, Наименование, РежимДоступа");
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокРежимовДоступов()
	
	РежимыДоступа = ПолучитьЗначенияРежимовДоступа();
	
	Для Каждого ЭлементКоллекции Из РежимыДоступа Цикл
		Элементы.ВыбранныеПользователиРежимДоступа.СписокВыбора.Добавить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет условное оформление формы программно.
//
&НаСервере
Процедура ЗаполнитьУсловноеОформление()
	
	// Установка общего условного оформления для окон данного вида
	ИнтерфейсПриложения.УстановитьУсловноеОформлениеСпискаДоступныхЗначений(
		ЭтотОбъект, "ДоступныеПользователи.Избранное", "ДоступныеПользователиНаименование");
		
	// Создание условного оформления:
	// - если Полный доступ к черновику = Ложь, то в поле отображается надпись "Просмотр";
	// - если Полный доступ к черновику = Истина, то в поле отображается надпись "Изменение".
	РежимыДоступа = ПолучитьЗначенияРежимовДоступа();
	
	Для Каждого ЭлементКоллекции Из РежимыДоступа Цикл
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		
		// Настройка элемента отбора
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВыбранныеПользователи.РежимДоступа");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ЭлементКоллекции.Ключ;
		ЭлементОтбора.Использование  = Истина;
	
		// Установка условного оформления
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", ЭлементКоллекции.Значение);
	
		// Задание оформляемых полей
		ОформлениеПоля = ЭлементОформления.Поля.Элементы.Добавить();
		ОформлениеПоля.Поле = Новый ПолеКомпоновкиДанных("ВыбранныеПользователиРежимДоступа");
		ОформлениеПоля.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗначенияРежимовДоступа()
	
	РежимыДоступа = Новый Соответствие;
	РежимыДоступа.Вставить(0, "Просмотр");
	РежимыДоступа.Вставить(1, "Изменение");
	
	Возврат Новый ФиксированноеСоответствие(РежимыДоступа);
	
КонецФункции

&НаСервере
Процедура ПриИзмененииПометкиИзбранного(ВыбраннаяСтрока)
	
	НайденнаяСтрока = ДоступныеПользователи.НайтиПоИдентификатору(ВыбраннаяСтрока);
	НайденнаяСтрока.Избранное = НЕ НайденнаяСтрока.Избранное;
	
	ОбщегоНазначенияВызовСервера.ОбработатьПометкуИзбранного(НайденнаяСтрока.Пользователь,
		НайденнаяСтрока.Избранное, "Пользователи");
	
	// Установка фокуса на тот же номер строки
	ИндексСтроки = ДоступныеПользователи.Индекс(НайденнаяСтрока);
	
	// Пересортировка таблицы
	ДоступныеПользователи.Сортировать("Избранное УБЫВ, Наименование");
	
	КоличествоСтрок = ДоступныеПользователи.Количество();
	
	Если КоличествоСтрок > 0 Тогда
		Если КоличествоСтрок >= ИндексСтроки Тогда
			ИдентификаторСтроки = ДоступныеПользователи[ИндексСтроки].ПолучитьИдентификатор();
		Иначе
			ИдентификаторСтроки = ДоступныеПользователи[0].ПолучитьИдентификатор();
		КонецЕсли;
		
		Элементы.ДоступныеПользователи.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СохранитьИзмененияНаСервере(Знач Данные)
	
	ОписаниеОшибки = "";
	
	Если Данные.НастройкиДоступа.Количество() = 0 Тогда
		Попытка
			РегистрыСведений.ДоступныеЧерновики.Удалить(Данные.Заявка);
		Исключение
			ОписаниеОшибки = "При сохранении настройки доступа к черновику возникла ошибка: " + ОписаниеОшибки();
		КонецПопытки;
	Иначе
		ТаблицаНовыхЗаписей = Новый ТаблицаЗначений;
		ТаблицаНовыхЗаписей.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
		ТаблицаНовыхЗаписей.Колонки.Добавить("ПолныйДоступ", Новый ОписаниеТипов("Булево"));
		
		Для Каждого ЭлементКоллекции Из Данные.НастройкиДоступа Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаНовыхЗаписей.Добавить(), ЭлементКоллекции);
		КонецЦикла;
		
		// Описание составляющих результирующего запроса:
		//  Запрос 1. Выбирает записи, которые еще отсутствуют в регистре.
		//  Запрос 2. Выбирает записи, у которых различается признак ПолныйДоступ.
		//  Запрос 2. Выбирает записи, которые необходимо удалить.
		ЗапросОбновленияДанных = Новый Запрос;
		ЗапросОбновленияДанных.Текст =
		"ВЫБРАТЬ
		|	ВнешнийНаборДанных.Пользователь КАК Пользователь,
		|	ВнешнийНаборДанных.ПолныйДоступ КАК ПолныйДоступ
		|ПОМЕСТИТЬ НовыйНаборДанных
		|ИЗ
		|	&ВнешнийНаборДанных КАК ВнешнийНаборДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиДоступностиЧерновиков.Пользователь КАК Пользователь,
		|	НастройкиДоступностиЧерновиков.ПолныйДоступ КАК ПолныйДоступ
		|ПОМЕСТИТЬ ТекущийНаборДанных
		|ИЗ
		|	РегистрСведений.ДоступныеЧерновики КАК НастройкиДоступностиЧерновиков
		|ГДЕ
		|	НастройкиДоступностиЧерновиков.Заявка = &Заявка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТекущийНаборДанных.Пользователь КАК Пользователь,
		|	ТекущийНаборДанных.ПолныйДоступ КАК ПолныйДоступ,
		|	0 КАК Действие
		|ИЗ
		|	ТекущийНаборДанных КАК ТекущийНаборДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ НовыйНаборДанных КАК НовыйНаборДанных
		|		ПО ТекущийНаборДанных.Пользователь = НовыйНаборДанных.Пользователь
		|ГДЕ
		|	НовыйНаборДанных.Пользователь ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НовыйНаборДанных.Пользователь,
		|	НовыйНаборДанных.ПолныйДоступ,
		|	1
		|ИЗ
		|	НовыйНаборДанных КАК НовыйНаборДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекущийНаборДанных КАК ТекущийНаборДанных
		|		ПО НовыйНаборДанных.Пользователь = ТекущийНаборДанных.Пользователь
		|ГДЕ
		|	НовыйНаборДанных.ПолныйДоступ <> ТекущийНаборДанных.ПолныйДоступ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НовыйНаборДанных.Пользователь,
		|	НовыйНаборДанных.ПолныйДоступ,
		|	1
		|ИЗ
		|	НовыйНаборДанных КАК НовыйНаборДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТекущийНаборДанных КАК ТекущийНаборДанных
		|		ПО НовыйНаборДанных.Пользователь = ТекущийНаборДанных.Пользователь
		|ГДЕ
		|	ТекущийНаборДанных.Пользователь ЕСТЬ NULL";
		
		ЗапросОбновленияДанных.УстановитьПараметр("ВнешнийНаборДанных", ТаблицаНовыхЗаписей);
		ЗапросОбновленияДанных.УстановитьПараметр("Заявка", Данные.Заявка);
		
		Выборка = ЗапросОбновленияДанных.Выполнить().Выбрать();
		
		НаборЗаписей = РегистрыСведений.ДоступныеЧерновики.СоздатьНаборЗаписей();
			
		НачатьТранзакцию();
			
		Попытка
			Пока Выборка.Следующий() Цикл
				НаборЗаписей.Отбор.Заявка.Установить(Данные.Заявка);
				НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
					
				Если Выборка.Действие = 1 Тогда
					ЗаписьРегистра = НаборЗаписей.Добавить();
					ЗаписьРегистра.Заявка = Данные.Заявка;
					ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Выборка);
				КонецЕсли;
					
				НаборЗаписей.Записать();
				НаборЗаписей.Очистить();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОписаниеОшибки = "При сохранении настройки доступа к черновику возникла ошибка: " + ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	Возврат ОписаниеОшибки;
	
КонецФункции

#КонецОбласти
