///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает данные из безопасного хранилища. Перед вызовом функции необходимо
// самостоятельно установить привилегированный режим.
//
// Параметры:
//  Назначение - ПеречислениеСсылка.НазначенияДанныхБезопасногоХранилища - назначение
//               данных в безопасном хранилище.
//  Владелец   - Неопределено, СправочникСсылка.Пользователи - владелец данных. Если
//               указано значение Неопределено, в качестве владельца используется
//               пустая ссылка на справочник Пользователи.
//
// Возвращаемое значение:
//  Произвольный.
//
Функция ПолучитьДанные(Знач Назначение, Знач Владелец = Неопределено) Экспорт
	
	Данные = Неопределено;
	
	ПроверитьЗаполнениеВладельца(Владелец);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БезопасноеХранилищеДанных.Данные КАК Данные
	|ИЗ
	|	РегистрСведений.БезопасноеХранилищеДанных КАК БезопасноеХранилищеДанных
	|ГДЕ
	|	БезопасноеХранилищеДанных.Назначение = &Назначение
	|	И БезопасноеХранилищеДанных.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Назначение", Назначение);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Данные = Выборка.Данные.Получить();
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

// Получает пустую структуру настроек для подключения к RAS серверу
// 
// Возвращаемое значение:
//  Структура - структура настроек
//
Функция ПолучитьСтруктуруПодключенияКСерверу() Экспорт  
	
	Структура = Новый Структура;
	Структура.Вставить("Адрес", "");
	Структура.Вставить("Порт", 0);
	Структура.Вставить("ЛогинАдминистратораСервера", "");
	Структура.Вставить("ПарольАдминистратораСервера", "");
	Структура.Вставить("ЛогинАдминистратораКластера", "");
	Структура.Вставить("ПарольАдминистратораКластера", "");
	
	Возврат Структура;
	
КонецФункции

// Помещает данные в безопасное хранилище. Перед вызовом функции необходимо
// самостоятельно установить привилегированный режим.
//
// Параметры:
//  Назначение - ПеречислениеСсылка.НазначенияДанныхБезопасногоХранилища - назначение
//               данных в безопасном хранилище.
//	Данные     - Произвольный - данные, которые нужно поместить в безопасное хранилище.
//  Владелец   - Неопределено, СправочникСсылка.Пользователи - владелец данных. Если
//               указано значение Неопределено, в качестве владельца используется
//               пустая ссылка на справочник Пользователи.
//
Процедура ПоместитьДанные(Знач Назначение, Знач Данные, Знач Владелец = Неопределено) Экспорт
	
	ПроверитьЗаполнениеВладельца(Владелец);
	
	БезопасноеХранилище = СоздатьМенеджерЗаписи();
	БезопасноеХранилище.Назначение = Назначение;
	БезопасноеХранилище.Владелец = Владелец;
	БезопасноеХранилище.Данные = Новый ХранилищеЗначения(Данные, Новый СжатиеДанных(6));
	
	БезопасноеХранилище.Записать();
	
КонецПроцедуры

// Удалет данные из безопасного хранилища. Перед вызовом функции необходимо
// самостоятельно установить привилегированный режим.
//
// Параметры:
//  Назначение - ПеречислениеСсылка.НазначенияДанныхБезопасногоХранилища - назначение
//               данных в безопасном хранилище.
//  Владелец   - Неопределено, СправочникСсылка.Пользователи - владелец данных. Если
//               указано значение Неопределено, в качестве владельца используется
//               пустая ссылка на справочник Пользователи.
//
Процедура УдалитьДанные(Знач Назначение, Знач Владелец = Неопределено) Экспорт
	
	ПроверитьЗаполнениеВладельца(Владелец);
	
	БезопасноеХранилище = СоздатьМенеджерЗаписи();
	БезопасноеХранилище.Назначение = Назначение;
	БезопасноеХранилище.Владелец = Владелец;
	БезопасноеХранилище.Удалить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет параметр Владелец на значение Неопределено. Если значение равно
// Неопределено, то параметру присваивается значение пустой ссылки на справочник
// Пользователи.
//
// Параметры:
//  Владелец - Неопределено, СправочникСсылка.Пользователи.
//
Процедура ПроверитьЗаполнениеВладельца(Владелец)
	
	Если Владелец = Неопределено Тогда
		Владелец = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
