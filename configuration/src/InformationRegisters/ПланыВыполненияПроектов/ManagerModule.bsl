///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ИзменитьЗапись(Знач ДанныеДляЗаполнения) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ДанныеДляЗаполнения.Объект);
	НаборЗаписей.Отбор.КлючСобытия.Установить(ДанныеДляЗаполнения.КлючСобытия);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(НаборЗаписей[0], ДанныеДляЗаполнения);
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьСтатусЭлементаПланаПроекта(Знач Документ, Знач Статус, Знач ДатаОкончания, Знач ПроцентВыполнения = 0) Экспорт
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	ДанныеДляЗаполнения = Новый Структура;
	ДанныеДляЗаполнения.Вставить("ДатаРедактирования", ТекущаяДата);
	ДанныеДляЗаполнения.Вставить("Статус", Статус);
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДанныеДляЗаполнения.Вставить("ДатаОкончания_Факт", ДатаОкончания);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыПланаПроекта.КлючСобытия КАК КлючСобытия,
	|	ПланыВыполненияПроектов.Объект КАК Объект,
	|	КОЛИЧЕСТВО(ВсеДокументыПлана.Документ) КАК КоличествоДокументов,
	|	ПланыВыполненияПроектов.ДатаНачала_Факт КАК ДатаНачала_Факт,
	|	ПланыВыполненияПроектов.ВладелецСобытия КАК КлючРодителя
	|ИЗ
	|	РегистрСведений.ДокументыПланаПроекта КАК ДокументыПланаПроекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланыВыполненияПроектов КАК ПланыВыполненияПроектов
	|		ПО ДокументыПланаПроекта.КлючСобытия = ПланыВыполненияПроектов.КлючСобытия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПланаПроекта КАК ВсеДокументыПлана
	|		ПО (ПланыВыполненияПроектов.КлючСобытия = ВсеДокументыПлана.КлючСобытия)
	|ГДЕ
	|	ДокументыПланаПроекта.Документ = &Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыПланаПроекта.КлючСобытия,
	|	ПланыВыполненияПроектов.Объект,
	|	ПланыВыполненияПроектов.ДатаНачала_Факт,
	|	ПланыВыполненияПроектов.ВладелецСобытия";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл			
			ДанныеДляЗаполнения.Вставить("Объект", Выборка.Объект);
			ДанныеДляЗаполнения.Вставить("КлючСобытия", Выборка.КлючСобытия);
			
			// Если фактическое начало этапа не заполнено, тогда Фактическое начало 
			// проставляется автоматически при изменении статуса Заявки на В работе.
			Если НЕ ЗначениеЗаполнено(Выборка.ДатаНачала_Факт)
				И ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявкаНаРазработку")
				И Статус = Справочники.СтатусыОбъектов.ВРаботе Тогда
				
				ДанныеДляЗаполнения.Вставить("ДатаНачала_Факт", ТекущаяДата);
			КонецЕсли;
			
			Если Выборка.КоличествоДокументов = 1 Тогда
				ДанныеДляЗаполнения.Вставить("Статус", Статус);
			КонецЕсли;
			
			ИзменитьЗапись(ДанныеДляЗаполнения);
			
			Если ЗначениеЗаполнено(Выборка.КлючРодителя) Тогда
				ПересчитатьРодительскиеЭлементыПлана(Выборка.Объект, Выборка.КлючРодителя)
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;	
	
КонецПроцедуры

Функция СоздатьСтроку(Знач ДанныеЗаполнения, Знач Владелец, Знач Порядок) Экспорт
	
	ДанныеДляОбновленияФормы = Неопределено;
	
	НаборЗаписей = РегистрыСведений.ПланыВыполненияПроектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КлючСобытия.Установить(ДанныеЗаполнения.КлючСобытия);
	НаборЗаписей.Отбор.Объект.Установить(Владелец);	
	НоваяЗапись = НаборЗаписей.Добавить();

	ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеЗаполнения);
	НоваяЗапись.Порядок = Порядок;
	НоваяЗапись.Объект = Владелец;
	НоваяЗапись.Автор = ПараметрыСеанса.ТекущийПользователь;
	НоваяЗапись.ДатаРедактирования = ТекущаяДатаСеанса();
	
	//TO DO: сделать рассчет процента выполнения с учетом нескольких документов или убрать совсем
	//
	//ДокументПлана = ДанныеЗаполнения.Документ;
	//ЭтоЧерновик = Ложь;
	//
	//Если ТипЗнч(ДокументПлана) = Тип("СправочникСсылка.Файлы") ИЛИ НЕ ЗначениеЗаполнено(ДокументПлана) Тогда
	//	ДокументПлана = Неопределено;
	//ИначеЕсли ТипЗнч(ДокументПлана) = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
	//	ЭтоЧерновик = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПлана, "Черновик");
	//КонецЕсли;
	//
	//Если ДанныеЗаполнения.ЭтоГруппа Тогда
	//	НоваяЗапись.Статус = Справочники.СтатусыОбъектов.Новый;
	//	НоваяЗапись.ПроцентВыполнения = 0;
	//ИначеЕсли ЭтоЧерновик Тогда
	//	НоваяЗапись.ПроцентВыполнения = 10;
	//ИначеЕсли ЗначениеЗаполнено(ДокументПлана) И ДанныеЗаполнения.Статус = Справочники.СтатусыОбъектов.Новый Тогда
	//	НоваяЗапись.ПроцентВыполнения = 20;
	//Иначе
	//	НоваяЗапись.ПроцентВыполнения = ПолучитьПроцентВыполения(ДанныеЗаполнения.Статус, ДокументПлана);
	//КонецЕсли;
	
	Попытка 
		НаборЗаписей.Записать();
		СтрокаСоздана = Истина;
	Исключение
		СтрокаСоздана = Ложь;
		ОписаниеОшибки = "Не удалось записать план проекта по причине: " + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("План проектов.Запись изменений", УровеньЖурналаРегистрации.Ошибка, , ,	
		ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки); 
	КонецПопытки;
		
	Возврат Новый Структура("СтрокаСоздана, ДанныеДляОбновленияФормы, ПроцентВыполнения", СтрокаСоздана, ДанныеДляОбновленияФормы, НоваяЗапись.ПроцентВыполнения);
	
КонецФункции

Функция ПолучитьДанныеДокумента(Знач Ссылка) Экспорт
		
	Результат = Новый Структура;
	Результат.Вставить("ДатаНачала_План");
	Результат.Вставить("ДатаОкончания_План");
	Результат.Вставить("ДатаНачала_Факт");
	Результат.Вставить("ДатаОкончания_Факт");
	Результат.Вставить("Наименование");
	Результат.Вставить("Номер");  
	Результат.Вставить("Статус");  
	Результат.Вставить("ПредставлениеСтатуса");  
	Результат.Вставить("Заказчик");  

	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВнутреннееЗадание") Тогда
		Реквизиты = "ПлановоеНачало, ИсполнитьДо, ДатаНачалаРазработки, ДатаЗакрытия, Статус, Заказчик, Наименование, Номер";
		СвойстваОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
		
		ЗаполнитьЗначенияСвойств(Результат, СвойстваОбъекта);

		Результат.ДатаНачала_План = СвойстваОбъекта.ПлановоеНачало;
		Результат.ДатаОкончания_План = СвойстваОбъекта.ИсполнитьДо;
		Результат.ДатаНачала_Факт = СвойстваОбъекта.ДатаНачалаРазработки;
		Результат.ДатаОкончания_Факт = СвойстваОбъекта.ДатаЗакрытия;
		
		Результат.ПредставлениеСтатуса = Строка(СвойстваОбъекта.Статус);
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Проекты") Тогда
		Реквизиты = "ДатаПлановоеНачало, ДатаПлановоеОкончание, ДатаНачалаРазработки, ДатаЗавершения, Статус, Заказчик, Код, Наименование";
		СвойстваОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
		
		ЗаполнитьЗначенияСвойств(Результат, СвойстваОбъекта);

		Результат.ДатаНачала_План = СвойстваОбъекта.ДатаПлановоеНачало;
		Результат.ДатаОкончания_План = СвойстваОбъекта.ДатаПлановоеОкончание;
		Результат.ДатаНачала_Факт = СвойстваОбъекта.ДатаНачалаРазработки;
		Результат.ДатаОкончания_Факт = СвойстваОбъекта.ДатаЗавершения;
		
		Результат.ПредставлениеСтатуса = Строка(СвойстваОбъекта.Статус);
		Результат.Номер = СвойстваОбъекта.Код;	
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		#Область ТекстЗапроса
		"ВЫБРАТЬ
		|	ИсторияМинимальныхСтатусовЗаявок.Период КАК ДатаНачала_Факт,
		|	ИсторияМинимальныхСтатусовЗаявок.Заявка КАК Заявка
		|ПОМЕСТИТЬ ФактическаяДатаНачала
		|ИЗ
		|	РегистрСведений.ИсторияМинимальныхСтатусовЗаявок КАК ИсторияМинимальныхСтатусовЗаявок
		|ГДЕ
		|	ИсторияМинимальныхСтатусовЗаявок.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Рассмотрение)
		|	И ИсторияМинимальныхСтатусовЗаявок.Заявка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторияМинимальныхСтатусовЗаявок.Период КАК ДатаОкончания_Факт,
		|	ИсторияМинимальныхСтатусовЗаявок.Заявка КАК Заявка
		|ПОМЕСТИТЬ ФактическаяДатаОкончания
		|ИЗ
		|	РегистрСведений.ИсторияМинимальныхСтатусовЗаявок КАК ИсторияМинимальныхСтатусовЗаявок
		|ГДЕ
		|	ИсторияМинимальныхСтатусовЗаявок.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)
		|	И ИсторияМинимальныхСтатусовЗаявок.Заявка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(МИНИМУМ(Задача.Дата), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачала_План,
		|	ЕСТЬNULL(СУММА(ПланируемыеТрудозатраты.Трудозатраты), 0) КАК ПланируемыйСрок,
		|	&Ссылка КАК Заявка
		|ПОМЕСТИТЬ ПлановаяДатаНачалаИПланируемыйСрок
		|ИЗ
		|	Документ.Задача КАК Задача
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
		|		ПО (ПланируемыеТрудозатраты.Объект = Задача.Ссылка)
		|			И (ПланируемыеТрудозатраты.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
		|ГДЕ
		|	Задача.ОбъектОснование = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(МинимальныеСтатусыЗаявок.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый)) КАК Статус,
		|	ЕСТЬNULL(ФактическаяДатаНачала.ДатаНачала_Факт, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачала_Факт,
		|	ЕСТЬNULL(ФактическаяДатаОкончания.ДатаОкончания_Факт, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончания_Факт,
		|	ЗаявкаНаРазработку.Автор КАК Заказчик,
		|	ЗаявкаНаРазработку.Наименование КАК Наименование,
		|	ПлановаяДатаНачалаИПланируемыйСрок.ДатаНачала_План КАК ДатаНачала_План,
		|	ПлановаяДатаНачалаИПланируемыйСрок.ПланируемыйСрок / 8 КАК ПланируемыйСрок,
		|	ЗаявкаНаРазработку.Черновик КАК Черновик,
		|	ЗаявкаНаРазработку.Номер КАК Номер
		|ИЗ
		|	Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
		|		ЛЕВОЕ СОЕДИНЕНИЕ ФактическаяДатаНачала КАК ФактическаяДатаНачала
		|		ПО ЗаявкаНаРазработку.Ссылка = ФактическаяДатаНачала.Заявка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ФактическаяДатаОкончания КАК ФактическаяДатаОкончания
		|		ПО ЗаявкаНаРазработку.Ссылка = ФактическаяДатаОкончания.Заявка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
		|		ПО (МинимальныеСтатусыЗаявок.Заявка = ЗаявкаНаРазработку.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПлановаяДатаНачалаИПланируемыйСрок КАК ПлановаяДатаНачалаИПланируемыйСрок
		|		ПО ЗаявкаНаРазработку.Ссылка = ПлановаяДатаНачалаИПланируемыйСрок.Заявка
		|ГДЕ
		|	ЗаявкаНаРазработку.Ссылка = &Ссылка";
		#КонецОбласти
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);	
		РезультатЗапроса = Запрос.Выполнить();
			
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();	
			Выборка.Следующий();
			
			ЗаполнитьЗначенияСвойств(Результат, Выборка);						
			ПредставлениеСтатуса = Строка(Результат.Статус);
			
			Если Выборка.Черновик Тогда
				ПредставлениеСтатуса = СтрШаблон("%1 (Черновик)", ПредставлениеСтатуса);
			КонецЕсли; 
			
			Результат.ПредставлениеСтатуса = ПредставлениеСтатуса;	
				
			Если ЗначениеЗаполнено(Результат.ДатаНачала_План) Тогда
				ПланируемыйСрок = Окр(Выборка.ПланируемыйСрок + 0.5);
				Результат.ДатаОкончания_План = ОбщегоНазначенияВызовСервера.ДобавитьКДатеРабочихДней(Результат.ДатаНачала_План, ПланируемыйСрок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

Функция СоздатьСтрокиНаОсновании(Знач Объект, Знач Порядок) Экспорт

	Результат = Новый Структура("Успешно, ТекстОшибки", Истина, "");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ЗаявкаНаРазработку.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|ГДЕ
	|	НЕ ЗаявкаНаРазработку.Черновик
	|	И ЗаявкаНаРазработку.ОбъектОснование = &ОбъектОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаНаРазработку.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланыВыполненияПроектов КАК ПланыВыполненияПроектов
	|		ПО (ПланыВыполненияПроектов.Объект = &ОбъектОснование)
	|			И (ПланыВыполненияПроектов.Документ = ЗаявкаНаРазработку.Ссылка)
	|ГДЕ
	|	НЕ ЗаявкаНаРазработку.Черновик
	|	И ЗаявкаНаРазработку.ОбъектОснование = &ОбъектОснование
	|	И ПланыВыполненияПроектов.Документ ЕСТЬ NULL";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ОбъектОснование", Объект);
	
	Пакеты = Запрос.ВыполнитьПакет();
	КоличествоПакетов = Пакеты.ВГраница();
	
	ПакетПодчиненныеЗаявки = Пакеты[КоличествоПакетов - 1];
	ПакетЗаявкиДляДобавления = Пакеты[КоличествоПакетов];
	
	Если ПакетПодчиненныеЗаявки.Пустой() Тогда
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = "Нет подчиненных заявок на разработку для добавления в план проекта";
	ИначеЕсли ПакетЗаявкиДляДобавления.Пустой() Тогда
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = "Все подчиненные заявки на разработку уже добавлены в план проекта";
	Иначе
		Выборка = ПакетЗаявкиДляДобавления.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДанныеДокумента = ПолучитьДанныеДокумента(Выборка.Ссылка); 
			
			ДанныеЗаполнения = Новый Структура;       
			ДанныеЗаполнения.Вставить("Документ", Выборка.Ссылка);
			ДанныеЗаполнения.Вставить("НазваниеСобытия", ДанныеДокумента.Наименование);	
			ДанныеЗаполнения.Вставить("ДатаНачала_План", ДанныеДокумента.ДатаНачала_План);
			ДанныеЗаполнения.Вставить("ДатаНачала_Факт", ДанныеДокумента.ДатаНачала_Факт);
			ДанныеЗаполнения.Вставить("ДатаОкончания_Факт", ДанныеДокумента.ДатаОкончания_Факт);
			ДанныеЗаполнения.Вставить("Статус", ДанныеДокумента.Статус);
			ДанныеЗаполнения.Вставить("ДатаОкончания_План", ДанныеДокумента.ДатаОкончания_План);
			ДанныеЗаполнения.Вставить("ПланируемыйСрок", ДанныеДокумента.ПланируемыйСрок);
			ДанныеЗаполнения.Вставить("КлючСобытия", Новый УникальныйИдентификатор);
			ДанныеЗаполнения.Вставить("Автор", ПараметрыСеанса.ТекущийПользователь);
			ДанныеЗаполнения.Вставить("ДатаРедактирования", ТекущаяДатаСеанса());		
			ДанныеЗаполнения.Вставить("ВладелецСобытия", Неопределено);
			ДанныеЗаполнения.Вставить("ЭтоГруппа", Ложь);
			
			СоздатьСтроку(ДанныеЗаполнения, Объект, Порядок);
			Порядок = Порядок + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;	

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПроцентВыполения(Знач Статус, Знач Документ) Экспорт
	
	ПроцентВыполнения = 0;
	
	ПроцентыСтатусов = Новый Соответствие;
	ПроцентыСтатусов.Вставить(Справочники.СтатусыОбъектов.ПустаяСсылка(), 0);
	ПроцентыСтатусов.Вставить(Справочники.СтатусыОбъектов.Новый, 0);
	ПроцентыСтатусов.Вставить(Справочники.СтатусыОбъектов.Рассмотрение, 30);
	ПроцентыСтатусов.Вставить(Справочники.СтатусыОбъектов.НаДоработку, 35);
	ПроцентыСтатусов.Вставить(Справочники.СтатусыОбъектов.РевьюТребований, 35);
	ПроцентыСтатусов.Вставить(Справочники.СтатусыОбъектов.Рассмотрен, 50);
	ПроцентыСтатусов.Вставить(Справочники.СтатусыОбъектов.Отложен, 35);
	ПроцентыСтатусов.Вставить(Справочники.СтатусыОбъектов.ВРеализацию, 40);
	ПроцентыСтатусов.Вставить(Справочники.СтатусыОбъектов.ВРаботе, 50);
	ПроцентыСтатусов.Вставить(Справочники.СтатусыОбъектов.Внедрение, 70);
	ПроцентыСтатусов.Вставить(Справочники.СтатусыОбъектов.Публикация, 70);
	ПроцентыСтатусов.Вставить(Справочники.СтатусыОбъектов.Приостановлен, 60);
	ПроцентыСтатусов.Вставить(Справочники.СтатусыОбъектов.Тестирование, 70);
	ПроцентыСтатусов.Вставить(Справочники.СтатусыОбъектов.Протестирован, 80);
	ПроцентыСтатусов.Вставить(Справочники.СтатусыОбъектов.CodeReview, 60);
	ПроцентыСтатусов.Вставить(Справочники.СтатусыОбъектов.Масштабирование, 60);
	ПроцентыСтатусов.Вставить(Справочники.СтатусыОбъектов.Решен, 100);
	ПроцентыСтатусов.Вставить(Справочники.СтатусыОбъектов.Отклонен, 100);
	
	Если Статус = Справочники.СтатусыОбъектов.Новый И ЗначениеЗаполнено(Документ) Тогда
		ПроцентВыполнения = 20;
	Иначе
		ПроцентВыполнения = ПроцентыСтатусов.Получить(Статус);
	КонецЕсли;
	
	Возврат ПроцентВыполнения;
	
КонецФункции

Функция ПересчитатьРодительскиеЭлементыПлана(Знач Объект, Знач ВладелецИзмененного) Экспорт
	
	Результат = Новый Массив;
		
	Если НЕ ЗначениеЗаполнено(ВладелецИзмененного) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланыВыполненияПроектов.КлючСобытия КАК КлючСобытия,
	|	ПланыВыполненияПроектов.ВладелецСобытия КАК ВладелецСобытия,
	|	ПланыВыполненияПроектов.ДатаНачала_План КАК ДатаНачала_План,
	|	ПланыВыполненияПроектов.ДатаОкончания_План КАК ДатаОкончания_План,
	|	ПланыВыполненияПроектов.ДатаНачала_Факт КАК ДатаНачала_Факт,
	|	ПланыВыполненияПроектов.ДатаОкончания_Факт КАК ДатаОкончания_Факт,
	|	ПланыВыполненияПроектов.ПланируемыйСрок КАК ПланируемыйСрок,
	|	ПланыВыполненияПроектов.ПроцентВыполнения КАК ПроцентВыполнения,
	|	ПланыВыполненияПроектов.Статус КАК Статус,
	|	ПланыВыполненияПроектов.ЭтоГруппа КАК ЭтоГруппа
	|ИЗ
	|	РегистрСведений.ПланыВыполненияПроектов КАК ПланыВыполненияПроектов
	|ГДЕ
	|	ПланыВыполненияПроектов.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	
	ПланыПроектаОбъекта = Запрос.Выполнить().Выгрузить();
	
	ТекущаяСтрока = ПланыПроектаОбъекта.Найти(ВладелецИзмененного, "КлючСобытия");
	
	ИзменяемыеСтроки = Новый Массив;
	
	Если ТекущаяСтрока <> Неопределено Тогда		
		ИзменяемыеСтроки.Добавить(ТекущаяСтрока);
	КонецЕсли;
	
	ПустойИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Пока ТекущаяСтрока <> Неопределено И ТекущаяСтрока.ВладелецСобытия <> ПустойИдентификатор Цикл
		ТекущаяСтрока = ПланыПроектаОбъекта.Найти(ТекущаяСтрока.ВладелецСобытия, "КлючСобытия");
		
		Если ТекущаяСтрока <> Неопределено Тогда
			ИзменяемыеСтроки.Добавить(ТекущаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из ИзменяемыеСтроки Цикл
		ПодчиненныеПланы = ПланыПроектаОбъекта.НайтиСтроки(Новый Структура("ВладелецСобытия", Строка.КлючСобытия));
		
		ДатаНачала_Факт = '00010101';
		
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеПланы Цикл			
			Если ЗначениеЗаполнено(ПодчиненнаяСтрока.ДатаНачала_Факт) Тогда
				Если НЕ ЗначениеЗаполнено(ДатаНачала_Факт) ИЛИ ПодчиненнаяСтрока.ДатаНачала_Факт < ДатаНачала_Факт Тогда
					ДатаНачала_Факт = ПодчиненнаяСтрока.ДатаНачала_Факт;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Строка.ДатаНачала_Факт = ДатаНачала_Факт;
	КонецЦикла;
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	
	Для Каждого Строка Из ИзменяемыеСтроки Цикл
		НаборЗаписей.Отбор.КлючСобытия.Установить(Строка.КлючСобытия);
		НаборЗаписей.Прочитать();
		Запись = НаборЗаписей.Получить(0);
		
		Запись.ДатаНачала_Факт = Строка.ДатаНачала_Факт;
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция УдалитьПредшественника(Предшественник) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланыВыполненияПроектов.Объект КАК Объект,
	|	ПланыВыполненияПроектов.КлючСобытия КАК КлючСобытия
	|ИЗ
	|	РегистрСведений.ПланыВыполненияПроектов КАК ПланыВыполненияПроектов
	|ГДЕ
	|	ПланыВыполненияПроектов.Предшественник = &Предшественник";
	
	Запрос.УстановитьПараметр("Предшественник", Предшественник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КлючиУдаленных = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
		НаборЗаписей.Отбор.КлючСобытия.Установить(Выборка.КлючСобытия);
		
		НаборЗаписей.Прочитать();
		
		НаборЗаписей[0].Предшественник = 0; 
		
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();		
		
		КлючиУдаленных.Добавить(Новый Структура("КлючСобытия, Предшественник", Выборка.КлючСобытия, 0));
	КонецЦикла;
	
	Возврат КлючиУдаленных;
	
КонецФункции

Процедура ОбновлениеПроцентаВыполненияПлана(Знач Объект = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланыВыполненияПроектов.Объект КАК Объект,
		|	ВЫРАЗИТЬ(СУММА(ПланыВыполненияПроектов.ПроцентВыполнения) / СУММА(1) КАК ЧИСЛО(15, 0)) КАК ПроцентВыполненияРасчетный,
		|	ВЫБОР
		|		КОГДА ПланыВыполненияПроектов.Объект ССЫЛКА Документ.ВнутреннееЗадание
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПорядокСортировки
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	РегистрСведений.ПланыВыполненияПроектов КАК ПланыВыполненияПроектов
		|ГДЕ
		|	ПланыВыполненияПроектов.ВладелецСобытия = &ПустойИдентификатор
		|	И (НЕ &ОтборПоОбъекту
		|			ИЛИ ПланыВыполненияПроектов.Объект = &Объект)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПланыВыполненияПроектов.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт.Объект КАК Объект,
		|	вт.Объект.ПроцентВыполнения КАК ПроцентВыполненияТекущий,
		|	вт.ПроцентВыполненияРасчетный КАК ПроцентВыполненияРасчетный,
		|	вт.ПорядокСортировки КАК ПорядокСортировки
		|ИЗ
		|	вт КАК вт
		|ГДЕ
		|	вт.Объект.ПроцентВыполнения <> 0
		|	И вт.Объект.ПроцентВыполнения <> 100
		|	И вт.Объект.ПроцентВыполнения <> вт.ПроцентВыполненияРасчетный
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокСортировки
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ПустойИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.УстановитьПараметр("ОтборПоОбъекту", ЗначениеЗаполнено(Объект));
	Запрос.УстановитьПараметр("Объект", Объект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ПроектОбъект = ВыборкаДетальныеЗаписи.Объект.ПолучитьОбъект();
		
		ПроектОбъект.ПроцентВыполнения = ПланПроектаВызовСервера.ПолучитьПроцентВыполнения(ПроектОбъект.Ссылка).ПроцентВыполнения;
		                                                              
		// Если согласно плану проект полностью выполнен то сразу устанавливаем статус решен. так же как и в форме документа это происходит
		Если ПроектОбъект.ПроцентВыполнения = 100 тогда
			
			ПроектОбъект.ДатаЗакрытия = ТекущаяДатаСеанса();
			ПроектОбъект.Статус = Справочники.СтатусыОбъектов.Решен;
			
		КонецЕсли;
		
		Попытка
			ПроектОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации("ОбновлениеПроцентаВыполненияПлана", УровеньЖурналаРегистрации.Ошибка,,,"не удалось актуализировать процент выполненяи планов в проекте" + Строка(ПроектОбъект) + ". По причине" + ОписаниеОшибки());
		КонецПопытки;
		
		// Мы поменяли у ВЗ процент выполени
		Если ТипЗнч(ВыборкаДетальныеЗаписи.Объект) = Тип("ДокументСсылка.ВнутреннееЗадание") тогда
			 ИзменитьСтатусЭлементаПланаПроекта(ВыборкаДетальныеЗаписи.Объект,ПроектОбъект.Статус, ПроектОбъект.ДатаЗакрытия, ПроектОбъект.ПроцентВыполнения);
		 Иначе
			 ИзменитьСтатусЭлементаПланаПроекта(ВыборкаДетальныеЗаписи.Объект,ПроектОбъект.Статус, ПроектОбъект.ДатаЗавершения, ПроектОбъект.ПроцентВыполнения);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецЕсли
