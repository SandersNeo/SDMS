///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем РедактированиеСтроки; // Признак редактирования поля в строке, для разделения изменений при перемещении строк

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Проект = Параметры.Владелец;
	
	ПанельНавигации.Скопировать(ЭтотОбъект, Параметры);
	
	ПланПроектаСервер.ЗаполнитьПланПроектов(ЭтотОбъект, Проект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПанельНавигацииКлиент.ПриОткрытии(Элементы, Истина);

	ПодключитьОбработчикОжидания("Подключаемый_АвтосохранениеПланаПроекта", 600);	
	
//	Пока статус используется из документа, когда он прикреплен только один,
//	в дальнейшем возможна доработка расчета статуса, поэтому пока методы не удалены
//
//	ПодключитьОбработчикОжидания("ОбновитьСтатусыПланаПроекта", 300);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеЗаписи" Тогда
		ВладелецФормы.ИзмененПланПроекта = Истина;
		Если ТипЗнч(Параметр) = Тип("Число") И Параметр <> 0 Тогда
			ПересчитатьПривязанныеЗаписи(Источник.Порядок, Параметр);
			АктуализироватьДерево();
		КонецЕсли;
	КонецЕсли;
	
	ПанельНавигацииКлиент.ОбработкаОповещения(ЭтотОбъект, Проект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПланВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ПланНазваниеСобытия" 
		ИЛИ Поле.Имя = "ПланПорядок" 
		ИЛИ Поле.Имя = "ПланПроектаДокументы" Тогда
		
		СтандартнаяОбработка = Ложь;	
		ПланПроектаКлиент.НачатьРедактированиеСтроки(ПланПроекта, Элемент.ТекущиеДанные, Проект);

	ИначеЕсли Поле.Имя = "ПланПроектаПредставлениеСтатуса" 
		И Элемент.ТекущиеДанные <> Неопределено 
		И Элемент.ТекущиеДанные.СписокДокументов.Количество() <> 1 Тогда
			
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораСтатуса", ЭтотОбъект, Элемент.ТекущиеДанные);
		ОткрытьФорму("Справочник.СтатусыОбъектов.ФормаВыбора", , , , , , 
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		Элементы.ПланПроектаПроцентВыполнения.ТолькоПросмотр = Элемент.ТекущиеДанные.ЭтоГруппа;
		Элементы.ПланПроектаДатаНачала_План.ТолькоПросмотр = Элемент.ТекущиеДанные.ЭтоГруппа;
		Элементы.ПланПроектаПланируемыйСрок.ТолькоПросмотр = Элемент.ТекущиеДанные.КонтрольнаяТочка ИЛИ Элемент.ТекущиеДанные.ЭтоГруппа;
		Элементы.ПланДатаОкончания_План.ТолькоПросмотр = Элемент.ТекущиеДанные.КонтрольнаяТочка ИЛИ Элемент.ТекущиеДанные.ЭтоГруппа;		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПланДатаНачала_ФактПриИзменении(Элемент)
	
	ПересчитатьРодительскиеЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДатаОкончания_ФактПриИзменении(Элемент)
	
	ПересчитатьРодительскиеЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПланПроектаКлиент.ПланПеретаскивание(ЭтотОбъект, Элемент, СтандартнаяОбработка, Строка);
	ВладелецФормы.ИзмененПланПроекта = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	РазвернутьДеревоПланПроекта();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПланПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Отказ = Истина;
	
	Уровень = Элементы.ПланПроекта.ТекущиеДанные;
	
	Если Уровень = Неопределено Тогда
		Если ПланПроекта.ПолучитьЭлементы().Количество() > 0 Тогда
			Порядок = ПланПроектаКлиент.ПолучитьПоследнийПорядок(ПланПроекта);
		Иначе
			Порядок = 0;
		КонецЕсли;
		Уровень = ПланПроекта;
		
	ИначеЕсли Уровень.КонтрольнаяТочка Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя добавить подчиненные строки для контрольной точки");
		Возврат;
		
	Иначе
		Порядок = Уровень.Порядок + Уровень.ПолучитьЭлементы().Количество();
		РедактированиеСтроки = Истина;
	КонецЕсли;
	
	ДобавитьНовуюСтроку(Уровень, Порядок);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПередУдалением(Элемент, Отказ)
	
	// Удаляем самостоятельно, а не стандартной обработкой.
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ПланПроекта.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("ТекущиеДанные, ПланПроекта", ТекущиеДанные, ПланПроекта);
	
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда	
		ТекстВопроса = "Строка содержит подчиненные строки. Удалить строку?"; 
	Иначе
		ТекстВопроса = "Удалить строку?"; 
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодтвержденияУдаленияПланПроекта", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПриИзменении(Элемент)
	
	Если (НЕ Элемент.ТекущиеДанные.НоваяСтрока И НЕ РедактированиеСтроки) 
		ИЛИ (Элемент.ТекущиеДанные.НоваяСтрока И РедактированиеСтроки) Тогда
		
		ИзмененныеНомера = Новый Соответствие;	
		ПланПроектаКлиент.ПересчитатьПорядок(ПланПроекта.ПолучитьЭлементы(), ИзмененныеНомера);
		
		ПланПроектаКлиент.ОбработатьИзменениеПорядковИВладельцев(ПланПроекта.ПолучитьЭлементы(), ИзмененныеНомера);
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.НоваяСтрока Тогда
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.НазваниеСобытия) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Наименование события заполнено автоматически");
			Элемент.ТекущиеДанные.НазваниеСобытия = "Пустое наименование";
		Иначе
			Элементы.ПланНазваниеСобытия.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если РедактированиеСтроки Тогда
		РедактированиеСтроки = Ложь;
	КонецЕсли;
	
	ВладелецФормы.ИзмененПланПроекта = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПроектаДатаНачала_ПланПриИзменении(Элемент)
	
	РассчитатьДатаОкончания_План();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланДатаОкончания_ПланПриИзменении(Элемент)
	
	РедактированиеСтроки = Истина;
	ТекущиеДанные = Элементы.ПланПроекта.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала_План) Тогда
		Возврат;
	КонецЕсли;
	
	ДлительностьДоСмещения = ТекущиеДанные.ПланируемыйСрок;
	
	ТекущиеДанные.ПланируемыйСрок = ПланПроектаКлиент.РассчитатьПланируемыйСрок(
		ТекущиеДанные.ДатаНачала_План, ТекущиеДанные.ДатаОкончания_План);
		
	Смещение = ТекущиеДанные.ПланируемыйСрок - ДлительностьДоСмещения;
		
	Если Смещение <> 0 Тогда // пересчитать даты в записях, для которых изменяемая запись является предшественником	
		ПересчитатьПривязанныеЗаписи(ТекущиеДанные.Порядок, Смещение);
	КонецЕсли;

	АктуализироватьДерево(ТекущиеДанные.КлючСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПроектаПланируемыйСрокПриИзменении(Элемент)
	
	РассчитатьДатаОкончания_План();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПроектаПредшественникПриИзменении(Элемент)
	
	РедактированиеСтроки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПроектаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ДобавленнаяСтрока = Элемент.ТекущиеДанные;
	Если ДобавленнаяСтрока <> Неопределено И ДобавленнаяСтрока.НоваяСтрока Тогда		
		Если ЗначениеЗаполнено(ДобавленнаяСтрока.НазваниеСобытия) Тогда					
			ДобавленнаяСтрока.НоваяСтрока = Ложь;
			ПланПроектаКлиент.ПересчитатьРодительскиеЗаписи(ДобавленнаяСтрока);
		Иначе
			ПланПроектаКлиент.УдалитьТекущуюСтрокуПланПроекта(ПланПроекта, ДобавленнаяСтрока);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для добавления строки необходимо заполнить наименование");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПланПроектаПроцентВыполненияПриИзменении(Элемент)
	
	ПересчитатьРодительскиеЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПроектаФайлыОткрытиеМножественногоЗначения(Элемент, Идентификатор, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ПланПроекта.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйФайл = ТекущиеДанные.СписокФайлов[Идентификатор].Значение;
	Если НЕ ЗначениеЗаполнено(ВыбранныйФайл) Тогда
		Возврат;
	КонецЕсли;	
	
	Файлы = Новый Массив;
	Файлы.Добавить(ВыбранныйФайл);
	РаботаСФайламиКлиент.НачатьСкачиваниеФайлов(Проект, Файлы, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	Если ПланПроекта.ПолучитьЭлементы().Количество() > 0 Тогда
		ПоследнийПорядок = ПланПроектаКлиент.ПолучитьПоследнийПорядок(ПланПроекта);
	Иначе
		ПоследнийПорядок = 0;
	КонецЕсли;
	
	ДобавитьНовуюСтроку(ПланПроекта, ПоследнийПорядок);	
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоУмолчанию(Команда)
	
	Если ПланПроекта.ПолучитьЭлементы().Количество() = 0 Тогда 
		СоздатьПунктыНаСервере();
		ПланПроектаКлиент.ПересчитатьПорядок(ПланПроекта.ПолучитьЭлементы());
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаСозданиеПунктовПоУмолчанию",ЭтотОбъект);	
		
		ПоказатьВопрос(Оповещение, "Текущий план проекта не пустой. Вы действительно хотите добавить этапы выполнения плана по умолчанию?",
		РежимДиалогаВопрос.ДаНетОтмена,
		, 
		КодВозвратаДиалога.Нет);    
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Если ВладелецФормы.ИзмененПланПроекта Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект);						
		ПоказатьВопрос(Оповещение, "План проекта был изменен. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ЗаполнитьПланПроектовНаСервере();
		ВладелецФормы.ИзмененПланПроекта = Ложь;
		РазвернутьДеревоПланПроекта();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельНавигацииНажатие(Команда)
	
	ПанельНавигацииКлиент.Нажатие(ЭтотОбъект, Команда, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ПовыситьУровеньЗаписи(Команда)
	
	ИзменяемаяСтрока = Элементы.ПланПроекта.ТекущиеДанные;
	
	Если ИзменяемаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ИзменяемаяСтрока.ПолучитьРодителя(); 	
	Если Родитель <> Неопределено Тогда
		ЭлементыПлана = Родитель.ПолучитьЭлементы();
	Иначе
		ЭлементыПлана = ПланПроекта.ПолучитьЭлементы();
	КонецЕсли;	
	
	ПоследнийИндекс = ЭлементыПлана.Количество() - 1;
	НачальныйИндекс = ЭлементыПлана.Индекс(ИзменяемаяСтрока) + 1;

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущиеДанные");
	ДопПараметры.Вставить("СтрокаПриемник", ИзменяемаяСтрока);
	ДопПараметры.Вставить("ПланПроекта", ПланПроекта);
	
	Пока ЭлементыПлана.Количество() > НачальныйИндекс Цикл
		Если ИзменяемаяСтрока.ВладелецСобытия = ЭлементыПлана[НачальныйИндекс].ВладелецСобытия Тогда
			ЭлементыПлана[НачальныйИндекс].ВладелецСобытия = ИзменяемаяСтрока.КлючСобытия;
			ДопПараметры.ТекущиеДанные = ЭлементыПлана[НачальныйИндекс];
			ПланПроектаКлиент.ОбработатьВопросПеремещения("ПовыситьУровень", ДопПараметры);
		КонецЕсли;	
	КонецЦикла;

	ПланПроектаКлиент.ПересчитатьРодительскиеЗаписи(ИзменяемаяСтрока, Ложь);
	
	ВладелецФормы.ИзмененПланПроекта = Истина;
			
КонецПроцедуры

&НаКлиенте
Процедура ПонизитьУровеньЗаписи(Команда)
	
	ИзменяемаяСтрока = Элементы.ПланПроекта.ТекущиеДанные;
	
	Если ИзменяемаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ИзменяемаяСтрока.ПолучитьРодителя();
	
	Если Родитель <> Неопределено Тогда
		ЭлементыПлана = Родитель.ПолучитьЭлементы();
		ПредыдущийВладелец = Родитель.КлючСобытия;
	Иначе
		ЭлементыПлана = ПланПроекта.ПолучитьЭлементы();
		ПредыдущийВладелец = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КонецЕсли;
		
	ИндексИзменяемого = ЭлементыПлана.Индекс(ИзменяемаяСтрока);
	Если ИндексИзменяемого > 0 Тогда
		НовыйВладелец = ЭлементыПлана.Получить(ИндексИзменяемого - 1);
		ИзменяемаяСтрока.ВладелецСобытия = НовыйВладелец.КлючСобытия;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ТекущиеДанные", ИзменяемаяСтрока);
		ДопПараметры.Вставить("СтрокаПриемник", НовыйВладелец);
		ДопПараметры.Вставить("ПланПроекта", ПланПроекта);
		
		ПланПроектаКлиент.ОбработатьВопросПеремещения("ПовыситьУровень", ДопПараметры);
		ПланПроектаКлиент.ПересчитатьРодительскиеЗаписи(НовыйВладелец, Ложь);
	Иначе
		ТекстСообщения = "Нельзя понизить уровень записи, если перед ней нет записей того же уровня";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	ВладелецФормы.ИзмененПланПроекта = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьУровеньГруппировки(Команда)
	
	ПланПроектаКлиент.РазвернутьУровеньГруппировки(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСтроку(Команда)
	
	ПланПроектаКлиент.НачатьРедактированиеСтроки(ПланПроекта, Элементы.ПланПроекта.ТекущиеДанные, Проект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрольнуюТочку(Команда)
	
	ТекущиеДанные = Элементы.ПланПроекта.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.КонтрольнаяТочка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Контрольная точка не может быть родителем");
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.КонтрольнаяТочка = Истина;
	ТекущиеДанные.ПланируемыйСрок = 0;
	ТекущиеДанные.ДатаОкончания_План = ТекущиеДанные.ДатаНачала_План;
	ТекущиеДанные.ДатаОкончания_Факт = ТекущиеДанные.ДатаНачала_Факт;
	
	ВладелецФормы.ИзмененПланПроекта = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)

	ЗаписатьПланПроекта();
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура АктуализироватьДерево(КлючСобытия = Неопределено)
	
	РазвернутьДеревоПланПроекта();
	
	Идентификатор = Неопределено;
	Для Каждого Строка Из ПланПроекта.ПолучитьЭлементы() Цикл
		ПланПроектаКлиент.ПересчитатьРодительскиеЗаписи(Строка, Ложь, Истина, КлючСобытия, Идентификатор);		
	КонецЦикла;
	
	Элементы.ПланПроекта.ТекущаяСтрока = Идентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюСтроку(Уровень, Порядок)
	
	НоваяСтрока = Уровень.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Порядок = Порядок + 1;
	НоваяСтрока.ПорядокДо = НоваяСтрока.Порядок;
	НоваяСтрока.НоваяСтрока = Истина;
	НоваяСтрока.КлючСобытия = Новый УникальныйИдентификатор;
	НоваяСтрока.ПроцентВыполнения = 0;
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Статус = ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Новый");
	НоваяСтрока.ПредставлениеСтатуса = "Новый";
	
	Если ТипЗнч(Уровень) = Тип("ДанныеФормыДерево") Тогда
		НоваяСтрока.ВладелецСобытия = Неопределено;
		НоваяСтрока.СтрокаПервогоУровня = Истина;
	Иначе
		НоваяСтрока.ВладелецСобытия = Уровень.КлючСобытия;
		НоваяСтрока.СтрокаПервогоУровня = Ложь;
	КонецЕсли;
	
	Элементы.ПланПроекта.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.ПланПроекта.ТекущийЭлемент = Элементы.ПланНазваниеСобытия;
	Элементы.ПланНазваниеСобытия.ТолькоПросмотр = Ложь;
	Элементы.ПланПроекта.ИзменитьСтроку();	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПланПроекта()
	
	Успешно = ЗаписатьПланПроектаНаСервере();
	
	Если Успешно Тогда
		ВладелецФормы.ИзмененПланПроекта = Ложь;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать план проекта");
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ЗаписатьПланПроектаНаСервере()
	
	Возврат ПланПроектаСервер.ЗаписатьПланПроекта(ДанныеФормыВЗначение(ПланПроекта, Тип("ДеревоЗначений")), Проект);
			
КонецФункции

&НаСервере
Процедура ЗаполнитьПланПроектовНаСервере()
	
	ПланПроектаСервер.ЗаполнитьПланПроектов(ЭтотОбъект, Проект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицаСтатусов(Строки, Таблица) 
	
	Для Каждого Строка Из Строки Цикл      
		
		Если ЗначениеЗаполнено(Строка.Документ) Тогда
        	НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.КлючСобытия = Строка.КлючСобытия;
			НоваяСтрока.Статус = Строка.Статус;  
			НоваяСтрока.Идентификатор = Строка.ПолучитьИдентификатор();
		КонецЕсли;                   
		
		Подчиненные = Строка.ПолучитьЭлементы();
		
		Если Подчиненные.Количество() > 0 Тогда 
			ЗаполнитьТаблицаСтатусов(Подчиненные, Таблица);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыПланаПроекта() Экспорт
	
	ОбновитьСтатусыПланаПроектаСервер();		
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусыПланаПроектаСервер()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("КлючСобытия", Новый ОписаниеТипов("УникальныйИдентификатор"));
	Таблица.Колонки.Добавить("Статус", Новый ОписаниеТипов("СправочникСсылка.СтатусыОбъектов"));
	Таблица.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число"));
	
	ЗаполнитьТаблицаСтатусов(ПланПроекта.ПолучитьЭлементы(), Таблица);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.КлючСобытия КАК КлючСобытия,
	|	Таблица.Статус КАК Статус,
	|	Таблица.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Идентификатор КАК Идентификатор,
	|	ПланыВыполненияПроектов.Статус КАК Статус,
	|	ПланыВыполненияПроектов.ПроцентВыполнения КАК ПроцентВыполнения,
	|	ПланыВыполненияПроектов.ДатаОкончания_Факт КАК ДатаОкончания_Факт
	|ИЗ
	|	РегистрСведений.ПланыВыполненияПроектов КАК ПланыВыполненияПроектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Таблица КАК Таблица
	|		ПО (ПланыВыполненияПроектов.Объект = &Объект)
	|			И ПланыВыполненияПроектов.КлючСобытия = Таблица.КлючСобытия
	|ГДЕ
	|	ПланыВыполненияПроектов.Статус <> Таблица.Статус";
	
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.УстановитьПараметр("Объект", Проект); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		СтрокаДерева = ПланПроекта.НайтиПоИдентификатору(Выборка.Идентификатор);
		
		Если СтрокаДерева <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДерева, Выборка);
			СтрокаДерева.ПредставлениеСтатуса = Строка(СтрокаДерева.Статус);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросПеремещения(Результат, ДополнительныеПараметры) Экспорт
	
	ПеремещеннаяСтрока = ПланПроектаКлиент.ОбработатьВопросПеремещения(Результат, ДополнительныеПараметры);
	Если ПеремещеннаяСтрока <> Неопределено Тогда
		Элементы.ПланПроекта.ТекущаяСтрока = ПеремещеннаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьДаты(Знач ДатаНачала_План, Знач ДатаОкончания_План, Знач ПланируемыйСрок, Знач Порядок)
	
	Дерево = ДанныеФормыВЗначение(ПланПроекта, Тип("ДеревоЗначений"));
	
	ПланПроектаВызовСервера.РассчитатьДатаОкончания_План(Дерево, ДатаНачала_План,
		ДатаОкончания_План, ПланируемыйСрок, Порядок);
	
	ЗначениеВДанныеФормы(Дерево, ПланПроекта);
		
КонецПроцедуры

&НаСервере
Процедура ПересчитатьПривязанныеЗаписи(Порядок, Смещение)
	
	Дерево = ДанныеФормыВЗначение(ПланПроекта, Тип("ДеревоЗначений"));
	
	ПланПроектаВызовСервера.ПересчитатьЗаписиСПредшественником(Дерево, Порядок, Смещение, Порядок);
	
	ЗначениеВДанныеФормы(Дерево, ПланПроекта);
		
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРодительскиеЗаписи()
	
	РедактированиеСтроки = Истина;
	ТекущиеДанные = Элементы.ПланПроекта.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	ПланПроектаКлиент.ПересчитатьРодительскиеЗаписи(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтосохранениеПланаПроекта()
	
	Если ВладелецФормы.ИзмененПланПроекта Тогда
		ЗаписатьПланПроекта();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтатуса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Статус = Результат;
	ДополнительныеПараметры.ПредставлениеСтатуса = Строка(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьПланПроекта();
	КонецЕсли;
	
	Если Результат <> КодВозвратаДиалога.Отмена Тогда
		ЗаполнитьПланПроектовНаСервере();
		ВладелецФормы.ИзмененПланПроекта = Ложь;
		РазвернутьДеревоПланПроекта();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ПослеПодтвержденияУдаленияПланПроекта(Результат, ДопПараметры) Экспорт
		
	Если Результат = КодВозвратаДиалога.Да Тогда 		
		Родитель = ДопПараметры.ТекущиеДанные.ПолучитьРодителя();
		ПланПроектаКлиент.УдалитьТекущуюСтрокуПланПроекта(ПланПроекта, ДопПараметры.ТекущиеДанные);
		ПланПроектаКлиент.ПересчитатьРодительскиеЗаписи(Родитель, Ложь);
		
		ВладелецФормы.ИзмененПланПроекта = Истина;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура РазвернутьДеревоПланПроекта()
	
	Для Каждого Строка Из ПланПроекта.ПолучитьЭлементы() Цикл
		Элементы.ПланПроекта.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПунктыНаСервере()
	
	ПланПроектаСервер.СоздатьПункты(ПланПроекта, Проект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаСозданиеПунктовПоУмолчанию(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СоздатьПунктыНаСервере();
		ПланПроектаКлиент.ПересчитатьПорядок(ПланПроекта.ПолучитьЭлементы());		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДатаОкончания_План()

	РедактированиеСтроки = Истина;
	ТекущиеДанные = Элементы.ПланПроекта.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала_План) Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьДаты(ТекущиеДанные.ДатаНачала_План, ТекущиеДанные.ДатаОкончания_План, 
		ТекущиеДанные.ПланируемыйСрок, ТекущиеДанные.Порядок);
		
	АктуализироватьДерево(ТекущиеДанные.КлючСобытия);
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

#Если Клиент Тогда
	РедактированиеСтроки = Ложь;
#КонецЕсли

#КонецОбласти
