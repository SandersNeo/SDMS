///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает признак есть ли трудозатраты у объекта
//
// Параметры:
//  Ссылка	 - ОпределяемыйТип.ОбъектТрудозатрат - Ссылка на документ
// 
// Возвращаемое значение:
//   Булево - Истина, если есть трудозатраты, иначе ложь 
//
Функция ЕстьТрудозатраты(Знач Ссылка) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Трудозатраты.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.Трудозатраты КАК Трудозатраты
	|ГДЕ
	|	Трудозатраты.Объект = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();	
	
	Возврат НЕ РезультатЗапроса.Пустой();	

КонецФункции

// Для руководителя группы возвращает список сотрудников группы, которые могут вносить трудозатраты
// 
// Возвращаемое значение:
//   - Массив
//
Функция ПолучитьПользователейТрудозатрат() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛичныеДелаСрезПоследних.Сотрудник КАК Пользователь
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(&ТекущаяДата, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО (Филиалы.Ссылка = (ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы)))
	|			И (Филиалы.Руководитель = &Руководитель)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ЛичныеДелаСрезПоследних.Сотрудник = Пользователи.Ссылка
	|			И (НЕ Пользователи.Недействителен)";

	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Руководитель", ПараметрыСеанса.ТекущийПользователь);
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
КонецФункции

// Формирует структуру с данными по трудозатратам для объекта для вывода в отчет.
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - ссылка на объект, трудозатраты по которому нужно
//           получить.
//
// Возвращаемое значение:
//  Структура.
//
Функция СформироватьДанныеДляОтчета(Знач Ссылка) Экспорт
	
	Результат = Новый Структура("Пустой, Заголовок, ТабличныйДокумент", Истина, "", Неопределено);
	ПредставлениеОбъекта = Строка(Ссылка);
	Трудозатраты = ТрудозатратыПоОбъекту(Ссылка);
	ТаблицаТрудозатрат = Трудозатраты.ТаблицаТрудозатрат;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	СуммаТрудозатрат = 0;
	
	Макет = РегистрыСведений.Трудозатраты.ПолучитьМакет("Трудозатраты");
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьМакета.Параметры.ПредставлениеОбъекта = ПредставлениеОбъекта;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
	
	Для Каждого СтрокаТаблицы Из ТаблицаТрудозатрат Цикл
		ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		СуммаТрудозатрат = СуммаТрудозатрат + СтрокаТаблицы.СуммаТрудозатрат;
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьМакета.Параметры.СуммаТрудозатрат = СуммаТрудозатрат;
	ТабличныйДокумент.Вывести(ОбластьМакета);	
	
	Результат.Пустой = (ТаблицаТрудозатрат.Количество() = 0);
	Результат.Заголовок = "Трудозатраты: " + ПредставлениеОбъекта;
	Результат.ТабличныйДокумент = ТабличныйДокумент;
	
	Возврат Результат;
	
КонецФункции

// Формирует структуру с данными по трудозатратам для объекта для использования
// на форме
//
// Параметры:
//  Ссылка                - ЛюбаяСсылка - ссылка на объект, трудозатраты по которому нужно
//                          получить.
//	ТолькоКоличествоЧасов - Булево - получить только количество часов, без детализации.
// Возвращаемое значение:
//  Структура.
//
Функция СформироватьДанныеДляФормы(Знач Ссылка, Знач ТолькоКоличествоЧасов = Ложь, Знач ВидТрудозатрат = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КоличествоЧасов", 0);
	Результат.Вставить("ОбщиеТрудозатратыПоОбъекту", 0);
	Результат.Вставить("ТабличныйДокумент", Неопределено);
	Результат.Вставить("ТрудозатратыФактическиеВсе", 0);
	Результат.Вставить("ОбщаяСтоимостьТрудозатрат", 0);
		
	СтруктураТрудозатраты = ТрудозатратыПоОбъекту(Ссылка); 
	
	Если СтруктураТрудозатраты.Свойство("КоличествоТрудозатратПодчиненные") Тогда
		Результат.ОбщиеТрудозатратыПоОбъекту = СтруктураТрудозатраты.КоличествоТрудозатратПодчиненные;
	КонецЕсли;     
	
	Если СтруктураТрудозатраты.Свойство("СтоимостьТрудозатрат") Тогда
		Результат.ОбщаяСтоимостьТрудозатрат = СтруктураТрудозатраты.СтоимостьТрудозатрат;
	КонецЕсли;
	
	ТипОбъекта = ТипЗнч(Ссылка);
	Результат.КоличествоЧасов = СтруктураТрудозатраты.ТрудозатратыОбщие;
	Результат.ТрудозатратыФактическиеВсе = СтруктураТрудозатраты.ТрудозатратыФактическиеВсе;
	
	Результат.Вставить("ТрудозатратыПоКомандам", СтруктураТрудозатраты.ТрудозатратыПоКомандам);
	Результат.Вставить("ЗначенияФильтра", СтруктураТрудозатраты.ЗначенияФильтра);
	
	Если ТипОбъекта = Тип("ДокументСсылка.ВнутреннееЗадание") 
		ИЛИ ТипОбъекта = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
		Результат.КоличествоЧасов = Результат.КоличествоЧасов + Результат.ОбщиеТрудозатратыПоОбъекту;
	КонецЕсли;
	
	Если НЕ ТолькоКоличествоЧасов Тогда   
		СортироватьСписокПоВозрастанию = УчетТрудозатратВызовСервера.НастройкаНаправленияСортировкиСпискаТрудозатрат();
		
		ТаблицаТрудозатрат = ПолучитьТрудозатратыПоОбъекту(Ссылка);
		
		Макет = РегистрыСведений.Трудозатраты.ПолучитьМакет("ТаблицаТрудозатрат");
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
		
		РедактированиеПользователей = ПолучитьПользователейТрудозатрат();
		Администратор = РольДоступна("Администратор");
		
		НачалоПериодаРедактирования = КонецДня(Константы.ДатаЗапретаИзмененияДанных.Получить()) + 1;
		КонецПериодаРедактирования = КонецДня(ТекущаяДатаСеанса());
		
		РедактированиеПользователей.Добавить(Пользователь);
		
		КомандаРедактирования = ОбщегоНазначенияКлиентСервер.ИмяКомандыРедактированияТрудозатрат();
		КомандаУдаления = ОбщегоНазначенияКлиентСервер.ИмяКомандыУдаленияТрудозатрат();
		
		ШаблоныHTML = ПолучитьHTMLШаблоны();
		КорневойURL = Константы.КорневойURL.Получить();
		НаборСтрокHTML = "";  
		СтрокаТрудозатрат = "";   
		Порядок = ?(СортироватьСписокПоВозрастанию, "", "class = 'desc'");
		СписокВариантов = Новый Массив;
			
		Для Каждого Фильтр Из Результат.ЗначенияФильтра Цикл 
			ЭтоСтрока = ТипЗнч(Фильтр.Значение) = Тип("Строка");
			Шрифт = ?(ЭтоСтрока, "class = 'option-bold'", ""); 
			Выбран = ?(Фильтр.Значение = ВидТрудозатрат, "selected", "");
			ЗначениеФильтра = ПолучитьЗначениеФильтра(Фильтр.Значение);
			Параметры = СтрШаблон("%1 %2 data-filter = '%3'", Шрифт, Выбран, ЗначениеФильтра);
			
			Значение = "#index_" + Результат.ЗначенияФильтра.Индекс(Фильтр);  
			Представление = ?(ЭтоСтрока, "", "&nbsp") + Фильтр.Представление;
			ЭлементСписка = СтрШаблон(ШаблоныHTML.СписокВариантов, Значение, Параметры, Представление);
			СписокВариантов.Добавить(ЭлементСписка);                    		
		КонецЦикла;
		
		Если ТаблицаТрудозатрат.Количество() > 0 Тогда
			Результат.КоличествоЧасов = ТаблицаТрудозатрат.Итог("СуммаТрудозатрат");
			
			Для Каждого СтрокаТаблицы Из ТаблицаТрудозатрат Цикл
				
				ЕстьПользователь = РедактированиеПользователей.Найти(СтрокаТаблицы.Пользователь);
				Скрывать = "hidden"; 
				Пользователь = СтрокаТаблицы.Пользователь.УникальныйИдентификатор();
					
				Если (ЕстьПользователь <> Неопределено ИЛИ Администратор) И СтрокаТаблицы.Дата >= НачалоПериодаРедактирования
					И СтрокаТаблицы.Дата <= КонецПериодаРедактирования Тогда
					Скрывать = "";
				КонецЕсли;
				
				СтрокаКомментарий = ЭкранироватьУгловыеСкобки(СтрокаТаблицы.Комментарий);
				ЧислоСтрокой = Формат(СтрокаТаблицы.СуммаТрудозатрат, "ЧЦ=15; ЧДЦ=2; ЧРД=.");
				
				СтрокаВидДеятельности = СтрШаблон("%1 - %2", СтрокаТаблицы.ПредставлениеВидаДеятельности, ЧислоСтрокой);
					
				Фильтры = СтрШаблон("%1 %2", Пользователь, СтрокаТаблицы.Филиал.УникальныйИдентификатор());
				СлужебныеПоля = СтрШаблон(ШаблоныHTML.СлужебноеПоле, "filter_field", Фильтры);      
				Таймстемп = Формат(СтрокаТаблицы.Дата - Дата(1970, 1, 1, 1, 0, 0), "ЧГ=0");  				
				СлужебныеПоля = СлужебныеПоля + Символы.ПС + СтрШаблон(ШаблоныHTML.СлужебноеПоле, "sort_field", Таймстемп);
				СлужебныеПоля = СлужебныеПоля + Символы.ПС + СтрШаблон(ШаблоныHTML.СлужебноеПоле, "time_field", ЧислоСтрокой);
					
				СтрокаТрудозатраты = СтрШаблон(ШаблоныHTML.СтрокаИнформация, 
					Формат(СтрокаТаблицы.Дата, "ДФ='dd.MM.yyyy ""в"" HH:mm'"),
					СтрокаТаблицы.ИмяПользователя,  
					ОбщегоНазначенияКлиентСервер.ПолучитьФамилиюИнициалыПользователя(СтрокаТаблицы.ИмяПользователя),
					Пользователь,
					СтрокаВидДеятельности, 
					СтрокаКомментарий,
					XMLСтрока(СтрокаТаблицы.ДокументСсылка),
					Скрывать,
					КорневойURL,
					СлужебныеПоля);
				
				НаборСтрокHTML = НаборСтрокHTML + СтрокаТрудозатраты;
			КонецЦикла;
			
			СтрокаТрудозатрат = СтрШаблон("<span class = 'summary'>Итого: %1 ч.</span>", Строка(Результат.КоличествоЧасов));	
				
			ТекстТаблицы = СтрШаблон(ШаблоныHTML.ТаблицаТрудозатрат, НаборСтрокHTML);
		Иначе
			ТекстТаблицы = ШаблоныHTML.Пустой;
			Результат.КоличествоЧасов = 0;
		КонецЕсли;  
		
		ШапкаТрудозатрат = СтрШаблон(ШаблоныHTML.ШапкаТрудозатрат, Порядок,
			СтрСоединить(СписокВариантов, Символы.ПС), СтрокаТрудозатрат);
		
		СортироватьПоВозрастанию = УчетТрудозатратВызовСервера.НастройкаНаправленияСортировкиСпискаТрудозатрат();
		Сортировка = ?(СортироватьПоВозрастанию, "true", "false");  		
		Фильтр = ПолучитьЗначениеФильтра(ВидТрудозатрат);   
		ВидимостьМножественногоДобавления = ?(ТипОбъекта = Тип("ДокументСсылка.ВнутренниеТрудозатраты"), "", "none");
		
		ТекстHTML = СтрШаблон(ШаблоныHTML.Общий, КорневойURL, ВидимостьМножественногоДобавления, 
			ШапкаТрудозатрат + ТекстТаблицы, Фильтр, Сортировка);
			
		Результат.ТабличныйДокумент = ТекстHTML;       
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьВСписок(Список, Знач Ключ, Знач Представление, Знач Шрифт)
	
	Представление = Новый ФорматированнаяСтрока(Представление, Шрифт, WebЦвета.ТемноЗеленый);
	Список.Добавить(Ключ, Представление);
	
КонецПроцедуры

// Добавляет отбор в переданный построитель запроса
//
// Параметры:
//  ПостроительЗапроса	 - ПостроительЗапроса - Построитель запроса
//  ИмяПоля				 - Строка - Имя поля отбора
//  Значение			 - ФиксированныйМассив, СправочникСсылка.Филиалы,
//						   	СправочникСсылка.Пользователи - Значения отбора 
//  ВидСравнения		 - ВидСравнения - Вид сравнения 
//
Процедура ДобавитьОтбор(ПостроительЗапроса, Знач ИмяПоля, Знач Значение, Знач ВидСравнения)
	
	ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить(ИмяПоля);
	ЭлементОтбора.ВидСравнения = ВидСравнения;
	ЭлементОтбора.Значение = Значение;
	ЭлементОтбора.Использование = Истина;
	
КонецПроцедуры

Функция ПолучитьТрудозатратыПоОбъекту(Знач Ссылка)
	
	ЗначенияФильтра = УчетТрудозатратКлиентСервер.ЗначенияФильтраТрудозатрат();
		
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст =
	"ВЫБРАТЬ
	|	Трудозатраты.Период КАК Дата,
	|	Трудозатраты.ВидДеятельности КАК ВидДеятельности,
	|	ПРЕДСТАВЛЕНИЕ(Трудозатраты.ВидДеятельности) КАК ПредставлениеВидаДеятельности,
	|	Трудозатраты.Затрата КАК СуммаТрудозатрат,
	|	Трудозатраты.Пользователь КАК Пользователь,
	|	ПРЕДСТАВЛЕНИЕ(Трудозатраты.Пользователь) КАК ИмяПользователя,
	|	Трудозатраты.Комментарий КАК Комментарий,
	|	Трудозатраты.Затрата КАК Затрата,
	|	ДокументТрудозатрат.Филиал КАК Филиал,
	|	ДокументТрудозатрат.Ссылка КАК ДокументСсылка
	|ИЗ
	|	РегистрСведений.Трудозатраты КАК Трудозатраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Трудозатраты КАК ДокументТрудозатрат
	|		ПО Трудозатраты.Регистратор = ДокументТрудозатрат.Ссылка
	|ГДЕ
	|	Трудозатраты.Объект = &Ссылка
	|{ГДЕ
	|	Трудозатраты.Пользователь КАК Пользователь,
	|	ДокументТрудозатрат.Филиал КАК Филиал}
	|{УПОРЯДОЧИТЬ ПО
	|	Дата}";
	
	ПостроительЗапроса.Параметры.Вставить("Ссылка", Ссылка);
	ПостроительЗапроса.Выполнить();
	РезультатЗапроса = ПостроительЗапроса.Результат;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаТрудозатрат = РезультатЗапроса.Выгрузить();
	Иначе
		ТаблицаТрудозатрат = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Возврат ТаблицаТрудозатрат;
	
КонецФункции

Функция ПолучитьHTMLШаблоны()
	
	ШаблоныHTML = Новый Структура;
	ТекстHTML = "
	|<html>
	|	<head>
	|		<meta http-equiv='Content-Type' content='text/html; charset=utf-8'/> 
	|		<link rel='stylesheet' href='%1/assets/css/styles.css?v3' charset='utf-8'>
	|		<style type='text/css'>
	|			
	|			main {
	|				max-height: calc(100%% - 46px);
	|				overflow: auto;
	|				border: 1px solid var(--hover-color);
	|				border-radius: 8px;
	|			}
	|			table {
	|				width:100%%;
	|				border-collapse: separate;
	|				border-spacing: 0;
	|				}
	|			a {	
	|				text-decoration: none;
	|				} 
	|           .autor>a {
	|				color: var(--href-color);
	|				}
	|			thead {
	|				height:47px;
	|				color: #8C8C8C;
	|				background-color: var(--main-color);
	|				font-weight: 700;
	|				position: sticky;
	|				top: 0;
	|				}
	|			.trow {
	|				height:37px;
	|				font-weight: 400;
	|				}
	|			.trow > td {
	|				border-top: 1px solid var(--hover-color);
	|			}							
	|			.date{			
	|				padding: 5px 5px 5px 5px;
	|				width: 15%%
	|				}
	|			.autor,.activity {			
	|				padding: 5px 5px 5px 5px;
	|				width: 20%%
	|				}
	|			.comment {			
	|				padding: 5px 5px 5px 20px;
	|				width: 38%%;
	|				user-select: text;
	|				}
	|			.href {
	|				text-align:center;
	|				}	
	|			#select {
	|				width: 15%%;
	|				margin-left: 10px;
	|				height: 30px;
	|				font-size: inherit;
	|				} 
	|			option,.summary {
	|				color: #30B25D
	|				} 
	|			.option-bold {
	|				font-weight: 700;
	|				font-style: italic;
	|				}   
	|			.no_work{
	|				font-family:Tahoma, Arial, sans-serif;font-size:20pt;font-weight: normal;
	|				padding-top:20px;
	|				padding-left:20px;
	|				border-bottom:2px solid var(--hover-color);
	|				width:70%%;
	|				}
	|			#multi-add-button{
	|				display: %2;
	|				}
	|		</style>
	|	</head>
	|<body>
	|	<div style='height: calc(100%% - 2px); padding-left: 1px; padding-top: 2px'>
	|		%3
	|	</div>
	|<script>
	|	document.getElementById('sort-button').addEventListener('click', function () {
	|		this.classList.toggle('desc')
	|		let mainEl = document.getElementById('main')
	|		mainEl.classList.toggle('desc-sorting')
	|		asc = !document.querySelector('#sort-button').classList.contains('desc') 
	|	    sort(asc); 
  	|	})
	|   
	|	function filter(input) {
	|     let all_time = 0;
	|	  rows = document.querySelectorAll('tbody tr')
	|     array = input.split(' ');
	|
	|	  rows.forEach(row => { 
	|       td_time = row.querySelector('.time_field');
	|		
	|		if (input == '') 
	|			{
	|				row.style.display = ''; 
	|				if (td_time) 
	|				{all_time = all_time + parseFloat(td_time.textContent || td_time.innerText)}
	|			}
	|		else {
	|			td = row.querySelector('.filter_field');
	|			if (td) 
	|			{   
	|               a = 0;
	|			    txtValue = td.textContent || td.innerText; 
	|
	|         		for (text of array)
	|				{
	|				  if (txtValue.indexOf(text) > -1) {
	|					a++; 
	|                   break;
	|				  } 
	|				} 
	|
	|			  row.style.display = a > 0 ? '' : 'none'; 
	|			  if (td_time) 
	|		  	  {all_time = all_time + parseFloat(a > 0 ? td_time.textContent || td_time.innerText : '0')};
	|           }
	|		}
	|	  }) 
	|     let formatted = all_time.toFixed(2)   
	|	  let parts = formatted.split('.') 
	|
	|	  if (parts.length > 1 && parts[1] === '00') 
	|		{formatted = parts[0]}
	|		  
	|  	  document.querySelector('.summary').textContent = `Итого: ${formatted} ч.`;
	|
	|	}    
	|	function sort(asc) 
	|	{
	|		table = document.getElementsByTagName('table')[0];
	|		// Первый элемент - это заголовок таблицы, его убираю 
	|		Rows = Array.from(table.rows).slice(1);
	|		                                          
	|		compare_asc = (rowA, rowB) => Number(rowA.querySelector('.sort_field').innerHTML) > Number(rowB.querySelector('.sort_field').innerHTML) ? 1 : -1;
	|		compare_desc = (rowA, rowB) => Number(rowA.querySelector('.sort_field').innerHTML) < Number(rowB.querySelector('.sort_field').innerHTML) ? 1 : -1;
	|		
	|		sortedRows = Rows.sort(asc ? compare_asc : compare_desc);
	|		table.tBodies[0].append(...sortedRows);
	|	}
	|      
	| 	select.addEventListener('change', function() {
	| 		filter(this[this.selectedIndex].getAttribute('data-filter'));   
	|		let elem = document.getElementById('a_select');
	|		elem.href = this.options[this.selectedIndex].value;
	|		elem.click();
	| 	});
	| 
	|   filter('%4');
	|   sort(%5);
	|</script>
	|</body>  
	|</html>";
	ШаблоныHTML.Вставить("Общий", ТекстHTML);
	
	ТекстHTML = 
	"<div class='no_work'>
	|	<span> Нет записей по трудозатратам</span>
	|</div>";
	
	ШаблоныHTML.Вставить("Пустой", ТекстHTML); 
	
	ТекстHTML = 
	"<nav>
	|	<label><a href='#new' class='icon add-icon'> </a> <a href='#new'> <span>Добавить </span></a> </label>
	|	<button id='multi-add-button' type='button' title='Множественное добавление' > <a href='#multi_new' class='icon multi-add-icon'> </a> </button>
	|	<button type='button' title='Обновить'> <a href='#refresh' class='icon refresh-icon'> </a></button>
	|	<button id='sort-button' type='button' title='Упорядочить' %1><a id='a_sort' href='#sort' class='icon sort-icon'></a> </button> 
	|	<button type='button' title='Открыть отчет о фактических трудозатратах'><a href='#list' class='icon list-icon'></a> </button> 
	|	<span style = 'margin-left:30px'> Трудозатраты</span> 
	|	<a id='a_select' href = '' hidden > </a> 
	|	<select id='select'> 
	|	%2
	|	</select> 
	|	&nbsp;
	|	&nbsp;
	|	%3 
	|</nav>";	
	
	ШаблоныHTML.Вставить("ШапкаТрудозатрат", ТекстHTML);
	
	ТекстHTML = 
	"<main id='main'>
	|	<table>
	|		<thead>
	|			<tr>
	|				<td class='date'>Добавлена</td>
	|				<td class='autor'>Автор</td>
	|				<td class='activity'>Деятельность</td>
	|				<td class='comment'>Комментарий</td>
	|				<td class='button'>&nbsp;</td>
	|				<td class='button'>&nbsp;</td>
	|			</tr>
	|		</thead>
	|		<tbody>
	|			%1
	|		</tbody>
	|	</table>
	|</main>";	
	
	ШаблоныHTML.Вставить("ТаблицаТрудозатрат", ТекстHTML); 
	
	ТекстHTML = 
	"<option value='%1' %2>%3</option>";
			
	ШаблоныHTML.Вставить("СписокВариантов", ТекстHTML); 

	ТекстHTML = 
	"<tr class='trow'>
	|	<td class='date'>%1</td>
	|	<td class='autor'><a title='%2' href='sdms_user_%4'>%3</a></td>
	|	<td class='activity'>%5</td>
	|	<td class='comment'>%6</td>
	|	<td class='button'>
	|		<div class='href'>
	|			<a href='#edit-%7' %8>
	|				<img src='%9/assets/img/pencil.svg'/>
	|			</a>
	|		</div>
	|	</td>
	|	<td class='button'>
	|		<div class='href'>
	|			<a href='#delete-%7' %8>
	|				<img src='%9/assets/img/trash.svg'/>
	|			</a>
	|		</div>
	|	</td>    
	|	%10
	|</tr>";	
		
	ШаблоныHTML.Вставить("СтрокаИнформация", ТекстHTML);
	
	ТекстHTML = 
	"<td style='display: none' class='%1'>%2</td>";
			
	ШаблоныHTML.Вставить("СлужебноеПоле", ТекстHTML); 

	Возврат ШаблоныHTML;
	
КонецФункции

Функция ПолучитьЗначениеФильтра(Фильтр) 
	
	ЗначениеФильтра = "";
	
	Если Фильтр = "Моя команда" Тогда 
		ЗначениеФильтра = УчетТрудозатратВызовСервера.ПолучитьФильтрИзСвязанныхФилиалов(); 
	ИначеЕсли ЗначениеЗаполнено(Фильтр) И ТипЗнч(Фильтр) <> Тип("Строка") Тогда 
		ЗначениеФильтра = Строка(Фильтр.УникальныйИдентификатор());
	КонецЕсли;   
	
	Возврат ЗначениеФильтра;
	
КонецФункции    		

// Формирует список фильтра для вкладки трудозатрат
//
// Параметры:
//  Выборка	 - ВыборкаИзРезультатаЗапроса - Выборка с результатом получения сотрудников 
//  и групп, вносивших трудозатраты
// 
// Возвращаемое значение:
//   Список значений 
//
Функция СформироватьЗначенияФильтра(Знач Выборка)
	
	ЗначенияФильтра = Новый СписокЗначений;
	ВидыТрудозатрат = УчетТрудозатратКлиентСервер.ЗначенияФильтраТрудозатрат();
	Шрифт = Новый Шрифт(, , Истина, Истина);
	
	Для Каждого ВидТрудозатраты ИЗ ВидыТрудозатрат Цикл
		ДобавитьВСписок(ЗначенияФильтра, ВидТрудозатраты.Значение, ВидТрудозатраты.Значение, Шрифт);
	КонецЦикла;
	
	ВыборкаЗначенияФильтра = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗначенияФильтра.Следующий() Цикл
		ДобавитьВСписок(ЗначенияФильтра, ВыборкаЗначенияФильтра.ТипОбъекта, ВыборкаЗначенияФильтра.ТипОбъекта, Шрифт);
		
		ВыборкаЗначенияФильтраДетальная = ВыборкаЗначенияФильтра.Выбрать();
		Пока ВыборкаЗначенияФильтраДетальная.Следующий() Цикл
			Представление = СтрШаблон("   %1", ВыборкаЗначенияФильтраДетальная.Объект);
			ДобавитьВСписок(ЗначенияФильтра, ВыборкаЗначенияФильтраДетальная.Объект, Представление, Неопределено);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЗначенияФильтра;
	
КонецФункции

// Собирает итоговые трудозатраты по объекту
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - ссылка на объект, по которому нужно получить трудозатраты. 
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ТрудозатратыПоОбъекту(Знач Ссылка)
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаТрудозатрат", Новый ТаблицаЗначений);
	Результат.Вставить("ТрудозатратыОбщие", 0);
	Результат.Вставить("ТрудозатратыПоКомандам", 0);
	Результат.Вставить("ТрудозатратыФактическиеВсе", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Трудозатраты.Период КАК Дата,
	|	Трудозатраты.ВидДеятельности КАК ВидДеятельности,
	|	ПРЕДСТАВЛЕНИЕ(Трудозатраты.ВидДеятельности) КАК ПредставлениеВидаДеятельности,
	|	Трудозатраты.Затрата КАК СуммаТрудозатрат,
	|	Трудозатраты.Пользователь КАК Пользователь,
	|	ПРЕДСТАВЛЕНИЕ(Трудозатраты.Пользователь) КАК ИмяПользователя,
	|	Трудозатраты.Комментарий КАК Комментарий,
	|	ДокументТрудозатрат.Ссылка КАК ДокументСсылка,
	|	ДокументТрудозатрат.Филиал КАК Филиал,
	|	ВЫБОР
	|		КОГДА Трудозатраты.ITСтруктура
	|			ТОГДА Трудозатраты.Затрата
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ITТрудозатраты
	|ПОМЕСТИТЬ ОбщиеТрудозатраты
	|ИЗ
	|	РегистрСведений.Трудозатраты КАК Трудозатраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Трудозатраты КАК ДокументТрудозатрат
	|		ПО Трудозатраты.Регистратор = ДокументТрудозатрат.Ссылка
	|ГДЕ
	|	Трудозатраты.Объект = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбщиеТрудозатраты.Дата КАК Дата,
	|	ОбщиеТрудозатраты.ВидДеятельности КАК ВидДеятельности,
	|	ОбщиеТрудозатраты.ПредставлениеВидаДеятельности КАК ПредставлениеВидаДеятельности,
	|	ОбщиеТрудозатраты.СуммаТрудозатрат КАК СуммаТрудозатрат,
	|	ОбщиеТрудозатраты.Пользователь КАК Пользователь,
	|	ОбщиеТрудозатраты.ИмяПользователя КАК ИмяПользователя,
	|	ОбщиеТрудозатраты.Комментарий КАК Комментарий,
	|	ОбщиеТрудозатраты.ДокументСсылка КАК ДокументСсылка
	|ИЗ
	|	ОбщиеТрудозатраты КАК ОбщиеТрудозатраты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбщиеТрудозатраты.Филиал КАК Объект,
	|	""По команде"" КАК ТипОбъекта
	|ИЗ
	|	ОбщиеТрудозатраты КАК ОбщиеТрудозатраты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбщиеТрудозатраты.Пользователь,
	|	""По сотруднику""
	|ИЗ
	|	ОбщиеТрудозатраты КАК ОбщиеТрудозатраты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипОбъекта
	|ИТОГИ ПО
	|	ТипОбъекта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВложенныйЗапрос.ЗатратыОбщие) КАК ЗатратыОбщие,
	|	МАКСИМУМ(ВложенныйЗапрос.ЗатратыКоманд) КАК ЗатратыКоманд,
	|	МАКСИМУМ(ВложенныйЗапрос.ВсеТрудозатраты) КАК ВсеТрудозатраты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЕСТЬNULL(СУММА(ОбщиеТрудозатраты.СуммаТрудозатрат), 0) КАК ЗатратыОбщие,
	|		0 КАК ЗатратыКоманд,
	|		0 КАК ВсеТрудозатраты
	|	ИЗ
	|		ОбщиеТрудозатраты КАК ОбщиеТрудозатраты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		ЕСТЬNULL(СУММА(ОбщиеТрудозатраты.СуммаТрудозатрат), 0),
	|		0
	|	ИЗ
	|		ОбщиеТрудозатраты КАК ОбщиеТрудозатраты
	|	ГДЕ
	|		ОбщиеТрудозатраты.Филиал В(&ФилиалыПользователя)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		0,
	|		ЕСТЬNULL(СУММА(ОбщиеТрудозатраты.СуммаТрудозатрат), 0)
	|	ИЗ
	|		ОбщиеТрудозатраты КАК ОбщиеТрудозатраты) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	(ВЫРАЗИТЬ(ЗначенияДополнительныхРеквизитовОбъектов.Значение КАК ЧИСЛО(15, 2))) - ЕСТЬNULL(ВложенныйЗапрос.СуммаТрудозатрат, 0) КАК СуммаТрудозатрат
	|ИЗ
	|	РегистрСведений.ЗначенияДополнительныхРеквизитовОбъектов КАК ЗначенияДополнительныхРеквизитовОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(ОбщиеТрудозатраты.СуммаТрудозатрат) КАК СуммаТрудозатрат
	|		ИЗ
	|			ОбщиеТрудозатраты КАК ОбщиеТрудозатраты) КАК ВложенныйЗапрос
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЗначенияДополнительныхРеквизитовОбъектов.Объект = &Ссылка
	|	И ЗначенияДополнительныхРеквизитовОбъектов.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДополнительныхРеквизитов.ФактическиеТрудозатраты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЗначенияДополнительныхРеквизитовОбъектов.Значение КАК ЧИСЛО(15, 2)) КАК СтоимостьТрудозатрат
	|ИЗ
	|	РегистрСведений.ЗначенияДополнительныхРеквизитовОбъектов КАК ЗначенияДополнительныхРеквизитовОбъектов
	|ГДЕ
	|	ЗначенияДополнительныхРеквизитовОбъектов.Объект = &Ссылка
	|	И ЗначенияДополнительныхРеквизитовОбъектов.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДополнительныхРеквизитов.ФактическаяСтоимостьРабот)";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ФилиалыПользователя", ПараметрыСеанса.СвязанныеФилиалы);
	
	ВыборкаПакет = Запрос.ВыполнитьПакет();
	
	Результат.ТаблицаТрудозатрат = ВыборкаПакет[1].Выгрузить();
	
	ВыборкаТрудозатраты = ВыборкаПакет[3].Выбрать();
	ВыборкаТрудозатраты.Следующий();
	
	Результат.ТрудозатратыОбщие = ВыборкаТрудозатраты.ЗатратыОбщие;
	Результат.ТрудозатратыПоКомандам = ВыборкаТрудозатраты.ЗатратыКоманд;
	Результат.ТрудозатратыФактическиеВсе = ВыборкаТрудозатраты.ВсеТрудозатраты;
	
	ЗначенияФильтра = СформироватьЗначенияФильтра(ВыборкаПакет[2]);
	Результат.Вставить("ЗначенияФильтра", ЗначенияФильтра);    
	ВГраница = ВыборкаПакет.ВГраница();
	
	Если НЕ ВыборкаПакет[ВГраница - 1].Пустой() Тогда		
		ВыборкаСуммаТрудозатрат = ВыборкаПакет[ВГраница - 1].Выбрать();
		ВыборкаСуммаТрудозатрат.Следующий();
		Результат.Вставить("КоличествоТрудозатратПодчиненные", ВыборкаСуммаТрудозатрат.СуммаТрудозатрат); 
	КонецЕсли; 
	
	Если НЕ ВыборкаПакет[ВГраница].Пустой() Тогда		
		Выборка = ВыборкаПакет[ВГраница].Выбрать();
		Выборка.Следующий();
		Результат.Вставить("СтоимостьТрудозатрат", Выборка.СтоимостьТрудозатрат); 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭкранироватьУгловыеСкобки(Знач Строка)
	
	Строка = СтрЗаменить(СтрЗаменить(Строка, "<", "&lt;"), ">", "&gt;");
	
	Возврат Строка;
	
КонецФункции

#КонецОбласти

#КонецЕсли
