///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////
	
#Область ПрограммныйИнтерфейс  

// Добавляет новую запись в регистр сведений
//
// Параметры:
//  Заявка			 - ДокументСсылка.ЗаявкаНаРазработку - Заявка
//  КлючОчереди		 - СправочникСсылка.КлючОчереди		 - Ключ очереди
//  СтарыйПорядок	 - Число							 - Старый порядок
//  НовыйПорядок	 - Число							 - Новый порядок
//
Процедура Добавить(Заявка, КлючОчереди, СтарыйПорядок, НовыйПорядок) Экспорт  
	
	ТекущаяДата = ТекущаяДата();
	
	СтруктураДляЗаписи = Новый Структура;
	СтруктураДляЗаписи.Вставить("Период", ТекущаяДата);
	СтруктураДляЗаписи.Вставить("Заявка", Заявка);
	СтруктураДляЗаписи.Вставить("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	СтруктураДляЗаписи.Вставить("КлючОчередиОбъекта", КлючОчереди);
	СтруктураДляЗаписи.Вставить("НовыйПорядок", НовыйПорядок);
	СтруктураДляЗаписи.Вставить("СтарыйПорядок", СтарыйПорядок);

	НаборЗаписей = РегистрыСведений.ИсторияОчередиЗаявок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Заявка.Установить(Заявка);
	НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(КлючОчереди);
	НаборЗаписей.Отбор.Период.Установить(ТекущаяДата);
	НаборЗаписей.Прочитать();
	
	НомерЗаписи = НаборЗаписей.Количество() + 1;  
	
	НоваяЗапись = СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураДляЗаписи);
	НоваяЗапись.НомерСобытия = НомерЗаписи;	
	НоваяЗапись.Записать();	
	
КонецПроцедуры

// Создает или редактирует событие в регистре ИсторияИзмененийОбъектовПоСобытиям, а также добавляет запись в этот регистр
//
// Параметры:
//  Заявка			 - ДокументСсылка.ЗаявкаНаРазработку - Заявка
//  КлючОчереди		 - СправочникСсылка.КлючОчереди		 - Ключ очереди
//  СтарыйПорядок	 - Число							 - Старый порядок
//  НовыйПорядок	 - Число							 - Новый порядок
//
Процедура СформироватьСобытиеИзмененияОчереди(Заявка, КлючОчереди, СтарыйПорядок, НовыйПорядок) Экспорт
	
	// Сначала смотрится, последнее изменени очереди от того же автора и не более 10 минут назад.
	// Если оно есть, беру последнюю запись истории по смене очереди и меняю его.
	
	ТекущаяДата = ТекущаяДата();
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияОчередиЗаявокСрезПоследних.Заявка КАК Заявка,
	|	ИсторияИзмененийОбъектовПоСобытиямСрезПоследних.Данные КАК Данные,
	|	ИсторияИзмененийОбъектовПоСобытиямСрезПоследних.Период КАК Период,
	|	ИсторияИзмененийОбъектовПоСобытиямСрезПоследних.Объект КАК Объект,
	|	ИсторияИзмененийОбъектовПоСобытиямСрезПоследних.НомерСобытия КАК НомерСобытия
	|ИЗ
	|	РегистрСведений.ИсторияОчередиЗаявок.СрезПоследних(
	|			,
	|			Заявка = &Заявка
	|				И КлючОчередиОбъекта = &КлючОчереди) КАК ИсторияОчередиЗаявокСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененийОбъектовПоСобытиям.СрезПоследних(, Объект = &Заявка) КАК ИсторияИзмененийОбъектовПоСобытиямСрезПоследних
	|		ПО ИсторияОчередиЗаявокСрезПоследних.Заявка = ИсторияИзмененийОбъектовПоСобытиямСрезПоследних.Объект
	|			И (ИсторияИзмененийОбъектовПоСобытиямСрезПоследних.КатегорияСобытия = ЗНАЧЕНИЕ(Перечисление.КатегорииСобытийИсторияИзменений.ИзменениеПорядкаОчереди))
	|			И ИсторияОчередиЗаявокСрезПоследних.Пользователь = ИсторияИзмененийОбъектовПоСобытиямСрезПоследних.Автор
	|ГДЕ
	|	ИсторияОчередиЗаявокСрезПоследних.Период >= &Период
	|	И ИсторияОчередиЗаявокСрезПоследних.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("КлючОчереди", КлючОчереди);
	Запрос.УстановитьПараметр("Период", ТекущаяДата - 10 * 60);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда		
		ТекстКлюча = Справочники.КлючОчереди.СформироватьПредставлениеКлюча(КлючОчереди);		 
			
		ДанныеСтруктура = Новый Структура("Событие, КлючОчереди, СтарыйПорядок, НовыйПорядок", 
			"ИзменениеПорядка", ТекстКлюча, СтарыйПорядок, НовыйПорядок);
		
		СтруктураСообщение = Новый Структура("Данные, Категория", 
			ЗаписатьЗначениеJSON(ДанныеСтруктура), Перечисления.КатегорииСобытийИсторияИзменений.ИзменениеПорядкаОчереди);
		РегистрыСведений.ИсторияИзмененийОбъектовПоСобытиям.Добавить(Заявка, СтруктураСообщение); 
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();            
		
		НаборЗаписей = РегистрыСведений.ИсторияИзмененийОбъектовПоСобытиям.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
		НаборЗаписей.Отбор.НомерСобытия.Установить(Выборка.НомерСобытия);
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		
		ДанныеСтруктура = ОбщегоНазначения.ПрочитатьСодержимоеJSON(Выборка.Данные);
	
		Если НЕ (ДанныеСтруктура.СтарыйПорядок = НовыйПорядок) Тогда
			
			ДанныеСтруктура.НовыйПорядок = НовыйПорядок;
			
			НаборЗаписей.Прочитать();
			НаборЗаписей[0].Данные = ЗаписатьЗначениеJSON(ДанныеСтруктура);
		КонецЕсли;
		
		// Если НовыйПорядок = СтарыйПорядок,
		// то это возврат на изначальный порядок, нужно удалить такую запись 
		
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Добавить(Заявка, КлючОчереди, СтарыйПорядок, НовыйПорядок);
	
КонецПроцедуры

#КонецОбласти
