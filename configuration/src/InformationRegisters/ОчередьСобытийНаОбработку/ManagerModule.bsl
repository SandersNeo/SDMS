///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Запускает многопоточную обработку очереди событий.
//
Процедура ОбработатьОчередь() Экспорт

	КоличествоПотоков = ОбщегоНазначения.КоличествоПотоковОбработкиОчередиСобытий();
		
	РаспределитьСобытияПоПотокам(КоличествоПотоков);
	
	Для НомерПотока = 1 По КоличествоПотоков Цикл
		НаименованиеФоновогоЗадания = "Обработка очереди событий. Поток " + НомерПотока;
		КлючФоновогоЗадания = ПрефиксКлючаФоновогоЗадания() + НомерПотока;
		
		ОтборФоновыхТекущего = Новый Структура("Состояние, Ключ", СостояниеФоновогоЗадания.Активно, КлючФоновогоЗадания);
		
		СписокФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФоновыхТекущего);
		Если СписокФоновыхЗаданий.Количество() = 0 Тогда
			ПараметрыФоновогоЗадания = Новый Массив;
			ПараметрыФоновогоЗадания.Добавить(НомерПотока);
			
			ФоновыеЗадания.Выполнить("РегламентныеЗаданияСервер.ОбработатьПотокОчереди",
				ПараметрыФоновогоЗадания, КлючФоновогоЗадания, НаименованиеФоновогоЗадания);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

// Запускает обработку очереди по номеру потока
//
// Параметры:
//  НомерПотока	 - Число	 - номер потока. Если не задан, то обрабатываются события всех потоков
//
Процедура ОбработатьПотокОчереди(Знач НомерПотока = 0) Экспорт
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ ПЕРВЫЕ 200
	|	ОчередьСобытийНаОбработку.Период КАК Период,
	|	ОчередьСобытийНаОбработку.Объект КАК Объект,
	|	ОчередьСобытийНаОбработку.ТипСобытия КАК ТипСобытия,
	|	ОчередьСобытийНаОбработку.КлючСобытия КАК КлючСобытия,
	|	ОчередьСобытийНаОбработку.Данные КАК Данные,
	|	ОчередьСобытийНаОбработку.ВидСобытия КАК ВидСобытия,
	|	ОчередьСобытийНаОбработку.Автор КАК Автор,
	|	ВЫБОР
	|		КОГДА ОчередьСобытийНаОбработку.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытийОчереди.УдалениеОповещение)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	РегистрСведений.ОчередьСобытийНаОбработку КАК ОчередьСобытийНаОбработку
	|ГДЕ
	|	НЕ ОчередьСобытийНаОбработку.Обработано
	|{ГДЕ
	|	ОчередьСобытийНаОбработку.НомерПотока}
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Приоритет";
	#КонецОбласти
	
	Если НомерПотока > 0 Тогда
		ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("НомерПотока");
		ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
		ЭлементОтбора.Значение = НомерПотока;
		ЭлементОтбора.Использование = Истина;
	КонецЕсли;
	
	ДанныеСчитаны = Ложь;
	Попытка
		ПостроительЗапроса.Выполнить();
		ДанныеСчитаны = Истина;
	Исключение
		ИмяСобытия = "РегистрСведений.ОчередьСобытийНаОбработку.ОбработатьПотокОчереди";
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстОшибки = СтрШаблон("Не удалось прочитать данные по причине: %1", ОписаниеОшибки);
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , ТекстОшибки);
	КонецПопытки;
	
	Если ДанныеСчитаны Тогда
		РезультатЗапроса = ПостроительЗапроса.Результат;
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				РезультатОбработки = ОбработатьЗапись(Выборка);
				ОтметитьОбработанным(Выборка, РезультатОбработки.Успешно, РезультатОбработки.Сообщение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Равномерно распределяет события по потокам с учетом
//  необработанных событий каждого потока
//
// Параметры:
//  РазрешеноПотоков	 - Число - количество разрешенных потоков
//
Процедура РаспределитьСобытияПоПотокам(Знач РазрешеноПотоков) Экспорт
		
	ИмяСобытия = "РегистрСведений.ОчередьСобытийНаОбработку.РаспределитьСобытияПоПотокам";
	ТекущаяДата = ТекущаяДатаСеанса();
	
	ТипКолонки = Новый ОписаниеТипов(Метаданные.Константы.КоличествоПотоковОбработкиОчередиСобытий.Тип);
	
	// Создаем таблицу номеров потоков
	ТаблицаНомеровПотоков = Новый ТаблицаЗначений;
	ТаблицаНомеровПотоков.Колонки.Добавить("НомерПотока", ТипКолонки);
	
	// Заполняем номерами потоков
	Для НомерПотока = 1 По РазрешеноПотоков Цикл
		ТаблицаНомеровПотоков.Добавить().НомерПотока = НомерПотока;
	КонецЦикла;
	
	// Запросом получаем количество необработанных записей по потокам,
	// а также записи, которые нужно распределить по доступным потокам 
	// (нераспределенные записи с незаполненным номером потока (0), а 
	// также распределенные записи отключенных потоков)
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ТаблицаНомеровПотоков.НомерПотока КАК НомерПотока
	|ПОМЕСТИТЬ ДоступныеПотоки
	|ИЗ
	|	&ТаблицаНомеровПотоков КАК ТаблицаНомеровПотоков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ОчередьСобытий.Период КАК Период,
	|	ОчередьСобытий.Объект КАК Объект,
	|	ОчередьСобытий.ТипСобытия КАК ТипСобытия,
	|	ОчередьСобытий.КлючСобытия КАК КлючСобытия,
	|	ОчередьСобытий.НомерПотока КАК НомерПотока
	|ПОМЕСТИТЬ НеобработанныеСобытия
	|ИЗ
	|	РегистрСведений.ОчередьСобытийНаОбработку КАК ОчередьСобытий
	|ГДЕ
	|	ОчередьСобытий.Период <= &ТекущаяДата
	|	И НЕ ОчередьСобытий.Обработано
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеПотоки.НомерПотока КАК НомерПотока,
	|	ИСТИНА КАК ПотокРазрешен
	|ПОМЕСТИТЬ ВсеНомераПотоков
	|ИЗ
	|	ДоступныеПотоки КАК ДоступныеПотоки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НеобработанныеСобытия.НомерПотока,
	|	ЛОЖЬ
	|ИЗ
	|	НеобработанныеСобытия КАК НеобработанныеСобытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеНомераПотоков.НомерПотока КАК НомерПотока,
	|	МАКСИМУМ(ВсеНомераПотоков.ПотокРазрешен) КАК ПотокРазрешен
	|ПОМЕСТИТЬ НомераПотоковСПризнаками
	|ИЗ
	|	ВсеНомераПотоков КАК ВсеНомераПотоков
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеНомераПотоков.НомерПотока
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеобработанныеСобытия.Период КАК Период,
	|	НеобработанныеСобытия.Объект КАК Объект,
	|	НеобработанныеСобытия.ТипСобытия КАК ТипСобытия,
	|	НеобработанныеСобытия.КлючСобытия КАК КлючСобытия,
	|	НомераПотоковСПризнаками.НомерПотока КАК НомерПотока,
	|	НомераПотоковСПризнаками.ПотокРазрешен КАК ПотокРазрешен
	|ПОМЕСТИТЬ ПромежуточныеДанные
	|ИЗ
	|	НомераПотоковСПризнаками КАК НомераПотоковСПризнаками
	|		ЛЕВОЕ СОЕДИНЕНИЕ НеобработанныеСобытия КАК НеобработанныеСобытия
	|		ПО (НеобработанныеСобытия.НомерПотока = НомераПотоковСПризнаками.НомерПотока)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПромежуточныеДанные.Период КАК Период,
	|	ПромежуточныеДанные.Объект КАК Объект,
	|	ПромежуточныеДанные.ТипСобытия КАК ТипСобытия,
	|	ПромежуточныеДанные.КлючСобытия КАК КлючСобытия
	|ИЗ
	|	ПромежуточныеДанные КАК ПромежуточныеДанные
	|ГДЕ
	|	НЕ ПромежуточныеДанные.ПотокРазрешен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПромежуточныеДанные.НомерПотока КАК НомерПотока,
	|	КОЛИЧЕСТВО(ПромежуточныеДанные.Период) КАК Количество
	|ИЗ
	|	ПромежуточныеДанные КАК ПромежуточныеДанные
	|ГДЕ
	|	ПромежуточныеДанные.ПотокРазрешен
	|
	|СГРУППИРОВАТЬ ПО
	|	ПромежуточныеДанные.НомерПотока
	|
	|УПОРЯДОЧИТЬ ПО
	|	Количество";	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ТаблицаНомеровПотоков", ТаблицаНомеровПотоков);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	
	Пакеты = Запрос.ВыполнитьПакет();
	РезультатНераспределенныеЗаписи = Пакеты.Получить(5);
	РезультатКоличествоСобытийПотока = Пакеты.Получить(6);
	
	Если РезультатНераспределенныеЗаписи.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		// В таблице значений КоличествоПоПотокам хранится количество необработанных событий для каждого потока.
		// При распределии нужно достичь равного распределения событий по потокам. Для этого, при распределении
		// событий указанная таблица сортируется по количеству событий у потока по возрастанию. Таким образом, в
		// самой первой строке таблицы находится номер потока с наименьшим количеством событий. Этот номер потока
		// присваивается событию, увеличивается количество событий у потока, таблица сортируется и так далее.
		
		КоличествоПоПотокам = РезультатКоличествоСобытийПотока.Выгрузить();
		
		ВыборкаОбъект = РезультатНераспределенныеЗаписи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОбъект.Следующий() Цикл
			Выборка = ВыборкаОбъект.Выбрать();
			Пока Выборка.Следующий() Цикл
				МенеджерЗаписи = СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
				МенеджерЗаписи.Прочитать();
				
				Если МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.НомерПотока = КоличествоПоПотокам[0].НомерПотока;
					МенеджерЗаписи.Записать();
					
					КоличествоПоПотокам[0].Количество = КоличествоПоПотокам[0].Количество + 1;
				КонецЕсли;
			КонецЦикла;
			
			КоличествоПоПотокам.Сортировать("Количество ВОЗР");
		КонецЦикла;
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , 
			"При распределении событий по потокам возникла ошибка: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

#Область ДобавлениеСобытий

// Добавляет в очередь событие обновления направления/юридического лица в трудозатратах
//
// Параметры:
//  Ссылка			 - ДокументСсылка.ЗаявкаНаРазработку - заявка, в которой была смена направления или юридического лица
//  Направление		 - СправочникСсылка.НаправленияРазработки	 - текущее направление заявки
//  ЮридическоеЛицо	 - СправочникСсылка.ЮридическиеЛица	 - текущее юридическое лицо заявки
//
Процедура ДобавитьЗаданиеОбновленияКлючевыхИзмеренийТрудозатрат(Знач Ссылка, Знач Направление, Знач ЮридическоеЛицо) Экспорт
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.АктуализацияДанных;
	ВидСобытия = "ОбновлениеНаправленияИЮридическогоЛицаТрудозатрат";
	
	ДанныеСобытия = ПолучитьСтруктуруДанных(ТипСобытия, ВидСобытия);
	ДанныеСобытия.Направление = Направление;
	ДанныеСобытия.ЮридическоеЛицо = ЮридическоеЛицо;
	
	Добавить(ТипСобытия, ДанныеСобытия, Ссылка, , ВидСобытия);
	
КонецПроцедуры

// Добавляет в очередь событие пересчета количества задач
//
// Параметры:
//  Ссылка		 - ДокументСсылка.ЗаявкаНаРазработку	 - сслыка на объект
//
Процедура ДобавитьЗаданиеЗаполнитьКоличествоПодчиненныхЗадач(Знач Ссылка) Экспорт
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.ЗаполнитьКоличествоПодчиненныхЗадач;
	
	Добавить(ТипСобытия,, Ссылка);
	
КонецПроцедуры  

// Добавляет в очередь событие обновления проекта в очереди заявок
//
// Параметры:
//  Ссылка - ДокументСсылка.ЗаявкаНаРазработку - сслыка на объект
//
Процедура ДобавитьЗаданиеОбновитьПроектВОчередиЗаявок(Знач Ссылка) Экспорт
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.ОбновитьПроектВОчередиЗаявок;
	
	Добавить(ТипСобытия, , Ссылка);
	
КонецПроцедуры

// Добавляет в очередь событие обработать задачу в очереди группы тестирования
//
// Параметры:
//  Ссылка		 - ДокументСсылка.ЗаявкаНаРазработку	 - сслыка на объект
//
Процедура ДобавитьЗаданиеОбработатьЗадачуГруппаТестирования(Знач Ссылка) Экспорт
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.ОбработатьЗадачуГруппаТестирования;
	
	Добавить(ТипСобытия,, Ссылка);
	
КонецПроцедуры  

// Добавляет в очередь событие обработать задачу в очереди этапа канбана
//
// Параметры:
//  Ссылка		 - ДокументСсылка.Задача	 - сслыка на объект
//
Процедура ДобавитьЗаданиеОбработатьОбъектЭтапаКанбана (Знач Ссылка) Экспорт
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.ОбработатьОбъектЭтапаКанбана;
	
	Добавить(ТипСобытия,, Ссылка);
	
КонецПроцедуры

// Добавляет в очередь событие обработать задачу рассчитать статусы по филиалам
//
// Параметры:
//  Объект		 - ДокументСсылка.ЗаявкаНаРазработку	 - сслыка на объект    
//  Период - Дата - период изменения
//
Процедура ДобавитьЗаданиеОтправитьИзмененияПоСпринтам(Знач Объект, Знач Период) Экспорт
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.ОтправкаОповещения;	
	ВидСобытия = "ОтправитьИзмененияПоСпринтам";
	Добавить(ТипСобытия,, Объект,, ВидСобытия,, Период);
	
КонецПроцедуры       

// Добавляет в очередь событие обработать задачу рассчитать статусы по филиалам
//
// Параметры:
//  Объект		 - ДокументСсылка.ЗаявкаНаРазработку	 - сслыка на объект    
//  Данные - Структура - параметры очереди
//
Процедура ДобавитьЗаданиеПересчитатьСтатусыЗаявок(Знач Объект, Знач Данные) Экспорт
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.ПересчитатьСтатусыЗаявок;	
	Добавить(ТипСобытия, Данные, Объект);
	
КонецПроцедуры  

// Добавляет в очередь событие обработать задачу рассчитать статусы по филиалам
//
// Параметры:
//  Ссылка		 - ДокументСсылка.ЗаявкаНаРазработку	 - сслыка на объект
//
Процедура ДобавитьЗаданиеРассчитатьСтатусыПоФилиалам(Знач Ссылка) Экспорт
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.РассчитатьСтатусыПоФилиалам;	
	Добавить(ТипСобытия,, Ссылка);
	
КонецПроцедуры

// Добавляет в очередь событие обновления вида родительского проекта у подчиненных объектов
//
// Параметры:
//  Ссылка		 - СправочникСсылка.Проекты, ДокументСсылка.ЗаявкаНаРазработку, ДокументСсылка.ВнутреннееЗадание
//					- ссылка на объект, для которого нужно получить подчиненные объекты и обновить у них вид родительского проекта.
//  ВидПроекта	 - СправочникСсылка.ВидыПроектов - вид проекта, который нужно установить.
//
Процедура ДобавитьЗаданиеОбновитьВидРодительскогоПроекта(Знач Ссылка, Знач ВидПроекта) Экспорт

	ТипСобытия = Перечисления.ТипыСобытийОчереди.ОбновитьВидРодительскогоПроекта;
	
	ДанныеСобытия = ПолучитьСтруктуруДанных(ТипСобытия);
	ДанныеСобытия.ВидПроекта = ВидПроекта;
	
	Добавить(ТипСобытия, ДанныеСобытия, Ссылка);
	
КонецПроцедуры

// Добавляет в очередь событие для проверки типа филиала при изменении Признака ИТ у ЮрЛица
//
// Параметры:
//  Ссылка	 - СправочникСсылка.ЮридическиеЛица - юр.Лицо, у которого изменился признак
//
Процедура ДобавитьЗаданиеПроверитьТипыФилиалов(Знач Ссылка) Экспорт 
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.АктуализацияДанных;
	ВидСобытия = "ПроверкаТипаФилиала";
	
	РегистрыСведений.ОчередьСобытийНаОбработку.Добавить(ТипСобытия, , Ссылка, , ВидСобытия);
	
КонецПроцедуры

// Добавляет в очередь событие изменения объекта
//
// Параметры:
//  Ссылка		 - ДокументСсылка.ВнутреннееЗадание, СправочникСсылка.Проекты, ДокументСсылка.Задача, ДокументСсылка.ЗаявкаНаРазработку	 - сслыка на объект
//  Изменения	 - Произвольный	 - данные, которые описывают изменения объекта
//
Процедура ИзменениеОбъекта(Знач Ссылка, Знач Изменения) Экспорт
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.ИзменениеОбъекта;
	
	Добавить(ТипСобытия, Изменения, Ссылка);
	
КонецПроцедуры

// Добавляет в очередь событие отметки просмотренным.
//
// Параметры:
//  Ссылка					 - ДокументСсылка.ВнутреннееЗадание, СправочникСсылка.Проекты, ДокументСсылка.Задача, ДокументСсылка.ЗаявкаНаРазработку	 - объект
//  ЭтоКатегорияКомментария	 - Булево	 - признак отметки просмотренным только событий комментариев
//
Процедура ОтметитьПросмотренным(Знач Ссылка, Знач ЭтоКатегорияКомментария = Ложь) Экспорт
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.ОтметитьПросмотренным;
			
	ДанныеСобытия = ПолучитьСтруктуруДанных(ТипСобытия);
	ДанныеСобытия.Ссылка = Ссылка;
	
	Если ЭтоКатегорияКомментария Тогда
		ДанныеСобытия.КатегорияСообщения = Перечисления.КатегорииСообщенийПользователя.Комментарии;
	КонецЕсли;
	
	Добавить(ТипСобытия, ДанныеСобытия, Ссылка);
	
КонецПроцедуры

// Добавляет в очередь событие отправки оповещения. Получатели будут определены автоматически.
//
// Параметры:
//  Ссылка							- ДокументСсылка.ВнутреннееЗадание, СправочникСсылка.Проекты, ДокументСсылка.Задача, ДокументСсылка.ЗаявкаНаРазработку - объект
//  Комментарий					- Строка - текст комментария
//  ДатаКомментария				- Дата - дата создания комментария
//  ИдентификаторКомментария	- УникальныйИдентификатор - идентификатор комментария
//  Общедоступный					- Булево - признак общедоступного комментария
//  Автор							- СправочникСсылка.Пользователи - признак общедоступного комментария
//
Процедура ОтправитьОповещение(Знач Ссылка, Знач Комментарий, Знач ДатаКомментария = Неопределено, Знач ИдентификаторКомментария = Неопределено, Знач Общедоступный = Истина, Знач Автор = Неопределено) Экспорт
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.ОтправкаОповещения;
	
	ДанныеСобытия = ПолучитьСтруктуруДанных(ТипСобытия);
	ДанныеСобытия.Ссылка = Ссылка;
	ДанныеСобытия.Комментарий = Комментарий;
	ДанныеСобытия.ИдентификаторКомментария = ИдентификаторКомментария;
	ДанныеСобытия.ОбщедоступныйКомментарий = Общедоступный;
	ДанныеСобытия.ДатаСозданияКомментария = ДатаКомментария;
	
	Добавить(ТипСобытия, ДанныеСобытия, Ссылка, ИдентификаторКомментария, , Автор);
	
КонецПроцедуры

// Добавляет в очередь событие отправки оповещения. Получатели будут определены автоматически.
//
// Параметры:
//  Объект		 - ДокументСсылка.ВнутреннееЗадание, СправочникСсылка.Проекты, ДокументСсылка.Задача, ДокументСсылка.ЗаявкаНаРазработку	 - объект
//  Сообщение	 - Строка	 - текст сообщения
//
Процедура ОтправитьОповещениеОпределяемыеПолучатели(Знач Объект, Знач Сообщение) Экспорт
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.ОтправкаОповещения;
	ВидСобытия = "ОпределитьПолучателейПоОбъекту";
	
	ДанныеСобытия = ПолучитьСтруктуруДанных(ТипСобытия, ВидСобытия);
	ДанныеСобытия.Объект = Объект;
	
	// Заполнение структуры сообщения, кроме даты создания события
	ЗаполнитьЗначенияСвойств(ДанныеСобытия.Сообщение, Сообщение);
	
	Добавить(ТипСобытия, ДанныеСобытия, Объект, , ВидСобытия);
	
КонецПроцедуры

// Добавляет событие на отправку оповещения по очереди эскалации
//
// Параметры:
//  Объект - ДокументСсылка.ОбработкаЭскалацииОшибок - ссылка на документ
//  Данные - Структура - параметры очереди
//
Процедура ОтправитьОповещениеОчередиЭскалации(Знач Объект, Знач Данные) Экспорт
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.ОтправкаОповещения;
	ВидСобытия = "ОчередьЭскалации";
	
	Добавить(ТипСобытия, , Объект, Данные.ИдентификаторОчереди, ВидСобытия, , Данные.ДатаУведомления);
	
КонецПроцедуры

// Добавляет в очередь событие отправки оповещения о наличии стоп-слов в текстах объектов
//
// Параметры:
//  Ссылка			 - ДокументСсылка.Задача, ДокументСсылка.ЗаявкаНаРазработку	 - ссылка на объект
//  Получатель		 - СправочникСсылка.Пользователи	 - автор изменений
//  СтруктураСообщения	 - Структура	 - данные для формирования сообщения
//
Процедура ОтправитьОповещенияПоСтопСловам(Знач Ссылка, Знач Получатель, Знач СтруктураСообщения) Экспорт
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.ОтправкаОповещения;
	ВидСобытия = "ОповещениеОНаличииСтопСлов";
	
	ДанныеСобытия = ПолучитьСтруктуруДанных(ТипСобытия, ВидСобытия);
	ДанныеСобытия.Сообщение = СтруктураСообщения;
	ДанныеСобытия.Получатель = Получатель;
	
	Добавить(ТипСобытия, ДанныеСобытия, Ссылка, , ВидСобытия);
	
КонецПроцедуры

// Добавляет в очередь событие отправки оповещения. Получателями будут филиалы тестирования.
//
// Параметры:
//  Ссылка		 - ДокументСсылка.Задача	 - объект
//  СистемаУчета - СправочникСсылка.СистемыУчета	 - система учета
//
Процедура ОтправитьОповещениеПоТестируемымСистемам(Знач Ссылка, Знач СистемаУчета) Экспорт
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.ОтправкаОповещения;
	ВидСобытия = "ТестируемыеСистемы";
	
	// Используем отложенную обработку события попадания задачи в пул,
	// в случае, если статус уже не тестирование или заполнился назначенный,
	// уведомление не будет отправлено.
	ВремяЗадержки = 600; // 10 минут
	Период = ТекущаяДатаСеанса() + ВремяЗадержки;
	
	ДанныеСобытия = ПолучитьСтруктуруДанных(ТипСобытия, ВидСобытия);
	ДанныеСобытия.Ссылка = Ссылка;
	ДанныеСобытия.СистемаУчета = СистемаУчета;
	
	Добавить(ТипСобытия, ДанныеСобытия, Ссылка, , ВидСобытия, , Период);
	
КонецПроцедуры

// Процедура - Отправить оповещение участнику
//
// Параметры:
//  Ссылка			 - ДокументСсылка.ВнутреннееЗадание, СправочникСсылка.Проекты, ДокументСсылка.Задача, ДокументСсылка.ЗаявкаНаРазработку - объект
//  Пользователь	 - СправочникСсылка.Пользователи - участник
//  Удаление		 - Булево - состояние оповещения
//
Процедура ОтправитьОповещениеУчастнику(Знач Ссылка, Знач Пользователь, Знач Удаление = Ложь) Экспорт
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.ОтправкаОповещения;
	ВидСобытия = "ОповещениеУчастника";
	
	ДанныеСобытия = ПолучитьСтруктуруДанных(ТипСобытия, ВидСобытия);
	ДанныеСобытия.Пользователь = Пользователь;
	ДанныеСобытия.Удаление = Удаление;
	
	Добавить(ТипСобытия, ДанныеСобытия, Ссылка, , ВидСобытия);
	
КонецПроцедуры

// Добавляет в очередь событие отправки оповещения. Отправка будет выполнена указанным получателям.
//
// Параметры:
//  Ссылка		 - ДокументСсылка.ВнутреннееЗадание, СправочникСсылка.Проекты, ДокументСсылка.Задача, ДокументСсылка.ЗаявкаНаРазработку	 - объект
//  Получатели	 - Массив, СправочникСсылка.Пользователи	 - массив ссылок пользователей-получателей или ссылка на пользователя
//  Сообщение	 - Структура	 - структура сообщения
//		* ТекстСообщения	 - Строка	 - текст сообщения
//		* КатегорияСообщения	 - ПеречислениеСсылка.КатегорииСообщенийПользователя	 - категория сообщения
//		* Важность	 - ПеречислениеСсылка.ВажностьСообщения	 - важность сообщения
//  Автор		 - СправочникСсылка.Пользователи - Автор
//
Процедура ОтправитьОповещениеФиксированныеПолучателям(Знач Ссылка, Знач Получатели, Знач Сообщение, Знач Автор = Неопределено) Экспорт
	
	ПолучателиОповещения = Новый Массив;
	Если ТипЗнч(Получатели) = Тип("СправочникСсылка.Пользователи") Тогда
		ПолучателиОповещения.Добавить(Получатели);
	Иначе
		ПолучателиОповещения = Получатели;
	КонецЕсли;
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.ОтправкаОповещения;
	ВидСобытия = "ФиксированныеПолучатели";
	
	ДанныеСобытия = ПолучитьСтруктуруДанных(ТипСобытия, ВидСобытия);
	ДанныеСобытия.Ссылка = Ссылка;
	ДанныеСобытия.Получатели = ПолучателиОповещения;
	
	// Заполнение структуры сообщения, кроме даты создания события
	ЗаполнитьЗначенияСвойств(ДанныеСобытия.Сообщение, Сообщение);
	
	Добавить(ТипСобытия, ДанныеСобытия, Ссылка, , ВидСобытия, Автор);
	
КонецПроцедуры

// Добавляет в очередь событие проверки доступных услуг филиала
//
// Параметры:
//  Объект - СправочникСсылка.Пользователь, СправочникСсылка.Должности, СправочникСсылка.Филиал	 -  Сотрудник филиала, должность, филиал.
//				Сотрудник попадает при кадровом изменении, должность - если поменялась привязка к услугам.
//  Период		 - Дата	 - Период кадрового изменения
//
Процедура ДобавитьПроверкуДоступныхУслугФилиала(Объект, Период) Экспорт
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.ПроверитьДоступныеУслугиФилиала;	
	Добавить(ТипСобытия, Период, Объект);	
	
КонецПроцедуры

// Добавляет в очередь событие копирования настроек пользователей
//
// Параметры:
//  Ссылка	- ДокументСсылка.ВнутреннееЗадание, СправочникСсылка.Проекты, ДокументСсылка.Задача, ДокументСсылка.ЗаявкаНаРазработку	 - объект
//  Источник	 - Строка	 - имя пользователя источника
//  Приемник	 - Строка	 - имя пользователя приемника
//  УдалитьНастройкиПослеКопирования - Булево	 - признак того, что требуется удаление настроек источника после копирования
//
Процедура ПереносНастроекПользователя(Знач Ссылка, Знач Источник, Знач Приемник, Знач УдалитьНастройкиПослеКопирования = Ложь) Экспорт
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.ПереносНастроекПользователя;
			
	ДанныеСобытия = ПолучитьСтруктуруДанных(ТипСобытия);
	ДанныеСобытия.Источник = Источник;
	ДанныеСобытия.Приемник = Приемник;
	ДанныеСобытия.УдалитьНастройкиПослеКопирования = УдалитьНастройкиПослеКопирования;
	
	Добавить(ТипСобытия, ДанныеСобытия, Ссылка);
	
КонецПроцедуры

// Добавляет в очередь событие пересчет плановых трудозатрат для заявки
//
// Параметры:
//  Объект	- ДокументСсылка.ЗаявкаНаРазработку	 - объект
//
Процедура ПересчитатьПлановыеТрудозатраты(Объект) Экспорт  
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.ПересчетПлановыхТрудозатрат;	
	Добавить(ТипСобытия, , Объект);	
	
КонецПроцедуры

// Добавляет в очередь событие пересчет фактических трудозатрат для заявки
//
// Параметры:
//  Объект	- ДокументСсылка.ЗаявкаНаРазработку	 - Объект
//  Данные	- Структура
//	 *Затрата - Число - Разница затрат, на которые нужно скорректировать трудозатраты
//	 *Стоимость - Число - Разница затрат в деньгах, на которые нужно скорректировать трудозатраты
//
Процедура ПересчитатьФактическиеТрудозатраты(Объект, Данные) Экспорт

	ТипСобытия = Перечисления.ТипыСобытийОчереди.ПересчетФактическихТрудозатрат;	
	Добавить(ТипСобытия, Данные, Объект);	

КонецПроцедуры

// Возвращает основную часть ключа фонового задания
// 
// Возвращаемое значение:
//  Строка - префикс ключа фонового задания
//
Функция ПрефиксКлючаФоновогоЗадания() Экспорт
	
	Возврат "ОбработкаОчередиПоток";
	
КонецФункции

// Добавляет в очередь событие создания пользователя
//
// Параметры:
//  Ссылка	 - СправочникСсылка.Пользователи	 - пользователь
//  Почта	 - Строка	 - электронная почта пользователя
//
Процедура СозданиеПользователя(Знач Ссылка, Знач Почта) Экспорт
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.СозданиеПользователя;
	
	ДанныеСобытия = ПолучитьСтруктуруДанных(ТипСобытия);
	ДанныеСобытия.Ссылка = Ссылка;
	ДанныеСобытия.Почта = Почта;
	
	Добавить(ТипСобытия, ДанныеСобытия);
	
	ВидСобытия = "ПроверкаДанных";
	ДатаПроверки = ТекущаяДатаСеанса() + 1800; // Проверяем через полчаса. Данные уже должны будут прийти обменом
	Добавить(ТипСобытия, , Ссылка, , ВидСобытия, , ДатаПроверки);
	
КонецПроцедуры

// Добавляет событие на создание документов ОбработкаЭскалацииОшибок для ошибочной заявки
//
// Параметры:
//  Ссылка - ДокументСсылка.ЗаявкаНаРазработку - ссылка на заявку по ошибке
//  Период - Дата - дата отсчета для оповещений
//
Процедура СоздатьОбработкуЭскалацииОшибок(Знач Ссылка, Знач Период) Экспорт
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.ОбработкаЭскалацииОшибки;
	
	Добавить(ТипСобытия, , Ссылка, , , , Период);
	
КонецПроцедуры

// Добавляет в очередь событие удаления оповещения об опубликованном комментарии.
//
// Параметры:
//  Объект			 - ДокументСсылка.ВнутреннееЗадание, СправочникСсылка.Проекты, ДокументСсылка.Задача, ДокументСсылка.ЗаявкаНаРазработку	 - объект
//  Идентификатор	 - УникальныйИдентификатор	 - идентификатор комментария
//
Процедура УдалитьОповещение(Знач Объект, Знач Идентификатор) Экспорт
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.УдалениеОповещение;
	
	ДанныеСобытия = ПолучитьСтруктуруДанных(ТипСобытия);
	ДанныеСобытия.ИдентификаторКомментария = Идентификатор;
	
	Добавить(ТипСобытия, ДанныеСобытия, Объект, Идентификатор);
	
КонецПроцедуры

// Добавляет событие изменения владельца продукта
//
// Параметры:
//  Продукт			 - СправочникСсылка.Продукты	 - продукт, в котором произошла смена владельца
//  СтарыйВладелец	 - СправочникСсылка.Пользователи	 - предыдущий владелец продукта
//  НовыйВладелец	 - СправочникСсылка.Пользователи	 - текущий владелец продукта
//
Процедура ИзменениеВладельцаПродукта(Знач Продукт, Знач СтарыйВладелец, Знач НовыйВладелец) Экспорт
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.ВладелецПродукта;
	ВидСобытия = "ИзменениеВладельцаПродукта";
	
	ДанныеСобытия = ПолучитьСтруктуруДанных(ТипСобытия, ВидСобытия);
	ДанныеСобытия.СтарыйВладелец = СтарыйВладелец;
	ДанныеСобытия.НовыйВладелец = НовыйВладелец;
	
	Добавить(ТипСобытия, ДанныеСобытия, Продукт, , ВидСобытия);
	
КонецПроцедуры

// Добавляет событие изменения продукта в объекте
//
// Параметры:
//  Объект			 - СправочникСсылка.Проекты, СправочникСсылка.ВнутреннееЗадание	 - ссылка на объект, в котором произошла смена продукта
//  СтарыйПродукт	 - СправочникСсылка.Продукт	 - ссылка на предыдущий продукт
//  НовыйПродукт	 - СправочникСсылка.Продукт	 - ссылка на текущий продукт
//
Процедура ИзменениеПродуктаВОбъекте(Знач Объект, Знач СтарыйПродукт, Знач НовыйПродукт) Экспорт
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.ВладелецПродукта;
	ВидСобытия = "ИзменениеПродуктаВОбъекте";
	
	ДанныеСобытия = ПолучитьСтруктуруДанных(ТипСобытия, ВидСобытия);
	ДанныеСобытия.СтарыйПродукт = СтарыйПродукт;
	ДанныеСобытия.НовыйПродукт = НовыйПродукт;
	
	Добавить(ТипСобытия, ДанныеСобытия, Объект, , ВидСобытия);
	
КонецПроцедуры

// Добавляет событие обновления ролей пользователя при смене должности или филиала
//
// Параметры:
//  Пользователь	 - СправочникСсылка.Пользователи	 - ссылка на пользователя, у которого изменилась должность или филиал
//  СтароеЗначение	 - СправочникСсылка.Филиалы, СправочникСсылка.Должности	 - предыдущее значение
//  НовоеЗначение	 - СправочникСсылка.Филиалы, СправочникСсылка.Должности	 - новое значение
//
Процедура ОбновитьРолиУчастникаГруппы(Знач Пользователь, Знач СтароеЗначение, Знач НовоеЗначение) Экспорт
	
	ТипСобытия = Перечисления.ТипыСобытийОчереди.ОбновитьРолиУчастникаГруппы;
	
	ДанныеСобытия = ПолучитьСтруктуруДанных(ТипСобытия);
	ДанныеСобытия.СтароеЗначение = СтароеЗначение;
	ДанныеСобытия.НовоеЗначение = НовоеЗначение;
	
	Добавить(ТипСобытия, ДанныеСобытия, Пользователь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет событие в очередь для обработки
//
// Параметры:
//  ТипСобытия	 - ПеречислениеСсылка.ТипыСобытийОчереди																									 - тип события
//  Данные		 - Произвольный																																	 - данные, которые можно сохранить в хранилище значения
//  Объект		 - ДокументСсылка.Задача, ДокументСсылка.ВнутреннееЗадание, ДокументСсылка.ЗаявкаНаРазработку, СправочникСсыка.Проекты	 - объект, к которому относится данное событие. Может быть не заполнен
//  КлючСобытия - УникальныйИдентификатор - ключ события
//  ВидСобытия	 - Строка - Название вида события
//  Автор		 - СправочникСсылка.Пользователи - Автор
//  Период		 - Дата - Дата обработки события
//
Процедура Добавить(Знач ТипСобытия, Знач Данные = Неопределено, Знач Объект = Неопределено, 
	Знач КлючСобытия = Неопределено, Знач ВидСобытия = "", Знач Автор = Неопределено, Знач Период = Неопределено) Экспорт
	
	// Имя события для журнала регистрации
	ИмяСобытия = "РегистрСведений.ОчередьСобытийНаОбработку.Добавить";
	
	// Проверка заполненности типа события
	Если НЕ ЗначениеЗаполнено(ТипСобытия) Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , "Тип события не заполнен.");
		Возврат;
	КонецЕсли;

	// Проверка ключа события
	Если КлючСобытия = Неопределено Тогда
		КлючСобытия = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Если Автор = Неопределено Тогда
		Автор = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если Период = Неопределено Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	// Создание набора записей
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период);
	НаборЗаписей.Отбор.ТипСобытия.Установить(ТипСобытия);
	НаборЗаписей.Отбор.КлючСобытия.Установить(КлючСобытия);
	
	// Добавление и заполнение записи в наборе
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = Период;
	НоваяЗапись.ТипСобытия = ТипСобытия;
	НоваяЗапись.КлючСобытия = КлючСобытия;
	НоваяЗапись.Данные = Новый ХранилищеЗначения(Данные, Новый СжатиеДанных(9));
	НоваяЗапись.Автор = Автор;
	НоваяЗапись.ВидСобытия = ВидСобытия;
	
	// Если заполнен объект, то добавим его в отбор
	// и заполним соответствующее измерение записи
	Если ЗначениеЗаполнено(Объект) Тогда
		НаборЗаписей.Отбор.Объект.Установить(Объект);
		НоваяЗапись.Объект = Объект;
	КонецЕсли;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

// Выполняет обработку записи
//
// Параметры:
//  Выборка	 - Произвольный	 - элемент выборки из процедуры ОбработатьОчередь()
// 
// Возвращаемое значение:
//   - Структура
//		* Успешно	 - Белево	 - признак успешной или не успешной обработки записи
//		* Сообщение	 - Строка	 - строка с ошибкой обработки записи
//
Функция ОбработатьЗапись(Знач Выборка)
	
	Результат = Новый Структура("Успешно, Сообщение", Истина, "");
	
	// Получение данных из хранилища значения
	Данные = Выборка.Данные.Получить();
	
	ТипСобытия = Выборка.ТипСобытия;
	ВидСобытия = Выборка.ВидСобытия;
	
	Если ТипСобытия = Перечисления.ТипыСобытийОчереди.ОтметитьПросмотренным Тогда
		РегистрыСведений.ПодготовленныеСообщенияПользователяПоКатегориям.ОтметитьПросмотренным(Данные.Ссылка, Данные.КатегорияСообщения, Выборка.Автор);
		
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОчереди.ИзменениеОбъекта Тогда
		Результат = ОбработатьИзменениеОбъекта(Выборка.Объект, Данные, Выборка.Автор, Выборка.Период);
		
	// Отправка оповещения о комментарии
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОчереди.ОтправкаОповещения Тогда
				
		// Отправка оповещений о наличии стоп-слов в описаниях объектов
		Если ВидСобытия = "ОповещениеОНаличииСтопСлов" Тогда
			ОтправитьСообщенияОНаличииСтопСлов(Выборка.Объект, Данные);
				
		// Определение получателей и отправка сообщения
		ИначеЕсли ВидСобытия = "ОпределитьПолучателейПоОбъекту" Тогда
			Получатели = ОпределитьПолучателейПоСсылкеНаОбъект(Данные.Объект, Выборка.Автор);
			РегистрыСведений.ПодготовленныеСообщенияПользователяПоКатегориям.Добавить(Получатели, Данные.Объект, Данные.Сообщение, Выборка.Автор);
			
		// Отправка только филиалу тестирования
		ИначеЕсли ВидСобытия = "ТестируемыеСистемы" Тогда
			Документы.Задача.ОповеститьФилиалТестирования(Данные.Ссылка, Данные.СистемаУчета);
						
		// Отправка фиксированному набору получателей
		ИначеЕсли ВидСобытия = "ФиксированныеПолучатели" Тогда
			РегистрыСведений.ПодготовленныеСообщенияПользователяПоКатегориям.Добавить(Данные.Получатели, Данные.Ссылка, Данные.Сообщение, Выборка.Автор);
			
		ИначеЕсли ВидСобытия = "ОповещениеУчастника" Тогда
			ОповеститьУчастника(Выборка.Объект, Данные.Пользователь, Данные.Удаление, Выборка.Автор);
			
		ИначеЕсли ВидСобытия = "ОчередьЭскалации" Тогда
			Документы.ОбработкаЭскалацииОшибок.ОповеститьОчередь(Выборка.Объект, Выборка.КлючСобытия);  
			
		ИначеЕсли ВидСобытия = "ОтправитьИзмененияПоСпринтам" Тогда			
			Документы.Спринт.ОтправитьИзмененияПоСпринтам(Выборка.Объект, Выборка.Период);
		
		Иначе
			// Отправка оповещения только получателям
			ОбщегоНазначения.ОтправитьОповещениеПользователям(Данные.Ссылка, Данные.Комментарий, Данные.ИдентификаторКомментария,
				Данные.ДатаСозданияКомментария, Данные.ОбщедоступныйКомментарий, Выборка.Автор);
		КонецЕсли;
		
	// Удаление оповещения об удаленном комментарии
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОчереди.УдалениеОповещение Тогда
		РегистрыСведений.ПодготовленныеСообщенияПользователяПоКатегориям.УдалитьОповещенияКомментария(Данные.ИдентификаторКомментария);
		
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОчереди.АктуализацияДанных Тогда
		
		Если ВидСобытия = "ОбновлениеНаправленияИЮридическогоЛицаТрудозатрат" Тогда
			Результат = ОбновитьКлючевыеИзмеренияТрудозатрат(Выборка.Объект, Данные.Направление, Данные.ЮридическоеЛицо);
		ИначеЕсли ВидСобытия = "ОбновлениеРеквизитовПользователя" Тогда
			Результат = АктуализироватьДанныеОПользователе(Выборка.Объект);
		ИначеЕсли ВидСобытия = "ПроверкаТипаФилиала" Тогда
			Результат = ОбработатьИзменениеПризнакаИТ(Выборка.Объект);
		КонецЕсли;
		
	// Создание пользователя
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОчереди.СозданиеПользователя Тогда
 		Если ВидСобытия = "ПроверкаДанных" Тогда
			ПроверитьНаличиеДанныхПоПользователю(Выборка.Объект); 
			Результат = ИнтеграцияДополнительныхПодсистем.ОбработатьСозданиеПользователя(Выборка.Объект);			
		Иначе
			Результат = Справочники.Пользователи.ЗаполнитьАдресМессенджера(Данные.Ссылка, Данные.Почта);
		КонецЕсли;
		
	// Обновление ролей участника группы
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОчереди.ОбновитьРолиУчастникаГруппы Тогда
		ОбработатьОбновлениеРолиУчастникаГруппыДоступа(Выборка.Объект, Данные);
		
	// Перенос настроек пользователя
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОчереди.ПереносНастроекПользователя Тогда
		Обработки.ПросмотрНастроекПользователей.СкопироватьВсеНастройкиОтОдногоПользователяДругому(Данные.Источник, Данные.Приемник, Данные.УдалитьНастройкиПослеКопирования);
		
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОчереди.ОбработкаЭскалацииОшибки Тогда
		Документы.ОбработкаЭскалацииОшибок.СоздатьНовыйДокумент(Выборка.Объект, Выборка.Период);
		
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОчереди.ПроверитьДоступныеУслугиФилиала Тогда
		ПроверитьДоступныеУслугиФилиала(Выборка.Объект, Данные);
			
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОчереди.ПересчетПлановыхТрудозатрат Тогда
		ПересчетПлановыхТрудозатрат(Выборка.Объект);
		
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОчереди.ПересчетФактическихТрудозатрат Тогда
		ПересчетФактическихТрудозатрат(Выборка.Объект, Данные);
		
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОчереди.ОбновитьПроектВОчередиЗаявок Тогда
		ОбновитьПроектВОчередиЗаявок(Выборка.Объект);
		
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОчереди.ЗаполнитьКоличествоПодчиненныхЗадач Тогда
		ЗаполнитьКоличествоПодчиненныхЗадач(Выборка.Объект);
		
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОчереди.ОбработатьЗадачуГруппаТестирования Тогда
		ОбработатьЗадачуГруппаТестирования(Выборка.Объект);
		
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОчереди.ОбработатьОбъектЭтапаКанбана Тогда
		ОбработатьОбъектЭтапаКанбана(Выборка.Объект);
		
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОчереди.РассчитатьСтатусыПоФилиалам Тогда
		Результат = РассчитатьСтатусыПоФилиалам(Выборка.Объект);
		
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОчереди.ПересчитатьСтатусыЗаявок Тогда
		Результат = ПересчитатьСтатусыЗаявок(Выборка.Объект, Данные); 
		
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОчереди.ВладелецПродукта Тогда
		Если ВидСобытия = "ИзменениеВладельцаПродукта" Тогда
			ОбработатьИзменениеВладельцаПродукта(Выборка.Объект, Данные.СтарыйВладелец, Данные.НовыйВладелец);
			
		ИначеЕсли ВидСобытия = "ИзменениеПродуктаВОбъекте" Тогда
			ОбработатьИзменениеПродуктаВОбъекте(Выборка.Объект, Данные.СтарыйПродукт, Данные.НовыйПродукт);
		КонецЕсли;
		
	ИначеЕсли ТипСобытия = Перечисления.ТипыСобытийОчереди.ОбновитьВидРодительскогоПроекта Тогда
		Результат = ОбновитьВидРодительскогоПроектаПодчиненныхОбъектов(Выборка.Объект, Данные);
		
	Иначе
		Результат = ИнтеграцияДополнительныхПодсистем.ОбработатьОчередьСобытий(ТипСобытия, Выборка, Данные);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает менеджер объекта по ссылке и определяет список получателей оповещения
//
// Параметры:
//  Ссылка		 - ДокументСсылка.Задача, ДокументСсылка.ЗаявкаНаРазработку, СправочникСсыка.Проекты - сслыка на объект
//  Инициатор	 - СправочникСсылка.Пользователи																		 - пользователь который инициировал событие
// 
// Возвращаемое значение:
//  Массив - получатели оповещений
//
Функция ОпределитьПолучателейПоСсылкеНаОбъект(Знач Ссылка, Знач Инициатор)
	
	РезультатЗапроса = РегистрыСведений.Участники.ПолучателиОповещения(Ссылка, Истина, Инициатор);
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Пользователь");
	
КонецФункции

// Отмечает запись обработанной
//
// Параметры:
//  ИзмеренияЗаписи		 - Структура	 - заполненная структура измерений записи
//  Обработано			 - Булево	 - успешная или не успешная обработка записи
//  РезультатОбработки	 - Строка	 - строковое представление ошибки при обработке
//
Процедура ОтметитьОбработанным(Знач ИзмеренияЗаписи, Знач Обработано = Истина, Знач РезультатОбработки = "")
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ИзмеренияЗаписи);
	
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Обработано = Обработано;
		МенеджерЗаписи.ДатаОбработки = ТекущаяДатаСеанса();
		МенеджерЗаписи.РезультатОбработки = РезультатОбработки;
		
		МенеджерЗаписи.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру хранения данных для определенного события
//
// Параметры:
//  ТипСобытияОчереди	 - ПеречислениеСсылка.ТипыСобытийОчереди - тип события
//  ВидСобытия			 - Строка	 - вид события
// 
// Возвращаемое значение:
//  Структура - содержит набор полей, которые необходимы для записи того или иного события
//
Функция ПолучитьСтруктуруДанных(Знач ТипСобытияОчереди, Знач ВидСобытия = "")
	
	Результат = Новый Структура;
	
	// Отправка оповещения
	Если ТипСобытияОчереди = Перечисления.ТипыСобытийОчереди.ОтправкаОповещения Тогда
		// Стандартная отправка
		Если ПустаяСтрока(ВидСобытия) Тогда
			Результат.Вставить("Ссылка", Неопределено);
			Результат.Вставить("Комментарий", "");
			Результат.Вставить("ИдентификаторКомментария", Неопределено);
			Результат.Вставить("ДатаСозданияКомментария", '00010101');
			Результат.Вставить("ОбщедоступныйКомментарий", Истина);
			
		// Добавление в пул тестирования
		ИначеЕсли ВидСобытия = "ТестируемыеСистемы" Тогда
			Результат.Вставить("СистемаУчета", Справочники.СистемыУчета.ПустаяСсылка());
			Результат.Вставить("Ссылка", Неопределено);
			
		// Изменение назначенного по системе заявки или делегирование заявки другому пользователю
		ИначеЕсли ВидСобытия = "ФиксированныеПолучатели" Тогда
			Результат.Вставить("Получатели", Новый Массив);
			Результат.Вставить("Ссылка", Неопределено);
			Результат.Вставить("Сообщение", ПолучитьСтруктуруСообщения());
			
		ИначеЕсли ВидСобытия = "ОпределитьПолучателейПоОбъекту" Тогда
			Результат.Вставить("Объект", Неопределено);
			Результат.Вставить("Сообщение", ПолучитьСтруктуруСообщения());
			
		ИначеЕсли ВидСобытия = "ОповещениеОНаличииСтопСлов" Тогда
			Результат.Вставить("Сообщение", Неопределено);
			Результат.Вставить("Получатель", Справочники.Пользователи.ПустаяСсылка());
			
		ИначеЕсли ВидСобытия = "ОповещениеУчастника" Тогда
			Результат.Вставить("Пользователь", Справочники.Пользователи.ПустаяСсылка());
			Результат.Вставить("Удаление", Ложь);
		КонецЕсли;
	
	// Удаление оповещения
	ИначеЕсли ТипСобытияОчереди = Перечисления.ТипыСобытийОчереди.УдалениеОповещение Тогда
		Результат.Вставить("ИдентификаторКомментария", Неопределено);
		
	// Отметка просмотренным
	ИначеЕсли ТипСобытияОчереди = Перечисления.ТипыСобытийОчереди.ОтметитьПросмотренным Тогда
		Результат.Вставить("Ссылка", Неопределено);
		Результат.Вставить("КатегорияСообщения", Перечисления.КатегорииСообщенийПользователя.ПустаяСсылка());
		
	// Актуализация данных
	ИначеЕсли ТипСобытияОчереди = Перечисления.ТипыСобытийОчереди.АктуализацияДанных Тогда
		
		Если ВидСобытия = "ОбновлениеНаправленияИЮридическогоЛицаТрудозатрат" Тогда
			Результат.Вставить("Направление", Справочники.НаправленияРазработки.ПустаяСсылка());
			Результат.Вставить("ЮридическоеЛицо", Справочники.ЮридическиеЛица.ПустаяСсылка());
		КонецЕсли;
		
	// Создание пользователя
	ИначеЕсли ТипСобытияОчереди = Перечисления.ТипыСобытийОчереди.СозданиеПользователя Тогда
		Результат.Вставить("Ссылка", Неопределено);
		Результат.Вставить("Почта", "");	
		
	// Перенос настроек пользователя
	ИначеЕсли ТипСобытияОчереди = Перечисления.ТипыСобытийОчереди.ПереносНастроекПользователя Тогда
		Результат.Вставить("Источник", "");
		Результат.Вставить("Приемник", "");
		Результат.Вставить("УдалитьНастройкиПослеКопирования", Ложь);
		
	ИначеЕсли ТипСобытияОчереди = Перечисления.ТипыСобытийОчереди.ОбновитьРолиУчастникаГруппы Тогда
		Результат.Вставить("СтароеЗначение", Неопределено);
		Результат.Вставить("НовоеЗначение", Неопределено);
		
	ИначеЕсли ТипСобытияОчереди = Перечисления.ТипыСобытийОчереди.ВладелецПродукта Тогда
		
		Если ВидСобытия = "ИзменениеВладельцаПродукта" Тогда
			Результат.Вставить("СтарыйВладелец", Справочники.Пользователи.ПустаяСсылка());
			Результат.Вставить("НовыйВладелец", Справочники.Пользователи.ПустаяСсылка());
			
		ИначеЕсли ВидСобытия = "ИзменениеПродуктаВОбъекте" Тогда
			Результат.Вставить("СтарыйПродукт", Справочники.Продукты.ПустаяСсылка());
			Результат.Вставить("НовыйПродукт", Справочники.Продукты.ПустаяСсылка());
		КонецЕсли;
		
	ИначеЕсли ТипСобытияОчереди = Перечисления.ТипыСобытийОчереди.ОбновитьВидРодительскогоПроекта Тогда
		Результат.Вставить("ВидПроекта", Неопределено);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру сообщения для передачи в подготовленные сообщения пользователя
// 
// Возвращаемое значение:
//   - Структура
//		* ТекстСообщения	 - Строка	 - текст сообщения
//		* КатегорияСообщения	 - ПеречислениеСсылка.КатегорииСообщенийПользователя	 - категория сообщения
//		* ДатаСобытия	 - Дата	 - дата возникновения события
//
Функция ПолучитьСтруктуруСообщения()
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстСообщения", "");
	Результат.Вставить("КатегорияСообщения", Перечисления.КатегорииСообщенийПользователя.ПустаяСсылка());
	Результат.Вставить("ДатаСобытия", ТекущаяДатаСеанса());
	Результат.Вставить("СообщениеSDMS", "");
	Результат.Вставить("Данные", "");
	
	Возврат Результат;
	
КонецФункции

#Область ОбработкаИзмененийОбъекта

// Начало обработки события изменения объекта.
//
// Параметры:
//  Ссылка	 - ДокументСсылка.ВнутреннееЗадание, СправочникСсылка.Проекты, ДокументСсылка.Задача, ДокументСсылка.ЗаявкаНаРазработку, СправочникСсылка.Знания	 - ссылка на объект
//  Данные	 - Структура	 - данные события
//		* ЭтоНовый	 - Булево	 - признак того что объект являлся новым
//		* Комментарий	 - Структура, Неопределено	 - структура комментария при смене статуса объекта. Неопределено - комментарий отсутствует.
//			** ТекстКомментария	 - Строка	 - текст комментария
//			** Общедоступный	 - Булево	 - признак того что комментарий является общедоступным
//		* Реквизиты	 - Структура	 - структура реквизитов и их значений до и после записи
//			** <ключ элемента структуры>	 - Строка	 - имя реквизита как оно задано в конфигураторе
//			** <значение элемента структуры>	 - Структура	 - значения реквизита до и после записи
//				*** СтароеЗначение	 - Произвольный	 - значение до записи
//				*** НовоеЗначение	 - Произвольный	 - значение после записи
//		* ТабличныеЧасти	 - Структура	 - структура табличных частей и их значений до и после записи
//			** <ключ элемента структуры>	 - Строка	 - название табличной части как оно задано в конфигураторе
//			** <значение элемента структуры>	 - Структура	 - добавленные и удаленные значения табличной части
//				*** Добавленные	 - Массив	 - добавленные значения
//				*** Удаленные	 - Массив	 - удаленные значения
//  Автор	 - СправочникСсылка.Пользователи	 - автор изменений
//  Период	 - Дата	 - дата выполнения изменений
// 
// Возвращаемое значение:
//   - Структура
//		* Успешно	 - Булево	 - признак успешной обработки события
//		* Сообщение	 - Строка	 - сообщение обошибке в случае неудачной обработки события
//
Функция ОбработатьИзменениеОбъекта(Знач Ссылка, Знач Данные, Знач Автор, Знач Период)
	
	Результат = Новый Структура("Успешно, Сообщение", Истина, "");
	
	РезультатОбработки = Неопределено;
	ТипОбъекта = ТипЗнч(Ссылка);
	
	// Задачи
	Если ТипОбъекта = Тип("ДокументСсылка.Задача") Тогда
		РезультатОбработки = ОбработатьИзменениеЗадачи(Ссылка, Данные, Автор, Период);
		
	// Заявки на разработку
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
		РезультатОбработки = ОбработатьИзменениеЗаявкиНаРазработку(Ссылка, Данные, Автор, Период);
		
	// Внутренние задания
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ВнутреннееЗадание") Тогда
		РезультатОбработки = ОбработатьИзменениеВнутреннегоЗадания(Ссылка, Данные, Автор, Период);
		
	// Проекты
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Проекты") Тогда
		РезультатОбработки = ОбработатьИзменениеПроекта(Ссылка, Данные, Автор, Период);
		
	// Филиалы
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Филиалы") Тогда
		РезультатОбработки = ОбработатьИзменениеФилиала(Ссылка, Данные, Период);
		
	// Продукты
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Продукты") Тогда
		РезультатОбработки = ОбработатьИзменениеПродукта(Ссылка, Данные);
		
	// Пользователи
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Пользователи") Тогда
		РезультатОбработки = ОбработатьИзменениеПользователя(Ссылка, Данные, Автор, Период);
		
	// Общее
	Иначе
		РезультатОбработки = ОбработатьИзменение(Ссылка, Данные, Автор, Период);
	КонецЕсли;
	
	ИнтеграцияДополнительныхПодсистем.ДополнитьРезультатОбработки(РезультатОбработки, Ссылка, Данные, Период);
	
	// Если есть результат обработки, то произведем
	// запись в историю и подготовленные сообщения.
	Если РезультатОбработки <> Неопределено Тогда
		Результат = СохранитьРезультатОбработки(Ссылка, Автор, РезультатОбработки);
	Иначе
		Результат.Успешно = Ложь;
		Результат.Сообщение = "На найдено обработчика для объекта " + Строка(Ссылка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ОбработчикиПоТипамОбъектов

#Область ОписаниеФункций

// ЕДИНОЕ ОПИСАНИЕ ПРОЦЕДУР ДАННОЙ ОБЛАСТИ
//
// Каждая функция выполняет обработку события объекта определенного типа.
// Такая реализация объясняется тем, что практически каждый тип объекта
// требуется обрабатывать с "особенностями", поэтому для упрощения кастомизации
// обработки изменения объектов разных типов реализованы отдельные процедуры.
//
// Параметры:
//  Ссылка	 - ДокументСсылка.ВнутреннееЗадание, СправочникСсылка.Проекты, ДокументСсылка.Задача, ДокументСсылка.ЗаявкаНаРазработку, СправочникСсылка.Знания	 - ссылка на объект
//  Данные	 - Структура	 - данные события
//		* ЭтоНовый	 - Булево	 - признак того что объект являлся новым
//		* Комментарий	 - Структура, Неопределено	 - структура комментария при смене статуса объекта. Неопределено - комментарий отсутствует.
//			** ТекстКомментария	 - Строка	 - текст комментария
//			** Общедоступный	 - Булево	 - признак того что комментарий является общедоступным
//		* Реквизиты	 - Структура	 - структура реквизитов и их значений до и после записи
//			** <ключ элемента структуры>	 - Строка	 - имя реквизита как оно задано в конфигураторе
//			** <значение элемента структуры>	 - Структура	 - значения реквизита до и после записи
//				*** СтароеЗначение	 - Произвольный	 - значение до записи
//				*** НовоеЗначение	 - Произвольный	 - значение после записи
//		* ТабличныеЧасти	 - Структура	 - структура табличных частей и их значений до и после записи
//			** <ключ элемента структуры>	 - Строка	 - название табличной части как оно задано в конфигураторе
//			** <значение элемента структуры>	 - Структура	 - добавленные и удаленные значения табличной части
//				*** Добавленные	 - Массив	 - добавленные значения
//				*** Удаленные	 - Массив	 - удаленные значения
//  Автор	 - СправочникСсылка.Пользователи	 - автор изменений
//  Период	 - Дата	 - дата выполнения изменений
// 
// Возвращаемое значение:
//   - Структура
//		* ОтправлятьСообщения	 - Булево	 - признак того что требуется производить запись в РегистрСведений.ПодготовленныеСообщенияПользователяПоКатегориям
//		* ТаблицаИзменений	 - ТаблицаЗначений	 - таблица изменений реквизитов и табличных частей объекта
//			** ТекстСообщения	 - Строка	 - текст сообщения об измении реквизита или табличной части
//			** Категория	 - ПеречислениеСсылка.КатегорииСобытийИсторияИзменений	 - категория сообщения, к которой отностится изменение
//			** ИмяРеквизита	 - Строка	 - имя реквизита как оно задано в конфигураторе
//			** Период	 - Дата	 - дата выполнения изменений, которая будет записана в историю изменения объекта по событиям
//

#КонецОбласти

Функция ОбработатьИзменение(Знач Ссылка, Знач Данные, Знач Автор, Знач Период)
	
	Результат = Новый Структура;
	Результат.Вставить("ОтправлятьСообщения", Ложь); // не будем отправлять сообщение об изменении
	Результат.Вставить("ТаблицаИзменений", Неопределено); // не будем добавлять в историю изменений
	
	Если Данные.ЭтоНовый Тогда
		// Запись в историю
		ДобавитьВИсториюСозданиеОбъекта(Ссылка, Период, Автор);
	Иначе
		// Получение таблицы для записи изменений
		Результат.ТаблицаИзменений = ПолучитьТаблицуИзменений();
		
		// Обработка изменения значений реквизитов и табличных частей
		ОбработатьИзменениеРеквизитов(Результат.ТаблицаИзменений, Данные.Реквизиты, Период);
		ОбработатьИзменениеТабличныхЧастей(Результат.ТаблицаИзменений, Данные.ТабличныеЧасти, Период, Ссылка);
		ОбработатьИзменениеДопРеквизитов(Результат.ТаблицаИзменений, Данные.ДопРеквизиты, Период, Ссылка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьИзменениеВнутреннегоЗадания(Знач Ссылка, Знач Данные, Знач Автор, Знач Период)
	
	Результат = Новый Структура;
	Результат.Вставить("ОтправлятьСообщения", Истина);
	Результат.Вставить("ТаблицаИзменений", Неопределено);
	
	Если Данные.ЭтоНовый Тогда
		// Запись в историю
		ДобавитьВИсториюСозданиеОбъекта(Ссылка, Период, Автор);
		
		// Отправка сообщения о создании объекта
		ТекстСообщения = ПолучитьТекстСообщенияСозданияОбъекта(Период, Строка(Автор));
		
		// Дополнение текста сообщения
		Если Данные.Реквизиты.Свойство("Назначена") И ЗначениеЗаполнено(Данные.Реквизиты.Назначена.НовоеЗначение) Тогда
			
			ШаблонЗначения = ПолучитьШаблонИзмененияРеквизита("Назначена", "", Строка(Данные.Реквизиты.Назначена.НовоеЗначение));
			ТекстСообщения = ТекстСообщения + ШаблонЗначения;
			
		КонецЕсли;
		
		ДобавитьСообщениеОСозданииОбъекта(Ссылка, ТекстСообщения, Автор, Период);
	Иначе
		// Получение таблицы для записи изменений
		Результат.ТаблицаИзменений = ПолучитьТаблицуИзменений();
		
		// Обработка изменения значений реквизитов и табличных частей
		ОбработатьИзменениеРеквизитов(Результат.ТаблицаИзменений, Данные.Реквизиты, Период,, Ссылка);
		ОбработатьИзменениеТабличныхЧастей(Результат.ТаблицаИзменений, Данные.ТабличныеЧасти, Период, Ссылка);
		ОбработатьИзменениеДопРеквизитов(Результат.ТаблицаИзменений, Данные.ДопРеквизиты, Период, Ссылка);
		
		// Дополнительно: если было изменение статуса и добавление комментария,
		// то требуется добавить запись в регистр комментариев
		Если Данные.Реквизиты.Свойство("Статус") И Данные.Комментарий <> Неопределено Тогда
			ДобавитьКомментарий(Ссылка, Период, Автор, Данные);
		КонецЕсли;
		
		// Дополнительно: если было изменение продукта в проектах и внутренних заданиях,
		// нужно поставить в очередь событие изменение продукта в объекте
		Если Данные.Реквизиты.Свойство("Продукт") Тогда
			СтарыйПродукт = Данные.Реквизиты.Продукт.СтароеЗначение;
			НовыйПродукт = Данные.Реквизиты.Продукт.НовоеЗначение;
			ИзменениеПродуктаВОбъекте(Ссылка, СтарыйПродукт, НовыйПродукт);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьИзменениеЗадачи(Знач Ссылка, Знач Данные, Знач Автор, Знач Период)
	
	Результат = Новый Структура;
	Результат.Вставить("ОтправлятьСообщения", Истина);
	Результат.Вставить("ТаблицаИзменений", Неопределено);
	
	Если Данные.ЭтоНовый Тогда		
		// Запись в историю
		ДобавитьВИсториюСозданиеОбъекта(Ссылка, Период, Автор);
		
		// Отправка сообщения о создании объекта
		ТекстСообщения = ПолучитьТекстСообщенияСозданияОбъекта(Период, Строка(Автор));
		
		// Измененные реквизиты
		СтрокаЗначений = "";
		// Дополнение текста сообщения
		Если Данные.Реквизиты.Свойство("Назначена") И ЗначениеЗаполнено(Данные.Реквизиты.Назначена.НовоеЗначение) Тогда
			ШаблонЗначения = ПолучитьШаблонИзмененияРеквизита("Назначена", "", Строка(Данные.Реквизиты.Назначена.НовоеЗначение));
			СтрокаЗначений = ШаблонЗначения;
		КонецЕсли;
		
		// Дополнение текста сообщения
		Если Данные.Реквизиты.Свойство("ОценкаТрудозатрат") И ЗначениеЗаполнено(Данные.Реквизиты.ОценкаТрудозатрат.НовоеЗначение) Тогда
			КоличествоЧасов = Данные.Реквизиты.ОценкаТрудозатрат.НовоеЗначение;
			Время = СтрокаСЧислом(";%1 час;%1 часа;%1 часа;%1 часов;%1 часа", КоличествоЧасов, ВидЧисловогоЗначения.Количественное);
			ШаблонЗначения = ПолучитьШаблонИзмененияРеквизита("Оценка трудозатрат", "", Время);
			СтрокаЗначений = СтрокаЗначений + ШаблонЗначения;
		КонецЕсли;
		
		// Если есть установленные реквизиты, то добавим их к тексту сообщения
		Если НЕ ПустаяСтрока(СтрокаЗначений) Тогда
			ТекстСообщения = ТекстСообщения + СтрокаЗначений;
		КонецЕсли;
		
		ДобавитьСообщениеОСозданииОбъекта(Ссылка, ТекстСообщения, Автор, Период);
		
		Если НЕ ИнтеграцияДополнительныхПодсистем.ИзмененияИнициированыJira(Данные) Тогда
			ИнтеграцияДополнительныхПодсистем.ДобавитьЗаданиеСоздатьИнцидентJira(Ссылка);	
		КонецЕсли;
	Иначе
		// Получение таблицы для записи изменений
		Результат.ТаблицаИзменений = ПолучитьТаблицуИзменений();
		
		// Обработка изменения значений реквизитов и табличных частей
		ОбработатьИзменениеРеквизитов(Результат.ТаблицаИзменений, Данные.Реквизиты, Период, "ОписаниеИзменилось", Ссылка);
		ОбработатьИзменениеТабличныхЧастей(Результат.ТаблицаИзменений, Данные.ТабличныеЧасти, Период, Ссылка);
		ОбработатьИзменениеДопРеквизитов(Результат.ТаблицаИзменений, Данные.ДопРеквизиты, Период, Ссылка, "ЧекЛистТестирования");
		
		// Дополнительно: если было изменение планового времени задачи,
		// то требуется оповестить об этом руководителя филиала
		Если Данные.Реквизиты.Свойство("ОценкаТрудозатрат") Тогда
			Трудозатраты = Данные.Реквизиты.ОценкаТрудозатрат;
			
			Если ЗначениеЗаполнено(Трудозатраты.СтароеЗначение) И Трудозатраты.НовоеЗначение > Трудозатраты.СтароеЗначение Тогда
				ОповеститьРуководителяФилиалаОбИзмененииПлановогоВремени(Ссылка, Автор, Результат.ТаблицаИзменений);
			КонецЕсли;
		КонецЕсли;
		
		// Дополнительно: если было изменение статуса и добавление комментария,
		// то требуется добавить запись в регистр комментариев
		Если Данные.Реквизиты.Свойство("Статус") И Данные.Комментарий <> Неопределено Тогда
			ДобавитьКомментарий(Ссылка, Период, Автор, Данные);
		КонецЕсли;
		
		ИзменилсяИсполнитель = Данные.Реквизиты.Свойство("Назначена");
		ИзменилосьНазначение = Данные.Реквизиты.Свойство("Назначение");
		
		ИзмененоПримечаниеРазработчиков = (Данные.Свойство("ИзмененоПримечаниеРазработчиков") И Данные.ИзмененоПримечаниеРазработчиков);
		ИзмененоПримечаниеТестировщиков = (Данные.Свойство("ИзмененоПримечаниеТестировщиков") И Данные.ИзмененоПримечаниеТестировщиков);
		
		Если НЕ ИнтеграцияДополнительныхПодсистем.ИзмененияИнициированыJira(Данные)
			И (Данные.Реквизиты.Свойство("Наименование")
			ИЛИ Данные.Реквизиты.Свойство("Направление")
			ИЛИ Данные.Реквизиты.Свойство("Статус")
			ИЛИ Данные.ДопРеквизиты.Свойство("ЧекЛистТестирования")
			ИЛИ ИзменилосьНазначение
			ИЛИ ИзменилсяИсполнитель
			ИЛИ Данные.ОписаниеИзменилось
			ИЛИ ИзмененоПримечаниеРазработчиков
			ИЛИ ИзмененоПримечаниеТестировщиков) Тогда
			
			ДанныеЗадания = Новый Структура;
			ДанныеЗадания.Вставить("ИзменилсяИсполнитель", ИзменилсяИсполнитель);
			ДанныеЗадания.Вставить("ИзменилосьНазначение", ИзменилосьНазначение);
			ДанныеЗадания.Вставить("ОписаниеИзменилось", Данные.ОписаниеИзменилось);

			ИнтеграцияДополнительныхПодсистем.ДобавитьЗаданиеСинхронизироватьСJira(Ссылка, ДанныеЗадания);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьИзменениеЗаявкиНаРазработку(Знач Ссылка, Знач Данные, Знач Автор, Знач Период)
	
	Результат = Новый Структура;
	Результат.Вставить("ОтправлятьСообщения", Истина);
	Результат.Вставить("ТаблицаИзменений", Неопределено);
	
	ВыведенаИзЧерновика = (Данные.Реквизиты.Свойство("Черновик")
		И (НЕ Данные.Реквизиты.Черновик.НовоеЗначение) И ЭтаЗаявкаОтсутствуетВИстории(Ссылка));
		
	ЭтоЧерновик = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Черновик");
	
	Если Данные.ЭтоНовый ИЛИ ВыведенаИзЧерновика Тогда
		ДобавитьВИсториюСозданиеОбъекта(Ссылка, Период, Автор);
		
		// Cообщение о создании объекта
		ТекстСообщения = ПолучитьТекстСообщенияСозданияОбъекта(Период, Строка(Автор));	
		ДобавитьСообщениеОСозданииОбъекта(Ссылка, ТекстСообщения, Автор, Период);
	Иначе
		Результат.ТаблицаИзменений = ПолучитьТаблицуИзменений();
		
		Если Данные.ТабличныеЧасти.Свойство("СистемыРазработки") Тогда
			ДобавленныеСистемы = Данные.ТабличныеЧасти.СистемыРазработки.Добавлено;
			ОповеститьПоСистемам = Новый СписокЗначений;
			
			Для Каждого Система Из ДобавленныеСистемы Цикл			
				ОповеститьПоСистемам.Добавить(Система.ЗначениеКлючевогоПоля);
			КонецЦикла;
			Документы.ЗаявкаНаРазработку.ОповеститьОДобавленииСистемы(Ссылка, ОповеститьПоСистемам, Автор, Период);
		КонецЕсли;
	
		// Обработка изменения значений реквизитов и табличных частей
		ОбработатьИзменениеРеквизитов(Результат.ТаблицаИзменений, Данные.Реквизиты, Период,, Ссылка);
		ОбработатьИзменениеТабличныхЧастей(Результат.ТаблицаИзменений, Данные.ТабличныеЧасти, Период, Ссылка);
		ОбработатьИзменениеДопРеквизитов(Результат.ТаблицаИзменений, Данные.ДопРеквизиты, Период, Ссылка);
		
		// Дополнительно: если был установлен финальный статус и добавлен
		// комментарий, то требуется добавить запись в регистр комментариев
		Если Данные.Реквизиты.Свойство("ФинальныйСтатус") И Данные.Комментарий <> Неопределено Тогда
			ДобавитьКомментарий(Ссылка, Период, Автор, Данные);
		КонецЕсли;
		
		Если НЕ ЭтоЧерновик И Данные.Реквизиты.Свойство("ЮридическоеЛицо") Тогда
			ИнтеграцияДополнительныхПодсистем.ОбновитьИнцидентJiraЗаявкой(Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьИзменениеПользователя(Знач Ссылка, Знач Данные, Знач Автор, Знач Период)
	
	Результат = Новый Структура;
	Результат.Вставить("ОтправлятьСообщения", Ложь); // не будем отправлять сообщение об изменении
	Результат.Вставить("ТаблицаИзменений", Неопределено); // не будем добавлять в историю изменений
	
	Если Данные.ЭтоНовый Тогда
		// Запись в историю
		ДобавитьВИсториюСозданиеОбъекта(Ссылка, Период, Автор);
	Иначе
		// Получение таблицы для записи изменений
		Результат.ТаблицаИзменений = ПолучитьТаблицуИзменений();
		
		// Обработка изменения значений реквизитов и табличных частей
		ОбработатьИзменениеРеквизитов(Результат.ТаблицаИзменений, Данные.Реквизиты, Период);
		ОбработатьИзменениеТабличныхЧастей(Результат.ТаблицаИзменений, Данные.ТабличныеЧасти, Период, Ссылка);
		ОбработатьИзменениеДопРеквизитов(Результат.ТаблицаИзменений, Данные.ДопРеквизиты, Период, Ссылка);
		
		// При смене почты необходимо установить новый доменный логин для автоматического входа в sdms 
		Если Данные.Реквизиты.Свойство("Почта") Тогда	
			УстановитьЛогинПриСменеПочты(Ссылка, Данные.Реквизиты.Почта.НовоеЗначение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьИзменениеПроекта(Знач Ссылка, Знач Данные, Знач Автор, Знач Период)
	
	Результат = Новый Структура;
	Результат.Вставить("ОтправлятьСообщения", Истина);
	Результат.Вставить("ТаблицаИзменений", Неопределено);
	
	Если Данные.ЭтоНовый Тогда
		// Запись в историю
		ДобавитьВИсториюСозданиеОбъекта(Ссылка, Период, Автор);
		
		// Отправка сообщения о создании объекта
		ТекстСообщения = ПолучитьТекстСообщенияСозданияОбъекта(Период, Строка(Автор));
		
		ДобавитьСообщениеОСозданииОбъекта(Ссылка, ТекстСообщения, Автор, Период);
	Иначе
		// Получение таблицы для записи изменений
		Результат.ТаблицаИзменений = ПолучитьТаблицуИзменений();
		
		// Обработка изменения значений реквизитов и табличных частей
		ОбработатьИзменениеРеквизитов(Результат.ТаблицаИзменений, Данные.Реквизиты, Период,, Ссылка);
		ОбработатьИзменениеТабличныхЧастей(Результат.ТаблицаИзменений, Данные.ТабличныеЧасти, Период, Ссылка);
		ОбработатьИзменениеДопРеквизитов(Результат.ТаблицаИзменений, Данные.ДопРеквизиты, Период, Ссылка);
		
		// Дополнительно: если было изменение статуса и добавление комментария,
		// то требуется добавить запись в регистр комментариев
		Если Данные.Реквизиты.Свойство("Статус") И Данные.Комментарий <> Неопределено Тогда
			ДобавитьКомментарий(Ссылка, Период, Автор, Данные);
		КонецЕсли;
		
		// Дополнительно: если было изменение продукта в проектах и внутренних заданиях,
		// нужно поставить в очередь событие изменение продукта в объекте
		Если Данные.Реквизиты.Свойство("Продукт") Тогда
			СтарыйПродукт = Данные.Реквизиты.Продукт.СтароеЗначение;
			НовыйПродукт = Данные.Реквизиты.Продукт.НовоеЗначение;
			ИзменениеПродуктаВОбъекте(Ссылка, СтарыйПродукт, НовыйПродукт);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьИзменениеПродукта(Знач Ссылка, Знач Данные)
	
	Результат = Новый Структура;
	Результат.Вставить("ОтправлятьСообщения", Ложь);
	Результат.Вставить("ТаблицаИзменений", Неопределено);
	
	Если НЕ Данные.ЭтоНовый Тогда
		Если Данные.Реквизиты.Свойство("Ответственный") Тогда
			СтарыйВладелец = Данные.Реквизиты.Ответственный.СтароеЗначение;
			НовыйВладелец = Данные.Реквизиты.Ответственный.НовоеЗначение;
			ИзменениеВладельцаПродукта(Ссылка, СтарыйВладелец, НовыйВладелец);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьИзменениеФилиала(Знач Ссылка, Знач Данные, Знач Период)
	
	Результат = Новый Структура;
	Результат.Вставить("ОтправлятьСообщения", Ложь); // не будем отправлять сообщение об изменении
	Результат.Вставить("ТаблицаИзменений", Неопределено); // не будем добавлять в историю изменений
	
	Если НЕ Данные.ЭтоНовый Тогда
		// Получение таблицы для записи изменений
		Результат.ТаблицаИзменений = ПолучитьТаблицуИзменений();
		
		// Обработка изменения значений реквизитов и табличных частей
		ОбработатьИзменениеРеквизитов(Результат.ТаблицаИзменений, Данные.Реквизиты, Период);
		ОбработатьИзменениеТабличныхЧастей(Результат.ТаблицаИзменений, Данные.ТабличныеЧасти, Период, Ссылка);
		ОбработатьИзменениеДопРеквизитов(Результат.ТаблицаИзменений, Данные.ДопРеквизиты, Период, Ссылка);
		
		РегистрыСведений.СтатусыЗаявокПоСистемамФилиалов.РассчитатьСтатусыПоЗаявкамФилиала(Ссылка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

Функция АктуализироватьДанныеОПользователе(Знач Пользователь)
	
	Период = ТекущаяДатаСеанса();
	ИмяСобытия = "Очередь событий на обработку.Актуализация пользователя";
	Результат = Новый Структура("Успешно, Сообщение", Истина, "");
	
	События = Новый Массив;
	События.Добавить(Перечисления.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение);
	События.Добавить(Перечисления.СобытияПоЛичнымДелам.ПринятНаДолжность);
	События.Добавить(Перечисления.СобытияПоЛичнымДелам.ПереведенВКоманду);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЛичныеДелаСрезПоследних.Событие КАК Событие,
	|	ЛичныеДелаСрезПоследних.Данные КАК Данные
	|ПОМЕСТИТЬ СрезЛичныхДел
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(
	|			&Период,
	|			Сотрудник = &Сотрудник
	|				И Событие В (&События)) КАК ЛичныеДелаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СрезЛичныхДелДолжность.Данные, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК Должность,
	|	ЕСТЬNULL(СрезЛичныхДелКоманда.Данные, ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК Команда,
	|	СрезЛичныхДелФилиал.Данные КАК Филиал,
	|	ЕСТЬNULL(Филиалы.Родитель, ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК ФилиалКоманды
	|ИЗ
	|	СрезЛичныхДел КАК СрезЛичныхДелФилиал
	|		ЛЕВОЕ СОЕДИНЕНИЕ СрезЛичныхДел КАК СрезЛичныхДелКоманда
	|		ПО (СрезЛичныхДелКоманда.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВКоманду))
	|		ЛЕВОЕ СОЕДИНЕНИЕ СрезЛичныхДел КАК СрезЛичныхДелДолжность
	|		ПО (СрезЛичныхДелДолжность.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПринятНаДолжность))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО (СрезЛичныхДелКоманда.Данные = Филиалы.Ссылка)
	|ГДЕ
	|	СрезЛичныхДелФилиал.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Филиал КАК Филиал,
	|	Пользователи.Должность КАК Должность
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &Сотрудник";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Сотрудник", Пользователь);
	Запрос.УстановитьПараметр("События", События);
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Если НЕ Пакет[1].Пустой() Тогда
		ВыборкаПользователь = Пакет[2].Выбрать();
		ВыборкаПользователь.Следующий();
		
		ВыборкаСрез = Пакет[1].Выбрать();
		ВыборкаСрез.Следующий();
		
		Если ВыборкаПользователь.Филиал <> ВыборкаСрез.Филиал ИЛИ ВыборкаПользователь.Должность <> ВыборкаСрез.Должность Тогда
			ПользовательОбъект = Пользователь.ПолучитьОбъект();
			ПользовательОбъект.Филиал = ВыборкаСрез.Филиал;
			ПользовательОбъект.Должность = ВыборкаСрез.Должность;
			
			НачатьТранзакцию();
			
			Попытка
				ПользовательОбъект.Записать();
				
				Если ЗначениеЗаполнено(ВыборкаСрез.Команда) И ВыборкаСрез.Филиал <> ВыборкаСрез.ФилиалКоманды Тогда
					РегистрыСведений.ЛичныеДела.ПереводВКоманду(Пользователь, Справочники.Филиалы.ПустаяСсылка());
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				Результат.Успешно = Ложь;
				Результат.Сообщение = ТекстОшибки;
				
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Пользователи,
					Пользователь, "Не удалось записать по причине: " + ТекстОшибки);
			КонецПопытки;
		КонецЕсли;
	Иначе
		Результат.Успешно = Ложь;
		Результат.Сообщение = "Не удалось получить срез личных дел.";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет запись события создания объекта
//
// Параметры:
//  Ссылка	 - ДокументСсылка.ВнутреннееЗадание, СправочникСсылка.Проекты, ДокументСсылка.Задача, ДокументСсылка.ЗаявкаНаРазработку, СправочникСсылка.Знания - ссылка на объект
//  Период	 - Дата	 - дата создания события создания объекта
//  Автор	 - СправочникСсылка.Пользователи	 - ссылка на автора события
//
Процедура ДобавитьВИсториюСозданиеОбъекта(Знач Ссылка, Знач Период, Знач Автор)
	
	ДанныеСтруктура = Новый Структура("Событие", "СозданиеОбъекта");
	
	СтруктураСообщение = Новый Структура;
	СтруктураСообщение.Вставить("ТекстСообщения", "Объект <b>создан</b> и <b>записан</b> в базу данных.");
	СтруктураСообщение.Вставить("Данные", ЗаписатьЗначениеJSON(ДанныеСтруктура));
	СтруктураСообщение.Вставить("Категория", Перечисления.КатегорииСобытийИсторияИзменений.Главное);
	СтруктураСообщение.Вставить("Период", Период);
	
	РегистрыСведений.ИсторияИзмененийОбъектовПоСобытиям.Добавить(Ссылка, СтруктураСообщение, Автор);
	
КонецПроцедуры

// Добавляет новую строку в таблицу изменения и производит ее заполнение
//
// Параметры:
//  ТаблицаИзменений	 - ТаблицаЗначений	 - таблица изменений реквизитов и табличных частей объекта
//		* ТекстСообщения	 - Строка	 - текст сообщения об измении реквизита или табличной части
//		* Категория	 - ПеречислениеСсылка.КатегорииСобытийИсторияИзменений	 - категория сообщения, к которой отностится изменение
//		* ИмяРеквизита	 - Строка	 - имя реквизита как оно задано в конфигураторе
//		* Период	 - Дата	 - дата выполнения изменений, которая будет записана в историю изменения объекта по событиям
//  ИмяРеквизита		 - Строка	 - имя реквизита как оно задано в конфигураторе
//  ТекстСообщения		 - Строка	 - текст изменения
//  Период				 - Дата	 - дата выполнения изменения (из регистра очереди)
//
Процедура ДобавитьВТаблицуИстории(ТаблицаИзменений, Знач ИмяРеквизита, Знач ТекстСообщения, 
	Знач Данные, Знач Период, ТекстSDMS = "")
	
	СтрокаТаблицы = ТаблицаИзменений.Добавить();
	СтрокаТаблицы.ИмяРеквизита = ИмяРеквизита;
	СтрокаТаблицы.ТекстСообщения = ТекстСообщения;
	СтрокаТаблицы.ТекстSDMS = ТекстSDMS;
	СтрокаТаблицы.Данные = Данные;
	СтрокаТаблицы.Категория = ОбщегоНазначения.ОпределитьКатегориюСообщения(ИмяРеквизита);
	СтрокаТаблицы.Период = Период;
	
КонецПроцедуры

Процедура ДобавитьКомментарий(Знач Ссылка, Знач Дата, Знач Пользователь, Знач ДанныеКомментария)
	
	ТекстКомментария = ДанныеКомментария.Комментарий.ТекстКомментария;
	
	Если ПустаяСтрока(ТекстКомментария) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеКомментария.Комментарий.Общедоступный Тогда
		ТекстБезТегов = ОбщегоНазначения.ПолучитьТекстИзHTML(ТекстКомментария);
		ТекстБезТегов = СтрЗаменить(ТекстБезТегов, Символы.ПС + Символы.ПС, Символы.ПС);
		
		Если ЗначениеЗаполнено(ТекстБезТегов) 
			И ИнтеграцияДополнительныхПодсистемПовтИсп.ТребуетсяОтправкаКомментарияИлиВложенияВJira(Ссылка) Тогда
			
			ИнтеграцияДополнительныхПодсистем.ОтправитьКомментарийВJira("", ТекстБезТегов, , Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	ШаблоныПисьма = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма();
	
	ЧастиСообщения = Новый Массив;
	
	ШаблонПисьма = ШаблоныПисьма.БлокОсновногоТекста;
	
	ТекстШаблона = СтрЗаменить(ШаблоныПисьма.ЗаголовокСобытия, "<!-- event_date -->", Формат(Дата, ШаблоныПисьма.ФорматДаты));
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- user_name -->", Строка(Пользователь));
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- event -->", "добавил(-а) комментарий:");
	
	ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- content -->", ТекстШаблона);
	ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- font_size -->", "14px");
	
	ЧастиСообщения.Добавить(ШаблонПисьма);
	
	ШаблонПисьма = СтрЗаменить(ШаблоныПисьма.Комментарий, "<!-- content -->", ТекстКомментария);
	
	ЧастиСообщения.Добавить(ШаблонПисьма);
	
	ТекстСообщения = СтрСоединить(ЧастиСообщения, Символы.ПС);

	ОбщегоНазначения.ОтправитьОповещениеПользователям(Ссылка, ТекстСообщения, ДанныеКомментария.Комментарий.Идентификатор, 
		Дата, ДанныеКомментария.Комментарий.Общедоступный, Пользователь);
	
КонецПроцедуры

// Добавляет в РегистрыСведений.ПодготовленныеСообщенияПользователяПоКатегориям сообщение о создании объекта
//
// Параметры:
//  Ссылка			 - ДокументСсылка.ВнутреннееЗадание, СправочникСсылка.Проекты, ДокументСсылка.Задача, ДокументСсылка.ЗаявкаНаРазработку, СправочникСсылка.Знания - ссылк на объект
//  ТекстСообщения	 - Строка	 - текст сообщения о создании объект
//  Автор			 - СправочникСсылка.Пользователи	 - автор события
//  Период			 - Дата	 - дата события
//
Процедура ДобавитьСообщениеОСозданииОбъекта(Знач Ссылка, Знач ТекстСообщения, Знач Автор, Знач Период)
	
	СтруктураСообщение = Новый Структура;
	СтруктураСообщение.Вставить("ТекстСообщения", ТекстСообщения);
	СтруктураСообщение.Вставить("СообщениеSDMS", " создал(-а) объект.");
	СтруктураСообщение.Вставить("КатегорияСообщения", Перечисления.КатегорииСообщенийПользователя.СозданиеОбъектов);
	СтруктураСообщение.Вставить("Период", Период);
	
	Получатели = ОпределитьПолучателейПоСсылкеНаОбъект(Ссылка, Автор);
	
	РегистрыСведений.ПодготовленныеСообщенияПользователяПоКатегориям.Добавить(Получатели, Ссылка, СтруктураСообщение, Автор);
	
КонецПроцедуры

Процедура ЗаполнитьКоличествоПодчиненныхЗадач(Знач Объект)
	
	ОбщегоНазначения.ПолучитьКоличествоПодчиненныхЗадач(Объект, Истина);
	
КонецПроцедуры 

Процедура ОбновитьПроектВОчередиЗаявок(Знач Ссылка)
	
	ОбъектОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ОбъектОснование"); 
	
	Если НЕ ЗначениеЗаполнено(ОбъектОснование) Тогда
		Проект = Справочники.Проекты.ПустаяСсылка();
	ИначеЕсли ТипЗнч(ОбъектОснование) = Тип("СправочникСсылка.Проекты") Тогда
		Проект = ОбъектОснование;
	Иначе
		Проект = ОбщегоНазначения.НайтиБлижайшийПроект(Ссылка);
	КонецЕсли;
	
	РегистрыСведений.ОчередиЗаявок.ОбновитьПроектЗаявки(Ссылка, Проект);
	
КонецПроцедуры
		
Процедура ОбработатьЗадачуГруппаТестирования(Знач Объект)
	
	// Проверим нужно ли добавить задачу в РС.ОчередьЗадачГруппыТестирования
	ОбработатьЗадачуВОчередиГруппыТестирования(Объект);
	
КонецПроцедуры

Функция ОбработатьИзменениеПризнакаИТ(Знач ЮрЛицо)
	
	Результат = Новый Структура("Успешно, Сообщение", Истина, "");

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Филиалы.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.IT) КАК ТипФилиала
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЮридическиеЛица КАК ЮридическиеЛица
	|		ПО Филиалы.ЮридическоеЛицо = ЮридическиеЛица.Ссылка
	|ГДЕ
	|	ЮридическиеЛица.Ссылка = &ЮрЛицо
	|	И ЮридическиеЛица.ЯвляетсяИТОрганизацией
	|	И Филиалы.ТипФилиала В (ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.НеIT), ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.ПустаяСсылка))
	|	И НЕ Филиалы.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Филиалы.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.НеIT)
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЮридическиеЛица КАК ЮридическиеЛица
	|		ПО Филиалы.ЮридическоеЛицо = ЮридическиеЛица.Ссылка
	|ГДЕ
	|	ЮридическиеЛица.Ссылка = &ЮрЛицо
	|	И НЕ ЮридическиеЛица.ЯвляетсяИТОрганизацией
	|	И Филиалы.ТипФилиала <> ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.НеIT)
	|	И НЕ Филиалы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ЮрЛицо", ЮрЛицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объектфилиал = Выборка.Ссылка.ПолучитьОбъект();
		Объектфилиал.ТипФилиала = Выборка.ТипФилиала;
		Объектфилиал.ОбменДанными.Загрузка = Истина;
		
		Попытка 
			ОбъектФилиал.Записать();
		Исключение
			Результат.Успешно = Ложь;
			Результат.Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Продолжить;
		КонецПопытки;
		
		РегистрыСведений.ПорядокЭтаповКанбана.ИзменитьЗаписи(Выборка.Ссылка, Выборка.ТипФилиала, Ложь);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьОбъектЭтапаКанбана(Знач Объект)
	
	// если это ВЗ, то нужно проверить заполнен ли порядок этапов для филиала
	// и заполнить если нет
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.ВнутреннееЗадание") Тогда
		РегистрыСведений.ПорядокЭтаповКанбана.ПроверитьЭтапы(Объект.Филиал);
	КонецЕсли;
	
	// Проверим нужно ли добавить задачу в РС.ОчередьКанбан
	РегистрыСведений.ОчередьКанбан.ОбработатьОбъектВОчередиКанбана(Объект);
	
КонецПроцедуры

Функция ЗначениеПоляЗаполнено(Знач Значение)
	
	ПустаяГруппа = Справочники.ГруппыЗаказчиковНаправлений.ПрочиеЗаказчики;
	ЗначениеЗаполнено = ЗначениеЗаполнено(Значение) И Значение <> ПустаяГруппа;
	
	Возврат ЗначениеЗаполнено;
	
КонецФункции

// Обновляет направление и юридическое лицо в трудозатратах объекта и трудозатратах всех подчиненных объектов
//
// Параметры:
//  Ссылка			 - ДокументСсылка.ЗаявкаНаРазработку	 - заявка, у которой изменилось направление или юридическое лицо
//  Направление		 - СправочникСсылка.НаправленияРазработки	 - текущиее направление заявки
//  ЮридическоеЛицо	 - СправочникСсылка.ЮридическиеЛица	 - текущиее юридическое лицо заявки
// 
// Возвращаемое значение:
//   - Структура
//		* Успешно	 - Булево	 - признак успешности операции
//		* Сообщение	 - Строка	 - сообщение об ошибке
//
Функция ОбновитьКлючевыеИзмеренияТрудозатрат(Знач Ссылка, Знач Направление, Знач ЮридическоеЛицо)
	
	Результат = Новый Структура("Успешно, Сообщение", Истина, "");
	ДатаЗапретаИзменения = КонецДня(Константы.ДатаЗапретаИзмененияДанных.Получить());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвязьОбъектовСЗаявкамиНаРазработку.Объект КАК Объект
	|ПОМЕСТИТЬ ОтобранныеОбъекты
	|ИЗ
	|	РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку КАК СвязьОбъектовСЗаявкамиНаРазработку
	|ГДЕ
	|	СвязьОбъектовСЗаявкамиНаРазработку.Заявка_Новая = &Ссылка
	|	И СвязьОбъектовСЗаявкамиНаРазработку.Объект <> СвязьОбъектовСЗаявкамиНаРазработку.ОбъектОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументТрудозатраты.Ссылка КАК Ссылка,
	|	ДокументТрудозатраты.Направление КАК Направление,
	|	ДокументТрудозатраты.ЮридическоеЛицо КАК ЮридическоеЛицо
	|ПОМЕСТИТЬ ДанныеТрудозатрат
	|ИЗ
	|	Документ.Трудозатраты КАК ДокументТрудозатраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтобранныеОбъекты КАК ОтобранныеОбъекты
	|		ПО ДокументТрудозатраты.Объект = ОтобранныеОбъекты.Объект
	|ГДЕ
	|	ДокументТрудозатраты.Проведен
	|	И ДокументТрудозатраты.Дата > &ДатаЗапретаИзменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТрудозатрат.Ссылка КАК Ссылка
	|ИЗ
	|	ДанныеТрудозатрат КАК ДанныеТрудозатрат
	|ГДЕ
	|	ДанныеТрудозатрат.Направление <> &Направление
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДанныеТрудозатрат.Ссылка
	|ИЗ
	|	ДанныеТрудозатрат КАК ДанныеТрудозатрат
	|ГДЕ
	|	ДанныеТрудозатрат.ЮридическоеЛицо <> &ЮридическоеЛицо";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Направление", Направление);
	Запрос.УстановитьПараметр("ЮридическоеЛицо", ЮридическоеЛицо);
	Запрос.УстановитьПараметр("ДатаЗапретаИзменения", ДатаЗапретаИзменения);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		НачатьТранзакцию();
		Попытка
			Пока Выборка.Следующий() Цикл
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.Заблокировать();
				
				ДокументОбъект.Направление = Направление;
				ДокументОбъект.ЮридическоеЛицо = ЮридическоеЛицо;
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			Результат.Успешно = Ложь;
			Результат.Сообщение = ТекстОшибки;
			
			ЗаписьЖурналаРегистрации("Очередь событий на обработку.Обновление данных трудозатраты", УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.Трудозатраты, Выборка.Ссылка, "Не удалось обновить данные трудозатраты по причине: " + ТекстОшибки);
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку описания изменения реквизита объекта
//
// Параметры:
//  Данные	 - КлючИЗначение	 - данные реквизита до и после записи
//		* Ключ	 - Строка	 - имя реквизита
//		* Значение	 - Структура	 - значение реквизита до и после записи
//			** СтароеЗначение	 - Произвольный	 - значение реквизита до записи
//			** НовоеЗначение	 - Произвольный	 - значение реквизита после записи
// 
// Возвращаемое значение:
//  Строка - описание изменения реквизита
//
Функция ОбработатьИзменениеРеквизита(Знач Данные)
	
	Результат = Новый Структура("ТекстовоеПредставление, Данные, ТекстSDMS");
	
	НовоеЗначение = ?(ЗначениеЗаполнено(Данные.Значение.НовоеЗначение), Данные.Значение.НовоеЗначение, "Незаполненное значение");
	
	Если ТипЗнч(НовоеЗначение) = Тип("Дата") Тогда
		НовоеЗначение = Формат(НовоеЗначение, "ДФ=dd.MM.yyyy");
	Иначе
		НовоеЗначение = Строка(НовоеЗначение);
	КонецЕсли;

	ИмяРеквизита = ПолучитьИмяРеквизита(Данные.Ключ);

	ДанныеСтруктура = Новый Структура;
	ДанныеСтруктура.Вставить("Событие", "ИзменениеРеквизита");
	ДанныеСтруктура.Вставить("Реквизит", ИмяРеквизита);

	ТипСтарогоЗначения = ТипЗнч(Данные.Значение.СтароеЗначение);
	Если ТипСтарогоЗначения <> Тип("Булево") И ЗначениеЗаполнено(Данные.Значение.СтароеЗначение) Тогда
		Если ТипСтарогоЗначения <> Тип("Дата") Тогда
			СтароеЗначение = Строка(Данные.Значение.СтароеЗначение);
		Иначе
			СтароеЗначение = Формат(Данные.Значение.СтароеЗначение, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		
		ДанныеСтруктура.Вставить("СтароеЗначение", СтароеЗначение);
	Иначе
		СтароеЗначение = Неопределено;
	КонецЕсли;
	
	ДанныеСтруктура.Вставить("НовоеЗначение", НовоеЗначение);
		
	Результат.ТекстовоеПредставление = ПолучитьШаблонИзмененияРеквизита(ИмяРеквизита,
		Данные.Значение.СтароеЗначение, Данные.Значение.НовоеЗначение);
		
	Результат.ТекстSDMS = " внес(-ла) изменения:";	
	Результат.Данные = ЗаписатьЗначениеJSON(ДанныеСтруктура);
	
	Возврат Результат;
	
КонецФункции

// Производит запись изменений реквизитов в таблицу изменений
//
// Параметры:
//  ТаблицаИзменений	 - ТаблицаЗначений	 - таблица изменений реквизитов и табличных частей объекта
//		* ТекстСообщения	 - Строка	 - текст сообщения об измении реквизита или табличной части
//		* Категория	 - ПеречислениеСсылка.КатегорииСобытийИсторияИзменений	 - категория сообщения, к которой отностится изменение
//		* ИмяРеквизита	 - Строка	 - имя реквизита как оно задано в конфигураторе
//		* Период	 - Дата	 - дата выполнения изменений, которая будет записана в историю изменения объекта по событиям
//	Реквизиты	 - Структура	 - структура реквизитов и их значений до и после записи
//		* <ключ элемента структуры>	 - Строка	 - имя реквизита как оно задано в конфигураторе
//		* <значение элемента структуры>	 - Структура	 - значения реквизита до и после записи
//			** СтароеЗначение	 - Произвольный	 - значение до записи
//			** НовоеЗначение	 - Произвольный	 - значение после записи
//  Период			 - Дата	 - дата выполнения изменений
//  Исключить		 - Строка	 - имена реквизитов, изменение которых требуется исключить из таблицы описания изменений
//  Ссылка		 - ЛюбаяСсылка	 - объект обработки очереди
//
Процедура ОбработатьИзменениеРеквизитов(ТаблицаИзменений, 
		Знач Реквизиты, Знач Период, Знач Исключить = "", Знач Ссылка = Неопределено)
	
	// Формирование массива имен реквизитов, которые требуется исключить из проверки
	Если ПустаяСтрока(Исключить) Тогда
		МассивИсключений = Новый Массив;
	Иначе
		Исключить = СтрЗаменить(Исключить, " ", "");
		МассивИсключений = СтрРазделить(Исключить, ",", Ложь);
	КонецЕсли;
	
	Для Каждого Реквизит Из Реквизиты Цикл
		// Если обрабатываемый реквизит отсутствует в исключениях
		Если МассивИсключений.Найти(Реквизит.Ключ) = Неопределено Тогда
			ОписаниеИзменения = ОбработатьИзменениеРеквизита(Реквизит);
			
			Если ТипЗнч(Реквизит.Значение.НовоеЗначение) <> Тип("ХранилищеЗначения") Тогда
				ДобавитьВТаблицуИстории(ТаблицаИзменений, Реквизит.Ключ, ОписаниеИзменения.ТекстовоеПредставление, 
					ОписаниеИзменения.Данные, Период, ОписаниеИзменения.ТекстSDMS);
			КонецЕсли;
			
			Если Реквизит.Ключ = "ОбъектОснование" И ЗначениеЗаполнено(Ссылка) Тогда 
				НовоеЗначение = Реквизит.Значение.НовоеЗначение;
				
				Если ЗначениеЗаполнено(НовоеЗначение) Тогда 
					НовыйРодитель = РегистрыСведений.ОбъектыВерхнегоУровняСтруктурыПодчиненности.ПолучитьПоОбъекту(НовоеЗначение);
				Иначе
					НовыйРодитель = Ссылка;
				КонецЕсли;
				
				РегистрыСведений.ОбъектыВерхнегоУровняСтруктурыПодчиненности.ПересчитатьВысшегоРодителя(Ссылка, НовыйРодитель);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Производит запись изменений доп.реквизитов в таблицу изменений
//
// Параметры:
//  ТаблицаИзменений	 - ТаблицаЗначений	 - таблица изменений реквизитов и табличных частей объекта
//		* ТекстСообщения	 - Строка	 - текст сообщения об измении реквизита или табличной части
//		* Категория	 - ПеречислениеСсылка.КатегорииСобытийИсторияИзменений	 - категория сообщения, к которой отностится изменение
//		* ИмяРеквизита	 - Строка	 - имя реквизита как оно задано в конфигураторе
//		* Период	 - Дата	 - дата выполнения изменений, которая будет записана в историю изменения объекта по событиям
//	Реквизиты	 - Структура	 - структура реквизитов и их значений до и после записи
//		* <ключ элемента структуры>	 - Строка	 - имя реквизита как оно задано в конфигураторе
//		* <значение элемента структуры>	 - Структура	 - значения реквизита до и после записи
//			** СтароеЗначение	 - Произвольный	 - значение до записи
//			** НовоеЗначение	 - Произвольный	 - значение после записи
//  Период			 - Дата	 - дата выполнения изменений
//  Ссылка		 - ЛюбаяСсылка	 - объект обработки очереди
//
Процедура ОбработатьИзменениеДопРеквизитов(ТаблицаИзменений, Знач ДопРеквизиты, Знач Период, Знач Ссылка = Неопределено, Знач Исключить = "")
	
	// Формирование массива имен реквизитов, которые требуется исключить из проверки
	Если ПустаяСтрока(Исключить) Тогда
		МассивИсключений = Новый Массив;
	Иначе
		Исключить = СтрЗаменить(Исключить, " ", "");
		МассивИсключений = СтрРазделить(Исключить, ",", Ложь);
	КонецЕсли;
	
	Для Каждого Реквизит Из ДопРеквизиты Цикл
		// Если обрабатываемый реквизит отсутствует в исключениях
		Если МассивИсключений.Найти(Реквизит.Ключ) = Неопределено Тогда
			ОписаниеИзменения = ОбработатьИзменениеРеквизита(Реквизит);
			ДобавитьВТаблицуИстории(ТаблицаИзменений, Реквизит.Ключ, ОписаниеИзменения.ТекстовоеПредставление, 
				ОписаниеИзменения.Данные, Период);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьЗадачуВОчередиГруппыТестирования(Знач Задача)
		
	Результат = Новый Структура("Успешно, Сообщение", Истина, "");
	
	// Проверим, что задачу необходимо добавить в регистр сведений ОчередьЗадачВТестировании
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументЗадача.Ссылка КАК Ссылка,
	|	ДокументЗадача.Филиал КАК Филиал,
	|	ДокументЗадача.Статус КАК Статус
	|ПОМЕСТИТЬ ВыбраннаяЗадача
	|ИЗ
	|	Документ.Задача КАК ДокументЗадача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО ДокументЗадача.Филиал = Филиалы.Ссылка
	|ГДЕ
	|	ДокументЗадача.Ссылка = &Ссылка
	|	И Филиалы.ТипФилиала = ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.QA)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыбраннаяЗадача.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый) КАК ДобавитьЗапись
	|ИЗ
	|	ВыбраннаяЗадача КАК ВыбраннаяЗадача
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьЗадач КАК ОчередьЗадачГруппыТестирования
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|			ПО ОчередьЗадачГруппыТестирования.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|				И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ОчередьГруппыТестирования))
	|		ПО ВыбраннаяЗадача.Ссылка = ОчередьЗадачГруппыТестирования.Задача
	|			И (КлючОчереди.Филиал = ВыбраннаяЗадача.Филиал)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ОчередьЗадачГруппыТестирования.Задача ЕСТЬ NULL
	|				ТОГДА ВыбраннаяЗадача.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый)
	|			ИНАЧЕ ВыбраннаяЗадача.Статус <> ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый)
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Ссылка", Задача);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если Выборка.ДобавитьЗапись Тогда
			РегистрыСведений.ОчередьЗадач.Добавить(Задача, Перечисления.ВидыОчереди.ОчередьГруппыТестирования);
		Иначе      
			НачатьТранзакцию();
			Попытка
				РегистрыСведений.ОчередьЗадач.УдалитьИзОчереди(Задача, Перечисления.ВидыОчереди.ОчередьГруппыТестирования);
				ЗафиксироватьТранзакцию();
			Исключение  
				ОтменитьТранзакцию();
				
				ИмяСобытия = "ОчередьСобытийНаОбработку.ОбработатьЗадачуВОчередиГруппыТестирования.УдалитьИзОчереди";
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.Задача,
					Задача, "Не удалось удалить по причине: " + ТекстОшибки);			
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
								
КонецПроцедуры

// Производит запись добавленных и удаленных значений табличных частей в таблицу изменений
//
// Параметры:
//  ТаблицаИзменений	 - ТаблицаЗначений	 - таблица изменений реквизитов и табличных частей объекта
//		* ТекстСообщения	 - Строка	 - текст сообщения об измении реквизита или табличной части
//		* Категория	 - ПеречислениеСсылка.КатегорииСобытийИсторияИзменений	 - категория сообщения, к которой отностится изменение
//		* ИмяРеквизита	 - Строка	 - имя реквизита как оно задано в конфигураторе
//		* Период	 - Дата	 - дата выполнения изменений, которая будет записана в историю изменения объекта по событиям
//	ТабличныеЧасти	 - Структура	 - структура табличных частей и их значений до и после записи
//		* <ключ элемента структуры>	 - Строка	 - название табличной части как оно задано в конфигураторе
//		* <значение элемента структуры>	 - Структура	 - добавленные и удаленные значения табличной части
//			** Добавленные	 - Массив	 - добавленные значения
//			** Удаленные	 - Массив	 - удаленные значения
//  Период			 - Дата	 - дата выполнения изменений
//  Ссылка	 - ДокументСсылка.ВнутреннееЗадание, СправочникСсылка.Проекты, ДокументСсылка.Задача, ДокументСсылка.ЗаявкаНаРазработку, СправочникСсылка.Знания	 - ссылка на объект
//
Процедура ОбработатьИзменениеТабличныхЧастей(ТаблицаИзменений, Знач ТабличныеЧасти, Знач Период, Знач Ссылка)
		
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		Если ТабличнаяЧасть.Значение.ЕстьИзменения Тогда
			Шаблоны = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма();
			Заголовок = ПолучитьИмяРеквизита(ТабличнаяЧасть.Ключ);
			
			ДанныеСтруктура = Новый Структура("Событие, ТабличнаяЧасть, Строки", "ИзменениеСоставаТЧ", Заголовок, Новый Массив);		
			ИзмененияТабличнойЧасти = Новый Массив;
			
			ОбработатьДобавлениеСтрок(ИзмененияТабличнойЧасти, ДанныеСтруктура, ТабличнаяЧасть.Значение.Добавлено, Шаблоны, Ссылка);
			ОбработатьИзменениеСтрок(ИзмененияТабличнойЧасти, ДанныеСтруктура, ТабличнаяЧасть.Значение.Изменено, Шаблоны, Ссылка);
			ОбработатьУдалениеСтрок(ИзмененияТабличнойЧасти, ДанныеСтруктура, ТабличнаяЧасть.Значение.Удалено, Шаблоны, Ссылка);
			
			ЗаголовокИзменений = СтрЗаменить(Шаблоны.БлокОсновногоТекста, "<!-- font_size -->", "14px");
			ЗаголовокИзменений = СтрЗаменить(ЗаголовокИзменений, "<!-- content -->", СтрШаблон("<b>%1</b>", Заголовок));
			
			ТекстИзменений = СтрСоединить(ИзмененияТабличнойЧасти, Символы.ПС);
			
			ОписаниеИзменений = ЗаголовокИзменений + Символы.ПС + ТекстИзменений;
			
			Данные = ЗаписатьЗначениеJSON(ДанныеСтруктура);
			
			ДобавитьВТаблицуИстории(ТаблицаИзменений, ТабличнаяЧасть.Ключ, ОписаниеИзменений, Данные, Период);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьДобавлениеСтрок(ИзмененияТабличнойЧасти, ДанныеСтруктура, Знач Данные, Знач Шаблоны, Знач Ссылка)
	
	Для Каждого Строка Из Данные Цикл
		ИзмененнаяСтрока = Новый Структура("КлючевоеПоле, ЗначениеКлючевогоПоля, СтрокаДобавлена");
		
		КлючевоеПоле = НРег(ПолучитьИмяРеквизита(Строка.КлючевоеПоле));
		ИзмененныеДанные = Новый Массив;
		ТипЗнчСсылка = ТипЗнч(Ссылка);
		
		Если ИнтеграцияДополнительныхПодсистем.ЭтоОбъектГабаритногоПланирования(Ссылка) Тогда
			КлючевоеПоле = ОбщегоНазначения.ПросклонятьФИО(КлючевоеПоле, 2);
			ШаблонОписания = "&#8212; Для %1 <b>%2</b> добавлен ресурс: ";
			
		ИначеЕсли ТипЗнчСсылка = Тип("СправочникСсылка.Процессы") И Строка.КлючевоеПоле = "ТекущийСтатус" Тогда
			ШаблонОписания = "&#8212; Добавлен переход %1 <b>%2</b> ";
			
		Иначе
			ШаблонОписания = "&#8212; Добавлен(-а) %1 <b>%2</b>";
		КонецЕсли;
		
		Описание = СтрШаблон(ШаблонОписания, КлючевоеПоле, Строка.ЗначениеКлючевогоПоля);
		
		ИзмененнаяСтрока.КлючевоеПоле = КлючевоеПоле;
		ИзмененнаяСтрока.ЗначениеКлючевогоПоля = Строка(Строка.ЗначениеКлючевогоПоля);
		ИзмененнаяСтрока.СтрокаДобавлена = 1;
		
		ШаблонСообщения = СтрЗаменить(Шаблоны.БлокОсновногоТекста, "<!-- font_size -->", "14px");
		ШаблонСообщения = СтрЗаменить(ШаблонСообщения, "<!-- content -->", Описание);
		
		ИзмененныеДанные.Добавить(ШаблонСообщения);
		
		Если Строка.ИзмененныеДанные.Количество() > 0 Тогда
			ИзмененнаяСтрока.Вставить("ИзмененныеДанные", Новый Массив);
		КонецЕсли;

		Для Каждого Поле Из Строка.ИзмененныеДанные Цикл
			Если ЗначениеПоляЗаполнено(Поле.НовоеЗначение) Тогда
				ИмяПоля = ПолучитьИмяРеквизита(Поле.Поле);
				ТипЗнчСсылка = ТипЗнч(Ссылка);
				Изменения = Новый Структура("Поле, НовоеЗначение");
				
				Если ИнтеграцияДополнительныхПодсистем.ЭтоОбъектГабаритногоПланирования(Ссылка) Тогда
					Изменения.Поле = "ресурс";
					Изменения.НовоеЗначение = Строка(Поле.НовоеЗначение);	
				Иначе
					Изменения.Поле = ИмяПоля;
					Изменения.НовоеЗначение = Строка(Поле.НовоеЗначение);
				КонецЕсли;
				
				Запись = ПолучитьШаблонИзмененияРеквизита(Изменения.Поле, "", Изменения.НовоеЗначение, Шаблоны);
				
				ИзмененнаяСтрока.ИзмененныеДанные.Добавить(Изменения);
				ИзмененныеДанные.Добавить(Запись);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеСтруктура.Строки.Добавить(ИзмененнаяСтрока);
		ИзмененияТабличнойЧасти.Добавить(СтрСоединить(ИзмененныеДанные));
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьИзменениеСтрок(ИзмененияТабличнойЧасти, ДанныеСтруктура, Знач Данные, Знач Шаблоны, Знач Ссылка)
	
	Для Каждого Строка Из Данные Цикл
		ИзмененнаяСтрока = Новый Структура("КлючевоеПоле, ЗначениеКлючевогоПоля, СтрокаДобавлена");
		ИзмененнаяСтрока.ЗначениеКлючевогоПоля = Строка(Строка.ЗначениеКлючевогоПоля);		
		ИзмененнаяСтрока.СтрокаДобавлена = 2;
		
		КлючевоеПоле = НРег(ПолучитьИмяРеквизита(Строка.КлючевоеПоле));
		ИзмененныеДанные = Новый Массив;
		
		Если Строка.ИзмененныеДанные.Количество() > 0 Тогда
			ИзмененнаяСтрока.Вставить("ИзмененныеДанные", Новый Массив);
		КонецЕсли;
		
		Для Каждого Поле Из Строка.ИзмененныеДанные Цикл
			Изменения = Новый Структура;
			ИмяПоля = ПолучитьИмяРеквизита(Поле.Поле);
			
			СтароеЗначение = Неопределено;
			НовоеЗначение = ?(ЗначениеПоляЗаполнено(Поле.НовоеЗначение), Поле.НовоеЗначение, "Незаполненное значение");
			
			Если Поле.НовоеЗначение <> Поле.СтароеЗначение Тогда	
				Если ИнтеграцияДополнительныхПодсистем.ЭтоОбъектГабаритногоПланирования(Ссылка) Тогда	
					Изменения.Вставить("Поле", "Ресурс");
					Изменения.Вставить("СтароеЗначение", Строка(Поле.СтароеЗначение));
					Изменения.Вставить("НовоеЗначение", Строка(Поле.НовоеЗначение));	
				Иначе
					Изменения.Вставить("Поле", ИмяПоля);
					Изменения.Вставить("НовоеЗначение", Строка(Поле.НовоеЗначение));
					
					Если ЗначениеПоляЗаполнено(Поле.СтароеЗначение) Тогда
						Изменения.Вставить("СтароеЗначение", Строка(Поле.СтароеЗначение));
					КонецЕсли;	
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Процессы") Тогда	
				Изменения.Вставить("Поле", ИмяПоля);
				Изменения.Вставить("НовоеЗначение", Строка(Поле.НовоеЗначение));	
			КонецЕсли;
						
			Если Изменения.Количество() > 0 Тогда
				Изменения.Свойство("СтароеЗначение", СтароеЗначение);
				Запись = ПолучитьШаблонИзмененияРеквизита(Изменения.Поле, СтароеЗначение, Изменения.НовоеЗначение, Шаблоны);
				
				ИзмененнаяСтрока.ИзмененныеДанные.Добавить(Изменения);
				ИзмененныеДанные.Добавить(Запись);
			КонецЕсли;
		КонецЦикла;
		
		ИзмененияСистемы = СтрСоединить(ИзмененныеДанные, Символы.ПС);
		
		Если ИнтеграцияДополнительныхПодсистем.ЭтоОбъектГабаритногоПланирования(Ссылка) Тогда
			КлючевоеПоле = ОбщегоНазначения.ПросклонятьФИО(КлючевоеПоле, 2);
			ШаблонОписания = "&#8212; Для %1 <b>%2</b> изменен ресурс:";
			
		ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Процессы") И Строка.КлючевоеПоле = "ТекущийСтатус" Тогда
			ШаблонОписания = "&#8212; Изменен переход: %1 <b>%2</b>:";	
			
		Иначе
			КлючевоеПоле = ОбщегоНазначения.ПросклонятьФИО(КлючевоеПоле, 3);
			ШаблонОписания = "&#8212; Изменения по %1 <b>%2</b>:";
		КонецЕсли;
		
		Описание = СтрШаблон(ШаблонОписания, КлючевоеПоле, Строка.ЗначениеКлючевогоПоля);
		
		ШаблонСообщения = СтрЗаменить(Шаблоны.БлокОсновногоТекста, "<!-- font_size -->", "14px");
		ШаблонСообщения = СтрЗаменить(ШаблонСообщения, "<!-- content -->", Описание);

		ЧастьСообщения = ШаблонСообщения + Символы.ПС + ИзмененияСистемы;
		
		ИзмененнаяСтрока.КлючевоеПоле = КлючевоеПоле;
		
		ДанныеСтруктура.Строки.Добавить(ИзмененнаяСтрока);
		ИзмененияТабличнойЧасти.Добавить(ЧастьСообщения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьУдалениеСтрок(ИзмененияТабличнойЧасти, ДанныеСтруктура, Знач Данные, Знач Шаблоны, Знач Ссылка)
	
	Для Каждого Строка Из Данные Цикл
		ИзмененнаяСтрока = Новый Структура("КлючевоеПоле, ЗначениеКлючевогоПоля, СтрокаДобавлена");
		ИзмененнаяСтрока.ЗначениеКлючевогоПоля = Строка(Строка.ЗначениеКлючевогоПоля);		
		ИзмененнаяСтрока.СтрокаДобавлена = 0;
		
		КлючевоеПоле = НРег(ПолучитьИмяРеквизита(Строка.КлючевоеПоле));
		ИмяПоля = Неопределено;
		
		Если ИнтеграцияДополнительныхПодсистем.ЭтоОбъектГабаритногоПланирования(Ссылка) Тогда
			КлючевоеПоле = ОбщегоНазначения.ПросклонятьФИО(КлючевоеПоле, 2);
			ШаблонОписания = "&#8212; Для %1 <b>%2</b> удален ресурс: ";
			ИмяПоля = "Ресурс";
			
		ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Процессы") И Строка.КлючевоеПоле = "ТекущийСтатус" Тогда
			ШаблонОписания = "&#8212; Добавлен переход %1 <b>%2</b> ";
			
		Иначе
			ШаблонОписания = "&#8212; Удален(-а) %1 <b>%2</b>.";

		КонецЕсли;
		
		Описание = СтрШаблон(ШаблонОписания, КлючевоеПоле, Строка.ЗначениеКлючевогоПоля);
		
		ШаблонСообщения = СтрЗаменить(Шаблоны.БлокОсновногоТекста, "<!-- font_size -->", "14px");
		ШаблонСообщения = СтрЗаменить(ШаблонСообщения, "<!-- content -->", Описание);

		ИзмененныеДанные = Новый Массив;
		ИзмененныеДанные.Добавить(ШаблонСообщения);

		Если ИнтеграцияДополнительныхПодсистем.ЭтоОбъектГабаритногоПланирования(Ссылка)
			ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.Процессы") Тогда		
			
			Если Строка.ИзмененныеДанные.Количество() > 0 Тогда
				ИзмененнаяСтрока.Вставить("ИзмененныеДанные", Новый Массив);
			КонецЕсли;
			
			
			Для Каждого Поле Из Строка.ИзмененныеДанные Цикл
				Изменения = Новый Структура("Поле, НовоеЗначение");
				Изменения.Поле = ?(ИмяПоля = Неопределено, ПолучитьИмяРеквизита(Поле.Поле), ИмяПоля);
				Изменения.НовоеЗначение = Строка(Поле.СтароеЗначение);
				
				Запись = ПолучитьШаблонИзмененияРеквизита(Изменения.Поле, Изменения.НовоеЗначение, "", Шаблоны);
				
				ИзмененнаяСтрока.ИзмененныеДанные.Добавить(Изменения);
				ИзмененныеДанные.Добавить(Запись);
			КонецЦикла;
			
		КонецЕсли;
		
		ЧастьСообщения = СтрСоединить(ИзмененныеДанные, Символы.ПС);
		
		ИзмененнаяСтрока.КлючевоеПоле = КлючевоеПоле;

		ДанныеСтруктура.Строки.Добавить(ИзмененнаяСтрока);
		ИзмененияТабличнойЧасти.Добавить(ЧастьСообщения);
	КонецЦикла;
	
КонецПроцедуры

// Добавляет сообщение изменения планового времени в задаче для руководителя филиала, указанной в задаче
//
// Параметры:
//  Ссылка			 - ДокументСсылка.Задача	 - ссылка на задачу
//  Автор			 - СправочникСсылка.Пользователи	 - автор изменения
//  ТаблицаИзменений	 - ТаблицаЗначений	 - таблица изменений реквизитов и табличных частей объекта
//		* ТекстСообщения	 - Строка	 - текст сообщения об измении реквизита или табличной части
//		* Категория	 - ПеречислениеСсылка.КатегорииСобытийИсторияИзменений	 - категория сообщения, к которой отностится изменение
//		* ИмяРеквизита	 - Строка	 - имя реквизита как оно задано в конфигураторе
//		* Период	 - Дата	 - дата выполнения изменений, которая будет записана в историю изменения объекта по событиям
//
Процедура ОповеститьРуководителяФилиалаОбИзмененииПлановогоВремени(Знач Ссылка, Знач Автор, ТаблицаИзменений)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Трудозатраты.Затрата), 0) КАК ФактическиеТрудозатраты
	|ИЗ
	|	РегистрСведений.Трудозатраты КАК Трудозатраты
	|ГДЕ
	|	(ВЫРАЗИТЬ(Трудозатраты.Объект КАК Документ.Задача)) = &Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Филиалы.Руководитель, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Руководитель
	|ИЗ
	|	Документ.Задача КАК Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО Задача.Филиал = Филиалы.Ссылка
	|ГДЕ
	|	Задача.Ссылка = &Задача";
	
	Запрос.УстановитьПараметр("Задача", Ссылка);
	
	Пакет = Запрос.ВыполнитьПакет();
	Выборка = Пакет[0].Выбрать();
	
	Если Выборка.Следующий() И Выборка.ФактическиеТрудозатраты > 0 Тогда
		РуководительФилиала = Пакет[1].Выгрузить()[0].Руководитель;
		Если ЗначениеЗаполнено(РуководительФилиала) И Автор <> РуководительФилиала Тогда
			ПолучательРуководитель = Новый Массив;
			ПолучательРуководитель.Добавить(РуководительФилиала);
			
			РегистрыСведений.ПодготовленныеСообщенияПользователяПоКатегориям.Добавить(ПолучательРуководитель, Ссылка, ТаблицаИзменений);
			
			НайденноеЗначение = ТаблицаИзменений.Найти("ОценкаТрудозатрат", "ИмяРеквизита");
			Если НайденноеЗначение <> Неопределено Тогда
				ТаблицаИзменений.Удалить(НайденноеЗначение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет сообщение добавления/удаления участника
//
// Параметры:
//  Объект		 - ДокументСсылка.Задача, ДокументСсылка.ЗаявкаНаРазработку, ДокументСсылка.ВнутреннееЗадание, СправочникСсылка.Проекты	 - объект
//  Пользователь - СправочникСсылка.Пользователи, СправочникСсылка.Подписчики	 - участник
//  Удаление	 - Булево	 - признак того, что Пользователь удален из участников
//  Автор		 - СправочникСсылка.Пользователи	 - автор изменения
//
Процедура ОповеститьУчастника(Знач Объект, Знач Пользователь, Знач Удаление, Знач Автор)
	
	ЭлектроннаяПочта = Неопределено;
	ТипПользователя = ТипЗнч(Пользователь);
	
	Если ТипПользователя = Тип("СправочникСсылка.Пользователи") Тогда
		ЭлектроннаяПочта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "Почта");
	ИначеЕсли ТипПользователя = Тип("СправочникСсылка.Подписчики") Тогда
		ЭлектроннаяПочта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "Наименование");
	КонецЕсли;
	
	Если ЭлектроннаяПочта <> Неопределено 
		И ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ЭлектроннаяПочта) Тогда
		
		Получатели = Новый Массив;
		Получатели.Добавить(Пользователь);
		
		ШаблоныПисьма = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма();
		
		ТекстСобытия = ?(Удаление, "удалил(-а) вас из участников.", "добавил(-а) вас в участники.");
		
		ТекстШаблона = СтрЗаменить(ШаблоныПисьма.ЗаголовокСобытия, "<!-- event_date -->", Формат(ТекущаяДатаСеанса(), ШаблоныПисьма.ФорматДаты));
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- user_name -->", Строка(Автор));
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- event -->", ТекстСобытия);
		
		ШаблонПисьма = СтрЗаменить(ШаблоныПисьма.БлокОсновногоТекста, "<!-- content -->", ТекстШаблона);
		ТекстСообщения = СтрЗаменить(ШаблонПисьма, "<!-- font_size -->", "16px");
		
		//для уведомления в СВ добавляем к тексту пробел
		СообщениеSDMS = СтрШаблон(" %1", ТекстСобытия);
		
		Категория = Перечисления.КатегорииСообщенийПользователя.ДоступКОбъекту;
		СтруктураСообщения = Новый Структура("ТекстСообщения, СообщениеSDMS, КатегорияСообщения", ТекстСообщения, СообщениеSDMS, Категория);
		
		РегистрыСведений.ПодготовленныеСообщенияПользователяПоКатегориям.Добавить(Получатели, Объект, СтруктураСообщения, Автор);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьСообщенияОНаличииСтопСлов(Знач Ссылка, Знач ДанныеСобытия)
	
	Получатель = ДанныеСобытия.Получатель;
	СтруктураСообщения = ДанныеСобытия.Сообщение;
	
	Получатели = Новый Массив;
	Получатели.Добавить(Получатель);
	
	ТекстСообщения = ПодготовитьТекстКОтправкеВПочту(Ссылка, СтруктураСообщения);
	
	Сообщение = Новый Структура;
	Сообщение.Вставить("ТекстСообщения", ТекстСообщения);
	Сообщение.Вставить("КатегорияСообщения", Перечисления.КатегорииСообщенийПользователя.ОповещениеОНаличииСтопСлов);
	
	РегистрыСведений.ПодготовленныеСообщенияПользователяПоКатегориям.Добавить(Получатели, Ссылка, Сообщение, Получатель);
	
	ТекстСообщения = ПодготовитьТекстКОтправкеВМессенджер(Ссылка, СтруктураСообщения);
 		
	РегистрыСведений.БуферСообщений.Добавить(Перечисления.СпособыОтправкиСообщений.Мессенджер, Получатель,
		ТекстСообщения,, Перечисления.ТипыСообщенийМессенджера.ОповещениеОНаличииСтопСлов);		
		
КонецПроцедуры

Процедура ПроверитьДоступныеУслугиФилиала(Объект, Период)
	
	Запрос = Новый Запрос;                      
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Пользователи") Тогда
		
		// Выбираю текущий филиал и должность для конкретного сотрудника на дату  		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЛичныеДелаТекущийФилиал.Данные КАК ТекущийФилиал,
		|	НЕОПРЕДЕЛЕНО КАК ТекущаяДолжность
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	РегистрСведений.ЛичныеДела.СрезПоследних(
		|			&Период,
		|			Сотрудник = &Объект
		|				И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаТекущийФилиал
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО,
		|	ЛичныеДелаТекущаяДолжность.Данные
		|ИЗ
		|	РегистрСведений.ЛичныеДела.СрезПоследних(
		|			&Период,
		|			Сотрудник = &Объект
		|				И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПринятНаДолжность)) КАК ЛичныеДелаТекущаяДолжность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(Данные.ТекущийФилиал), НЕОПРЕДЕЛЕНО) КАК ТекущийФилиал,
		|	ЕСТЬNULL(МАКСИМУМ(Данные.ТекущаяДолжность), НЕОПРЕДЕЛЕНО) КАК ТекущаяДолжность
		|ИЗ
		|	Данные КАК Данные";
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Должности") Тогда  
		
		// Выбираю все филиалы для конкретной должности
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛичныеДелаТекущийФилиал.Данные КАК ТекущийФилиал,
		|	ЛичныеДелаТекущаяДолжность.Данные КАК ТекущаяДолжность
		|ИЗ
		|	РегистрСведений.ЛичныеДела.СрезПоследних(, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаТекущийФилиал
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела.СрезПоследних(, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПринятНаДолжность)) КАК ЛичныеДелаТекущаяДолжность
		|		ПО (ЛичныеДелаТекущаяДолжность.Сотрудник = ЛичныеДелаТекущийФилиал.Сотрудник)
		|ГДЕ
		|	ЛичныеДелаТекущаяДолжность.Данные = &Объект";
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Филиалы") Тогда  
		
		// Выбираю все должности для конкретного филиала
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛичныеДелаТекущийФилиал.Данные КАК ТекущийФилиал,
		|	ЛичныеДелаТекущаяДолжность.Данные КАК ТекущаяДолжность
		|ИЗ
		|	РегистрСведений.ЛичныеДела.СрезПоследних(, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаТекущийФилиал
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела.СрезПоследних(, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПринятНаДолжность)) КАК ЛичныеДелаТекущаяДолжность
		|		ПО (ЛичныеДелаТекущаяДолжность.Сотрудник = ЛичныеДелаТекущийФилиал.Сотрудник)
		|ГДЕ
		|	ЛичныеДелаТекущийФилиал.Данные = &Объект";
		
	Иначе
		Возврат;	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Объект", Объект); 
	Запрос.УстановитьПараметр("Период", Период);  
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ТекущийФилиал) Тогда 
				ПересчитатьДоступныеУслугиФилиала(Выборка.ТекущийФилиал, Выборка.ТекущаяДолжность);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчетФактическихТрудозатратОбъекта(Объект, Реквизит, ДельтаЗатрата)  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияДополнительныхРеквизитовОбъектов.Значение КАК Затрата
	|ИЗ
	|	РегистрСведений.ЗначенияДополнительныхРеквизитовОбъектов КАК ЗначенияДополнительныхРеквизитовОбъектов
	|ГДЕ
	|	ЗначенияДополнительныхРеквизитовОбъектов.Реквизит = &Реквизит
	|	И ЗначенияДополнительныхРеквизитовОбъектов.Объект = &Объект"; 
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Реквизит", Реквизит);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда		
		Выборка = Результат.Выбрать();
		Выборка.Следующий(); 		
		Затрата = Выборка.Затрата + ДельтаЗатрата;
	Иначе                                          
		Затрата = ДельтаЗатрата;
	КонецЕсли;
	
	РегистрыСведений.ЗначенияДополнительныхРеквизитовОбъектов.УстановитьЗначениеДополнительногоРеквизита(Объект, 
		Реквизит, Затрата);

КонецПроцедуры

Процедура ПересчетФактическихТрудозатрат(Объект, Данные) 
	
	Если Метаданные.ОпределяемыеТипы.ВладелецДополнительныхРеквизитов.Тип.СодержитТип(ТипЗнч(Объект)) Тогда 
		
		Реквизит = ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.ФактическиеТрудозатраты;
		ПересчетФактическихТрудозатратОбъекта(Объект, Реквизит, Данные.Затрата);
		Реквизит = ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.ФактическаяСтоимостьРабот;
		ПересчетФактическихТрудозатратОбъекта(Объект, Реквизит, Данные.Стоимость);
	
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда  
			
			Если Данные.Свойство("ПересчитатьТрудозатратыЗадачи") Тогда 																																  
				Реквизит = ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.ФактическиеТрудозатратыЗадачи;
			Иначе
				Реквизит = ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.ФактическиеТрудозатратыЗаявки;
			КонецЕсли;
			
			ПересчетФактическихТрудозатратОбъекта(Объект, Реквизит, Данные.Затрата);	
		КонецЕсли;	
	КонецЕсли;
	
	Если Объект.Метаданные().Реквизиты.Найти("ОбъектОснование") <> Неопределено Тогда  
		ОбъектОснование = Объект.ОбъектОснование;
		Если ЗначениеЗаполнено(ОбъектОснование) Тогда
			
			Если ТипЗнч(ОбъектОснование) = Тип("ДокументСсылка.ЗаявкаНаРазработку") И
					ТипЗнч(Объект) = Тип("ДокументСсылка.Задача") Тогда
				Данные.Вставить("ПересчитатьТрудозатратыЗадачи");	
			КонецЕсли;		
			
			// Фактические затраты по основанию не рассчитываем сразу, а добавляем запись в очередь событий, которая будет обработана 
			// в следующей итерации. Это позволит корректно распределить записи очереди по потокам, чтобы события одного и того же объекта
			// не обрабатывались одновременно в разных потоках
			ПересчитатьФактическиеТрудозатраты(ОбъектОснование, Данные);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчетПлановыхТрудозатрат(Заявка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ПланируемыеТрудозатраты.Трудозатраты) КАК Трудозатраты
	|ПОМЕСТИТЬ ДанныеТрудозатраты
	|ИЗ
	|	Документ.Задача КАК Задача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
	|		ПО (Задача.Ссылка = (ВЫРАЗИТЬ(ПланируемыеТрудозатраты.Объект КАК Документ.Задача)))
	|			И (ПланируемыеТрудозатраты.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
	|ГДЕ
	|	Задача.ОбъектОснование = &Заявка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланируемыеТрудозатраты.Трудозатраты
	|ИЗ
	|	РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
	|ГДЕ
	|	(ВЫРАЗИТЬ(ПланируемыеТрудозатраты.Объект КАК Документ.ЗаявкаНаРазработку)) = &Заявка
	|	И ПланируемыеТрудозатраты.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ДанныеТрудозатраты.Трудозатраты) КАК Трудозатраты
	|ИЗ
	|	ДанныеТрудозатраты КАК ДанныеТрудозатраты
	|
	|ИМЕЮЩИЕ
	|	НЕ СУММА(ДанныеТрудозатраты.Трудозатраты) ЕСТЬ NULL";	  
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий(); 
		РегистрыСведений.ЗначенияДополнительныхРеквизитовОбъектов.УстановитьЗначениеДополнительногоРеквизита(Заявка, 
			ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.ПлановыеТрудозатраты, Выборка.Трудозатраты);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПересчитатьДоступныеУслугиФилиала(Филиал, Должность)
	
	Если НЕ РаботаСНастройкамиВызовСервера.ЭтоФилиалИТОрганизации(Филиал) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос; 
	
	#Область ТекстЗапроса
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыДеятельностиУслуг.Услуга КАК Услуга,
	|	ДоступныеУслугиФилиалов.ВидДеятельностиУслуги КАК ВидДеятельностиУслуги,
	|	ДоступныеУслугиФилиалов.Использование КАК Использование,
	|	ДоступныеУслугиФилиалов.Порядок КАК Порядок
	|ПОМЕСТИТЬ ДоступныеУслугиФилиала
	|ИЗ
	|	РегистрСведений.ДоступныеУслугиФилиалов КАК ДоступныеУслугиФилиалов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДеятельностиУслуг КАК ВидыДеятельностиУслуг
	|		ПО (ВидыДеятельностиУслуг.Ссылка = ДоступныеУслугиФилиалов.ВидДеятельностиУслуги)
	|			И (ДоступныеУслугиФилиалов.Филиал = &Филиал)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УслугиДолжности.Ссылка КАК Услуга,
	|	ВидыДеятельностиУслуг.Ссылка КАК ВидыДеятельностиУслуг
	|ПОМЕСТИТЬ УслугиДолжности
	|ИЗ
	|	Справочник.Услуги.Должности КАК УслугиДолжности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Услуги КАК Услуги
	|		ПО УслугиДолжности.Ссылка = Услуги.Ссылка
	|			И (Услуги.Используется)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Услуги.ВидыДеятельности КАК УслугиВидыДеятельности
	|		ПО УслугиДолжности.Ссылка = УслугиВидыДеятельности.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДеятельностиУслуг КАК ВидыДеятельностиУслуг
	|		ПО (ВидыДеятельностиУслуг.Услуга = УслугиВидыДеятельности.Ссылка)
	|			И (ВидыДеятельностиУслуг.ВидДеятельности = УслугиВидыДеятельности.ВидДеятельности)
	|ГДЕ
	|	УслугиДолжности.Должность = &Должность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УслугиДолжности.ВидыДеятельностиУслуг КАК ВидДеятельностиУслуги,
	|	ИСТИНА КАК Использование
	|ИЗ
	|	УслугиДолжности КАК УслугиДолжности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоступныеУслугиФилиала КАК ДоступныеУслугиФилиала
	|		ПО УслугиДолжности.ВидыДеятельностиУслуг = ДоступныеУслугиФилиала.ВидДеятельностиУслуги
	|ГДЕ
	|	НЕ ЕСТЬNULL(ДоступныеУслугиФилиала.Использование, ЛОЖЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ДоступныеУслугиФилиала.Порядок), 0) КАК Порядок
	|ИЗ
	|	ДоступныеУслугиФилиала КАК ДоступныеУслугиФилиала";	  
	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Филиал", Филиал);
	Запрос.УстановитьПараметр("Должность", Должность);  
	
	Результат = Запрос.ВыполнитьПакет();
	РезультатДанные = Результат.Получить(Результат.ВГраница() - 1);
	РезультатМаксПорядок = Результат.Получить(Результат.ВГраница()); 
	
	Если НЕ РезультатДанные.Пустой() Тогда 
		
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		Выборка = РезультатДанные.Выбрать();		
		ВыборкаМаксПорядок = РезультатМаксПорядок.Выбрать(); 
		ВыборкаМаксПорядок.Следующий();
		МаксПорядок = ВыборкаМаксПорядок.Порядок + 1;    
		
		Набор = РегистрыСведений.ДоступныеУслугиФилиалов.СоздатьНаборЗаписей();
		Набор.Отбор.Филиал.Установить(Филиал);
			
		Пока Выборка.Следующий() Цикл
			
			Набор.Отбор.ВидДеятельностиУслуги.Установить(Выборка.ВидДеятельностиУслуги);
			Набор.Прочитать();  
			
			Если Набор.Количество() = 0 Тогда 
				Строка = Набор.Добавить();
				Строка.Филиал = Филиал;
				Строка.ВидДеятельностиУслуги = Выборка.ВидДеятельностиУслуги;
				Строка.Порядок = МаксПорядок;
				МаксПорядок  = МаксПорядок + 1; 
			Иначе
				Строка = Набор[0];
			КонецЕсли;
			
			Строка.Автор = ТекущийПользователь;
			Строка.ДатаОбновления = ТекущаяДатаСеанса;
			Строка.Использование = Выборка.Использование;
			Набор.Записать();
			
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

Функция ПересчитатьСтатусыЗаявок(Знач Объект, Знач Данные)
	
	Результат = Новый Структура("Успешно, Сообщение", Истина, "");
	
	НачатьТранзакцию();
	Попытка
		РаботаСПроцессами.ПересчитатьСтатусыЗаявок(Данные.ДанныеОбъекта, Данные.ПересчетСистем, Данные.ДатаЗаписи);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Результат.Успешно = Ложь;
		Результат.Сообщение = ТекстОшибки;
		
		ЗаписьЖурналаРегистрации("Очередь событий на обработку.ПересчитатьСтатусыЗаявок", УровеньЖурналаРегистрации.Ошибка,
			, Объект, "Не удалось рассчитать статусы заявок по причине: " + ТекстОшибки);
	КонецПопытки;
		
	Возврат Результат;
			
КонецФункции

// Подготавливает текст к отправке в мессенджер
//
// Параметры:
//  Ссылка				 - ЛюбаяСсылка	 -  Ссылка на объект
//  СтруктураСообщения	 -  Структура	 -  Структура сообщения
//		* <ТекстСообщения>	 - Строка	 - Сообщение
//		* <КатегорияСообщения>	 - Перечисления.КатегорииСообщенийПользователя	 - Категория сообщения
// Возвращаемое значение:
//  Строка - Подготовленный текст сообщения
//
Функция ПодготовитьТекстКОтправкеВМессенджер(Знач Ссылка, Знач СтруктураСообщения) Экспорт
		
	ПредставлениеСсылки = Строка(Ссылка);
	ЗначениеСсылки = ОбщегоНазначения.ПолучитьHTTPСсылкуНаОбъект(Ссылка);
	СсылкаRocketChat = СтрШаблон("[%1](%2)", ПредставлениеСсылки, ЗначениеСсылки);
	
	Заголовок = СтруктураСообщения.Заголовок;
	
	ТекстСообщения = Новый Массив;
	ТекстСообщения.Добавить(СтрШаблон(":fire: *%1*", СсылкаRocketChat));
	ТекстСообщения.Добавить(Символы.ПС);
	
	// (<strong>)|(</strong>) -> *	(сделаем найденные слова жирным шрифтом)
	Заголовок = СтрЗаменитьПоРегулярномуВыражению(Заголовок, "(<strong>)|(</strong>)", "*", Истина, Истина);
	
	ТекстСообщения.Добавить(Заголовок);
	ТекстСообщения.Добавить(Символы.ПС);
	ТекстСообщения.Добавить(Символы.ПС);
	
	Для Каждого НайденноеВхождение Из СтруктураСообщения.НайденныеВхождения Цикл
		ТекстСообщения.Добавить("*Исходный текст:*");
		ТекстСообщения.Добавить(Символы.ПС);
		
		Для Каждого ТекстСОшибкой Из НайденноеВхождение.Вхождения Цикл
			// (<span.*?>)|(</span>) -> *	(сделаем найденные слова жирным шрифтом)
			ТекстСОшибкой = СтрЗаменитьПоРегулярномуВыражению(ТекстСОшибкой, "(<span.*?>)|(</span>)", "*", Истина, Истина);
			
			ТекстСообщения.Добавить(ТекстСОшибкой);
			ТекстСообщения.Добавить(Символы.ПС);
		КонецЦикла;
		
		ТекстСообщения.Добавить(Символы.ПС);
		
		Если НЕ ПустаяСтрока(НайденноеВхождение.СообщениеПользователю) Тогда
			ТекстСообщения.Добавить("*Дополнительная информация:*");
			ТекстСообщения.Добавить(Символы.ПС);
			ТекстСообщения.Добавить(НайденноеВхождение.СообщениеПользователю);
			ТекстСообщения.Добавить(Символы.ПС);
		КонецЕсли;
		
		ТекстСообщения.Добавить(Символы.ПС);
	КонецЦикла;
		
	Возврат СтрСоединить(ТекстСообщения);
	
КонецФункции

Функция ПодготовитьТекстКОтправкеВПочту(Знач Ссылка, Знач СтруктураСообщения) Экспорт
	
	// BSLLS-off
	ШаблонБлока = "<table style = ""width: 580px; margin-top: 10px;"">%1</table>";
	ШаблонЗаголовка = "<tr><td style=""font-family: Verdana, Arial, sans-serif; font-weight: normal; padding: 0; margin: 0; word-wrap: normal; word-break: keep-all; -webkit-hyphens: auto; -moz-hyphens: auto; hyphens: auto; vertical-align: top; text-align: left; font-size: 16px; line-height: 16px;"">%1</td></tr>";
	ШаблонСообщенияПользователю = "<tr><td style=""font-family: Verdana, Arial, sans-serif; font-weight: normal; padding: 0; margin: 0; word-wrap: normal; word-break: keep-all; -webkit-hyphens: auto; -moz-hyphens: auto; hyphens: auto; vertical-align: top; text-align: left; font-size: 16px; line-height: 16px;""><strong>Дополнительная информация:</strong></td></tr><tr><td style=""font-family: Verdana, Arial, sans-serif; font-weight: normal; padding: 0; margin: 0; word-wrap: normal; word-break: keep-all; -webkit-hyphens: auto; -moz-hyphens: auto; hyphens: auto; vertical-align: top; text-align: left; font-size: 16px; line-height: 16px;"">%1</td></tr>";
	ШаблонНайденногоВхождения = "<tr><td style=""font-family: Verdana, Arial, sans-serif; font-weight: normal; padding: 0; margin: 0; word-wrap: normal; word-break: keep-all; -webkit-hyphens: auto; -moz-hyphens: auto; hyphens: auto; vertical-align: top; text-align: left; font-size: 16px; line-height: 16px;""><strong>Исходный текст:</strong></td></tr><tr><td style=""font-family: Verdana, Arial, sans-serif; font-weight: normal; padding: 0; margin: 0; word-wrap: normal; word-break: keep-all; -webkit-hyphens: auto; -moz-hyphens: auto; hyphens: auto; vertical-align: top; text-align: left; font-size: 16px; font-style: italic; line-height: 16px; background: #eee;"">%1</td></tr>";
	Разделитель = "<tr><td style=""font-family: Verdana, Arial, sans-serif; font-weight: normal; padding: 0; margin: 0; word-wrap: normal; word-break: keep-all; -webkit-hyphens: auto; -moz-hyphens: auto; hyphens: auto; vertical-align: top; text-align: left; line-height: 16px; height: 16px;""></td></tr>";
	
	ТекстСообщения = Новый Массив;
	ТекстСообщения.Добавить(СтрШаблон(ШаблонЗаголовка, СтруктураСообщения.Заголовок));
	ТекстСообщения.Добавить(Разделитель);
	// BSLLS-on
	
	Для Каждого НайденноеВхождение Из СтруктураСообщения.НайденныеВхождения Цикл
		Для Каждого ТекстСОшибкой Из НайденноеВхождение.Вхождения Цикл
			ТекстСообщения.Добавить(СтрШаблон(ШаблонНайденногоВхождения, ТекстСОшибкой));
		КонецЦикла;
		
		ТекстСообщения.Добавить(Разделитель);
		
		Если НЕ ПустаяСтрока(НайденноеВхождение.СообщениеПользователю) Тогда
			ТекстСообщения.Добавить(СтрШаблон(ШаблонСообщенияПользователю, НайденноеВхождение.СообщениеПользователю));
		КонецЕсли;
		
		ТекстСообщения.Добавить(Разделитель);
		ТекстСообщения.Добавить(Разделитель);
	КонецЦикла;
	
	Возврат СтрШаблон(ШаблонБлока, СтрСоединить(ТекстСообщения, Символы.ПС));
	
КонецФункции

Функция ПолучитьИмяРеквизита(Знач Ключ)
		
	Вхождения = СтрНайтиВсеПоРегулярномуВыражению(Ключ, "[А-Я]*?[а-я]+");
	
	ЧастиСтроки = Новый Массив;
	Для Каждого Вхождение Из Вхождения Цикл
		ЧастиСтроки.Добавить(?(ЧастиСтроки.Количество() = 0, ТРег(Вхождение.Значение), НРег(Вхождение.Значение)));
	КонецЦикла;
	
	Результат = СтрСоединить(ЧастиСтроки, " ");
		
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу для записи изменений реквизитов и табличных частей
// 
// Возвращаемое значение:
//   - ТаблицаЗначений	 - таблица изменений реквизитов и табличных частей объекта
//		* ТекстСообщения	 - Строка	 - текст сообщения об измении реквизита или табличной части
//		* Категория	 - ПеречислениеСсылка.КатегорииСобытийИсторияИзменений	 - категория сообщения, к которой отностится изменение
//		* ИмяРеквизита	 - Строка	 - имя реквизита как оно задано в конфигураторе
//		* Период	 - Дата	 - дата выполнения изменений, которая будет записана в историю изменения объекта по событиям
//
Функция ПолучитьТаблицуИзменений()
	
	// Формирование таблицы изменений
	ТаблицаИзменений = ОбщегоНазначения.ПолучитьСтруктуруДанныхДляЗаписиВИсторию();
	ТаблицаИзменений.Колонки.Добавить("ИмяРеквизита", ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(150));
	ТаблицаИзменений.Колонки.Добавить("Период", ОбщегоНазначенияКлиентСервер.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаИзменений.Колонки.Добавить("ТекстSDMS", Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаИзменений;
	
КонецФункции

// Возвращает текст сообщения о создании объекта
//
// Параметры:
//  Период	 - Дата									 - дата события
//  Автор	 - СправочникСсылка.Пользователи	 - автор события
// 
// Возвращаемое значение:
//  Строка - заполненный шаблон
//
Функция ПолучитьТекстСообщенияСозданияОбъекта(Знач Период, Знач Автор)
	
	ШаблоныПисьма = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма();
	
	Шаблон = ШаблоныПисьма.БлокОсновногоТекста;
	
	ТекстШаблона = СтрЗаменить(ШаблоныПисьма.ЗаголовокСобытия, "<!-- event_date -->", Формат(Период, ШаблоныПисьма.ФорматДаты));
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- user_name -->", Автор);
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- event -->", "создал(-а) объект.");
	
	Шаблон = СтрЗаменить(Шаблон, "<!-- content -->", ТекстШаблона);
	Шаблон = СтрЗаменить(Шаблон, "<!-- font_size -->", "14px");

	Возврат Шаблон;
	
КонецФункции

Процедура ПроверитьНаличиеДанныхПоПользователю(Знач Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.ИдентификаторАД КАК ИдентификаторАД,
	|	Пользователи.ДатаСоздания КАК ДатаСоздания,
	|	ПРЕДСТАВЛЕНИЕ(Пользователи.Ссылка) КАК ИмяПользователя
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела.СрезПоследних КАК ЛичныеДелаСрезПоследних
	|		ПО (ЛичныеДелаСрезПоследних.Сотрудник = Пользователи.Ссылка)
	|ГДЕ
	|	Пользователи.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Пользователи.Ссылка,
	|	Пользователи.ДатаСоздания,
	|	Пользователи.ИдентификаторАД
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ЛичныеДелаСрезПоследних.Период) = 0";
	
	Запрос.УстановитьПараметр("Ссылка", Пользователь);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Шаблон = 
		"```
		|Отсутствуют данные по пользователю - %1,
		|ИдентификаторAD - %2,
		|Дата создания - %3.
		|```";
		
		Сообщение = СтрШаблон(Шаблон, Выборка.ИмяПользователя, Выборка.ИдентификаторАД, Выборка.ДатаСоздания);  
		
		РегистрыСведений.БуферСообщений.Добавить(Перечисления.СпособыОтправкиСообщений.Мессенджер,
			Перечисления.ТипыСлужебногоКанала.ТехническаяПроблема, Сообщение,,
			Перечисления.ТипыСообщенийМессенджера.ОтсутствуютДанныеПоПользователю);
	КонецЕсли;
	
КонецПроцедуры

Функция РассчитатьСтатусыПоФилиалам(Знач Объект)
	
	Результат = Новый Структура("Успешно, Сообщение", Истина, "");
	
	НачатьТранзакцию();
	Попытка
		РегистрыСведений.СтатусыЗаявокПоГруппамРазработки.РассчитатьСтатусыПоФилиалам(Объект);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Результат.Успешно = Ложь;
		Результат.Сообщение = ТекстОшибки;
		
		ЗаписьЖурналаРегистрации("Очередь событий на обработку.РассчитатьСтатусыПоФилиалам", УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ЗаявкаНаРазработку, Объект, "Не удалось рассчитать статусы по филиалам по причине: " + ТекстОшибки);
	КонецПопытки;
		
	Возврат Результат;
	
КонецФункции

// Производит запись результата обработки объекта в базу данных
//
// Параметры:
//  Ссылка				 - ДокументСсылка.ВнутреннееЗадание, СправочникСсылка.Проекты, ДокументСсылка.Задача, ДокументСсылка.ЗаявкаНаРазработку, СправочникСсылка.Знания	 - ссылка на объект
//  Автор				 - СправочникСсылка.Пользователи	 - автор события
//  РезультатОбработки	 - Структура	 - таблица изменений и признак отправки сообщения об изменении
//		* ОтправлятьСообщения	 - Булево	 - признак того что требуется производить запись в 
//															РегистрСведений.ПодготовленныеСообщенияПользователяПоКатегориям
//		* ТаблицаИзменений	 - ТаблицаЗначений	 - таблица изменений реквизитов и табличных частей объекта
//			** ТекстСообщения	 - Строка	 - текст сообщения об измении реквизита или табличной части
//			** Категория	 - ПеречислениеСсылка.КатегорииСобытийИсторияИзменений	 - категория сообщения, к которой отностится изменение
//			** ИмяРеквизита	 - Строка	 - имя реквизита как оно задано в конфигураторе
//			** Период	 - Дата	 - дата выполнения изменений, которая будет записана в историю изменения объекта по событиям
// 
// Возвращаемое значение:
//   - Стрктура
//		* Успешно	 - Булево	 - признак корректности записи
//		* Сообщение	 - Строка	 - сообщение об ошибке при неудачной записи
//
Функция СохранитьРезультатОбработки(Знач Ссылка, Знач Автор, Знач РезультатОбработки)
	
	Результат = Новый Структура("Успешно, Сообщение", Истина, "");
	
	// Если были изменения
	Если РезультатОбработки.ТаблицаИзменений <> Неопределено И РезультатОбработки.ТаблицаИзменений.Количество() > 0 Тогда
		// Определение необходимости записи сообщений об изменении
		ЗаписыватьСообщения = Ложь;
		Получатели = Новый Массив;
		
		Если РезультатОбработки.ОтправлятьСообщения И РезультатОбработки.ТаблицаИзменений.Количество() > 0 Тогда
			Получатели = ОпределитьПолучателейПоСсылкеНаОбъект(Ссылка, Автор);
			ЗаписыватьСообщения = (Получатели.Количество() > 0);
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			// Запись истории изменения объекта
			РегистрыСведений.ИсторияИзмененийОбъектовПоСобытиям.Добавить(Ссылка, РезультатОбработки.ТаблицаИзменений, Автор);
			
			// Запись сообщений о изменении объекта
			Если ЗаписыватьСообщения Тогда
				РегистрыСведений.ПодготовленныеСообщенияПользователяПоКатегориям.Добавить(Получатели, Ссылка,
					РезультатОбработки.ТаблицаИзменений, Автор);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			Результат.Успешно = Ложь;
			Результат.Сообщение = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие записей в регистре сведений ИсторияИзмененийОбъектовПоСобытиям
//
// Параметры:
//  Ссылка	 - ДокументСсылка.ЗаявкаНаРазработку	 - ссылка на заявку на разработку
// 
// Возвращаемое значение:
//  Булево - признак наличия записей
//
Функция ЭтаЗаявкаОтсутствуетВИстории(Знач Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСТИНА КАК ЕстьЗаписи
	|ИЗ
	|	РегистрСведений.ИсторияИзмененийОбъектовПоСобытиям КАК ИсторияИзмененийОбъектовПоСобытиям
	|ГДЕ
	|	ИсторияИзмененийОбъектовПоСобытиям.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Ссылка);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ЗаменитьВладельцаПродуктаВУчастниках(Объект, СтарыйВладелец, НовыйВладелец)
	
	Если СтарыйВладелец = НовыйВладелец Тогда
		Возврат;
	КонецЕсли;
	
	// Есть объекту устанавливают продукт впервые, старого владельца продукта не будет,
	// соответственно, никого не требуется удалять из участников удалять объекта.
	УдалитьВладельцаПродуктаИзУчастниковОбъекта(Объект);
	
	// Если для объекта убирают продукт, значит не будет нового владельца продукта,
	// и добавляться в участники объекта некого.
	Если ЗначениеЗаполнено(НовыйВладелец) Тогда
		РегистрыСведений.Участники.Добавить(Объект, НовыйВладелец, Справочники.РолиУчастников.ВладелецПродукта);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьПродуктВПодчиненномОбъекте(ОбъектСсылка, НовыйПродукт)
	
	Объект = ОбъектСсылка.ПолучитьОбъект();
	Объект.Продукт = НовыйПродукт;
	Объект.ОбменДанными.Загрузка = Истина;
	
	Объект.Записать();
	
КонецПроцедуры

Процедура ОбработатьИзменениеВладельцаПродукта(Знач Продукт, Знач СтарыйВладелец, Знач НовыйВладелец)
	
	ОбъектыСПродуктом = ПолучитьОбъектыПоПродукту(Продукт);
	
	Для Каждого Объект Из ОбъектыСПродуктом Цикл
		ЗаменитьВладельцаПродуктаВУчастниках(Объект, СтарыйВладелец, НовыйВладелец);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьИзменениеПродуктаВОбъекте(Знач Объект, Знач СтарыйПродукт, Знач НовыйПродукт)
	
	// Получение владельцев старого и нового продукта
	Если ЗначениеЗаполнено(СтарыйПродукт) Тогда
		ВладелецСтарогоПродукта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтарыйПродукт, "Ответственный");
	Иначе
		ВладелецСтарогоПродукта = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыйПродукт) Тогда
		ВладелецНовогоПродукта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовыйПродукт, "Ответственный");
	Иначе
		ВладелецНовогоПродукта = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	// Замена владельца в текущем продукте
	ЗаменитьВладельцаПродуктаВУчастниках(Объект, ВладелецСтарогоПродукта, ВладелецНовогоПродукта);
	
	// Обработка подчиенных внутренних заданий и проектов
	ОтобранныеОбъекты = ПолучитьПодчиненныеПроектыИВнутренниеЗадания(Объект);
	
	Для Каждого ДанныеОбъекта Из ОтобранныеОбъекты Цикл
		Если ДанныеОбъекта.Продукт <> НовыйПродукт Тогда
			ИзменитьПродуктВПодчиненномОбъекте(ДанныеОбъекта.Объект, НовыйПродукт);
		КонецЕсли;
			
		// Постановка события изменения продукта в подчиненном объекте
		ИзменениеПродуктаВОбъекте(ДанныеОбъекта.Объект, СтарыйПродукт, НовыйПродукт);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьОбновлениеРолиУчастникаГруппыДоступа(Знач Пользователь, Знач Данные)
	
	// Получаем дополнительные данные, которые помогут определить, в каких
	// группах доступа находится пользователь по филиалу и должности
	ДанныеПользователяДляГруппДоступа = ПолучитьДанныеПользователяДляГруппДоступа(Пользователь, Данные);
	
	Запрос = Новый Запрос;
	
#Область ТекстЗапроса

	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчастникиГруппыДоступа.Ссылка КАК ГруппаДоступа
	|ПОМЕСТИТЬ НепосредственныйУчастникГруппДоступа
	|ИЗ
	|	Справочник.ГруппыДоступа.Участники КАК УчастникиГруппыДоступа
	|ГДЕ
	|	(ВЫРАЗИТЬ(УчастникиГруппыДоступа.Элемент КАК Справочник.Пользователи)) = &Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РолиКонфигурацииГруппыДоступа.Ссылка КАК ГруппаДоступа,
	|	РолиКонфигурацииГруппыДоступа.Роль КАК Роль
	|ПОМЕСТИТЬ СтарыеГруппыИРоли
	|ИЗ
	|	Справочник.ГруппыДоступа.Участники КАК УчастникиГруппыДоступа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.РолиКонфигурации КАК РолиКонфигурацииГруппыДоступа
	|		ПО УчастникиГруппыДоступа.Ссылка = РолиКонфигурацииГруппыДоступа.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ НепосредственныйУчастникГруппДоступа КАК НепосредственныйУчастникГруппДоступа
	|		ПО УчастникиГруппыДоступа.Ссылка = НепосредственныйУчастникГруппДоступа.ГруппаДоступа
	|ГДЕ
	|	УчастникиГруппыДоступа.Элемент = &СтароеЗначение
	|	И НепосредственныйУчастникГруппДоступа.ГруппаДоступа ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РолиКонфигурацииГруппыДоступа.Ссылка КАК ГруппаДоступа,
	|	РолиКонфигурацииГруппыДоступа.Роль КАК Роль
	|ПОМЕСТИТЬ НовыеГруппыИРоли
	|ИЗ
	|	Справочник.ГруппыДоступа.Участники КАК УчастникиГруппыДоступа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.РолиКонфигурации КАК РолиКонфигурацииГруппыДоступа
	|		ПО УчастникиГруппыДоступа.Ссылка = РолиКонфигурацииГруппыДоступа.Ссылка
	|ГДЕ
	|	УчастникиГруппыДоступа.Элемент = &НовоеЗначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РолиКонфигурацииГруппыДоступа.Ссылка КАК ГруппаДоступа,
	|	РолиКонфигурацииГруппыДоступа.Роль КАК Роль
	|ПОМЕСТИТЬ ДругиеГруппыИРоли
	|ИЗ
	|	Справочник.ГруппыДоступа.Участники КАК УчастникиГруппыДоступа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.РолиКонфигурации КАК РолиКонфигурацииГруппыДоступа
	|		ПО УчастникиГруппыДоступа.Ссылка = РолиКонфигурацииГруппыДоступа.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтарыеГруппыИРоли КАК СтарыеГруппыИРоли
	|		ПО (РолиКонфигурацииГруппыДоступа.Ссылка = СтарыеГруппыИРоли.ГруппаДоступа)
	|ГДЕ
	|	УчастникиГруппыДоступа.Элемент В(&ДанныеПользователя)
	|	И СтарыеГруппыИРоли.ГруппаДоступа ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрограммныеРоли.Наименование КАК Роль
	|ИЗ
	|	СтарыеГруппыИРоли КАК СтарыеГруппыИРоли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрограммныеРоли КАК ПрограммныеРоли
	|		ПО СтарыеГруппыИРоли.Роль = ПрограммныеРоли.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДругиеГруппыИРоли КАК ДругиеГруппыИРоли
	|		ПО СтарыеГруппыИРоли.Роль = ДругиеГруппыИРоли.Роль
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеГруппыИРоли КАК НовыеГруппыИРоли
	|		ПО СтарыеГруппыИРоли.Роль = НовыеГруппыИРоли.Роль
	|ГДЕ
	|	ДругиеГруппыИРоли.Роль ЕСТЬ NULL
	|	И НовыеГруппыИРоли.Роль ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрограммныеРоли.Наименование КАК Роль
	|ИЗ
	|	НовыеГруппыИРоли КАК НовыеГруппыИРоли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрограммныеРоли КАК ПрограммныеРоли
	|		ПО НовыеГруппыИРоли.Роль = ПрограммныеРоли.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДругиеГруппыИРоли КАК ДругиеГруппыИРоли
	|		ПО НовыеГруппыИРоли.Роль = ДругиеГруппыИРоли.Роль
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтарыеГруппыИРоли КАК СтарыеГруппыИРоли
	|		ПО (НовыеГруппыИРоли.Роль = СтарыеГруппыИРоли.Роль)
	|ГДЕ
	|	ДругиеГруппыИРоли.Роль ЕСТЬ NULL
	|	И СтарыеГруппыИРоли.Роль ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.ИдентификаторПользователяИБ КАК Идентификатор
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &Пользователь";
	
#КонецОбласти
	
	Запрос.УстановитьПараметр("СтароеЗначение", Данные.СтароеЗначение);
	Запрос.УстановитьПараметр("НовоеЗначение", Данные.НовоеЗначение);
	Запрос.УстановитьПараметр("ДанныеПользователя", ДанныеПользователяДляГруппДоступа);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Пакеты = Запрос.ВыполнитьПакет();
	МаксимальныйИндекс = Пакеты.ВГраница();
	
	// Получаем результаты запроса
	РезультатЗапросаУдаляемыеРоли = Пакеты.Получить(МаксимальныйИндекс - 2);
	РезультатЗапросаДобавляемыеРоли = Пакеты.Получить(МаксимальныйИндекс - 1);
	РезультатЗапросаИдентификаторПользователя = Пакеты.Получить(МаксимальныйИндекс);
	
	// Выгружаем роли, которые нужно удалить/добавить
	УдаляемыеРоли = РезультатЗапросаУдаляемыеРоли.Выгрузить().ВыгрузитьКолонку("Роль");
	ДобавляемыеРоли = РезультатЗапросаДобавляемыеРоли.Выгрузить().ВыгрузитьКолонку("Роль");
	
	// Если никакие действия с ролями выполнять не нужно, прекращаем обработку события
	Если УдаляемыеРоли.Количество() = 0 И ДобавляемыеРоли.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Получаем идентификатор пользователя ИБ
	ВыборкаИдентификаторПользователя = РезультатЗапросаИдентификаторПользователя.Выбрать();
	ВыборкаИдентификаторПользователя.Следующий();
	СтрокаИдентификаторПользователя = ВыборкаИдентификаторПользователя.Идентификатор;
	
	// Получаем пользователя ИБ
	ИдентификаторПользователя = Новый УникальныйИдентификатор(СтрокаИдентификаторПользователя);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователя);
	
	Если ПользовательИБ <> Неопределено Тогда
		// Удаляем ненужные более роли
		Для Каждого УдаляемаяРоль Из УдаляемыеРоли Цикл
			РольКонфигурации = Метаданные.Роли.Найти(УдаляемаяРоль);
			Если РольКонфигурации <> Неопределено Тогда
				Если ПользовательИБ.Роли.Содержит(РольКонфигурации) Тогда
					ПользовательИБ.Роли.Удалить(РольКонфигурации);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Добавляем новые роли
		Для Каждого ДобавляемаяРоль Из ДобавляемыеРоли Цикл
			РольКонфигурации = Метаданные.Роли.Найти(ДобавляемаяРоль);
			Если РольКонфигурации <> Неопределено Тогда
				Если НЕ ПользовательИБ.Роли.Содержит(РольКонфигурации) Тогда
					ПользовательИБ.Роли.Добавить(РольКонфигурации);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ПользовательИБ.Записать();
	Иначе
		Шаблон = "Не удалось обновить роли пользователя. Для сотрудника %1 не существует пользователя ИБ.";
		ТекстСообщения = СтрШаблон(Шаблон, Пользователь);
		Событие = "Очередь событий на обработку.Обновление состава ролей участника групп доступа";
		ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка, , Пользователь, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет всем подчиненным элементам значение реквизитов
//  ВидРодительскогоПроекта (для задач, внутренних заданий и заявок на разработку)
//  и ВидПроекта (для проектов) на значение родительского объекта
//
// Параметры:
//  Ссылка			 - СправочникСсылка.Проекты, ДокументСсылка.ЗаявкаНаРазработку,
//						ДокументСсылка.ВнутреннееЗадание, ДокументСсылка.Задача	 - ссылка на объект
//  ВидПроекта		 - СправочникСсылка.ВидыПроектов	 - вид проекта, который будет установлен подчиненным
//
Функция ОбновитьВидРодительскогоПроектаПодчиненныхОбъектов(Объект, Данные) 
	
	Результат = Новый Структура("Успешно, Сообщение", Истина, "");
	
	Попытка
		ОбрабатываемыйОбъект = Неопределено;
	    Подчиненные = ОбщегоНазначения.ПолучитьСсылкиНаВсеПодчиненныеОбъекты(Объект);	
		ВидПроекта = Данные.ВидПроекта;
		
		Для Каждого Элемент Из Подчиненные Цикл   
			ОбрабатываемыйОбъект = Элемент;  
			
			ТипЗначения      = ТипЗнч(Элемент);
			ПолученныйОбъект = Элемент.ПолучитьОбъект();  
			
			Если ТипЗначения = Тип("СправочникСсылка.Проекты") Тогда			
				ПолученныйОбъект.ВидПроекта = ВидПроекта;
				
			ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ВнутреннееЗадание")
				ИЛИ ТипЗначения = Тип("ДокументСсылка.ЗаявкаНаРазработку")
				ИЛИ ТипЗначения = Тип("ДокументСсылка.Задача") Тогда
				
				ПолученныйОбъект.ВидРодительскогоПроекта = ВидПроекта;
			Иначе
				Продолжить;
			КонецЕсли;
			
			ПолученныйОбъект.ОбменДанными.Загрузка = Истина;
			ПолученныйОбъект.Записать(); 
		КонецЦикла;  
	Исключение
		
		ИмяСобытия = "ОчередьСобытийНаОбработку.ОбновитьВидРодительскогоПроекта";
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = СтрШаблон("Не удалось обновить по причине: %1" ,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		// Сообщение сохраняем в событие и помечаем запись как обработанную, чтобы не останавливать очередь
		Результат.Сообщение = ТекстОшибки;
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ОбрабатываемыйОбъект, ТекстОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеПользователяДляГруппДоступа(Знач Пользователь, Знач Данные)
	
	ДанныеПользователя = Новый Массив;
	ДанныеПользователя.Добавить(Пользователь);
	
	ТипЗначения = ТипЗнч(Данные.НовоеЗначение);
	Если ТипЗначения = Неопределено Тогда
		ТипЗначения = ТипЗнч(Данные.СтароеЗначение);
	КонецЕсли;
	
	// Для корректного определения групп доступа, в которых находится пользователь на текущий момент,
	// нужно получить значения, так сказать, не измененных реквизитов. В группах доступа в качестве
	// участников, помимо сотрудников, могут быть филиалы и должности. При имзменении личных дел
	// отслеживаются изменение филиалов и должностей. Если изменилась должность, старое значение
	// известно, но филиал пользователя не известен, хотя, он нужен для определения групп доступа
	// в которых пользователь находится на данный момент. По этой причине если изменилась должность,
	// происходит получение филиала и наоборот.
	
	Если ТипЗначения = Тип("СправочникСсылка.Должности") Тогда
		ДополнительноеЗначение = РегистрыСведений.ЛичныеДела.ФилиалПользователя(Пользователь);
	Иначе
		ДополнительноеЗначение = РегистрыСведений.ЛичныеДела.ДолжностьПользователя(Пользователь);
	КонецЕсли;
	
	ДанныеПользователя.Добавить(ДополнительноеЗначение);
	ДанныеПользователя.Добавить(Данные.СтароеЗначение);
	
	Возврат ДанныеПользователя;
	
КонецФункции

Функция ПолучитьОбъектыПоПродукту(Знач Продукт)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Проекты.Ссылка КАК Объект
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	Проекты.Продукт = &Продукт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнутреннееЗадание.Ссылка
	|ИЗ
	|	Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
	|ГДЕ
	|	ВнутреннееЗадание.Продукт = &Продукт";
	
	Запрос.УстановитьПараметр("Продукт", Продукт);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Объект");
	Иначе
		Результат = Новый Массив;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПодчиненныеПроектыИВнутренниеЗадания(Знач Объект)
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Проекты.Ссылка КАК Ссылка,
	|	Проекты.Продукт КАК Продукт
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	Проекты.ОбъектОснование = &ОбъектОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнутреннееЗадание.Ссылка,
	|	ВнутреннееЗадание.Продукт
	|ИЗ
	|	Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
	|ГДЕ
	|	ВнутреннееЗадание.ОбъектОснование = &ОбъектОснование";
	
	Запрос.УстановитьПараметр("ОбъектОснование", Объект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбъектСПродуктом = Новый Структура;
			ОбъектСПродуктом.Вставить("Объект", Выборка.Ссылка);
			ОбъектСПродуктом.Вставить("Продукт", Выборка.Продукт);
			
			Результат.Добавить(ОбъектСПродуктом);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УдалитьВладельцаПродуктаИзУчастниковОбъекта(Объект)
	
	НаборЗаписей = РегистрыСведений.Участники.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	НаборЗаписей.Отбор.Роль.Установить(Справочники.РолиУчастников.ВладелецПродукта);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура УстановитьЛогинПриСменеПочты(Знач Пользователь, Знач НоваяПочта)
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Страны.Домен КАК Домен,
	|	СтраныПочтовыеДомены.Наименование КАК ПочтовыйДомен
	|ИЗ
	|	Справочник.Страны КАК Страны
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Страны.ПочтовыеДомены КАК СтраныПочтовыеДомены
	|		ПО Страны.Ссылка = СтраныПочтовыеДомены.Ссылка
	|ИТОГИ ПО
	|	Домен";
	
	РезультатЗапроса  = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	ИдентификаторИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ"); 
	
	ВыборкаДоменов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	
	Пока ВыборкаДоменов.Следующий() Цикл
		Домен = ВыборкаДоменов.Домен;
		
		ВыборкаПочтовыйДомен = ВыборкаДоменов.Выбрать();
		Пока ВыборкаПочтовыйДомен.Следующий() Цикл
			РезультатПоиска = СтрНайти(НоваяПочта, ВыборкаПочтовыйДомен.ПочтовыйДомен); 
			
			Если РезультатПоиска <> 0 Тогда 
				ЛогинПочты = Лев(НоваяПочта, РезультатПоиска - 1);
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторИБ);
				
				Если ПользовательИБ <> Неопределено Тогда 
					ПользовательИБ.ПользовательОС = Домен + ЛогинПочты;
					ПользовательИБ.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает шаблон для формирования электронного письма
//
// Параметры:
//  ИмяРеквизита - Строка - Имя реквизита
//  СтароеЗначение - Значение реквизита - Старое значение реквизита 
//  НовоеЗначение - Значение реквизита - Новое значние реквизита
//  Шаблоны - Структура - Шаблоны письма, см. РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма()
// 
// Возвращаемое значение:
//  Результат - Строка - Возвращает сформированный шаблон со значениями
//
Функция ПолучитьШаблонИзмененияРеквизита(Знач ИмяРеквизита, Знач СтароеЗначение, Знач НовоеЗначение, Знач Шаблоны = Неопределено) Экспорт

	Если Шаблоны = Неопределено Тогда
		Шаблоны = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма();
	КонецЕсли;
	
	Результат = Шаблоны.БлокДвеТаблицы;
	
	Если ЗначениеЗаполнено(СтароеЗначение) Тогда
		
		Если ЗначениеЗаполнено(НовоеЗначение) Тогда
			
			Если ИмяРеквизита = "Наименование" Тогда
				РазделительЗначений = "<br>";
			Иначе
				РазделительЗначений = "&#10230;";
			КонецЕсли;
			
			ШаблонИзменения = СтрШаблон("%1 %2 %3", СтрЗаменить(Шаблоны.СтароеЗначение, "<!-- value -->", СтароеЗначение),
				РазделительЗначений, СтрЗаменить(Шаблоны.НовоеЗначение, "<!-- value -->", НовоеЗначение));
			
		Иначе
			ШаблонИзменения = СтрЗаменить(Шаблоны.СтароеЗначение, "<!-- value -->", СтароеЗначение);
		КонецЕсли;
		
	Иначе
		ШаблонИзменения = СтрЗаменить(Шаблоны.НовоеЗначение, "<!-- value -->", НовоеЗначение);
	КонецЕсли;
	
	Результат = СтрЗаменить(Результат, "<!-- left_table_1 -->", СтрШаблон("%1:", ИмяРеквизита));
	Результат = СтрЗаменить(Результат, "<!-- left_table_2 -->", ШаблонИзменения);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
