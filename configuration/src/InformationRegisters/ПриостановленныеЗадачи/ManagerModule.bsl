///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Ищет в регистре сведений ПриостановленныеЗадачи запись о приостановке задачи
// и устанавливает ДатуОкончания в текущую дату, тем самым указывая, что задача
// больше не является приостановленной.
//
// Параметры:
//  Ссылка - ДокументСсылка.Задача - ссылка на документ "Задача".
//
Процедура Возобновить(Знач Ссылка) Экспорт
	
	// Получим запросом данные по задаче
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриостановленныеЗадачиСрезПоследних.Период КАК Период,
	|	ПриостановленныеЗадачиСрезПоследних.Задача КАК Задача,
	|	&ДатаОкончания КАК ДатаОкончания,
	|	ПриостановленныеЗадачиСрезПоследних.Комментарий КАК Комментарий,
	|	ПриостановленныеЗадачиСрезПоследних.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.ПриостановленныеЗадачи.СрезПоследних(, Задача = &Задача) КАК ПриостановленныеЗадачиСрезПоследних";
	
	Запрос.УстановитьПараметр("Задача", Ссылка);
	Запрос.УстановитьПараметр("ДатаОкончания", ТекущаяДатаСеанса());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		// Установим блокировку на запись регистра сведений ПриостановленныеЗадачи
		// по приостанавливаемой задаче.
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ПриостановленныеЗадачи");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Период", Выборка.Период);
		ЭлементБлокировки.УстановитьЗначение("Задача", Выборка.Задача);
		БлокировкаДанных.Заблокировать();
		
		// Создадим набор записей и добавим в него новую запись.
		НаборЗаписей = РегистрыСведений.ПриостановленныеЗадачи.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.Задача.Установить(Выборка.Задача);
		
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в регистр сведений ПриостановленныеЗадачи запись о приостановке
// работы над задачей.
//
// Параметры:
//  Ссылка      - ДокументСсылка.Задача - ссылка на документ "Задача".
//  Комменатрий - Строка - описание причины приостановки.
//
Процедура Приостановить(Знач Ссылка, Знач Комментарий) Экспорт
	
	// Установим блокировку на запись регистра сведений ПриостановленныеЗадачи
	// по приостанавливаемой задаче.
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ПриостановленныеЗадачи");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Задача", Ссылка);
	БлокировкаДанных.Заблокировать();
	
	// Создадим набор записей и добавим в него новую запись.
	НаборЗаписей = РегистрыСведений.ПриостановленныеЗадачи.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Задача.Установить(Ссылка);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период       = ТекущаяДатаСеанса();
	НоваяЗапись.Задача       = Ссылка;
	НоваяЗапись.Комментарий  = Комментарий;
	НоваяЗапись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	// Записи не замещаем, а добавляем новую
	НаборЗаписей.Записать(Ложь);
	
КонецПроцедуры

#КонецОбласти
