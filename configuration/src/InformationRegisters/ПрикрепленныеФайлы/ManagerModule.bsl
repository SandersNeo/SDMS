///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция добавляет в регистр сведений информацию по прикрепленному файлу
//
// Параметры:
//  Объект		 - ОписаниеТипов.ВладелецПрисоединенныхФайлов	 - владелец файла
//  Файл		 - Справочник.Файлы								 - ссылка на элемент справочника файлы
//  Назначение	 - Перечисление.НазначенияФайлов				 - какой части объекта принадлежит файл
//
Процедура ДобавитьЗапись(Знач Объект, Знач Файл, Знач Назначение) Экспорт
	
	НаборЗаписей = РегистрыСведений.ПрикрепленныеФайлы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	НаборЗаписей.Отбор.Файл.Установить(Файл);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Объект = Объект;
		НоваяЗапись.Файл = Файл;
	Иначе
		НоваяЗапись = НаборЗаписей[0];
	КонецЕсли;  
	
	НоваяЗапись.Назначение = Назначение;
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Заполняет использование прикрепленных файлов в объекте по описаниию
//
// Параметры:
//  Объект	 - ЛюбаяСсылка	 - объект с описанием
//  Описание - Строка		 - описание объекта
//
Процедура ЗаполнитьИспользованиеФайловОписаний(Объект, Описание) Экспорт  
	
	Таблицы = ПолучитьТаблицыФайлов();                                                      
	Таблицы.ТаблицаОбъектов.Добавить().Объект = Объект;			
	ЗаполнитьИспользуемыеФайлыОписаний(Объект, Таблицы.ТаблицаИспользуемыхФайлов, Описание);
	Результат = ЗаписатьИспользуемыеФайлыОписаний(Таблицы.ТаблицаИспользуемыхФайлов, Таблицы.ТаблицаОбъектов);
	
	Если НЕ Результат.Успешно Тогда
		ШаблонОшибки = "Ошибка сохранения использования файлов в описании. Описание ошибки: %1.";
		ТекстОшибки = СтрШаблон(ШаблонОшибки, Результат.ТекстОшибки);	
		ЗаписьЖурналаРегистрации("ЗаолнениеИспользумеыхФайловОписания", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки); 
	КонецЕсли;		
	
КонецПроцедуры

// Обрабатывает используемые файлы описаний
//
// Параметры:
//  ТаблицаИспользуемыхФайлов	 - ТаблицаЗначений	 - таблица используемых файлов
//  ТаблицаОбъектов				 - ТаблицаЗначений	 - таблица объектов
// 
// Возвращаемое значение:
//  Структура - результат работы функции
//
Функция ЗаписатьИспользуемыеФайлыОписаний(ТаблицаИспользуемыхФайлов, ТаблицаОбъектов) Экспорт 
	
	Результат = Новый Структура("Успешно, ТекстОшибки", Истина, ""); 

	Запрос = Новый Запрос;
	Запрос.Текст =  
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ТаблицаФайлов.Объект КАК Объект,
	|	ТаблицаФайлов.Файл КАК Файл
	|ПОМЕСТИТЬ ТаблицаФайлов
	|ИЗ
	|	&ТаблицаФайлов КАК ТаблицаФайлов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОбъектов.Объект КАК Объект
	|ПОМЕСТИТЬ ВыбранныеОбъекты
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрикрепленныеФайлы.Объект КАК Объект,
	|	ПрикрепленныеФайлы.Файл КАК Файл
	|ПОМЕСТИТЬ ПрикрепленныеФайлы
	|ИЗ
	|	РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВыбранныеОбъекты КАК ВыбранныеОбъекты
	|		ПО (ВыбранныеОбъекты.Объект = ПрикрепленныеФайлы.Объект)
	|			И (ПрикрепленныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.ИзображениеОписанияДокумента))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФайлов.Объект КАК Объект,
	|	Файлы.Ссылка КАК Файл,
	|	ИСТИНА КАК Используется
	|ПОМЕСТИТЬ ДанныеЗапроса
	|ИЗ
	|	ТаблицаФайлов КАК ТаблицаФайлов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО ТаблицаФайлов.Файл = Файлы.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ПО (ПрикрепленныеФайлы.Объект = ТаблицаФайлов.Объект)
	|			И (ПрикрепленныеФайлы.Файл = Файлы.Ссылка)
	|ГДЕ
	|	ПрикрепленныеФайлы.Объект ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПрикрепленныеФайлы.Объект,
	|	Файлы.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВыбранныеОбъекты КАК ВыбранныеОбъекты
	|		ПО (ВыбранныеОбъекты.Объект = ПрикрепленныеФайлы.Объект)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО ПрикрепленныеФайлы.Файл = Файлы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаФайлов КАК ТаблицаФайлов
	|		ПО ПрикрепленныеФайлы.Объект = ТаблицаФайлов.Объект
	|			И (Файлы.Наименование = ТаблицаФайлов.Файл)
	|ГДЕ
	|	ТаблицаФайлов.Объект ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЗапроса.Объект КАК Объект,
	|	ДанныеЗапроса.Файл КАК Файл,
	|	ДанныеЗапроса.Используется КАК Используется
	|ИЗ
	|	ДанныеЗапроса КАК ДанныеЗапроса"; 
	#КонецОбласти           
	
	Запрос.УстановитьПараметр("ТаблицаФайлов", ТаблицаИспользуемыхФайлов); 	
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектов); 	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата()); 
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаФайлы = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать();                                
	НаборПрикрепленныеФайлы = РегистрыСведений.ПрикрепленныеФайлы.СоздатьНаборЗаписей();
	
	НачатьТранзакцию();
	Попытка
		Пока ВыборкаФайлы.Следующий() Цикл
			
			НаборПрикрепленныеФайлы.Отбор.Объект.Установить(ВыборкаФайлы.Объект);
			НаборПрикрепленныеФайлы.Отбор.Файл.Установить(ВыборкаФайлы.Файл); 
			
			Если ВыборкаФайлы.Используется Тогда
				НаборПрикрепленныеФайлы.Прочитать(); 
				
				Если НаборПрикрепленныеФайлы.Количество() = 0 Тогда 
					НоваяСтрока = НаборПрикрепленныеФайлы.Добавить();
					НоваяСтрока.Объект = ВыборкаФайлы.Объект;
					НоваяСтрока.Файл = ВыборкаФайлы.Файл;
					НоваяСтрока.Назначение = Перечисления.НазначенияФайлов.ИзображениеОписанияДокумента; 
				КонецЕсли;
			КонецЕсли; 
			
			НаборПрикрепленныеФайлы.Записать();	
			НаборПрикрепленныеФайлы.Очистить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение                    
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Процедура - Заполнить используемые файлы описаний
//
// Параметры:
//  Объект						 - ЛюбаяСсылка	 - Оюъект, владелец файла
//  ТаблицаИспользуемыхФайлов	 - ТаблицаЗначений	 - Таблица используемых файлов
//  Описание					 - Строка			 - Описание из объекта
//
Процедура ЗаполнитьИспользуемыеФайлыОписаний(Объект, ТаблицаИспользуемыхФайлов, Описание) Экспорт
	
	// Таким образом получается быстрее чем через RegExp
	// "attachments/" + гуид каталога + "/sdms_file_" + гуид без тире + 20 с запасом на расширение 
	УстановитьПривилегированныйРежим(Истина);
	КаталогХранения = Константы.КаталогФайловОбъектов.Получить() + "/";
	ЧислоСреза = СтрДлина(КаталогХранения) + 36 + 11 + 32 + 20; 	
	Вхождений = СтрЧислоВхождений(Описание, КаталогХранения);
	
	// Если данный объект в таблице уже есть, то нужно его удалить и заново заполнить. Так как это
	// значит, что два задания по одному и тому же объекту попали в один пул для обработки. Нужно брать последний.
	СтрокиОбъекта = ТаблицаИспользуемыхФайлов.НайтиСтроки(Новый Структура("Объект", Объект));
	Если СтрокиОбъекта.Количество() > 0 Тогда 
		Для Каждого Строка Из СтрокиОбъекта Цикл
			ТаблицаИспользуемыхФайлов.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;	
	
	Для Счетчик = 1 По Вхождений Цикл
		ТекстКартинка = Сред(Описание, СтрНайти(Описание, КаталогХранения,,, Счетчик), ЧислоСреза); 
		Массив = СтрРазделить(ТекстКартинка, "/)]""");
			 
		// всегда третий в списке             
		Если Массив.Количество() > 2 Тогда			
			НоваяСтрока = ТаблицаИспользуемыхФайлов.Добавить();
			НоваяСтрока.Объект = Объект;
			НоваяСтрока.Файл = Массив[2];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Находит и очищает записи с битыми ссылками объектов из регистра ПрикрепленныеФайлы
//
Процедура ОчиститьБитыеСсылки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ПрикрепленныеФайлы.Объект КАК Объект,
	|	ПрикрепленныеФайлы.Файл КАК Файл
	|ПОМЕСТИТЬ БитыеСсылки
	|ИЗ
	|	РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО ПрикрепленныеФайлы.Файл = Файлы.Ссылка
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ПрикрепленныеФайлы.Объект) <> ТИП(СТРОКА)
	|	И ПрикрепленныеФайлы.Объект.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БитыеСсылки.Файл КАК Файл,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПрикрепленныеФайлы.Объект) КАК Количество
	|ПОМЕСТИТЬ ИспользованиеВДругихОбъектах
	|ИЗ
	|	БитыеСсылки КАК БитыеСсылки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ПО (ПрикрепленныеФайлы.Файл = БитыеСсылки.Файл)
	|			И БитыеСсылки.Объект <> ПрикрепленныеФайлы.Объект
	|			И (НЕ ПрикрепленныеФайлы.Объект.Ссылка ЕСТЬ NULL)
	|
	|СГРУППИРОВАТЬ ПО
	|	БитыеСсылки.Файл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БитыеСсылки.Объект КАК Объект,
	|	БитыеСсылки.Файл КАК Файл,
	|	ЕСТЬNULL(ИспользованиеВДругихОбъектах.Количество, 0) КАК Использование
	|ИЗ
	|	БитыеСсылки КАК БитыеСсылки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИспользованиеВДругихОбъектах КАК ИспользованиеВДругихОбъектах
	|		ПО БитыеСсылки.Файл = ИспользованиеВДругихОбъектах.Файл
	|ИТОГИ
	|	МАКСИМУМ(Использование)
	|ПО
	|	Файл";
	#КонецОбласти
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Набор = СоздатьНаборЗаписей();
	ВыборкаФайл = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаФайл.Следующий() Цикл
		
		Если ВыборкаФайл.Использование = 0 Тогда
			РаботаСФайламиСервер.УдалитьФайлССервера(ВыборкаФайл.Файл);
		Иначе         
			
			Выборка = ВыборкаФайл.Выбрать();
			Пока Выборка.Следующий() Цикл
				Набор.Отбор.Объект.Установить(Выборка.Объект);
				Набор.Отбор.Файл.Установить(Выборка.Файл);
				Набор.Записать(Истина);               
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Формирует и возвращает массив с именами и полными путями публикации файлов объекта
//
// Параметры:
//  Объект		 - ДокументСсылка.ЗаявкаНаРазработку	 - ссылка на объект
//  Назначение	 - ПеречислениеСсылка.НазначенияФайлов	 - назначение файла
// 
// Возвращаемое значение:
//  Массив - содержит структуры с именами и полными путями публикации файлов
//
Функция ПолучитьФайлыОбъекта(Знач Объект, Знач Назначение = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ОригинальноеИмя КАК ОригинальноеИмя,
	|	Файлы.Каталог КАК Каталог,
	|	Файлы.Наименование КАК Наименование,
	|	Файлы.ПолучатьИзMinio КАК ПолучатьИзMinio
	|ИЗ
	|	РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО ПрикрепленныеФайлы.Файл = Файлы.Ссылка
	|ГДЕ
	|	ПрикрепленныеФайлы.Объект = &Объект
	|{ГДЕ
	|	ПрикрепленныеФайлы.Назначение КАК Назначение}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Файлы.Ссылка,
	|	Файлы.ОригинальноеИмя,
	|	Файлы.Каталог,
	|	Файлы.Наименование,
	|	Файлы.ПолучатьИзMinio
	|ИЗ
	|	РегистрСведений.Комментарии КАК Комментарии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ПО Комментарии.Идентификатор = ПрикрепленныеФайлы.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО (ПрикрепленныеФайлы.Файл = Файлы.Ссылка)
	|ГДЕ
	|	Комментарии.Объект = &Объект
	|{ГДЕ
	|	ПрикрепленныеФайлы.Назначение КАК Назначение}";
	
	ПостроительЗапроса.Параметры.Вставить("Объект", Объект);
	
	Если Назначение <> Неопределено Тогда
		ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("Назначение");
		ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
		ЭлементОтбора.Значение = Назначение; 
		ЭлементОтбора.Использование = Истина;
	КонецЕсли;
	
	ПостроительЗапроса.Выполнить();
	
	РезультатЗапроса = ПостроительЗапроса.Результат;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		АдресПубликацииФайлов = WebОкружениеВызовСервера.АдресПубликацииФайлов();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл			
			Если Выборка.ПолучатьИзMinio Тогда
				ВнешнееХранилище = "";

				НастройкиПодключения = ИнтеграцияДополнительныхПодсистемПовтИсп.ПолучитьНастройкиПодключенияКMinio();
				Если НастройкиПодключения <> Неопределено Тогда
					ВнешнееХранилище = СтрШаблон("https://%1:%2/", НастройкиПодключения.Сервер, НастройкиПодключения.Порт);
				КонецЕсли;
		
				КаталогПубликацииФайлов = Константы.КаталогПубликацииФайлов.Получить();	
				ПолныйПуть = СтрШаблон("%1%2/%3", ВнешнееХранилище, КаталогПубликацииФайлов, Выборка.Наименование);
			Иначе
				// Формирование полного адреса публикации до файла на сервере
				АдресПубликацииСоСлэшем = ОбщегоНазначенияКлиентСервер.ДобавитьСлэш(АдресПубликацииФайлов);
				АдресПубликацииСКаталогом = АдресПубликацииСоСлэшем + Выборка.Каталог;
				АдресПубликацииСКаталогомИСлэшем = ОбщегоНазначенияКлиентСервер.ДобавитьСлэш(АдресПубликацииСКаталогом);
				ПолныйПуть = АдресПубликацииСКаталогомИСлэшем + Выборка.Наименование;
			КонецЕсли;
			
			СтруктураФайла = Новый Структура;
			СтруктураФайла.Вставить("Ссылка", Выборка.Ссылка);
			СтруктураФайла.Вставить("Имя", Выборка.ОригинальноеИмя);
			СтруктураФайла.Вставить("ИмяФайла", Выборка.Наименование);
			СтруктураФайла.Вставить("ПолныйПуть", ПолныйПуть);
			СтруктураФайла.Вставить("ПолучатьИзMinio", Выборка.ПолучатьИзMinio);
			
			Результат.Добавить(СтруктураФайла);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получет пустые таблицы для обработки файлов описаний
// 
// Возвращаемое значение:
//  Структура - Структура пустых таблиц для обработки файлов описаний
//
Функция ПолучитьТаблицыФайлов() Экспорт
	
	Типы = Новый Массив;
	Типы.Добавить(Тип("СправочникСсылка.Проекты"));
	Типы.Добавить(Тип("ДокументСсылка.ВнутреннееЗадание"));
	Типы.Добавить(Тип("ДокументСсылка.ВнутренниеТрудозатраты"));
	Типы.Добавить(Тип("ДокументСсылка.ЗаявкаНаРазработку"));
	Типы.Добавить(Тип("ДокументСсылка.Задача"));
	Типы.Добавить(Тип("СправочникСсылка.ДополнительныеОписанияОбъектов"));

	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Объект", Новый ОписаниеТипов(Типы)); 
	
	ТаблицаИспользуемыхФайлов = Новый ТаблицаЗначений;
	ТаблицаИспользуемыхФайлов.Колонки.Добавить("Объект", Новый ОписаниеТипов(Типы));
	ТаблицаИспользуемыхФайлов.Колонки.Добавить("Файл", ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(100));

	Возврат Новый Структура("ТаблицаОбъектов, ТаблицаИспользуемыхФайлов", ТаблицаОбъектов, ТаблицаИспользуемыхФайлов);
	
КонецФункции

#КонецОбласти

#КонецЕсли
