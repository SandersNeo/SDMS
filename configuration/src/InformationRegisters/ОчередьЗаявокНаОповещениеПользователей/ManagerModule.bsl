///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура Добавить(Знач Заявка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Заявка) ИЛИ ТипЗнч(Заявка) <> Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
		ВызватьИсключение "Некорректное значение параметра ""Заявка"".";
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ОчередьЗаявокНаОповещениеПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Заявка.Установить(Заявка);
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Заявка = Заявка;
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удаляет из регистра сведений одну запись по переданной заявке.
//
// Параметры:
//  Заявки - Массив - массив заявок, запись по которым необходимо удалить.
//
Процедура УдалитьВсеЗаписи() Экспорт
	
	НаборЗаписей = РегистрыСведений.ОчередьЗаявокНаОповещениеПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ПодготовитьОповещенияПользователей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОчередьЗаявокНаОповещениеПользователей.Заявка КАК Заявка,
	|	ЗаявкаНаРазработку.Направление КАК Направление,
	|	ЗаявкаНаРазработку.Автор КАК Автор,
	|	ЗаявкаНаРазработкуСистемыРазработки.Система КАК Система,
	|	ЗаявкаНаРазработкуСистемыРазработки.ГруппаЗаказчиков КАК ГруппаЗаказчиков,
	|	ЗаявкаНаРазработку.Дата КАК Дата,
	|	СистемыУчета.Руководитель КАК РуководительСистемы
	|ПОМЕСТИТЬ НаправлениеСистемаАвторЗаявки
	|ИЗ
	|	РегистрСведений.ОчередьЗаявокНаОповещениеПользователей КАК ОчередьЗаявокНаОповещениеПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ЗаявкаНаРазработкуСистемыРазработки
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СистемыУчета КАК СистемыУчета
	|				ПО ЗаявкаНаРазработкуСистемыРазработки.Система = СистемыУчета.Ссылка
	|			ПО ЗаявкаНаРазработку.Ссылка = ЗаявкаНаРазработкуСистемыРазработки.Ссылка
	|		ПО ОчередьЗаявокНаОповещениеПользователей.Заявка = ЗаявкаНаРазработку.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаправлениеСистемаАвторЗаявки.Заявка КАК Заявка,
	|	ПРЕДСТАВЛЕНИЕ(НаправлениеСистемаАвторЗаявки.Заявка) КАК ЗаявкаПредставление,
	|	НастройкиУведомленийПользователей.Пользователь КАК Пользователь,
	|	ПРЕДСТАВЛЕНИЕ(НаправлениеСистемаАвторЗаявки.Автор) КАК Автор,
	|	НаправлениеСистемаАвторЗаявки.Дата КАК Дата
	|ИЗ
	|	НаправлениеСистемаАвторЗаявки КАК НаправлениеСистемаАвторЗаявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУведомленийПользователей КАК НастройкиУведомленийПользователей
	|		ПО (НастройкиУведомленийПользователей.ВидУведомления = &ВидУведомления)
	|			И НаправлениеСистемаАвторЗаявки.Направление = НастройкиУведомленийПользователей.Направление
	|			И НаправлениеСистемаАвторЗаявки.Система = НастройкиУведомленийПользователей.Система
	|			И НаправлениеСистемаАвторЗаявки.ГруппаЗаказчиков = НастройкиУведомленийПользователей.ГруппаЗаказчиков
	|			И НаправлениеСистемаАвторЗаявки.Автор <> НастройкиУведомленийПользователей.Пользователь
	|ИТОГИ
	|	МАКСИМУМ(Автор),
	|	МАКСИМУМ(Дата)
	|ПО
	|	Заявка,
	|	Пользователь";
	
	Запрос.УстановитьПараметр("ВидУведомления", Перечисления.ВидУведомления.СозданиеЗаявок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗаявок = Новый Массив;
	
	ВыборкаЗаявок = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаявок.Следующий() Цикл
		МассивЗаявок.Добавить(ВыборкаЗаявок.Заявка);
		МассивПользователей = Новый Массив;
		
		ВыборкаПользователей = ВыборкаЗаявок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПользователей.Следующий() Цикл
			МассивПользователей.Добавить(ВыборкаПользователей.Пользователь);
		КонецЦикла;
		
		ШаблоныПисьма = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма();
		
		ТекстСообщения = ШаблоныПисьма.БлокОсновногоТекста;
		
		ТекстШаблона = СтрЗаменить(ШаблоныПисьма.ЗаголовокСобытия, "<!-- event_date -->", Формат(ВыборкаЗаявок.Дата, ШаблоныПисьма.ФорматДаты));
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- user_name -->", ВыборкаЗаявок.Автор);
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- event -->", "создал(-а) объект.");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "<!-- content -->", ТекстШаблона);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "<!-- font_size -->", "14px");
		
		СообщениеSDMS = " создал(-а) объект.";
		
		СообщениеПользователям = Новый Структура("ТекстСообщения, КатегорияСообщения, Период, СообщениеSDMS",
			ТекстСообщения, Перечисления.КатегорииСообщенийПользователя.СозданиеОбъектов, ВыборкаЗаявок.Дата, СообщениеSDMS);
		
		РегистрыСведений.ПодготовленныеСообщенияПользователяПоКатегориям.Добавить(МассивПользователей,
			ВыборкаЗаявок.Заявка, СообщениеПользователям, ВыборкаЗаявок.Автор);
	КонецЦикла;
	
	УдалитьВсеЗаписи();
	
КонецПроцедуры

#КонецОбласти
