///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет запись в регистр
//
// Параметры:
//  Заявка - ДокументСсылка.ЗаявкаНаРазработку - ссылка на документ "Заявка на разработку".
//  ВидОчереди - ПеречислениеСсылка.ВидыОчереди - ссылка на вид очереди.
//  ЗначенияОчереди	- Структура - Значения измерений очереди
//  
Процедура Добавить(Знач Заявка, Знач ВидОчереди, Знач ЗначенияОчереди) Экспорт
	
	КлючОчереди = Справочники.КлючОчереди.НайтиСоздатьКлючОчереди(ВидОчереди, ЗначенияОчереди);
		
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Заявка.Установить(Заявка);
	НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(КлючОчереди);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;    
	
	Порядок = ОпределитьПорядок(КлючОчереди);
		
	Запись = НаборЗаписей.Добавить();
	Запись.Заявка = Заявка;
	Запись.КлючОчередиОбъекта = КлючОчереди;
	Запись.Порядок = Порядок;
	Запись.Проект = ОбщегоНазначения.НайтиБлижайшийПроект(Заявка);
	
	НаборЗаписей.Записать();
		
КонецПроцедуры   

// Добавляет запись в регистр с нужным порядком без проверок
//
// Параметры:
//  Заявка			 - ДокументСсылка.ЗаявкаНаРазработку - ссылка на документ "Заявка на разработку".
//  ВидОчереди		 - ПеречислениеСсылка.ВидыОчереди	 - ссылка на вид очереди.
//  ЗначенияОчереди	 - Структура							 - Значения измерений очереди
//  Порядок			 - Число								 - Нужный порядок
//
Процедура ДобавитьНепосредственно(Знач Заявка, Знач ВидОчереди, Знач ЗначенияОчереди, Знач Порядок) Экспорт
	
	КлючОчереди = Справочники.КлючОчереди.НайтиСоздатьКлючОчереди(ВидОчереди, ЗначенияОчереди);
		
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Заявка.Установить(Заявка);
	НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(КлючОчереди);
		
	Запись = НаборЗаписей.Добавить();
	Запись.Заявка = Заявка;
	Запись.КлючОчередиОбъекта = КлючОчереди;
	Запись.Порядок = Порядок;
	Запись.Проект = ОбщегоНазначения.НайтиБлижайшийПроект(Заявка);
		
	НаборЗаписей.Записать();
		
КонецПроцедуры  

// Изменяет значение состояния фиксации порядка заявки по известному ключу
//
// Параметры:
//  Заявка		 - ДокументСсылка.ЗаявкаНаРазработку - ссылка на документ "Заявка на разработку"
//  КлючОчереди	 - СправочникСсылка.КлючОчереди		 - ссылка на ключ очереди
//  ЭтоИнициатор - Булево - временный признак указывающий, что через этот регистр меняют значение фиксации 
//  						и значение продублируется в связанный регистр (вторая очередь)
//  Система	 - СправочникСсылка.СистемыУчета - ссылка на систему заявки по которой фиксируется порядок
// 
// Возвращаемое значение:
//   Структура - структура с данными о результате работы функции
// 		* Зафиксирован - Булево	- Истина, если зафиксирован.
// 		* ТекстОшибки - Строка - Описание возникшей ошибки.
//
Функция ИзменитьФиксациюПоКлючу(Знач Заявка, Знач КлючОчереди, Знач ЭтоИнициатор = Истина) Экспорт
		
	Результат = Новый Структура("Зафиксирован, ТекстОшибки", Ложь, "");
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Заявка.Установить(Заявка);
	НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(КлючОчереди);
	НаборЗаписей.Прочитать();
	
	Для Каждого ЭлементНабора Из НаборЗаписей Цикл
		ЭлементНабора.Зафиксирован = НЕ ЭлементНабора.Зафиксирован;
		Результат.Зафиксирован = ЭлементНабора.Зафиксирован;
	КонецЦикла;
	
	НачатьТранзакцию();	
	Попытка
		НаборЗаписей.Записать(); 
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ИмяСобытия = "ОчередиЗаявок.ИзменитьФиксациюПоКлючу";
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , Заявка, ТекстОшибки);
		ВызватьИсключение;
	КонецПопытки;
	
	Если ЭтоИнициатор Тогда
		ДобавитьВИсториюИзмененийФиксацию(Заявка, КлючОчереди, Результат.Зафиксирован);	
	КонецЕсли;
	
	Возврат Результат;       
	
КонецФункции

// Измениет порядок заявки в очереди
//
// Параметры:
//  Заявка          - ДокументСсылка.ЗаявкаНаРазработку - ссылка на документ "Заявка на разработку".
//  ВидОчереди      - ПеречислениеСсылка.ВидыОчереди - ссылка на вид очереди.
//  ЗначенияОчереди	- Структура - Значения измерений очереди 
//  СтарыйПорядок   - Число - номер старого порядка заявки
//  НовыйПорядок	- Число - номер нового порядка заявки
//  Зафиксирован	 - Булево - состояние фиксации порядка заявки
//  ЭтоИнициатор - Булево - временный признак указывающий, что через этот регистр меняют значение фиксации 
//  						и значение продублируется в связанный регистр (вторая очередь)
// 
// Возвращаемое значение:
//   Структура - структура с данными о результате работы функции
// 		* Успешно - Булево	- Ложь, если была ошибка, иначе Истина.
// 		* ТекстОшибки - Строка - Описание возникшей ошибки.
//
Функция ИзменитьПорядок(Знач Заявка, Знач ВидОчереди, Знач ЗначенияОчереди, Знач СтарыйПорядок, Знач НовыйПорядок, 
		Знач Зафиксирован = Неопределено, Знач ЭтоИнициатор = Истина, КлючОчередиОбъекта = Неопределено) Экспорт
	
	Результат = Новый Структура("Успешно, ТекстОшибки", Истина, "");

	Если КлючОчередиОбъекта = Неопределено Тогда
		КлючОчередиОбъекта = Справочники.КлючОчереди.НайтиСоздатьКлючОчереди(ВидОчереди, ЗначенияОчереди);
	КонецЕсли;
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст =
	"ВЫБРАТЬ
	|	ОчередиЗаявок.Заявка КАК Заявка,
	|	ОчередиЗаявок.КлючОчередиОбъекта КАК КлючОчередиОбъекта,
	|	ОчередиЗаявок.Порядок КАК Порядок,
	|	ОчередиЗаявок.Зафиксирован КАК Зафиксирован
	|ИЗ
	|	РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|ГДЕ
	|	ОчередиЗаявок.Порядок МЕЖДУ &НачальныйПорядок И &КонечныйПорядок
	|	И ОчередиЗаявок.КлючОчередиОбъекта = &КлючОчередиОбъекта
	|{УПОРЯДОЧИТЬ ПО
	|	Порядок}";
	                          	
	ПостроительЗапроса.Параметры.Вставить("КлючОчередиОбъекта", КлючОчередиОбъекта);
	
	// Если новая позиция меньше старой, то задача была перемещена вверх списка
	Если НовыйПорядок < СтарыйПорядок Тогда
		ПостроительЗапроса.Параметры.Вставить("НачальныйПорядок", НовыйПорядок);
		ПостроительЗапроса.Параметры.Вставить("КонечныйПорядок", СтарыйПорядок);
		
		ПостроительЗапроса.Порядок.Добавить("Порядок", , , НаправлениеСортировки.Возр);
	Иначе
		ПостроительЗапроса.Параметры.Вставить("НачальныйПорядок", СтарыйПорядок);
		ПостроительЗапроса.Параметры.Вставить("КонечныйПорядок", НовыйПорядок);
		
		ПостроительЗапроса.Порядок.Добавить("Порядок", , , НаправлениеСортировки.Убыв);
	КонецЕсли;
	
	ПостроительЗапроса.Выполнить();	
	РезультатЗапроса = ПостроительЗапроса.Результат;
	
	Если РезультатЗапроса.Пустой() Тогда
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = "Нет заявок для перемещения"; 
		Возврат Результат;
	КонецЕсли;
	
	ТаблицаОчередиЗаявок = РезультатЗапроса.Выгрузить();	
	МаксИндекс =  ТаблицаОчередиЗаявок.Количество() - 1;
	
	// Проверим, что перемещаемая заявка находится в изначальной позиции	
	СтрокаТаблицы = ТаблицаОчередиЗаявок[МаксИндекс];
	ПорядокПеремещаемойЗаявки = ТаблицаОчередиЗаявок[0].Порядок;
	
	Если СтрокаТаблицы.Заявка <> Заявка Тогда
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = "Изменился порядок заявки";
		Возврат Результат;
	КонецЕсли;
	
	// Кто-то зафиксировал заявку в другом сеансе
	Если СтрокаТаблицы.Зафиксирован Тогда
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = "Заявка заблокирована для перемещения. Возможно кто то ее зафиксировал в другом сеансе.";
		Возврат Результат;
	КонецЕсли;
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОчередиЗаявок");
	ЭлементБлокировки.ИсточникДанных = ТаблицаОчередиЗаявок;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Заявка", "Заявка");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КлючОчередиОбъекта", "КлючОчередиОбъекта");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();		
	Попытка
		БлокировкаДанных.Заблокировать();
		
		// Сначала изменяем порядок у заявок выше
		Для Н = 0 По МаксИндекс Цикл	
			ТекущаяЗаявка = ТаблицаОчередиЗаявок[МаксИндекс - Н];												
			
			Если Н = 0 Тогда
				НовыйПорядокСтроки = СтрокаТаблицы.Порядок;
				Продолжить;
			КонецЕсли;
			
			Если ТекущаяЗаявка.Зафиксирован Тогда
				Продолжить;
			КонецЕсли;
			
			СтарыйПорядокСтроки   = ТекущаяЗаявка.Порядок;			
			ТекущаяЗаявка.Порядок = НовыйПорядокСтроки;
			НовыйПорядокСтроки    = СтарыйПорядокСтроки;
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Заявка.Установить(ТекущаяЗаявка.Заявка);
			НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(ТекущаяЗаявка.КлючОчередиОбъекта);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 1 Тогда
				НаборЗаписей[0].Порядок = ТекущаяЗаявка.Порядок;
				НаборЗаписей.Записать();
			КонецЕсли;			
		КонецЦикла;
		
		// Изменяем порядок самой заявки
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Заявка.Установить(Заявка);
		НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(КлючОчередиОбъекта);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 1 Тогда
			НаборЗаписей[0].Порядок = ПорядокПеремещаемойЗаявки;
			
			Если Зафиксирован <> Неопределено Тогда	
				Если ЭтоИнициатор И НаборЗаписей[0].Зафиксирован <> Зафиксирован Тогда	
					ДобавитьВИсториюИзмененийФиксацию(Заявка, КлючОчередиОбъекта, Зафиксирован);	
				КонецЕсли;
				
				НаборЗаписей[0].Зафиксирован = Зафиксирован;	
			КонецЕсли;
			
			НаборЗаписей.Записать();   
			
			Если ЭтоИнициатор Тогда  
				РегистрыСведений.ИсторияОчередиЗаявок.СформироватьСобытиеИзмененияОчереди(Заявка, КлючОчередиОбъекта, 
					СтрокаТаблицы.Порядок, ПорядокПеремещаемойЗаявки); 
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = "Нет удалось сохранить новый порядок заявки"; 
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("ОчередиЗаявок.ИзменитьПорядок", 
			УровеньЖурналаРегистрации.Ошибка, , ПараметрыСеанса.ТекущийПользователь, ТекстОшибки);
		ВызватьИсключение;
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Обновляет данные по заявке
//
// Параметры:
//  Заявка - ДокументСсылка.ЗаявкаНаРазработку - ссылка на документ "Заявка на разработку".
//  ВидОчереди - ПеречислениеСсылка.ВидыОчереди - ссылка на вид очереди.
//
Процедура Обновить(Знач Заявка, Знач ВидОчереди) Экспорт
	
	Если ВидОчереди = Перечисления.ВидыОчереди.Филиал ИЛИ ВидОчереди = Перечисления.ВидыОчереди.ГабаритноеПланирование Тогда		
		ОбновитьОчередьЗаявкиПоФилиалам(Заявка, ВидОчереди);
	КонецЕсли;
		
КонецПроцедуры

// Обновляет значение проекта в очереди заявок для указанной заявки
//
// Параметры:
//  Заявка	 - ДокументСсылка.ЗаявкаНаРазработку	 - заявка
//  Проект	 - СправочникСсылка.Проекты	 - проект
//
Процедура ОбновитьПроектЗаявки(Знач Заявка, Знач Проект) Экспорт
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОчередиЗаявок");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Заявка", Заявка);
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Заявка.Установить(Заявка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		
		НачатьТранзакцию();
	    БлокировкаДанных.Заблокировать();  
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.Проект = Проект;
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать(); 
			ЗафиксироватьТранзакцию();
		Исключение     
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации("ОчередиЗаявок.ОбновлениеПроекта", 
				УровеньЖурналаРегистрации.Ошибка, Заявка, Заявка, ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет значение порядка заявки в очереди
//
Процедура ПересчитатьОчередь() Экспорт 
		
	УдалениеЗаявокИзОчереди();
	ДобавлениеЗаявокВОчередь();
	СкорректироватьОчередьЗаявок();

КонецПроцедуры

// Пересчиывает порядок очереди по системе на основе очереди по системе и группе заказчиков
//
Процедура ПересчитатьОчередьПоСистеме() Экспорт
	
	ИмяСобытия = "ОчередиЗаявок.ЗаписатьПорядокЗаявок";

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлючОчереди.Направление КАК Направление,
	|	КлючОчереди.Система КАК Система,
	|	ОчередиЗаявок.Заявка КАК Заявка,
	|	ВЫБОР
	|		КОГДА СтатусыЗаявокПоСистемам.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Проработка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаявкаВПроработке
	|ИЗ
	|	РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО ОчередиЗаявок.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|			И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистемаГруппаЗаказчиков))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|		ПО (СтатусыЗаявокПоСистемам.Заявка = ОчередиЗаявок.Заявка)
	|			И (КлючОчереди.Система = СтатусыЗаявокПоСистемам.Система)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаявкаВПроработке,
	|	ОчередиЗаявок.Порядок,
	|	КлючОчереди.ГруппаЗаказчиков
	|ИТОГИ ПО
	|	Направление,
	|	Система
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ВыборкаНаправление = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВидОчереди = Перечисления.ВидыОчереди.НаправлениеСистема;

	Пока ВыборкаНаправление.Следующий() Цикл
		ВыборкаСистема = ВыборкаНаправление.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСистема.Следующий() Цикл
			ЗначенияОчереди = Новый Структура;
			ЗначенияОчереди.Вставить("Направление", ВыборкаСистема.Направление);
			ЗначенияОчереди.Вставить("Система", ВыборкаСистема.Система);
				
			КлючОчереди = Справочники.КлючОчереди.НайтиСоздатьКлючОчереди(ВидОчереди, ЗначенияОчереди);
			
			// Подготовка блокировки регистра сведений
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОчередиЗаявок");
			ЭлементБлокировки.УстановитьЗначение("КлючОчередиОбъекта", КлючОчереди);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
						
			// Единоразовое создание набора записей с отбором по ключу (направлению и системе)
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(КлючОчереди);
			
			ВыборкаДетальныеЗаписи = ВыборкаСистема.Выбрать();
			Порядок = 1;
			
			НачатьТранзакцию();
			Попытка
				БлокировкаДанных.Заблокировать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					НаборЗаписей.Отбор.Заявка.Установить(ВыборкаДетальныеЗаписи.Заявка);	
					НаборЗаписей.Прочитать();
					
					Если НаборЗаписей.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
							
					НаборЗаписей[0].Порядок = Порядок;
					НаборЗаписей.Записать();
								
					НаборЗаписей.Очистить();
					Порядок = Порядок + 1;
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ТекстОшибки = СтрШаблон("При пересчете очереди заявок по системе возникла ошибка: %1",
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
				Возврат;
			КонецПопытки;		
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьВИсториюИзмененийФиксацию(Знач Заявка, Знач КлючОчереди, Знач Зафиксирован)    
	
	ТекстКлюча = Справочники.КлючОчереди.СформироватьПредставлениеКлюча(КлючОчереди);
	Категория = Перечисления.КатегорииСобытийИсторияИзменений.Прочее;	
	ДанныеСтруктура = Новый Структура("Событие, КлючОчереди, Добавлен", "ФиксацияПорядка", ТекстКлюча, Зафиксирован);
	Данные = ЗаписатьЗначениеJSON(ДанныеСтруктура);
	
	СтруктураСообщение = Новый Структура("Данные, Категория", Данные, Категория);
	РегистрыСведений.ИсторияИзмененийОбъектовПоСобытиям.Добавить(Заявка, СтруктураСообщение);	
	
КонецПроцедуры

Процедура ОбновитьОчередьЗаявкиПоФилиалам(Знач Заявка, Знач ВидОчереди)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередиЗаявок.Заявка КАК Заявка,
	|	ОчередиЗаявок.КлючОчередиОбъекта КАК КлючОчередиОбъекта
	|ИЗ
	|	РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК СправочникКлючОчереди
	|		ПО (СправочникКлючОчереди.Ссылка = ОчередиЗаявок.КлючОчередиОбъекта)
	|			И (СправочникКлючОчереди.ВидОчереди = &ВидОчереди)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СистемыЗаявокНазначеныеПользователю КАК СистемыЗаявокНазначеныеПользователю
	|		ПО (СистемыЗаявокНазначеныеПользователю.Заявка = ОчередиЗаявок.Заявка)
	|			И (СистемыЗаявокНазначеныеПользователю.Филиал = СправочникКлючОчереди.Филиал)
	|ГДЕ
	|	ОчередиЗаявок.Заявка = &Заявка
	|	И СистемыЗаявокНазначеныеПользователю.Филиал ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Заявка", Заявка); 
	Запрос.УстановитьПараметр("ВидОчереди", ВидОчереди); 
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = СоздатьНаборЗаписей();		
	Выборка = РезультатЗапроса.Выбрать();	
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Заявка.Установить(Выборка.Заявка);
		НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(Выборка.КлючОчередиОбъекта);	
		НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры

Функция ОпределитьПорядок(Знач КлючОчереди) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОчередиЗаявок.Порядок КАК МаксимальныйПорядок
	|ИЗ
	|	РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|ГДЕ
	|	ОчередиЗаявок.КлючОчередиОбъекта = &КлючОчереди
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОчередиЗаявок.Порядок УБЫВ";
 
	Запрос.УстановитьПараметр("КлючОчереди", КлючОчереди);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Порядок = 1;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Порядок = Выборка.МаксимальныйПорядок + 1;
	КонецЕсли; 
	
	Возврат Порядок;

КонецФункции

Функция ХэшСумма(Знач Данные)
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(Данные);
		
	Возврат СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	
КонецФункции
	
////////////////////////////////////////////////////////////////////////////////
// Пересчет очереди.

Процедура ДобавлениеЗаявокВОчередь()  
		
	// В очередь по филиалам заявки добавляются при назначении филиала по системе,
	// остальные очереди формируются автоматически
	Запрос = Новый Запрос;
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ДокументЗаявка.Ссылка КАК Заявка,
	|	ДокументЗаявка.Направление КАК Направление,
	|	ДокументЗаявка.Продукт КАК Продукт,
	|	ДокументЗаявкаСистемы.Система КАК Система,
	|	ДокументЗаявкаСистемы.ГруппаЗаказчиков КАК ГруппаЗаказчиков
	|ПОМЕСТИТЬ СвойстваПроверяемойЗаявки
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ДокументЗаявка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ДокументЗаявкаСистемы
	|		ПО (ДокументЗаявкаСистемы.Ссылка = ДокументЗаявка.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|		ПО (ДокументЗаявкаСистемы.Ссылка = СтатусыЗаявокПоСистемам.Заявка)
	|			И (ДокументЗаявкаСистемы.Система = СтатусыЗаявокПоСистемам.Система)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (СтатусыЗаявокПоСистемам.Статус = СтатусыОбъектов.Ссылка)
	|			И (СтатусыОбъектов.Порядок < &ПорядокСтатусаВРаботе)
	|ГДЕ
	|	НЕ ДокументЗаявка.Черновик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СвойстваПроверяемойЗаявки.Заявка КАК Заявка,
	|	НЕОПРЕДЕЛЕНО КАК Направление,
	|	НЕОПРЕДЕЛЕНО КАК Система,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаЗаказчиков,
	|	СвойстваПроверяемойЗаявки.Продукт КАК Продукт,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Продукт) КАК ВидОчереди,
	|	ЕСТЬNULL(СправочникКлючОчереди.Ссылка, НЕОПРЕДЕЛЕНО) КАК КлючОчередиОбъекта
	|ПОМЕСТИТЬ ДобавляемыеОчереди
	|ИЗ
	|	СвойстваПроверяемойЗаявки КАК СвойстваПроверяемойЗаявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Продукты КАК СправочникПродукт
	|		ПО СвойстваПроверяемойЗаявки.Продукт = СправочникПродукт.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК СправочникКлючОчереди
	|		ПО СвойстваПроверяемойЗаявки.Продукт = СправочникКлючОчереди.Продукт
	|			И (СправочникКлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Продукт))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ПО (СправочникКлючОчереди.Ссылка = ОчередиЗаявок.КлючОчередиОбъекта)
	|			И СвойстваПроверяемойЗаявки.Заявка = ОчередиЗаявок.Заявка
	|ГДЕ
	|	ОчередиЗаявок.Заявка ЕСТЬ NULL
	|	И СправочникПродукт.ВидОчереди В (ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Продукт), ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвойстваПроверяемойЗаявки.Заявка,
	|	НЕОПРЕДЕЛЕНО,
	|	СвойстваПроверяемойЗаявки.Система,
	|	НЕОПРЕДЕЛЕНО,
	|	СвойстваПроверяемойЗаявки.Продукт,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ПродуктСистема),
	|	ЕСТЬNULL(СправочникКлючОчереди.Ссылка, НЕОПРЕДЕЛЕНО)
	|ИЗ
	|	СвойстваПроверяемойЗаявки КАК СвойстваПроверяемойЗаявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Продукты КАК СправочникПродукт
	|		ПО СвойстваПроверяемойЗаявки.Продукт = СправочникПродукт.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК СправочникКлючОчереди
	|		ПО СвойстваПроверяемойЗаявки.Продукт = СправочникКлючОчереди.Продукт
	|			И СвойстваПроверяемойЗаявки.Система = СправочникКлючОчереди.Система
	|			И (СправочникКлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ПродуктСистема))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ПО (СправочникКлючОчереди.Ссылка = ОчередиЗаявок.КлючОчередиОбъекта)
	|			И СвойстваПроверяемойЗаявки.Заявка = ОчередиЗаявок.Заявка
	|ГДЕ
	|	ОчередиЗаявок.Заявка ЕСТЬ NULL
	|	И СправочникПродукт.ВидОчереди В (ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ПродуктСистема), ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвойстваПроверяемойЗаявки.Заявка,
	|	СвойстваПроверяемойЗаявки.Направление,
	|	СвойстваПроверяемойЗаявки.Система,
	|	СвойстваПроверяемойЗаявки.ГруппаЗаказчиков,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистемаГруппаЗаказчиков),
	|	ЕСТЬNULL(СправочникКлючОчереди.Ссылка, НЕОПРЕДЕЛЕНО)
	|ИЗ
	|	СвойстваПроверяемойЗаявки КАК СвойстваПроверяемойЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК СправочникКлючОчереди
	|		ПО (СправочникКлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистемаГруппаЗаказчиков))
	|			И СвойстваПроверяемойЗаявки.Направление = СправочникКлючОчереди.Направление
	|			И СвойстваПроверяемойЗаявки.Система = СправочникКлючОчереди.Система
	|			И СвойстваПроверяемойЗаявки.ГруппаЗаказчиков = СправочникКлючОчереди.ГруппаЗаказчиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ПО (СправочникКлючОчереди.Ссылка = ОчередиЗаявок.КлючОчередиОбъекта)
	|			И СвойстваПроверяемойЗаявки.Заявка = ОчередиЗаявок.Заявка
	|ГДЕ
	|	СвойстваПроверяемойЗаявки.Продукт = ЗНАЧЕНИЕ(Справочник.Продукты.ПустаяСсылка)
	|	И ОчередиЗаявок.Заявка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвойстваПроверяемойЗаявки.Заявка,
	|	СвойстваПроверяемойЗаявки.Направление,
	|	СвойстваПроверяемойЗаявки.Система,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистема),
	|	ЕСТЬNULL(СправочникКлючОчереди.Ссылка, НЕОПРЕДЕЛЕНО)
	|ИЗ
	|	СвойстваПроверяемойЗаявки КАК СвойстваПроверяемойЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК СправочникКлючОчереди
	|		ПО (СправочникКлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистема))
	|			И СвойстваПроверяемойЗаявки.Направление = СправочникКлючОчереди.Направление
	|			И СвойстваПроверяемойЗаявки.Система = СправочникКлючОчереди.Система
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ПО (СправочникКлючОчереди.Ссылка = ОчередиЗаявок.КлючОчередиОбъекта)
	|			И СвойстваПроверяемойЗаявки.Заявка = ОчередиЗаявок.Заявка
	|ГДЕ
	|	СвойстваПроверяемойЗаявки.Продукт = ЗНАЧЕНИЕ(Справочник.Продукты.ПустаяСсылка)
	|	И ОчередиЗаявок.Заявка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ОчередиЗаявок.Порядок) + 1 КАК Порядок,
	|	ОчередиЗаявок.КлючОчередиОбъекта КАК КлючОчередиОбъекта
	|ИЗ
	|	ДобавляемыеОчереди КАК ДобавляемыеОчереди
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ПО ДобавляемыеОчереди.КлючОчередиОбъекта = ОчередиЗаявок.КлючОчередиОбъекта
	|
	|СГРУППИРОВАТЬ ПО
	|	ОчередиЗаявок.КлючОчередиОбъекта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДобавляемыеОчереди.Заявка КАК Заявка,
	|	ДобавляемыеОчереди.ВидОчереди КАК ВидОчереди,
	|	ДобавляемыеОчереди.КлючОчередиОбъекта КАК КлючОчередиОбъекта,
	|	ДобавляемыеОчереди.Продукт КАК Продукт,
	|	ДобавляемыеОчереди.Направление КАК Направление,
	|	ДобавляемыеОчереди.ГруппаЗаказчиков КАК ГруппаЗаказчиков,
	|	ДобавляемыеОчереди.Система КАК Система
	|ИЗ
	|	ДобавляемыеОчереди КАК ДобавляемыеОчереди";
	#КонецОбласти
	
	ПорядокСтатусаВРаботе = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтатусыОбъектов.ВРаботе, "Порядок");

	Запрос.УстановитьПараметр("ПорядокСтатусаВРаботе", ПорядокСтатусаВРаботе);	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();  
	
	ВГраница = РезультатыЗапроса.ВГраница();
	ВыборкаПорядок = РезультатыЗапроса[ВГраница - 1].Выбрать();
		
	ДанныеПорядок = Новый Соответствие;
	
	Пока ВыборкаПорядок.Следующий() Цикл
		ДанныеПорядок.Вставить(ВыборкаПорядок.КлючОчередиОбъекта, ВыборкаПорядок.Порядок); 
	КонецЦикла; 
	
	КэшКлючей = Новый Соответствие;

	Если НЕ РезультатыЗапроса[ВГраница].Пустой() Тогда	
		ВыборкаДобавить = РезультатыЗапроса[ВГраница].Выбрать();	
		НаборЗаписей = СоздатьНаборЗаписей();
		
		Пока ВыборкаДобавить.Следующий() Цикл	
			НачатьТранзакцию();
			
			Попытка 			
				Если ВыборкаДобавить.КлючОчередиОбъекта = Неопределено Тогда	
					Отбор = Справочники.КлючОчереди.ПолучитьПустойОтборКлюча();
					ЗаполнитьЗначенияСвойств(Отбор, ВыборкаДобавить);
					Массив = Новый Массив; 
					
					Для Каждого Реквизит Из Отбор Цикл
						Попытка
							Массив.Добавить(Строка(Реквизит.Значение.УникальныйИдентификатор()));
						Исключение      
							Массив.Добавить(Строка(Реквизит.Значение));
						КонецПопытки;
					КонецЦикла;  
					
					ХэшСумма = ХэшСумма(СтрСоединить(Массив, ";"));
					Ключ = КэшКлючей.Получить(ХэшСумма);
					
					Если Ключ = Неопределено Тогда 
						Ключ = Справочники.КлючОчереди.СоздатьЭлемент();
						ЗаполнитьЗначенияСвойств(Ключ, ВыборкаДобавить);
						Ключ.Записать();
						Ключ = Ключ.Ссылка; 
						КэшКлючей.Вставить(ХэшСумма, Ключ);
					КонецЕсли;
				Иначе
					Ключ = ВыборкаДобавить.КлючОчередиОбъекта;
				КонецЕсли;
				
				НаборЗаписей.Отбор.Заявка.Установить(ВыборкаДобавить.Заявка);
				НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(Ключ);
					
				Порядок = ДанныеПорядок.Получить(Ключ);			
				Если Порядок = Неопределено Тогда
					Порядок = 1;
				КонецЕсли; 		
				
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.КлючОчередиОбъекта = Ключ;
				НоваяЗапись.Заявка = ВыборкаДобавить.Заявка;
				НоваяЗапись.Порядок = Порядок;
				НаборЗаписей.Записать();   
				НаборЗаписей.Очистить();
				
				ДанныеПорядок.Вставить(Ключ, Порядок + 1);
				ЗафиксироватьТранзакцию();
			Исключение     
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				
				ЗаписьЖурналаРегистрации(СтрШаблон("Добавление заявки %1 в очередь", ВыборкаДобавить.Заявка), 
					УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;		 
	КонецЕсли;
		
КонецПроцедуры

Процедура ПеренестиОчередьПоПродукту()	
	
	Запрос = Новый Запрос;
	Запрос.Текст =   
	#Область ТекстЗапроса
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередиЗаявок.КлючОчередиОбъекта КАК СтарыйКлюч,
	|	ОчередиЗаявок.Заявка КАК Заявка,
	|	ОчередиЗаявок.Порядок КАК Порядок,
	|	ОчередиЗаявок.Зафиксирован КАК Зафиксирован,
	|	ЗаявкаНаРазработку.Продукт КАК Продукт,
	|	Продукты.ВидОчереди КАК НовыйВидОчереди,
	|	ВЫБОР
	|		КОГДА Продукты.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Продукт)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ДокументСистемыРазработки.Система
	|	КОНЕЦ КАК Система,
	|	ВЫБОР
	|		КОГДА Продукты.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Продукт)
	|			ТОГДА ЕСТЬNULL(КлючОчередиПродукт.Ссылка, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ ЕСТЬNULL(КлючОчередиПродуктСистема.Ссылка, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ КАК НовыйКлюч,
	|	ОчередиЗаявок.Проект КАК Проект
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО ОчередиЗаявок.Заявка = ЗаявкаНаРазработку.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ДокументСистемыРазработки
	|		ПО (ЗаявкаНаРазработку.Ссылка = ДокументСистемыРазработки.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|		ПО (ДокументСистемыРазработки.Ссылка = СтатусыЗаявокПоСистемам.Заявка)
	|			И (ДокументСистемыРазработки.Система = СтатусыЗаявокПоСистемам.Система)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (СтатусыЗаявокПоСистемам.Статус = СтатусыОбъектов.Ссылка)
	|			И (СтатусыОбъектов.Порядок < &ПорядокСтатусаВРаботе)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Продукты КАК Продукты
	|		ПО (Продукты.Ссылка = ЗаявкаНаРазработку.Продукт)
	|			И (Продукты.ВидОчереди <> ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ПустаяСсылка))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК ТекущийКлюч
	|		ПО ОчередиЗаявок.КлючОчередиОбъекта = ТекущийКлюч.Ссылка
	|			И (ТекущийКлюч.ВидОчереди <> Продукты.ВидОчереди)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчередиПродукт
	|		ПО (КлючОчередиПродукт.Продукт = ЗаявкаНаРазработку.Продукт)
	|			И (КлючОчередиПродукт.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Продукт))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчередиПродуктСистема
	|		ПО (КлючОчередиПродуктСистема.Продукт = ЗаявкаНаРазработку.Продукт)
	|			И (КлючОчередиПродуктСистема.Система = ДокументСистемыРазработки.Система)
	|			И (КлючОчередиПродуктСистема.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ПродуктСистема))
	|ГДЕ
	|	ТекущийКлюч.ВидОчереди В (ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Продукт), ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ПродуктСистема))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Заявка КАК Заявка,
	|	МАКСИМУМ(Данные.Порядок) КАК Порядок
	|ПОМЕСТИТЬ МаксимальныйПорядок
	|ИЗ
	|	Данные КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.СтарыйКлюч КАК СтарыйКлюч,
	|	Данные.Заявка КАК Заявка
	|ИЗ
	|	Данные КАК Данные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.Заявка КАК Заявка,
	|	ЕСТЬNULL(ОчередиЗаявок.Зафиксирован, Данные.Зафиксирован) КАК Зафиксирован,
	|	МаксимальныйПорядок.Порядок КАК Порядок,
	|	Данные.Продукт КАК Продукт,
	|	Данные.НовыйВидОчереди КАК НовыйВидОчереди,
	|	Данные.Система КАК Система,
	|	Данные.НовыйКлюч КАК НовыйКлюч,
	|	ЕСТЬNULL(ОчередиЗаявок.Проект, Данные.Проект) КАК Проект,
	|	ЕСТЬNULL(ОчередиЗаявок.Порядок, 0) КАК ПорядокПоНовомуКлючу,
	|	ЕСТЬNULL(ОчередиЗаявок.Порядок, 999) КАК СортировкаПоНовомуКлючу
	|ИЗ
	|	Данные КАК Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныйПорядок КАК МаксимальныйПорядок
	|		ПО (МаксимальныйПорядок.Заявка = Данные.Заявка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ПО Данные.НовыйКлюч = ОчередиЗаявок.КлючОчередиОбъекта
	|			И Данные.Заявка = ОчередиЗаявок.Заявка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СортировкаПоНовомуКлючу,
	|	МаксимальныйПорядок.Порядок
	|ИТОГИ
	|	МАКСИМУМ(Продукт),
	|	МАКСИМУМ(НовыйВидОчереди),
	|	МАКСИМУМ(НовыйКлюч)
	|ПО
	|	Продукт,
	|	Система,
	|	НовыйКлюч";
	#КонецОбласти
	
	ПорядокСтатусаВРаботе = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтатусыОбъектов.ВРаботе, "Порядок"); 
	Запрос.УстановитьПараметр("ПорядокСтатусаВРаботе", ПорядокСтатусаВРаботе);
	Результат = Запрос.ВыполнитьПакет();
	ВГраница = Результат.ВГраница();
	РезультатЗапроса = Результат[ВГраница];
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаПродукт = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаСтарые = Результат[ВГраница - 1].Выбрать();
			
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОчередиЗаявок");
		ЭлементБлокировки.ИсточникДанных = Результат[ВГраница - 1];
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КлючОчередиОбъекта", "СтарыйКлюч");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Заявка", "Заявка");
		
		НачатьТранзакцию();
		
		Попытка         
			БлокировкаДанных.Заблокировать(); 
			
			Пока ВыборкаСтарые.Следующий() Цикл
				НаборЗаписейСтарые = СоздатьНаборЗаписей();
				НаборЗаписейСтарые.Отбор.КлючОчередиОбъекта.Установить(ВыборкаСтарые.СтарыйКлюч);
				НаборЗаписейСтарые.Отбор.Заявка.Установить(ВыборкаСтарые.Заявка);				
				НаборЗаписейСтарые.Записать();                 
			КонецЦикла;
			
			Пока ВыборкаПродукт.Следующий() Цикл	 
				
				ВыборкаСистема = ВыборкаПродукт.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
				
				Пока ВыборкаСистема.Следующий() Цикл	
					
					Если НЕ ЗначениеЗаполнено(ВыборкаСистема.НовыйКлюч) Тогда 
						ЗначенияОчереди = Новый Структура;
						ЗначенияОчереди.Вставить("Продукт", ВыборкаСистема.Продукт);
						
						Если ВыборкаСистема.НовыйВидОчереди = Перечисления.ВидыОчереди.ПродуктСистема Тогда
							ЗначенияОчереди.Вставить("Система", ВыборкаСистема.Система);
						КонецЕсли;					
						
						КлючОчереди = Справочники.КлючОчереди.НайтиСоздатьКлючОчереди(ВыборкаСистема.НовыйВидОчереди, ЗначенияОчереди);	
					Иначе
						КлючОчереди = ВыборкаСистема.НовыйКлюч;
					КонецЕсли;			
					
					НаборЗаписейНовые = СоздатьНаборЗаписей();
					НаборЗаписейНовые.Отбор.КлючОчередиОбъекта.Установить(КлючОчереди); 			
					ВыборкаКлючОчереди = ВыборкаСистема.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаКлючОчереди.Следующий() Цикл
						НовыйПорядок = 1;					
						ВыборкаЗаписи = ВыборкаКлючОчереди.Выбрать();  
						
						Пока ВыборкаЗаписи.Следующий() Цикл	
							
							Если ВыборкаЗаписи.ПорядокПоНовомуКлючу > 0 Тогда 
								// уже существует такая очередь
								НовыйПорядок = ВыборкаЗаписи.ПорядокПоНовомуКлючу;
							КонецЕсли;
							
							НоваяСтрока = НаборЗаписейНовые.Добавить();
							НоваяСтрока.КлючОчередиОбъекта = КлючОчереди;
							НоваяСтрока.Порядок = НовыйПорядок;
							НоваяСтрока.Заявка = ВыборкаЗаписи.Заявка;
							НоваяСтрока.Зафиксирован = ВыборкаЗаписи.Зафиксирован;
							НоваяСтрока.Проект = ВыборкаЗаписи.Проект;
							
							НовыйПорядок = НовыйПорядок + 1;
						КонецЦикла; 
					КонецЦикла;
					
					НаборЗаписейНовые.Записать();		
				КонецЦикла;  
			КонецЦикла;  
			
		ЗафиксироватьТранзакцию(); 				
		Исключение
			ОтменитьТранзакцию();  
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации("ОчередиЗаявок.ПересчитатьОчередь", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура СкорректироватьОчередьЗаявок() 
	
	ПеренестиОчередьПоПродукту();
	СкорректироватьПорядок();  
	
КонецПроцедуры  

Процедура СкорректироватьПорядок()

	Запрос = Новый Запрос;
	Запрос.Текст = 	
	#Область ТекстЗапроса
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередиЗаявок.КлючОчередиОбъекта КАК КлючОчередиОбъекта,
	|	ОчередиЗаявок.Заявка КАК Заявка,
	|	ОчередиЗаявок.Порядок КАК Порядок
	|ПОМЕСТИТЬ ЗаявкиВПроработке
	|ИЗ
	|	РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО ОчередиЗаявок.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|			И (КлючОчереди.ВидОчереди <> ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Филиал))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|		ПО (СтатусыЗаявокПоСистемам.Заявка = ОчередиЗаявок.Заявка)
	|			И (СтатусыЗаявокПоСистемам.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Проработка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередиЗаявок.КлючОчередиОбъекта,
	|	ОчередиЗаявок.Заявка,
	|	ОчередиЗаявок.Порядок
	|ИЗ
	|	РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО ОчередиЗаявок.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|			И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Филиал))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемамФилиалов КАК СтатусыЗаявокПоСистемамФилиалов
	|		ПО (СтатусыЗаявокПоСистемамФилиалов.Заявка = ОчередиЗаявок.Заявка)
	|			И (КлючОчереди.Филиал = СтатусыЗаявокПоСистемамФилиалов.Филиал)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
	|		ПО ОчередиЗаявок.Заявка = МинимальныеСтатусыЗаявок.Заявка
	|ГДЕ
	|	ЕСТЬNULL(СтатусыЗаявокПоСистемамФилиалов.Статус, МинимальныеСтатусыЗаявок.Статус) = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Проработка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкиВПроработке.КлючОчередиОбъекта КАК КлючОчередиОбъекта,
	|	МИНИМУМ(ЗаявкиВПроработке.Порядок) КАК Порядок
	|ПОМЕСТИТЬ ПорядокПроработки
	|ИЗ
	|	ЗаявкиВПроработке КАК ЗаявкиВПроработке
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкиВПроработке.КлючОчередиОбъекта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОчередиЗаявок.КлючОчередиОбъекта КАК КлючОчередиОбъекта
	|ПОМЕСТИТЬ ОтобранныеОчереди
	|ИЗ
	|	РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|
	|СГРУППИРОВАТЬ ПО
	|	ОчередиЗаявок.КлючОчередиОбъекта
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОчередиЗаявок.Заявка) <> МАКСИМУМ(ОчередиЗаявок.Порядок)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОчередиЗаявок.КлючОчередиОбъекта
	|ИЗ
	|	РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПорядокПроработки КАК ПорядокПроработки
	|		ПО ОчередиЗаявок.КлючОчередиОбъекта = ПорядокПроработки.КлючОчередиОбъекта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаявкиВПроработке КАК ЗаявкиВПроработке
	|		ПО ОчередиЗаявок.КлючОчередиОбъекта = ЗаявкиВПроработке.КлючОчередиОбъекта
	|			И ОчередиЗаявок.Заявка = ЗаявкиВПроработке.Заявка
	|ГДЕ
	|	ЗаявкиВПроработке.Заявка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ОчередиЗаявок.КлючОчередиОбъекта
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОчередиЗаявок.Заявка) >= МИНИМУМ(ПорядокПроработки.Порядок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОчередиЗаявок.КлючОчередиОбъекта КАК КлючОчередиОбъекта,
	|	ОчередиЗаявок.Заявка КАК Заявка,
	|	ВЫБОР
	|		КОГДА ЗаявкиВПроработке.Заявка ЕСТЬ NULL
	|			ТОГДА ОчередиЗаявок.Порядок
	|		ИНАЧЕ 999
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	ОтобранныеОчереди КАК ОтобранныеОчереди
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ПО ОтобранныеОчереди.КлючОчередиОбъекта = ОчередиЗаявок.КлючОчередиОбъекта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаявкиВПроработке КАК ЗаявкиВПроработке
	|		ПО (ОчередиЗаявок.КлючОчередиОбъекта = ЗаявкиВПроработке.КлючОчередиОбъекта)
	|			И (ОчередиЗаявок.Заявка = ЗаявкиВПроработке.Заявка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|ИТОГИ ПО
	|	КлючОчередиОбъекта";
	#КонецОбласти
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаКлючОчереди = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаКлючОчереди.Следующий() Цикл	
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОчередиЗаявок");
			ЭлементБлокировки.УстановитьЗначение("КлючОчередиОбъекта", ВыборкаКлючОчереди.КлючОчередиОбъекта);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			НовыйПорядок = 1;
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(ВыборкаКлючОчереди.КлючОчередиОбъекта);
			
			ВыборкаЗаписи = ВыборкаКлючОчереди.Выбрать();
			
			НачатьТранзакцию();
			Попытка
				БлокировкаДанных.Заблокировать();
				
				Пока ВыборкаЗаписи.Следующий() Цикл
					НаборЗаписей.Отбор.Заявка.Установить(ВыборкаЗаписи.Заявка);
					НаборЗаписей.Прочитать();
					
					Если НаборЗаписей.Количество() > 0 Тогда						
						НаборЗаписей[0].Порядок = НовыйПорядок;
						НаборЗаписей.Записать();
						
						НаборЗаписей.Очистить();
						
						НовыйПорядок = НовыйПорядок + 1;
					КонецЕсли;
				КонецЦикла;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();  
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации("ОчередиЗаявок.ПересчитатьОчередь", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
				ВызватьИсключение;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалениеЗаявокИзОчереди()  
	
	// Удаляются заявки у которых ключ очереди не актуален 
	// изменилась система, продукт и прочее, а также если заявка выше статуса "В реализацию"
	// Если заявка удаляется из очереди из-за статуса, то нужно сохранить в регситр удаляемый порядок.
	// Для габаритного планирования удаляются решенные, отклоненные заявка, а также  	
	Запрос = Новый Запрос;
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередиЗаявок.Заявка КАК Заявка
	|ПОМЕСТИТЬ ВыбранныеЗаявки
	|ИЗ
	|	РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО (КлючОчереди.ВидОчереди <> ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Филиал))
	|			И (КлючОчереди.ВидОчереди <> ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ГабаритноеПланирование))
	|			И ОчередиЗаявок.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументЗаявка.Ссылка КАК Заявка,
	|	ДокументЗаявка.Направление КАК Направление,
	|	ДокументСистемыРазработки.Система КАК Система,
	|	ДокументСистемыРазработки.ГруппаЗаказчиков КАК ГруппаЗаказчиков,
	|	ДокументЗаявка.Продукт КАК Продукт,
	|	1 КАК флаг
	|ПОМЕСТИТЬ СписокЗаявок
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ДокументЗаявка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВыбранныеЗаявки КАК ВыбранныеЗаявки
	|		ПО (ВыбранныеЗаявки.Заявка = ДокументЗаявка.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ДокументСистемыРазработки
	|		ПО ДокументЗаявка.Ссылка = ДокументСистемыРазработки.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|		ПО (ДокументСистемыРазработки.Ссылка = СтатусыЗаявокПоСистемам.Заявка)
	|			И (ДокументСистемыРазработки.Система = СтатусыЗаявокПоСистемам.Система)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (СтатусыЗаявокПоСистемам.Статус = СтатусыОбъектов.Ссылка)
	|ГДЕ
	|	НЕ ДокументЗаявка.ПометкаУдаления
	|	И НЕ ДокументЗаявка.Черновик
	|	И ДокументЗаявка.ФинальныйСтатус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ПустаяСсылка)
	|	И СтатусыОбъектов.Порядок <= &ПорядокСтатусаВРеализацию
	|{ГДЕ
	|	ДокументЗаявка.Направление КАК Направление,
	|	ДокументСистемыРазработки.Система КАК Система,
	|	ДокументЗаявка.Продукт КАК Продукт}
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДокументЗаявка.Ссылка,
	|	ДокументЗаявка.Направление,
	|	ДокументСистемыРазработки.Система,
	|	ДокументСистемыРазработки.ГруппаЗаказчиков,
	|	ДокументЗаявка.Продукт,
	|	2
	|ИЗ
	|	РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ДокументЗаявка
	|		ПО (ДокументЗаявка.Ссылка = ОчередиЗаявок.Заявка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВыбранныеЗаявки КАК ВыбранныеЗаявки
	|		ПО (ВыбранныеЗаявки.Заявка = ДокументЗаявка.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ДокументСистемыРазработки
	|		ПО (ДокументЗаявка.Ссылка = ДокументСистемыРазработки.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|		ПО (ДокументСистемыРазработки.Ссылка = СтатусыЗаявокПоСистемам.Заявка)
	|			И (ДокументСистемыРазработки.Система = СтатусыЗаявокПоСистемам.Система)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (СтатусыЗаявокПоСистемам.Статус = СтатусыОбъектов.Ссылка)
	|ГДЕ
	|	СтатусыОбъектов.Порядок > &ПорядокСтатусаВРеализацию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокЗаявок.Заявка КАК Заявка,
	|	КлючОчереди.Ссылка КАК КлючОчередиЗаявки,
	|	СписокЗаявок.флаг КАК флаг
	|ПОМЕСТИТЬ Ключи
	|ИЗ
	|	СписокЗаявок КАК СписокЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Продукт))
	|			И (КлючОчереди.Продукт = СписокЗаявок.Продукт)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписокЗаявок.Заявка,
	|	КлючОчереди.Ссылка,
	|	СписокЗаявок.флаг
	|ИЗ
	|	СписокЗаявок КАК СписокЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ПродуктСистема))
	|			И (КлючОчереди.Продукт = СписокЗаявок.Продукт)
	|			И (КлючОчереди.Система = СписокЗаявок.Система)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписокЗаявок.Заявка,
	|	КлючОчереди.Ссылка,
	|	СписокЗаявок.флаг
	|ИЗ
	|	СписокЗаявок КАК СписокЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистемаГруппаЗаказчиков))
	|			И (КлючОчереди.Направление = СписокЗаявок.Направление)
	|			И (КлючОчереди.Система = СписокЗаявок.Система)
	|			И (КлючОчереди.ГруппаЗаказчиков = СписокЗаявок.ГруппаЗаказчиков)
	|ГДЕ
	|	СписокЗаявок.Продукт = ЗНАЧЕНИЕ(Справочник.Продукты.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписокЗаявок.Заявка,
	|	КлючОчереди.Ссылка,
	|	СписокЗаявок.флаг
	|ИЗ
	|	СписокЗаявок КАК СписокЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистема))
	|			И (КлючОчереди.Направление = СписокЗаявок.Направление)
	|			И (КлючОчереди.Система = СписокЗаявок.Система)
	|ГДЕ
	|	СписокЗаявок.Продукт = ЗНАЧЕНИЕ(Справочник.Продукты.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОчередиЗаявок.Заявка КАК Заявка,
	|	КлючОчереди.Филиал КАК Филиал
	|ПОМЕСТИТЬ АктуальныеЗаявкиГабаритногоПланирования
	|ИЗ
	|	РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ГабаритноеПланирование))
	|			И (КлючОчереди.Ссылка = ОчередиЗаявок.КлючОчередиОбъекта)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СистемыЗаявокНазначеныеПользователю КАК СистемыЗаявокНазначеныеПользователю
	|		ПО (СистемыЗаявокНазначеныеПользователю.Заявка = ОчередиЗаявок.Заявка)
	|			И (СистемыЗаявокНазначеныеПользователю.Филиал = КлючОчереди.Филиал)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОчередиЗаявок.Заявка,
	|	КлючОчереди.Филиал
	|ИЗ
	|	РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ГабаритноеПланирование))
	|			И (КлючОчереди.Ссылка = ОчередиЗаявок.КлючОчередиОбъекта)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураПодчиненности КАК СтруктураПодчиненности
	|		ПО (СтруктураПодчиненности.Родитель = ОчередиЗаявок.Заявка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО (СтруктураПодчиненности.Объект = ДокументЗадача.Ссылка)
	|			И (ДокументЗадача.Филиал = КлючОчереди.Филиал)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОчередиЗаявок.Заявка,
	|	КлючОчереди.Филиал
	|ИЗ
	|	РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ГабаритноеПланирование))
	|			И (КлючОчереди.Ссылка = ОчередиЗаявок.КлючОчередиОбъекта)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураПодчиненности КАК СтруктураПодчиненности
	|		ПО (СтруктураПодчиненности.Родитель = ОчередиЗаявок.Заявка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО (СтруктураПодчиненности.Объект = ДокументЗадача.Ссылка)
	|			И (ДокументЗадача.КомандаРазработчиков = КлючОчереди.Филиал)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОчередиЗаявок.Заявка,
	|	КлючОчереди.Филиал
	|ИЗ
	|	РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ГабаритноеПланирование))
	|			И (КлючОчереди.Ссылка = ОчередиЗаявок.КлючОчередиОбъекта)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|		ПО ОчередиЗаявок.Заявка = СтатусыЗаявокПоСистемам.Заявка
	|ГДЕ
	|	СтатусыЗаявокПоСистемам.Статус В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.НаДоработку), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.РевьюТребований))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОчередиЗаявок.Заявка КАК Заявка,
	|	ОчередиЗаявок.КлючОчередиОбъекта КАК КлючОчередиОбъекта,
	|	ЛОЖЬ КАК СохранятьПорядок,
	|	ОчередиЗаявок.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО (КлючОчереди.ВидОчереди <> ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Филиал))
	|			И (КлючОчереди.ВидОчереди <> ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ГабаритноеПланирование))
	|			И ОчередиЗаявок.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Ключи КАК Ключи
	|		ПО ОчередиЗаявок.КлючОчередиОбъекта = Ключи.КлючОчередиЗаявки
	|			И ОчередиЗаявок.Заявка = Ключи.Заявка
	|ГДЕ
	|	Ключи.Заявка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОчередиЗаявок.Заявка,
	|	ОчередиЗаявок.КлючОчередиОбъекта,
	|	ИСТИНА,
	|	ОчередиЗаявок.Порядок
	|ИЗ
	|	РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО (КлючОчереди.ВидОчереди <> ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Филиал))
	|			И (КлючОчереди.ВидОчереди <> ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ГабаритноеПланирование))
	|			И ОчередиЗаявок.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Ключи КАК Ключи
	|		ПО ОчередиЗаявок.КлючОчередиОбъекта = Ключи.КлючОчередиЗаявки
	|			И ОчередиЗаявок.Заявка = Ключи.Заявка
	|			И (Ключи.флаг = 2)
	|ГДЕ
	|	НЕ Ключи.Заявка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОчередиЗаявок.Заявка,
	|	ОчередиЗаявок.КлючОчередиОбъекта,
	|	ЛОЖЬ,
	|	ОчередиЗаявок.Порядок
	|ИЗ
	|	РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ГабаритноеПланирование))
	|			И (КлючОчереди.Ссылка = ОчередиЗаявок.КлючОчередиОбъекта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
	|		ПО ОчередиЗаявок.Заявка = МинимальныеСтатусыЗаявок.Заявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемамФилиалов КАК СтатусыЗаявокПоСистемамФилиалов
	|		ПО ОчередиЗаявок.Заявка = СтатусыЗаявокПоСистемамФилиалов.Заявка
	|			И (СтатусыЗаявокПоСистемамФилиалов.Филиал = КлючОчереди.Филиал)
	|ГДЕ
	|	ЕСТЬNULL(СтатусыЗаявокПоСистемамФилиалов.Статус, МинимальныеСтатусыЗаявок.Статус) В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОчередиЗаявок.Заявка,
	|	ОчередиЗаявок.КлючОчередиОбъекта,
	|	ЛОЖЬ,
	|	ОчередиЗаявок.Порядок
	|ИЗ
	|	РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ГабаритноеПланирование))
	|			И (КлючОчереди.Ссылка = ОчередиЗаявок.КлючОчередиОбъекта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ АктуальныеЗаявкиГабаритногоПланирования КАК АктуальныеЗаявкиГабаритногоПланирования
	|		ПО (АктуальныеЗаявкиГабаритногоПланирования.Заявка = ОчередиЗаявок.Заявка)
	|			И (КлючОчереди.Филиал = АктуальныеЗаявкиГабаритногоПланирования.Филиал)
	|ГДЕ
	|	АктуальныеЗаявкиГабаритногоПланирования.Заявка ЕСТЬ NULL";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ПорядокСтатусаВРеализацию", 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтатусыОбъектов.ВРеализацию, "Порядок"));
	
	Запрос.УстановитьПараметр("ПорядокВРаботе", 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтатусыОбъектов.ВРаботе, "Порядок"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда	
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОчередиЗаявок");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Заявка", "Заявка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КлючОчередиОбъекта", "КлючОчередиОбъекта");
		
		Выборка = РезультатЗапроса.Выбрать();
		
		НачатьТранзакцию();
		Попытка      
			БлокировкаДанных.Заблокировать();
			МенеджерЗаписи = СоздатьМенеджерЗаписи();
			
			Пока Выборка.Следующий() Цикл          
				
				Если Выборка.СохранятьПорядок Тогда
					РегистрыСведений.СохраненныеПорядкиЗаявок.ДобавитьЗапись(Выборка.Заявка,
						Выборка.КлючОчередиОбъекта, Выборка.Порядок);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
				МенеджерЗаписи.Удалить();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации("Пересчет очереди заявок", УровеньЖурналаРегистрации.Ошибка, , ,
				"При удалении заявок из очереди возникла ошибка: " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#КонецЕсли
