///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем ПорядокНаименованиеЗаявки; // Хранит соответствие наименования заявки порядку

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Заявка = Параметры.Заявка;
	ИсходныйПорядок = Параметры.ИсходныйПорядок;
	ИсходныйЗафиксирован = Параметры.Зафиксирован;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументЗаявка.Ссылка КАК Заявка,
	|	ОчередиЗаявок.Порядок КАК Порядок,
	|	ОчередиЗаявок.Зафиксирован КАК Зафиксирован,
	|	ДокументЗаявка.Номер КАК Номер,
	|	ДокументЗаявка.Наименование КАК Наименование,
	|	МАКСИМУМ(СтатусыОбъектов.ИмяПредопределенныхДанных) КАК ИмяКартинки
	|ПОМЕСТИТЬ ДанныеЗаявокВОчереди
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ДокументЗаявка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ПО ДокументЗаявка.Ссылка = ОчередиЗаявок.Заявка
	|			И (ОчередиЗаявок.КлючОчередиОбъекта = &КлючОчереди)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ЗаявкаНаРазработкуСистемыРазработки
	|		ПО ДокументЗаявка.Ссылка = ЗаявкаНаРазработкуСистемыРазработки.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|		ПО ДокументЗаявка.Ссылка = СтатусыЗаявокПоСистемам.Заявка
	|			И (ЗаявкаНаРазработкуСистемыРазработки.Система = СтатусыЗаявокПоСистемам.Система)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (СтатусыЗаявокПоСистемам.Статус = СтатусыОбъектов.Ссылка)
	|ГДЕ
	|	НЕ ДокументЗаявка.ПометкаУдаления
	|	И НЕ ДокументЗаявка.Черновик
	|	И ДокументЗаявка.ФинальныйСтатус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ПустаяСсылка)
	|	И СтатусыОбъектов.Порядок <= &ПорядокСтатусаВРеализацию
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументЗаявка.Ссылка,
	|	ОчередиЗаявок.Порядок,
	|	ОчередиЗаявок.Зафиксирован,
	|	ДокументЗаявка.Номер,
	|	ДокументЗаявка.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЗаявокВОчереди.Заявка КАК Заявка,
	|	СвязанныеОбъекты.ВидСвязи КАК ВидСвязи,
	|	СвязанныеОбъекты.ПриемникСвязи КАК СвязаннаяЗаявка,
	|	ДанныеЗаявокВОчередиДоп.Порядок КАК ПорядокСвязаннойЗаявки
	|ПОМЕСТИТЬ СвязиЗаявок
	|ИЗ
	|	ДанныеЗаявокВОчереди КАК ДанныеЗаявокВОчереди
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязанныеОбъекты КАК СвязанныеОбъекты
	|		ПО ДанныеЗаявокВОчереди.Заявка = СвязанныеОбъекты.ИсточникСвязи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
	|		ПО (СвязанныеОбъекты.ПриемникСвязи = МинимальныеСтатусыЗаявок.Заявка)
	|			И (МинимальныеСтатусыЗаявок.Статус <> ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен))
	|			И (МинимальныеСтатусыЗаявок.Статус <> ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЗаявокВОчереди КАК ДанныеЗаявокВОчередиДоп
	|		ПО (СвязанныеОбъекты.ПриемникСвязи = ДанныеЗаявокВОчередиДоп.Заявка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеЗаявокВОчереди.Заявка,
	|	ВЫБОР
	|		КОГДА СвязанныеОбъекты.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Дублирует)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Дублируется)
	|		КОГДА СвязанныеОбъекты.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Блокирует)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Блокируется)
	|		КОГДА СвязанныеОбъекты.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Следующая)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Предыдущая)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.СвязанаС)
	|	КОНЕЦ,
	|	СвязанныеОбъекты.ИсточникСвязи,
	|	ДанныеЗаявокВОчередиДоп.Порядок
	|ИЗ
	|	ДанныеЗаявокВОчереди КАК ДанныеЗаявокВОчереди
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязанныеОбъекты КАК СвязанныеОбъекты
	|		ПО ДанныеЗаявокВОчереди.Заявка = СвязанныеОбъекты.ПриемникСвязи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
	|		ПО (СвязанныеОбъекты.ИсточникСвязи = МинимальныеСтатусыЗаявок.Заявка)
	|			И (МинимальныеСтатусыЗаявок.Статус <> ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен))
	|			И (МинимальныеСтатусыЗаявок.Статус <> ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЗаявокВОчереди КАК ДанныеЗаявокВОчередиДоп
	|		ПО (СвязанныеОбъекты.ИсточникСвязи = ДанныеЗаявокВОчередиДоп.Заявка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвязиЗаявок.Заявка КАК Заявка,
	|	МАКСИМУМ(СвязиЗаявок.ПорядокСвязаннойЗаявки) КАК МаксимальныйПорядок
	|ПОМЕСТИТЬ СвязиМаксимальныйПорядок
	|ИЗ
	|	СвязиЗаявок КАК СвязиЗаявок
	|ГДЕ
	|	(СвязиЗаявок.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Блокируется)
	|			ИЛИ СвязиЗаявок.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Предыдущая))
	|
	|СГРУППИРОВАТЬ ПО
	|	СвязиЗаявок.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвязиЗаявок.Заявка КАК Заявка,
	|	МИНИМУМ(СвязиЗаявок.ПорядокСвязаннойЗаявки) КАК МинимальныйПорядок
	|ПОМЕСТИТЬ СвязиМинимальныйПорядок
	|ИЗ
	|	СвязиЗаявок КАК СвязиЗаявок
	|ГДЕ
	|	(СвязиЗаявок.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Блокирует)
	|			ИЛИ СвязиЗаявок.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Следующая))
	|
	|СГРУППИРОВАТЬ ПО
	|	СвязиЗаявок.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СвязиЗаявок.Заявка КАК Заявка,
	|	ЕСТЬNULL(СвязиМаксимальныйПорядок.МаксимальныйПорядок, 0) КАК МаксимальныйПорядок,
	|	ЕСТЬNULL(СвязиМинимальныйПорядок.МинимальныйПорядок, 0) КАК МинимальныйПорядок
	|ПОМЕСТИТЬ СвязиИтог
	|ИЗ
	|	СвязиЗаявок КАК СвязиЗаявок
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвязиМинимальныйПорядок КАК СвязиМинимальныйПорядок
	|		ПО СвязиЗаявок.Заявка = СвязиМинимальныйПорядок.Заявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвязиМаксимальныйПорядок КАК СвязиМаксимальныйПорядок
	|		ПО СвязиЗаявок.Заявка = СвязиМаксимальныйПорядок.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЗаявокВОчереди.Заявка КАК Заявка,
	|	ДанныеЗаявокВОчереди.Порядок КАК Порядок,
	|	ДанныеЗаявокВОчереди.Зафиксирован КАК Зафиксирован,
	|	ЕСТЬNULL(СвязиИтог.МаксимальныйПорядок, 0) КАК МаксимальныйПорядок,
	|	ЕСТЬNULL(СвязиИтог.МинимальныйПорядок, 0) КАК МинимальныйПорядок
	|ПОМЕСТИТЬ ВыбраннаяЗаявка
	|ИЗ
	|	ДанныеЗаявокВОчереди КАК ДанныеЗаявокВОчереди
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвязиИтог КАК СвязиИтог
	|		ПО ДанныеЗаявокВОчереди.Заявка = СвязиИтог.Заявка
	|ГДЕ
	|	ДанныеЗаявокВОчереди.Заявка = &ИзменяемаяЗаявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЗаявокВОчереди.Порядок КАК Порядок,
	|	ДанныеЗаявокВОчереди.Номер КАК Номер,
	|	ДанныеЗаявокВОчереди.Наименование КАК Наименование,
	|	ДанныеЗаявокВОчереди.ИмяКартинки КАК ИмяКартинки
	|ИЗ
	|	ДанныеЗаявокВОчереди КАК ДанныеЗаявокВОчереди
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВыбраннаяЗаявка КАК ВыбраннаяЗаявка
	|		ПО ДанныеЗаявокВОчереди.Порядок > ВыбраннаяЗаявка.МаксимальныйПорядок
	|			И (ВЫБОР
	|				КОГДА ВыбраннаяЗаявка.МинимальныйПорядок > 0
	|					ТОГДА ДанныеЗаявокВОчереди.Порядок < ВыбраннаяЗаявка.МинимальныйПорядок
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	(НЕ ДанныеЗаявокВОчереди.Зафиксирован
	|			ИЛИ ДанныеЗаявокВОчереди.Заявка = &ИзменяемаяЗаявка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыбраннаяЗаявка.Заявка КАК Заявка,
	|	ВыбраннаяЗаявка.Порядок КАК Порядок,
	|	ВыбраннаяЗаявка.Зафиксирован КАК Зафиксирован,
	|	ВыбраннаяЗаявка.МаксимальныйПорядок КАК МаксимальныйПорядок,
	|	ВыбраннаяЗаявка.МинимальныйПорядок КАК МинимальныйПорядок
	|ИЗ
	|	ВыбраннаяЗаявка КАК ВыбраннаяЗаявка";
	
	Запрос.УстановитьПараметр("ИзменяемаяЗаявка", Параметры.Заявка);
	Запрос.УстановитьПараметр("Направление", Параметры.Направление);
	Запрос.УстановитьПараметр("ПорядокСтатусаВРеализацию", 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтатусыОбъектов.ВРеализацию, "Порядок"));
	Запрос.УстановитьПараметр("Система", Параметры.Система);
	Запрос.УстановитьПараметр("ГруппаЗаказчиков", Параметры.ГруппаЗаказчиков);
	Запрос.УстановитьПараметр("КлючОчереди", ?(ЗначениеЗаполнено(Параметры.КлючОчереди), Параметры.КлючОчереди, Неопределено));
	
	Пакет = Запрос.ВыполнитьПакет();
	ВыбраннаяЗаявка = Пакет[7].Выбрать();
	ВыбраннаяЗаявка.Следующий();
	
	ИсходныйПорядок = ВыбраннаяЗаявка.Порядок;
	НовыйЗафиксирован = ВыбраннаяЗаявка.Зафиксирован;
	МаксимальныйПорядок = ВыбраннаяЗаявка.МаксимальныйПорядок;
	МинимальныйПорядок = ВыбраннаяЗаявка.МинимальныйПорядок;
	
	Если НЕ Параметры.ВозможностьЗафиксировать Тогда		
		Элементы.Зафиксировать.Доступность = Ложь;		
	КонецЕсли;
	
	Если НовыйЗафиксирован И Параметры.ВозможностьЗафиксировать Тогда
		
		Элементы.НовыйПорядок.Доступность = Ложь;	
		ЗаголовокПодсказки = "Порядок заявки в очереди зафиксирован. Для изменения порядка заявки снимите ее блокировку и только поле этого переместите ее."; 
		
	ИначеЕсли НовыйЗафиксирован И НЕ Параметры.ВозможностьЗафиксировать Тогда
		
		Элементы.НовыйПорядок.Доступность = Ложь;
		Элементы.ФормаСохранить.Доступность = Ложь;
		// Сформируем название подсказки таким образом чтобы было понятно почему именно нельзя менять порядок указанной заявки
		ЗаголовокПодсказки = "Порядок заявки в очереди зафиксирован. У вас нет права убирать фиксацию и изменять порядок этой заявки.";
		
	Иначе
		
		ТаблицаПорядков = Пакет[6].Выгрузить();
		
		СписокВыбораПорядок = Элементы.НовыйПорядок.СписокВыбора;
		
		Для Каждого Строка Из ТаблицаПорядков Цикл
			Попытка
				Картинка = БиблиотекаКартинок["Статус" + Строка.ИмяКартинки];
			Исключение
				Картинка = Новый Картинка;
			КонецПопытки;
			
			СокращенноеНаименование = ?(СтрДлина(Строка.Наименование) > 75, Лев(Строка.Наименование, 72) + "...", Строка.Наименование);
			
			ПредставлениеНомера = ПолучитьПредставлениеНомера(Строка.Номер);
			Представление = СтрШаблон("%1 - [%2] %3", Строка.Порядок, ПредставлениеНомера, СокращенноеНаименование);
			
			СписокВыбораПорядок.Добавить(Строка.Порядок, Представление, , Картинка);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РазрешенныеПорядки.Порядок КАК Порядок
		|ПОМЕСТИТЬ РазрешенныеПорядки
		|ИЗ
		|	&РазрешенныеПорядки КАК РазрешенныеПорядки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПорядкиЛево.Порядок КАК НачалоИнтервала,
		|	ПорядкиПраво.Порядок КАК КонецИнтервала
		|ПОМЕСТИТЬ ВсеИнтервалы
		|ИЗ
		|	РазрешенныеПорядки КАК ПорядкиЛево
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РазрешенныеПорядки КАК ПорядкиПраво
		|		ПО ПорядкиЛево.Порядок <= ПорядкиПраво.Порядок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеИнтервалы.НачалоИнтервала КАК НачалоИнтервала,
		|	ВсеИнтервалы.КонецИнтервала КАК КонецИнтервала
		|ПОМЕСТИТЬ РазмерыИнтервалов
		|ИЗ
		|	ВсеИнтервалы КАК ВсеИнтервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РазрешенныеПорядки КАК РазрешенныеПорядки
		|		ПО (РазрешенныеПорядки.Порядок МЕЖДУ ВсеИнтервалы.НачалоИнтервала И ВсеИнтервалы.КонецИнтервала)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеИнтервалы.НачалоИнтервала,
		|	ВсеИнтервалы.КонецИнтервала
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РазрешенныеПорядки.Порядок) = ВсеИнтервалы.КонецИнтервала - ВсеИнтервалы.НачалоИнтервала + 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РазмерыИнтервалов.НачалоИнтервала КАК НачалоИнтервала,
		|	МАКСИМУМ(РазмерыИнтервалов.КонецИнтервала) КАК КонецИнтервала
		|ПОМЕСТИТЬ СгруппированныйПоНачалу
		|ИЗ
		|	РазмерыИнтервалов КАК РазмерыИнтервалов
		|
		|СГРУППИРОВАТЬ ПО
		|	РазмерыИнтервалов.НачалоИнтервала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(СгруппированныйПоНачалу.НачалоИнтервала) КАК НачалоИнтервала,
		|	СгруппированныйПоНачалу.КонецИнтервала КАК КонецИнтервала
		|ИЗ
		|	СгруппированныйПоНачалу КАК СгруппированныйПоНачалу
		|
		|СГРУППИРОВАТЬ ПО
		|	СгруппированныйПоНачалу.КонецИнтервала";
		
		Запрос.УстановитьПараметр("РазрешенныеПорядки", ТаблицаПорядков);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Интервалы = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.НачалоИнтервала = Выборка.КонецИнтервала Тогда
				Интервалы.Добавить(Выборка.НачалоИнтервала);
			Иначе
				Интервалы.Добавить(СтрШаблон("%1 - %2", Выборка.НачалоИнтервала, Выборка.КонецИнтервала));
			КонецЕсли;
		КонецЦикла;
		
		ИнтервалыСтрокой = СтрСоединить(Интервалы, ", ");
		
		Если Интервалы.Количество() = 1 Тогда
			ЗаголовокПодсказки = "Для неё можно установить новую позицию в диапазоне ";
		Иначе
			ЗаголовокПодсказки = "Для неё можно установить новую позицию в диапазонах: ";
		КонецЕсли;
		
		ЧастьСтроки = Новый ФорматированнаяСтрока(ИнтервалыСтрокой, ШрифтыСтиля.ЖирныйТекстВспомогательныхДанных, 
			ЦветаСтиля.ЦветКорректногоЗначения);
		ЗаголовокПодсказки = Новый ФорматированнаяСтрока(ЗаголовокПодсказки, ЧастьСтроки);
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Заявка);
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(Заявка), , , , НавигационнаяСсылка));
	МассивСтрок.Добавить(" находится в очереди на ");
	
	ЧастьСтроки = Новый ФорматированнаяСтрока(СтрШаблон("%1 позиции", ИсходныйПорядок), 
		ШрифтыСтиля.ЖирныйТекстВспомогательныхДанных, ЦветаСтиля.ЦветКорректногоЗначения);
		
	МассивСтрок.Добавить(ЧастьСтроки);
	МассивСтрок.Добавить(". ");
	МассивСтрок.Добавить(ЗаголовокПодсказки);
	МассивСтрок.Добавить(". ");
	
	Если ЗначениеЗаполнено(МаксимальныйПорядок) Тогда
		МассивСтрок.Добавить(СтрШаблон("На позиции %1 находится связанная блокирующая заявка. ", МаксимальныйПорядок));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МинимальныйПорядок) Тогда
		МассивСтрок.Добавить(СтрШаблон("На позиции %1 находится связанная блокируемая заявка.", МинимальныйПорядок));
	КонецЕсли;
	
	Элементы.ДекорацияЗаявка.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	НовыйПорядок = ИсходныйПорядок;
	
	Элементы.Зафиксировать.Пометка = НовыйЗафиксирован;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьДоступностьКнопкиСохранить();

КонецПроцедуры

&НаКлиенте
Процедура НовыйПорядокПриИзменении(Элемент)
	
	ОбновитьДоступностьКнопкиСохранить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура Зафиксировать(Команда)
	
	НовыйЗафиксирован = НЕ НовыйЗафиксирован;
	Элементы.Зафиксировать.Пометка = НовыйЗафиксирован;
	ОбновитьДоступностьКнопкиСохранить();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКнопкиСохранить()
	
	Элементы.ФормаСохранить.Доступность = (НовыйЗафиксирован <> ИсходныйЗафиксирован) 
		ИЛИ (ЗначениеЗаполнено(НовыйПорядок) И НовыйПорядок <> ИсходныйПорядок);

КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	МожноЗакрыть = (НовыйЗафиксирован <> ИсходныйЗафиксирован) 
		ИЛИ (ЗначениеЗаполнено(НовыйПорядок) И НовыйПорядок <> ИсходныйПорядок);
	
	Если МожноЗакрыть Тогда		
		ПараметрыЗакрытия = Новый Структура;
		ПараметрыЗакрытия.Вставить("НовыйПорядок", НовыйПорядок);
		ПараметрыЗакрытия.Вставить("Зафиксирован", НовыйЗафиксирован);
		ПараметрыЗакрытия.Вставить("ИсходныйПорядок", ИсходныйПорядок);
		Закрыть(ПараметрыЗакрытия);
	Иначе
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Не заполнен новый порядок";
		СообщениеПользователю.Поле = "НовыйПорядок";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеНомера(Знач Номер)
	
	ОписаниеТипаЧисло = ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(10);
	Номер = Сред(Номер, 3);
	НомерЧислом = ОписаниеТипаЧисло.ПривестиЗначение(Номер);
	
	Возврат Формат(НомерЧислом, "ЧГ=0");
	
КонецФункции

#КонецОбласти
