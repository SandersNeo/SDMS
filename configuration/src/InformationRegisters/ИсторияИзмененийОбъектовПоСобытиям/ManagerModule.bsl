///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Добавляет новую запись в регистр сведений ИсторияИзмененияОбъектов.
//
// Параметры:
//  Объект    - СправочникСсылка, ДокументСсылка - объект, изменения которого сохраняются в записи.
//  Изменения - Строка - строка с изменениями в формате XML.
//
Процедура Добавить(Объект, Знач ТаблицаЗаписиВИсторию, Знач Автор = Неопределено) Экспорт
	
	Если НЕ Метаданные.ОпределяемыеТипы.ОбъектИсторииИзменений.Тип.СодержитТип(ТипЗнч(Объект)) Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураДляЗаписи = Новый Структура;
	СтруктураДляЗаписи.Вставить("Период", ТекущаяДатаСеанса());
	СтруктураДляЗаписи.Вставить("Объект", Объект);
	СтруктураДляЗаписи.Вставить("Автор", ?(ЗначениеЗаполнено(Автор), Автор, ПараметрыСеанса.ТекущийПользователь));
	
	// Устраняем затирание записи при двух разных вызовах в один момент времени.
	// В случае создание объекта и добавление наблюдателей из объекта основания,
	// происходит в один момент времени, запись одного из вызовов затирается.
	
	НаборЗаписей = РегистрыСведений.ИсторияИзмененийОбъектовПоСобытиям.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	НаборЗаписей.Отбор.Период.Установить(ТекущаяДатаСеанса());
	НаборЗаписей.Прочитать();
	
	НомерЗаписи = НаборЗаписей.Количество() + 1;
	
	Если ТипЗнч(ТаблицаЗаписиВИсторию) = Тип("ТаблицаЗначений") Тогда
		
		// Для случая когда добавление записей истории происходит через
		// очередь событий требуется заполнение даты события из колонки
		ИспользоватьПериодИзТаблицы = (ТаблицаЗаписиВИсторию.Колонки.Найти("Период") <> Неопределено);
		
		Для Каждого Строка Из ТаблицаЗаписиВИсторию Цикл
			// Создание новой записи
			НоваяЗапись = РегистрыСведений.ИсторияИзмененийОбъектовПоСобытиям.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураДляЗаписи);
			
			// Если в таблице есть колонка "Период", то значение
			// периода для записи берем из колонки таблицы
			Если ИспользоватьПериодИзТаблицы Тогда
				НоваяЗапись.Период = Строка.Период;
				
				НаборЗаписей.Очистить();
				НаборЗаписей.Отбор.Объект.Установить(Объект);
				НаборЗаписей.Отбор.Период.Установить(Строка.Период);
				НаборЗаписей.Прочитать();
				
				НоваяЗапись.НомерСобытия = НаборЗаписей.Количество() + 1;
			Иначе	
				НоваяЗапись.НомерСобытия = НомерЗаписи;
				НомерЗаписи = НомерЗаписи + 1;
			КонецЕсли;
			
			НоваяЗапись.Данные = Строка.Данные;
			НоваяЗапись.КатегорияСобытия = Строка.Категория;
			
			НоваяЗапись.Записать();			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ТаблицаЗаписиВИсторию) = Тип("Структура") Тогда
		// Создание новой записи
		НоваяЗапись = РегистрыСведений.ИсторияИзмененийОбъектовПоСобытиям.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураДляЗаписи);
		
		// Если в структуре есть поле "Период", то значение
		// периода для записи берем из поля структуры
		Если ТаблицаЗаписиВИсторию.Свойство("Период") Тогда
			НоваяЗапись.Период = ТаблицаЗаписиВИсторию.Период;
			
			НаборЗаписей.Очистить();
			НаборЗаписей.Отбор.Объект.Установить(Объект);
			НаборЗаписей.Отбор.Период.Установить(ТаблицаЗаписиВИсторию.Период);
			НаборЗаписей.Прочитать();
				
			НоваяЗапись.НомерСобытия = НаборЗаписей.Количество() + 1;
		Иначе
			НоваяЗапись.НомерСобытия = НомерЗаписи;
		КонецЕсли;
		
		НоваяЗапись.Данные = ТаблицаЗаписиВИсторию.Данные;
		НоваяЗапись.КатегорияСобытия = ТаблицаЗаписиВИсторию.Категория;
		
		НоваяЗапись.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру с шаблонами ленты истории изменений
// 
// Возвращаемое значение:
// Структура 
//
Функция ШаблоныЛентыИсторииИзменений() Экспорт

	ОбщийМакетИстории = РегистрыСведений.ИсторияИзмененийОбъектовПоСобытиям.ПолучитьМакет("Макет");
		
	Области = Новый Массив;
	Области.Добавить("Страница");
	Области.Добавить("Объект"); 
	Области.Добавить("ИзмененияОбъектаЗаПериод");
	Области.Добавить("РеквизитСтароеНовое");
	Области.Добавить("РеквизитНовое");
	Области.Добавить("РеквизитНовоеЗначение");
	Области.Добавить("РеквизитСтарое");
	Области.Добавить("РеквизитСтароеБезЛинии");
	Области.Добавить("Событие");
	Области.Добавить("ТабличнаяЧасть");
	Области.Добавить("ИзмененияТЧ");
	Области.Добавить("ТЧСтароеНовое");

	Шаблоны = Новый Структура;
	
	Для Каждого Название Из Области Цикл
		Шаблон = ОбщийМакетИстории.ПолучитьОбласть(Название);
		Шаблон.УдалитьСтроку(Шаблон.КоличествоСтрок());
		Шаблон.УдалитьСтроку(1);
		
		Шаблоны.Вставить(Название, Шаблон.ПолучитьТекст());
	КонецЦикла;
	
	Возврат Шаблоны;
	
КонецФункции

#КонецОбласти
