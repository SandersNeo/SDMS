///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Добавляет/изменяет запись регистра сведений.
// Даты добавляются обменом из Цб - выгружаются только выходные(праздники) 
// и предпраздничные дни.
//
// Параметры:
//	- Дата - Дата - дата календаря.
//  - ВидДня - Строка - может принимать значение
// 			"Выходной" и "Предпраздничный".
//
Процедура Добавить(Знач Дата, Знач ВидДня) Экспорт
		
	НаборЗаписей = РегистрыСведений.ПроизводственныйКалендарь.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДатаКалендаря.Установить(Дата);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		ЗаписьРегистра = НаборЗаписей.Добавить();
	Иначе
		ЗаписьРегистра = НаборЗаписей[0];
	КонецЕсли;
	
	ЗаписьРегистра.ДатаКалендаря = Дата;
	Если ВидДня = "Выходной" Тогда
		ЗаписьРегистра.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Выходной;
	ИначеЕсли ВидДня = "Рабочий" Тогда
		ЗаписьРегистра.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий;
		ЗаписьРегистра.КоличествоРабочихЧасов = 8;
	Иначе
		ЗаписьРегистра.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный;
		ЗаписьРегистра.КоличествоРабочихЧасов = 7;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Заполняет производственный календарь
//
// Параметры:
//  Год	 - число - год
//
Процедура ЗаполнитьКалендарь(Год) Экспорт  
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ДатаКалендаря", ОбщегоНазначенияКлиентСервер.ОписаниеТипаДата(ЧастиДаты.Дата));
	Таблица.Колонки.Добавить("ВидДня", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДнейПроизводственногоКалендаря"));
	Таблица.Колонки.Добавить("КоличествоРабочихЧасов", ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(2));
	
	ЗаполнитьПоAPI(Таблица, Год);
	
	Если Таблица.Количество() = 0 Тогда 
		ЗаполнитьАлгоритмом(Таблица, Год);
	КонецЕсли;  
	
	Если Таблица.Количество() > 0 Тогда  
		
		ТекущаяДата = Дата(Год, 1, 1); 
		ЗаполненныеДни = Таблица.ВыгрузитьКолонку("ДатаКалендаря");
		
		Пока Год(ТекущаяДата) = Год Цикл					
			Если ЗаполненныеДни.Найти(ТекущаяДата) = Неопределено Тогда
				НоваяСтрока = Таблица.Добавить();	
				НоваяСтрока.ДатаКалендаря = ТекущаяДата;  
				
				ДеньНедели = ДеньНедели(ТекущаяДата);
				
				Если ДеньНедели >= 6 Тогда  
					НоваяСтрока.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Выходной;
				Иначе
					НоваяСтрока.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий;
					НоваяСтрока.КоличествоРабочихЧасов = 8;   
				КонецЕсли;
			КонецЕсли;
			
			ТекущаяДата = ТекущаяДата + 24*60*60;
		КонецЦикла;
		
		НачатьТранзакцию();
		Попытка        	
			// Сначала нужно очистить данные за этот год
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря
			|ИЗ
			|	РегистрСведений.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
			|ГДЕ
			|	ГОД(ПроизводственныйКалендарь.ДатаКалендаря) = &Год";
			
			Запрос.УстановитьПараметр("Год", Год);
				
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПроизводственныйКалендарь");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = Таблица;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДатаКалендаря", "ДатаКалендаря");
			Блокировка.Заблокировать();
			
			Выборка = Запрос.Выполнить().Выбрать(); 		
			
			Пока Выборка.Следующий() Цикл
				Набор = СоздатьНаборЗаписей();
				Набор.Отбор.ДатаКалендаря.УСтановить(Выборка.ДатаКалендаря);
				Набор.Записать();
			КонецЦикла;;
			
			Набор = СоздатьНаборЗаписей();
			Набор.Загрузить(Таблица);
			Набор.Записать(Ложь);
			
			ЗафиксироватьТранзакцию();
		Исключение   
			ОтменитьТранзакцию();
			Текст = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ПроизводственныйКалендарь.ЗаполнитьКалендарь", УровеньЖурналаРегистрации.Ошибка,,, Текст);		
		КонецПопытки;       
	КонецЕсли;

КонецПроцедуры

// Добавляет обработчики обновления
//
// Параметры:
//  Обработчики	 - ТаблицаЗначений	 - см. ПриложениеВызовСервера.ПолучитьОбработчикиДанных
//
Процедура ДобавлениеОбработчиковОбновления(Обработчики) Экспорт     
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "РегистрыСведений.ПроизводственныйКалендарь.ПроверитьПредопределенныеНастройки";
	
КонецПроцедуры

// Проверяет предопределенные настройки
//
Процедура ПроверитьПредопределенныеНастройки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря
	|ИЗ
	|	РегистрСведений.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ГДЕ
	|	ГОД(ПроизводственныйКалендарь.ДатаКалендаря) = &Год";
	
	Год = Год(ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Год", Год);
	
	Если Запрос.Выполнить().Пустой() Тогда
		ЗаполнитьКалендарь(Год);
	КонецЕсли;
		
КонецПроцедуры

// Возвращает вид дня - рабочий, предпразднийчный или выходной.
//
// Параметры:
//  Дата - Дата	 - Дата.
// 
// Возвращаемое значение:
//  ВидДня - ПеречисленияСсылка.ВидыДнейПроизводственногоКалендаря, значение вида дня.
//
Функция ПолучитьВидДня(Знач Дата) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроизводственныйКалендарь.ВидДня КАК ВидДня
	|ИЗ
	|	РегистрСведений.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ГДЕ
	|	ПроизводственныйКалендарь.ДатаКалендаря = &Дата";
	
	Запрос.УстановитьПараметр("Дата", Дата);	
	РезультатЗапроса = Запрос.Выполнить();
		
	Если РезультатЗапроса.Пустой() Тогда
		ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.ПустаяСсылка();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();	
		ВидДня = Выборка.ВидДня;
	КонецЕсли;

	Возврат ВидДня;
	
КонецФункции

// Возвращает количество рабочих часов
//
// Параметры:
//  Дата - Дата	 - дата, количество рабочих часов нужно получить
// 
// Возвращаемое значение:
//   - Число
//
Функция ПолучитьКоличествоРабочихЧасов(Знач Дата = '00010101') Экспорт
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроизводственныйКалендарь.КоличествоРабочихЧасов КАК КоличествоРабочихЧасов
	|ИЗ
	|	РегистрСведений.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ГДЕ
	|	ПроизводственныйКалендарь.ДатаКалендаря = &Дата";
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));	
	РезультатЗапроса = Запрос.Выполнить();
		
	Если РезультатЗапроса.Пустой() Тогда
		КоличествоЧасов = 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();	
		КоличествоЧасов = Выборка.КоличествоРабочихЧасов;
	КонецЕсли;

	Возврат КоличествоЧасов;
	
КонецФункции

// Возвращает дату предыдущего рабочего дня.
//
// Параметры:
//  Дата - Дата	 - Дата.
// 
// Возвращаемое значение:
//  ПредыдущийРабочийДень - дата или неопределено, если дата не найдена.
//
Функция ПредыдущийРабочийДень(Знач Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ПроизводственныйКалендарь.ДатаКалендаря) КАК ДатаКалендаря
	|ИЗ
	|	РегистрСведений.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ГДЕ
	|	ПроизводственныйКалендарь.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
	|	И ПроизводственныйКалендарь.ДатаКалендаря < &Дата";
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ПредыдущийРабочийДень = Выборка.ДатаКалендаря;
	Иначе
		ПредыдущийРабочийДень = Дата - 86400;
	КонецЕсли;
	
	Возврат ПредыдущийРабочийДень;
	
КонецФункции

// Возвращает дату следующего рабочего дня.
//
// Параметры:
//  Дата - Дата	 - Дата.
// 
// Возвращаемое значение:
//  СледующийРабочийДень - дата или неопределено, если дата не найдена.
//
Функция СледующийРабочийДень(Знач Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(ПроизводственныйКалендарь.ДатаКалендаря) КАК ДатаКалендаря
	|ИЗ
	|	РегистрСведений.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ГДЕ
	|	ПроизводственныйКалендарь.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
	|	И ПроизводственныйКалендарь.ДатаКалендаря > &Дата";
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		СледующийРабочийДень = Выборка.ДатаКалендаря;
	Иначе
		СледующийРабочийДень = Дата + 86400;
	КонецЕсли;
	
	Возврат СледующийРабочийДень;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьПраздничныйДень(Таблица, День, Месяц, Год, ДобавлятьПредпраздничный = Истина) 
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ДатаКалендаря = Дата(Год, Месяц, День);
	НоваяСтрока.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Выходной; 
	
	Если ДобавлятьПредпраздничный Тогда
		ДатаПредпраздничногоДня = НоваяСтрока.ДатаКалендаря - 24*60*60;   
		
		Если Год(ДатаПредпраздничногоДня) = Год Тогда
			// Предпраздничные дни другого года пропускаем.
			Если ДеньНедели(ДатаПредпраздничногоДня) <= 5 И Таблица.Найти(ДатаПредпраздничногоДня, "ДатаКалендаря") = Неопределено Тогда
				НоваяСтрока = Таблица.Добавить();
				НоваяСтрока.ДатаКалендаря = ДатаПредпраздничногоДня;
				НоваяСтрока.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный; 
				НоваяСтрока.КоличествоРабочихЧасов = 7;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАлгоритмом(Таблица, Год)
	
	// 1, 2, 3, 4, 5, 6 и 8 января - Новогодние каникулы.
	ДобавитьПраздничныйДень(Таблица, 1, 1, Год, Ложь);
	ДобавитьПраздничныйДень(Таблица, 2, 1, Год, Ложь);
	ДобавитьПраздничныйДень(Таблица, 3, 1, Год, Ложь);
	ДобавитьПраздничныйДень(Таблица, 4, 1, Год, Ложь);
	ДобавитьПраздничныйДень(Таблица, 5, 1, Год, Ложь);
	ДобавитьПраздничныйДень(Таблица, 6, 1, Год, Ложь);
	ДобавитьПраздничныйДень(Таблица, 8, 1, Год, Ложь);
	
	// 7 января - Рождество Христово.
	ДобавитьПраздничныйДень(Таблица, 7, 1, Год, Ложь);
	
	// 23 февраля - День защитника Отечества.
	ДобавитьПраздничныйДень(Таблица, 23, 2, Год);
	
	// 8 марта - Международный женский день.
	ДобавитьПраздничныйДень(Таблица, 8, 3, Год);
	
	// 1 мая - Праздник Весны и Труда.
	ДобавитьПраздничныйДень(Таблица, 1, 5, Год);
	
	// 9 мая - День Победы
	ДобавитьПраздничныйДень(Таблица, 9, 5, Год);
	
	// 12 июня - День России
	ДобавитьПраздничныйДень(Таблица, 12, 6, Год);
	
	// 4 ноября - День народного единства.
	ДобавитьПраздничныйДень(Таблица, 4, 11, Год);

КонецПроцедуры

Процедура ЗаполнитьПоAPI(Таблица, Год)
	
	ДанныеJSON = Неопределено;
	
	Соединение = Новый HTTPСоединение("calendar.kuzyak.in",,,,, 10, Новый ЗащищенноеСоединениеOpenSSL);	
	Запрос = Новый HTTPЗапрос(СтрШаблон("api/calendar/%1/holidays", Формат(Год, "ЧГ=0")));
	
	Попытка
		Ответ = Соединение.Получить(Запрос);  
		
		Если Ответ.КодСостояния = 200 Тогда 
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
			ДанныеJSON = ПрочитатьJSON(ЧтениеJSON, Истина, "date"); 
			ЧтениеJSON.Закрыть();
		КонецЕсли;
	Исключение       
		Текст = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ПроизводственныйКалендарь.ЗаполнитьПоAPI", УровеньЖурналаРегистрации.Ошибка,,, Текст);
	КонецПопытки; 
	
	Если ДанныеJSON = Неопределено Тогда
		Соединение = Новый HTTPСоединение("api.bf5.ru",,,,, 10, Новый ЗащищенноеСоединениеOpenSSL);	
		Запрос = Новый HTTPЗапрос(СтрШаблон("weekend/%1", Формат(Год, "ЧГ=0")));
		
		Попытка
			Ответ = Соединение.Получить(Запрос);  
			
			Если Ответ.КодСостояния = 200 Тогда 
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
				ДанныеJSON = ПрочитатьJSON(ЧтениеJSON, Истина); 
				ЧтениеJSON.Закрыть();
			КонецЕсли;
		Исключение
			Текст = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ПроизводственныйКалендарь.ЗаполнитьПоAPI", УровеньЖурналаРегистрации.Ошибка,,, Текст);
		КонецПопытки;
	КонецЕсли;     	        

	Если ДанныеJSON <> Неопределено Тогда	
		Попытка	
			Если ДанныеJSON.Получить("holidays") <> Неопределено Тогда 
				// это получение праздников, остальные дни рабочие
				Для Каждого Строка Из ДанныеJSON.Получить("holidays") Цикл
					НоваяСтрока = Таблица.Добавить();	
					НоваяСтрока.ДатаКалендаря = Строка.Получить("date");
					НоваяСтрока.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Выходной;
				КонецЦикла;
				
				Для Каждого Строка Из ДанныеJSON.Получить("shortDays") Цикл
					НоваяСтрока = Таблица.Добавить();	
					НоваяСтрока.ДатаКалендаря = Строка.Получить("date");
					НоваяСтрока.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный;
					НоваяСтрока.КоличествоРабочихЧасов = 7;   
				КонецЦикла;
				
			ИначеЕсли ДанныеJSON.Получить("day") <> Неопределено Тогда 
				Для Каждого Строка Из ДанныеJSON.Получить("day") Цикл
					НоваяСтрока = Таблица.Добавить();	
					НоваяСтрока.ДатаКалендаря = Дата(СтрЗаменить(Строка[0], "-", "")); 
					КоличествоРабочихЧасов = 0;
					
					Если Строка[1] = "weekend" Тогда 
						ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Выходной;
					ИначеЕсли Строка[1] = "holiday" Тогда 
						ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Выходной;
					ИначеЕсли Строка[1] = "short" Тогда 
						ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный;
						КоличествоРабочихЧасов = 7;
					КонецЕсли;
					
					НоваяСтрока.ВидДня = ВидДня;
					НоваяСтрока.КоличествоРабочихЧасов = КоличествоРабочихЧасов;   
				КонецЦикла;
			КонецЕсли;  
		Исключение                    
			Текст = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ПроизводственныйКалендарь.ЗаполнитьПоAPI", УровеньЖурналаРегистрации.Ошибка,,, Текст);
		КонецПопытки;  	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
