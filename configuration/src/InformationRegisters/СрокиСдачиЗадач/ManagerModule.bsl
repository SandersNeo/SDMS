///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает дату сдачи задачи.
//
// Параметры:
//  Задача - ДокументСсылка.Задача - объект, для которого нужно получить дату сдачи.
//
// Возвращаемое значение:
//  Дата.
//
Функция ПолучитьСрокСдачиЗадачи(Знач Задача) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СрокиСдачиЗадачСрезПоследних.СрокСдачи КАК СрокСдачи
	|ИЗ
	|	РегистрСведений.СрокиСдачиЗадач.СрезПоследних(, Задача = &Задача) КАК СрокиСдачиЗадачСрезПоследних";
	
	Запрос.УстановитьПараметр("Задача", Задача);	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();

		СрокСдачи = Выборка.СрокСдачи;
	Иначе
		СрокСдачи = Дата(1,1,1);
	КонецЕсли;
	
	Возврат СрокСдачи;
	
КонецФункции

// Добавляет запись в регистр
//
// Параметры:
//  Задача	    - ДокументСсылка.Задача	 - задача
//  СрокСдачи   - Дата - устанавливаемая дата сдачи задачи
//  Комментарий - Строка - причина добавления срока
//
Процедура СохранитьСрокСдачи(Знач Задача, Знач Дата, Знач ДатаДоИзменения = Неопределено, Знач Комментарий = "") Экспорт
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ТекущаяДатаСеанса();
	МенеджерЗаписи.Задача = Задача;
	МенеджерЗаписи.СрокСдачи = Дата;
	МенеджерЗаписи.Комментарий = Комментарий;	
	МенеджерЗаписи.Автор = ПараметрыСеанса.ТекущийПользователь;	
		
	Если ЗначениеЗаполнено(Комментарий) Тогда		
		ШаблонСобщения = "<b>Новый срок сдачи</b>: %1" + Символы.ПС + "<b>Причина</b>: %2";
		СрокСдачи = Формат(Дата, "ДФ='dd.MM.yyyy'");
		ТекстСообщения = СтрШаблон(ШаблонСобщения, СрокСдачи, Комментарий);

		ДанныеСтруктура = Новый Структура;
		ДанныеСтруктура.Вставить("Событие", "ИзменениеРеквизита");
		ДанныеСтруктура.Вставить("Реквизит", "СрокСдачи");
		
		Если ДатаДоИзменения <> Неопределено Тогда
			ДатаДоИзменения = Формат(ДатаДоИзменения, "ДФ='dd.MM.yyyy'");
			ДанныеСтруктура.Вставить("СтароеЗначение", ДатаДоИзменения);
		КонецЕсли;
		
		ДанныеСтруктура.Вставить("НовоеЗначение", СрокСдачи);
		ДанныеСтруктура.Вставить("Причина", Комментарий);
		
		СтруктураСообщение = ОбщегоНазначения.ПолучитьСтруктуруДанныхДляЗаписиВИсторию(Ложь);
		СтруктураСообщение.Данные = ЗаписатьЗначениеJSON(ДанныеСтруктура);
		СтруктураСообщение.Категория = Перечисления.КатегорииСобытийИсторияИзменений.Прочее;
				
		НачатьТранзакцию();
		Попытка
			МенеджерЗаписи.Записать();
			РегистрыСведений.ИсторияИзмененийОбъектовПоСобытиям.Добавить(Задача, СтруктураСообщение);
			РегистрыСведений.Комментарии.Добавить(Задача, , , ТекстСообщения, , Истина);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();			
			ИмяСобытия = "РегистрСведений.СрокиСдачиЗадач.ИзменениеСрокаСдачи";
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		КонецПопытки;
	Иначе
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
