///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Источник = Параметры.Источник; 
	
	ПанельНавигации.Скопировать(ЭтотОбъект, Параметры);
	
	ОбновитьТаблицуСвязей();
	
	Если Параметры.Свойство("Редактирование") И Параметры.Редактирование = Ложь Тогда
		Элементы.СписокСвязей.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПанельНавигацииКлиент.ПриОткрытии(Элементы, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ПанельНавигацииКлиент.ОбработкаОповещения(ЭтотОбъект, ЭтотОбъект.Источник, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокСвязейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СвязанныйОбъект = Элемент.ТекущиеДанные.СвязанныйОбъект;
	ТипЗначения = ТипЗнч(СвязанныйОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", СвязанныйОбъект);
	
	Если ТипЗначения = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
		ЗаявкаДоступна = ПроверитьДоступностьЗаявки(СвязанныйОбъект);
				
		Если ЗаявкаДоступна Тогда
			ОткрытьФорму("Документ.ЗаявкаНаРазработку.ФормаОбъекта", ПараметрыФормы);
		Иначе
			ПоказатьПредупреждение(, "Заявка в статусе ""Черновик"". Доступ к заявке ограничен. Просмотр недоступен.", ,
				"Предупреждение");
		КонецЕсли;
		
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.Задача") Тогда
		ОткрытьФорму("Документ.Задача.ФормаОбъекта", ПараметрыФормы);
		
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ВнутреннееЗадание") Тогда
		ОткрытьФорму("Документ.ВнутреннееЗадание.ФормаОбъекта", ПараметрыФормы);
	Иначе
		ОткрытьФорму("Справочник.Проекты.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ДобавитьСвязь(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Источник", Источник);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьДобавлениеСвязи", ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.СвязанныеОбъекты.Форма.ДобавлениеСвязи",
		ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокСвязей(Команда)
	
	ОбновитьТаблицуСвязей();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельНавигацииНажатие(Команда)
	
	ПанельНавигацииКлиент.Нажатие(ЭтотОбъект, Команда, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязь(Команда)
	
	ТекущиеДанные = Элементы.СписокСвязей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветНаУдалениеСвязи", ЭтотОбъект, ТекущиеДанные);

	ПоказатьВопрос(ОписаниеОповещения, "Выбранная связь будет удалена. Продолжить?", 
		РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Удаление связи");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьТаблицуСвязей()
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвязанныеОбъекты.ВидСвязи КАК ВидСвязи,
	|	СвязанныеОбъекты.ПриемникСвязи КАК СвязанныйОбъект,
	|	ВЫБОР
	|		КОГДА СвязанныеОбъекты.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Дублирует)
	|			ТОГДА 0
	|		КОГДА СвязанныеОбъекты.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Блокирует)
	|			ТОГДА 2
	|		КОГДА СвязанныеОбъекты.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Предыдущая)
	|			ТОГДА 3
	|		КОГДА СвязанныеОбъекты.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Следующая)
	|			ТОГДА 4
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ИндексКартинки,
	|	СвязанныеОбъекты.ДатаСоздания КАК Дата,
	|	ИСТИНА КАК ЭтоИсточник
	|ПОМЕСТИТЬ СписокСвязей
	|ИЗ
	|	РегистрСведений.СвязанныеОбъекты КАК СвязанныеОбъекты
	|ГДЕ
	|	СвязанныеОбъекты.ИсточникСвязи = &Источник
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СвязанныеОбъекты.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Дублирует)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Дублируется)
	|		КОГДА СвязанныеОбъекты.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Блокирует)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Блокируется)
	|		КОГДА СвязанныеОбъекты.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Следующая)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Предыдущая)
	|		КОГДА СвязанныеОбъекты.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Предыдущая)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Следующая)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.СвязанаС)
	|	КОНЕЦ,
	|	СвязанныеОбъекты.ИсточникСвязи,
	|	ВЫБОР
	|		КОГДА СвязанныеОбъекты.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Дублирует)
	|			ТОГДА 0
	|		КОГДА СвязанныеОбъекты.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Блокирует)
	|			ТОГДА 2
	|		КОГДА СвязанныеОбъекты.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Следующая)
	|			ТОГДА 3
	|		КОГДА СвязанныеОбъекты.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.Предыдущая)
	|			ТОГДА 4
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	СвязанныеОбъекты.ДатаСоздания,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрСведений.СвязанныеОбъекты КАК СвязанныеОбъекты
	|ГДЕ
	|	СвязанныеОбъекты.ПриемникСвязи = &Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокСвязей.СвязанныйОбъект КАК Заявка,
	|	СтатусыОбъектов.Ссылка КАК Статус,
	|	СтатусыОбъектов.Порядок КАК ПорядокСтатуса,
	|	0 КАК ПриоритетСтроки
	|ПОМЕСТИТЬ СтатусыЗаявокПоСистемам
	|ИЗ
	|	СписокСвязей КАК СписокСвязей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|		ПО ((ВЫРАЗИТЬ(СписокСвязей.СвязанныйОбъект КАК Документ.ЗаявкаНаРазработку)) = СтатусыЗаявокПоСистемам.Заявка)
	|			И (СтатусыЗаявокПоСистемам.Система В (&Системы))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (СтатусыЗаявокПоСистемам.Статус = СтатусыОбъектов.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписокСвязей.СвязанныйОбъект,
	|	ЕСТЬNULL(МинимальныеСтатусыЗаявок.Статус, ""Черновик""),
	|	ЕСТЬNULL(СтатусыОбъектов.Порядок, 0),
	|	1
	|ИЗ
	|	СписокСвязей КАК СписокСвязей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
	|		ПО (МинимальныеСтатусыЗаявок.Заявка = (ВЫРАЗИТЬ(СписокСвязей.СвязанныйОбъект КАК Документ.ЗаявкаНаРазработку)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (МинимальныеСтатусыЗаявок.Статус = СтатусыОбъектов.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатусыЗаявокПоСистемам.Заявка КАК Заявка,
	|	МИНИМУМ(СтатусыЗаявокПоСистемам.ПриоритетСтроки) КАК ПриоритетСтроки
	|ПОМЕСТИТЬ МинимальныйПриоритетСтрокиЗаявокПоСистемам
	|ИЗ
	|	СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатусыЗаявокПоСистемам.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатусыЗаявокПоСистемам.Заявка КАК Заявка,
	|	СтатусыЗаявокПоСистемам.ПриоритетСтроки КАК ПриоритетСтроки,
	|	МИНИМУМ(СтатусыЗаявокПоСистемам.ПорядокСтатуса) КАК ПорядокСтатуса
	|ПОМЕСТИТЬ МинимальныйСтатусЗаявокПоСистемам
	|ИЗ
	|	СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальныйПриоритетСтрокиЗаявокПоСистемам КАК МинимальныйПриоритетСтрокиЗаявокПоСистемам
	|		ПО СтатусыЗаявокПоСистемам.Заявка = МинимальныйПриоритетСтрокиЗаявокПоСистемам.Заявка
	|			И СтатусыЗаявокПоСистемам.ПриоритетСтроки = МинимальныйПриоритетСтрокиЗаявокПоСистемам.ПриоритетСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатусыЗаявокПоСистемам.Заявка,
	|	СтатусыЗаявокПоСистемам.ПриоритетСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатусыЗаявокПоПриоритетам.Заявка КАК Объект,
	|	СтатусыЗаявокПоПриоритетам.Статус КАК Статус
	|ПОМЕСТИТЬ СтатусыСвязанныхОбъектов
	|ИЗ
	|	СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоПриоритетам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО ((ВЫРАЗИТЬ(СтатусыЗаявокПоПриоритетам.Заявка КАК Документ.ЗаявкаНаРазработку)) = ЗаявкаНаРазработку.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальныйСтатусЗаявокПоСистемам КАК МинимальныйСтатусЗаявокПоСистемам
	|		ПО СтатусыЗаявокПоПриоритетам.Заявка = МинимальныйСтатусЗаявокПоСистемам.Заявка
	|			И СтатусыЗаявокПоПриоритетам.ПриоритетСтроки = МинимальныйСтатусЗаявокПоСистемам.ПриоритетСтроки
	|			И СтатусыЗаявокПоПриоритетам.ПорядокСтатуса = МинимальныйСтатусЗаявокПоСистемам.ПорядокСтатуса
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписокСвязей.СвязанныйОбъект,
	|	ДокументЗадача.Статус
	|ИЗ
	|	СписокСвязей КАК СписокСвязей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО ((ВЫРАЗИТЬ(СписокСвязей.СвязанныйОбъект КАК Документ.Задача)) = ДокументЗадача.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписокСвязей.СвязанныйОбъект,
	|	СправочникПроект.Статус
	|ИЗ
	|	СписокСвязей КАК СписокСвязей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК СправочникПроект
	|		ПО ((ВЫРАЗИТЬ(СписокСвязей.СвязанныйОбъект КАК Справочник.Проекты)) = СправочникПроект.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписокСвязей.СвязанныйОбъект,
	|	ДокументВнутреннееЗадание.Статус
	|ИЗ
	|	СписокСвязей КАК СписокСвязей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееЗадание КАК ДокументВнутреннееЗадание
	|		ПО ((ВЫРАЗИТЬ(СписокСвязей.СвязанныйОбъект КАК Документ.ВнутреннееЗадание)) = ДокументВнутреннееЗадание.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокСвязей.СвязанныйОбъект КАК СвязанныйОбъект,
	|	ПРЕДСТАВЛЕНИЕ(СписокСвязей.СвязанныйОбъект) КАК НаименованиеОбъекта,
	|	СписокСвязей.ВидСвязи КАК ВидСвязи,
	|	СписокСвязей.Дата КАК Дата,
	|	СписокСвязей.ИндексКартинки КАК ИндексКартинки,
	|	ЕСТЬNULL(СтатусыОбъектов.Наименование, ""Черновик"") КАК СтатусСвязанногоОбъекта,
	|	ЕСТЬNULL(СтатусыОбъектов.ИндексКартинки, &ИндексКартинкиЧерновик) КАК ИндексКартинкиСтатуса,
	|	СписокСвязей.ЭтоИсточник КАК ЭтоИсточник
	|ИЗ
	|	СписокСвязей КАК СписокСвязей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатусыСвязанныхОбъектов КАК СтатусыСвязанныхОбъектов
	|		ПО СписокСвязей.СвязанныйОбъект = СтатусыСвязанныхОбъектов.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (СтатусыСвязанныхОбъектов.Статус = СтатусыОбъектов.Ссылка)";	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Источник", Источник);
	Запрос.УстановитьПараметр("Системы", ПараметрыСеанса.РазрабатываемыеСистемы);
	Запрос.УстановитьПараметр("ИндексКартинкиЧерновик", Справочники.СтатусыОбъектов.ИндексКартинкиЧерновик());
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ЗначениеВРеквизитФормы(РезультатЗапроса.Выгрузить(), "СписокСвязей");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДобавлениеСвязи(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьТаблицуСвязей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветНаУдалениеСвязи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УдалитьЗапись(Источник, ДополнительныеПараметры.СвязанныйОбъект, ДополнительныеПараметры.ЭтоИсточник);
		СписокСвязей.Удалить(ДополнительныеПараметры);
		Оповестить(СобытияОповещенияКлиент.ИмяСобытияОбновленияКоличестваСвязанныхОбъектов() , Источник);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат проверки доступна ли ЗаявкаНаРазработку текущему пользователю.
//
// Параметры:
//  Объект - Ссылка на документ ЗаявкаНаРазработку.
//
// Возвращаемое значение:
//  Истина, если Заявка недоступна для просмотра текущим пользователем. Ложь, в противном случае.
//
&НаСервереБезКонтекста
Функция ПроверитьДоступностьЗаявки(Знач Объект)	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявкаНаРазработку.Наименование КАК Наименование
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|ГДЕ
	|	ЗаявкаНаРазработку.Ссылка = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект);	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьЗапись(Знач Источник, Знач Приемник, Знач ЭтоИсточник)
	
	Если ЭтоИсточник Тогда
		РегистрыСведений.СвязанныеОбъекты.УдалитьСвязь(Источник, Приемник);
	Иначе
		РегистрыСведений.СвязанныеОбъекты.УдалитьСвязь(Приемник, Источник);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
