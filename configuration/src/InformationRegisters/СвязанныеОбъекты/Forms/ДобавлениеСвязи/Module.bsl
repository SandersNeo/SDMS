///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Источник = Параметры.Источник;
	
	ЗаполнитьТипыПриемника();		
	ЗаполнитьСписокВыбораВидовСвязи();
	
	СписокЗапрещенныхОбъектов = ПолучитьЗапрещенныеОбъекты();
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПараметрыОбъекта = Новый Структура("Источник, ВидСвязи, Приемник", Источник, ВидСвязи, Приемник);
	ПараметрыОбъекта = ПолучитьДанныеДляЗаписи(ПараметрыОбъекта);
	
	Запись.ИсточникСвязи = ПараметрыОбъекта.Источник;
	Запись.ВидСвязи = ПараметрыОбъекта.ВидСвязи;
	Запись.ПриемникСвязи = ПараметрыОбъекта.Приемник;
	Запись.Автор = ПараметрыОбъекта.Автор;
	Запись.ДатаСоздания = ПараметрыОбъекта.ДатаСоздания;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить(СобытияОповещенияКлиент.ИмяСобытияОбновленияКоличестваСвязанныхОбъектов() , Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВидСвязиПриИзменении(Элемент)
	
	Модифицированность = Истина;

	ЗаполнитьТипыПриемника();	
			
КонецПроцедуры

&НаКлиенте
Процедура ПриемникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
		
	Если СписокТипов.Количество() = 1 Тогда
		Тип = СписокТипов[0].Значение;
		ОткрытьФормуВыбораСвязанногоОбъекта(Тип);		
	ИначеЕсли ЗначениеЗаполнено(Приемник) Тогда
		Тип = ТипЗнч(Приемник);
		ОткрытьФормуВыбораСвязанногоОбъекта(Тип);
	Иначе
		ВыбратьТипСвязанногоОбъекта();	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриемникПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	Если СписокЗапрещенныхОбъектов.НайтиПоЗначению(Приемник) <> Неопределено Тогда
		Сообщить("Объект не должен связываться сам с собой или с объектом с которым у него уже есть связь.");
		Приемник = Неопределено;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораВидовСвязи();
			
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыбратьТипСвязанногоОбъекта()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборТипа", ЭтотОбъект);
	СписокТипов.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выбор типа данных");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораВидовСвязи()
	
	СписокВыбора = Элементы.ВидСвязи.СписокВыбора;	
	СписокВыбора.Очистить();
		
	ТолькоСвязана = Ложь;
	
	Если Приемник <> Неопределено Тогда
		ТипИсточника = ТипЗнч(Источник);
		ТипПриемника = ТипЗнч(Приемник);
		ТипыОбъектов = ТипыОбъектов();

		Если (ТипИсточника = ТипыОбъектов.Проект И ТипПриемника = ТипыОбъектов.ВЗ)
			ИЛИ (ТипИсточника = ТипыОбъектов.ВЗ И ТипПриемника = ТипыОбъектов.Проект) Тогда
			
			ТолькоСвязана = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ТолькоСвязана Тогда
		СписокВыбора.Добавить(Перечисления.ВидыСвязейОбъектов.СвязанаС, , , БиблиотекаКартинок.СвязанаС);
	Иначе
		СписокВыбора.Добавить(Перечисления.ВидыСвязейОбъектов.СвязанаС, , , БиблиотекаКартинок.СвязанаС);
		СписокВыбора.Добавить(Перечисления.ВидыСвязейОбъектов.Блокирует, , , БиблиотекаКартинок.Блокирует);
		СписокВыбора.Добавить(Перечисления.ВидыСвязейОбъектов.Блокируется, , , БиблиотекаКартинок.Блокирует);
		СписокВыбора.Добавить(Перечисления.ВидыСвязейОбъектов.Дублирует, , , БиблиотекаКартинок.Дублирует);
		СписокВыбора.Добавить(Перечисления.ВидыСвязейОбъектов.Дублируется, , , БиблиотекаКартинок.Дублирует);
		СписокВыбора.Добавить(Перечисления.ВидыСвязейОбъектов.Следующая, , , БиблиотекаКартинок.Следующая);
		СписокВыбора.Добавить(Перечисления.ВидыСвязейОбъектов.Предыдущая, , , БиблиотекаКартинок.Предыдущая);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипыПриемника()
	
	СписокТипов.Очистить();
	
	ТипыОбъектов = ТипыОбъектов();	
	ТипИсточника = ТипЗнч(Источник);

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипИсточника);
		
	Если ТипИсточника = ТипыОбъектов.Заявка Тогда
		МассивТипов.Добавить(ТипыОбъектов.Проект);
		
	ИначеЕсли ТипИсточника = ТипыОбъектов.Проект Тогда
		МассивТипов.Добавить(ТипыОбъектов.Заявка);
		
		Если НЕ ЗначениеЗаполнено(ВидСвязи) 
			ИЛИ ВидСвязи = Перечисления.ВидыСвязейОбъектов.СвязанаС Тогда
			
			МассивТипов.Добавить(ТипыОбъектов.ВЗ);
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = ТипыОбъектов.ВЗ Тогда
		Если НЕ ЗначениеЗаполнено(ВидСвязи) 
			ИЛИ ВидСвязи = Перечисления.ВидыСвязейОбъектов.СвязанаС Тогда
			
			МассивТипов.Добавить(ТипыОбъектов.Проект);
		КонецЕсли;
	КонецЕсли;
	
	// Сохраняем типы в список для интерактивного выбора
	Для Каждого Тип Из МассивТипов Цикл
		СписокТипов.Добавить(Тип);
	КонецЦикла;
	
	Элементы.Приемник.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяФормыВыбора(Знач Тип)
	
	Возврат Метаданные.НайтиПоТипу(Тип).ОсновнаяФормаДляВыбора.ПолноеИмя();

КонецФункции	

&НаКлиенте
Процедура ОбработатьВыборОбъекта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Приемник = Результат;
		
		ЗаполнитьСписокВыбораВидовСвязи();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборТипа(ВыбранныйЭлемент, СписокПараметров) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ОткрытьФормуВыбораСвязанногоОбъекта(ВыбранныйЭлемент.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСвязанногоОбъекта(Знач Тип)
	
	ИмяФормыВыбора = ИмяФормыВыбора(Тип);
	
	ПараметрыОткрытия = Новый Структура("ФиксированныеНастройки", Новый НастройкиКомпоновкиДанных);
	
	ОтборТекущийОбъект = ПараметрыОткрытия.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборТекущийОбъект.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборТекущийОбъект.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка");
	ОтборТекущийОбъект.ПравоеЗначение = СписокЗапрещенныхОбъектов;
	ОтборТекущийОбъект.Использование  = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборОбъекта", ЭтотОбъект);
	
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыОткрытия, ЭтотОбъект, , , , 
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляЗаписи(Знач Параметры)
	
	НовыеПараметры = Новый Структура("Источник, ВидСвязи, Приемник, Автор, ДатаСоздания");
	НовыеПараметры.Источник = Параметры.Приемник;
	НовыеПараметры.Приемник = Параметры.Источник;
	НовыеПараметры.Автор = ПараметрыСеанса.ТекущийПользователь;
	НовыеПараметры.ДатаСоздания = ТекущаяДатаСеанса();
	
	Если Параметры.ВидСвязи = Перечисления.ВидыСвязейОбъектов.Блокируется Тогда
		НовыеПараметры.ВидСвязи = Перечисления.ВидыСвязейОбъектов.Блокирует;
		
	ИначеЕсли Параметры.ВидСвязи = Перечисления.ВидыСвязейОбъектов.Дублируется Тогда
		НовыеПараметры.ВидСвязи = Перечисления.ВидыСвязейОбъектов.Дублирует;
		
	ИначеЕсли Параметры.ВидСвязи = Перечисления.ВидыСвязейОбъектов.Предыдущая Тогда
		НовыеПараметры.ВидСвязи = Перечисления.ВидыСвязейОбъектов.Следующая;
		
	Иначе
		НовыеПараметры.Источник = Параметры.Источник;
		НовыеПараметры.ВидСвязи = Параметры.ВидСвязи;
		НовыеПараметры.Приемник = Параметры.Приемник;
	КонецЕсли;
	
	Возврат НовыеПараметры;
	
КонецФункции

&НаСервере
Функция ПолучитьЗапрещенныеОбъекты()
	
	Запрос = Новый Запрос;
	Запрос.Текст =	
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	СвязанныеОбъекты.ПриемникСвязи КАК Ссылка
	|ИЗ
	|	РегистрСведений.СвязанныеОбъекты КАК СвязанныеОбъекты
	|ГДЕ
	|	СвязанныеОбъекты.ИсточникСвязи = &Источник
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СвязанныеОбъекты.ИсточникСвязи
	|ИЗ
	|	РегистрСведений.СвязанныеОбъекты КАК СвязанныеОбъекты
	|ГДЕ
	|	СвязанныеОбъекты.ПриемникСвязи = &Источник";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Источник", Источник);
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗапрещенныеОбъекты = Новый СписокЗначений;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Запрещенные = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		ЗапрещенныеОбъекты.ЗагрузитьЗначения(Запрещенные);
	КонецЕсли;
	
	ЗапрещенныеОбъекты.Добавить(Источник);
	
	Возврат ЗапрещенныеОбъекты;
	
КонецФункции

&НаСервере
Функция ТипыОбъектов()

	ТипыОбъектов = Новый Структура;
	ТипыОбъектов.Вставить("Проект",	Тип("СправочникСсылка.Проекты"));
	ТипыОбъектов.Вставить("Заявка",	Тип("ДокументСсылка.ЗаявкаНаРазработку"));
	ТипыОбъектов.Вставить("ВЗ",		Тип("ДокументСсылка.ВнутреннееЗадание"));

	Возврат ТипыОбъектов;
	
КонецФункции

#КонецОбласти
