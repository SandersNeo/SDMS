///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

// Хранит набор свойств дерева статусов, которые используются при программной работе
&НаКлиенте
Перем СвойстваДереваСтатусов;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановленМонопольныйРежим = ПроверитьМонопольныйРежимНаСервере();
	
	ЗаполнитьСписокНастраиваемыхОбъектов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьМонопольныйРежим();
	ПодключитьОбработчикОжидания("Обработчик_ПроверитьМонопольныйРежим", 120);
	
	ИнициализироватьСвойстваДереваСтатусов();
	УстановитьДоступ();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВладелецСтатусовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПроверитьМодифицированностьДанных("ВладелецСтатусовОбработкаВыбора", СтандартнаяОбработка, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецСтатусовОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПроверитьМодифицированностьДанных("ВладелецСтатусовОчистка", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецСтатусовПриИзменении(Элемент)
	
	ПриИзмененииВладельцаСтатуса();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ "ДоступныеРоли"

&НаКлиенте
Процедура ДоступныеРолиПометкаПриИзменении(Элемент)
	
	СтрокаДоступныхРолей = Элементы.ДоступныеРоли.ТекущиеДанные;
	СтрокаДереваСтатусов = Элементы.ДеревоСтатусов.ТекущиеДанные;
	
	Если СтрокаДоступныхРолей.Пометка = Истина Тогда
		НоваяСтрока = НастройкиПереходаСтатусов.Добавить();
		НоваяСтрока.Роль              = СтрокаДоступныхРолей.Роль;
		НоваяСтрока.СтатусРодитель    = СтрокаДереваСтатусов.СтатусРодитель;
		НоваяСтрока.ПодчиненныйСтатус = СтрокаДереваСтатусов.Статус;
	Иначе
		Отбор = Новый Структура("Роль, СтатусРодитель, ПодчиненныйСтатус", 
			СтрокаДоступныхРолей.Роль, СтрокаДереваСтатусов.СтатусРодитель, 
			СтрокаДереваСтатусов.Статус);
			
		НайденныеСтроки = НастройкиПереходаСтатусов.НайтиСтроки(Отбор);
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			НастройкиПереходаСтатусов.Удалить(НастройкиПереходаСтатусов.Индекс(СтрокаТаблицы));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ "ЗакрытыеЗадачиЗаказчика"

&НаКлиенте
Процедура ДеревоСтатусовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Отказ устанавливаем в любом случае, потому что обработку добавления
	// будем выполнять самостоятельно.
	Отказ = Истина;	
	
	// Запретим копирование и добавление элементов в верхний уровень
	ТекущиеДанные = Элементы.ДеревоСтатусов.ТекущиеДанные;
	Если Копирование ИЛИ ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Определим родителя, которому добавляем подчиненный статус
	Если ЗначениеЗаполнено(ТекущиеДанные.СтатусРодитель) Тогда
		СтатусРодитель = ТекущиеДанные.СтатусРодитель;
	Иначе
		СтатусРодитель = ТекущиеДанные.Статус;
	КонецЕсли;
	
	// НАЧАЛО. Сформируем параметры открытия для формы выбора
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);	
	ПараметрыФормы.Вставить("ИсключаемыеСтатусы", Новый Массив);
	
	ПараметрыФормы.ИсключаемыеСтатусы.Добавить(СтатусРодитель);
	
	СтрокиДереваСтатусов = ДеревоСтатусов.ПолучитьЭлементы();
	ПодчиненныеСтроки = Неопределено;
	Для Каждого СтрокаДерева Из СтрокиДереваСтатусов Цикл
		Если СтрокаДерева.Статус = СтатусРодитель Тогда
			ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
			
			Для Каждого СтрокаДереваПодчиненная Из ПодчиненныеСтроки Цикл
				ПараметрыФормы.ИсключаемыеСтатусы.Добавить(СтрокаДереваПодчиненная.Статус);
			КонецЦикла;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	// КОНЕЦ
	
	ПараметрыОткрытия = Новый Структура("СтатусРодитель", СтатусРодитель);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборПодчиненногоСтатуса", 
		ЭтотОбъект, ПараметрыОткрытия);
	
	ОткрытьФорму("Справочник.СтатусыОбъектов.ФормаВыбора", ПараметрыФормы, 
		ЭтотОбъект, УникальныйИдентификатор, , , ОписаниеОповещения, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатусовПередРазворачиванием(Элемент, Строка, Отказ)
	
	СтрокаДерева = ДеревоСтатусов.НайтиПоИдентификатору(Строка);
	Если СтрокаДерева <> Неопределено Тогда
		НайденноеЗначение = СвойстваДереваСтатусов.РазвернутыеСтроки.Получить(СтрокаДерева.UID);
		
		Если НайденноеЗначение = Неопределено Тогда
			СвойстваДереваСтатусов.РазвернутыеСтроки.Вставить(СтрокаДерева.UID, Строка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатусовПередСворачиванием(Элемент, Строка, Отказ)

    СтрокаДерева = ДеревоСтатусов.НайтиПоИдентификатору(Строка);
    Если СтрокаДерева <> Неопределено Тогда
        СвойстваДереваСтатусов.РазвернутыеСтроки.Удалить(СтрокаДерева.UID);
    КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатусовПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоСтатусов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.СтатусРодитель) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатусовПослеУдаления(Элемент)
	
	СвойстваДереваСтатусов.ВыделеннаяСтрока = Неопределено;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатусовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоСтатусов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		СвойстваДереваСтатусов.ВыделеннаяСтрока = Неопределено;
		Возврат;
	КонецЕсли;
	
	СвойстваДереваСтатусов.ВыделеннаяСтрока = ТекущиеДанные.UID;
	
	// Изменение строк в самой верхней иерархии запрещено. Проверим это.
	РазрешитьИзменения = ЗначениеЗаполнено(ТекущиеДанные.СтатусРодитель);
	
	// Запретим изменять порядок строк и набор ролей для строк верхней иерархии
	Элементы.ДеревоСтатусов.ИзменятьПорядокСтрок = РазрешитьИзменения;
	Элементы.ДоступныеРоли.ТолькоПросмотр        = НЕ РазрешитьИзменения;
	Элементы.ОбязательныеСтатусы.ТолькоПросмотр = НЕ РазрешитьИзменения;
	
	ОбязательныеСтатусыПромежуточный.Очистить();
	
	Если НЕ РазрешитьИзменения Тогда
		// Найдем помеченные строки и снимем пометку
		НайденныеСтроки = ДоступныеРоли.НайтиСтроки(Новый Структура("Пометка", Истина));
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			СтрокаТаблицы.Пометка = Ложь;
		КонецЦикла;
		
	Иначе
		// Найдем по роли, статусу-владельцу и подчиненному статусу,
		// которые находятся в таблице НастройкиПереходаСтатусов. Считаем,
		// что эти роли отмечены.
		Отбор = Новый Структура("СтатусРодитель, ПодчиненныйСтатус", 
			ТекущиеДанные.СтатусРодитель, ТекущиеДанные.Статус);
		
		// Сформируем массив отмеченных ролей
		ОтмеченныеРоли = Новый Соответствие;
		
		НайденныеСтроки = НастройкиПереходаСтатусов.НайтиСтроки(Отбор);
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл 
			ОтмеченныеРоли.Вставить(СтрокаТаблицы.Роль, Истина); 
		КонецЦикла;
		
		// Пройдемся по ролям и установим/снимем пометки
		Для Каждого СтрокаТаблицы Из ДоступныеРоли Цикл 
			СтрокаТаблицы.Пометка = (ОтмеченныеРоли.Получить(СтрокаТаблицы.Роль) <> Неопределено); 
		КонецЦикла;
		
		ОтборСтрок = Новый Структура("ТекущийСтатус, НовыйСтатус", ТекущиеДанные.СтатусРодитель, ТекущиеДанные.Статус);
		ПромежуточныеСтатусы = ПолучитьПромежуточныеСтатусы(ОбязательныеСтатусы, ОтборСтрок);
		
		Для Каждого ПромежуточныйСтатус Из ПромежуточныеСтатусы Цикл
			ЗаполнитьЗначенияСвойств(ОбязательныеСтатусыПромежуточный.Добавить(), ПромежуточныйСтатус);
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатусовПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбязательныеСтатусыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ДанныеДерева = Элементы.ДеревоСтатусов.ТекущиеДанные;
	
	Если ДанныеДерева = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	// НАЧАЛО. Сформируем параметры открытия для формы выбора
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Истина);	
	ПараметрыОткрытия.Вставить("ИсключаемыеСтатусы", Новый Массив);
	
	ПараметрыОткрытия.ИсключаемыеСтатусы.Добавить(ДанныеДерева.Статус);
	ПараметрыОткрытия.ИсключаемыеСтатусы.Добавить(ДанныеДерева.СтатусРодитель);
	
	Для Каждого Строка Из ОбязательныеСтатусы Цикл
		Если Строка.ТекущийСтатус = ДанныеДерева.СтатусРодитель И Строка.НовыйСтатус = ДанныеДерева.Статус Тогда
			ПараметрыОткрытия.ИсключаемыеСтатусы.Добавить(Строка.ПромежуточныйСтатус);
		КонецЕсли; 
	КонецЦикла; 
	
	ДополнительныеПараметры = Новый Структура("ТекущийСтатус, НовыйСтатус", ДанныеДерева.СтатусРодитель, ДанныеДерева.Статус);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборОбязательногоСтатуса", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Справочник.СтатусыОбъектов.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбязательныеСтатусыПриИзменении(Элемент)
	
	ПересчитатьПорядокОбязательныхСтатусов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	
	СохранитьИзменения();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	СохранитьИзменения();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьМонопольныйРежим(Команда)
	
	ТекстОшибки = ИзменитьМонопольныйРежимНаСервере(УстановленМонопольныйРежим);
	Если ПустаяСтрока(ТекстОшибки) Тогда
		ПроверитьМонопольныйРежим(, Истина);
	Иначе
		ПоказатьПредупреждение(, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокРегистраСведений(Команда)
	
	ОткрытьФорму("РегистрСведений.НастройкиПереходаСтатусовОбъектов.ФормаСписка", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокРегистраОбязательныеСтатусыОбъектов(Команда)
	
	ОткрытьФорму("РегистрСведений.ОбязательныеСтатусыОбъектов.ФормаСписка", , ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДобавитьПодчиненныйСтатус(Знач ДобавляемыеСтатусы, Знач СтатусРодитель, СвойстваДерева)
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоСтатусов", Тип("ДеревоЗначений"));
	
	НайденнаяСтрока = ДеревоЗначений.Строки.Найти(СтатусРодитель, "Статус", Ложь);
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого Статус Из ДобавляемыеСтатусы Цикл
		НоваяСтрока = НайденнаяСтрока.Строки.Добавить();
		НоваяСтрока.ИндексКартинки = Статус.ИндексКартинки;
		НоваяСтрока.Статус         = Статус;
		НоваяСтрока.Наименование   = Статус.Наименование;
		НоваяСтрока.СтатусРодитель = СтатусРодитель;
		НоваяСтрока.UID            = Новый УникальныйИдентификатор;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "ДеревоСтатусов");
	
	СвойстваДерева.ИдентификаторВыделеннойСтроки = -1;
	СвойстваДерева.Вставить("НайденоСоответствийСтрок", 0);
	
	ОбновитьСвойстваДерева(ДеревоСтатусов, СвойстваДерева);
	
	СвойстваДерева.Удалить("НайденоСоответствийСтрок");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбязательныеСтатусыОбъекта()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОбязательныеСтатусыОбъектов.ТекущийСтатус КАК ТекущийСтатус,
	|	ОбязательныеСтатусыОбъектов.НовыйСтатус КАК НовыйСтатус,
	|	ОбязательныеСтатусыОбъектов.ПромежуточныйСтатус КАК ПромежуточныйСтатус,
	|	ОбязательныеСтатусыОбъектов.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.ОбязательныеСтатусыОбъектов КАК ОбязательныеСтатусыОбъектов
	|ГДЕ
	|	ОбязательныеСтатусыОбъектов.ТипОбъекта = &ТипОбъекта";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТипОбъекта", ВладелецСтатусов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Данные = РезультатЗапроса.Выгрузить();
		ОбязательныеСтатусы.Загрузить(Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокНастраиваемыхОбъектов()

	СписокВыбора = Элементы.ВладелецСтатусов.СписокВыбора;
	
	// Заполнение списка настраиваемых объектов
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТипыОбъектовВладельцев.Ссылка КАК Ссылка,
	|	ТипыОбъектовВладельцев.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ТипыОбъектовВладельцев КАК ТипыОбъектовВладельцев
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Подстрока = ВРег(Лев(Выборка.Наименование, 8));
		Если Подстрока = ВРег("Документ") Тогда
			Картинка = БиблиотекаКартинок.Документ;
		ИначеЕсли Подстрока = ВРег("Справочн") Тогда
			Картинка = БиблиотекаКартинок.Справочник;
		Иначе
			Картинка = БиблиотекаКартинок.ГрафическаяСхема;
		КонецЕсли;
		
		СписокВыбора.Добавить(Выборка.Ссылка, Выборка.Наименование, , Картинка);
	КонецЦикла;
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Функция ИзменитьМонопольныйРежимНаСервере(Установлен)
	
	МонопольныйРежим = МонопольныйРежим();
	
	Попытка
		УстановитьМонопольныйРежим(НЕ МонопольныйРежим);
		Установлен = НЕ МонопольныйРежим;
		
		ТекстОшибки = "";
	Исключение
		ТекстОшибки = НСтр("ru = 'С информационной базой работают другие пользователи.
        	|В данный момент невозможно установить монопольный режим!'");
	КонецПопытки;
	
	Возврат ТекстОшибки;
	
КонецФункции

&НаКлиенте
Процедура ИнициализироватьСвойстваДереваСтатусов()
	
	СвойстваДереваСтатусов = Новый Структура;
	СвойстваДереваСтатусов.Вставить("ВыделеннаяСтрока", Неопределено);
	СвойстваДереваСтатусов.Вставить("ИдентификаторВыделеннойСтроки", -1);
	СвойстваДереваСтатусов.Вставить("РазвернутыеСтроки", Новый Соответствие);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьСвойстваДерева(Знач ДеревоЗначений, СвойстваДерева)
	
	// Получаем все элементы текущей ветки дерева значений
	СтрокиДереваСтатусов = ДеревоЗначений.ПолучитьЭлементы();
	Если СтрокиДереваСтатусов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Определяем, нужно ли искать выделенный на форме элемент
    ИскатьТекущуюСтроку = (СвойстваДерева.ВыделеннаяСтрока <> Неопределено 
		И СвойстваДерева.ИдентификаторВыделеннойСтроки = -1);
	
	Для Каждого СтрокаДерева Из СтрокиДереваСтатусов Цикл
		ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
		
		Если СвойстваДерева.РазвернутыеСтроки.Получить(СтрокаДерева.UID) <> Неопределено Тогда
			СвойстваДерева.РазвернутыеСтроки[СтрокаДерева.UID] = ИдентификаторСтроки;
			СвойстваДерева.НайденоСоответствийСтрок = СвойстваДерева.НайденоСоответствийСтрок + 1;
		КонецЕсли;
			
		Если ИскатьТекущуюСтроку Тогда
			Если СвойстваДерева.ВыделеннаяСтрока = СтрокаДерева.UID Тогда
				СвойстваДерева.ИдентификаторВыделеннойСтроки = ИдентификаторСтроки;
				ИскатьТекущуюСтроку = Ложь;
			КонецЕсли;
		КонецЕсли;
			
		Если НЕ ИскатьТекущуюСтроку 
			И СвойстваДерева.РазвернутыеСтроки.Количество() = СвойстваДерева.НайденоСоответствийСтрок Тогда
			
			Прервать;
		КонецЕсли;
		
		ОбновитьСвойстваДерева(СтрокаДерева, СвойстваДерева);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборВладельцаСтатусов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ВладелецСтатусов = Результат;
		
		ИнициализироватьСвойстваДереваСтатусов();
		СформироватьДеревоСтатусов();
		УстановитьДоступ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборОбязательногоСтатуса(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Для Каждого Статус Из Результат Цикл
			НоваяСтрока = ОбязательныеСтатусы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДополнительныеПараметры);
			НоваяСтрока.ПромежуточныйСтатус = Статус;
			НоваяСтрока.Изменен = Истина;
			ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
			
			НоваяСтрока = ОбязательныеСтатусыПромежуточный.Добавить();
			НоваяСтрока.ПромежуточныйСтатус = Статус;
			НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		КонецЦикла; 
		
		Модифицированность = Истина;
	КонецЕсли;
	
	ПересчитатьПорядокОбязательныхСтатусов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПодчиненногоСтатуса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ДобавитьПодчиненныйСтатус(Результат, ДополнительныеПараметры.СтатусРодитель, СвойстваДереваСтатусов);
		
		// Восстанавливаем развернутые строки дерева
		Для Каждого ЭлементСоответствия Из СвойстваДереваСтатусов.РазвернутыеСтроки Цикл
			Элементы.ДеревоСтатусов.Развернуть(ЭлементСоответствия.Значение);	
		КонецЦикла;
		
		// Восстанавливаем выделенную строку
		Если СвойстваДереваСтатусов.ИдентификаторВыделеннойСтроки <> Неопределено 
			И СвойстваДереваСтатусов.ИдентификаторВыделеннойСтроки > -1 Тогда
			
			Элементы.ДеревоСтатусов.ТекущаяСтрока = СвойстваДереваСтатусов.ИдентификаторВыделеннойСтроки;
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПроверкуМодифицированностиДанных(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Отмена Тогда
		Если Результат = КодВозвратаДиалога.Да Тогда
			СохранитьИзменения();
		КонецЕсли;
		
		Модифицированность = Ложь;
		ВладелецСтатусов   = Неопределено;
		
		Если ДополнительныеПараметры.ИмяВызывающегоМетода = "ВладелецСтатусовОбработкаВыбора" Тогда
			ВладелецСтатусов = ДополнительныеПараметры.НовоеЗначение;
			ПриИзмененииВладельцаСтатуса();
		Иначе
			УстановитьДоступ();
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обработчик_ПроверитьМонопольныйРежим()
	
	ПроверитьМонопольныйРежим(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьПорядокОбязательныхСтатусов()
	
	Порядок = 0;
	
	Для Каждого Строка Из ОбязательныеСтатусыПромежуточный Цикл
		Порядок = Порядок + 1;
		СтрокаСтатус = ОбязательныеСтатусы.НайтиПоИдентификатору(Строка.ИдентификаторСтроки);
		
		Если СтрокаСтатус.Порядок <> Порядок Тогда
			СтрокаСтатус.Порядок = Порядок;
			СтрокаСтатус.Изменен = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПромежуточныеСтатусы(Знач ПромежуточныеСтатусы, Знач Отбор)
	
	Результат = Новый Массив;
	
	ПромежуточныеСтатусы.Сортировать("ТекущийСтатус, НовыйСтатус, Порядок");
	Строки = ПромежуточныеСтатусы.НайтиСтроки(Отбор);
	
	Для Каждого Строка Из Строки Цикл
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("ПромежуточныйСтатус", Строка.ПромежуточныйСтатус);
		ДанныеСтроки.Вставить("ИдентификаторСтроки", Строка.ПолучитьИдентификатор());
		
		Результат.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииВладельцаСтатуса()
	
	ИнициализироватьСвойстваДереваСтатусов();
	СформироватьДеревоСтатусов();
	УстановитьДоступ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМонопольныйРежим(Знач ЗапроситьСостояние = Ложь, Знач ПоказатьСообщение = Ложь)
	
	Если ЗапроситьСостояние Тогда
		УстановленМонопольныйРежим = ПроверитьМонопольныйРежимНаСервере();
	КонецЕсли;
	
	Если УстановленМонопольныйРежим Тогда
		Элементы.МонопольныйРежим.Заголовок = "Отключить монопольный режим";
	Иначе
		Элементы.МонопольныйРежим.Заголовок = "Установить монопольный режим";
	КонецЕсли;
	
	Если ПоказатьСообщение Тогда
		
		Если УстановленМонопольныйРежим Тогда
			ТекстСообщения = "Установлен монопольный режим.";
		Иначе
			ТекстСообщения = "Монопольный режим отключен.";
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(ТекстСообщения, , , БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМодифицированностьДанных(Знач ИмяВызывающегоМетода, СтандартнаяОбработка, НовоеЗначение = Неопределено)
	
	Если Модифицированность = Истина Тогда
		ДополнительныеПараметры = Новый Структура("ИмяВызывающегоМетода, НовоеЗначение",
			ИмяВызывающегоМетода, НовоеЗначение);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПроверкуМодифицированностиДанных", 
			ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, "Данные настроек были изменены. Записать изменения?",
			РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена, "Сохранение настроек статусов"); 
	Иначе
		СтандартнаяОбработка = Истина;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьМонопольныйРежимНаСервере()
	
	Возврат МонопольныйРежим();
	
КонецФункции

&НаСервере
Функция СоздатьПустуюТаблицуОписанияПереходовСтатусов()
	
	ОписаниеПереходовСтатусов = Новый ТаблицаЗначений;
	ОписаниеПереходовСтатусов.Колонки.Добавить("Объект", Новый ОписаниеТипов("СправочникСсылка.ТипыОбъектовВладельцев"));
	ОписаниеПереходовСтатусов.Колонки.Добавить("РольПользователя", Новый ОписаниеТипов("СправочникСсылка.РолиПользователей"));
	ОписаниеПереходовСтатусов.Колонки.Добавить("ТекущийСтатус", Новый ОписаниеТипов("СправочникСсылка.СтатусыОбъектов"));
	ОписаниеПереходовСтатусов.Колонки.Добавить("НовыйСтатус", Новый ОписаниеТипов("СправочникСсылка.СтатусыОбъектов"));
	ОписаниеПереходовСтатусов.Колонки.Добавить("Порядок", ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(10));

	Возврат ОписаниеПереходовСтатусов;
	
КонецФункции

&НаКлиенте
Процедура СохранитьИзменения()
	
	Результат = СохранитьИзмененияНаСервере();
	Если Результат.Успех Тогда
		ПоказатьОповещениеПользователя("Данные успешно записаны.", , , БиблиотекаКартинок.Информация32);
	Иначе
		ТекстСообщения = "При сохранении настроек возникла ошибка:
			|" + Результат.ТекстОшибки;
		
		ПоказатьПредупреждение(, ТекстСообщения, , "Сохранение настроек перехода статусов");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СохранитьИзмененияНаСервере()
	
	Результат = Новый Структура("Успех, ТекстОшибки", Ложь, ""); 
	
	НаборСохраняемыхДанных = СоздатьПустуюТаблицуОписанияПереходовСтатусов();
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоСтатусов", Тип("ДеревоЗначений"));
	
	Отбор = Новый Структура("СтатусРодитель, ПодчиненныйСтатус");
	
	Для Каждого СтрокаДереваРодитель Из ДеревоЗначений.Строки Цикл
		СтатусРодитель = СтрокаДереваРодитель.Статус;
		
		Порядок = 1;
		
		Для Каждого СтрокаДереваПодчиненная Из СтрокаДереваРодитель.Строки Цикл
			СтатусПодчиненный = СтрокаДереваПодчиненная.Статус;
			
			Отбор.СтатусРодитель    = СтатусРодитель;
			Отбор.ПодчиненныйСтатус = СтатусПодчиненный;
			
			ЕстьДобавленныеСтроки = Ложь;
			
			НайденныеСтроки = НастройкиПереходаСтатусов.НайтиСтроки(Отбор);
			Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
				НоваяСтрока = НаборСохраняемыхДанных.Добавить();
				НоваяСтрока.Объект           = ВладелецСтатусов;
				НоваяСтрока.РольПользователя = СтрокаТаблицы.Роль;
				НоваяСтрока.ТекущийСтатус    = СтатусРодитель;
				НоваяСтрока.НовыйСтатус      = СтатусПодчиненный;
				НоваяСтрока.Порядок          = Порядок;
				
				ЕстьДобавленныеСтроки = Истина;
			КонецЦикла;
			
			Если ЕстьДобавленныеСтроки Тогда
				Порядок = Порядок + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЕстьОшибкаПриЗаписи = Ложь;
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.НастройкиПереходаСтатусовОбъектов");
	ЭлементБлокировки.УстановитьЗначение("Объект", ВладелецСтатусов);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОбязательныеСтатусыОбъектов");
	ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", ВладелецСтатусов);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НаборЗаписей = РегистрыСведений.НастройкиПереходаСтатусовОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ВладелецСтатусов);
	НаборЗаписей.Загрузить(НаборСохраняемыхДанных);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.ТекущийСтатус КАК ТекущийСтатус,
	|	Таблица.НовыйСтатус КАК НовыйСтатус,
	|	Таблица.ПромежуточныйСтатус КАК ПромежуточныйСтатус,
	|	Таблица.Порядок КАК Порядок,
	|	Таблица.Изменен КАК Изменен
	|ПОМЕСТИТЬ ОбязательныеСтатусы
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ТипОбъекта КАК ТипОбъекта,
	|	ОбязательныеСтатусы.ТекущийСтатус КАК ТекущийСтатус,
	|	ОбязательныеСтатусы.НовыйСтатус КАК НовыйСтатус,
	|	ОбязательныеСтатусы.ПромежуточныйСтатус КАК ПромежуточныйСтатус,
	|	ОбязательныеСтатусы.Порядок КАК Порядок,
	|	ЕСТЬNULL(ОбязательныеСтатусыОбъектов.Автор, &Автор) КАК Автор,
	|	ЕСТЬNULL(ОбязательныеСтатусыОбъектов.ДатаИзменения, &ДатаИзменения) КАК ДатаИзменения
	|ИЗ
	|	ОбязательныеСтатусы КАК ОбязательныеСтатусы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбязательныеСтатусыОбъектов КАК ОбязательныеСтатусыОбъектов
	|		ПО ОбязательныеСтатусы.ТекущийСтатус = ОбязательныеСтатусыОбъектов.ТекущийСтатус
	|			И ОбязательныеСтатусы.НовыйСтатус = ОбязательныеСтатусыОбъектов.НовыйСтатус
	|			И ОбязательныеСтатусы.ПромежуточныйСтатус = ОбязательныеСтатусыОбъектов.ПромежуточныйСтатус
	|			И (НЕ ОбязательныеСтатусы.Изменен)
	|			И (ОбязательныеСтатусыОбъектов.ТипОбъекта = &ТипОбъекта)";
	
	ТаблицаОбязательныеСтатусы = ОбязательныеСтатусы.Выгрузить();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Таблица", ТаблицаОбязательныеСтатусы);
	Запрос.УстановитьПараметр("ТипОбъекта", ВладелецСтатусов);
	Запрос.УстановитьПараметр("Автор", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ДатаИзменения", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		РезультатОбязательныеСтатусы = РезультатЗапроса.Выгрузить();
	Иначе
		РезультатОбязательныеСтатусы = Новый ТаблицаЗначений;
	КонецЕсли; 
	
	НаборЗаписейОбязательныеСтатусы = РегистрыСведений.ОбязательныеСтатусыОбъектов.СоздатьНаборЗаписей();
	НаборЗаписейОбязательныеСтатусы.Отбор.ТипОбъекта.Установить(ВладелецСтатусов);
	НаборЗаписейОбязательныеСтатусы.Загрузить(РезультатОбязательныеСтатусы);
	
	НачатьТранзакцию();
	
	Попытка
		БлокировкаДанных.Заблокировать();
		
		НаборЗаписей.Записать();
		НаборЗаписейОбязательныеСтатусы.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЕстьОшибкаПриЗаписи = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если НЕ ЕстьОшибкаПриЗаписи Тогда
		Результат.Успех = Истина;
		Модифицированность = Ложь;
		
		ТаблицаОбязательныеСтатусы.ЗаполнитьЗначения(Ложь, "Изменен");
		ОбязательныеСтатусы.Загрузить(ТаблицаОбязательныеСтатусы);
	Иначе
		Результат.Успех = Ложь;
		Результат.ТекстОшибки = ТекстОшибки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоСтатусов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЛОЖЬ КАК Пометка,
	|	РолиПользователей.Ссылка КАК Роль,
	|	РолиПользователей.Наименование КАК Наименование
	|ИЗ
	|	Справочник.РолиПользователей КАК РолиПользователей
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиПереходаСтатусовОбъектов.РольПользователя КАК Роль,
	|	НастройкиПереходаСтатусовОбъектов.ТекущийСтатус КАК ТекущийСтатус,
	|	НастройкиПереходаСтатусовОбъектов.НовыйСтатус КАК НовыйСтатус,
	|	НастройкиПереходаСтатусовОбъектов.Порядок КАК Порядок
	|ПОМЕСТИТЬ НастройкиПереходаСтатусовОбъектов
	|ИЗ
	|	РегистрСведений.НастройкиПереходаСтатусовОбъектов КАК НастройкиПереходаСтатусовОбъектов
	|ГДЕ
	|	НастройкиПереходаСтатусовОбъектов.Объект = &Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиПереходаСтатусовОбъектов.ТекущийСтатус КАК ТекущийСтатус,
	|	НастройкиПереходаСтатусовОбъектов.НовыйСтатус КАК НовыйСтатус,
	|	НастройкиПереходаСтатусовОбъектов.Порядок КАК Порядок
	|ПОМЕСТИТЬ СвязанныеСтатусы
	|ИЗ
	|	НастройкиПереходаСтатусовОбъектов КАК НастройкиПереходаСтатусовОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиПереходаСтатусовОбъектов.Роль КАК Роль,
	|	НастройкиПереходаСтатусовОбъектов.ТекущийСтатус КАК СтатусРодитель,
	|	НастройкиПереходаСтатусовОбъектов.НовыйСтатус КАК ПодчиненныйСтатус
	|ИЗ
	|	НастройкиПереходаСтатусовОбъектов КАК НастройкиПереходаСтатусовОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексКартинки,
	|	СтатусыОбъектов.Ссылка КАК Статус,
	|	СтатусыОбъектов.Наименование КАК Наименование,
	|	СтатусыОбъектов.Порядок КАК Порядок,
	|	ЕСТЬNULL(СвязанныеСтатусы.НовыйСтатус, НЕОПРЕДЕЛЕНО) КАК ПодчиненныйСтатус,
	|	ЕСТЬNULL(ПодчиненныеСтатусыОбъектов.Наименование, """") КАК НаименованиеПодчиненногоСтатуса,
	|	ЕСТЬNULL(ПодчиненныеСтатусыОбъектов.ИндексКартинки, -1) КАК ИндексКартинкиПодчиненногоСтатуса,
	|	ЕСТЬNULL(СвязанныеСтатусы.Порядок, 999) КАК ПорядокПодчиненногоСтатуса
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвязанныеСтатусы КАК СвязанныеСтатусы
	|		ПО СтатусыОбъектов.Ссылка = СвязанныеСтатусы.ТекущийСтатус
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК ПодчиненныеСтатусыОбъектов
	|		ПО (СвязанныеСтатусы.НовыйСтатус = ПодчиненныеСтатусыОбъектов.Ссылка)
	|ГДЕ
	|	НЕ СтатусыОбъектов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	ПорядокПодчиненногоСтатуса
	|ИТОГИ ПО
	|	Статус";
	
	Запрос.УстановитьПараметр("Объект", ВладелецСтатусов);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Формируем таблицу ролей
	ДоступныеРоли.Загрузить(РезультатыЗапроса[0].Выгрузить());
	
	// Выгружаем таблицу ролей статусов
	НастройкиПереходаСтатусов.Загрузить(РезультатыЗапроса[3].Выгрузить());
	
	// Формируем дерево статусов	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоСтатусов", Тип("ДеревоЗначений"));
	ДеревоЗначений.Строки.Очистить();
	
	ВыборкаРодитель = РезультатыЗапроса[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаРодитель.Следующий() Цикл
		НоваяСтрокаРодитель = ДеревоЗначений.Строки.Добавить();
		НоваяСтрокаРодитель.UID = Новый УникальныйИдентификатор;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРодитель, ВыборкаРодитель);
		
		Выборка = ВыборкаРодитель.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.ПодчиненныйСтатус) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = НоваяСтрокаРодитель.Строки.Добавить();
			НоваяСтрока.ИндексКартинки = Выборка.ИндексКартинкиПодчиненногоСтатуса;
			НоваяСтрока.Статус         = Выборка.ПодчиненныйСтатус;
			НоваяСтрока.Наименование   = Выборка.НаименованиеПодчиненногоСтатуса;
			НоваяСтрока.СтатусРодитель = ВыборкаРодитель.Статус;
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "ДеревоСтатусов");
	
	ЗаполнитьОбязательныеСтатусыОбъекта();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступ()
	
	ВладелецЗаполнен = ЗначениеЗаполнено(ВладелецСтатусов);
	
	Элементы.Записать.Доступность         = ВладелецЗаполнен;
	Элементы.ЗаписатьИЗакрыть.Доступность = ВладелецЗаполнен;
	
	Элементы.ДеревоСтатусов.ТолькоПросмотр = НЕ ВладелецЗаполнен;
	Элементы.ДоступныеРоли.ТолькоПросмотр  = НЕ ВладелецЗаполнен;
	
	Если НЕ ВладелецЗаполнен Тогда
		ДеревоСтатусов.ПолучитьЭлементы().Очистить();
		ДоступныеРоли.Очистить();
		НастройкиПереходаСтатусов.Очистить();
		ОбязательныеСтатусы.Очистить();
		ОбязательныеСтатусыПромежуточный.Очистить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
