///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ВнешнееСоединение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает значение настройки для филиала, если настройка не найдена, возвращает Неопределено
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь-владелец настройки
//  Настройка - ПланВидовХарактеристикСсылка.ВидыНастроекПользователя - настройка, значение которой требуется удалить
// 
// Возвращаемое значение:
//  Характеристика.ВидыНастроекПользователя, Неопределено - значение настройки или Неопределено если настройка отсутствует
//
Функция ЗначениеНастройки(Знач Пользователь, Знач Настройка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыНастроекПользователя.ТипЗначения КАК ТипЗначения,
	|	ЕСТЬNULL(НастройкиПользователя.Значение, НЕОПРЕДЕЛЕНО) КАК Значение
	|ИЗ
	|	ПланВидовХарактеристик.ВидыНастроекПользователя КАК ВидыНастроекПользователя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователя КАК НастройкиПользователя
	|		ПО ВидыНастроекПользователя.Ссылка = НастройкиПользователя.Настройка
	|			И (НастройкиПользователя.Пользователь = &Пользователь)
	|ГДЕ
	|	ВидыНастроекПользователя.Ссылка = &Настройка";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Настройка", Настройка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	// Если значение заполнено, возвращаем его.
	// Или же приводим его к стандартному значению (Ложь, "", ПустаяСсылка) - для того чтобы
	// избавиться от лишних проверок в дальнейшем.
	Если ЗначениеЗаполнено(Выборка.Значение) Тогда
		Результат = Выборка.Значение;
	Иначе
		ОписаниеТипов = Новый ОписаниеТипов(Выборка.ТипЗначения);
		Результат = ОписаниеТипов.ПривестиЗначение();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает значения настроек филиала в виде структуры 
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь-владелец настройки
//  Настройки	 - Массив	 - содержит ссылки на виды настроек из ПланВидовХарактеристик.ВидыНастроекПользователя
// 
// Возвращаемое значение:
//  Структура - значения настроек
//		* Ключ	 - Строка	 - имя предопределенных данных настройки
//		* Значение	 - Характеристика.ВидыНастроекФилиала	 - значение настройки или значение по-умолчанию если не заполнена
//
Функция ЗначенияНастроек(Знач Пользователь, Знач Настройки) Экспорт
	
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыНастроекПользователя.ТипЗначения КАК ТипЗначения,
	|	ЕСТЬNULL(НастройкиПользователя.Значение, НЕОПРЕДЕЛЕНО) КАК Значение,
	|	ВидыНастроекПользователя.ИмяПредопределенныхДанных КАК Наименование
	|ИЗ
	|	ПланВидовХарактеристик.ВидыНастроекПользователя КАК ВидыНастроекПользователя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователя КАК НастройкиПользователя
	|		ПО ВидыНастроекПользователя.Ссылка = НастройкиПользователя.Настройка
	|			И (НастройкиПользователя.Пользователь = &Пользователь)
	|ГДЕ
	|	ВидыНастроекПользователя.Ссылка В(&Настройка)";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Настройка", Настройки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// Если значение заполнено, возвращаем его.
			// Или же приводим его к стандартному значению (Ложь, "", ПустаяСсылка) - для того чтобы
			// избавиться от лишних проверок в дальнейшем.
			Если ЗначениеЗаполнено(Выборка.Значение) Тогда
				ЗначениеНастройки = Выборка.Значение;
			Иначе
				ОписаниеТипов = Новый ОписаниеТипов(Выборка.ТипЗначения);
				ЗначениеНастройки = ОписаниеТипов.ПривестиЗначение();
			КонецЕсли;
			
			Наименование = СтрЗаменить(Выборка.Наименование, "ДляБыстрогоСозданияЗадачи", "");
			
			Результат.Вставить(Наименование, ЗначениеНастройки);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сохраняет значение настройки для филиала
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь-владелец настройки
//  Настройка - ПланВидовХарактеристикСсылка.ВидыНастроекПользователя - настройка, значение которой требуется удалить
//  Значение	 - Характеристика.ВидыНастроекПользователя				 - значение настройки
//
Процедура СохранитьНастройку(Знач Пользователь, Знач Настройка, Знач Значение) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Отбор.Настройка.Установить(Настройка);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Пользователь = Пользователь;
	НоваяЗапись.Настройка = Настройка;
	НоваяЗапись.Значение = Значение;
	НоваяЗапись.ДатаИзменения = ТекущаяДатаСеанса();
	НоваяЗапись.Автор = ПараметрыСеанса.ТекущийПользователь;
	
	НачатьТранзакцию();
	
	Попытка
		НаборЗаписей.Записать();				
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("НастройкиПользователя.СохранитьНастройку", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	КонецПопытки;	

КонецПроцедуры

// Сохраняет значения нескольких настроек. Если вторым параметром передан массив,
// то элементами массива должны быть структуры
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь-владелец настройки
//  ТаблицаНастроек	- ТаблицаЗначений, Массив - данные настроек
//		* Настройка - ПланВидовХарактеристикСсылка.ВидыНастроекПользователя - настройка
//		* Значение - Характеристика.ВидыНастроекПользовател	 - значение настройки
//
Процедура СохранитьНастройки(Знач Пользователь, Знач ТаблицаНастроек) Экспорт
	
	Для Каждого Строка Из ТаблицаНастроек Цикл
		СохранитьНастройку(Пользователь, Строка.Настройка, Строка.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Удаляет настройку пользователя
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь-владелец настройки
//  Настройка - ПланВидовХарактеристикСсылка.ВидыНастроекПользователя - настройка, значение которой требуется удалить
//
Процедура УдалитьНастройку(Знач Пользователь, Знач Настройка) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Отбор.Настройка.Установить(Настройка);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры


#КонецОбласти

#КонецЕсли
