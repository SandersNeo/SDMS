///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ВнешнееСоединение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
	
#Область ПрограммныйИнтерфейс

// Выполняет пересчет минимального статуса "Заявки на разработку" на основании
//  всех статусов по группам разработки.
//
// Параметры:
//  Заявка		 - ДокументСсылка.ЗаявкаНаРазработку - ссылка на заявку.
//  СдвигВремени - Число							 - величина сдвига времени в секундах относительно текущей даты сеанса
//
Процедура РассчитатьМинимальныйСтатус(Знач Заявка, Знач СдвигВремени = 0) Экспорт
	
	// Поскольку права у пользователей на этот регистр отсутствуют, нам нужно установить
	// привилегированный режим.
	УстановитьПривилегированныйРежим(Истина);
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.МинимальныеСтатусыЗаявок");
	ЭлементБлокировки.УстановитьЗначение("Заявка", Заявка);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	БлокировкаДанных.Заблокировать();
	
	// Запрос учитывает следующие условия:
	// а) если у документа-заявки заполнен реквизит ФинальныйСтатус, то расчет min
	//    статуса идет исключительно по финальному статусу;
	// б) во всех остальных случаях статус считается как минимальный от всех статусов
	//    из регистра сведений СтатусыЗаявокПоСистемам.	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ЗаявкаНаРазработку.Ссылка КАК Ссылка,
	|	ЗаявкаНаРазработку.ФинальныйСтатус КАК ФинальныйСтатус
	|ПОМЕСТИТЬ ОбрабатываемаяЗаявка
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|ГДЕ
	|	ЗаявкаНаРазработку.Ссылка = &Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыЗаявокПоСистемам.Заявка КАК Заявка,
	|	СтатусыОбъектов.Порядок КАК Порядок,
	|	ВЫБОР СтатусыЗаявокПоСистемам.Статус
	|		КОГДА ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.НаДоработку)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ СтатусЗаявкиПоСистемам
	|ИЗ
	|	ОбрабатываемаяЗаявка КАК ОбрабатываемаяЗаявка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|		ПО ОбрабатываемаяЗаявка.Ссылка = СтатусыЗаявокПоСистемам.Заявка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (СтатусыЗаявокПоСистемам.Статус = СтатусыОбъектов.Ссылка)
	|ГДЕ
	|	ОбрабатываемаяЗаявка.ФинальныйСтатус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусЗаявкиПоСистемам.Заявка КАК Заявка,
	|	МАКСИМУМ(СтатусЗаявкиПоСистемам.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ МаксимальныйПриоритетСтатусов
	|ИЗ
	|	СтатусЗаявкиПоСистемам КАК СтатусЗаявкиПоСистемам
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатусЗаявкиПоСистемам.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусЗаявкиПоСистемам.Заявка КАК Заявка,
	|	МИНИМУМ(СтатусЗаявкиПоСистемам.Порядок) КАК МинимальныйПорядок,
	|	МАКСИМУМ(СтатусЗаявкиПоСистемам.Порядок) КАК МаксимальныйПорядок
	|ПОМЕСТИТЬ МинимальныйМаксимальныйПорядкиСтатусов
	|ИЗ
	|	СтатусЗаявкиПоСистемам КАК СтатусЗаявкиПоСистемам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныйПриоритетСтатусов КАК МаксимальныйПриоритетСтатусов
	|		ПО СтатусЗаявкиПоСистемам.Заявка = МаксимальныйПриоритетСтатусов.Заявка
	|			И СтатусЗаявкиПоСистемам.Приоритет = МаксимальныйПриоритетСтатусов.Приоритет
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатусЗаявкиПоСистемам.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МинимальныйМаксимальныйПорядкиСтатусов.Заявка КАК Заявка,
	|	ВЫБОР
	|		КОГДА МинимальныйМаксимальныйПорядкиСтатусов.МинимальныйПорядок <= &ПорядокСтатусаВРаботе
	|				И МинимальныйМаксимальныйПорядкиСтатусов.МаксимальныйПорядок >= &ПорядокСтатусаВРаботе
	|			ТОГДА &ПорядокСтатусаВРаботе
	|		ИНАЧЕ МинимальныйМаксимальныйПорядкиСтатусов.МинимальныйПорядок
	|	КОНЕЦ КАК Порядок
	|ПОМЕСТИТЬ ИтоговыйПорядокСтатусаЗаявки
	|ИЗ
	|	МинимальныйМаксимальныйПорядкиСтатусов КАК МинимальныйМаксимальныйПорядкиСтатусов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбрабатываемаяЗаявка.Ссылка,
	|	СтатусыОбъектов.Порядок
	|ИЗ
	|	ОбрабатываемаяЗаявка КАК ОбрабатываемаяЗаявка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ОбрабатываемаяЗаявка.ФинальныйСтатус = СтатусыОбъектов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговыйПорядокСтатусаЗаявки.Заявка КАК Заявка,
	|	&ТекущаяДата КАК ДатаИзменения,
	|	СтатусыОбъектов.Ссылка КАК Статус
	|ИЗ
	|	ИтоговыйПорядокСтатусаЗаявки КАК ИтоговыйПорядокСтатусаЗаявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ИтоговыйПорядокСтатусаЗаявки.Порядок = СтатусыОбъектов.Порядок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
	|		ПО ИтоговыйПорядокСтатусаЗаявки.Заявка = МинимальныеСтатусыЗаявок.Заявка
	|ГДЕ
	|	СтатусыОбъектов.Ссылка <> ЕСТЬNULL(МинимальныеСтатусыЗаявок.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ПустаяСсылка))
	|	И СтатусыОбъектов.Предопределенный";
	#КонецОбласти
	
	ПорядокСтатусаВРаботе = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтатусыОбъектов.ВРаботе, "Порядок");
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("ПорядокСтатусаВРаботе", ПорядокСтатусаВРаботе);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаЗаписейДляРегистра = РезультатЗапроса.Выгрузить();
		
		Если ТаблицаЗаписейДляРегистра.Количество() > 0 Тогда
			НаборЗаписей = СоздатьНаборЗаписей();
			
			// В дополнительные свойства набора записей добавлен СдвигВремени.
			// Он используется при добавлении записей в историю, при "теневом"
			// переводе задачи по основным статусам.
			НаборЗаписей.ДополнительныеСвойства.Вставить("СдвигВремени", 0);
			
			НаборЗаписей.Отбор.Заявка.Установить(Заявка);
			НаборЗаписей.Загрузить(ТаблицаЗаписейДляРегистра);
			НаборЗаписей.Записать();
			
			СтатусЗаявки = ТаблицаЗаписейДляРегистра[0].Статус;
			ДатаИзмененияСтатуса = ТаблицаЗаписейДляРегистра[0].ДатаИзменения;
			
			ДатаЗавершения = '00010101';

			Если СтатусЗаявки = Справочники.СтатусыОбъектов.Решен Тогда
				ДатаЗавершения = ДатаИзмененияСтатуса;
				ИнтеграцияДополнительныхПодсистем.НачатьРешениеИнцидента(Заявка);
			КонецЕсли;
			
			// Если заявка преходит в статус "Отклонен", удаляем заявку из очереди на актуализацию
			Если СтатусЗаявки = Справочники.СтатусыОбъектов.Отклонен Тогда
				ДатаЗавершения = ДатаИзмененияСтатуса;
				РегистрыСведений.ДатыАктуальностиЗаявокНаРазработку.УдалитьЗаявку(Заявка);
				ИнтеграцияДополнительныхПодсистем.НачатьРешениеИнцидента(Заявка, Истина);
			КонецЕсли;
				
			// Если заявка является документом для элемента проекта, необходимо изменить статус элемента проекта
			РегистрыСведений.ПланыВыполненияПроектов.ИзменитьСтатусЭлементаПланаПроекта(Заявка, СтатусЗаявки, ДатаЗавершения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Удаляет все записи из регистра по заявке
//
// Параметры:
//  Заявка	 - ДокументСсылка.ЗаявкаНаРазработку	 - ссылка на заявку, данные по которой требуется удалить
//
Процедура УдалитьЗаписиПоЗаявке(Знач Заявка) Экспорт
	
	НаборЗаписей = РегистрыСведений.МинимальныеСтатусыЗаявок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Заявка.Установить(Заявка);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Проверяет принадлежит ли общий статус заявки статусам Отклонен или Решен больше 5 дней.
//
// Параметры:
//  Заявка - ДокументСсылка.ЗаявкаНаРазработку - ссылка на заявку, статус завершенности которой требуется получить
//
// Возвращаемое значение:
//  Булево - статус заявки является завершенным.
//
Функция РаботыПоЗаявкеЗавершены(Заявка) Экспорт
	
	СтатусыЗавершенияЗаявки = Новый Массив;
	
	СтатусыЗавершенияЗаявки.Добавить(Справочники.СтатусыОбъектов.Решен);
	СтатусыЗавершенияЗаявки.Добавить(Справочники.СтатусыОбъектов.Отклонен);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МинимальныеСтатусыЗаявок.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
	|ГДЕ
	|	МинимальныеСтатусыЗаявок.Заявка = &Заявка
	|	И МинимальныеСтатусыЗаявок.Статус В(&Статусы)
	|	И РАЗНОСТЬДАТ(КОНЕЦПЕРИОДА(МинимальныеСтатусыЗаявок.ДатаИзменения, ДЕНЬ), КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ), ДЕНЬ) > 5";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("Статусы", СтатусыЗавершенияЗаявки);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти	
	
#КонецЕсли
