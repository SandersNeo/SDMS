///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура АктуализироватьОчередь() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередьКанбан.Объект КАК Объект,
	|	ОчередьКанбан.КлючОчередиОбъекта КАК КлючОчередиОбъекта
	|ПОМЕСТИТЬ Объекты
	|ИЗ
	|	РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО ОчередьКанбан.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|			И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Канбан))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана КАК ЭтапыКанбана
	|		ПО (ЭтапыКанбана.Ссылка = КлючОчереди.ЭтапКанбана)
	|			И (ЭтапыКанбана.ТипКанбана = ЗНАЧЕНИЕ(Перечисление.ТипыКанбана.ЗадачаНовый))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана.ЭлементыЭтапа КАК ЭтапыКанбанаЭлементыЭтапа
	|		ПО (ЭтапыКанбанаЭлементыЭтапа.Ссылка = ЭтапыКанбана.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО ((ВЫРАЗИТЬ(ОчередьКанбан.Объект КАК Документ.Задача)) = ДокументЗадача.Ссылка)
	|			И (КлючОчереди.Филиал = ДокументЗадача.Филиал)
	|			И (ЭтапыКанбанаЭлементыЭтапа.Элемент <> ДокументЗадача.Статус)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОчередьКанбан.Объект,
	|	ОчередьКанбан.КлючОчередиОбъекта
	|ИЗ
	|	РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО ОчередьКанбан.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|			И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Канбан))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана КАК ЭтапыКанбана
	|		ПО (ЭтапыКанбана.Ссылка = КлючОчереди.ЭтапКанбана)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КарточкаКанбан КАК КарточкаКанбан
	|		ПО ((ВЫРАЗИТЬ(ОчередьКанбан.Объект КАК Справочник.КарточкаКанбан)) = КарточкаКанбан.Ссылка)
	|			И (КлючОчереди.Филиал = КарточкаКанбан.Владелец)
	|			И (КарточкаКанбан.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОчередьКанбан.Объект,
	|	ОчередьКанбан.КлючОчередиОбъекта
	|ИЗ
	|	РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО ОчередьКанбан.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|			И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Канбан))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана КАК ЭтапыКанбана
	|		ПО (ЭтапыКанбана.Ссылка = КлючОчереди.ЭтапКанбана)
	|			И (ЭтапыКанбана.ТипКанбана = ЗНАЧЕНИЕ(Перечисление.ТипыКанбана.ВнутреннееЗаданиеНовый))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана.ЭлементыЭтапа КАК ЭтапыКанбанаЭлементыЭтапа
	|		ПО (ЭтапыКанбанаЭлементыЭтапа.Ссылка = ЭтапыКанбана.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееЗадание КАК ДокументВнутреннееЗадание
	|		ПО ((ВЫРАЗИТЬ(ОчередьКанбан.Объект КАК Документ.ВнутреннееЗадание)) = ДокументВнутреннееЗадание.Ссылка)
	|			И (КлючОчереди.Филиал = ДокументВнутреннееЗадание.Филиал)
	|			И (ЭтапыКанбанаЭлементыЭтапа.Элемент <> ДокументВнутреннееЗадание.Статус)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Объекты.КлючОчередиОбъекта КАК КлючОчередиОбъекта
	|ИЗ
	|	Объекты КАК Объекты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОчередьКанбан.КлючОчередиОбъекта
	|ИЗ
	|	РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ОчередьКанбан.Объект) = ТИП(Справочник.КарточкаКанбан)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОчередьКанбан.КлючОчередиОбъекта
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОчередьКанбан.Объект) <> МАКСИМУМ(ОчередьКанбан.Порядок)";
	
	РезультатПакеты = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	Если РезультатПакеты[0].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОчередьКанбан");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатПакеты[0];
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Объект", "Объект");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КлючОчередиОбъекта", "КлючОчередиОбъекта");
	
	Выборка = РезультатПакеты[0].Выбрать();

	НачатьТранзакцию();
	Попытка      
		БлокировкаДанных.Заблокировать();
		НаборЗаписей = СоздатьНаборЗаписей();
		
		Пока Выборка.Следующий() Цикл			
			НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
			НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(Выборка.КлючОчередиОбъекта);
			
			НаборЗаписей.Записать();
			НаборЗаписей.Очистить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации("Удаление обектов из очереди", УровеньЖурналаРегистрации.Ошибка, , ,
				"При актуализации очереди канбан возникла ошибка: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;

	ВыборкаКлючи = РезультатПакеты[1].Выбрать();
	
	Пока ВыборкаКлючи.Следующий() Цикл
		ПересчетОчереди(ВыборкаКлючи.КлючОчередиОбъекта);	
	КонецЦикла;
	
КонецПроцедуры	

// Процедура - Вставляет задачу в очередь на определенную позицию и смещает все последующие
//
// Параметры:
//  Задача		 - ДокументСсылка.Задача	 - задача, которую нужно добавить в очередь
//  КлючОчереди	 - СправочникСсылка.КлючОчереди	
//  Порядок		 - Число - нужная позиция в очереди
//
Процедура ВставитьВОчередь(Знач Объект, Знач КлючОчереди, Знач Порядок) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередьКанбан.Объект КАК Объект,
	|	ОчередьКанбан.КлючОчередиОбъекта КАК КлючОчереди
	|ИЗ
	|	РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|ГДЕ
	|	ОчередьКанбан.КлючОчередиОбъекта = &КлючОчереди
	|	И ОчередьКанбан.Порядок >= &Порядок";
	
	Запрос.УстановитьПараметр("КлючОчереди", КлючОчереди);
	Запрос.УстановитьПараметр("Порядок", Порядок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = СоздатьНаборЗаписей();
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОчередьКанбан");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("КлючОчередиОбъекта", КлючОчереди);
		
	НачатьТранзакцию();
	БлокировкаДанных.Заблокировать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(Выборка.КлючОчереди);
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 1 Тогда
			НаборЗаписей[0].Порядок = НаборЗаписей[0].Порядок + 1;
		КонецЕсли;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
		
		НаборЗаписей.Очистить();
	КонецЦикла;	
	
	НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(КлючОчереди);
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Объект = Объект;
	НоваяЗапись.КлючОчередиОбъекта = КлючОчереди;
	НоваяЗапись.Порядок = Порядок;
	НоваяЗапись.ДатаДобавления = ТекущаяДатаСеанса();
	НоваяЗапись.Автор = ПараметрыСеанса.ТекущийПользователь;
	
	Попытка
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

// Добавляет объект в очередь
//
// Параметры:
//  Объект		 - ДокументСсылка.Задача, ДокументСсылка.ВнутреннееЗадание	 - 
//  ВидОчереди	 - ВидыОчереди	 - вид очереди в которую необходимо поставить задачу
//
Процедура Добавить(Знач Объект, Знач ВидОчереди, Знач ЭтапКанбана, Знач Филиал = Неопределено) Экспорт
	
	КлючОчереди = Справочники.КлючОчереди.ПолучитьКлючОчереди(Объект, ВидОчереди, ЭтапКанбана, Филиал);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ОчередьКанбан.Порядок), 0) КАК Порядок
	|ИЗ
	|	РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|ГДЕ
	|	ОчередьКанбан.КлючОчередиОбъекта = &КлючОчереди"; 
	
	Запрос.УстановитьПараметр("КлючОчереди", КлючОчереди);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	НовыйПорядок = Выборка.Порядок + 1;
	
	НоваяЗапись = СоздатьМенеджерЗаписи();
	НоваяЗапись.Объект = Объект;
	НоваяЗапись.КлючОчередиОбъекта = КлючОчереди;
	НоваяЗапись.Порядок = НовыйПорядок;
	НоваяЗапись.ДатаДобавления = ТекущаяДатаСеанса();
	НоваяЗапись.Автор = ПараметрыСеанса.ТекущийПользователь;
	
	НоваяЗапись.Записать();
	
КонецПроцедуры

// Процедура - Заменяет этапы в ключе очереди при смене процесса филиала
//
// Параметры:
//  Филиал		 - СправочникСсылка.Филиал
//  ТипКанбана	 - ПеречислениеСсылка.ТипыКанбана
//
Процедура ЗаменитьЭтапыВОчереди(Знач Филиал, Знач ТипКанбана) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПорядокЭтаповКанбана.Этап КАК Этап,
	|	ЭтапыКанбанаЭлементыЭтапа.Элемент КАК Статус
	|ПОМЕСТИТЬ НовыеЭтапы
	|ИЗ
	|	РегистрСведений.ПорядокЭтаповКанбана КАК ПорядокЭтаповКанбана
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана КАК ЭтапыКанбана
	|		ПО ПорядокЭтаповКанбана.Этап = ЭтапыКанбана.Ссылка
	|			И (ПорядокЭтаповКанбана.Филиал = &Филиал)
	|			И (ЭтапыКанбана.ТипКанбана = &ТипКанбана)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана.ЭлементыЭтапа КАК ЭтапыКанбанаЭлементыЭтапа
	|		ПО (ЭтапыКанбанаЭлементыЭтапа.Ссылка = ЭтапыКанбана.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КлючОчереди.Ссылка КАК КлючОчереди,
	|	ЭтапыКанбана.Ссылка КАК Этап,
	|	ЕСТЬNULL(НовыеЭтапы.Этап, НЕОПРЕДЕЛЕНО) КАК НовыйЭтап
	|ИЗ
	|	РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО ОчередьКанбан.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|			И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Канбан))
	|			И (КлючОчереди.Филиал = &Филиал)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана КАК ЭтапыКанбана
	|		ПО (КлючОчереди.ЭтапКанбана = ЭтапыКанбана.Ссылка)
	|			И (ЭтапыКанбана.ТипКанбана = &ТипКанбана)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана.ЭлементыЭтапа КАК ЭтапыКанбанаЭлементыЭтапа
	|		ПО (ЭтапыКанбанаЭлементыЭтапа.Ссылка = ЭтапыКанбана.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеЭтапы КАК НовыеЭтапы
	|		ПО (НовыеЭтапы.Статус = ЭтапыКанбанаЭлементыЭтапа.Элемент)";
	
	Запрос.УстановитьПараметр("Филиал", Филиал);
	Запрос.УстановитьПараметр("ТипКанбана", ТипКанбана);
	
	НаборЗаписей = РегистрыСведений.ОчередьКанбан.СоздатьНаборЗаписей();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.НовыйЭтап) Тогда
			ОбъектКлюч = Выборка.КлючОчереди.ПолучитьОбъект();
			ОбъектКлюч.ЭтапКанбана = Выборка.НовыйЭтап;
			ОбъектКлюч.Записать();
		Иначе
			НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(Выборка.КлючОчереди);
			НаборЗаписей.Записать();
			НаборЗаписей.Очистить();
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбработатьОбъектВОчередиКанбана(Знач Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументЗадача.Ссылка КАК Ссылка,
	|	ДокументЗадача.Статус КАК Статус,
	|	ЭтапыКанбанаЭлементыЭтапа.Ссылка КАК Этап,
	|	ДокументЗадача.Филиал КАК Филиал
	|ПОМЕСТИТЬ ВыбранныйОбъект
	|ИЗ
	|	Документ.Задача КАК ДокументЗадача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО ДокументЗадача.Филиал = Филиалы.Ссылка
	|			И (Филиалы.ТипФилиала <> ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.НеIT))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокЭтаповКанбана КАК ПорядокЭтаповКанбана
	|		ПО (ПорядокЭтаповКанбана.Филиал = Филиалы.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана КАК ЭтапыКанбана
	|		ПО (ПорядокЭтаповКанбана.Этап = ЭтапыКанбана.Ссылка)
	|			И (ЭтапыКанбана.ТипКанбана = ЗНАЧЕНИЕ(Перечисление.ТипыКанбана.ЗадачаНовый))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана.ЭлементыЭтапа КАК ЭтапыКанбанаЭлементыЭтапа
	|		ПО ДокументЗадача.Статус = ЭтапыКанбанаЭлементыЭтапа.Элемент
	|			И (ПорядокЭтаповКанбана.Этап = ЭтапыКанбанаЭлементыЭтапа.Ссылка)
	|ГДЕ
	|	ДокументЗадача.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументВнутреннееЗадание.Ссылка,
	|	ДокументВнутреннееЗадание.Статус,
	|	ЭтапыКанбанаЭлементыЭтапа.Ссылка,
	|	ДокументВнутреннееЗадание.Филиал
	|ИЗ
	|	Документ.ВнутреннееЗадание КАК ДокументВнутреннееЗадание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО ДокументВнутреннееЗадание.Филиал = Филиалы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокЭтаповКанбана КАК ПорядокЭтаповКанбана
	|		ПО (ПорядокЭтаповКанбана.Филиал = Филиалы.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана КАК ЭтапыКанбана
	|		ПО (ПорядокЭтаповКанбана.Этап = ЭтапыКанбана.Ссылка)
	|			И (ЭтапыКанбана.ТипКанбана = ЗНАЧЕНИЕ(Перечисление.ТипыКанбана.ВнутреннееЗаданиеНовый))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана.ЭлементыЭтапа КАК ЭтапыКанбанаЭлементыЭтапа
	|		ПО ДокументВнутреннееЗадание.Статус = ЭтапыКанбанаЭлементыЭтапа.Элемент
	|			И (ПорядокЭтаповКанбана.Этап = ЭтапыКанбанаЭлементыЭтапа.Ссылка)
	|ГДЕ
	|	ДокументВнутреннееЗадание.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыбранныйОбъект.Этап КАК Этап,
	|	ВыбранныйОбъект.Филиал КАК Филиал
	|ИЗ
	|	ВыбранныйОбъект КАК ВыбранныйОбъект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|			ПО ОчередьКанбан.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|				И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Канбан))
	|		ПО ВыбранныйОбъект.Ссылка = ОчередьКанбан.Объект
	|			И (КлючОчереди.ЭтапКанбана = ВыбранныйОбъект.Этап)
	|			И (КлючОчереди.Филиал = ВыбранныйОбъект.Филиал)
	|ГДЕ
	|	ОчередьКанбан.Объект ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОчередьКанбан.КлючОчередиОбъекта КАК КлючОчереди
	|ИЗ
	|	РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО ОчередьКанбан.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|			И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Канбан))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВыбранныйОбъект КАК ВыбранныйОбъект
	|		ПО (ВыбранныйОбъект.Ссылка = ОчередьКанбан.Объект)
	|			И (КлючОчереди.ЭтапКанбана <> ВыбранныйОбъект.Этап)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОчередьКанбан.КлючОчередиОбъекта
	|ИЗ
	|	РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО ОчередьКанбан.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|			И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Канбан))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВыбранныйОбъект КАК ВыбранныйОбъект
	|		ПО (ВыбранныйОбъект.Ссылка = ОчередьКанбан.Объект)
	|			И (КлючОчереди.Филиал <> ВыбранныйОбъект.Филиал)";
	
	Запрос.УстановитьПараметр("Ссылка", Объект);
	
	РезультатПакеты = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатПакеты.ВГраница();
	
	Если НЕ РезультатПакеты[КоличествоПакетов - 1].Пустой() Тогда
		Выборка = РезультатПакеты[КоличествоПакетов - 1].Выбрать();
		Выборка.Следующий();
		
		Добавить(Объект, Перечисления.ВидыОчереди.Канбан, Выборка.Этап, Выборка.Филиал);
	КонецЕсли;
	
	Если НЕ РезультатПакеты[КоличествоПакетов].Пустой() Тогда
		ВыборкаУдаление = РезультатПакеты[КоличествоПакетов].Выбрать();
		
		Пока ВыборкаУдаление.Следующий() Цикл
			Попытка
				УдалитьИзОчереди(Объект, ВыборкаУдаление.КлючОчереди);
			Исключение  			
				ИмяСобытия = "ОчередьСобытийНаОбработку.ОбработатьОбъектЭтапаКанбана.УдалитьИзОчереди";
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, ,
					Объект, "Не удалось удалить по причине: " + ТекстОшибки);			
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьЗавершенныеЗадачиИзОчереди() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОчередьКанбан.Объект КАК Объект,
	|	ОчередьКанбан.КлючОчередиОбъекта КАК КлючОчередиОбъекта
	|ПОМЕСТИТЬ ОбъектыДляУдаления
	|ИЗ
	|	РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО ОчередьКанбан.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|			И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Канбан))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана КАК ЭтапыКанбана
	|		ПО (КлючОчереди.ЭтапКанбана = ЭтапыКанбана.Ссылка)
	|			И (КлючОчереди.ЭтапКанбана.ТипКанбана = ЗНАЧЕНИЕ(Перечисление.ТипыКанбана.ЗадачаНовый))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана.ЭлементыЭтапа КАК ЭтапыКанбанаЭлементыЭтапа
	|		ПО (ЭтапыКанбанаЭлементыЭтапа.Ссылка = ЭтапыКанбана.Ссылка)
	|			И (ЭтапыКанбанаЭлементыЭтапа.Элемент В (&ЗавершающиеСтатусы))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО ОчередьКанбан.Объект = ДокументЗадача.Ссылка
	|			И (КлючОчереди.Филиал = ДокументЗадача.Филиал)
	|			И (ДокументЗадача.ДатаЗакрытия < ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, -14))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОчередьКанбан.Объект,
	|	ОчередьКанбан.КлючОчередиОбъекта
	|ИЗ
	|	РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО ОчередьКанбан.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|			И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Канбан))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана КАК ЭтапыКанбана
	|		ПО (КлючОчереди.ЭтапКанбана = ЭтапыКанбана.Ссылка)
	|			И (КлючОчереди.ЭтапКанбана.ТипКанбана = ЗНАЧЕНИЕ(Перечисление.ТипыКанбана.ВнутреннееЗаданиеНовый))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана.ЭлементыЭтапа КАК ЭтапыКанбанаЭлементыЭтапа
	|		ПО (ЭтапыКанбанаЭлементыЭтапа.Ссылка = ЭтапыКанбана.Ссылка)
	|			И (ЭтапыКанбанаЭлементыЭтапа.Элемент В (&ЗавершающиеСтатусы))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееЗадание КАК ДокументВнутреннееЗадание
	|		ПО ОчередьКанбан.Объект = ДокументВнутреннееЗадание.Ссылка
	|			И (КлючОчереди.Филиал = ДокументВнутреннееЗадание.Филиал)
	|			И (ДокументВнутреннееЗадание.ДатаЗакрытия < ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, -14))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыДляУдаления.КлючОчередиОбъекта КАК КлючОчередиОбъекта
	|ИЗ
	|	ОбъектыДляУдаления КАК ОбъектыДляУдаления";
	
	ЗавершающиеСтатусы = Новый Массив;
	ЗавершающиеСтатусы.Добавить(Справочники.СтатусыОбъектов.Решен);
	ЗавершающиеСтатусы.Добавить(Справочники.СтатусыОбъектов.Отклонен);
	
	Запрос.УстановитьПараметр("ЗавершающиеСтатусы", ЗавершающиеСтатусы);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатПакеты = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОчередьКанбан");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатПакеты[0];
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Объект", "Объект");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КлючОчередиОбъекта", "КлючОчередиОбъекта");
	
	Выборка = РезультатПакеты[0].Выбрать();
	НаборЗаписей = СоздатьНаборЗаписей();

	НачатьТранзакцию();
	Попытка      
		БлокировкаДанных.Заблокировать();
		
		Пока Выборка.Следующий() Цикл
			НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
			НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(Выборка.КлючОчередиОбъекта);
			
			НаборЗаписей.Записать();
			НаборЗаписей.Очистить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации("Удаление завершенных задач из очереди", УровеньЖурналаРегистрации.Ошибка, , ,
				"При удалении задач из очереди возникла ошибка: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ВыборкаКлючи = РезультатПакеты[1].Выбрать();
	
	Пока ВыборкаКлючи.Следующий() Цикл
		ПересчетОчереди(ВыборкаКлючи.КлючОчередиОбъекта);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьИзОчереди(Знач Объект, Знач КлючОчереди) Экспорт
	
	НаборЗаписей = РегистрыСведений.ОчередьКанбан.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект);
	НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(КлючОчереди);
	НаборЗаписей.Записать();
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обновление порядков задач очереди
Процедура ПересчетОчереди(КлючОчереди)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОчередьКанбан.Объект КАК Объект,
	|	ОчередьКанбан.КлючОчередиОбъекта КАК КлючОчередиОбъекта,
	|	ОчередьКанбан.Порядок КАК Порядок,
	|	ОчередьКанбан.ДатаДобавления КАК ДатаДобавления,
	|	ОчередьКанбан.ДатаИзменения КАК ДатаИзменения,
	|	ОчередьКанбан.Автор КАК Автор
	|ИЗ
	|	РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|ГДЕ
	|	ОчередьКанбан.КлючОчередиОбъекта = &КлючОчереди
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	ДатаДобавления";
	
	Запрос.УстановитьПараметр("КлючОчереди", КлючОчереди);

	Выборка = Запрос.Выполнить().Выбрать();

	НаборЗаписей = СоздатьНаборЗаписей();
	
	НовыйПорядок = 1;
	
	Пока Выборка.Следующий() Цикл		
		НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(Выборка.КлючОчередиОбъекта);
		НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
		НаборЗаписей.Прочитать();
		
		НаборЗаписей[0].Порядок = НовыйПорядок;
		НовыйПорядок = НовыйПорядок + 1;
		Попытка
			НаборЗаписей.Записать();
			НаборЗаписей.Очистить();
		Исключение
			ТекстКомментария = СтрШаблон("Не удалось пересчитать очередь канбан по причине:
			|%1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации("Очередь канбан", УровеньЖурналаРегистрации.Ошибка, , , ТекстКомментария);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
