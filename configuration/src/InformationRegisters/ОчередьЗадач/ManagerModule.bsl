///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура УдалитьИзОчереди(Знач Задача, Знач ВидОчереди) Экспорт
	
	БлокировкаДанных = Новый БлокировкаДанных;   
	КлючОчереди = Справочники.КлючОчереди.ПолучитьКлючОчереди(Задача, ВидОчереди);
		
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОчередьЗадач");
	ЭлементБлокировки.УстановитьЗначение("Задача", Задача);
	ЭлементБлокировки.УстановитьЗначение("КлючОчередиОбъекта", КлючОчереди);
	
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	БлокировкаДанных.Заблокировать();
	
	НаборЗаписей = РегистрыСведений.ОчередьЗадач.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Задача.Установить(Задача);
	НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(КлючОчереди);
	НаборЗаписей.Записать();
	
	Если ВидОчереди = Перечисления.ВидыОчереди.ОчередьВТестировании Тогда
		ПересчетОчередиЗадачВТестировании();
	КонецЕсли;
	
КонецПроцедуры

// Добавляет задачу в очередь
//
// Параметры:
//  Задача		 - Задача	 - 
//  ВидОчереди	 - ВидыОчереди	 - вид очереди в которую необходимо поставить задачу
//
Процедура Добавить(Знач Задача, Знач ВидОчереди) Экспорт
	
	КлючОчереди = Справочники.КлючОчереди.ПолучитьКлючОчереди(Задача, ВидОчереди);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ОчередьЗадач.Порядок), 0) КАК Порядок
	|ИЗ
	|	РегистрСведений.ОчередьЗадач КАК ОчередьЗадач
	|ГДЕ
	|	ОчередьЗадач.КлючОчередиОбъекта = &КлючОчереди
	|	И НЕ ОчередьЗадач.УбранИзОчереди"; 
	
	Запрос.УстановитьПараметр("КлючОчереди", КлючОчереди);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	НовыйПорядок = Выборка.Порядок + 1;
	
	НоваяЗапись = СоздатьМенеджерЗаписи();
	НоваяЗапись.Задача         = Задача;
	НоваяЗапись.КлючОчередиОбъекта 	   = КлючОчереди;
	НоваяЗапись.Порядок        = НовыйПорядок;
	НоваяЗапись.Зафиксирован   = Ложь;
	НоваяЗапись.ДатаДобавления = ТекущаяДатаСеанса();
	
	Попытка
		НоваяЗапись.Записать();
	Исключение
		Сообщить("Не удалось добавить задачу в очередь" + Строка(ВидОчереди));
	КонецПопытки;
	
КонецПроцедуры

Процедура ВернутьВОчередь(Знач Задача) Экспорт
	
	КлючОчереди = Справочники.КлючОчереди.ПолучитьКлючОчереди(Задача, Перечисления.ВидыОчереди.ОчередьВТестировании);
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Задача.Установить(Задача);
	НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(КлючОчереди);
	НаборЗаписей.Прочитать();
	
	НаборЗаписей[0].УбранИзОчереди = Ложь;
	НаборЗаписей[0].ДатаИзменения = ТекущаяДатаСеанса();
	
	НаборЗаписей.Записать();
	
	ПересчетОчередиЗадачВТестировании();
	
КонецПроцедуры

Процедура УбратьИзОчереди(Знач Задача) Экспорт
	
	КлючОчереди = Справочники.КлючОчереди.ПолучитьКлючОчереди(Задача, Перечисления.ВидыОчереди.ОчередьВТестировании);
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Задача.Установить(Задача);
	НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(КлючОчереди);
	НаборЗаписей.Прочитать();
	
	НаборЗаписей[0].УбранИзОчереди = Истина;
	НаборЗаписей[0].ДатаИзменения = ТекущаяДатаСеанса();
	
	НаборЗаписей.Записать();
	
	ПересчетОчередиЗадачВТестировании();
	
КонецПроцедуры

// Добавляет задачу в очередь на тестирование
//
// Параметры:
//  Задача - ссылка на задачу, которую надо добавить в очередь 
//
Процедура ДобавитьЗадачуВОчередьТестирования(Знач Задача) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументЗадача.Ссылка КАК Ссылка,
	|	ДокументЗадача.Статус КАК Статус,
	|	ДокументЗадача.Назначена КАК Назначена,
	|	ДокументЗадача.СистемаУчета КАК СистемаУчета
	|ПОМЕСТИТЬ ВыбраннаяЗадача
	|ИЗ
	|	Документ.Задача КАК ДокументЗадача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СистемыУчета КАК СистемыУчета
	|		ПО ДокументЗадача.СистемаУчета = СистемыУчета.Ссылка
	|			И (СистемыУчета.Тестируемая)
	|ГДЕ
	|	ДокументЗадача.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыбраннаяЗадача.Назначена = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК ТребуетсяДобавитьВОчередь,
	|	ВЫБОР
	|		КОГДА ОчередьЗадачВТестировании.Задача ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СуществуетЗаписьВОчереди,
	|	ЕСТЬNULL(ОчередьЗадачВТестировании.УбранИзОчереди, ЛОЖЬ) КАК УбранИзОчереди,
	|	ВыбраннаяЗадача.СистемаУчета КАК СистемаУчета
	|ИЗ
	|	ВыбраннаяЗадача КАК ВыбраннаяЗадача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ВыбраннаяЗадача.Статус = СтатусыОбъектов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьЗадач КАК ОчередьЗадачВТестировании
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|			ПО ОчередьЗадачВТестировании.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|				И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ОчередьВТестировании))
	|		ПО ВыбраннаяЗадача.Ссылка = ОчередьЗадачВТестировании.Задача";
	
	Запрос.УстановитьПараметр("Ссылка", Задача);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать(); 
		Выборка.Следующий();
		
		Если Выборка.ТребуетсяДобавитьВОчередь Тогда
			
			Если НЕ Выборка.СуществуетЗаписьВОчереди Тогда
				Добавить(Задача, Перечисления.ВидыОчереди.ОчередьВТестировании);
				РегистрыСведений.ОчередьСобытийНаОбработку.ОтправитьОповещениеПоТестируемымСистемам(Задача, Выборка.СистемаУчета);
				
			ИначеЕсли Выборка.УбранИзОчереди Тогда
				ВернутьВОчередь(Задача);
				РегистрыСведений.ОчередьСобытийНаОбработку.ОтправитьОповещениеПоТестируемымСистемам(Задача, Выборка.СистемаУчета);
			КонецЕсли;
			
		ИначеЕсли Выборка.СуществуетЗаписьВОчереди И НЕ Выборка.УбранИзОчереди Тогда
			УбратьИзОчереди(Задача);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Удаляет задачу из очереди на тестирование
//
// Параметры:
//  Задача - ДокументСсылка.Задача - ссылка на задачу, которую надо удалить из очереди 
//
Процедура УдалитьЗадачуИзОчередиТестирования(Знач Задача) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ОчередьЗадачВТестировании.Задача ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СуществуетЗаписьВОчереди,
	|	ЕСТЬNULL(ОчередьЗадачВТестировании.УбранИзОчереди, ЛОЖЬ) КАК УбранИзОчереди
	|ИЗ
	|	Документ.Задача КАК ДокументЗадача
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьЗадач КАК ОчередьЗадачВТестировании
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|			ПО ОчередьЗадачВТестировании.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|				И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ОчередьВТестировании))
	|		ПО ДокументЗадача.Ссылка = ОчередьЗадачВТестировании.Задача
	|ГДЕ
	|	ДокументЗадача.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Задача);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать(); 
		Выборка.Следующий();
		
		Если Выборка.СуществуетЗаписьВОчереди И НЕ Выборка.УбранИзОчереди Тогда
			УбратьИзОчереди(Задача);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Фиксирует задачу в очереди
Функция Зафиксировать(Знач Задача, Знач ВидОчереди) Экспорт
	
	Результат = Истина;
	КлючОчереди = Справочники.КлючОчереди.ПолучитьКлючОчереди(Задача, ВидОчереди);
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Задача.Установить(Задача);
	НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(КлючОчереди);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 1 Тогда 
		НаборЗаписей.Получить(0).Зафиксирован = НЕ НаборЗаписей.Получить(0).Зафиксирован;
		Попытка
			НаборЗаписей.Записать();
									 
		Исключение
			Сообщить("Не удалось зафиксировать\снять фиксацию задачи в очереди тестирования.");
			Результат = Ложь;
		КонецПопытки;
	Иначе
		Сообщить("Задача не найдена в очереди тестирования.");
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Изменяет порядок задачи в очереди тестирования
Функция ИзменитьПорядок(Знач Задача, Знач НовыйПорядок, Знач ВидОчереди) Экспорт
		
	Результат = Истина;
	КлючОчереди = Справочники.КлючОчереди.ПолучитьКлючОчереди(Задача, ВидОчереди);
	
	// Определение текущего порядка задачи
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередьЗадач.Порядок КАК СтарыйПорядок
	|ИЗ
	|	РегистрСведений.ОчередьЗадач КАК ОчередьЗадач
	|ГДЕ
	|	ОчередьЗадач.Задача = &Задача
	|	И ОчередьЗадач.КлючОчередиОбъекта = &КлючОчереди";
	
	Запрос.УстановитьПараметр("Задача", Задача);
	Запрос.УстановитьПараметр("КлючОчереди", КлючОчереди);
 
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		СтарыйПорядок = Выборка.СтарыйПорядок;
	КонецЕсли;
	
	Если СтарыйПорядок = НовыйПорядок Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Определение направления перемещения
	ПеремещениеВверх = (СтарыйПорядок > НовыйПорядок);
	
	// Получение всех элементов между указанными порядками
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередьЗадач.Задача КАК Задача,
	|	ОчередьЗадач.КлючОчередиОбъекта КАК КлючОчередиОбъекта,
	|	ОчередьЗадач.Порядок КАК Порядок,
	|	ОчередьЗадач.Заблокирован КАК Заблокирован,
	|	ОчередьЗадач.Зафиксирован КАК Зафиксирован,
	|	ОчередьЗадач.ДатаДобавления КАК ДатаДобавления,
	|	ОчередьЗадач.ДатаИзменения КАК ДатаИзменения,
	|	ОчередьЗадач.Система КАК Система,
	|	ОчередьЗадач.Направление КАК Направление,
	|	ОчередьЗадач.Пользователь КАК Пользователь,
	|	ОчередьЗадач.УбранИзОчереди КАК УбранИзОчереди
	|ИЗ
	|	РегистрСведений.ОчередьЗадач КАК ОчередьЗадач
	|ГДЕ
	|	ОчередьЗадач.КлючОчередиОбъекта = &КлючОчереди
	|	И ОчередьЗадач.Порядок МЕЖДУ &Порядок1 И &Порядок2
	|	И НЕ ОчередьЗадач.Зафиксирован
	|	И НЕ ОчередьЗадач.УбранИзОчереди
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОчередьЗадач.Порядок";
	
	Запрос.УстановитьПараметр("Порядок2", ?(ПеремещениеВверх, СтарыйПорядок, НовыйПорядок));
	Запрос.УстановитьПараметр("Порядок1", ?(ПеремещениеВверх, НовыйПорядок, СтарыйПорядок));
	Запрос.УстановитьПараметр("КлючОчереди", КлючОчереди);
	
	// Помещение в таблицу значений
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	
	// Выгружаем в массив колонку порядока
	КолонкаПорядок = ТаблицаЗначений.ВыгрузитьКолонку("Порядок");
	
	// Создаем новый массив, который будет хранить измененный порядок
	КолонкаПорядокНовый = Новый Массив;
	
	Если ПеремещениеВверх Тогда		
		// Переписываем в новый массив все значения порядков кроме первого
		Для Индекс = 1 По КолонкаПорядок.Количество() - 1 Цикл
			КолонкаПорядокНовый.Добавить(КолонкаПорядок[Индекс]);
		КонецЦикла;
		// Добавление первого значения в конец массива
		КолонкаПорядокНовый.Добавить(КолонкаПорядок[0]);
	Иначе
		// Добавление последнего значения в начало массива
		КолонкаПорядокНовый.Добавить(КолонкаПорядок[КолонкаПорядок.Количество() - 1]);
		
		// Далее, переписываем индексы остальных строк без изменения
		Для Индекс = 0 По КолонкаПорядок.Количество() - 2 Цикл
			КолонкаПорядокНовый.Добавить(КолонкаПорядок[Индекс]);
		КонецЦикла;
	КонецЕсли;
	
	// Загружаем сформированню колонку обратно
	ТаблицаЗначений.ЗагрузитьКолонку(КолонкаПорядокНовый, "Порядок");
	
	// Запись в базу
	НачатьТранзакцию();
	Попытка
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(КлючОчереди);
		
		Для Каждого Строка Из ТаблицаЗначений Цикл
			НаборЗаписей.Отбор.Задача.Установить(Строка.Задача);
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Строка);
			НаборЗаписей.Записать();
			НаборЗаписей.Очистить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Сообщить("Не удалось изменить порядок задачи в очереди тестирования.");
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура - Пересчет очереди
// Производит пересчет общей очереди
Процедура ПересчетОчереди() Экспорт
	
	ЗаписьЖурналаРегистрации("Пересчет очереди задач", УровеньЖурналаРегистрации.Информация, , ,
		"Запуск процедуры ""Пересчет очереди задач по направлениям""");	
	
	НачатьТранзакцию();
	
	// Регистр нужен монопольно
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОчередьЗадач");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	БлокировкаДанных.Заблокировать();
	
	Попытка
		// Удалим из очереди задачи, которые находятся в статусе "Отклонена" или "Решена"
		ЗаписьЖурналаРегистрации("Пересчет очереди задач", УровеньЖурналаРегистрации.Информация, , ,
			"Удаление из очереди задач со статусами ""Отклонен"" и ""Решен""");
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОчередьЗадач.Задача КАК Задача,
		|	ОчередьЗадач.КлючОчередиОбъекта КАК КлючОчередиОбъекта
		|ИЗ
		|	РегистрСведений.ОчередьЗадач КАК ОчередьЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
		|		ПО ОчередьЗадач.Задача = ДокументЗадача.Ссылка
		|ГДЕ
		|	ДокументЗадача.Статус В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен))";
		
		Выборка = Запрос.Выполнить().Выбрать();
		НаборЗаписей = СоздатьНаборЗаписей();
		
		Пока Выборка.Следующий() Цикл
			НаборЗаписей.Отбор.Задача.Установить(Выборка.Задача);
			НаборЗаписей.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		Если ТранзакцияАктивна() Тогда 
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ТекстКомментария = СтрШаблон("Ошибка выполнения процедуры ""Пересчет очереди задач по направлениям"": 
			|%1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации("Пересчет очереди задач", УровеньЖурналаРегистрации.Ошибка, , , ТекстКомментария);
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задача.Ссылка КАК Задача,
	|	Задача.Филиал КАК Филиал
	|ПОМЕСТИТЬ ОтобранныеЗадачи
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	Задача.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый)
	|	И Задача.Назначена = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОчередьЗадач.Задача КАК Задача,
	|	ОчередьЗадач.КлючОчередиОбъекта КАК КлючОчередиОбъекта,
	|	ОчередьЗадач.Заблокирован КАК Заблокирован,
	|	ОчередьЗадач.Зафиксирован КАК Зафиксирован,
	|	ОчередьЗадач.Порядок КАК Порядок,
	|	ОчередьЗадач.ДатаДобавления КАК ДатаДобавления,
	|	ОчередьЗадач.ДатаИзменения КАК ДатаИзменения,
	|	ОчередьЗадач.Система КАК Система,
	|	ОчередьЗадач.Направление КАК Направление,
	|	ОчередьЗадач.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.ОчередьЗадач КАК ОчередьЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО ОчередьЗадач.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|			И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ОчередьГруппыТестирования))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтобранныеЗадачи КАК ОтобранныеЗадачи
	|		ПО ОчередьЗадач.Задача = ОтобранныеЗадачи.Задача
	|		И КлючОчереди.Филиал = ОтобранныеЗадачи.Филиал
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|ИТОГИ ПО
	|	КлючОчередиОбъекта";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда      
		
		ВыборкаКлюч = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаКлюч.Следующий() Цикл      
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(ВыборкаКлюч.КлючОчередиОбъекта);			
			
			НовыйПорядок = 1;
			Выборка = ВыборкаКлюч.Выбрать(); 
			
			Пока Выборка.Следующий() Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка, , "Порядок");
				НоваяЗапись.Порядок = НовыйПорядок;
				
				НовыйПорядок = НовыйПорядок + 1;
			КонецЦикла;
			
			НаборЗаписей.Записать();
			НаборЗаписей.Очистить();         
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОчередьЗадач.Задача КАК Задача,
	|	ОчередьЗадач.КлючОчередиОбъекта КАК КлючОчередиОбъекта,
	|	ОчередьЗадач.УбранИзОчереди КАК УбранИзОчереди,
	|	ОчередьЗадач.Заблокирован КАК Заблокирован,
	|	ОчередьЗадач.Зафиксирован КАК Зафиксирован,
	|	ОчередьЗадач.Порядок КАК Порядок,
	|	ОчередьЗадач.ДатаДобавления КАК ДатаДобавления,
	|	ОчередьЗадач.ДатаИзменения КАК ДатаИзменения,
	|	ОчередьЗадач.Система КАК Система,
	|	ОчередьЗадач.Направление КАК Направление,
	|	ОчередьЗадач.Пользователь КАК Пользователь,
	|	ДокументЗадача.Назначена <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК УбратьИзОчереди
	|ИЗ
	|	РегистрСведений.ОчередьЗадач КАК ОчередьЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО ОчередьЗадач.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|			И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ОчередьВТестировании))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО ОчередьЗадач.Задача = ДокументЗадача.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (ДокументЗадача.Статус = СтатусыОбъектов.Ссылка)
	|ГДЕ
	|	НЕ ОчередьЗадач.УбранИзОчереди
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|ИТОГИ ПО
	|	КлючОчередиОбъекта";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаКлюч = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаКлюч.Следующий() Цикл      
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(ВыборкаКлюч.КлючОчередиОбъекта);			
			Выборка = ВыборкаКлюч.Выбрать();
			НовыйПорядок = 1;
			
			Пока Выборка.Следующий() Цикл        	
				
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				
				Если Выборка.УбратьИзОчереди Тогда
					Запись.УбранИзОчереди = Истина;
				Иначе
					Запись.Порядок = НовыйПорядок;
					НовыйПорядок = НовыйПорядок + 1;
				КонецЕсли;
			КонецЦикла;
			
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Обновление порядков задач очереди
Процедура ПересчетОчередиЗадачВТестировании() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОчередьЗадач.Задача КАК Задача,
	|	ОчередьЗадач.КлючОчередиОбъекта КАК КлючОчередиОбъекта,
	|	ОчередьЗадач.Порядок КАК Порядок,
	|	ОчередьЗадач.Заблокирован КАК Заблокирован,
	|	ОчередьЗадач.Зафиксирован КАК Зафиксирован,
	|	ОчередьЗадач.ДатаДобавления КАК ДатаДобавления,
	|	ОчередьЗадач.ДатаИзменения КАК ДатаИзменения,
	|	ОчередьЗадач.Система КАК Система,
	|	ОчередьЗадач.Направление КАК Направление,
	|	ОчередьЗадач.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.ОчередьЗадач КАК ОчередьЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО ОчередьЗадач.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|			И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ОчередьВТестировании))
	|ГДЕ
	|	НЕ ОчередьЗадач.УбранИзОчереди
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	ДатаДобавления
	|ИТОГИ ПО
	|	КлючОчередиОбъекта";
	
	ВыборкаКлюч = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКлюч.Следующий() Цикл
		
		Выборка = ВыборкаКлюч.Выбрать();
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(ВыборкаКлюч.КлючОчередиОбъекта);
		НовыйПорядок = 1;
		
		Пока Выборка.Следующий() Цикл
			НаборЗаписей.Отбор.Задача.Установить(Выборка.Задача);
			НаборЗаписей.Прочитать();
			
			НаборЗаписей[0].Порядок = НовыйПорядок;
			НовыйПорядок = НовыйПорядок + 1;
			Попытка
				НаборЗаписей.Записать();
				НаборЗаписей.Очистить();
			Исключение
				ТекстКомментария = СтрШаблон("Не удалось пересчитать очередь задач на тестирование по причине:
				|%1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации("Очередь задач на тестирование", УровеньЖурналаРегистрации.Ошибка, , , ТекстКомментария);
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
