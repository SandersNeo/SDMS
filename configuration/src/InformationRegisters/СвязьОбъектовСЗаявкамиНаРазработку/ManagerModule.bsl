///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет запись в регистр сведений СвязьОбъектовСЗаявкамиНаРазработку.
//
// Параметры:
//  Объект    - Ссылка - ссылка на объект БД.
//  Основание - Ссылка - ссылка на объек-основание.
//
Процедура Добавить(Знач Объект, Знач Основание) Экспорт
		
	// Будет хранить данные, которые нужно записать в регистр
	ДанныеДляЗаписи = Новый Структура("Объект, Заявка_Новая, Заявка, ОбъектОснование");
	
	СтарыйОбъект = Неопределено;
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда		
		ДанныеДляЗаписи.Объект          = Объект;
		ДанныеДляЗаписи.Заявка_Новая    = Основание;
		ДанныеДляЗаписи.Заявка          = Основание;
		ДанныеДляЗаписи.ОбъектОснование = Основание;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.Задача") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвязьОбъектовСЗаявкамиНаРазработку.Заявка_Новая КАК Заявка_Новая
		|ИЗ
		|	РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку КАК СвязьОбъектовСЗаявкамиНаРазработку
		|ГДЕ
		|	СвязьОбъектовСЗаявкамиНаРазработку.Объект = &Объект";
		
		Запрос.УстановитьПараметр("Объект", Основание);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДанныеДляЗаписи.Объект          = Объект;
			ДанныеДляЗаписи.Заявка_Новая    = Выборка.Заявка_Новая;
			ДанныеДляЗаписи.Заявка          = Выборка.Заявка_Новая;
			ДанныеДляЗаписи.ОбъектОснование = Основание;
		КонецЕсли;
	Иначе
		ДанныеДляЗаписи.Объект          = Основание;
		ДанныеДляЗаписи.Заявка_Новая    = Объект;
		ДанныеДляЗаписи.Заявка          = Объект;
		ДанныеДляЗаписи.ОбъектОснование = Основание;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвязьОбъектовСЗаявкамиНаРазработку.Объект КАК Объект,
		|	СвязьОбъектовСЗаявкамиНаРазработку.Заявка_Новая КАК Заявка_Новая
		|ИЗ
		|	РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку КАК СвязьОбъектовСЗаявкамиНаРазработку
		|ГДЕ
		|	СвязьОбъектовСЗаявкамиНаРазработку.Заявка_Новая = &Заявка_Новая
		|	И (СвязьОбъектовСЗаявкамиНаРазработку.Объект ССЫЛКА Документ.ВнутреннееЗадание
		|			ИЛИ СвязьОбъектовСЗаявкамиНаРазработку.Объект ССЫЛКА Справочник.Проекты)";
		Запрос.УстановитьПараметр("Заявка_Новая", Объект);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			СтарыйОбъект = Выборка.Объект;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеДляЗаписи.Объект) И СтарыйОбъект = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Если действие выполняется в транзакции, нужно установить блокировку на
	// изменяемую запись.
	Если ТранзакцияАктивна() Тогда
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Объект", Объект);
		БлокировкаДанных.Заблокировать();
	КонецЕсли;
	
	НаборЗаписей = СоздатьНаборЗаписей();
	
	Если ЗначениеЗаполнено(Строка(ДанныеДляЗаписи.Объект)) Тогда
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаРазработку") 
			ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.Задача") Тогда

			НаборЗаписей.Отбор.Объект.Установить(ДанныеДляЗаписи.Объект);
		Иначе
			Если СтарыйОбъект <> Неопределено Тогда
				НаборЗаписей.Отбор.Заявка_Новая.Установить(ДанныеДляЗаписи.Заявка_Новая);
				НаборЗаписей.Отбор.Объект.Установить(СтарыйОбъект);
				НаборЗаписей.Записать();
			КонецЕсли;
			НаборЗаписей.Отбор.Заявка_Новая.Установить(ДанныеДляЗаписи.Заявка_Новая);
			НаборЗаписей.Отбор.Объект.Установить(ДанныеДляЗаписи.Объект);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ДанныеДляЗаписи);
		НаборЗаписей.Записать();
	Иначе 
		НаборЗаписей.Отбор.Заявка_Новая.Установить(ДанныеДляЗаписи.Заявка_Новая);
		НаборЗаписей.Отбор.Объект.Установить(СтарыйОбъект);
		НаборЗаписей.Записать();	
	КонецЕсли;
	
КонецПроцедуры

// Возвращает заявку, к которой относится задача (даже если они связаны через промежуточную задачу)
//
// Параметры:
//  Задача	 - ДокументСсылка.Задача	 - задача для которой необходимо получить заявку
// 
// Возвращаемое значение:
//   - ДокументСсылка.ЗаявкаНаРазработку
//
Функция ПолучитьЗаявку(Знач Задача) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвязьОбъектовСЗаявкамиНаРазработку.Заявка_Новая КАК Заявка_Новая
	|ИЗ
	|	РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку КАК СвязьОбъектовСЗаявкамиНаРазработку
	|ГДЕ
	|	ВЫРАЗИТЬ(СвязьОбъектовСЗаявкамиНаРазработку.Объект КАК Документ.Задача) = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Задача);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Результат = Выборка.Заявка_Новая;
	Иначе
		Результат = Документы.ЗаявкаНаРазработку.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
