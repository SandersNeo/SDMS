///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ВнешнееСоединение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет в регистр сведений "Участники" пользователей, которым будут
// приходить оповещения о событиях, связанных с объектом.
// 
// Параметры:
//  Объект           - ОпределяемыйТип.ОбъектНаблюдения - ссылка на объект БД.
//  Пользователь     - ОпределяемыйТип.ПолучательОповещения - ссылка на элемент 
//                     справочника "Пользователи" или "Подписчики".
//  Роль             - СправочникСсылка.РолиУчастников - ссылка на предопределенный элемент
//                     справочника.
//  ДобавитьВИсторию - Булево - если Истина добавляем записи в историю изменения оъекта.
//
Процедура Добавить(Знач Объект, Знач Пользователь, Знач Роль, Знач ДобавитьВИсторию = Ложь) Экспорт
		
	НаборЗаписей = СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Объект.Установить(Объект);	
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Отбор.Роль.Установить(Роль);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Объект = Объект;
	НоваяЗапись.Пользователь = Пользователь;	
	НоваяЗапись.Роль = Роль;	
	НоваяЗапись.Комментарий = "";
	НоваяЗапись.ПолучатьОповещения = Истина;	
	НоваяЗапись.Скрытый = Ложь;	
	НоваяЗапись.Автор = ПараметрыСеанса.ТекущийПользователь;
	НоваяЗапись.ДатаДобавления = ТекущаяДата();
	
	НачатьТранзакцию();	
	Попытка
		НаборЗаписей.Записать();
		
		Если ДобавитьВИсторию Тогда
			ДобавитьВИсториюИзмененийОбъектов(Пользователь, Объект, Ложь);
			
			Если Пользователь <> ПараметрыСеанса.ТекущийПользователь Тогда
				РегистрыСведений.ОчередьСобытийНаОбработку.ОтправитьОповещениеУчастнику(Объект, Пользователь);
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию(); 
		
		ТекстОшибки = СтрШаблон("Ошибка добавления участников объекта ""%1"": %2", Объект, ОписаниеОшибки());
		ЗаписьЖурналаРегистрации("Управление участниками", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Изменяет запись в регистре сведений "Участники" пользователей, которым будут
// приходить оповещения о событиях, связанных с объектом.
// 
// Параметры:
//  Объект           - ОпределяемыйТип.ОбъектНаблюдения - ссылка на объект БД.
//  Пользователь     - ОпределяемыйТип.ПолучательОповещения - ссылка на элемент 
//                     справочника "Пользователи" или "Подписчики".
//  Роль             - СправочникСсылка.РолиУчастников - ссылка на предопределенный элемент
//                     справочника.
//  Комментарий      - Строка - текстовый комментарий.
//  ДобавитьВИсторию - Булево - если Истина добавляем записи в историю изменения оъекта.
//
Процедура Изменить(Знач Объект, Знач Пользователь, Знач Роль, Знач ПолучатьОповещения, Знач Скрытый, Знач Комментарий = Неопределено, Знач ДобавитьВИсторию = Ложь) Экспорт
		
	МенеджерЗаписи = СоздатьМенеджерЗаписи();	
	МенеджерЗаписи.Объект = Объект;
	МенеджерЗаписи.Пользователь = Пользователь;	
	МенеджерЗаписи.Роль = Роль;	
	
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.ПолучатьОповещения = ПолучатьОповещения;
		МенеджерЗаписи.Скрытый = Скрытый;
		
		Если ТипЗнч(Комментарий) = Тип("Строка") Тогда
			МенеджерЗаписи.Комментарий = Комментарий;
		КонецЕсли;
		
		НачатьТранзакцию();	
		Попытка
			МенеджерЗаписи.Записать();
			
			Если ДобавитьВИсторию Тогда
				ДобавитьВИсториюИзмененийОбъектов(Пользователь, Объект, Скрытый);
				
				Если Пользователь <> ПараметрыСеанса.ТекущийПользователь Тогда
					РегистрыСведений.ОчередьСобытийНаОбработку.ОтправитьОповещениеУчастнику(Объект, Пользователь, Скрытый);
				КонецЕсли;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию(); 
			
			ТекстОшибки = СтрШаблон("Ошибка добавления участников объекта ""%1"": %2", Объект, ОписаниеОшибки());
			ЗаписьЖурналаРегистрации("Управление участниками", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецПопытки;	
	КонецЕсли;	
	
КонецПроцедуры

// Формирует массив получателей в зависимости от переданного объекта.
// Параметры:
//		- Объект - Документ.Задача, Документ.ЗаявкаНаРазработку, Документ.ВнутреннееЗадание, Справочник.Проекты - Объект для получения участников.
//		- ДобавлятьВсех - Булево - признак отбора участников.
//		- ИнициаторОтправки - Справочник.Пользователи - фильтрация для пользователя, инициирущего событие.
//
// Возвращаемое значение:
//		- Результат - РезультатЗапроса - результат получения участников для объекта.
//		
Функция ПолучателиОповещения(Знач Объект, Знач ДобавлятьВсех = Ложь, Знач ИнициаторОтправки = Неопределено) Экспорт
	
	Если ИнициаторОтправки = Неопределено Тогда
		ИнициаторОтправки = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
		
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст =
	"ВЫБРАТЬ
	|	Участники.Пользователь КАК Пользователь,
	|	Участники.Роль КАК Роль
	|ПОМЕСТИТЬ ОтобранныеУчастники
	|ИЗ
	|	РегистрСведений.Участники КАК Участники
	|ГДЕ
	|	Участники.Объект = &Объект
	|	И Участники.ПолучатьОповещения
	|{ГДЕ
	|	Участники.Роль КАК РольУчастника}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтобранныеУчастники.Пользователь КАК Пользователь,
	|	ЕСТЬNULL(Филиалы.Ссылка, ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК Филиал,
	|	ВЫБОР
	|		КОГДА НЕ Филиалы.ТипФилиала ЕСТЬ NULL
	|				И Филиалы.ТипФилиала <> ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.НеIT)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ITФилиал
	|ИЗ
	|	ОтобранныеУчастники КАК ОтобранныеУчастники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ((ВЫРАЗИТЬ(ОтобранныеУчастники.Пользователь КАК Справочник.Пользователи)) = Пользователи.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела.СрезПоследних(&ТекущаяДата, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаСрезПоследних
	|		ПО ((ВЫРАЗИТЬ(ОтобранныеУчастники.Пользователь КАК Справочник.Пользователи)) = ЛичныеДелаСрезПоследних.Сотрудник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО ((ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы)) = Филиалы.Ссылка)
	|ГДЕ
	|	ОтобранныеУчастники.Пользователь <> &Пользователь
	|	И НЕ Пользователи.Недействителен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтобранныеУчастники.Пользователь,
	|	НЕОПРЕДЕЛЕНО,
	|	ЛОЖЬ
	|ИЗ
	|	ОтобранныеУчастники КАК ОтобранныеУчастники
	|ГДЕ
	|	ОтобранныеУчастники.Пользователь ССЫЛКА Справочник.Подписчики";
	
	ПостроительЗапроса.Параметры.Вставить("Объект", Объект);
	ПостроительЗапроса.Параметры.Вставить("Пользователь", ИнициаторОтправки);
	ПостроительЗапроса.Параметры.Вставить("ТекущаяДата", ТекущаяДатаСеанса());
	
	// Аналог "добавлять комментаторов" в старой версии.
	// Фильтруем пользователей для отправки оповещений по роли "Наблюдатель"
	Если НЕ ДобавлятьВсех Тогда
		ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("РольУчастника");
		ЭлементОтбора.ВидСравнения  = ВидСравнения.НеРавно;
		ЭлементОтбора.Значение      = Справочники.РолиУчастников.Наблюдатель;
		ЭлементОтбора.Использование = Истина;
	КонецЕсли;
	
	ПостроительЗапроса.Выполнить();
	
	Возврат ПостроительЗапроса.Результат;
	
КонецФункции

// Формирует массив ролей в зависимости от переданного объекта.
//
// Параметры:
//  Объект		 - Документ.Задача, Документ.ЗаявкаНаРазработку, Документ.ВнутреннееЗадание, Справочник.Проекты	 - Объект для получения участников.
//  Пользователь - Справочник.Пользователи																		 - Пользователь, по которому нужно получить рои.
// 
// Возвращаемое значение:
//   Результат - Массив - Массив ролей пользователя дял Объекта.
//
Функция ПолучитьРолиУчастника(Знач Объект, Знач Пользователь) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(Объект) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Участники.Роль КАК Роль
	|ИЗ
	|	РегистрСведений.Участники КАК Участники
	|ГДЕ
	|	Участники.Объект = &Объект
	|	И Участники.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Роль");
	
КонецФункции

// Формирует структуру с данными по участникам для объекта для использования на форме
//
// Параметры:
//  Объект				 - ОпределяемыйТип.ОбъектНаблюдения	 - ссылка на объект, трудозатраты по которому нужно	получить.
//  ТаблицаУчастников	 - ТаблицаЗначений					 - таблица учатсников
// 
// Возвращаемое значение:
//  Строка - Текст html страницы
//
Функция ПолучитьСтраницуУчастников(Знач Объект, Знач ТаблицаУчастников) Экспорт
	
	ИнтерактивныеРоли = УчастникиПроцессов.ИнтерактивныеРоли();
	
	ШаблоныHTML = ПолучитьHTMLШаблоны();
	КорневойURL = Константы.КорневойURL.Получить();
	НаборСтрокHTML = "";  
	
	МожноДобавлятьУчастникаКомандыПроекта = (ТипЗнч(Объект) = Тип("СправочникСсылка.Проекты")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.ВнутреннееЗадание"));
		
	Для Каждого Строка Из ТаблицаУчастников Цикл		
		
		СтрокаТрудозатраты = СтрШаблон(ШаблоныHTML.Строка, 
			?(Строка.ПолучатьОповещения, "checked", ""),
			Строка.ИД,
			ОбщегоНазначенияКлиентСервер.ПолучитьФамилиюИнициалыПользователя(Строка.ИмяПользователя),
			?(Строка.ЕстьКартинкаСостояния, "class='icon auth_user'", ""),
			Строка.Роль, 
			Строка.Комментарий,
			Формат(Строка.ДатаДобавления, "ДФ=dd.MM.yyyy"),
			?(Строка.УдалениеДоступно, "", "hidden"));
		
		НаборСтрокHTML = НаборСтрокHTML + СтрокаТрудозатраты;  	
	КонецЦикла; 
	
	ТекстТаблицы = СтрШаблон(ШаблоныHTML.Таблица, ?(МожноДобавлятьУчастникаКомандыПроекта, "", "hidden"), НаборСтрокHTML);
	ТекстHTML = СтрШаблон(ШаблоныHTML.Общий, КорневойURL, ТекстТаблицы);

	Возврат ТекстHTML;
	
КонецФункции

// Порционно удаляет записи из текущего регистра, где пользователям установлен признак "Недействителен"
Процедура УдалитьНедействительныхУчастников() Экспорт
	
	ЗаписьЖурналаРегистрации("Регламентные и фоновые задания.Удаление недействительных участников",
		УровеньЖурналаРегистрации.Информация, , , "Начало удаления недействительных участников.");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	Участники.Объект КАК Объект,
	|	Участники.Пользователь КАК Пользователь,
	|	Участники.Роль КАК Роль
	|ИЗ
	|	РегистрСведений.Участники КАК Участники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО Участники.Пользователь = Пользователи.Ссылка
	|			И (Пользователи.Недействителен)
	|ГДЕ
	|	Участники.Роль В (ЗНАЧЕНИЕ(Справочник.РолиУчастников.Наблюдатель), ЗНАЧЕНИЕ(Справочник.РолиУчастников.Подписчик))";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ЗаписьЖурналаРегистрации("Регламентные и фоновые задания.Удаление недействительных наблюдателей",
			УровеньЖурналаРегистрации.Информация, , , "Нет недействительных наблюдателей.");
		Возврат;
	КонецЕсли;
	
	Пока НЕ РезультатЗапроса.Пустой() Цикл
		НаборЗаписей = СоздатьНаборЗаписей();
		Выборка = РезультатЗапроса.Выбрать();
			
		Пока Выборка.Следующий() Цикл
			НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
			НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
			НаборЗаписей.Отбор.Роль.Установить(Выборка.Роль);

			Попытка		
				НаборЗаписей.Записать();
			Исключение			
				ЗаписьЖурналаРегистрации("Регламентные и фоновые задания.Удаление недействительных участников",
				УровеньЖурналаРегистрации.Информация, , , "Ошибка записи по причине: " + ОписаниеОшибки());
			КонецПопытки;
				
			НаборЗаписей.Очистить();
		КонецЦикла;
		
		РезультатЗапроса = Запрос.Выполнить();
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации("Регламентные и фоновые задания.Удаление недействительных участников",
		УровеньЖурналаРегистрации.Информация, , , "Окончание удаления недействительных участников.");
	
КонецПроцедуры

// Проверяет, является ли пользователь участником наблюдения за объектом в указанной роли
//
//  Объект       - ОпределяемыйТип.ОбъектНаблюдения - ссылка на объект БД.
//  Пользователь - ОпределяемыйТип.ПолучательОповещения - ссылка на элемент 
//                 справочника "Пользователи" или "Подписчики".
//  Роль         - СправочникСсылка.РолиУчастников - ссылка на предопределенный элемент
//                 справочника.
//  ПолучатьОповещения - Неопределено, Булево - получает участник оповещения или нет
// 
// Возвращаемое значение:
//   Булево - Истина, если уже участник по запрошенным параметрам, иначе Ложь.
//
Функция ЭтоУчастник(Объект, Пользователь, Роль, ПолучатьОповещения = Неопределено) Экспорт

	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст =
	"ВЫБРАТЬ
	|	Участники.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.Участники КАК Участники
	|ГДЕ
	|	Участники.Объект = &Объект
	|	И Участники.Пользователь = &Пользователь
	|	И Участники.Роль = &Роль
	|{ГДЕ
	|	Участники.ПолучатьОповещения КАК ПолучатьОповещения}";
     	
	ПостроительЗапроса.Параметры.Вставить("Объект", Объект);
	ПостроительЗапроса.Параметры.Вставить("Пользователь", Пользователь);
	ПостроительЗапроса.Параметры.Вставить("Роль", Роль);
		
	Если ПолучатьОповещения <> Неопределено Тогда
		ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("ПолучатьОповещения");
		ЭлементОтбора.ВидСравнения  = ВидСравнения.Равно;
		ЭлементОтбора.Значение      = ПолучатьОповещения;
		ЭлементОтбора.Использование = Истина;
	КонецЕсли;
	
	ПостроительЗапроса.Выполнить();
	РезультатЗапроса = ПостроительЗапроса.Результат;
	
	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьВИсториюИзмененийОбъектов(Знач Пользователь, Знач Объект, Знач Удаление)
	
	Автор = ПараметрыСеанса.ТекущийПользователь;
	
	ДанныеСтруктура = Новый Структура("Событие, Автор, Участник, Добавлен");
	ДанныеСтруктура.Событие = "ИзменениеУчастников";
	ДанныеСтруктура.Автор = Строка(Автор);
	ДанныеСтруктура.Участник = Строка(Пользователь);
	
	Если Удаление Тогда
		ДанныеСтруктура.Добавлен = Ложь;
	Иначе
		ДанныеСтруктура.Добавлен = Истина;
	КонецЕсли;
	
	Категория = Перечисления.КатегорииСобытийИсторияИзменений.Прочее;
	СтруктураСообщения = Новый Структура("Данные, Категория", ЗаписатьЗначениеJSON(ДанныеСтруктура), Категория);
	
	РегистрыСведений.ИсторияИзмененийОбъектовПоСобытиям.Добавить(Объект, СтруктураСообщения);

КонецПроцедуры

Функция ПолучитьHTMLШаблоны()
	
	ШаблоныHTML = Новый Структура;
	ТекстHTML = 
	"<html>
	|	<head>
	|		<meta http-equiv='Content-Type' content='text/html; charset=utf-8'/> 
	|		<link rel='stylesheet' href='%1/assets/css/styles.css?v3' charset='utf-8'>
	|		<style type='text/css'>
	|			
	|			main {
	|				max-height: calc(100%% - 46px);
	|				overflow: auto;
	|				border: 1px solid var(--hover-color);
	|				border-radius: 8px;
	|			}
	|			table {
	|				width:100%%;
	|				border-collapse: separate;
	|				border-spacing: 0;
	|				}
	|			a {	
	|				text-decoration: none;
	|				} 
	|          .user>a {
	|				color: var(--href-color);
	|				}
	|			thead {
	|				height:47px;
	|				color: #8C8C8C;
	|				background-color: var(--main-color);
	|				font-weight: 700;
	|				position: sticky;
	|				top: 0; 
	|				z-index: 1;
	|				}
	|			.trow {
	|				height:37px;
	|				font-weight: 400;
	|				}
	|			.trow > td {
	|				border-top: 1px solid var(--hover-color);
	|			}							
	|			.date{			
	|				padding: 5px 5px 5px 5px;
	|				width: 15%%
	|				}
	|			.user {			
	|				padding: 5px 5px 5px 5px;
	|				width: 18%%
	|				}
	|			.role {			
	|				padding: 5px 5px 5px 5px;
	|				width: 30%%
	|				}
	|			.comment_input {
	|				text-decoration: none;
	|				border-style: none;
	|				font-size: inherit;
	|				width: 100%%;
	|				resize: none; 
	|				rows: 1;     
	|				outline: none;
	|				}		
	|			.comment {			
	|				padding: 5px 5px 5px 20px;
	|				width: 30%%;
	|				user-select: text;
	|				}
	|			.href {
	|				text-align:center;
	|				}	
	|			input[type='checkbox' i]  
	|				{width: 15; height: 15px}	
	|			
	|			.user > * {
	|				vertical-align: middle;
	|			}       
	|
	|			.td-notification,.trash-icon,.auth_user {
	|				color: #8C8C8C !important;
	|			}
	|			.icon.trash-icon::after {
	|				-webkit-mask-image: var(--trash-icon);
	|				mask-image: var(--trash-icon);
	|			}          
	|
	|		    .dropdown-content {
	|				display: none;
	|				position: absolute;
	|				background-color: var(--main-color);
	|				min-width: 200px;
	|				box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
	|				z-index: 1;
	|				}  
	|       	.dropdown {
	|				position: relative;
	|				display: inline-block;
	|				align-items: center;
	|				}
	|				
	|			.dropdown-content a {
	|				font-family: inherit;
	|				color: black;
	|				padding: 12px 16px;
	|				display: block;
	|				}	
	|			.dropdown-content a:hover {background-color: #ddd;}
	|
	|			.dropdown:hover .dropdown-content {display: block;}    
	|			[hidden]{ display:none !important}
	|		</style>
	|	</head>
	|<body>
	|	<div style='height: 100%%'>
	|		%2
	|	</div>
	|<script>
	|	let text;
	|		
	|	function describe(source) {  
	|	    if (source.value  == '') 
	|			{text = '';}
	|	    else {
	|			Value = new Map();
	|	   		Value['name'] = source.name;
	|	   		Value['text'] = source.value;
	|		
	|	   		text = JSON.stringify(Value);			   
	|			}
	|		}
	|		
	|	function get_describe(source) {  
	|	    returnValue = text;
	|	    text = '';
	|				
	|	    return returnValue;			   
	|	}  
	|
	|	function subscriptionDisplay(subscribe) {  
	|	    document.getElementById('unsubscribe').style.display = subscribe ? 'block' : 'none';
	|		document.getElementById('subscribe').style.display = !subscribe ? 'block' : 'none';			   
	|	}  
	|
	|	function EnterPress(event) {
	|		if (event.keyCode === 13) {
	|			event.preventDefault();
	|			event.target.blur();
	|			event.target.click();
	|			}
	|		}
	|
	|</script>
	|</body>  
	|</html>";    
	
	ШаблоныHTML.Вставить("Общий", ТекстHTML);

	ТекстHTML =	 
	"<nav>
	|	<span class='dropdown' >
	|		<label><a  class='icon add-icon'> </a><a href='#new'> <span>Добавить </span></a> </label>
	|		<div class='dropdown-content'>
	|			<a href='#add_observer'>Наблюдателя</a>
	|			<a href='#add_subscriber'>Подписчика</a>
	|			<a href='#add_participant' %1>Участника команды управления проектом</a>
	|		</div>
	|	</span> 
	|	<label id='unsubscribe'><a href='#unsubscribe' class='icon notification-icon'> </a> <a href='#unsubscribe'> <span>Отписаться </span></a> </label>
	|	<label id='subscribe'><a href='#subscribe' class='icon notification-icon'> </a> <a href='#subscribe'> <span>Подписаться </span></a> </label>
	|</nav>
	|
	|<main id='main'>
	|	<table>
	|		<thead>
	|			<tr>
	|				<td><a class='icon notification-icon td-notification'> </a></td>
	|				<td>&nbsp;</td>
	|				<td class='user'>Пользователь</td>
	|				<td class='role'>Роль</td>
	|				<td class='comment'>Комментарий</td>
	|				<td class='date'>Дата</td>				
	|				<td class='button button_delete'>&nbsp;</td>
	|			</tr>
	|		</thead>
	|		<tbody>
	|			%2	
	|		</tbody>
	|		</table>
	|	</main>";   
	ШаблоныHTML.Вставить("Таблица", ТекстHTML); 
	
	ТекстHTML = 
	"<tr class='trow'>
	|	<td><input type='checkbox' class = 'checkbox' %1 onclick='return false'/></td>
	|	<td> <a %4></a></td>
	|	<td class='user'> <a title='%3' href='sdms_user_%2'>%3</a></a></td>
	|	<td class='role'>%5</td>	
	|	<td class='comment'><input type='text' class = 'comment_input' value = '%6' name = 'comment_%2' onBlur='describe(this)' onkeyup='EnterPress(event)'></td>
	|	<td class='date'>%7</td>
	|	<td class='button_delete'>
	|		<a href='#delete-%2' class='icon trash-icon' %8></a>
	|	</td>
	|</tr>";
	ШаблоныHTML.Вставить("Строка", ТекстHTML);
	
	Возврат ШаблоныHTML;
	
КонецФункции

#КонецОбласти

#КонецЕсли
