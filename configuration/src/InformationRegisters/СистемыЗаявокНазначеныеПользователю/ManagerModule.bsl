///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Добавляет записи в регистр.
//
// Параметры:
//  Заявка		 - ДокументСсылка.ЗаявкаНаРазработку - ссылка на документ "Заявка на разработку".
//  Система		 - СправочникСсылка.СистемыУчета - ссылка на систему.
//  Филиал		 - СправочникСсылка.Филиалы - ссылка на филиал.
//  Пользователь - СправочникСсылка.Пользователи - ссылка на пользователя.
//  Комментарий	 - Строка - текст комментария для истории и оповещения.
//  
Процедура Добавить(Знач Заявка, Знач Система, Знач Филиал, 
	Знач Пользователь = Неопределено, Знач Комментарий = Неопределено, Знач Данные = "") Экспорт
		
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Заявка.Установить(Заявка);
	НаборЗаписей.Отбор.Система.Установить(Система);
	НаборЗаписей.Отбор.Филиал.Установить(Филиал);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Заявка = Заявка;
	Запись.Система = Система;
	Запись.Филиал = Филиал;
	
	Если Пользователь <> Неопределено Тогда
		Запись.ТекущийИсполнитель = Пользователь;
	КонецЕсли;   
	 
	ДобавлятьВГабаритноеПланирование = ИнтеграцияДополнительныхПодсистем.ДобавлятьЗаявкуВГабаритноеПланирование(Заявка, Филиал);
	
	НачатьТранзакцию();
	Попытка
		НаборЗаписей.Записать(); 
		ЗначениеОчереди = Новый Структура("Филиал", Филиал);
		РегистрыСведений.ОчередиЗаявок.Добавить(Заявка, Перечисления.ВидыОчереди.Филиал, ЗначениеОчереди);
		ОбработатьКомментарий(Заявка, Комментарий, Данные);	 
		
		Если ИнтеграцияДополнительныхПодсистем.СоздаватьИнцидент(Филиал) Тогда
			ДанныеЗадания = Новый Структура;
			ДанныеЗадания.Вставить("Система", Система);
			ДанныеЗадания.Вставить("Филиал", Филиал);
			
			ИнтеграцияДополнительныхПодсистем.ДобавитьЗаданиеСоздатьИнцидентJira(Заявка, ДанныеЗадания);
		КонецЕсли;
		
		Если ДобавлятьВГабаритноеПланирование Тогда 
			РегистрыСведений.ОчередиЗаявок.Добавить(Заявка, Перечисления.ВидыОчереди.ГабаритноеПланирование, ЗначениеОчереди);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("СистемыЗаявокНазначенныеПользователю.Добавить", 
			УровеньЖурналаРегистрации.Ошибка, , Заявка, ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Удаляет записи из регистра о назначенных пользователях по системе заявки
// и добавляет комментарий в историю с оповещением пользователей.
//
// Параметры:
//  Заявка      - ДокументСсылка.ЗаявкаНаРазработку - ссылка на документ "Заявка на разработку".
//  Система		- СправочникСсылка.СистемыУчета - ссылка на систему.
//  Филиал		- СправочникСсылка.Филиалы - ссылка на филиал.
//  Комментарий - Строка - текст комментария для истории и оповещения.
//
Процедура Удалить(Знач Заявка, Знач Система = Неопределено, Знач Филиал = Неопределено, Знач Комментарий = Неопределено, Знач Данные = "") Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Заявка.Установить(Заявка);
	
	Если ЗначениеЗаполнено(Система) Тогда
		НаборЗаписей.Отбор.Система.Установить(Система); 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Филиал) Тогда
		НаборЗаписей.Отбор.Филиал.Установить(Филиал); 
	КонецЕсли; 
	
	НачатьТранзакцию();
	
	Попытка
		НаборЗаписей.Записать();
		РегистрыСведений.ОчередиЗаявок.Обновить(Заявка, Перечисления.ВидыОчереди.Филиал);	
		ОбработатьКомментарий(Заявка, Комментарий, Данные);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("СистемыЗаявокНазначенныеПользователю.Удалить", 
			УровеньЖурналаРегистрации.Ошибка, , Заявка, ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьКомментарий(Знач Заявка, Знач Комментарий, Знач Данные = "")

	Если Комментарий <> Неопределено Тогда
		СвойстваСообщения = Новый Структура;
		СвойстваСообщения.Вставить("Данные", Данные);
		СвойстваСообщения.Вставить("Категория", Перечисления.КатегорииСобытийИсторияИзменений.Главное);
		
		РегистрыСведений.ИсторияИзмененийОбъектовПоСобытиям.Добавить(Заявка, СвойстваСообщения);
		
		Если СтрНайти(Комментарий, "</table>") = 0 Тогда
			
			ШаблоныПисьма = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма();
			
			Комментарий = СтрЗаменить(ШаблоныПисьма.БлокДвеТаблицы, "<!-- left_table_1 -->", Комментарий);
			
		КонецЕсли;
		
		СвойстваОповещения = Новый Структура;
		СвойстваОповещения.Вставить("ТекстСообщения", Комментарий);
		СвойстваОповещения.Вставить("КатегорияСообщения", 
			Перечисления.КатегорииСообщенийПользователя.ИзменениеСтатусаОбъекта);
		СвойстваОповещения.Вставить("СообщениеSDMS", " внес(-ла) изменения:");
		СвойстваОповещения.Вставить("Данные", Данные);
		
		РегистрыСведений.ОчередьСобытийНаОбработку.ОтправитьОповещениеОпределяемыеПолучатели(Заявка, СвойстваОповещения);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
	
#КонецЕсли
