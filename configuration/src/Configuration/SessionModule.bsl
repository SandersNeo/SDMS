///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Основные процедуры и функции инициализации процесса установки параметров

// Процедура-точка входа в механизм установки параметров пользователей.
// 
// Параметры:
//  ИменаПараметровСеанса - Массив - массив имен параметров сеанса, значения которых 
//                          необходимо установить.
//
Процедура УстановкаПараметровСеанса(ИменаПараметровСеанса)
	
	УстановленныеПараметры = Новый Массив;
	
	Если ИменаПараметровСеанса = Неопределено Тогда
		// Раздел установки параметров сеанса при начале сеанса (ИменаПараметровСеанса = Неопределено)
		// Выполняется установка параметров сеанса, которые можно инициализировать
		// при начале работы системы.		
		УстановитьЗначениеПараметраСеанса("ТекущийПользователь", УстановленныеПараметры);
		ИнтеграцияДополнительныхПодсистем.УстановитьЗначениеПараметраСеанса(УстановленныеПараметры);
		
		УстановитьПараметрСеансаРазрабатываемыеСистемы();
		УстановитьПараметрСеансаФилиал();
		УстановитьПараметрСеансаРольВОтделеIT();
		УстановитьПараметрСеансаАдресаWebОкружения();
		УстановитьПараметрСеансаСвязанныеФилиалы();
		УстановитьПараметрСеансаДоступныеФилиалыРуководителя();
		УстановитьПараметрСеансаСтилиУстановлены();
		
		// Установка Основного стиля оформления, если веб-клиент
		Если КлиентскоеПриложение.ТипПриложения() <> Неопределено Тогда
			ПриложениеВызовСервера.СформироватьНачальнуюСтраницу();
		КонецЕсли;		
	Иначе
		// Установка параметров сеанса "по требованию".
		// Параметры сеанса, инициализация которых требует обращения к одним и тем же данным
		// следует инициализировать сразу группой. Для того, чтобы избежать их повторной инициализации,
		// имена уже установленных параметров сеанса сохраняются в массиве УстановленныеПараметры		
		
		Для Каждого ИмяПараметра Из ИменаПараметровСеанса Цикл
			УстановитьЗначениеПараметраСеанса(ИмяПараметра, УстановленныеПараметры);
		КонецЦикла;		
	КонецЕсли;  
		
	// Отключение сервиса регистрации ошибок для разработческих баз	
	Если НЕ ПовторноеИспользованиеВызовСервера.ЭтоПродуктоваяБаза() Тогда
		НастройкиОбработкиОшибок = ОбработкаОшибок.ПолучитьОбщиеНастройки();
		
		Если ЗначениеЗаполнено(НастройкиОбработкиОшибок.АдресСервисаОбработкиОшибок) Тогда	
			НастройкиОбработкиОшибок.АдресСервисаОбработкиОшибок = "";
			ОбработкаОшибок.УстановитьОбщиеНастройки(НастройкиОбработкиОшибок);  
			
			// Временное логирование очистки адреса сервиса регистрации
			// для выявления причины очистки адреса в продуктовой базе
			ШаблонКомментария = 
			"Очистка адреса сервиса регистрации ошибок. 
			|Пользователь %1 
			|СтрокаСоединения %2";
			
			СтрокаСоединения = Приложение.СтрокаБезДомена(СтрокаСоединенияИнформационнойБазы());	
			Комментарий = СтрШаблон(ШаблонКомментария, ПараметрыСеанса.ТекущийПользователь, СтрокаСоединения);
			
			ЗаписьЖурналаРегистрации("ОбработкаОшибок.ОчиститьАдресСервисаОбработкиОшибок",
				УровеньЖурналаРегистрации.Ошибка, , , Комментарий);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Устанавливает значение параметра сеанса и возвращает имена установленных параметров сеанса
// в параметре УстановленныеПараметры.
//
// Параметры
//  ИмяПараметра            - Строка - имя параметра сеанса, который требуется установить
//                            или проинициализировать.
//  УстановленныеПараметры  - Массив - массив, в который добавляются имена установленных 
//                            или проинициализированных параметров.
//
Процедура УстановитьЗначениеПараметраСеанса(Знач ИмяПараметра, УстановленныеПараметры)

	// Если в данном вызове УстановкаПараметровСеанса параметр ИмяПараметра уже
	// был установлен, возврат из процедуры.
	Если УстановленныеПараметры.Найти(ИмяПараметра) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Установка параметра сеанса ТекущийПользователь
	Если ИмяПараметра = "ТекущийПользователь" Тогда
		ПараметрыСеанса.ТекущийПользователь = Приложение.ПолучитьТекущегоПользователя();
		УстановленныеПараметры.Добавить(ИмяПараметра);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции определения значений для параметров сеанса

Процедура УстановитьПараметрСеансаАдресаWebОкружения()
	
	Корневой = Константы.КорневойURL.Получить();
	
	СтруктураWebОкружения = Новый Структура;
	СтруктураWebОкружения.Вставить("АдресПубликацииИнформационнойБазы", Корневой + "/" + Константы.КаталогПубликацииБазы.Получить());
	СтруктураWebОкружения.Вставить("АдресПубликацииСлужебныхДанных", Корневой + "/" + Константы.КаталогСлужебныхДанных.Получить());
	СтруктураWebОкружения.Вставить("АдресПубликацииФайлов", Корневой + "/" + Константы.КаталогПубликацииФайлов.Получить());
	СтруктураWebОкружения.Вставить("АдресХраненияАватаров", Корневой + "/" + Константы.КаталогХраненияАватаровПользователей.Получить());
	СтруктураWebОкружения.Вставить("АдресПубликацииСервисаОтпискиОтОповещений", Корневой + "/unsubscribe");
	
	ПараметрыСеанса.АдресаWebОкружения = Новый ФиксированнаяСтруктура(СтруктураWebОкружения);
	
КонецПроцедуры

Процедура УстановитьПараметрСеансаДоступныеФилиалыРуководителя()
	
	СписокФилиалов = Справочники.Филиалы.ПолучитьВсеФилиалыРуководителя();
	МассивФилиалов = СписокФилиалов.ВыгрузитьЗначения();
	ПараметрыСеанса.ДоступныеФилиалыРуководителя = Новый ФиксированныйМассив(МассивФилиалов);
	
КонецПроцедуры

Процедура УстановитьПараметрСеансаРазрабатываемыеСистемы()
	
	РазрабатываемыеСистемы = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Филиалы.Ссылка КАК Филиал
	|ПОМЕСТИТЬ ФилиалыПользователя
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|ГДЕ
	|	Филиалы.Руководитель = &Пользователь
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЛичныеДелаСрезПоследних.Данные
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(
	|			&ТекущаяДата,
	|			Сотрудник = &Пользователь
	|				И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФилиалыРазрабатываемыеСистемы.Система КАК РазрабатываемаяСистема
	|ИЗ
	|	Справочник.Филиалы.РазрабатываемыеСистемы КАК ФилиалыРазрабатываемыеСистемы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФилиалыПользователя КАК ФилиалыПользователя
	|		ПО ФилиалыРазрабатываемыеСистемы.Ссылка = ФилиалыПользователя.Филиал";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Пользователь", Приложение.ПолучитьТекущегоПользователя());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РазрабатываемыеСистемы.Добавить(Выборка.РазрабатываемаяСистема);
	КонецЦикла;
	
	ПараметрыСеанса.РазрабатываемыеСистемы = Новый ФиксированныйМассив(РазрабатываемыеСистемы);
	
КонецПроцедуры

Процедура УстановитьПараметрСеансаРольВОтделеIT()
	
	РольПользователя = Справочники.РолиПользователей.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.РольВОтделеIT КАК РольВОтделеIT
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &ТекущийПользователь";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", Приложение.ПолучитьТекущегоПользователя());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		РольПользователя = Выборка.РольВОтделеIT;
	КонецЕсли;
	
	ПараметрыСеанса.РольВОтделеIT = РольПользователя;
	
КонецПроцедуры

Процедура УстановитьПараметрСеансаСвязанныеФилиалы()
	
	МассивФилиалов = Новый Массив;
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвязанныеОбъекты.ПриемникСвязи КАК Филиал
	|ИЗ
	|	РегистрСведений.СвязанныеОбъекты КАК СвязанныеОбъекты
	|ГДЕ
	|	СвязанныеОбъекты.ИсточникСвязи = &Филиал
	|	И СвязанныеОбъекты.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.СвязанаС)";
	
	Запрос.УстановитьПараметр("Филиал", ПараметрыСеанса.Филиал);
	Запрос.УстановитьПараметр("СТО", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 
			МассивФилиалов.Добавить(Выборка.Филиал);
		КонецЦикла;	
	КонецЕсли;
	
	Если МассивФилиалов.Найти(ПараметрыСеанса.Филиал) = Неопределено Тогда
		МассивФилиалов.Добавить(ПараметрыСеанса.Филиал);
	КонецЕсли;
	
	ПараметрыСеанса.СвязанныеФилиалы = Новый ФиксированныйМассив(МассивФилиалов);
	
КонецПроцедуры

Процедура УстановитьПараметрСеансаСтилиУстановлены()
	
	 ПараметрыСеанса.ДокументHTMLСформирован = Ложь;
	 
КонецПроцедуры

Процедура УстановитьПараметрСеансаФилиал()
			
	ПараметрыСеанса.Филиал = РегистрыСведений.ЛичныеДела.ФилиалПользователя(ПараметрыСеанса.ТекущийПользователь);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
