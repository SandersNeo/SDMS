///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытий

Функция apiANY(Запрос)

	ТелоОтвета = СтрШаблон(
		"Данный HTTP-сервис не поддерживает метод %1.
		|Ознакомьтесь с документацией - %2/api-docs/", Запрос.HTTPМетод, ОбщегоНазначенияВызовСервера.ПолучитьКонстанту("КорневойURL"));
	
	Возврат API.СформироватьОтвет(ТелоОтвета, Запрос.Заголовки, 405);
	
КонецФункции

Функция apiOPTIONS(Запрос)
	
	Возврат API.СформироватьОтвет("", Запрос.Заголовки, 204);
	
КонецФункции

Функция assetsVersionGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		СтруктураОтвета = API.ПолучитьАссетыДляОбновления(Запрос.ПараметрыЗапроса);
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция assetsVersionPOST(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		СтруктураОтвета = API.ЗафиксироватьОбновлениеАссетов(Запрос);
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция autosavePOST(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос, Ложь);
	
	Если РезультатПроверки.Успешно Тогда
		СтруктураОтвета = API.Автосохранение(Запрос);
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция branchesGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Идентификатор = Запрос.ПараметрыURL.Получить("id");
		
		СтруктураОтвета = API.ПолучитьДанныеФилиала(Идентификатор);
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция branchesIdGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = НРег(Запрос.ПараметрыURL.Получить("method"));
		
		Если Метод = "sprints" Тогда
			Идентификатор = Запрос.ПараметрыURL.Получить("id");
			
			СтруктураОтвета = API.ПолучитьНезавершенныеСпринтыФилиала(Идентификатор);
		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция commentsGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = НРег(Запрос.ПараметрыURL.Получить("method"));
		
		Если Метод = "list" Тогда
			СтруктураОтвета = API.ПолучитьКомментарииОбъекта(Запрос.ПараметрыЗапроса);
		ИначеЕсли Метод = "list_filter" Тогда
			СтруктураОтвета = API.ПолучитьКомментарииФильтра(Запрос.ПараметрыЗапроса);
		ИначеЕсли Метод = "answers" Тогда
			СтруктураОтвета = API.ПолучитьКомментарииВетки(Запрос.ПараметрыЗапроса);
		ИначеЕсли Метод = "filters" Тогда
			СтруктураОтвета = API.ПолучитьКоличествоКомментариевПоФильтрам(Запрос.ПараметрыЗапроса);				
		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
		
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция commentsPOST(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = НРег(Запрос.ПараметрыURL.Получить("method"));
		
		Если Метод = "add" Тогда
			СтруктураОтвета = API.ДобавитьКомментарийСтарый(Запрос);
		ИначеЕсли Метод = "addnew" Тогда
			СтруктураОтвета = API.ДобавитьКомментарий(Запрос);
		ИначеЕсли Метод = "mark" Тогда
			СтруктураОтвета = API.ПометкаКомментария(Запрос);
		ИначеЕсли Метод = "delete" Тогда
			СтруктураОтвета = API.УдалитьКомментарий(Запрос);
		ИначеЕсли Метод = "edit" Тогда
			СтруктураОтвета = API.ИзменитьКомментарий(Запрос);
		ИначеЕсли Метод = "read" Тогда
			СтруктураОтвета = API.ОтметитьПросмотренными(Запрос);
		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция customerGroupGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		СтруктураОтвета = API.ПолучитьГруппыЗаказчиков(Запрос.ПараметрыЗапроса);
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция devRequestsOldGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		СтруктураОтвета = API.ПолучитьСписокЗаявок(Запрос.ПараметрыЗапроса);
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция devRequestsGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = НРег(Запрос.ПараметрыURL.Получить("method"));
		
		Если Метод = "list" Тогда
			СтруктураОтвета = API.ПолучитьСписокЗаявок(Запрос.ПараметрыЗапроса);
		ИначеЕсли Метод = "linkguid" Тогда
			СтруктураОтвета = API.ПолучитьИдентификаторЗаявки(Запрос.ПараметрыЗапроса);
		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
		
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция devRequestsPOST(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = НРег(Запрос.ПараметрыURL.Получить("method"));
		
		Если Метод = "add" Тогда
			СтруктураОтвета = API.СоздатьЗаявку(Запрос);
		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
		
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция devRequestsIdGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = НРег(Запрос.ПараметрыURL.Получить("method"));
		Идентификатор = Запрос.ПараметрыURL.Получить("id");
		
		Если Метод = "files" Тогда
			СтруктураОтвета = API.ПолучитьФайлыОбъекта(Идентификатор, "devrequest", Запрос.ПараметрыЗапроса);
		ИначеЕсли Метод = "tasks" Тогда
			СтруктураОтвета = API.ПолучитьЗадачиЗаявки(Идентификатор, Запрос.ПараметрыЗапроса);
		ИначеЕсли Метод = "info" Тогда
			СтруктураОтвета = API.ПолучитьДанныеЗаявки(Идентификатор, Запрос.ПараметрыЗапроса);
		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция devRequestsIdPOST(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = НРег(Запрос.ПараметрыURL.Получить("method"));
		Идентификатор = Запрос.ПараметрыURL.Получить("id");
		
		Если Метод = "tasks" Тогда
			СтруктураОтвета = API.СоздатьЗадачуОтЗаявки(Идентификатор, Запрос.ПараметрыЗапроса);
		ИначеЕсли Метод = "delegation" Тогда
			СтруктураОтвета = API.ДелегироватьЗаявку(Идентификатор, Запрос.ПараметрыЗапроса);
		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция digestGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		СтруктураОтвета = API.ПолучитьВнеплановыйДайджест(Запрос.ПараметрыЗапроса);
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки);

КонецФункции    

Функция digestPOST(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда 
		СтруктураОтвета = API.ОбозначитьДайджестОпубликованным(Запрос);		
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки);
	
КонецФункции

Функция directionsGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		СтруктураОтвета = API.СписокНаправлений();
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция directionsIdEntitiesGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Идентификатор = Запрос.ПараметрыURL.Получить("id");
		СтруктураОтвета = API.ПолучитьЮридическиеЛицаНаправления(Идентификатор);
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция elapsedTimeGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = НРег(Запрос.ПараметрыURL.Получить("method"));
		
		Если Метод = "activities" Тогда
			СтруктураОтвета = API.ПолучитьДоступныеВидыДеятельности(Запрос.ПараметрыЗапроса);
		ИначеЕсли Метод = "get" Тогда
			СтруктураОтвета = API.ПолучитьТрудозатратыОбъекта(Запрос.ПараметрыЗапроса);
		ИначеЕсли Метод = "report" Тогда
			СтруктураОтвета = API.ПолучитьТрудозатратыЗаПериод(Запрос.ПараметрыЗапроса);
		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция elapsedTimePOST(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = НРег(Запрос.ПараметрыURL.Получить("method"));
		
		Если Метод = "add" Тогда
			СтруктураОтвета = API.ЗаписатьТрудозатратыПоОбъекту(Запрос);
		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция elapsedTimePUT(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = НРег(Запрос.ПараметрыURL.Получить("method"));
		
		Если Метод = "edit" Тогда
			СтруктураОтвета = API.ИзменитьТрудозатратыПоОбъекту(Запрос);
		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция elapsedTimeDELETE(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = НРег(Запрос.ПараметрыURL.Получить("method"));
		
		Если Метод = "delete" Тогда
			СтруктураОтвета = API.УдалитьТрудозатратыПоОбъекту(Запрос.ПараметрыЗапроса);
		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция filesGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Идентификатор = НРег(Запрос.ПараметрыURL.Получить("id"));
		
		СтруктураОтвета = API.ПолучитьФайл(Идентификатор);
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция internalWorksGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = НРег(Запрос.ПараметрыURL.Получить("method"));
		
		Если Метод = "list" Тогда
			СтруктураОтвета = API.ПолучитьСписокВнутреннихТрудозатрат(Запрос.ПараметрыЗапроса);
		ИначеЕсли Метод = "linkguid" Тогда
			СтруктураОтвета = API.ПолучитьИдентификаторВнутреннихТрудозатрат(Запрос.ПараметрыЗапроса);
		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
		
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция internalWorksPOST(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = НРег(Запрос.ПараметрыURL.Получить("method"));
		
		Если Метод = "add" Тогда
			СтруктураОтвета = API.СоздатьВнутренниеТрудозатраты(Запрос);
		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
		
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция kanbanGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос, Ложь);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = НРег(Запрос.ПараметрыURL.Получить("method"));
		
		Если Метод = "data" Тогда
			СтруктураОтвета = API.ПолучитьДанныеДоски(Запрос.ПараметрыЗапроса);
		ИначеЕсли Метод = "lists" Тогда
			СтруктураОтвета = API.ПолучитьКолонкиДоски(Запрос.ПараметрыЗапроса);
		ИначеЕсли Метод = "newperformer" Тогда
			СтруктураОтвета = API.ПолучитьНовогоИсполнителя(Запрос.ПараметрыЗапроса);
		ИначеЕсли Метод = "users" Тогда
			СтруктураОтвета = API.ПолучитьПользователей();
		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция kanbanPOST(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос, Ложь);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = НРег(Запрос.ПараметрыURL.Получить("method"));
		
		Если Метод = "movetolist" Тогда
			СтруктураОтвета = API.ПереместитьКарточкуКанбан(Запрос);
		ИначеЕсли Метод = "movecard" Тогда
			СтруктураОтвета = API.ИзменитьПорядокЗадач(Запрос);
		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция kanbanCardGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос, Ложь);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = НРег(Запрос.ПараметрыURL.Получить("method"));
		
		Если Метод = "data" Тогда
			СтруктураОтвета = API.ПолучитьДанныеКарточки(Запрос.ПараметрыЗапроса);
		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция kanbanCardPOST(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос, Ложь);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = НРег(Запрос.ПараметрыURL.Получить("method"));
		
		Если Метод = "add" Тогда
			СтруктураОтвета = API.ДобавитьКарточкуКанбана(Запрос);
		ИначеЕсли Метод = "delete" Тогда
			СтруктураОтвета = API.УдалитьКарточкуКанбана(Запрос);
		ИначеЕсли Метод = "edit" Тогда
			СтруктураОтвета = API.ИзменитьКарточкуКанбана(Запрос);

		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция kanbanFilterGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос, Ложь);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = НРег(Запрос.ПараметрыURL.Получить("method"));
		
		Если Метод = "list" Тогда
			СтруктураОтвета = API.ПолучитьСписокФильтров(Запрос.ПараметрыЗапроса);
		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция kanbanFilterPOST(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос, Ложь);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = НРег(Запрос.ПараметрыURL.Получить("method"));
		
		Если Метод = "add" Тогда
			СтруктураОтвета = API.ДобавитьФильтрКанбана(Запрос);
		ИначеЕсли Метод = "delete" Тогда
			СтруктураОтвета = API.УдалитьФильтрКанбана(Запрос);
		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция kanbanListPOST(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос, Ложь);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = НРег(Запрос.ПараметрыURL.Получить("method"));
		
		Если Метод = "add" Тогда
			СтруктураОтвета = API.ДобавитьКолонкуКанбана(Запрос);
		ИначеЕсли Метод = "delete" Тогда
			СтруктураОтвета = API.УдалитьКолонкуКанбана(Запрос);
		ИначеЕсли Метод = "move" Тогда
			СтруктураОтвета = API.ИзменитьПорядокЭтапов(Запрос);
		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция metadataGET(Запрос)
	
	ИмяМетаданных = Запрос.ПараметрыЗапроса.Получить("name");  
	МетаданныеРезультат = API.ПолучитьМетаданные(ИмяМетаданных);

	Возврат API.СформироватьОтвет(МетаданныеРезультат, Запрос.Заголовки, 200);

КонецФункции

Функция produсtsGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		СтруктураОтвета = API.СписокПродуктов(Запрос.ПараметрыЗапроса);
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция publicationPOST(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = НРег(Запрос.ПараметрыURL.Получить("method"));
		
		Если Метод = "tasks" Тогда
			СтруктураОтвета = API.ОбновитьДатыПубликацииЗадач(Запрос);
		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция repositoryGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = НРег(Запрос.ПараметрыURL.Получить("method"));
		
		Если Метод = "lastrepositoryversion" Тогда
			СтруктураОтвета = API.ПолучитьВерсиюКонфигурацииХранилища();
		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
		
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция sprintGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Идентификатор = Запрос.ПараметрыURL.Получить("id");

		СтруктураОтвета = API.ПолучитьДанныеСпринта(Идентификатор);
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция sprintPOST(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Идентификатор = Запрос.ПараметрыURL.Получить("id");
		
		СтруктураОтвета = API.ДобавитьЗадачуВСпринт(Идентификатор, Запрос);
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция sprintDELETE(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Идентификатор = Запрос.ПараметрыURL.Получить("id");
		
		СтруктураОтвета = API.УдалитьЗадачуИзСпринта(Идентификатор, Запрос);
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция sprintObjectsGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Идентификатор = Запрос.ПараметрыURL.Получить("id");

		СтруктураОтвета = API.ПолучитьОбъектыСпринта(Идентификатор);
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);

КонецФункции

Функция systemsGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		СтруктураОтвета = API.СписокСистем(Запрос.ПараметрыЗапроса);
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция tasksGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = НРег(Запрос.ПараметрыURL.Получить("method"));
		
		Если Метод = "list" Тогда
			СтруктураОтвета = API.ПолучитьСписокЗадач(Запрос.ПараметрыЗапроса);
		ИначеЕсли Метод = "linkguid" Тогда
			СтруктураОтвета = API.ПолучитьИдентификаторЗадачи(Запрос.ПараметрыЗапроса);
		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция tasksIdGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = Запрос.ПараметрыURL.Получить("method");
		НомерЗадачи = Запрос.ПараметрыURL.Получить("id");
		
		Если Метод = "files" Тогда
			СтруктураОтвета = API.ПолучитьФайлыОбъекта(НомерЗадачи, "task", Запрос.ПараметрыЗапроса);
		ИначеЕсли Метод = "info" Тогда
			СтруктураОтвета = API.ПолучитьДанныеЗадачи(НомерЗадачи, Запрос.ПараметрыЗапроса);
		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция tasksPOST(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = НРег(Запрос.ПараметрыURL.Получить("method"));
		
		Если Метод = "add" Тогда
			СтруктураОтвета = API.БыстроеСозданиеЗадачи(Запрос);
		ИначеЕсли Метод = "gettaskinfo" Тогда
			СтруктураОтвета = API.ПолучитьИнформациюПоЗадачам(Запрос);
		ИначеЕсли Метод = "teamcitylasttestresult" Тогда
			СтруктураОтвета = API.ОбновитьРезультатПоследнегоТестирования(Запрос);	
		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция tasksIdPOST(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Метод = Запрос.ПараметрыURL.Получить("method");
		НомерЗадачи = Запрос.ПараметрыURL.Получить("id");
		
		Если Метод = "plan" Тогда
			СтруктураОтвета = API.ЗаписатьStoryPoint(НомерЗадачи, Запрос);	
		Иначе
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(1);
		КонецЕсли;
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция toolCountersGET(Запрос)
	
	СтруктураОтвета = API.ПолучитьСчетчикиИнструментов(Запрос.ПараметрыЗапроса);
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки);
	
КонецФункции

Функция usersIdGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос);
	
	Если РезультатПроверки.Успешно Тогда
		Идентификатор =  Запрос.ПараметрыURL.Получить("id");
		
		СтруктураОтвета = API.ПолучитьДанныеПользователя(Идентификатор);
	Иначе
		СтруктураОтвета = РезультатПроверки.СтруктураОтвета;
	КонецЕсли;
	
	Возврат API.СформироватьОтвет(СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	
КонецФункции

Функция usersUnsubscribeGET(Запрос)
	
	РезультатПроверки = API.ПередОбработкойЗапроса(Запрос, Ложь);
	
	Если РезультатПроверки.Успешно Тогда
		Возврат API.ОтписатьПользователяОтОповещений(Запрос.ПараметрыЗапроса);
	Иначе
		Возврат API.СформироватьОтвет(РезультатПроверки.СтруктураОтвета, Запрос.Заголовки, РезультатПроверки.КодОтвета);
	КонецЕсли;
	
КонецФункции

#КонецОбласти
