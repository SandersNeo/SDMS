///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////
 
 #Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)   
	
	Пользователь = ПараметрыСеанса.ТекущийПользователь;
	ПутьККартинке = "";

	МассивФайлов = РегистрыСведений.ПрикрепленныеФайлы.ПолучитьФайлыОбъекта(Пользователь, 
		Перечисления.НазначенияФайлов.ПолныйАватарПользователя);	
		
	Если МассивФайлов.Количество() > 0 Тогда  
		ПолныйАватар = МассивФайлов[0].Ссылка;
		
		Если МассивФайлов[0].ПолучатьИзMinio Тогда
			
			ВнешнееХранилище = "";

			НастройкиПодключения = ИнтеграцияДополнительныхПодсистемПовтИсп.ПолучитьНастройкиПодключенияКMinio();
			Если НастройкиПодключения <> Неопределено Тогда
				ВнешнееХранилище = СтрШаблон("https://%1:%2/", НастройкиПодключения.Сервер, НастройкиПодключения.Порт);
			КонецЕсли;
	
			АдресХраненияАватаров = Константы.КаталогХраненияАватаровПользователей.Получить();	
			ПутьККартинке = СтрШаблон("%1%2/%3", ВнешнееХранилище, АдресХраненияАватаров, МассивФайлов[0].ИмяФайла);
		Иначе
			ИД = Пользователь.УникальныйИдентификатор();
			АдресХраненияАватаров = WebОкружениеВызовСервера.АдресХраненияАватаров(); 
			ПутьККартинке = АдресХраненияАватаров + "/" + ИД + "/" + МассивФайлов[0].ИмяФайла;
		КонецЕсли;
	КонецЕсли; 
	
	МассивФайлов = РегистрыСведений.ПрикрепленныеФайлы.ПолучитьФайлыОбъекта(Пользователь, 
		Перечисления.НазначенияФайлов.ОбрезанныйАватарПользователя);	
	
	Если МассивФайлов.Количество() > 0 Тогда
		ОбрезанныйАватар = МассивФайлов[0].Ссылка;
	КонецЕсли;
	
	СформироватьСтраницу(ПутьККартинке);   
	
	Если КлиентскоеПриложение.ТипПриложения() = ТипКлиентскогоПриложения.ВебКлиент Тогда
		Элементы.HTMLПоле.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Загрузить(Команда)
	
	Расширения = ПовторноеИспользованиеВызовСервера.ДопустимыеРасширенияИзображенияВОПисанииДокумента();
	Массив = Новый Массив;
	
	Для Каждого Расширение Из Расширения Цикл
		Массив.Добавить("*." +Расширение);
	КонецЦикла;
	
	Фильтр = СтрШаблон("Картинки | %1", СтрСоединить(Массив, ";"));
	
	ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов;
	ПараметрыДиалога.Фильтр = Фильтр;
	ПараметрыДиалога.Заголовок = "Выбрать картинку";
	ПараметрыДиалога.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьПомещениеФайловВоВременноеХранилище", ЭтотОбъект);  
	НачатьПомещениеФайлаНаСервер(Оповещение,,,,	ПараметрыДиалога, УникальныйИдентификатор);	
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	СформироватьСтраницу("");
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
    Данные = Элементы.HTMLПоле.Документ.defaultView.cropImage(); 
	СохранитьНаСервере(Данные);	
	Закрыть(); 
		
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗавершитьПомещениеФайловВоВременноеХранилище(ПомещенныйФайл, Параметры) Экспорт
	
	Если ПомещенныйФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьЗагруженныйФайл(ПомещенныйФайл.Адрес);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗагруженныйФайл(Адрес)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	Строка = "data:image/png;base64," + Base64Строка(ДвоичныеДанные); 
	СформироватьСтраницу(Строка);
	
КонецПроцедуры   

&НаСервере
Функция ПолучитьСвойстваФайла(Файл, Каталог)
	
	СвойстваФайла = Справочники.Файлы.СвойстваФайла();     
	
	Если ЗначениеЗаполнено(Файл) Тогда
		ЗаполнитьЗначенияСвойств(СвойстваФайла, Файл);
		СвойстваФайла.ИмяФайла = Строка(Файл);  
		СвойстваФайла.ОригинальноеИмя = СвойстваФайла.ИмяФайла;		
	Иначе
		СсылкаНовогоФайла = Справочники.Файлы.ПолучитьСсылку();
		
		ИмяФайла = СтрШаблон("%1.%2", Строка(СсылкаНовогоФайла.УникальныйИдентификатор()), "png");
		СвойстваФайла.ИмяФайла = ИмяФайла;
		СвойстваФайла.Описание = "";
		СвойстваФайла.Расширение = "png";  
		СвойстваФайла.ОригинальноеИмя = ИмяФайла;
		СвойстваФайла.Каталог = Строка(Пользователь.УникальныйИдентификатор());
		СвойстваФайла.Ссылка = СсылкаНовогоФайла;
		СвойстваФайла.НовыйФайл = Истина;
	КонецЕсли;
	
	СвойстваФайла.Вставить("Ссылка", Файл);
	
	Возврат СвойстваФайла;

КонецФункции
		     
&НаСервере
Процедура СформироватьСтраницу(ДанныеКартинка)
	
	Адрес = WebОкружениеВызовСервера.АдресПубликацииСлужебныхДанных();	
	ТекстТело = "";
	
    Текст =	
	"<!DOCTYPE html>
	|<html lang=""en"">
	|<head>                   
	|  <meta charset=""utf-8"">
	|  <link rel=""stylesheet"" href=""%1/css/cropper.css"">
	|  <style>
	|	body {
	|		margin: 4px;
	|	}
	|
	|    .container {
	|      height:  100%%;
	|      width: 100%%;
	|    }
	|
	|    .empty {
	|      background-color:  gray;
	|    }
	|
	|    img {
	|      height:  100%%;
	|      width: 100%%;
	|    }
	|
	|    .cropper-view-box,
	|    .cropper-face {
	|      border-radius: 50%%;
	|    }
	|
	|    }
	|  </style>
	|</head>
	|<body class = '%3'>
	| <div class=""container"" %4>  
	|    <div>
	|      <img id=""image"" src=""%2"" alt=""Picture"">
	|    </div>
	|  </div>  	
	|  <script src=""%1/js/cropper.js""></script>
	|  <script>
	|    var croppable;
	|    var cropper;
	|
	|    function getRoundedCanvas(sourceCanvas) {
	|      var canvas = document.createElement('canvas');
	|      var context = canvas.getContext('2d');
	|      var width = sourceCanvas.width;
	|      var height = sourceCanvas.height;
	|
	|      canvas.width = width;
	|      canvas.height = height;
	|      context.imageSmoothingEnabled = true;
	|      context.drawImage(sourceCanvas, 0, 0, width, height);
	|      context.globalCompositeOperation = 'destination-in';
	|      context.beginPath();
	|      context.arc(width / 2, height / 2, Math.min(width, height) / 2, 0, 2 * Math.PI, true);
	|      context.fill();
	|      return canvas;
	|    }
	|
	|    function load() {
	|      var image = document.getElementById('image'); 
	| 
	| 		if (image.src == '') 
	| 			{return;}
	| 	
	|      croppable = false;
	|      cropper = new Cropper(image, {
	|        aspectRatio: 1,
	|        viewMode: 1,
	|        ready: function () {
	|          croppable = true;
	|        },
	|      });
	|    }  
	|         
	|    function cropImage() {
	|        let croppedCanvas;
	|        let roundedCanvas;
	|        let roundedImage;
	|        let crop = '###empty';
	|        let original = ''; 
	|
	|        if (croppable)
	|			 {
	|			 // Crop
	|  		     croppedCanvas = cropper.getCroppedCanvas();
	|
	|      		 // Round
	|     		 roundedCanvas = getRoundedCanvas(croppedCanvas);
	|            original = document.getElementById('image').src;
	|			 crop = roundedCanvas.toDataURL('image/png');}
	|              
	| 		 let result = {
	| 		   'crop': crop,
	| 		   'original': original
	| 		   };  
	|		 return JSON.stringify(result);
	|     };
	|
	|    window.addEventListener('DOMContentLoaded', function () {
	|    	load();
	|    });
	|  </script>
	|</body>
	|</html>"; 
	
	Пусто = НЕ ЗначениеЗаполнено(ДанныеКартинка);  
	HTMLПоле = СтрШаблон(Текст, Адрес, ДанныеКартинка, ?(Пусто, "empty", ""), ?(Пусто, "hidden", ""));
	
КонецПроцедуры   
  
&НаСервере
Процедура СохранитьНаСервере(JSON)
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(JSON);
	Данные = ПрочитатьJSON(Чтение);
	Чтение.Закрыть();	
	
	КаталогВладельца = Строка(Пользователь.УникальныйИдентификатор());
	
	СохранятьНаСервер = ИнтеграцияДополнительныхПодсистем.ОпределитьМестоХраненияФайлов();
			
	Если СохранятьНаСервер Тогда
		КаталогФайловНаСервере = ПовторноеИспользованиеВызовСервера.КаталогХраненияАватаровНаСервере();
		КаталогСРазделителем = РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(КаталогФайловНаСервере);
		
		КаталогХраненияФайлов = ПовторноеИспользованиеВызовСервера.ЗначениеКонстантыКаталогХраненияФайловНаСервере();

		Каталог = КаталогСРазделителем + РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(КаталогВладельца);
		
		Куда = РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(КаталогХраненияФайлов) 
			+ РаботаСФайламиКлиентСервер.ДобавитьРазделительПути("avatars_delete")
			+ РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(КаталогВладельца);
	Иначе
		Каталог = Константы.КаталогХраненияАватаровПользователей.Получить();	
	КонецЕсли;
		
	Если Данные.crop = "###empty" Тогда  
		
		// Это очистка аватара, нужно отвязать от пользователя   
		Если ЗначениеЗаполнено(ПолныйАватар) Тогда
			Набор = РегистрыСведений.ПрикрепленныеФайлы.СоздатьНаборЗаписей();
			Набор.Отбор.Объект.Установить(Пользователь);
			Набор.Отбор.Файл.Установить(ПолныйАватар);
			Набор.Записать(Истина);
			
			Если СохранятьНаСервер Тогда
				РаботаСФайламиСервер.ПереместитьФайлССервера(ПолныйАватар, Каталог, Куда);
			КонецЕсли;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ОбрезанныйАватар) Тогда
			Набор = РегистрыСведений.ПрикрепленныеФайлы.СоздатьНаборЗаписей();
			Набор.Отбор.Объект.Установить(Пользователь);
			Набор.Отбор.Файл.Установить(ОбрезанныйАватар);
			Набор.Записать(Истина);
			
			Если СохранятьНаСервер Тогда
				РаботаСФайламиСервер.ПереместитьФайлССервера(ОбрезанныйАватар, Каталог, Куда);
			КонецЕсли;
		КонецЕсли; 
		
		Взаимодействие.ИзменениеАватараПользователя();  		
	Иначе                        
		
		ИмяСобытия = "Редактор аватара.Сохранение изображения";
		
		Если СохранятьНаСервер Тогда
			СоздатьКаталог(Каталог);  	
		КонецЕсли;
		
		Префикс = "data:image/png;base64,";
		ДвоичныеДанные = Base64Значение(СтрЗаменить(Данные.crop, Префикс, ""));   	
		
		СвойствоФайла = ПолучитьСвойстваФайла(ОбрезанныйАватар, Каталог);
		
		ФайлСсылка = РаботаСФайламиСервер.ОбработатьФайлНаСервере(СвойствоФайла, ДвоичныеДанные,
			Перечисления.НазначенияФайлов.ОбрезанныйАватарПользователя, Каталог, Пользователь, ИмяСобытия, СохранятьНаСервер); 
	
		Если ФайлСсылка = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Взаимодействие.ИзменениеАватараПользователя(ДвоичныеДанные);
		
		// Если оригинальная картинка в base64, значит её перегружали, нужно обновить 
		Если СтрНайти(Данные.original, "data:image/png;base64,") > 0 Тогда         
			original = СтрЗаменить(Данные.original, "%0A", ""); 
			ДвоичныеДанные = Base64Значение(СтрЗаменить(original, "data:image/png;base64,", "")); 
			
			СвойствоФайла = ПолучитьСвойстваФайла(ПолныйАватар, Каталог);                  	
            РаботаСФайламиСервер.ОбработатьФайлНаСервере(СвойствоФайла, ДвоичныеДанные,
				Перечисления.НазначенияФайлов.ПолныйАватарПользователя, Каталог, Пользователь, ИмяСобытия, СохранятьНаСервер); 
		КонецЕсли; 				   		
	КонецЕсли;   
			
КонецПроцедуры

#КонецОбласти
