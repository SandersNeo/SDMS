///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем КэшВспомогательныхДанных;

&НаКлиенте
Перем ИдентификаторТекущейСтроки;

// Признак, что замер уже был проведен.
// устанавливается в Истина, после первого окончания замера.
&НаКлиенте
Перем ЗамерПроизведен;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.ОбъектОтбора = Неопределено ИЛИ Параметры.ОбъектОтбора.Пустая() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПанельНавигации.Скопировать(ЭтотОбъект, Параметры);
	
	// Замер производительности
	УИДЗамера = Параметры.УИДЗамера;
		
	ИсходныйОбъект = Параметры.ОбъектОтбора;
	ОбъектСсылка = ИсходныйОбъект;
	ОтображатьИерархию = Истина;
	СкрыватьРешенные = Истина;
	
	ЗагрузитьНастройкиФормы();	
	
	ОбновитьЗаголовокКнопкиСкрыватьРешенные();
	
	Элементы.КнопкаСкрыватьРешенные.Доступность = ОтображатьИерархию;
	
	Элементы.ГруппаОсновнаяСтраница.Видимость = Ложь;
	
	ОбновитьСтруктуруПодчиненностиНаСервере();
			
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ПанельНавигацииКлиент.ПриОткрытии(Элементы, Истина);
	
	КэшВспомогательныхДанных = ПолучитьВспомогательныеДанные();	
	
	// Если не выбрано ни одного статуса или выбраны все статусы
	Если ВыбранныеСтатусы.Количество() = 0 
		ИЛИ ВыбранныеСтатусы.Количество() = (КэшВспомогательныхДанных.ПолныйСписокСтатусов.Количество() - 3) Тогда
		
		ИсключитьСтатусыИзСписка();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПроверитьДанныеВХранилище", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ПанельНавигацииКлиент.ОбработкаОповещения(ЭтотОбъект, ОбъектСсылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура ДеревоОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТекущиеДанные.ПолноеИмяМетаданных = "Группа" 
		ИЛИ ТекущиеДанные.Ссылка = ОбъектСсылка Тогда
		
		Возврат;
	КонецЕсли; 
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСтруктуруПодчиненности();
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрименитьНастройкиОтображения", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВыбранныеСтатусы", ВыбранныеСтатусы);
	ПараметрыОткрытия.Вставить("ГруппироватьПоСтатусам", ГруппироватьПоСтатусам);
	ПараметрыОткрытия.Вставить("ОтображатьИерархию", ОтображатьИерархию);
	ПараметрыОткрытия.Вставить("ОтображатьИерархиюДляТекущего", ОтображатьИерархиюДляТекущего);
	ПараметрыОткрытия.Вставить("СкрыватьРешенные", СкрыватьРешенные);
	
	ОткрытьФорму("ОбщаяФорма.НастройкиСтруктурыПодчиненности", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор, , , 
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельНавигацииНажатие(Команда)
	
	ПанельНавигацииКлиент.Нажатие(ЭтотОбъект, Команда, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура СкрытьРешенные(Команда)
	
	СкрыватьРешенные = НЕ СкрыватьРешенные;
	ИсключитьСтатусыИзСписка();
	ВывестиСтруктуруПодчиненности();
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВывестиСтруктуруПодчиненности()
	
	ВывестиСтруктуруПодчиненностиНаСервере();
	УстановитьТекущуюСтроку(ДеревоОбъектов);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтруктуруПодчиненностиНаСервере()
			
	ДанныеХранилища = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если ОтображатьИерархию Тогда
		Если ОтображатьИерархиюДляТекущего Тогда
			ОбработатьДеревоЗначений(ДанныеХранилища.Дерево.Скопировать(), Истина);
		Иначе
			ОбработатьДеревоЗначений(ДанныеХранилища.Дерево.Скопировать());
		КонецЕсли;
	Иначе
		ОбработатьТаблицуОбъектов(ДанныеХранилища.Таблица.Скопировать(), ГруппироватьПоСтатусам);
	КонецЕсли;
	
	ОбновитьЗаголовокКнопкиСкрыватьРешенные();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиФормы()

	Ключ = ПолучитьКлючНастроек();
	НастройкиФормы = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(Ключ.КлючОбъекта, Ключ.КлючНастроек);

	Если НастройкиФормы <> Неопределено Тогда
		Для Каждого Настройка Из НастройкиФормы Цикл
			Если Настройка.Ключ = "ОтображатьИерархию" Тогда
				ОтображатьИерархию = Настройка.Значение;
			ИначеЕсли Настройка.Ключ = "ОтображатьИерархиюДляТекущего" Тогда
				ОтображатьИерархиюДляТекущего = Настройка.Значение;
			ИначеЕсли Настройка.Ключ = "СкрыватьРешенные" Тогда
				СкрыватьРешенные = Настройка.Значение;
			ИначеЕсли Настройка.Ключ = "ГруппироватьПоСтатусам" Тогда
				ГруппироватьПоСтатусам = Настройка.Значение;
			ИначеЕсли Настройка.Ключ = "ОтмеченныеСтатусы" Тогда
				ВыбранныеСтатусы = Настройка.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДеревоСТекущего(Дерево, Знач Текущий)
	
	НоваяСтрока = Дерево.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Текущий);
	Для Каждого Строка Из Текущий.Строки Цикл
		ЗаполнитьДеревоСТекущего(НоваяСтрока, Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапуститьФоновоеЗадание(Знач ДеревоОбъектов, Знач ОбъектСсылка, Знач УникальныйИдентификатор, Адрес)
	
	Адрес = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	Дерево = ДанныеФормыВЗначение(ДеревоОбъектов, Тип("ДеревоЗначений"));
			
	ПараметрыФоновоеЗадание = Новый Массив;
	ПараметрыФоновоеЗадание.Добавить(ОбъектСсылка);
	ПараметрыФоновоеЗадание.Добавить(Адрес);
	ПараметрыФоновоеЗадание.Добавить(Дерево);
	
	ИмяМетода = "ОбщегоНазначения.ЗагрузитьСтруктуруПодчиненности";
	НаименованиеЗадания = НСтр("ru='Загрузить структуру подчиненности'");
	
	Возврат ОбщегоНазначения.СоздатьФоновоеЗадание(ИмяМетода, 
		ПараметрыФоновоеЗадание, НаименованиеЗадания, УникальныйИдентификатор);
		
КонецФункции

&НаКлиенте
Процедура ИсключитьСтатусыИзСписка()
	
	Если НЕ СкрыватьРешенные Тогда
		ВыбранныеСтатусы = КэшВспомогательныхДанных.ПолныйСписокСтатусов;
	Иначе
		ВыбранныеСтатусы = КэшВспомогательныхДанных.СписокСтатусов;
		ИсключаемыеСтатусы = КэшВспомогательныхДанных.ИсключаемыеСтатусы;
		Для Каждого Элемент Из ИсключаемыеСтатусы Цикл
			Статус = ВыбранныеСтатусы.НайтиПоЗначению(Элемент.Значение);
			Если Статус <> Неопределено Тогда
				ВыбранныеСтатусы.Удалить(Статус);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокКнопкиСкрыватьРешенные()
	
	Если НЕ СкрыватьРешенные Тогда
		Элементы.КнопкаСкрыватьРешенные.Заголовок = "Скрыть решенные";
	Иначе
		Элементы.КнопкаСкрыватьРешенные.Заголовок = "Отобразить все";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруПодчиненности()
	
	Результат = ЗапуститьФоновоеЗадание(ДеревоОбъектов, ОбъектСсылка, 
		ЭтотОбъект.УникальныйИдентификатор, АдресВоВременномХранилище);
	
	Если Результат.Идентификатор <> Неопределено Тогда
		ПереключитьВидимостьГруппыНаСервере(Истина);
		ПодключитьОбработчикОжидания("ПроверитьДанныеВХранилище", 1);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтруктуруПодчиненностиНаСервере()
	
	ЗапуститьФоновоеЗадание(ДеревоОбъектов, ОбъектСсылка, ЭтотОбъект.УникальныйИдентификатор, АдресВоВременномХранилище);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДеревоЗначений(Знач Дерево, Знач НачатьСТекущего = Ложь)
	
	НовоеДерево = Дерево.Скопировать();
	
	Если НачатьСТекущего Тогда
		ТекущийОбъект = Дерево.Строки.Найти(Истина, "ТекущийОбъект", Истина);
		Если ТекущийОбъект <> Неопределено Тогда
			НовоеДерево.Строки.Очистить();
			ЗаполнитьДеревоСТекущего(НовоеДерево, ТекущийОбъект);
		КонецЕсли;
	КонецЕсли;
	
	ФильтроватьСтатусы(НовоеДерево);
	
	ЗначениеВРеквизитФормы(НовоеДерево, "ДеревоОбъектов");
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТаблицуОбъектов(Знач Таблица, Знач Группировать)
	
	Дерево = РеквизитФормыВЗначение("ДеревоОбъектов", Тип("ДеревоЗначений"));
	Дерево.Строки.Очистить();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.Представление КАК Представление,
	|	Таблица.ПометкаУдаления КАК ПометкаУдаления,
	|	Таблица.ИндексКартинки КАК ИндексКартинки,
	|	Таблица.ТекущийОбъект КАК ТекущийОбъект,
	|	Таблица.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных,
	|	Таблица.НаправлениеРазработки КАК НаправлениеРазработки,
	|	Таблица.СистемаУчета КАК СистемаУчета,
	|	Таблица.Статус КАК Статус
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.Ссылка КАК Ссылка,
	|	ВременнаяТаблица.Представление КАК Представление,
	|	ВременнаяТаблица.ПометкаУдаления КАК ПометкаУдаления,
	|	ВременнаяТаблица.ИндексКартинки КАК ИндексКартинки,
	|	ВременнаяТаблица.ТекущийОбъект КАК ТекущийОбъект,
	|	ВременнаяТаблица.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных,
	|	ВременнаяТаблица.НаправлениеРазработки КАК НаправлениеРазработки,
	|	ВременнаяТаблица.СистемаУчета КАК СистемаУчета,
	|	ВременнаяТаблица.Статус КАК Статус,
	|	ВременнаяТаблица.Статус.Порядок КАК Порядок
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|ГДЕ
	|	ВременнаяТаблица.Статус В(&Статусы)
	|
	|УПОРЯДОЧИТЬ ПО 
	|	Порядок,
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ
	|%1";
	
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.УстановитьПараметр("Статусы", ВыбранныеСтатусы);
	
	Если Группировать Тогда
		Запрос.Текст = СтрШаблон(ТекстЗапроса, "ИТОГИ ПО Статус");
		ВыборкаСтатус = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСтатус.Следующий() Цикл
			Выборка = ВыборкаСтатус.Выбрать();
			СтрокаСтатуса = Дерево.Строки.Добавить();
			ПредставлениеСтатуса = ВРег(Строка(ВыборкаСтатус.Статус));
			СтрокаСтатуса.Представление = СтрШаблон("%1 (%2)", ПредставлениеСтатуса, Выборка.Количество());
			СтрокаСтатуса.УровеньВложенности = -1;
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = СтрокаСтатуса.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Представление = СтрШаблон("[%1] %2", ПредставлениеСтатуса, Выборка.Представление);
				НоваяСтрока.УровеньВложенности = -1;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Запрос.Текст = СтрШаблон(ТекстЗапроса, "");
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Дерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Представление = СтрШаблон("[%1] %2", ВРег(Строка(Выборка.Статус)), Выборка.Представление);
			НоваяСтрока.УровеньВложенности = -1;
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоОбъектов");
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьВидимостьГруппыНаСервере(Знач ЭтоДлительноеОжидание = Ложь)

	Элементы.ГруппаОсновнаяСтраница.Видимость = НЕ ЭтоДлительноеОжидание;
	Элементы.ГруппаДлительноеОжидание.Видимость = ЭтоДлительноеОжидание;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлючНастроек()
	
	Возврат Новый Структура("КлючОбъекта, КлючНастроек", "ОбщаяФорма.СтруктураПодчиненности", "НастройкиФормы");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВспомогательныеДанные()
	
	ВспомогательныеДанные = Новый Структура;
		
	СписокСтатусов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыОбъектов.Ссылка КАК Статус
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|ГДЕ
	|	НЕ СтатусыОбъектов.ПометкаУдаления";
			
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл		
		СписокСтатусов.Добавить(Выборка.Статус);		
	КонецЦикла;	
	
	ИсключаемыеСтатусы = Новый СписокЗначений;
	ИсключаемыеСтатусы.Добавить(Справочники.СтатусыОбъектов.Отклонен);
	ИсключаемыеСтатусы.Добавить(Справочники.СтатусыОбъектов.Решен);
	
	КэшВспомогательныхДанных = Новый Структура;
	КэшВспомогательныхДанных.Вставить("ПолныйСписокСтатусов", СписокСтатусов);
	КэшВспомогательныхДанных.Вставить("СписокСтатусов", СписокСтатусов);
	КэшВспомогательныхДанных.Вставить("ИсключаемыеСтатусы", ИсключаемыеСтатусы);
	
	Возврат КэшВспомогательныхДанных;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИдентификаторТекущейСтроки(Знач ДеревоЗначений, Установлена = Ложь)
		
	Если Установлена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДочерниеЭлементы = ДеревоЗначений.ПолучитьЭлементы();
	Если ДочерниеЭлементы.Количество() > 0 Тогда
		Для Каждого ЭлементКоллекции Из ДочерниеЭлементы Цикл
			Если ЭлементКоллекции.ТекущийОбъект Тогда
				Идентификатор = ЭлементКоллекции.ПолучитьИдентификатор();
				Установлена = Истина;
				Прервать;
			Иначе
				Идентификатор = ПолучитьИдентификаторТекущейСтроки(ЭлементКоллекции, Установлена);
				Если Установлена Тогда
					Возврат Идентификатор;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ТипЗнч(ДеревоЗначений) = Тип("ДанныеФормыЭлементДерева") И ДеревоЗначений.ТекущийОбъект Тогда
			Идентификатор = ДеревоЗначений.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

&НаКлиенте
Процедура ПрименитьНастройкиОтображения(Результат, ДополнительныеПараметры) Экспорт
	
	// Если пользователь отказался от применения настроек
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ Результат.ОтображатьИерархию И Результат.ОтмеченныеСтатусы.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Не выбрано ни одного статуса.", , "Структура подчиненности");
		Возврат;
	КонецЕсли;
	
	// Поместим результаты в реквизиты формы
	ГруппироватьПоСтатусам = Результат.ГруппироватьПоСтатусам;
	ОтображатьИерархию = Результат.ОтображатьИерархию;
	ОтображатьИерархиюДляТекущего = Результат.ОтображатьИерархиюДляТекущего;
	ВыбранныеСтатусы = Результат.ОтмеченныеСтатусы;	
	СкрыватьРешенные = Результат.СкрыватьРешенные;
	Элементы.КнопкаСкрыватьРешенные.Доступность = ОтображатьИерархию;
	
	Если ОтображатьИерархию Тогда
		ИсключитьСтатусыИзСписка();
	КонецЕсли;
	
	ВывестиСтруктуруПодчиненности();
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДанныеВХранилище()
	
	ДанныеЗаполнены = ПроверитьДанныеНаСервере(АдресВоВременномХранилище);
	
	Если ДанныеЗаполнены Тогда
		ОтключитьОбработчикОжидания("ПроверитьДанныеВХранилище");
		ПереключитьВидимостьГруппыНаСервере();	
		ВывестиСтруктуруПодчиненности();
		
		// Замер производительности
		Если НЕ ЗамерПроизведен Тогда	
			ИнтеграцияДополнительныхПодсистемКлиент.ЗавершитьЗамерВремени(УИДЗамера);
			ЗамерПроизведен = Истина;
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьДанныеНаСервере(Знач АдресВоВременномХранилище)
	
	Результат = Ложь;
	ДанныеХранилища = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	Если ТипЗнч(ДанныеХранилища) = Тип("Структура") Тогда										
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

&НаКлиенте
Процедура УстановитьТекущуюСтроку(ДеревоЗначений)
	
	ИдентификаторТекущейСтроки = ПолучитьИдентификаторТекущейСтроки(ДеревоЗначений);
	Если ИдентификаторТекущейСтроки <> Неопределено Тогда
		Элементы.ДеревоОбъектов.ТекущаяСтрока = ИдентификаторТекущейСтроки;				
		Элементы.ДеревоОбъектов.Развернуть(ИдентификаторТекущейСтроки);
	КонецЕсли;
				  
КонецПроцедуры

&НаСервере
Процедура ФильтроватьСтатусы(Дерево)
	
	МассивНаУдаление = Новый Массив;
	
	Для Каждого Строка Из Дерево.Строки Цикл
		Если Строка.Строки.Количество() > 0 Тогда
			ФильтроватьСтатусы(Строка);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Строка.Статус)
			И ВыбранныеСтатусы.НайтиПоЗначению(Строка.Статус) = Неопределено
			И Строка.Строки.Количество() = 0 Тогда
			
			МассивНаУдаление.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из МассивНаУдаление Цикл
		Дерево.Строки.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

#Если Клиент Тогда
	
ЗамерПроизведен = Ложь;
	
#КонецЕсли

#КонецОбласти
