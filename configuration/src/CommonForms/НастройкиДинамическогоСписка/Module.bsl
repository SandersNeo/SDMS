///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Установка одиночного режима выделения
	ИнтерфейсПриложения.УстановитьРежимВыделенияСтрокТаблицы(Ложь, Элементы.СписокНастроек); 
	
	КлючХранилища = Параметры.КлючХранилища;
	АдресНастроек = ПоместитьВоВременноеХранилище(Параметры.ПользовательскиеНастройки, УникальныйИдентификатор);
	ОбновитьСписокНастроек();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокНастроекПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	НачатьУдалениеНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНастроекПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		ИмяСохраняемыхНастроек = "";
	Иначе	
		ИмяСохраняемыхНастроек = Элемент.ТекущиеДанные.Представление;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ПереименоватьНастройку(Команда)

	ТекущаяСтрока = Элементы.СписокНастроек.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;   
	
	Строка = СписокНастроек.НайтиПоИдентификатору(ТекущаяСтрока);	
	Ответ = Ждать ВвестиСтрокуАсинх(Строка.Представление, "Новое название");       
	
	Если Ответ <> Неопределено И Ответ <> Строка.Представление Тогда 
		Если ПереименоватьНастройкуНаСервере(КлючХранилища, Строка.Значение, Ответ) Тогда
			Строка.Представление = Ответ;                                           
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройку(Команда)
	
	НачатьСохранениеНастроек();	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНастройку(Команда)
	
	НачатьУдалениеНастроек();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура НачатьСохранениеНастроек()
	
	// Поиск уже существующего представления сохраняемой настройки
	Для Каждого Настройка ИЗ СписокНастроек Цикл
		Если Настройка.Представление = ИмяСохраняемыхНастроек Тогда
			ИндексНастройки = СписокНастроек.Индекс(Настройка);
			Прервать;
		КонецЕсли;                                           
	КонецЦикла;
	
	// Если настройка под сохраняемым именем уже существует, то задаем вопрос о
	// перезаписи настройки, в противном случае сохраняем ее
	Если ИндексНастройки = Неопределено  Тогда
		СохранитьНастройкуВХранилище();
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветНаВопросСохранения", ЭтотОбъект, ИндексНастройки);
		ШаблонВопроса = "Заменить ранее сохраненную настройку ""%1"" ?"; 
		ТекстВопроса = СтрШаблон(ШаблонВопроса, Настройка.Представление); 
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУдалениеНастроек()
	
	ТекущиеДанные  = Элементы.СписокНастроек.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветНаВопросУдаления", ЭтотОбъект, ТекущиеДанные);
	
	ШаблонВопроса = "Удалить настройку ""%1"" ?"; 
	ТекстВопроса = СтрШаблон(ШаблонВопроса, ТекущиеДанные.Представление);	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокНастроек()
	
	СписокНастроек.Очистить();
	ПользовательскийСписокНастроек = ХранилищеПользовательскихНастроекДинамическихСписков.ПолучитьСписок(КлючХранилища);
	ПользовательскийСписокНастроек.СортироватьПоПредставлению();
	
	Для Каждого Настройка ИЗ ПользовательскийСписокНастроек Цикл
		НоваяСтрока = СписокНастроек.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Настройка);   
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветНаВопросУдаления(Ответ, ДополнительныеПараметры) Экспорт
		
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		// Удаляем настройку по идентификатору из хранилища настроек
		НастройкаУдалена = УдалитьНастройкуНаСервере(КлючХранилища, ДополнительныеПараметры.Значение);
		
		Если НастройкаУдалена Тогда
			
			// Что бы не обновлять список настроек на сервере, удалим настройку визуально
			СписокНастроек.Удалить(ДополнительныеПараметры);
		Иначе
			Сообщить("Не удалось удалить настройку. Необходимо повторить операцию");
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветНаВопросСохранения(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Настройка = СписокНастроек[ДополнительныеПараметры];
		СохранитьНастройкуВХранилище(Настройка.Представление, Настройка.Значение);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПереименоватьНастройкуНаСервере(Знач КлючХранилища, Знач ЗначениеНастроек, Знач ПредставлениеНастроек)
	
	ОписаниеНастроек = Новый ОписаниеНастроек;
	ОписаниеНастроек.Представление = ПредставлениеНастроек;
	
	Попытка               
		Настройка = ХранилищеПользовательскихНастроекДинамическихСписков.Загрузить(КлючХранилища, ЗначениеНастроек); 
		ХранилищеПользовательскихНастроекДинамическихСписков.Сохранить(КлючХранилища, ЗначениеНастроек, Настройка, ОписаниеНастроек);
		Результат = Истина
	Исключение
		Результат = Ложь;
		ЗаписьЖурналаРегистрации("Пользовательские действия. Переименование настроек динамического списка", УровеньЖурналаРегистрации.Ошибка, , , 
			"Не переименованы пользовательские настройки динамического списка по причине: " + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Процедура СохранитьНастройкуВХранилище(Знач ПредставлениеНастройки = Неопределено, Знач ЗначениеНастройки = Неопределено)
	
	Если ПредставлениеНастройки = Неопределено Тогда
		ПредставлениеНастройки = ИмяСохраняемыхНастроек;
	КонецЕсли;	
	
	НастройкаСохранена = СохранитьНастройкуНаСервере(КлючХранилища, АдресНастроек, ПредставлениеНастройки, ЗначениеНастройки); 
	Если НастройкаСохранена Тогда
		Закрыть(Истина);
	Иначе
		Сообщить("Не удалось сохранить настройку. Необходимо повторить операцию");
	КонецЕсли;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция СохранитьНастройкуНаСервере(Знач КлючХранилища, Знач АдресНастроек, Знач ПредставлениеНастроек, Знач ЗначениеНастроек = Неопределено)
	
	Настройка = ПолучитьИзВременногоХранилища(АдресНастроек);
	ОписаниеНастроек = Новый ОписаниеНастроек;
	ОписаниеНастроек.Представление = ПредставлениеНастроек;
	
	Если ЗначениеНастроек = Неопределено Тогда
		ЗначениеНастроек = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Попытка
		ХранилищеПользовательскихНастроекДинамическихСписков.Сохранить(КлючХранилища, ЗначениеНастроек, Настройка, ОписаниеНастроек);
		Результат = Истина
	Исключение
		Результат = Ложь;
		ЗаписьЖурналаРегистрации("Пользовательские действия. Сохранение настроек динамического списка", УровеньЖурналаРегистрации.Ошибка, , , 
			"Не сохранены пользовательские настройки динамического списка по причине: " + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Процедура СписокНастроекВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	НачатьСохранениеНастроек();
	
КонецПроцедуры

&НаСервереБезКонтекста                                                     
Функция УдалитьНастройкуНаСервере(Знач КлючХранилища, Знач ЗначениеНастроек)
	
	Попытка
		ХранилищеПользовательскихНастроекДинамическихСписков.Удалить(КлючХранилища, ЗначениеНастроек, ИмяПользователя());
		Результат = Истина
	Исключение
		Результат = Ложь;
		ЗаписьЖурналаРегистрации("Пользовательские действия. Удаление настроек динамического списка", УровеньЖурналаРегистрации.Ошибка, , ,	
			"Не удалены пользовательские настройки динамического списка по причине: " + ОписаниеОшибки());
	КонецПопытки;

	Возврат Результат;
	
КонецФункции

#КонецОбласти
