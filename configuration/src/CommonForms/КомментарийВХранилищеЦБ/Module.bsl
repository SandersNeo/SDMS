///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Ссылку на задачу сохраним в реквизите формы
	ЗадачаСсылка = Параметры.Ссылка;
	
	ОпределитьВариантОтображенияФормыИЗаполнитьДанные();
	
	//пользователи просили множественный выбор, но пока есть только одно значение
	Элементы.Метки.СписокВыбора.Добавить("#UpgradeVersion", "UpgradeVersion");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьКомментарий(Команда)
	
	ДанныеЗадачи = ПолучитьВспомогательныеДанные(ЗадачаСсылка, ВариантОтображения);
	ГотовыйКомментарий = "";
			
	КомментарийРеструктуризация = "";
	Если ЗначениеЗаполнено(КомментарийРеструктуризацияБазы) Тогда
		Разделитель = "----------------------------------------------";
		КомментарийРеструктуризация = СтрШаблон("Реструктуризация:%1%2%1%3%1", Символы.ПС, КомментарийРеструктуризацияБазы, Разделитель);
	КонецЕсли;
	
	НомерЗадачиКомментарий = СтрШаблон("{sdms-task:%1}", ДанныеЗадачи.Номер);
	ГотовыйКомментарий = СтрШаблон("%2%1%3%4", Символы.ПС, НомерЗадачиКомментарий, КомментарийРеструктуризация, КомментарийПрочиеИзменения);
	
	ОбщегоНазначенияКлиент.КопироватьТекстВБуферОбмена(ГотовыйКомментарий, "Комментарий скопирован в буфер обмена");
			
КонецПроцедуры

&НаКлиенте
Процедура СобратьКоммит_ConventionalCommits(Команда)
	
	ConventionalCommits_Коммит = СокрЛП(СтрШаблон("%1: %2
		|
		|%3
		|
		|%4 %5", ConventionalCommits_Тип, НРег(ConventionalCommits_Тема), ConventionalCommits_ТелоКомита,
		?(ЗначениеЗаполнено(ConventionalCommits_НомерЗадачи), "tasks:#" + ConventionalCommits_НомерЗадачи, ""),
		?(ЗначениеЗаполнено(ConventionalCommits_Реструктуризация), "restruct:" + ConventionalCommits_Реструктуризация, "")));
				
	ОбщегоНазначенияКлиент.КопироватьТекстВБуферОбмена(ConventionalCommits_Коммит, "Коммит скопирован в буфер обмена");
	
	//	
	//
	//ConventionalCommits_Коммит = ConventionalCommits_Тип + ": " + НРег(ConventionalCommits_Тема)
	//	+ Символы.ПС 
	//	+ Символы.ПС + Символы.Таб + СтрЗаменить(ConventionalCommits_ТелоКомита, Символы.ПС, Символы.ПС + Символы.Таб) 
	//	+ Символы.ПС 
	//	+ ?(ЗначениеЗаполнено(ConventionalCommits_НомерЗадачи), "" + Символы.ПС + "tasks:#" + ConventionalCommits_НомерЗадачи, "")
	//	+ ?(ЗначениеЗаполнено(ConventionalCommits_Реструктуризация), "" + Символы.ПС + "restruct:" + ConventionalCommits_Реструктуризация, "");
								
КонецПроцедуры

&НаКлиенте
Процедура СобратьДанныеДляMR(Команда)

	MR_Заголовок = СокрЛП(СтрШаблон("%1(%2)%3: %4", MR_Тип, MR_ОбластьПрименения,
		?(НарушениеОбратнойСовместимости, "!", ""), MR_КраткоеОписание));
		
	ЧастиСтроки = Новый Массив;
	
	Если ЗначениеЗаполнено(MR_Изменения) Тогда	
		ЧастиСтроки.Добавить(MR_Изменения);
		ЧастиСтроки.Добавить("");
	КонецЕсли;
	
	ЧастиСтроки.Добавить(СтрШаблон("Task: %1\", MR_НомерЗадачи));
	
	Если MR_Метки.Количество() > 0 Тогда
		Метки = Новый Массив;
		Для Каждого Метка Из MR_Метки Цикл
			Метки.Добавить(Метка.Значение);
		КонецЦикла;

		ЧастиСтроки.Добавить(СтрШаблон("Tags: %1\", СтрСоединить(Метки, ", ")));
	КонецЕсли;
		
	MR_Описание = СтрСоединить(ЧастиСтроки, Символы.ПС);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьКомментарииДляMerkurial()
	
	ДанныеЗадачи = ПолучитьВспомогательныеДанные(ЗадачаСсылка, ВариантОтображения);
	// Номер задачи без префикса и лидирующих нулей
	НомерБезПрефикса = Прав(ДанныеЗадачи.Номер, 10);
	НомерБезНулей = Формат(Число(НомерБезПрефикса), "ЧВН=; ЧГ=0");

	// Удалим из темы задачи не нужные символы и сформируем имя ветки	
	НаименованиеЗадачи = СформироватьИмяВеткиПоРегулярке(ДанныеЗадачи.Наименование);
	ИмяВетки_GIT = СтрШаблон("%1_-_%2", Строка(НомерБезНулей), НаименованиеЗадачи); 
	ИмяТранслитом_GIT = Транслит(ИмяВетки_GIT); 
	
	// Получим внешнюю ссылку на задачу
	ВнешняяСсылка = ОбщегоНазначения.ПолучитьHTTPСсылкуНаОбъект(ЗадачаСсылка);
	ОписаниеВетки_GIT = СтрШаблон("%1%2%3", ИмяВетки_GIT, Символы.ПС, ВнешняяСсылка); 
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьВариантОтображенияФормыИЗаполнитьДанные()
	
	Хранилище = Перечисления.ВидыХранилищСистемУчета.Хранилище1С;
	ВариантОтображения = 1;
	                                         	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СистемыУчета.Хранилище КАК Хранилище
	|ИЗ
	|	Справочник.СистемыУчета КАК СистемыУчета
	|ГДЕ
	|	СистемыУчета.Ссылка = &СистемаУчета";
	
	Запрос.УстановитьПараметр("СистемаУчета", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаСсылка, "СистемаУчета"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда	
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Хранилище = Выборка.Хранилище;
	КонецЕсли;
	
	// В зависимости от типа хранилища поменяем страницу на форме
	// и сформируем заголовок
	Если Хранилище = Перечисления.ВидыХранилищСистемУчета.Git Тогда
		ЭтотОбъект.Заголовок = "Шаблон создания ветки в системе контроля версий";
		Элементы.СтраницыВариантыОтображенияКомментария.ТекущаяСтраница = Элементы.СтраницаХранилищеGIT;
		ВариантОтображения = 2;	
		ЗаполнитьКомментарииДляMerkurial();

	ИначеЕсли Хранилище = Перечисления.ВидыХранилищСистемУчета.Хранилище1С_ConventionalCommits Тогда
		ЭтотОбъект.Заголовок = "Conventional Commits";
		Элементы.СтраницыВариантыОтображенияКомментария.ТекущаяСтраница = Элементы.СтраницаХранилище1С_ConventionalCommits;
		СткДанныеРеквизитов = ПолучитьВспомогательныеДанные(ЗадачаСсылка, 3);
		ConventionalCommits_Тип = СткДанныеРеквизитов.ТипКоммита;
		ConventionalCommits_НомерЗадачи = СткДанныеРеквизитов.Номер;
		ConventionalCommits_ТемаЗадачи = СткДанныеРеквизитов.Наименование;

	ИначеЕсли Хранилище = Перечисления.ВидыХранилищСистемУчета.Хранилище1С_MR Тогда
		ЭтотОбъект.Заголовок = "Данные для MR";
		Элементы.СтраницыВариантыОтображенияКомментария.ТекущаяСтраница = Элементы.СтраницаХранилище1С_MR;
		СткДанныеРеквизитов = ПолучитьВспомогательныеДанные(ЗадачаСсылка, 1);
		MR_НомерЗадачи  = СткДанныеРеквизитов.Номер;
		MR_Тип = "feat";
		MR_ОбластьПрименения = "core";
	КонецЕсли;
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВспомогательныеДанные(Знач ЗадачаСсылка, Знач ВариантОтображения)
		
	Если ВариантОтображения = 1 Тогда
		Номер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаСсылка, "Номер");
		ВспомогательныеДанные = Новый Структура("Номер", Номер);

	ИначеЕсли ВариантОтображения = 2 Тогда
		ВспомогательныеДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, "Номер, Наименование");

	ИначеЕсли ВариантОтображения = 3 Тогда
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, "Номер, Назначение, Наименование");
		НомерБезПрефикса = Формат(Число(ОбщегоНазначения.ПолучитьНомерОбъектаБезПрефикса(ЗадачаСсылка, Данные.Номер)), "ЧГ=");
		ТипКоммита = ?(Данные.Назначение = Справочники.НазначенияЗадач.Ошибка, "fix", "feat");
		
		ВспомогательныеДанные = Новый Структура("Номер, Наименование, ТипКоммита", НомерБезПрефикса, Данные.Наименование, ТипКоммита);
	КонецЕсли;
	
	Возврат ВспомогательныеДанные;
		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПравилаТранслита()
	
	Правила = Новый Соответствие;
	Правила.Вставить("а", "a");
	Правила.Вставить("б", "b");
	Правила.Вставить("в", "v");
	Правила.Вставить("г", "g");
	Правила.Вставить("д", "d");
	Правила.Вставить("е", "e");
	Правила.Вставить("ё", "e");
	Правила.Вставить("ж", "zh");
	Правила.Вставить("з", "z");
	Правила.Вставить("и", "i");
	Правила.Вставить("й", "y");
	Правила.Вставить("к", "k");
	Правила.Вставить("л", "l");
	Правила.Вставить("м", "m");
	Правила.Вставить("н", "n");
	Правила.Вставить("о", "o");
	Правила.Вставить("п", "p");
	Правила.Вставить("р", "r");
	Правила.Вставить("с", "s");
	Правила.Вставить("т", "t");
	Правила.Вставить("у", "u");
	Правила.Вставить("ф", "f");
	Правила.Вставить("х", "kh");
	Правила.Вставить("ц", "ts");
	Правила.Вставить("ч", "ch");
	Правила.Вставить("ш", "sh");
	Правила.Вставить("щ", "shch");
	Правила.Вставить("ъ", ""); 
	Правила.Вставить("ы", "y");
	Правила.Вставить("ь", "");
	Правила.Вставить("э", "e");
	Правила.Вставить("ю", "yu");
	Правила.Вставить("я", "ya");     
	
	Возврат Правила;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьИмяВеткиПоРегулярке(Знач Тема)
	
	ОбработанныйТекст = "";
	Шаблон = "[а-яА-ЯA-Za-z0-9. ]+";
	
	РезультатАнализаСтроки = СтрНайтиВсеПоРегулярномуВыражению(Тема, Шаблон, Истина, Истина);
		
	Для Каждого Подстрока Из РезультатАнализаСтроки Цикл	
		ОбработанныйТекст = ОбработанныйТекст + Подстрока.Значение;
	КонецЦикла;
	
	Возврат СтрЗаменить(ОбработанныйТекст, " ", "_");
	
КонецФункции

&НаСервереБезКонтекста
Функция Транслит(Знач Значение)
	
	Правила = ПолучитьПравилаТранслита();
	Результат = "";
	
	Для Позиция = 1 По СтрДлина(Значение) Цикл 
		
		Символ = Сред(Значение, Позиция, 1);		
		НСимвол = НРег(Символ);
		СимволЛатиницей = Правила[НСимвол];
		
		Если СимволЛатиницей = Неопределено Тогда
			СимволЛатиницей = Символ;
		Иначе
			СимволЛатиницей = ?(НСимвол <> Символ, ТРег(СимволЛатиницей), СимволЛатиницей);
		КонецЕсли;  
		
		Результат = Результат + СимволЛатиницей;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТемуИзЗадачи(Команда)
	
	ConventionalCommits_Тема = ConventionalCommits_ТемаЗадачи;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьТабуляцию(Команда)
	
	ConventionalCommits_ТелоКомита = СтрЗаменить(ConventionalCommits_ТелоКомита, Символы.Таб, " - ");
	
КонецПроцедуры

#КонецОбласти
