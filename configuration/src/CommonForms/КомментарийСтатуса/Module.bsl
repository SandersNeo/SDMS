///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем СвойстваПричинИзмененияСтатуса;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Статус = Неопределено;
	Параметры.Свойство("Статус", Статус);
	Параметры.Свойство("КомментарийОбязателен", КомментарийОбязателен);
	Параметры.Свойство("Объект", Объект);
	
	ПредставлениеСистемы = ?(Параметры.Свойство("Система"), СтрШаблон(" по системе <b>%1</b>", Строка(Параметры.Система)), "");
	Если Параметры.Свойство("Система") Тогда
		Система = Параметры.Система;
	КонецЕсли;
	ПредставлениеОбъекта = ?(ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаявкаНаРазработку"), "заявки на разработку", "проекта");
	ПредставлениеСтатуса = Строка(Статус);
	НеобходимостьСтрокой = ?(КомментарийОбязателен, "обязательно", "необязательно");
		
	ПричиныИзмененияСтатуса = ПовторноеИспользованиеВызовСервера.ПолучитьПричиныИзмененияСтатуса(Статус, Объект);
	
	Если ПричиныИзмененияСтатуса <> Неопределено Тогда
		Элементы.СписокПричин.Видимость = Истина;
		ЭлементыПодсказки = Новый Массив;
		СвойстваПричинИзмененияСтатуса = Новый Соответствие;
		
		Для Каждого Строка Из ПричиныИзмененияСтатуса Цикл
			Элементы.СписокПричин.СписокВыбора.Добавить(Строка.Ссылка, Строка.Наименование);
			
			СвойстваПричины = ПолучитьСтруктуруСвойствПричин(Строка.НеобходимоОтправитьУведомление, 
				Строка.ОбязательноеЗаполнениеКомментария);
				
			СвойстваПричинИзмененияСтатуса.Вставить(Строка.Ссылка, СвойстваПричины);
			
			Если ЗначениеЗаполнено(Строка.Описание) Тогда
				ЭлементыФорматированнойСтроки = Новый Массив;
				ЭлементыФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(Строка.Наименование, Новый Шрифт(, , Истина)));
				ЭлементыФорматированнойСтроки.Добавить(" - ");
				ЭлементыФорматированнойСтроки.Добавить(Строка.Описание);
				ЭлементыПодсказки.Добавить(Новый ФорматированнаяСтрока(ЭлементыФорматированнойСтроки));
				ЭлементыПодсказки.Добавить(Символы.ПС);
			КонецЕсли;
		КонецЦикла;
		
		АдресХранилища = ПоместитьВоВременноеХранилище(СвойстваПричинИзмененияСтатуса, УникальныйИдентификатор);
		Элементы.СписокПричин.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ЭлементыПодсказки);
			
		ПредставлениеПричины = "Выберите причину изменения статуса";
		
		ТекстПодсказкиКомментария = "При переводе %1 в статус ""%2"", требуется выбрать причину.";
		Элементы.ИнформацияНадпись.Заголовок = СтрШаблон(ТекстПодсказкиКомментария, ПредставлениеОбъекта, ПредставлениеСтатуса);
		Элементы.Комментарий.ПодсказкаВвода = СтрШаблон(Элементы.Комментарий.ПодсказкаВвода, ПредставлениеОбъекта, НеобходимостьСтрокой);
	Иначе
		
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
			Элементы.ИнформацияНадпись.Заголовок = СтрШаблон(Элементы.ИнформацияНадпись.Заголовок, "заявка на разработку", ПредставлениеСтатуса);
			Элементы.Комментарий.ПодсказкаВвода = СтрШаблон(Элементы.Комментарий.ПодсказкаВвода, ПредставлениеОбъекта, НеобходимостьСтрокой); 
		Иначе
			Элементы.ИнформацияНадпись.Заголовок = СтрШаблон(Элементы.ИнформацияНадпись.Заголовок, "проект", ПредставлениеСтатуса);
			Элементы.Комментарий.ПодсказкаВвода = СтрШаблон(Элементы.Комментарий.ПодсказкаВвода, ПредставлениеОбъекта, НеобходимостьСтрокой);
		КонецЕсли;
	КонецЕсли;
	
	КомментарийОбязателен = Параметры.КомментарийОбязателен;
	Заголовок = СтрШаблон("Перевод %1 в статус ""%2""", ПредставлениеОбъекта, ПредставлениеСтатуса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Элементы.СписокПричин.СписокВыбора.Количество() > 0 Тогда
		СвойстваПричинИзмененияСтатуса = ПолучитьИзВременногоХранилища(АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокПричинДобавлениеМножественныхЗначений(Элемент, Значения, СтандартнаяОбработка)
	
	ИзменениеСпискаПричин();

КонецПроцедуры

&НаКлиенте
Процедура СписокПричинУдалениеМножественныхЗначений(Элемент, Идентификаторы, СтандартнаяОбработка)
	
	ИзменениеСпискаПричин(); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьСтатус(Команда)
	
	ОчиститьСообщения();
	ЗаполненаПричина = СписокПричин.Количество() > 0;

	Если Элементы.СписокПричин.СписокВыбора.Количество() > 0 И НЕ ЗаполненаПричина Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
		Сообщение.Поле  = "ПредставлениеПричины";
		Сообщение.Текст = "Не выбрана причина изменения статуса.";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если КомментарийОбязателен И ПустаяСтрока(Комментарий) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
		Сообщение.Поле  = "Комментарий";
		Сообщение.Текст = "Не заполнен комментарий причины изменения статуса.";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ТекстКомментария = "";
	КомментарийБезТегов = "";
	
	ПредставлениеОбъектаДляКомментария = ?(ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаявкаНаРазработку"), "Заявка на разработку переведена", "Проект переведен");
	
	ДанныеСтруктура = Новый Структура;
	ДанныеСтруктура.Вставить("Событие", "ИзменениеСтатусаПоСистеме");
	ДанныеСтруктура.Вставить("Система", Строка(Система));
	ДанныеСтруктура.Вставить("Статус", ПредставлениеСтатуса);

	Если ЗаполненаПричина Тогда   
		Причина = СтрСоединить(СписокПричин.ВыгрузитьЗначения(), ", ");
		КомментарийСтатуса = ?(ЗначениеЗаполнено(Комментарий), "с комментарием: " + Символы.ПС + """" + Комментарий + """", "");
		ТекстКомментария = СтрШаблон("по причине <b>%1</b> %2", Причина, КомментарийСтатуса);
		КомментарийБезТегов = СтрШаблон("по причине %1%2", Причина, КомментарийСтатуса);
		
		ДанныеСтруктура.Вставить("Причина", Причина);
		
	ИначеЕсли ЗначениеЗаполнено(Комментарий) Тогда
		ТекстКомментария = СтрШаблон("по причине:
		|%1", Комментарий);
		
		КомментарийБезТегов = СтрШаблон("по причине:
		|%1", Комментарий);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ТекстКомментария) Тогда
		ТекстКомментария = СтрШаблон("%1 в статус <b>%2</b> %3 %4", ПредставлениеОбъектаДляКомментария, ПредставлениеСтатуса, ПредставлениеСистемы, ТекстКомментария);       
		КомментарийБезТегов = СтрШаблон("%1 в статус %2 %3 %4", ПредставлениеОбъектаДляКомментария, ПредставлениеСтатуса, ПредставлениеСистемы, КомментарийБезТегов);
	КонецЕсли;
	
	// Заменяем символы переноса строк атрибутом переноса строки в html для корректного 
	// отображения переноса в ленте комментариев
	Если НЕ ПустаяСтрока(ТекстКомментария) Тогда
		МассивСтрок = СтрРазделить(ТекстКомментария, Символы.ПС);
		ТекстКомментария = "";
		
		Для Каждого Строка Из МассивСтрок Цикл
			Если ПустаяСтрока(Строка) Тогда
				Строка = "<br>";
			КонецЕсли;
			ТекстКомментария = ТекстКомментария + "<p>" + Строка + "</p>" + Символы.ПС;
		КонецЦикла;
		
		ДанныеСтруктура.Вставить("Комментарий", ТекстКомментария);
		Данные = ЗаписатьЗначениеJSON(ДанныеСтруктура);
	Иначе
		Данные = "";	
	КонецЕсли;
	
	СтруктураКомментарий = Новый Структура("ТекстКомментария, Общедоступный, КомментарийБезТегов, Идентификатор",
		ТекстКомментария, Истина, КомментарийБезТегов, Новый УникальныйИдентификатор);
		
	Результат = Новый Структура();
	Результат.Вставить("Комментарий", СтруктураКомментарий);
	Результат.Вставить("Данные", Данные);
	
	Если ЗаполненаПричина Тогда
		СвойстваПричин = ПолучитьСвойстваПричин();
		Результат.Вставить("ПричинаИзмененияСтатуса", СписокПричин.ВыгрузитьЗначения());
		Результат.Вставить("НеобходимоОтправитьУведомление", СвойстваПричин.НеобходимоОтправитьУведомление);
	КонецЕсли;
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьСсылкуНаПроект(Команда)
	
	НачатьПрикреплениеСсылки(Команда.Имя);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьСсылкуНаЗаявку(Команда)
	
	НачатьПрикреплениеСсылки(Команда.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ИзменениеСпискаПричин()

	ОчиститьСообщения();
	НастроитьПолеКомментария();

КонецПроцедуры

&НаКлиенте
Процедура НастроитьПолеКомментария()
	
	СвойстваПричины = ПолучитьСвойстваПричин();
	КомментарийОбязателен = СвойстваПричины.ОбязательноеЗаполнениеКомментария;
	
	Если КомментарийОбязателен Тогда
		Элементы.Комментарий.ПодсказкаВвода = "обязателен для заполнения";
		
		ТекстПодсказкиКомментария = "При переводе %1 в статус ""%2"", для выбранной "
			+ "причины требуется заполнение комментария%3";
	Иначе
		Элементы.Комментарий.ПодсказкаВвода = "необязателен для заполнения";
		
		ТекстПодсказкиКомментария = "При переводе %1 в статус ""%2"", для выбранной "
			+ "причины заполнение комментария не обязательно%3";
	КонецЕсли;
	
	ДополнениеПодсказки = ?(СвойстваПричины.НеобходимоОтправитьУведомление, " и будет разослано оповещение.", ".");
	Элементы.ИнформацияНадпись.Заголовок = СтрШаблон(ТекстПодсказкиКомментария, ПредставлениеОбъекта, ПредставлениеСтатуса, ДополнениеПодсказки);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПрикреплениеСсылки(Знач ИмяКоманды)
	
	Если ИмяКоманды = "ПрикрепитьСсылкуНаЗаявку" Тогда
		Идентификатор = "Документ.ЗаявкаНаРазработку.ФормаВыбора"
	Иначе
		Идентификатор = "Справочник.Проекты.ФормаВыбора"
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборОбъекта", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("МножественныйВыбор", Ложь);
	
	ОткрытьФорму(Идентификатор, ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения,	
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборОбъекта(Результат, ДополнительныеПараметры) Экспорт
	
	// Если пользователь отказался от прикрепления ссылки
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	// Получаем внешнюю ссылку на объект
	ПредставлениеСсылки = Строка(Результат);
	НавигационнаяСсылка = ПолучитьHTTPСсылкуНаОбъект(Результат);
	СсылкаНаОбъект = СтрШаблон("<a href=""%1"">%2</a>", НавигационнаяСсылка, ПредставлениеСсылки);	
	
	// Дополним ссылку пробелами 
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(Символы.НПП);
	МассивСтрок.Добавить(СсылкаНаОбъект);
	МассивСтрок.Добавить(Символы.НПП);
	СсылкаНаОбъект = СтрСоединить(МассивСтрок);
	
	Элементы.Комментарий.ВыделенныйТекст = СсылкаНаОбъект;
	
Конецпроцедуры

&НаСервереБезКонтекста
Функция ПолучитьHTTPСсылкуНаОбъект(Знач Ссылка)
	
	Возврат ОбщегоНазначения.ПолучитьHTTPСсылкуНаОбъект(Ссылка); 
	
КонецФункции

&НаКлиенте
Функция ПолучитьСвойстваПричин()   

	СвойстваПричины = ПолучитьСтруктуруСвойствПричин();  
	
	Для Каждого Причина Из СписокПричин Цикл
		Свойства = СвойстваПричинИзмененияСтатуса.Получить(Причина.Значение); 
		
		Для Каждого Свойство Из Свойства Цикл 
			СвойстваПричины[Свойство.Ключ] = Макс(СвойстваПричины[Свойство.Ключ], Свойство.Значение);
		КонецЦикла;
	КонецЦикла;
	
	Возврат СвойстваПричины;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруСвойствПричин(НеобходимоОтправитьУведомление = Ложь, ОбязательноеЗаполнениеКомментария = Ложь)   

	Возврат Новый Структура("НеобходимоОтправитьУведомление, ОбязательноеЗаполнениеКомментария", 
		НеобходимоОтправитьУведомление, ОбязательноеЗаполнениеКомментария);
	
КонецФункции

#КонецОбласти
