///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
	
	// Видимость списков   
	Данные = Новый Структура;
	КоличествоСтраниц = 0;  
	НастройкиПрочиеОтборы = Неопределено;
	
	Если Параметры.Свойство("НастройкиПрочиеОтборы", НастройкиПрочиеОтборы) И ЗначениеЗаполнено(НастройкиПрочиеОтборы) Тогда 
		Выполнить(СтрШаблон("НастройкиПрочиеОтборы = %1", НастройкиПрочиеОтборы));
	КонецЕсли;
	
	Если Параметры.Статусы.Свойство("ДоступныеСтатусы") Тогда
		Данные.Вставить("ДоступныеСтатусы", Параметры.Статусы.ДоступныеСтатусы);
	Иначе
		Данные.Вставить("ДоступныеСтатусы", Неопределено);
	КонецЕсли; 
	
	Если Параметры.Статусы.Свойство("ИсключаемыеСтатусы") Тогда
		Данные.Вставить("ИсключаемыеСтатусы", Параметры.Статусы.ИсключаемыеСтатусы);
	Иначе
		Данные.Вставить("ИсключаемыеСтатусы", Новый Массив);
	КонецЕсли; 
	
	Если Параметры.Филиалы.Свойство("ДоступныеФилиалы") Тогда
		Данные.Вставить("ДоступныеФилиалы", Параметры.Филиалы.ДоступныеФилиалы);
	Иначе
		Данные.Вставить("ДоступныеФилиалы", Неопределено);
	КонецЕсли;  
	
	Для Каждого Страница Из Элементы.СтраницыНастроек.ПодчиненныеЭлементы Цикл 
		
		Если Страница = Элементы.СтраницаПрочее Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяНастройки = СтрЗаменить(Страница.Имя, "Страница", "");                      					
		Страница.Видимость = Параметры[ИмяНастройки].Использование;				
		
		Если НЕ Страница.Видимость Тогда
			Данные.Вставить(ИмяНастройки, Новый Массив);
		Иначе
			Данные.Вставить(ИмяНастройки, Параметры[ИмяНастройки].Значение);
			КоличествоСтраниц = КоличествоСтраниц + 1;
						
			Если ИмяНастройки = "ПрочиеОтборы" И НастройкиПрочиеОтборы <> Неопределено Тогда
				ЗаполнитьТаблицуПрочихОтборов(Параметры[ИмяНастройки], НастройкиПрочиеОтборы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	// Заполнение страницы "Прочее"
	ЕстьПрочиеНастройки = Параметры.Свойство("ПрочиеНастройки");
	
	Если ЕстьПрочиеНастройки Тогда
		КоличествоСтраниц = КоличествоСтраниц + 1;
	КонецЕсли;
	
	Для Каждого Настройка Из Элементы.СтраницаПрочее.ПодчиненныеЭлементы Цикл
		Настройка.Видимость = ЕстьПрочиеНастройки И Параметры.ПрочиеНастройки.Свойство(Настройка.Имя);
		
		Если Настройка.Видимость Тогда
			ЭтотОбъект[Настройка.Имя] = Параметры.ПрочиеНастройки[Настройка.Имя];
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоСтраниц = 1 Тогда
		Элементы.СтраницыНастроек.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;	
	КонецЕсли;
	
	ЗаполнитьСпискиНастроек(Данные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы 

&НаКлиенте
Процедура ВыбранныеГруппыЗаказчиковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ВыбранныеГруппыЗаказчиковИсключить" Тогда
		НайденнаяСтрока = ВыбранныеГруппыЗаказчиков.НайтиПоИдентификатору(ВыбраннаяСтрока);
		ИсключитьГруппуЗаказчиков(Найденнаястрока);
		РассчитатьКоличествоВыбранных(ВыбраноГрупп, ВыбранныеГруппыЗаказчиков);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыбранныеНаправленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ВыбранныеНаправленияИсключить" Тогда
		НайденнаяСтрока = ВыбранныеНаправления.НайтиПоИдентификатору(ВыбраннаяСтрока);
		НайденнаяСтрока = СписокНаправлений.НайтиПоИдентификатору(НайденнаяСтрока.ИдентификаторСтрокиСписка);
		
		ИсключитьЗначение(НайденнаяСтрока, ВыбранныеНаправления);
		РассчитатьКоличествоВыбранных(ВыбраноНаправлений, ВыбранныеНаправления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПродуктыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ВыбранныеПродуктыИсключить" Тогда
		НайденнаяСтрока = ВыбранныеПродукты.НайтиПоИдентификатору(ВыбраннаяСтрока);
		НайденнаяСтрока = СписокПродуктов.НайтиПоИдентификатору(НайденнаяСтрока.ИдентификаторСтрокиСписка);
		
		ИсключитьЗначение(НайденнаяСтрока, ВыбранныеПродукты);
		РассчитатьКоличествоВыбранных(ВыбраноПродуктов, ВыбранныеПродукты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеСистемыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ВыбранныеСистемыИсключить" Тогда
		НайденнаяСтрока = ВыбранныеСистемы.НайтиПоИдентификатору(ВыбраннаяСтрока);
		НайденнаяСтрока = СписокСистем.НайтиПоИдентификатору(НайденнаяСтрока.ИдентификаторСтрокиСписка);
		
		ИсключитьЗначение(НайденнаяСтрока, ВыбранныеСистемы);
		РассчитатьКоличествоВыбранных(ВыбраноСистем, ВыбранныеСистемы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеФилиалыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ВыбранныеФилиалыИсключить" Тогда
		НайденнаяСтрока = ВыбранныеФилиалы.НайтиПоИдентификатору(ВыбраннаяСтрока);
		НайденнаяСтрока = СписокФилиалов.НайтиПоИдентификатору(НайденнаяСтрока.ИдентификаторСтрокиСписка);
		
		ИсключитьЗначение(НайденнаяСтрока, ВыбранныеФилиалы);
		РассчитатьКоличествоВыбранных(ВыбраноФилиалов, ВыбранныеФилиалы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеСтатусыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ВыбранныеСтатусыИсключить" Тогда
		НайденнаяСтрока = ВыбранныеСтатусы.НайтиПоИдентификатору(ВыбраннаяСтрока);
		НайденнаяСтрока = СписокСтатусов.НайтиПоИдентификатору(НайденнаяСтрока.ИдентификаторСтрокиСписка);
		
		ИсключитьЗначение(НайденнаяСтрока, ВыбранныеСтатусы);
		РассчитатьКоличествоВыбранных(ВыбраноСтатусов, ВыбранныеСтатусы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВидСравненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПрочиеОтборы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ВидСравнения = ВидСравнения.ВСписке 
			ИЛИ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВСписке 
			ИЛИ ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
			ИЛИ ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
			
			Если ТипЗнч(ТекущиеДанные.ПравоеЗначение) <> Тип("СписокЗначений") Тогда
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(ТипЗнч(ТекущиеДанные.ЗначениеПоУмолчанию));
				
				ПравоеЗначение = Новый СписокЗначений;
				ПравоеЗначение.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
				ТекущиеДанные.ПравоеЗначение = ПравоеЗначение;
				ТекущиеДанные.ТипДляСвязи = ПравоеЗначение;
			КонецЕсли;
			
		Иначе
			Если ТипЗнч(ТекущиеДанные.ПравоеЗначение) = Тип("СписокЗначений") Тогда
				ТекущиеДанные.ПравоеЗначение = ТекущиеДанные.ЗначениеПоУмолчанию;
				ТекущиеДанные.ТипДляСвязи = ТекущиеДанные.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
  
&НаКлиенте
Процедура НастройкиИспользованиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПрочиеОтборы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Использование Тогда
			ВыбраноПрочихОтборов = ВыбраноПрочихОтборов + 1;
		Иначе
			ВыбраноПрочихОтборов = ВыбраноПрочихОтборов - 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПравоеЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПрочиеОтборы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ПравоеЗначение) И НЕ ТекущиеДанные.Использование Тогда
			ТекущиеДанные.Использование = Истина;
			ВыбраноПрочихОтборов = ВыбраноПрочихОтборов + 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокГруппЗаказчиковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) 
	
	НайденнаяСтрока = СписокГруппЗаказчиков.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если НайденнаяСтрока.Избранное = -1 Тогда
		Возврат;
	КонецЕсли;	
	
	Если Поле.Имя = "СписокГруппЗаказчиковПредставление" Тогда 
		НайденнаяСтрока.Пометка = ?(НайденнаяСтрока.Пометка = 0, 1, 0);
		
		ОбработатьИзменениеСтрокиДоступныхГруппЗаказчиков(НайденнаяСтрока);	
		ПроставитьПометкуПоПодчиненным(НайденнаяСтрока.ПолучитьРодителя());
	ИначеЕсли Поле.Имя = "СписокГруппЗаказчиковИзбранное" Тогда
		ПриИзмененииПометкиИзбранного(ВыбраннаяСтрока);
	КонецЕсли;
	
	РассчитатьКоличествоВыбранных(ВыбраноГрупп, ВыбранныеГруппыЗаказчиков);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокГруппЗаказчиковПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокГруппЗаказчиков.ТекущиеДанные;
	
	Если ТекущиеДанные.Избранное = -1 Тогда
		
		Если ТекущиеДанные.Пометка = 2 Тогда
			ТекущиеДанные.Пометка = 0;
		КонецЕсли;   
		
		Для Каждого Строка Из ТекущиеДанные.ПолучитьЭлементы() Цикл  
			Если НЕ Строка.Скрыть Тогда				
				Строка.Пометка = ТекущиеДанные.Пометка;
				ОбработатьИзменениеСтрокиДоступныхГруппЗаказчиков(Строка, ТекущиеДанные.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОбработатьИзменениеСтрокиДоступныхГруппЗаказчиков(ТекущиеДанные);
		ПроставитьПометкуПоПодчиненным(ТекущиеДанные.ПолучитьРодителя());
	КонецЕсли;
	
	РассчитатьКоличествоВыбранных(ВыбраноГрупп, ВыбранныеГруппыЗаказчиков);

КонецПроцедуры

&НаКлиенте
Процедура СписокНаправленийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработкаВыбораТабличногоПоля(Поле.Имя, ВыбраннаяСтрока, СписокНаправлений,
		ВыбранныеНаправления, ВыбраноНаправлений, "Направления");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНаправленийПометкаПриИзменении(Элемент)
	
	ОбработатьИзменениеСтрокиДоступных(Элементы.СписокНаправлений.ТекущиеДанные, ВыбранныеНаправления, ВыбраноНаправлений);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПродуктовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработкаВыбораТабличногоПоля(Поле.Имя, ВыбраннаяСтрока, СписокПродуктов, ВыбранныеПродукты, ВыбраноПродуктов);

КонецПроцедуры

&НаКлиенте
Процедура ДоступныеПродуктыПометкаПриИзменении(Элемент)
	
	ОбработатьИзменениеСтрокиДоступных(Элементы.СписокПродуктов.ТекущиеДанные, ВыбранныеПродукты, ВыбраноПродуктов);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСистемВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработкаВыбораТабличногоПоля(Поле.Имя, ВыбраннаяСтрока, СписокСистем,
		ВыбранныеСистемы, ВыбраноСистем, "Системы");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСистемПометкаПриИзменении(Элемент)
	
	ОбработатьИзменениеСтрокиДоступных(Элементы.СписокСистем.ТекущиеДанные, ВыбранныеСистемы, ВыбраноСистем);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФилиаловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработкаВыбораТабличногоПоля(Поле.Имя, ВыбраннаяСтрока, СписокФилиалов,
		ВыбранныеФилиалы, ВыбраноФилиалов, "Филиалы");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФилиаловПометкаПриИзменении(Элемент)
	
		ОбработатьИзменениеСтрокиДоступных(Элементы.СписокФилиалов.ТекущиеДанные, ВыбранныеФилиалы, ВыбраноФилиалов);
	
КонецПроцедуры
	
&НаКлиенте
Процедура СписокСтатусовПометкаПриИзменении(Элемент)
	
		ОбработатьИзменениеСтрокиДоступных(Элементы.СписокСтатусов.ТекущиеДанные, ВыбранныеСтатусы, ВыбраноСтатусов);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ИмяТаблицы = СтрЗаменить(Элемент.Имя, "СтрокаПоиска", "");
	
	Если ИмяТаблицы = "СписокГруппЗаказчиков" Тогда
		УстановитьВидимостьРекурсивно(Истина, ПолучитьГруппыЗаказчиковПоСтрокеПоиска(СтрокаПоискаСписокГруппЗаказчиков), 
	 		СписокГруппЗаказчиков.ПолучитьЭлементы());
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	ИмяТаблицы = СтрЗаменить(Элемент.Имя, "СтрокаПоиска", "");
	
	Если ИмяТаблицы = "СписокГруппЗаказчиков" Тогда
		УстановитьВидимостьРекурсивно(Истина, ПолучитьГруппыЗаказчиковПоСтрокеПоиска(Текст), 
	 		СписокГруппЗаказчиков.ПолучитьЭлементы());
	Иначе	
		// Установка отбора на основании значения в строке поиска
		ИнтерфейсПриложенияКлиент.УстановитьОтборПриИзмененииСтрокиПоиска(ЭтотОбъект, ИмяТаблицы, Текст, "Представление");
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	ИмяТаблицы = СтрЗаменить(Элемент.Имя, "СтрокаПоиска", "");
	
	Если ИмяТаблицы = "СписокГруппЗаказчиков" Тогда
		УстановитьВидимостьРекурсивно(Ложь, Новый Массив, 
	 		СписокГруппЗаказчиков.ПолучитьЭлементы());
	Иначе	
		Элементы[ИмяТаблицы].ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ОтметитьИзбранные(Команда)
	
	ИмяТаблицы = СтрЗаменить(Команда.Имя, "ОтметитьИзбранные", "");
	Таблица = ЭтотОбъект[ИмяТаблицы];
	
	Если ИмяТаблицы = "СписокСистем" Тогда
		ВыбранныеЗначения = ВыбранныеСистемы;
		КоличествоВыбранных = "ВыбраноСистем";
	ИначеЕсли ИмяТаблицы = "СписокНаправлений" Тогда
		ВыбранныеЗначения = ВыбранныеНаправления;
		КоличествоВыбранных = "ВыбраноНаправлений";
	ИначеЕсли ИмяТаблицы = "СписокФилиалов" Тогда
		ВыбранныеЗначения = ВыбранныеФилиалы;
		КоличествоВыбранных = "ВыбраноФилиалов";
	Иначе
		ВыбранныеЗначения = ВыбранныеГруппыЗаказчиков;
		КоличествоВыбранных = "ВыбраноГрупп";
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Если СтрокаТаблицы.Избранное Тогда
			Если НЕ СтрокаТаблицы.Пометка Тогда
				ДобавитьЗначение(СтрокаТаблицы, ВыбранныеЗначения);
			КонецЕсли;
		Иначе
			Если СтрокаТаблицы.Пометка Тогда
				ИсключитьЗначение(СтрокаТаблицы, ВыбранныеЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	РассчитатьКоличествоВыбранных(ЭтотОбъект[КоличествоВыбранных], ВыбранныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПоиск(Команда)    
	
	Если Команда.Имя = "ОчиститьПоискСписокГруппЗаказчиков" Тогда
		СтрокаПоискаСписокГруппЗаказчиков = "";
		УстановитьВидимостьРекурсивно(Ложь, Новый Массив, 
		СписокГруппЗаказчиков.ПолучитьЭлементы());  
		ПодключитьОбработчикОжидания("ОчиститьТекстРедактирования", 0.1, Истина);
	Иначе	
		ТаблицаПоиска = СтрЗаменить(Команда.Имя, "ОчиститьПоиск", "");
		СтрокаПоиска = "СтрокаПоиска" + ТаблицаПоиска;
		
		Элементы[ТаблицаПоиска].ОтборСтрок = Неопределено;
		ЭтотОбъект[СтрокаПоиска] = "";
		ТекущийЭлемент = Элементы[СтрокаПоиска];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокГруппЗаказчиковСнятьПометки(Команда)
	
	ИзменитьПометкуДоступныхГруппЗаказчиковРекурсия(СписокГруппЗаказчиков.ПолучитьЭлементы(), Ложь);
	
	РассчитатьКоличествоВыбранных(ВыбраноГрупп, ВыбранныеГруппыЗаказчиков);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокГруппЗаказчиковУстановитьПометки(Команда)
	
	ИзменитьПометкуДоступныхГруппЗаказчиковРекурсия(СписокГруппЗаказчиков.ПолучитьЭлементы(), Истина);
	
	РассчитатьКоличествоВыбранных(ВыбраноГрупп, ВыбранныеГруппыЗаказчиков);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкуДоступныхГруппЗаказчиковРекурсия(Строки, Пометка)
	
	Для Каждого СтрокаТаблицы Из Строки Цикл  
		Если СтрокаТаблицы.Избранное = -1 Тогда 
			ИзменитьПометкуДоступныхГруппЗаказчиковРекурсия(СтрокаТаблицы.ПолучитьЭлементы(), Пометка); 
			ПроставитьПометкуПоПодчиненным(СтрокаТаблицы);
		Иначе
			Если СтрокаТаблицы.Пометка <> Пометка Тогда
				Если Пометка Тогда
					ДобавитьГруппуЗаказчиков(СтрокаТаблицы);
				Иначе
					ИсключитьГруппуЗаказчиков(СтрокаТаблицы);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНаправленийСнятьПометки(Команда)
	
	ИзменитьПометки(Ложь, СписокНаправлений, ВыбранныеНаправления, ВыбраноНаправлений);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНаправленийУстановитьПометки(Команда)
	
	ИзменитьПометки(Истина, СписокНаправлений, ВыбранныеНаправления, ВыбраноНаправлений); 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПродуктовСнятьПометки(Команда)
	
	ИзменитьПометки(Ложь, СписокПродуктов, ВыбранныеПродукты, ВыбраноПродуктов);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПродуктовУстановитьПометки(Команда)
	
	ИзменитьПометки(Истина, СписокПродуктов, ВыбранныеПродукты, ВыбраноПродуктов);

КонецПроцедуры

&НаКлиенте
Процедура СписокСистемСнятьПометки(Команда)
	
	ИзменитьПометки(Ложь, СписокСистем, ВыбранныеСистемы, ВыбраноСистем);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСистемУстановитьПометки(Команда)
	
	ИзменитьПометки(Истина, СписокСистем, ВыбранныеСистемы, ВыбраноСистем);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСтатусовСнятьПометки(Команда)
	
	ИзменитьПометки(Ложь, СписокСтатусов, ВыбранныеСтатусы, ВыбраноСтатусов);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСтатусовУстановитьПометки(Команда)
	
	ИзменитьПометки(Истина, СписокСтатусов, ВыбранныеСтатусы, ВыбраноСтатусов);
	
КонецПроцедуры
	
&НаКлиенте
Процедура СписокФилиаловСнятьПометки(Команда)
	
	ИзменитьПометки(Ложь, СписокФилиалов, ВыбранныеФилиалы, ВыбраноФилиалов);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФилиаловУстановитьПометки(Команда)
	
	ИзменитьПометки(Истина, СписокФилиалов, ВыбранныеФилиалы, ВыбраноФилиалов);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	Результат = Новый Структура;
	
	Для Каждого Настройка Из Элементы.СтраницаПрочее.ПодчиненныеЭлементы Цикл		
		Если Настройка.Видимость  Тогда
			Результат.Вставить(Настройка.Имя, ЭтотОбъект[Настройка.Имя]);
		КонецЕсли;
	КонецЦикла;	    
	
	Для Каждого Страница Из Элементы.СтраницыНастроек.ПодчиненныеЭлементы Цикл 
		
		Если Страница = Элементы.СтраницаПрочее
			ИЛИ Страница = Элементы.СтраницаПрочиеОтборы Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяНастройки = СтрЗаменить(Страница.Имя, "Страница", "Выбранные");                      								
		
		Если Страница.Видимость Тогда
			Результат.Вставить(ИмяНастройки, Новый СписокЗначений);
			
			Таблица = ЭтотОбъект[ИмяНастройки];
			Для Каждого СтрокаТаблицы Из Таблица Цикл
				Результат[ИмяНастройки].Добавить(СтрокаТаблицы.Значение, СтрокаТаблицы.Представление); 
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если Элементы.СтраницаПрочиеОтборы.Видимость Тогда 
	    РезультатПрочиеОтборы = Новый Структура;
		
		Для Каждого Строка Из ПрочиеОтборы Цикл
			Если Строка.Использование Тогда
				СтруктураНастройки = Новый Структура("ВидСравнения, Использование, ПравоеЗначение");
				ЗаполнитьЗначенияСвойств(СтруктураНастройки, Строка);
				
				Если СтруктураНастройки.ПравоеЗначение = Неопределено Тогда
					СтруктураНастройки.ПравоеЗначение = Строка.ЗначениеПоУмолчанию;
				КонецЕсли;
				
				РезультатПрочиеОтборы.Вставить(Строка.ИмяПоля, СтруктураНастройки);
			КонецЕсли;
		КонецЦикла; 
		
		Результат.Вставить("ПрочиеОтборы", РезультатПрочиеОтборы);
	КонецЕсли;
	
	Закрыть(Результат);	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

&НаСервере
Функция ДобавитьНастройку(Имя, ПоУмолчанию, Тип, Представление = "", Вид = Неопределено, Использование = Ложь)
	
	Если Вид = Неопределено Тогда
		Вид = ВидСравнения.Равно;
	КонецЕсли;
	
	НоваяСтрока = ПрочиеОтборы.Добавить();
	НоваяСтрока.Использование = Использование;
	НоваяСтрока.ИмяПоля = Имя;
	НоваяСтрока.ПредставлениеИмениПоля = ?(Представление = "", Имя, Представление);
	НоваяСтрока.ЗначениеПоУмолчанию = ПоУмолчанию;
	НоваяСтрока.ТипДляСвязи = Тип;
	НоваяСтрока.ВидСравнения = Вид;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуПрочихОтборов(Знач ЗначениеОтборов, Знач НастройкиОтборов)
	
	Для Каждого Настройка Из НастройкиОтборов Цикл   
		
		Представление = Неопределено;		
		Настройка.Значение.Свойство("Представление", Представление);
		
		ВидСравненияОтбора = ?(Настройка.Значение.Свойство("ВидСравнения"), Настройка.Значение.ВидСравнения, Неопределено);
		
		Строка = ДобавитьНастройку(Настройка.Ключ, Настройка.Значение.ПоУмолчанию, Настройка.Значение.ПоУмолчанию, 
			?(Представление = Неопределено, "", Представление), ВидСравненияОтбора);
		
		ЗначениеОтбора = Неопределено;
		Если ЗначениеОтборов.Значение.Свойство(Настройка.Ключ, ЗначениеОтбора) И ТипЗнч(ЗначениеОтбора) = Тип("Структура") Тогда			
			ЗаполнитьЗначенияСвойств(Строка, ЗначениеОтбора, "Использование, ВидСравнения, ПравоеЗначение");
			
			Если ЗначениеОтбора.Использование Тогда
				ВыбраноПрочихОтборов = ВыбраноПрочихОтборов + 1;
			КонецЕсли;
		КонецЕсли;
		
		Если Строка.ПравоеЗначение = Неопределено Тогда
			Строка.ПравоеЗначение = Строка.ЗначениеПоУмолчанию;
		КонецЕсли;
		
		Строка.ТипДляСвязи = Строка.ПравоеЗначение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВКэш(КэшСтрок, Ключ, Значение, ИдентификаторСтрокиСписка)
	
	НоваяСтрока = КэшСтрок.Добавить();	
	НоваяСтрока.Ключ = Ключ;	
	НоваяСтрока.Значение = Значение;	
	НоваяСтрока.ИдентификаторСтрокиСписка = ИдентификаторСтрокиСписка;

КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьГруппуЗаказчиков(СтрокаТаблицы, ТекущийРодитель = Неопределено)
	
	НайденныеСтроки = ВыбранныеГруппыЗаказчиков.НайтиСтроки(Новый Структура("Значение", СтрокаТаблицы.Значение));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрокаВыбранных = ВыбранныеГруппыЗаказчиков.Добавить();
		НоваяСтрокаВыбранных.Исключить = БиблиотекаКартинок.УдалитьЗначение;
		ЗаполнитьЗначенияСвойств(НоваяСтрокаВыбранных, СтрокаТаблицы, "Значение, Представление");	
		ВыбраннаяСтрока = НоваяСтрокаВыбранных.ПолучитьИдентификатор();                                   
	Иначе
		ВыбраннаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();                                   
	КонецЕсли;
	
	МассивСтрок = КэшСтрокГруппыЗаказчиков.НайтиСтроки(Новый Структура("Ключ", СтрокаТаблицы.Значение));
	
	Для Каждого Строка Из МассивСтрок Цикл 
		Строка.ИдентификаторСтрокиСписка = ВыбраннаяСтрока;
		СтрокаДоступных = СписокГруппЗаказчиков.НайтиПоИдентификатору(Строка.Значение);
		СтрокаДоступных.Пометка = Истина;           
		Родитель = СтрокаДоступных.ПолучитьРодителя(); 
		
		// Если указан текущий родитель, значит не нужно пересчитывать.
		Если Родитель <> Неопределено И ТекущийРодитель <> Родитель.ПолучитьИдентификатор() Тогда
			ПроставитьПометкуПоПодчиненным(Родитель);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗначение(СтрокаТаблицы, ВыбранныеЗначения)
	
	НоваяСтрокаВыбранных = ВыбранныеЗначения.Добавить();
	НоваяСтрокаВыбранных.Исключить = БиблиотекаКартинок.УдалитьЗначение;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрокаВыбранных, СтрокаТаблицы, "Значение, Представление");
	
	СтрокаТаблицы.Пометка = Истина;
	СтрокаТаблицы.ИдентификаторСтрокиСписка = НоваяСтрокаВыбранных.ПолучитьИдентификатор();
	НоваяСтрокаВыбранных.ИдентификаторСтрокиСписка = СтрокаТаблицы.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьИдентификатор(СтарыйИдентификатор, НовыйИдентификатор) 
	
	НайденныеСтроки = КэшСтрокГруппыЗаказчиков.НайтиСтроки(Новый Структура("Значение", СтарыйИдентификатор));
	
	Для Каждого Строка Из НайденныеСтроки Цикл  
		Строка.Значение = НовыйИдентификатор;
	КонецЦикла;			
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиНастроек(Данные)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ИзбранныеГруппыЗаказчиков.Объект КАК Справочник.ГруппыЗаказчиковНаправлений) КАК ГруппаЗаказчиков
	|ПОМЕСТИТЬ ИзбранныеГруппыЗаказчиков
	|ИЗ
	|	РегистрСведений.ИзбранныеОбъекты КАК ИзбранныеГруппыЗаказчиков
	|ГДЕ
	|	ИзбранныеГруппыЗаказчиков.Владелец = &ТекущийПользователь
	|	И ИзбранныеГруппыЗаказчиков.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыИзбранныхОбъектов.ГруппыЗаказчиков)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыЗаказчиков.Ссылка КАК ГруппаЗаказчиков,
	|	ГруппыЗаказчиков.Наименование КАК Наименование,
	|	ГруппыЗаказчиков.ПометкаУдаления КАК ПометкаУдаления
	|ПОМЕСТИТЬ ТаблицаГруппЗаказчиков
	|ИЗ
	|	Справочник.ГруппыЗаказчиковНаправлений КАК ГруппыЗаказчиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК Пометка,
	|	ТаблицаГруппЗаказчиков.ГруппаЗаказчиков КАК ГруппаЗаказчиков,
	|	ТаблицаГруппЗаказчиков.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА ИзбранныеГруппыЗаказчиков.ГруппаЗаказчиков ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Избранное
	|ПОМЕСТИТЬ ПолнаяТаблицаГруппЗаказчиковНегруппированная
	|ИЗ
	|	ТаблицаГруппЗаказчиков КАК ТаблицаГруппЗаказчиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИзбранныеГруппыЗаказчиков КАК ИзбранныеГруппыЗаказчиков
	|		ПО ТаблицаГруппЗаказчиков.ГруппаЗаказчиков = ИзбранныеГруппыЗаказчиков.ГруппаЗаказчиков
	|ГДЕ
	|	ТаблицаГруппЗаказчиков.ГруппаЗаказчиков В(&ВыбранныеГруппыЗаказчиков)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	ТаблицаГруппЗаказчиков.ГруппаЗаказчиков,
	|	ТаблицаГруппЗаказчиков.Наименование,
	|	ВЫБОР
	|		КОГДА ИзбранныеГруппыЗаказчиков.ГруппаЗаказчиков ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|ИЗ
	|	ТаблицаГруппЗаказчиков КАК ТаблицаГруппЗаказчиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИзбранныеГруппыЗаказчиков КАК ИзбранныеГруппыЗаказчиков
	|		ПО ТаблицаГруппЗаказчиков.ГруппаЗаказчиков = ИзбранныеГруппыЗаказчиков.ГруппаЗаказчиков
	|ГДЕ
	|	НЕ ТаблицаГруппЗаказчиков.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПолнаяТаблицаГруппЗаказчиковНегруппированная.Пометка) КАК Пометка,
	|	МАКСИМУМ(ПолнаяТаблицаГруппЗаказчиковНегруппированная.Избранное) КАК Избранное,
	|	ПолнаяТаблицаГруппЗаказчиковНегруппированная.ГруппаЗаказчиков КАК ГруппаЗаказчиков,
	|	ПолнаяТаблицаГруппЗаказчиковНегруппированная.Наименование КАК Наименование
	|ПОМЕСТИТЬ ПолнаяТаблицаГруппЗаказчиков
	|ИЗ
	|	ПолнаяТаблицаГруппЗаказчиковНегруппированная КАК ПолнаяТаблицаГруппЗаказчиковНегруппированная
	|
	|СГРУППИРОВАТЬ ПО
	|	ПолнаяТаблицаГруппЗаказчиковНегруппированная.ГруппаЗаказчиков,
	|	ПолнаяТаблицаГруппЗаказчиковНегруппированная.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПолнаяТаблицаГруппЗаказчиков.Пометка) КАК Пометка,
	|	ПолнаяТаблицаГруппЗаказчиков.ГруппаЗаказчиков КАК Значение,
	|	ПолнаяТаблицаГруппЗаказчиков.Наименование КАК Представление,
	|	МАКСИМУМ(ПолнаяТаблицаГруппЗаказчиков.Избранное) КАК Избранное,
	|	ВЫБОР
	|		КОГДА ПолнаяТаблицаГруппЗаказчиков.Избранное
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЕСТЬNULL(НаправленияРазработки.Ссылка, ЗНАЧЕНИЕ(Справочник.НаправленияРазработки.ПустаяСсылка))
	|	КОНЕЦ КАК НаправлениеГруппировка,
	|	МАКСИМУМ(ЕСТЬNULL(НаправленияРазработки.Ссылка, ЗНАЧЕНИЕ(Справочник.НаправленияРазработки.ПустаяСсылка))) КАК Направление,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПолнаяТаблицаГруппЗаказчиков.Избранное
	|				ТОГДА """"
	|			ИНАЧЕ ЕСТЬNULL(НаправленияРазработки.Наименование, ""Пустое направление"")
	|		КОНЕЦ) КАК НаправлениеНаименование
	|ИЗ
	|	ПолнаяТаблицаГруппЗаказчиков КАК ПолнаяТаблицаГруппЗаказчиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыЗаказчиковНаправлений.Направления КАК ГруппыЗаказчиковНаправленийНаправления
	|		ПО ПолнаяТаблицаГруппЗаказчиков.ГруппаЗаказчиков = ГруппыЗаказчиковНаправленийНаправления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияРазработки КАК НаправленияРазработки
	|		ПО (ГруппыЗаказчиковНаправленийНаправления.Направление = НаправленияРазработки.Ссылка)
	|			И (НЕ НаправленияРазработки.ПометкаУдаления)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПолнаяТаблицаГруппЗаказчиков.ГруппаЗаказчиков,
	|	ПолнаяТаблицаГруппЗаказчиков.Наименование,
	|	ВЫБОР
	|		КОГДА ПолнаяТаблицаГруппЗаказчиков.Избранное
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЕСТЬNULL(НаправленияРазработки.Ссылка, ЗНАЧЕНИЕ(Справочник.НаправленияРазработки.ПустаяСсылка))
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаправлениеНаименование,
	|	Представление
	|ИТОГИ
	|	МАКСИМУМ(Пометка),
	|	МАКСИМУМ(Направление),
	|	МАКСИМУМ(НаправлениеНаименование)
	|ПО
	|	НаправлениеГруппировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ИзбранныеОбъекты.Объект КАК Справочник.НаправленияРазработки) КАК Направление
	|ПОМЕСТИТЬ ИзбранныеНаправления
	|ИЗ
	|	РегистрСведений.ИзбранныеОбъекты КАК ИзбранныеОбъекты
	|ГДЕ
	|	ИзбранныеОбъекты.Владелец = &ТекущийПользователь
	|	И ИзбранныеОбъекты.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыИзбранныхОбъектов.Направления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаправленияРазработки.Ссылка КАК Значение,
	|	НаправленияРазработки.Наименование КАК Представление,
	|	НаправленияРазработки.Ссылка В (&ВыбранныеНаправления) КАК Пометка,
	|	ИзбранныеНаправления.Направление ЕСТЬ НЕ NULL  КАК Избранное
	|ИЗ
	|	Справочник.НаправленияРазработки КАК НаправленияРазработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИзбранныеНаправления КАК ИзбранныеНаправления
	|		ПО НаправленияРазработки.Ссылка = ИзбранныеНаправления.Направление
	|ГДЕ
	|	НЕ НаправленияРазработки.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ИзбранныеОбъекты.Объект КАК Справочник.СистемыУчета) КАК Система
	|ПОМЕСТИТЬ ИзбранныеСистемы
	|ИЗ
	|	РегистрСведений.ИзбранныеОбъекты КАК ИзбранныеОбъекты
	|ГДЕ
	|	ИзбранныеОбъекты.Владелец = &ТекущийПользователь
	|	И ИзбранныеОбъекты.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыИзбранныхОбъектов.Системы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СистемыУчета.Ссылка КАК Значение,
	|	СистемыУчета.Наименование КАК Представление,
	|	СистемыУчета.Ссылка В (&ВыбранныеСистемы) КАК Пометка,
	|	ИзбранныеСистемы.Система ЕСТЬ НЕ NULL  КАК Избранное
	|ИЗ
	|	Справочник.СистемыУчета КАК СистемыУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИзбранныеСистемы КАК ИзбранныеСистемы
	|		ПО СистемыУчета.Ссылка = ИзбранныеСистемы.Система
	|ГДЕ
	|	НЕ СистемыУчета.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ИзбранныеОбъекты.Объект КАК Справочник.Филиалы) КАК Филиал
	|ПОМЕСТИТЬ ИзбранныеФилиалы
	|ИЗ
	|	РегистрСведений.ИзбранныеОбъекты КАК ИзбранныеОбъекты
	|ГДЕ
	|	ИзбранныеОбъекты.Владелец = &ТекущийПользователь
	|	И ИзбранныеОбъекты.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыИзбранныхОбъектов.Филиалы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Филиалы.Ссылка КАК Значение,
	|	Филиалы.Наименование КАК Представление,
	|	Филиалы.Ссылка В (&ВыбранныеФилиалы) КАК Пометка,
	|	ИзбранныеФилиалы.Филиал ЕСТЬ НЕ NULL  КАК Избранное
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИзбранныеФилиалы КАК ИзбранныеФилиалы
	|		ПО Филиалы.Ссылка = ИзбранныеФилиалы.Филиал
	|ГДЕ
	|	НЕ Филиалы.ПометкаУдаления
	|	И Филиалы.ТипФилиала <> ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.НеIT)
	|	И ВЫБОР
	|			КОГДА &ЕстьДоступныеФилиалы
	|				ТОГДА Филиалы.Ссылка В (&ДоступныеФилиалы)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Представление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыОбъектов.Ссылка КАК Значение,
	|	СтатусыОбъектов.Наименование КАК Представление,
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексКартинки,
	|	СтатусыОбъектов.Ссылка В (&ВыбранныеСтатусы) КАК Пометка
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ЕстьДоступныеСтатусы
	|				ТОГДА СтатусыОбъектов.Ссылка В (&ДоступныеСтатусы)
	|			ИНАЧЕ НЕ СтатусыОбъектов.Ссылка В (&ИсключаемыеСтатусы)
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыОбъектов.Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Продукты.Ссылка КАК Значение,
	|	Продукты.Наименование КАК Представление,
	|	Продукты.Ссылка В (&ВыбранныеПродукты) КАК Пометка
	|ИЗ
	|	Справочник.Продукты КАК Продукты
	|ГДЕ
	|	НЕ Продукты.ПометкаУдаления";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ВыбранныеГруппыЗаказчиков", Данные.ГруппыЗаказчиков);
	Запрос.УстановитьПараметр("ВыбранныеНаправления", Данные.Направления);
	Запрос.УстановитьПараметр("ВыбранныеСистемы", Данные.Системы);
	Запрос.УстановитьПараметр("ВыбранныеПродукты", Данные.Продукты);
	Запрос.УстановитьПараметр("ВыбранныеФилиалы", Данные.Филиалы);
	Запрос.УстановитьПараметр("ВыбранныеСтатусы", Данные.Статусы);
	Запрос.УстановитьПараметр("ДоступныеСтатусы", Данные.ДоступныеСтатусы);
	Запрос.УстановитьПараметр("ЕстьДоступныеСтатусы", Данные.ДоступныеСтатусы <> Неопределено);
	Запрос.УстановитьПараметр("ИсключаемыеСтатусы", Данные.ИсключаемыеСтатусы);
	Запрос.УстановитьПараметр("ДоступныеФилиалы", Данные.ДоступныеФилиалы);
	Запрос.УстановитьПараметр("ЕстьДоступныеФилиалы", Данные.ДоступныеФилиалы <> Неопределено);
		
	Пакеты = Запрос.ВыполнитьПакет();
	КоличествоПакетов = Пакеты.ВГраница();
	
	ЗаполнитьДерево(Пакеты[КоличествоПакетов - 8], СписокГруппЗаказчиков, ВыбранныеГруппыЗаказчиков, Данные);
	ЗаполнитьТаблицу(Пакеты[КоличествоПакетов - 6], СписокНаправлений, ВыбранныеНаправления);
	ЗаполнитьТаблицу(Пакеты[КоличествоПакетов - 4], СписокСистем, ВыбранныеСистемы);
	ЗаполнитьТаблицу(Пакеты[КоличествоПакетов - 2], СписокФилиалов, ВыбранныеФилиалы);
	ЗаполнитьТаблицу(Пакеты[КоличествоПакетов - 1], СписокСтатусов, ВыбранныеСтатусы);
	ЗаполнитьТаблицу(Пакеты[КоличествоПакетов], СписокПродуктов, ВыбранныеПродукты);
	
	СписокНаправлений.Сортировать("Избранное УБЫВ, Представление");
	СписокСистем.Сортировать("Избранное УБЫВ, Представление");
	СписокФилиалов.Сортировать("Избранное УБЫВ, Представление");
	СписокПродуктов.Сортировать("Представление");

	ИнтерфейсПриложения.УстановитьУсловноеОформлениеСпискаДоступныхЗначений(
		ЭтотОбъект, "СписокНаправлений.Избранное", "СписокНаправленийПредставление");
	ИнтерфейсПриложения.УстановитьУсловноеОформлениеСпискаДоступныхЗначений(
		ЭтотОбъект, "СписокСистем.Избранное", "СписокСистемПредставление");
	ИнтерфейсПриложения.УстановитьУсловноеОформлениеСпискаДоступныхЗначений(
		ЭтотОбъект, "СписокГруппЗаказчиков.Избранное", "СписокГруппЗаказчиковПредставление");
	ИнтерфейсПриложения.УстановитьУсловноеОформлениеСпискаДоступныхЗначений(
		ЭтотОбъект, "СписокФилиалов.Избранное", "СписокФилиаловПредставление");
	
	ВыбраноГрупп = ВыбранныеГруппыЗаказчиков.Количество();
	ВыбраноНаправлений = ВыбранныеНаправления.Количество();
	ВыбраноСистем = ВыбранныеСистемы.Количество();
	ВыбраноФилиалов = ВыбранныеФилиалы.Количество();
	ВыбраноСтатусов = ВыбранныеСтатусы.Количество();
	ВыбраноПродуктов = ВыбранныеПродукты.Количество();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицу(Пакет, Таблица, ТаблицаВыбранных)
	
	Выборка = Пакет.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Выборка.Пометка Тогда
			НоваяСтрокаВыбранных = ТаблицаВыбранных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаВыбранных, Выборка);
			
			НоваяСтрокаВыбранных.Исключить = БиблиотекаКартинок.УдалитьЗначение;
			
			НоваяСтрокаВыбранных.ИдентификаторСтрокиСписка = НоваяСтрока.ПолучитьИдентификатор();
			НоваяСтрока.ИдентификаторСтрокиСписка = НоваяСтрокаВыбранных.ПолучитьИдентификатор();
		Иначе
			НоваяСтрока.ИдентификаторСтрокиСписка = -1;
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДерево(Пакет, Дерево, ТаблицаВыбранных, Данные)
	
	// Для возможности выбора незаполненной группы
	ПустаяСсылкаГруппа = Справочники.ГруппыЗаказчиковНаправлений.ПустаяСсылка();
	
	ПустаяГруппа = Дерево.ПолучитьЭлементы().Добавить();
	ПустаяГруппа.Значение = ПустаяСсылкаГруппа;
	ПустаяГруппа.Представление = "Не заполнено";
	
	Если ТипЗнч(Данные.ГруппыЗаказчиков) = Тип("Массив") Тогда
		НайденноеЗначение = Данные.ГруппыЗаказчиков.Найти(ПустаяСсылкаГруппа);
	Иначе
		НайденноеЗначение = Данные.ГруппыЗаказчиков.НайтиПоЗначению(ПустаяСсылкаГруппа);
	КонецЕсли;
		
	ПустаяГруппа.Пометка = (НайденноеЗначение <> Неопределено);
	
	ИдентификаторСтрокиСписка = -1;

	Если ПустаяГруппа.Пометка Тогда
		НоваяСтрокаВыбранных = ТаблицаВыбранных.Добавить();
		НоваяСтрокаВыбранных.Значение = ПустаяСсылкаГруппа;
		НоваяСтрокаВыбранных.Представление = "Не заполнено";
		НоваяСтрокаВыбранных.Исключить = БиблиотекаКартинок.УдалитьЗначение;
		
		ИдентификаторСтрокиСписка = НоваяСтрокаВыбранных.ПолучитьИдентификатор();
	КонецЕсли;
	
	ДобавитьВКэш(КэшСтрокГруппыЗаказчиков, ПустаяСсылкаГруппа, 
			ПустаяГруппа.ПолучитьИдентификатор(), ИдентификаторСтрокиСписка);
			
	// Остальные группы заказчиков 
	ВыборкаНаправление = Пакет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНаправление.Следующий() Цикл  
		
		Если ВыборкаНаправление.НаправлениеГруппировка = Неопределено Тогда
			Родитель = Дерево.ПолучитьЭлементы();
		Иначе
			СтрокаНаправление = Дерево.ПолучитьЭлементы().Добавить(); 
			СтрокаНаправление.Представление = ВыборкаНаправление.НаправлениеНаименование;
			СтрокаНаправление.Направление = ВыборкаНаправление.Направление;
			СтрокаНаправление.Избранное = -1;     
			СтрокаНаправление.Пометка = ВыборкаНаправление.Пометка;  
			ДобавитьВКэш(КэшСтрокГруппыЗаказчиков, ВыборкаНаправление.Направление, СтрокаНаправление.ПолучитьИдентификатор(), -1);
			Родитель = СтрокаНаправление.ПолучитьЭлементы(); 
		КонецЕсли;
		
		Выборка = ВыборкаНаправление.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрокаДоступных = Родитель.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДоступных, Выборка, 
				"Пометка, Значение, Направление, Представление");
			// Избранное было булево. Теперь - число. Из-за этого меняется логика выбор картинки значений,
			// -1 - картинка не нужна вообще
			// 0  - картинка включен в избранное
			// 1  - картинка не включен в избранное
			НоваяСтрокаДоступных.Избранное = НЕ Выборка.Избранное;
			ИдентификаторСтрокиСписка = -1;
			
			Если Выборка.Пометка Тогда 
				Отбор = Новый Структура("Значение", Выборка.Значение); 
				Найденные = ТаблицаВыбранных.НайтиСтроки(Отбор);
				
				Если Найденные.Количество() = 0 Тогда
					НоваяСтрокаВыбранных = ТаблицаВыбранных.Добавить();
					НоваяСтрокаВыбранных.Исключить = БиблиотекаКартинок.УдалитьЗначение;	
					ИдентификаторСтрокиСписка = НоваяСтрокаВыбранных.ПолучитьИдентификатор();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаВыбранных, Выборка, "Значение, Представление");
				Иначе
					ИдентификаторСтрокиСписка = Найденные[0].ПолучитьИдентификатор();	
				КонецЕсли;
			КонецЕсли; 
			
			ДобавитьВКэш(КэшСтрокГруппыЗаказчиков, НоваяСтрокаДоступных.Значение, НоваяСтрокаДоступных.ПолучитьИдентификатор(),
			 	ИдентификаторСтрокиСписка);
		
		КонецЦикла;
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометки(Знач Пометка, СписокЭлементов, ВыбранныеЗначения, КоличествоВыбранных)
	
	Для Каждого СтрокаТаблицы Из СписокЭлементов Цикл
		Если СтрокаТаблицы.Пометка <> Пометка Тогда
			Если Пометка Тогда
				ДобавитьЗначение(СтрокаТаблицы, ВыбранныеЗначения);
			Иначе
				ИсключитьЗначение(СтрокаТаблицы, ВыбранныеЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	РассчитатьКоличествоВыбранных(КоличествоВыбранных, ВыбранныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьГруппуЗаказчиков(СтрокаТаблицы, ТекущийРодитель = Неопределено)
	
	Найденные = ВыбранныеГруппыЗаказчиков.НайтиСтроки(Новый Структура("Значение", СтрокаТаблицы.Значение));
	
	Если Найденные.Количество() > 0 Тогда                                                    
		ВыбраннаяСтрока = Найденные[0].ПолучитьИдентификатор();
		МассивСтрок = КэшСтрокГруппыЗаказчиков.НайтиСтроки(Новый Структура("ИдентификаторСтрокиСписка", ВыбраннаяСтрока));
		
		Для Каждого Строка Из МассивСтрок Цикл 
			
			Строка.ИдентификаторСтрокиСписка = -1;
			СтрокаДоступных = СписокГруппЗаказчиков.НайтиПоИдентификатору(Строка.Значение);
			СтрокаДоступных.Пометка = Ложь; 
			Родитель = СтрокаДоступных.ПолучитьРодителя(); 
			
			// Если указан текущий родитель, значит не нужно пересчитывать.
			Если Родитель <> Неопределено И ТекущийРодитель <> Родитель.ПолучитьИдентификатор() Тогда
				ПроставитьПометкуПоПодчиненным(Родитель);
			КонецЕсли;			
		КонецЦикла;			
		
		ВыбранныеГруппыЗаказчиков.Удалить(ВыбранныеГруппыЗаказчиков.НайтиПоИдентификатору(ВыбраннаяСтрока));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьЗначение(СтрокаТаблицы, ВыбранныеЗначения) 
	
	НайденнаяСтрока = ВыбранныеЗначения.НайтиПоИдентификатору(СтрокаТаблицы.ИдентификаторСтрокиСписка);
	Если НайденнаяСтрока <> Неопределено Тогда
		ВыбранныеЗначения.Удалить(НайденнаяСтрока);
	КонецЕсли;	
	
	СтрокаТаблицы.Пометка = Ложь;
	СтрокаТаблицы.ИдентификаторСтрокиСписка = -1;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораТабличногоПоля(ИмяПоля, ВыбраннаяСтрока, Список, СписокВыбранных, КоличествоВыбранных, ИмяТипа = "")
	
	Если СтрНайти(ИмяПоля, "Представление") > 0 Тогда
		НайденнаяСтрока = Список.НайтиПоИдентификатору(ВыбраннаяСтрока);
		НайденнаяСтрока.Пометка = НЕ НайденнаяСтрока.Пометка;
		
		ОбработатьИзменениеСтрокиДоступных(НайденнаяСтрока, СписокВыбранных, КоличествоВыбранных);
		
	ИначеЕсли СтрНайти(ИмяПоля, "Избранное") > 0 Тогда
		НайденнаяСтрока = Список.НайтиПоИдентификатору(ВыбраннаяСтрока);
		НайденнаяСтрока.Избранное = НЕ НайденнаяСтрока.Избранное;
		 
		ОбщегоНазначенияВызовСервера.ОбработатьПометкуИзбранного(НайденнаяСтрока.Значение, НайденнаяСтрока.Избранное, ИмяТипа);
		
		Список.Сортировать("Избранное УБЫВ, Представление");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСтрокиДоступных(СтрокаТаблицы, ВыбранныеЗначения, КоличествоВыбранных)
	
	Если СтрокаТаблицы.Пометка Тогда
		ДобавитьЗначение(СтрокаТаблицы, ВыбранныеЗначения);
	Иначе
		ИсключитьЗначение(СтрокаТаблицы, ВыбранныеЗначения);
	КонецЕсли;
	
	РассчитатьКоличествоВыбранных(КоличествоВыбранных, ВыбранныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСтрокиДоступныхГруппЗаказчиков(СтрокаТаблицы, ТекущийРодитель = Неопределено)
	
	Если СтрокаТаблицы.Пометка = Истина Тогда
		ДобавитьГруппуЗаказчиков(СтрокаТаблицы, ТекущийРодитель);	
	Иначе
		ИсключитьГруппуЗаказчиков(СтрокаТаблицы, ТекущийРодитель);	
	КонецЕсли;			
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекстРедактирования() Экспорт 
	
	Элементы.СтрокаПоискаСписокГруппЗаказчиков.ОбновитьТекстРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьСтроку(СтрокаКуда, СтрокаОткуда, НайденнаяСтрока) 
	
	СтрокиКуда = СтрокаКуда.ПолучитьЭлементы();
	СтрокиОткуда = СтрокаОткуда.ПолучитьЭлементы();
	Позиция = ПолучитьПозициюВставки(СтрокиКуда, НайденнаяСтрока.Представление);
	
	Если Позиция = Неопределено Тогда
		НоваяСтрока = СтрокиКуда.Добавить();
	Иначе
		НоваяСтрока = СтрокиКуда.Вставить(Позиция);
	КонецЕсли;
	
	Ключ = ?(НайденнаяСтрока.Избранное = -1, НайденнаяСтрока.Направление, НайденнаяСтрока.Значение); 
	ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);		          
	НоваяСтрокаИдентификатор = НоваяСтрока.ПолучитьИдентификатор();
	ЗаменитьИдентификатор(НайденнаяСтрока.ПолучитьИдентификатор(), НоваяСтрокаИдентификатор);
		
	// Установка фокуса на тот же номер строки.	
	ИндексСтроки = СтрокиОткуда.Индекс(НайденнаяСтрока);
	УдалитьИзКэша(КэшСтрокГруппыЗаказчиков, Ключ, НайденнаяСтрока.ПолучитьИдентификатор());
	СтрокиОткуда.Удалить(НайденнаяСтрока);
	КоличествоСтрок = СтрокиОткуда.Количество();
	Строки = Неопределено;
	
	// Если были еще такие группы в других направлениях, их нужно удалить
	Если НоваяСтрока.Избранное = 0 Тогда 
		
		Найденные = КэшСтрокГруппыЗаказчиков.НайтиСтроки(Новый Структура("Ключ", Ключ)); 
		
		Для Счетчик = -Найденные.Количество() + 1 По 0 Цикл  
			
			Найденная = Найденные[-Счетчик];  
			
			Если Найденная.Значение <> НоваяСтрокаИдентификатор Тогда  
				
				Удаляемая = СписокГруппЗаказчиков.НайтиПоИдентификатору(Найденная.Значение); 
				Родитель = Удаляемая.ПолучитьРодителя(); 
				// Если в направлении не осталось групп, то удалить его
				Родитель.ПолучитьЭлементы().Удалить(Удаляемая);  
				
				Если Родитель.ПолучитьЭлементы().Количество() = 0 Тогда
					УдалитьИзКэша(КэшСтрокГруппыЗаказчиков, Родитель.Направление, Родитель.ПолучитьИдентификатор());
					СписокГруппЗаказчиков.ПолучитьЭлементы().Удалить(Родитель);  
				Иначе
					ПроставитьПометкуПоПодчиненным(Родитель); 
				КонецЕсли;  
				
				УдалитьИзКэша(КэшСтрокГруппыЗаказчиков, Ключ, Найденная.Значение);
			КонецЕсли; 
			
		КонецЦикла;
	КонецЕсли;
		
	Если КоличествоСтрок = 0 Тогда                 
		
		Родитель = СтрокаОткуда.ПолучитьРодителя();		
		
		Если Родитель = Неопределено Тогда
			УдалитьИзКэша(КэшСтрокГруппыЗаказчиков, СтрокаОткуда.Направление, СтрокаОткуда.ПолучитьИдентификатор());
			Строки = СписокГруппЗаказчиков.ПолучитьЭлементы();  
			ИндексСтроки = Строки.Индекс(СтрокаОткуда);
			Строки.Удалить(СтрокаОткуда);
			КоличествоСтрок = Строки.Количество();
		КонецЕсли;		
	Иначе
		Строки = СтрокиОткуда;
	КонецЕсли;
	
	Если Строки <> Неопределено Тогда
		Если КоличествоСтрок > ИндексСтроки Тогда
			ИдентификаторСтроки = Строки[ИндексСтроки].ПолучитьИдентификатор();
		Иначе
			ИдентификаторСтроки = Строки[0].ПолучитьИдентификатор();
		КонецЕсли;
		
		Элементы.СписокГруппЗаказчиков.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьГруппыЗаказчиковПоСтрокеПоиска(СтрокаПоиска) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыЗаказчиков.Ссылка КАК Значение
	|ИЗ
	|	Справочник.ГруппыЗаказчиковНаправлений КАК ГруппыЗаказчиков
	|ГДЕ
	|	НЕ ГруппыЗаказчиков.ПометкаУдаления
	|	И ГруппыЗаказчиков.Наименование ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", "%" + СтрокаПоиска + "%"); 
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Значение");

КонецФункции

&НаКлиенте
Функция ПолучитьПозициюВставки(Строки, Сравнение, ДляНаправления = Ложь) 
	
	Позиция = Неопределено;
	
	Для Каждого Строка Из Строки Цикл
		Если НЕ ДляНаправления И Строка.Избранное < 0 Тогда 
			Позиция = Строки.Индекс(Строка);
			Прервать;
		ИначеЕсли ДляНаправления И Строка.Избранное >= 0 Тогда 
			Продолжить;
		ИначеЕсли Строка.Представление <> "Не заполнено" 
			И Строка.Представление > Сравнение Тогда
			
			Позиция = Строки.Индекс(Строка); 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Позиция;
		
КонецФункции

&НаКлиенте
Процедура ПриИзмененииПометкиИзбранного(ВыбраннаяСтрока)
	
	НайденнаяСтрока = СписокГруппЗаказчиков.НайтиПоИдентификатору(ВыбраннаяСтрока);
	НайденнаяСтрока.Избранное = НЕ НайденнаяСтрока.Избранное;
	
	ОбщегоНазначенияВызовСервера.ОбработатьПометкуИзбранного(НайденнаяСтрока.Значение, 
		?(НайденнаяСтрока.Избранное = 1, Ложь, Истина), "ГруппыЗаказчиков");
	
	// Пересортировка таблицы    
	Если НайденнаяСтрока.Избранное = 0 Тогда 	
		// Нужно переместить наверх и удалить из группировки 
		Родитель = НайденнаяСтрока.ПолучитьРодителя();
		ПереместитьСтроку(СписокГруппЗаказчиков, Родитель, НайденнаяСтрока);
		ПроставитьПометкуПоПодчиненным(Родитель); 
	Иначе 
		// Нужно поместить в нужное направление и удалить сверху
		Строки = СписокГруппЗаказчиков.ПолучитьЭлементы(); 
		СтрокиНаправлений = КэшСтрокГруппыЗаказчиков.НайтиСтроки(Новый Структура("Ключ", НайденнаяСтрока.Направление));	
		ИдентификаторНаправления = Неопределено;
		
		Если СтрокиНаправлений.Количество() = 0 Тогда 
			
			Позиция = ПолучитьПозициюВставки(Строки, Строка(НайденнаяСтрока.Направление), Истина);
			
			Если Позиция = Неопределено Тогда
				СтрокаНаправления = Строки.Добавить();
			Иначе
				СтрокаНаправления = Строки.Вставить(Позиция);
			КонецЕсли; 
			
			СтрокаНаправления.Избранное = -1;
			СтрокаНаправления.Представление = НайденнаяСтрока.Направление;
			СтрокаНаправления.Направление = НайденнаяСтрока.Направление; 
			ИдентификаторНаправления = СтрокаНаправления.ПолучитьИдентификатор();
			ДобавитьВКэш(КэшСтрокГруппыЗаказчиков, СтрокаНаправления.Направление, ИдентификаторНаправления, -1);
		Иначе 
			СтрокаНаправления = СписокГруппЗаказчиков.НайтиПоИдентификатору(Число(СтрокиНаправлений[0].Значение));
		КонецЕсли;
		
		ПереместитьСтроку(СтрокаНаправления, СписокГруппЗаказчиков, НайденнаяСтрока); 
		ПроставитьПометкуПоПодчиненным(СтрокаНаправления);
		
		Если ИдентификаторНаправления <> Неопределено Тогда 
			Элементы.СписокГруппЗаказчиков.Развернуть(ИдентификаторНаправления);	
		КонецЕсли;		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкуПоПодчиненным(Строка)   
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МаксПометка = 0;
	МинПометка = 1;
	
	Для Каждого Элемент Из Строка.ПолучитьЭлементы() Цикл 
		МаксПометка = Макс(МаксПометка, Элемент.Пометка);
		МинПометка = Мин(МинПометка, Элемент.Пометка);
	КонецЦикла;
	
	Строка.Пометка = ?(МинПометка = МаксПометка, МаксПометка, 2);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьКоличествоВыбранных(Количество, Знач Выбранные)
	
	Количество = Выбранные.Количество();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьИзКэша(КэшСтрок, Ключ, Значение)
	
	Отбор = Новый Структура("Ключ, Значение", Ключ, Значение);
	Строки = КэшСтрок.НайтиСтроки(Отбор);
	
	Если Строки.Количество() > 0 Тогда 
		КэшСтрок.Удалить(Строки[0]);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьРекурсивно(Скрыть, МассивВидимых, Строки, МаксСкрыть = Ложь)
	
	Для Каждого Строка Из Строки Цикл
		Если Строка.Избранное = -1 Тогда 
			МаксСкрыть = Скрыть;
			УстановитьВидимостьРекурсивно(Скрыть, МассивВидимых, Строка.ПолучитьЭлементы(), МаксСкрыть);	
			Строка.Скрыть = МаксСкрыть; 
		Иначе           
			Если МассивВидимых.Найти(Строка.Значение) <> Неопределено Тогда 
				Строка.Скрыть = НЕ Скрыть;
				МаксСкрыть = Строка.Скрыть;
			Иначе
				Строка.Скрыть = Скрыть;
			КонецЕсли;	
		КонецЕсли;                       
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
