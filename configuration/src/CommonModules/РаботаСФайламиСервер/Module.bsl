///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ВнешнееСоединение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда

#Область ПрограммныйИнтерфейс

// Перемещает файл с сервера, удаляя все записи с регистра прикрепленные файл
// и помечает элемент справочника Файлы на удаление
//
// Параметры:
//  Файл		 - СправочникСсылка.Файлы	 - перемещаемый файл
//  Каталог		 - Строка					 - каталог откуда перемещать файл
//  Наименование - Строка					 - имя файла
//  НовыйКаталог - Строка					 - каталог куда перемещать файл
//
Процедура ПереместитьФайлССервера(Файл, Откуда, Куда) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ПолныйПутьКФайлу = РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(Откуда) + Строка(Файл);
		НовыйПолныйПутьКФайлу = РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(Куда); 
			
		ФайлНаДиске = Новый Файл(ПолныйПутьКФайлу); 
		
		Если ФайлНаДиске.Существует() Тогда
			
			ПроверкаКаталог = Новый Файл(НовыйПолныйПутьКФайлу);  
			Если НЕ ПроверкаКаталог.Существует() Тогда
				СоздатьКаталог(НовыйПолныйПутьКФайлу);	
			КонецЕсли;
			НовыйПолныйПутьКФайлу = НовыйПолныйПутьКФайлу + Строка(Файл);		
			
			ПереместитьФайл(ПолныйПутьКФайлу, НовыйПолныйПутьКФайлу); 			
		КонецЕсли;
		
		Набор = РегистрыСведений.ПрикрепленныеФайлы.СоздатьНаборЗаписей();
		Набор.Отбор.Файл.Установить(Файл);
		Набор.Записать(Истина); 
		
		УстановитьПривилегированныйРежим(Истина);
		Файл.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);         
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
	Исключение   
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Ошибка = СтрШаблон("Не удалось переместить файл %1 по причине:%2", Файл, ОписаниеОшибки());
		ЗаписьЖурналаРегистрации("Работа с файлами.Перемещение", УровеньЖурналаРегистрации.Ошибка, , , Ошибка);
	КонецПопытки;
	
КонецПроцедуры

// Функция сохраняет файлы из временного хранилища 1С на жесткий диск и записывает
//  в базу информацию об этих файлах.
//
// Параметры:
//  Владелец				 - ОписаниеТипов.ВладелецПрисоединенныхФайлов	 - ссылка на один из объектов БД.
//  ТаблицаОписанияФайлов	 - ТаблицаЗначений	 - таблица, куда функция поместит информацию о файлах и адрес во временном хранилище.
//  Параметры			 - Стурктура	 - Дополнительные параметры обработки
//
Процедура СохранитьФайлыНаСервере(Владелец, ТаблицаОписанияФайлов, Знач Параметры = Неопределено, Знач Идентификатор = Неопределено) Экспорт
	
	Если ТаблицаОписанияФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайловСОшибками = Новый Массив;
	
	// Получим уникальный идентификатор владельца. Он будет именем каталога
	Если ЗначениеЗаполнено(Идентификатор) Тогда 
		Каталог = Идентификатор;
	Иначе
		Каталог = Строка(Владелец.УникальныйИдентификатор());
	КонецЕсли;
	
	СохранятьНаСервер = ИнтеграцияДополнительныхПодсистем.ОпределитьМестоХраненияФайлов();
	
	Если СохранятьНаСервер Тогда
		КаталогФайловНаСервере = ПовторноеИспользованиеВызовСервера.КаталогХраненияФайловНаСервере();
		КаталогСРазделителем = РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(КаталогФайловНаСервере);
		Кэш = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаОписанияФайлов Цикл		
		Если НЕ ЗначениеЗаполнено(Строка.Ссылка) ИЛИ Строка.НовыйФайл Тогда
			Строка.Каталог = Каталог;
		КонецЕсли;
		
		Если СохранятьНаСервер Тогда
			НайденныйКэш = Кэш.Получить(Строка.Каталог);
			
			Если НайденныйКэш <> Неопределено Тогда
				Строка.КаталогПолный = НайденныйКэш; 
			Иначе
				Строка.КаталогПолный = КаталогСРазделителем + РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(Строка.Каталог); 
				Кэш.Вставить(Строка.Каталог, Строка.КаталогПолный);
				// Создаем каталог. Метод не вызовет ошибку, если каталог уже существует
				СоздатьКаталог(Строка.КаталогПолный);                 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
		
	// Формирование сообщения для записи в историю изменений
	ТаблицаЗаписиВИсторию = ОбщегоНазначения.ПолучитьСтруктуруДанныхДляЗаписиВИсторию();
	
	Для Каждого СтрокаТаблицы Из ТаблицаОписанияФайлов Цикл
		ОбработатьФайл(СтрокаТаблицы, МассивФайловСОшибками, ТаблицаЗаписиВИсторию, Владелец, Идентификатор, Параметры, СохранятьНаСервер);
	КонецЦикла;
	
	// Запись о добавлении файла в историю
	Если ТаблицаЗаписиВИсторию.Количество() <> 0 Тогда
		РегистрыСведений.ИсторияИзмененийОбъектовПоСобытиям.Добавить(Владелец, ТаблицаЗаписиВИсторию);
	КонецЕсли;
	
	Если ТипЗнч(Владелец) = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
		РегистрыСведений.ДатыАктуальностиЗаявокНаРазработку.ПодтвердитьАктуальность(Владелец);
	КонецЕсли;
	
	Для Каждого Строка Из МассивФайловСОшибками Цикл
		ЗаписьЖурналаРегистрации("Работа с файлами.Сохранение", УровеньЖурналаРегистрации.Ошибка, , , Строка);
	КонецЦикла;
	
КонецПроцедуры

// Функция - Обработать файл на сервере
//
// Параметры:
//  ДанныеФайла	 - Структура								 - данные для создания файла
//  Владелец	 - ОпределяемыеТипы.ВладелецПрисоединенныхФайлов - владелец файла
//  ИмяСобытия	 - Строка										 - имя события добавления файла
// 
// Возвращаемое значение:
//  СравочникСсылка.Файлы - созданнй файл
//
Функция ОбработатьФайлНаСервере(СвойстваФайла, ДвоичныеДанные, Назначение, ПолныйКаталог, Владелец, ИмяСобытия, СохранятьНаСервер) Экспорт
	
	ФайлСсылка = Неопределено;

	СвойстваФайла.Размер = ДвоичныеДанные.Размер();
	СвойстваФайла.ИндексКартинки = РаботаСФайламиКлиентСервер.ИндексИконкиФайлаПоРасширению(СвойстваФайла.Расширение);	
	
	ПолноеИмяФайла = ПолныйКаталог + СвойстваФайла.ИмяФайла;
	
	Попытка         
		Если СохранятьНаСервер Тогда
			ДвоичныеДанные.Записать(ПолноеИмяФайла); 
		Иначе
			ИнтеграцияДополнительныхПодсистем.СохранитьФайл(СвойстваФайла.ИмяФайла, ДвоичныеДанные, ПолныйКаталог);
			СвойстваФайла.ПолучатьИзMinio = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СвойстваФайла.Ссылка) И НЕ СвойстваФайла.НовыйФайл тогда  
			ФайлСсылка = СвойстваФайла.Ссылка;  
			Справочники.Файлы.Изменить(СвойстваФайла);
		Иначе
			ФайлСсылка = Справочники.Файлы.Добавить(СвойстваФайла);
		КонецЕсли;    
			
		РегистрыСведений.ПрикрепленныеФайлы.ДобавитьЗапись(Владелец, ФайлСсылка, Назначение);
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());		
	КонецПопытки;
	
	Возврат ФайлСсылка;
	
КонецФункции

// Функция создает служебную таблицу с описанием файлов. Используется для
//  накопления информации о сохраняемых или сохраненных файлах. В последующем
//  используется в методах сохранения данных на сервер.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица для описания свойств файлов
//
Функция ТаблицаОписанияФайлов() Экспорт
	
	ОграничениеДлиныСтроки = 256;
	РазрядностьЧисел = 4;
	
	ОписаниеТипаСтрокаДлиной256 = ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(ОграничениеДлиныСтроки);
	ОписаниеТипаСтрокаНеограниченнойДлины = ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(0);
	ОписаниеТипаРазмера = ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(РазрядностьЧисел, 0, ДопустимыйЗнак.Неотрицательный);
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	
	// Уникальное имя файла на сервере без полного пути
	ТаблицаФайлов.Колонки.Добавить("Имя", ОписаниеТипаСтрокаДлиной256);
	
	// Полное уникальное имя файла с путем к файлу на сервере
	ТаблицаФайлов.Колонки.Добавить("ПолноеИмя", ОписаниеТипаСтрокаДлиной256);
	
	// Полное имя файла на клиенте 
	ТаблицаФайлов.Колонки.Добавить("ПолноеИмяНаКлиенте", ОписаниеТипаСтрокаДлиной256);
	
	// Исходное имя файла, каким его указал пользователь
	ТаблицаФайлов.Колонки.Добавить("ОригинальноеИмя", ОписаниеТипаСтрокаДлиной256);

	// Размер файла
	ТаблицаФайлов.Колонки.Добавить("Размер", Новый ОписаниеТипов("Число"));

	// Каталог размещения файла относительно каталога файлов на сервере
	ТаблицаФайлов.Колонки.Добавить("Каталог", ОписаниеТипаСтрокаДлиной256);
	
	// Полный путь каталога на сервере
	ТаблицаФайлов.Колонки.Добавить("КаталогПолный", ОписаниеТипаСтрокаДлиной256);
	
	// Назначение файла (объект, форматированный документ, комментарий)
	ТаблицаФайлов.Колонки.Добавить("Назначение", Новый ОписаниеТипов("ПеречислениеСсылка.НазначенияФайлов"));
	
	// Текстовое описание файла
	ТаблицаФайлов.Колонки.Добавить("Описание", ОписаниеТипаСтрокаНеограниченнойДлины);
	
	// Адрес расположения файла во временном хранилище
	ТаблицаФайлов.Колонки.Добавить("АдресВоВременномХранилище", ОписаниеТипаСтрокаНеограниченнойДлины);
	
	// Ссылка на элемент справочника "Файлы"
	ТаблицаФайлов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.Файлы"));
	
	// Признак, что файл еще не был добавлен в справочник "Файлы"
	ТаблицаФайлов.Колонки.Добавить("НовыйФайл", Новый ОписаниеТипов("Булево"));

	// Высота изображения
	ТаблицаФайлов.Колонки.Добавить("Высота", ОписаниеТипаРазмера);
	
	// Ширина изображения
	ТаблицаФайлов.Колонки.Добавить("Ширина", ОписаниеТипаРазмера);
	
	// Признак изменения размеров изображения
	ТаблицаФайлов.Колонки.Добавить("ИзмененРазмерКартинки", Новый ОписаниеТипов("Булево"));
		
	Возврат ТаблицаФайлов;
	
КонецФункции

// Удаляет файл с сервера, если он существует, а также из базы
//
// Параметры:
//  Файл - СправочникСсылка.Файлы	 - удаляемый файл 
//
Процедура УдалитьФайлССервера(Файл) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		СвойстваФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Файл, "Каталог, Наименование");	
		КаталогФайловНаСервере = ПовторноеИспользованиеВызовСервера.КаталогХраненияФайловНаСервере();
		КаталогСРазделителем = РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(КаталогФайловНаСервере);
		ИмяФайла = КаталогСРазделителем + РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(СвойстваФайла.Каталог)
			+ СвойстваФайла.Наименование;	
		ФайлНаДиске = Новый Файл(ИмяФайла);
		
		Если ФайлНаДиске.Существует() Тогда
			УдалитьФайлы(ИмяФайла);
		КонецЕсли;
		
		Набор = РегистрыСведений.ПрикрепленныеФайлы.СоздатьНаборЗаписей();
		Набор.Отбор.Файл.Установить(Файл);
		Набор.Записать(Истина); 
		
		УстановитьПривилегированныйРежим(Истина);
		Файл.ПолучитьОбъект().Удалить(); 
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
	Исключение   
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Ошибка = СтрШаблон("Не удалось удалить файл %1 по причине:%2", Файл, ОписаниеОшибки());
		ЗаписьЖурналаРегистрации("Работа с файлами.Удаление", УровеньЖурналаРегистрации.Ошибка, , , Ошибка);
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьИзменитьЭлементСправочникаФайлы(СтрокаТаблицы, Знач Владелец, Знач УникальноеИмяФайла, ПолучатьИзMinio)
	
	Расширение = РаботаСФайламиКлиентСервер.РасширениеИмениФайла(СтрокаТаблицы.Имя, Истина);
	ИндексКартинки = РаботаСФайламиКлиентСервер.ИндексИконкиФайлаПоРасширению(Расширение);
	
	СвойстваФайла = Справочники.Файлы.СвойстваФайла();
	СвойстваФайла.ОригинальноеИмя = СтрокаТаблицы.ОригинальноеИмя;
	СвойстваФайла.Размер = СтрокаТаблицы.Размер;
	СвойстваФайла.Расширение = Расширение;
	СвойстваФайла.ИндексКартинки = ИндексКартинки;
	СвойстваФайла.Высота = СтрокаТаблицы.Высота;
	СвойстваФайла.Описание = СтрокаТаблицы.Описание;
	СвойстваФайла.Ширина = СтрокаТаблицы.Ширина;
	СвойстваФайла.ПолучатьИзMinio = ПолучатьИзMinio;
	СвойстваФайла.Ссылка = СтрокаТаблицы.Ссылка;
	
	ИзменитьЗапись = Истина;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Ссылка) ИЛИ СтрокаТаблицы.НовыйФайл Тогда
		НайденнаяЗапись = Справочники.Файлы.НайтиЗапись(Владелец, УникальноеИмяФайла, СтрокаТаблицы.Назначение);
		Если НайденнаяЗапись = Неопределено Тогда
			СвойстваФайла.ИмяФайла = СтрокаТаблицы.Имя;
			СвойстваФайла.Каталог = СтрокаТаблицы.Каталог;
			
			ИзменитьЗапись = Ложь;
		Иначе
			СтрокаТаблицы.Ссылка = НайденнаяЗапись.Ссылка;
			СвойстваФайла.Ссылка = НайденнаяЗапись.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если ИзменитьЗапись Тогда
		Справочники.Файлы.Изменить(СвойстваФайла);
	Иначе
		СтрокаТаблицы.Ссылка = Справочники.Файлы.Добавить(СвойстваФайла);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСообщенияПользователям(Знач СтрокаТаблицы, Знач Владелец, ТаблицаЗаписиВИсторию)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задача.Назначена КАК Пользователь
	|ПОМЕСТИТЬ НазначенныеПользователи
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	Задача.Ссылка = &Владелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Задача.Назначена
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	(ВЫРАЗИТЬ(Задача.ОбъектОснование КАК Документ.ЗаявкаНаРазработку)) = &Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЛичныеДела.Данные КАК Справочник.Филиалы) КАК Филиал
	|ПОМЕСТИТЬ ФилиалыПользователей
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(&ТекущаяДата, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)
	|				И Сотрудник В (ВЫБРАТЬ НазначенныеПользователи.Пользователь ИЗ НазначенныеПользователи)) КАК ЛичныеДела
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Филиалы.Руководитель КАК Пользователь
	|ИЗ
	|	ФилиалыПользователей КАК ФилиалыПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО ФилиалыПользователей.Филиал = Филиалы.Ссылка
	|ГДЕ
	|	Филиалы.Руководитель <> &Автор
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НазначенныеПользователи.Пользователь
	|ИЗ
	|	НазначенныеПользователи КАК НазначенныеПользователи
	|ГДЕ
	|	НазначенныеПользователи.Пользователь <> &Автор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Объект
	|ИЗ
	|	РегистрСведений.ИсторияИзмененийОбъектовПоСобытиям КАК ИсторияИзмененийОбъектовПоСобытиям
	|ГДЕ
	|	(ИсторияИзмененийОбъектовПоСобытиям.Объект ССЫЛКА Документ.Задача
	|			ИЛИ ИсторияИзмененийОбъектовПоСобытиям.Объект ССЫЛКА Документ.ЗаявкаНаРазработку)
	|	И ИсторияИзмененийОбъектовПоСобытиям.Объект = &Владелец
	|	И ИсторияИзмененийОбъектовПоСобытиям.Данные ПОДОБНО &Изменение";
	
	ДанныеСтруктура = Новый Структура("Событие, ИмяФайла, Добавлен");
	ДанныеСтруктура.Событие = "ИзменениеФайла";
	ДанныеСтруктура.ИмяФайла = СтрокаТаблицы.ОригинальноеИмя;
	ДанныеСтруктура.Добавлен = 0;
	
	Изменение = ЗаписатьЗначениеJSON(ДанныеСтруктура);
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Изменение", Изменение); 
	Запрос.УстановитьПараметр("Автор", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	НомерПакетаПроверкиФайла = 3;
	НомерПакетаПолучатели = 2; 
	
	ШаблоныПисьма = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма();
	
	ТекстШаблона = СтрЗаменить(ШаблоныПисьма.ЗаголовокСобытия, "<!-- event_date -->", Формат(ТекущаяДатаСеанса(), ШаблоныПисьма.ФорматДаты));
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- user_name -->", ПараметрыСеанса.ТекущийПользователь);

	Если РезультатЗапроса[НомерПакетаПроверкиФайла].Пустой() Тогда
		ДанныеСтруктура.Добавлен = 1;
	Иначе
		ДанныеСтруктура.Добавлен = 2;
	КонецЕсли;
	
	ТекстСобытия = СтрШаблон("%1 файл <b>%2</b>.", ?(ДанныеСтруктура.Добавлен = 1, "добавил", "изменил"), СтрокаТаблицы.ОригинальноеИмя);
	
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- event -->", ТекстСобытия);
	
	ТекстСообщения = СтрЗаменить(ШаблоныПисьма.БлокОсновногоТекста, "<!-- content -->", ТекстШаблона);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "<!-- font_size -->", "14px");

	МассивПолучателей = Новый Массив;
	Если НЕ РезультатЗапроса[НомерПакетаПолучатели].Пустой() Тогда
		Выборка = РезультатЗапроса[НомерПакетаПолучатели].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МассивПолучателей.Добавить(Выборка.Пользователь);
		КонецЦикла;
		
		ЗаписатьСообщениеДляПользователей(ТекстСообщения, МассивПолучателей, Владелец);
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаЗаписиВИсторию.Добавить();
	СтрокаТаблицы.Данные = ЗаписатьЗначениеJSON(ДанныеСтруктура);
	СтрокаТаблицы.Категория = Перечисления.КатегорииСобытийИсторияИзменений.Прочее;
	
КонецПроцедуры

Процедура ЗаписатьСообщениеДляПользователей(Знач ТекстСообщения, Знач МассивПолучателей, Знач Владелец)
	
	СообщениеПользователям = Новый Структура;
	СообщениеПользователям.Вставить("ТекстСообщения", ТекстСообщения);
	СообщениеПользователям.Вставить("КатегорияСообщения", Перечисления.КатегорииСообщенийПользователя.ВажныеИзмененияОбъекта);
	СообщениеПользователям.Вставить("Важность", Перечисления.ВажностьСообщения.Высокая);
	
	РегистрыСведений.ПодготовленныеСообщенияПользователяПоКатегориям.Добавить(МассивПолучателей, Владелец, СообщениеПользователям);
	
КонецПроцедуры

Процедура ОбработатьФайл(СтрокаТаблицы, МассивФайловСОшибками, ТаблицаЗаписиВИсторию, Владелец, Идентификатор, Параметры, СохранятьНаСервер)
	
	// Пропускаем файлы, которые не сможем получить из временного хранилища из-за отсутствия адреса.
	Если ПустаяСтрока(СтрокаТаблицы.АдресВоВременномХранилище) Тогда
		Возврат;
	КонецЕсли;
	
	// Признак того, что файл успешно выгружен на жесткий диск сервера
	ВыгруженНаДиск = Ложь;
	ВыгруженИПрикреплен = Истина;
	
	ДанныеФайла = ПолучитьУникальноеИмяФайла(СтрокаТаблицы);
	УникальноеИмяФайла = ДанныеФайла.УникальноеИмяФайла;
	ПолноеИмяФайлаНаСервере = "";

	Если СохранятьНаСервер Тогда
		ПолноеИмяФайлаНаСервере = СтрокаТаблицы.КаталогПолный + УникальноеИмяФайла;
		УдалитьУстаревшийФайл = (ЗначениеЗаполнено(ДанныеФайла.УстаревшийФайл) И НЕ СтрокаТаблицы.ИзмененРазмерКартинки);
	Иначе
		
		Каталог = Константы.КаталогПубликацииФайлов.Получить();
		ПолноеИмяФайла = СтрШаблон("%1/%2/%3", Каталог, СтрокаТаблицы.Каталог, УникальноеИмяФайла);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка	
		Если СохранятьНаСервер Тогда	
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПолноеИмя) Тогда			
				Если УдалитьУстаревшийФайл Тогда
					УдалитьФайлы(СтрокаТаблицы.КаталогПолный + ДанныеФайла.УстаревшийФайл);
				КонецЕсли;
				
				СохранитьФайлНаСервере(СтрокаТаблицы, ПолноеИмяФайлаНаСервере);		
				СтрокаТаблицы.Имя = УникальноеИмяФайла;
				СтрокаТаблицы.ПолноеИмя = ПолноеИмяФайлаНаСервере;      
			Иначе                          
				// Файл уже выгружен на диск
				ВыгруженИПрикреплен = Ложь;
			КонецЕсли;
			ПолучатьИзMinio = Ложь;
		Иначе
			ИнтеграцияДополнительныхПодсистем.СохранитьФайл(УникальноеИмяФайла, СтрокаТаблицы.АдресВоВременномХранилище);
			СтрокаТаблицы.Имя = УникальноеИмяФайла;
			СтрокаТаблицы.ПолноеИмя = ПолноеИмяФайла;
			ПолучатьИзMinio = Истина;
		КонецЕсли;
		
		ВыгруженНаДиск = Истина;

		// Если заполнен идентификатор комментария, то прикрепить файлы надо к нему, иначе к объекту
		ВладелецФайла = ?(ЗначениеЗаполнено(Идентификатор), Идентификатор, Владелец);
		
		// Обновим элемент справочника файлы или создадим новый
		ДобавитьИзменитьЭлементСправочникаФайлы(СтрокаТаблицы, Владелец, УникальноеИмяФайла, ПолучатьИзMinio);
		
		// Добавим запись в регистр сведений "Прикрепленные файлы"
		Если НЕ СтрокаТаблицы.ИзмененРазмерКартинки Тогда
			РегистрыСведений.ПрикрепленныеФайлы.ДобавитьЗапись(ВладелецФайла, СтрокаТаблицы.Ссылка, СтрокаТаблицы.Назначение);
		КонецЕсли;
		
		// Формирование сообщения для записи в историю изменений
		Если СтрокаТаблицы.Назначение = Перечисления.НазначенияФайлов.Объект Тогда
			ДобавитьСообщенияПользователям(СтрокаТаблицы, Владелец, ТаблицаЗаписиВИсторию);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ВыгруженИПрикреплен = Ложь;
		
		Информация = ИнформацияОбОшибке();
		ПодробнаяИнформация = ПодробноеПредставлениеОшибки(Информация);
		
		// Добавим информацию о файле в массив
		Если ВыгруженНаДиск Тогда
			Шаблон = "Ошибка при записи информации о файле ""%1"" в базу данных. Причина: %2";
			ДвоичныеДанные = Неопределено;
		Иначе
			Шаблон = "Ошибка при сохранении файла ""%1"" на диск сервера. Причина: %2";
		КонецЕсли;
		
		ОписаниеОшибки = СтрШаблон(Шаблон, СтрокаТаблицы.ОригинальноеИмя, ПодробнаяИнформация);
		МассивФайловСОшибками.Добавить(ОписаниеОшибки);
		
		РегистрыСведений.НеобработанныеФайлы.ДобавитьЗапись(ВладелецФайла, СтрокаТаблицы.Имя,
			СтрокаТаблицы.ОригинальноеИмя, СтрокаТаблицы.Каталог, СтрокаТаблицы.Назначение,
			СтрокаТаблицы.Описание, ДвоичныеДанные, СтрокаТаблицы.Ссылка);
	КонецПопытки;
	
	Если ВыгруженИПрикреплен Тогда
		ИнтеграцияДополнительныхПодсистем.ОбработатьФайл(Владелец, СтрокаТаблицы, ПолноеИмяФайлаНаСервере, Параметры);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьУникальноеИмяФайла(Знач СтрокаТаблицы)
	
	// Если поле Ссылка заполнено, то работу ведем по данным из ссылки
	Если ЗначениеЗаполнено(СтрокаТаблицы.Ссылка) И НЕ СтрокаТаблицы.НовыйФайл Тогда
		НаименованиеФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Ссылка, "Наименование");
		Расширение = РаботаСФайламиКлиентСервер.РасширениеИмениФайла(СтрокаТаблицы.Имя);
		НаименованиеФайлаБезРасширения = РаботаСФайламиКлиентСервер.ИмяФайлаБезРасширения(НаименованиеФайла);
		
		УникальноеИмяФайла = СтрШаблон("%1%2", НаименованиеФайлаБезРасширения, Расширение);
	Иначе
		// Проверяем имя файла на уникальность в пределах системы.
		// Если оно не уникально, генерируем для него новое имя.
		УникальноеИмяФайла = СтрокаТаблицы.Имя;
		НаименованиеФайла = "";
		
		Если НЕ РаботаСФайламиКлиентСервер.ЭтоУникальноеИмяФайла(УникальноеИмяФайла) Тогда
			УникальноеИмяФайла = РаботаСФайламиКлиентСервер.СоздатьУникальноеИмяФайла(УникальноеИмяФайла, СтрокаТаблицы.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура("УникальноеИмяФайла, УстаревшийФайл", УникальноеИмяФайла, НаименованиеФайла);
	
	Возврат Результат;
	
КонецФункции

Процедура СохранитьФайлНаСервере(Знач СтрокаТаблицы, Знач ПолноеИмяФайлаНаСервере)
	
	Если СтрокаТаблицы.НовыйФайл И ЭтоАдресВременногоХранилища(СтрокаТаблицы.АдресВоВременномХранилище) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтрокаТаблицы.АдресВоВременномХранилище);
		ДвоичныеДанные.Записать(ПолноеИмяФайлаНаСервере);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
