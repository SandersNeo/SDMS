///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Процедуры обработки событий элементов формы

// Обработка события АвтоПодбор поля строки поиска
//
// Параметры:
//  Текст				 - Строка	 - текст поля ввода
//  ДанныеВыбора		 - СписокЗначений	 - одноименный параметр стандартного обработчика события АвтоПодбор
//  СтандартнаяОбработка - Булево	 - одноименный параметр стандартного обработчика события АвтоПодбор
//
Процедура АвтоПодборПолнотекстовогоПоиска(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	КопияТекста = НРег(СокрЛП(Текст));
	Если НЕ ПустаяСтрока(КопияТекста) Тогда
		ДанныеВыбора = Новый СписокЗначений;
		Если СтрокаПодобнаНомеруОбъекта(Текст) Тогда
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора.Добавить(0, "Искать объекты по номеру """ + Текст + """", , БиблиотекаКартинок.НайтиПоНомеру);
			ДанныеВыбора.Добавить(1, "Искать везде", , БиблиотекаКартинок.Найти);
		КонецЕсли;	
		
		Если СтрокаПодобнаТегуОбъекта(Текст) Тогда
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора.Добавить(2, "Искать объекты по тегу """ + Текст + """", , БиблиотекаКартинок.Тег);
			ДанныеВыбора.Добавить(1, "Искать везде", , БиблиотекаКартинок.Найти);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет закрытие страницы результатов поиска и устанавливает активной предыдущую активную страницу
//
// Параметры:
//  Форма						 - УправляемаяФорма	 - форма, на которой требует ся закрыть форму поиска
//  ПредыдущаяАктивнаяСтраница	 - Строка	 - название предыдущей активной страницы
//  КонтейнерСостояний			 - Структура	 - контейнер состояний поиска полученный методом ПолучитьКонтейнерСостоянийПоиска()
//
Процедура ЗакрытьСтраницуРезультатовПоиска(Форма, ПредыдущаяАктивнаяСтраница, КонтейнерСостояний) Экспорт
		
	// Очистка исходного запроса и результатов поиска
	Форма.HTMLСтраницаРезультатыПоиска = "";
	Форма.СтрокаПоиска = "";
	КонтейнерСостояний = Неопределено;
	
	// Восстановление последней активной страницы, которая была до открытия
	// результатов поиска.
	Форма.Элементы.СтраницыИнформационнойПанели.ТекущаяСтраница = ПредыдущаяАктивнаяСтраница.Получить(ПредыдущаяАктивнаяСтраница.Количество() - 1);
	ПредыдущаяАктивнаяСтраница.Удалить(ПредыдущаяАктивнаяСтраница.Количество() - 1);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

// Точка входа для начала поиска
//
// Параметры:
//  НаправлениеПоиска	 - Строка	 - направление поиска
//  Форма				 - УправляемаяФорма	 - форма, из которой был вызван поиск
//  КонтейнерСостояний	 - Структура	 - контейнер состояний поиска полученный методом ПолучитьКонтейнерСостоянийПоиска()
//  ПредыдущаяСтраница	 - Строка	 - название предыдущей открытой страницы
//  ПоискПоНомеру		 - Булево	 - Истина - выполнить поиск только по номерам объектов, Ложь - найти все соответствия
//
Процедура ПриВыполненииПоиска(Знач НаправлениеПоиска = "ПерваяЧасть", Форма, КонтейнерСостояний, ПредыдущаяСтраница, Знач ПоискПоНомеру = Ложь, Знач ПоискПоТегу = Ложь) Экспорт
	
	СтрокаПоиска = Форма.СтрокаПоиска;
	
	Если НаправлениеПоиска = "ПерваяЧасть" Тогда
		Если ПустаяСтрока(СтрокаПоиска) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Необходимо указать строку поиска'"));
			Возврат;
		КонецЕсли;
	
		Если ОбщегоНазначенияКлиент.ЭтоНавигационнаяСсылка(СтрокаПоиска) Тогда
			ОткрытьНавигационнуюСсылку(СтрокаПоиска);
			СтрокаПоиска = "";
			Возврат;
		КонецЕсли;
		
		КонтейнерСостояний = ПолучитьКонтейнерСостоянийПоиска();
		КонтейнерСостояний.ПоискПоНомеру = ПоискПоНомеру;
		КонтейнерСостояний.ПоискПоТегу = ПоискПоТегу;
	КонецЕсли;
	
	// Необходимо запомнить текущую активную страницу панели и установить в качестве
	// текущей активной страницы страницу "Страница_РезультатыПоиска".
	Если Форма.Элементы.СтраницыИнформационнойПанели.ТекущаяСтраница <> Форма.Элементы.Страница_РезультатыПоиска Тогда
		Найденный = ПредыдущаяСтраница.Найти(Форма.Элементы.Страница_РезультатыПоиска);
		Если Найденный <> Неопределено Тогда
			ПредыдущаяСтраница.Удалить(Найденный);
		КонецЕсли; 
		ПредыдущаяСтраница.Добавить(Форма.Элементы.СтраницыИнформационнойПанели.ТекущаяСтраница);
		Форма.Элементы.СтраницыИнформационнойПанели.ТекущаяСтраница = Форма.Элементы.Страница_РезультатыПоиска;
	КонецЕсли;
	
	ПолнотекстовыйПоискВызовСервера.ВыполнитьПолнотекстовыйПоиск(КонтейнерСостояний, СтрокаПоиска, НаправлениеПоиска);
	
	ОбновитьДоступностьКнопокНавигации(Форма.Элементы.СледующаяСтраница, Форма.Элементы.ПредыдущаяСтраница, КонтейнерСостояний);
	Форма.ИнформацияОНайденномПредставление = ПредставлениеИнформацииОНайденном(КонтейнерСостояний);
	Форма.HTMLСтраницаРезультатыПоиска = ПредставлениеHTMLСтраницы(КонтейнерСостояний);	
	
КонецПроцедуры

// Проверяет является ли СтрокаПоиска номером объекта
//
// Параметры:
//  СтрокаПоиска - Строка	 - строка поиска
// 
// Возвращаемое значение:
//   - Булево
//
Функция СтрокаПодобнаНомеруОбъекта(Знач СтрокаПоиска) Экспорт
	
	Результат = Ложь;
	
	Если НЕ СтрНайти(СтрокаПоиска, " ") Тогда
		
		Префиксы = ГлобальныйПоискКлиентПовтИсп.ПолучитьМассивПрефиксовОбъектов();
		Номер = Врег(СтрокаПоиска);  
		Нашли = Ложь;
		
		Для Каждого Префикс Из Префиксы Цикл 
			Длина = СтрДлина(Префикс);
			Если Лев(Номер, Длина) = Врег(Префикс) Тогда 
				Номер = Сред(Номер, Длина + 1); 
				Нашли = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	
		Если Нашли Тогда 
			ПреобразованноеЧисло = ОбщегоНазначенияКлиентСервер.ПривестиКЧислу(Номер, 15);
			Результат = Булево(ПреобразованноеЧисло);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет является ли СтрокаПоиска тегом
//
// Параметры:
//  СтрокаПоиска - Строка	 - строка поиска
// 
// Возвращаемое значение:
//   - Булево
//
Функция СтрокаПодобнаТегуОбъекта(Знач СтрокаПоиска) Экспорт
	
	Результат = Ложь;
	
	Если НЕ СтрНайти(СтрокаПоиска, " ") Тогда			
		Если СтрНачинаетсяС(СтрокаПоиска, "#") Тогда 
			Результат = Истина;		
		КонецЕсли;		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

// Возвращает HTML-страницу ошибки
//
// Параметры:
//  КонтейнерСостояний	 - Структрура	 - контейнер состояний поиска полученный методом ПолучитьКонтейнерСостоянийПоиска()
// 
// Возвращаемое значение:
//   - Строка
//
Функция НоваяHTMLСтраницаОшибки(КонтейнерСостояний)
	
	ШаблонСтраницы = 
		"<html>
		|<head>
		|  <meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"">
		|  <style type=""text/css"">
		|    html { 
		|      overflow:auto;
		|    }
		|    body {
		|      margin: 10px;
		|      font-family: Arial, sans-serif;
		|      font-size: 10pt;
		|      overflow: auto;
		|      position: absolute;
		|      top: 0;
		|      left: 0;
		|      bottom: 0;
		|      right: 0;
		|    }
		|    div.main {
		|      overflow: auto;
		|      height: 100%;
		|    }
		|    div.error {
		|      font-size: 12pt;
		|    }
		|    div.presentation {
		|      font-size: 11pt;
		|    }
		|    h3 {
		|      color: #009646
		|    }
		|    li {
		|      padding-bottom: 16px;
		|    }
		|    a {
		|      text-decoration: none;
		|      color: #0066CC;
		|    }
		|    a:hover {
		|      text-decoration: underline;
		|    }
		|  </style>
		|</head>
		|<body>
		|  <div class=""main"">
		|    <div class=""error"">#ПерваяПозиция#</div>
		|    <p>#ВтораяПозиция#</p>
		|  </div>
		|</body>
		|</html>";
	
	РекомендацииHTML = 
		НСтр("ru = '<h3>Рекомендации:</h3>
			|<ul>
			|  %РекомендацияОбластиПоиска%
			|  %РекомендацияТекстЗапроса%
			|  <li>
			|    <b>Воспользуйтесь поиском по началу слова.</b><br>
			|    Используйте звездочку (*) в качестве окончания.<br>
			|    Например, поиск стро* найдет все документы, которые содержат слова, начинающиеся на стро - 
			|    Журнал ""Строительство и ремонт"", ""ООО СтройКомплект"" и.т.д.
			|  </li>
			|  <li>
			|    <b>Воспользуйтесь нечетким поиском.</b><br>
			|    Используйте решетку (#).<br>
			|    Например, Сентинель#2 найдет все документы, содержащие такие слова, которые отличаются от слова 
			|    Сентинель на одну или две буквы.
			|  </li>
			|</ul>
			|<div class ""presentation""><a href=""v8help://1cv8/QueryLanguageFullTextSearchInData"">Полное описание формата поисковых выражений</a></div>'");
	
	ОписаниеОшибки = КонтейнерСостояний.ОписаниеОшибки;
	КодОшибки = КонтейнерСостояний.КодОшибки;
	
	РекомендацияОбластиПоискаHTML = "";
	РекомендацияТекстЗапросаHTML = "";
	
	Если КодОшибки = "НичегоНеНайдено" Тогда 
		РекомендацияТекстЗапросаHTML = "<li><b>Упростите запрос, исключив из него какое-либо слово.</b></li>";
		
	ИначеЕсли КодОшибки = "СлишкомМногоРезультатов" Тогда
		РекомендацияОбластиПоискаHTML = "<li><b>Уточните запрос .</b><br>
			|Попробуйте уточнить текст запроса, используя служебные операторы.</li>";
	КонецЕсли;
	
	РекомендацииHTML = СтрЗаменить(РекомендацииHTML, "%РекомендацияОбластиПоиска%", РекомендацияОбластиПоискаHTML);
	РекомендацииHTML = СтрЗаменить(РекомендацииHTML, "%РекомендацияТекстЗапроса%", РекомендацияТекстЗапросаHTML);
	
	ШаблонСтраницы = СтрЗаменить(ШаблонСтраницы, "#ПерваяПозиция#", ОписаниеОшибки);
	ШаблонСтраницы = СтрЗаменить(ШаблонСтраницы, "#ВтораяПозиция#", РекомендацииHTML);
	
	Возврат ШаблонСтраницы;
	
КонецФункции

// Возвращает HTML-страницу результата
//
// Параметры:
//  КонтейнерСостояний	 - Структрура	 - контейнер состояний поиска полученный методом ПолучитьКонтейнерСостоянийПоиска()
// 
// Возвращаемое значение:
//   - Строка
//
Функция НоваяHTMLСтраницаРезультата(КонтейнерСостояний)
	
	ШаблонСтраницы = 
		"<html>
		|<head>
		|  <meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"">
		|  <style type=""text/css"">
		|    html {
		|      overflow: auto;
		|    }
		|    body {
		|      margin: 10px;
		|      font-family: Arial, sans-serif;
		|      font-size: 10pt;
		|      overflow: auto;
		|      position: absolute;
		|      top: 0;
		|      left: 0;
		|      bottom: 0;
		|      right: 0;
		|    }
		|    div.main {
		|      overflow: auto;
		|      height: 100%;
		|    }
		|    div.presentation {
		|      font-size: 11pt;
		|    }
		|    div.textPortion {
		|      padding-bottom: 16px;
		|    }
		|    span.bold {
		|      font-weight: bold;
		|    }
		|    ol li {
		|      color: #B3B3B3;
		|    }
		|    ol li div {
		|      color: #333333;
		|    }
		|    a {
		|      text-decoration: none;
		|      color: #0066CC;
		|    }
		|    a:hover {
		|      text-decoration: underline;
		|    }
		|    .gray {
		|      color: #B3B3B3;
		|    }
		|  </style>
		|</head>
		|<body>
		|  <div class=""main"">
		|    <ol start=""%ТекущаяПозиция%"">
		|%Строки%
		|    </ol>
		|  </div>
		|</body>
		|</html>";
	
	ШаблонСтроки = 
		"      <li>
		|        <div class=""presentation""><a href=""%Ссылка%"">%Представление%</a></div>
		|        %ОписаниеHTML%
		|      </li>";
	
	ШаблонНеактивнойСтроки = 
		"      <li>
		|        <div class=""presentation""><a href=""#"" class=""gray"">%Представление%</a></div>
		|        %ОписаниеHTML%
		|      </li>";
	
	РезультатыПоиска = КонтейнерСостояний.РезультатыПоиска;
	ТекущаяПозиция   = КонтейнерСостояний.ТекущаяПозиция;
	
	Строки = "";
	
	Для каждого СтрокаРезультатаПоиска Из РезультатыПоиска Цикл
		Ссылка = СтрокаРезультатаПоиска.Ссылка;
		Представление = СтрокаРезультатаПоиска.Представление;
		ОписаниеHTML = СтрокаРезультатаПоиска.ОписаниеHTML;
		
		Строка = ?(Ссылка = "#", ШаблонНеактивнойСтроки, СтрЗаменить(ШаблонСтроки, "%Ссылка%", Ссылка));
		Строка = СтрЗаменить(Строка, "%Представление%", Представление);
		Строка = СтрЗаменить(Строка, "%ОписаниеHTML%",  ОписаниеHTML);
		
		Строки = Строки + Строка;		
	КонецЦикла;
	
	HTMLСтраница = СтрЗаменить(ШаблонСтраницы, "%Строки%", Строки);
	HTMLСтраница = СтрЗаменить(HTMLСтраница, "%ТекущаяПозиция%", ТекущаяПозиция + 1);
	
	Возврат HTMLСтраница;
	
КонецФункции

// Изменяет доступность кнопок навигации
//
// Параметры:
//  ЭлементКнопкиСледующие	 - КнопкаФормы	 - кнопка Следующие
//  ЭлементКнопкиПредыдущие	 - КнопкаФормы	 - кнопка Предыдущие
//  КонтейнерСостояний		 - Структура	 - контейнер состояний поиска полученный методом ПолучитьКонтейнерСостоянийПоиска()
//
Процедура ОбновитьДоступностьКнопокНавигации(ЭлементКнопкиСледующие, ЭлементКнопкиПредыдущие, КонтейнерСостояний)
	
	Если КонтейнерСостояний.Количество = 0 Тогда
		ЭлементКнопкиСледующие.Доступность = Ложь;
		ЭлементКнопкиПредыдущие.Доступность = Ложь;
	Иначе
		ПолноеКоличество = КонтейнерСостояний.ПолноеКоличество;
		ТекущаяПозиция = КонтейнерСостояний.ТекущаяПозиция;
		Количество = КонтейнерСостояний.Количество;
		
		ЭлементКнопкиСледующие.Доступность = ((ПолноеКоличество - ТекущаяПозиция) > Количество);
		ЭлементКнопкиПредыдущие.Доступность = (ТекущаяПозиция > 0);
	КонецЕсли;
	
КонецПроцедуры

// Производит открытие ссылок информационной базы, а также ссылок на интернет ресурсы
//
// Параметры:
//  НавигационнаяСсылка	 - Строка	 - навигационная ссылка
//
Процедура ОткрытьНавигационнуюСсылку(НавигационнаяСсылка)
	
	Если ОбщегоНазначенияКлиент.ЭтоВебСсылка(НавигационнаяСсылка) 
		ИЛИ ОбщегоНазначенияКлиент.ЭтоНавигационнаяСсылка(НавигационнаяСсылка) Тогда
		
		РезультатПроверки = ПроверитьВозможностьПерехода(НавигационнаяСсылка);
		
		Если РезультатПроверки = Истина Тогда
			ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);
		ИначеЕсли РезультатПроверки = Ложь Тогда
			ПоказатьПредупреждение(, "Не удалось перейти по навигационной ссылке. Пожалуйста, проверьте корректность введенных данных.");
		Иначе
			ОткрытьФорму("ОбщаяФорма.ПопыткаПросмотраЧерновика", РезультатПроверки, , , , , ,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает контейнер состояний поиска
// 
// Возвращаемое значение:
//   - Структура
//
Функция ПолучитьКонтейнерСостоянийПоиска()
	
	Результат = Новый Структура;
	Результат.Вставить("ТекущаяПозиция", 0);
	Результат.Вставить("Количество", 0);
	Результат.Вставить("ПолноеКоличество", 0);
	Результат.Вставить("КодОшибки", "");
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("РезультатыПоиска", Новый Массив);
	Результат.Вставить("ПоискПоНомеру", Ложь);
	Результат.Вставить("ПоискПоТегу", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Проверяет возможность открытия заявки
//
// Параметры:
//  НавигационнаяСсылка	 - Строка	 - навигационная ссылка 
// 
// Возвращаемое значение:
//   Булевоо 
//
Функция ПроверитьВозможностьПерехода(НавигационнаяСсылка)
	
	РезультатПроверки = Истина;
	
	// Проверка производится только для заявки на разработку
	Если СтрНайти(НавигационнаяСсылка, "Документ.ЗаявкаНаРазработку") <> 0 Тогда
		ИдентификаторЗаявки = ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторИзНавигационнойСсылки(НавигационнаяСсылка);
		РезультатПроверки = ПолнотекстовыйПоискВызовСервера.ПолучитьДоступностьЗаявки(ИдентификаторЗаявки);	 
	КонецЕсли;	
	
	Возврат РезультатПроверки;
	
КонецФункции	

// Проверяет код ошибки из контейнера состояний и формирует HTML-страницу результата
//
// Параметры:
//  КонтейнерСостояний	 - Структура	 - контейнер состояний поиска полученный методом ПолучитьКонтейнерСостоянийПоиска()
// 
// Возвращаемое значение:
//   - Строка
//
Функция ПредставлениеHTMLСтраницы(КонтейнерСостояний)
	
	КодОшибки  = КонтейнерСостояний.КодОшибки;
	
	Если ПустаяСтрока(КодОшибки) Тогда 
		HTMLСтраница = НоваяHTMLСтраницаРезультата(КонтейнерСостояний);
	Иначе 
		HTMLСтраница = НоваяHTMLСтраницаОшибки(КонтейнерСостояний);
	КонецЕсли;
	
	Возврат HTMLСтраница;
	
КонецФункции

// Формирует строку представления найденных результатов 
//
// Параметры:
//  КонтейнерСостояний	 - Структура	 - контейнер состояний поиска полученный методом ПолучитьКонтейнерСостоянийПоиска()
// 
// Возвращаемое значение:
//   - Строка
//
Функция ПредставлениеИнформацииОНайденном(Знач КонтейнерСостояний)
	
	Представление = "";
	
	Если КонтейнерСостояний.Количество <> 0 Тогда
		ТекущаяПозиция = КонтейнерСостояний.ТекущаяПозиция;
		Количество = КонтейнерСостояний.Количество;
		ПолноеКоличество = КонтейнерСостояний.ПолноеКоличество;

		Представление = СтрШаблон("Показаны %1 - %2 из %3", 
			Формат(ТекущаяПозиция + 1, "ЧН=0; ЧГ="),
		    Формат(ТекущаяПозиция + Количество, "ЧН=0; ЧГ="),
			Формат(ПолноеКоличество, "ЧН=0; ЧГ="));
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

#КонецОбласти
