///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Добавить к дате указанное количество рабочих дней
//
// Параметры:
//  ДатаНачала	 - Дата - Дата, к которой нужно добавить дни
//  Дней			 - Число - Количество дней для добавления 
// 
// Возвращаемое значение:
//   Дата - Дата, увеличенная на указанное количество рабочих дней 
//
Функция ДобавитьКДатеРабочихДней(Знач ДатаНачала, Знач Дней) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Календарь.ДатаКалендаря КАК ДатаКалендаря
	|ПОМЕСТИТЬ КалендарьРабочихДней
	|ИЗ
	|	РегистрСведений.ПроизводственныйКалендарь КАК Календарь
	|ГДЕ
	|	Календарь.ДатаКалендаря МЕЖДУ &ДатаНачала И ДОБАВИТЬКДАТЕ(&ДатаНачала, ДЕНЬ, &ГлубинаПоиска)
	|	И Календарь.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Выходной)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КалендарьРабочихДней.ДатаКалендаря КАК ДатаКалендаря
	|ИЗ
	|	КалендарьРабочихДней КАК КалендарьРабочихДней
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КалендарьРабочихДней КАК КалендарьРабочихДней1
	|		ПО (КалендарьРабочихДней1.ДатаКалендаря <= КалендарьРабочихДней.ДатаКалендаря)
	|
	|СГРУППИРОВАТЬ ПО
	|	КалендарьРабочихДней.ДатаКалендаря
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(КалендарьРабочихДней1.ДатаКалендаря) = &Дней";
	
	// Ограничение выборки календаря "сверху"
	МаксимальноеКоличествоВыходныхПодряд = 10;
	СоотношениеРабочихКВыходным = 2;
	
	Если Дней < 0 Тогда
		Дней = -Дней;
		Коэфициент = -1;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "МЕЖДУ &ДатаНачала И ДОБАВИТЬКДАТЕ(&ДатаНачала, ДЕНЬ, &ГлубинаПоиска)", 
			"МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаНачала, ДЕНЬ, &ГлубинаПоиска) И &ДатаНачала");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<= КалендарьРабочихДней.ДатаКалендаря", ">= КалендарьРабочихДней.ДатаКалендаря");
	Иначе
		Коэфициент = 1;
	КонецЕсли;
	
	ГлубинаПоиска = Коэфициент * (Дней * СоотношениеРабочихКВыходным + МаксимальноеКоличествоВыходныхПодряд);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ГлубинаПоиска", ГлубинаПоиска);
	Запрос.УстановитьПараметр("Дней", Дней + 1);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ДатаОкончания = ДатаНачала;
	Иначе
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ДатаОкончания = Выборка.ДатаКалендаря;
	КонецЕсли;
	
	Возврат ДатаОкончания;
	
КонецФункции

// Возвращает признак наличия подчиненных объектов
//
// Параметры:
//  Объект - ОпределяемыйТип.ОбъектСтруктурыПодчиненности - Ссылка на объект
// 
// Возвращаемое значение:
//   Булево - Истина, если есть подчиненные, иначе Ложь 
//
Функция ЕстьПодчиненные(Знач Объект) Экспорт

	Возврат РегистрыСведений.СтруктураПодчиненности.ЕстьПодчиненные(Объект);
		
КонецФункции

// Добавляет запись в журнал регистрации, при возникновении события на клиенте.
//
// Параметры:
//  ИмяСобытия  - Строка - описание события 
//  Комментарий - Строка - описание причины
//
Процедура ЗаписьЖурналаРегистрацииНаСервере(ИмяСобытия, Комментарий) Экспорт
	
    ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , Комментарий);
	
КонецПроцедуры

// Возвращает количество выходных дней между датами
//
// Параметры:
//  ДатаНачала		 - Дата - Дата начала периода
//  ДатаОкончания	 - Дата - Дата окончания периода 
// 
// Возвращаемое значение:
//   Число - Количество дней
//
Функция КоличествоВыходныхДней(Знач ДатаНачала, Знач ДатаОкончания) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Календарь.ДатаКалендаря) КАК КоличествоДней
	|ИЗ
	|	РегистрСведений.ПроизводственныйКалендарь КАК Календарь
	|ГДЕ
	|	Календарь.ДатаКалендаря МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Календарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Выходной)";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоДней;	

КонецФункции

// Возвращает элемент справочника пользователя по наименованию
//
// Параметры:
//  Наименование - Строка - Наименование пользователя
// 
// Возвращаемое значение:
//   СправочникСсылка.Пользователи, Неопределено - элемент справочника, если найден 
//
Функция НайтиПользователяПоИмениПользователяИБ(Знач ИмяПользователя) Экспорт 
	
	Пользователь = Неопределено;
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя); 
	
	Если ПользовательИБ <> Неопределено Тогда 
   		Пользователь = Справочники.Пользователи.НайтиПоИдентификаторуПользователяИБ(ПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Пользователь;	

КонецФункции

// Добавляет запись в журнал регистрации, при возникновении события на клиенте.
//
// Параметры:
//  Функциональность  - Строка - используемая функциональность 
//
Процедура ОтслеживаниеИспользованияФункциональностиНаСервере(Знач Функциональность, Знач ИмяФормы = "") Экспорт
	
	РегистрыСведений.ОтслеживаниеИспользованияФункциональности.Добавить(Функциональность, ИмяФормы);

КонецПроцедуры

// Возвращает настройки для открытия кастномных команд.
// 
// Возвращаемое значение:
//  Структура - Структура ответа
//		ЕстьПраво - Булеов - Наличие права создание кастомных команд
//		Команды - Массив - Массив команд, где пользователь руководитель 
//
Функция ПолучитьНастройкиСозданияКастомнойкоманды() Экспорт
	
	ЕстьПраво = Безопасность.НаходитсяВГруппеДоступа(Справочники.ГруппыДоступа.СТОиРуководителиITНаправлений);
	Команды = Справочники.Филиалы.ПолучитьКастомныеКомандыРуководителя();
	
	Возврат Новый Структура("ЕстьПраво, Команды", ЕстьПраво, Команды);
	
КонецФункции	

// Возвращает значение константы
//
// Параметры:
//  ИмяКонстанты - Строка - Имя получаемой константы
// 
// Возвращаемое значение:
//  Произвольное - значение константы
//
Функция ПолучитьКонстанту(ИмяКонстанты) Экспорт
	
	Результат = Неопределено;
	
	Если Метаданные.Константы.Найти(ИмяКонстанты) <> Неопределено Тогда 
		Результат = Константы[ИмяКонстанты].Получить();	
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции	

// Получает почту тех поддержки
// 
// Возвращаемое значение:
//  Строка - почта тех поддержки
//
Функция ПолучитьПочтуТехПоддержки() Экспорт 
	
	Почта = "";
	Пользователь = Константы.ПользовательТехПоддержки.Получить();
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Почта = ЗначениеРеквизитаОбъекта(Пользователь, "Почта");	
	КонецЕсли;
	
	Возврат Почта;
	
КонецФункции

// Возвращает ссылку на объект из навигационной ссылки
//
// Параметры:
//  НавигационнаяСсылка - Строка - Навигационная ссылка
// 
// Возвращаемое значение:
//  Произвольное - ссылка объекта
//
Функция ПолучитьСсылкуИзНавигационной(НавигационнаяСсылка) Экспорт
	
	ПерваяТочка = Найти(НавигационнаяСсылка, "e1cib/data/");
	ВтораяТочка = Найти(НавигационнаяСсылка, "?ref=");
	
	ПредставлениеТипа = Сред(НавигационнаяСсылка, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
	ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
	ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", 
		Сред(НавигационнаяСсылка, ВтораяТочка + 5));
		
	Возврат ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
	
КонецФункции  

// Сравнивает с помощью утилиты WinMerge два строковых описания и возвращает отчет о сравнении
//
// Параметры:
//  Ссылка			 - Ссылка - Ссылка на документ для записи информации в журнал регистрации в случае ошибки в сравнении
//  СтароеОписание	 - Строка - "Левое" описание для сравнения 
//  НовоеОписание	 - Строка - "Правое" описание для сравнения 
//  ЗаголовокСтарое	 - Строка - Заголовок левой колонки в отчете о сравнении
//  ЗаголовокНовое	 - Строка - Заголовок правой колонки в отчете о сравнении
// 
// Возвращаемое значение:
//   Строка - отчет о сравнении двух описаний 
//
Функция СравнитьОписания(Знач Ссылка, Знач СтароеОписание, Знач НовоеОписание,
	Знач ЗаголовокСтарое, Знач ЗаголовокНовое, Знач НовыйФорматОписания = Ложь) Экспорт

	Возврат РегистрыСведений.ОчередьСравненияИзмененийОписанийОбъектов.СравнитьОписания(Ссылка, СтароеОписание, НовоеОписание,
		ЗаголовокСтарое, ЗаголовокНовое, НовыйФорматОписания);	

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СКД - система компоновки данных

// Рекурсивно получает все имена и значения расшифровок отчета на СКД
//
// Параметры:
//  ДанныеРасшифровки - Строка - адрес данных расшифровки во временном хранилище 
//  Расшифровка       - Число  - значение идентификатора расшифровки
//  ВключаяРодителей  - Булево - искать расшифровки вверх по структуре или нет
// 
// Возвращаемое значение:
//   Структура - структура свойств и значений расшифровки
//
Функция ПолучитьПараметрыРасшифровки(Знач ДанныеРасшифровки, Знач Расшифровка, Знач ВключаяРодителей = Истина) Экспорт
	
	СтруктураРасшифровки = Новый Структура();
	
	Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	
	ЗаполнитьСтруктуруРасшифровки(Данные, Расшифровка, СтруктураРасшифровки, ВключаяРодителей);
		
	Возврат СтруктураРасшифровки;
			
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Настройки динамических списков

Процедура ПользовательскиеНастройкиДинамическогоСписка(Знач КлючНастройки, ВариантыНастроек, Форма, КоманднаяПанель) Экспорт
	
	УдалитьЭлементыПользовательскихНастроекДинамическогоСписка(Форма, ВариантыНастроек);
	
	Если ТипЗнч(КлючНастройки) = Тип("Массив") Тогда
		МассивКлючей 			= КлючНастройки;
		МассивКомандныхПанелей 	= КоманднаяПанель;
	Иначе		
		МассивКлючей 			= Новый Массив;
		МассивКомандныхПанелей	= Новый Массив;
		
		МассивКлючей.Добавить(КлючНастройки);
		МассивКомандныхПанелей.Добавить(КоманднаяПанель);
	КонецЕсли;
	
	Счетчик = -1;
	Для Каждого Настройки Из МассивКлючей Цикл
		
		Счетчик = Счетчик + 1;
		
		СписокНастроек = ХранилищеПользовательскихНастроекДинамическихСписков.ПолучитьСписок(Настройки);
		СписокНастроек.СортироватьПоПредставлению();
		
		Команды  = Форма.Команды;
		Элементы = Форма.Элементы;
		
		Для Каждого Настройка Из СписокНастроек Цикл
			Если ЗначениеЗаполнено(Настройка.Значение) Тогда
				Идентификатор = "НастройкаПользователя_" + СтрЗаменить(Настройка.Значение, "-", "");
				
				НоваяСтрока = ВариантыНастроек.Добавить();	
				НоваяСтрока.Настройка     = Настройка.Значение;
				НоваяСтрока.Представление = Настройка.Представление;
				НоваяСтрока.Идентификатор = Идентификатор;
				
				Команда = Команды.Добавить(Идентификатор);
				Команда.Заголовок = НоваяСтрока.Представление;
				Команда.Действие  = "ПрименитьНастройкуДинамическогоСписка";
				
				НовыйЭлемент = Элементы.Добавить(Идентификатор, Тип("КнопкаФормы"), МассивКомандныхПанелей[Счетчик]);
				НовыйЭлемент.ИмяКоманды = Команда.Имя;
				НовыйЭлемент.Заголовок  = Команда.Заголовок;
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьНастройкуДинамическогоСпискаНаСервере(Знач КлючНастройки, Знач ВариантыНастроек, 
		Знач Идентификатор, КомпоновщикНастроек) Экспорт
	
	Настройка = ПолучитьНастройкиХранилищеНастроекДинамическихСписков(КлючНастройки, ВариантыНастроек, Идентификатор);
	
	Если Настройка <> Неопределено Тогда  
		Попытка
			КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройка);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При загрузке настроек возникла ошибка: " + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Получает настройки хранилища настроек динамических списков, сли пусто выдает ошибку
//
// Параметры:
//  КлючНастройки	 - Строка	 - Ключ настройки
//  ВариантыНастроек - Строка	 - Вариант настройки
//  Идентификатор	 - Строка	 - Идентификатор настройки
// 
// Возвращаемое значение:
//  Результат - Хранимая настройка
//
Функция ПолучитьНастройкиХранилищеНастроекДинамическихСписков(Знач КлючНастройки, Знач ВариантыНастроек, Знач Идентификатор) Экспорт 
	
	НайденныеСтроки = ВариантыНастроек.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
	Результат = Неопределено;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		Результат = ЗагрузитьНастройкуДинамическихСписков(КлючНастройки, НайденныеСтроки[0].Настройка);
		
		Если Результат = Неопределено Тогда
			Текст = "Выбранная настройка отсутствует. Возможно, она была удалена. Необходимо обновить список в меню ""Настройки - Обновить список настроек"".";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СКД - система компоновки данных

Процедура ЗаполнитьСтруктуруРасшифровки(Знач Данные, Знач Расшифровка, СтруктураРасшифровки, Знач ВключаяРодителей)
	
	ТекущееПоле = Данные.Элементы[Расшифровка];
	
	Если ТипЗнч(ТекущееПоле) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда 
		Для Каждого Элемент Из ТекущееПоле.ПолучитьПоля() Цикл
			// Пропуск системных полей содержащих "." в наименовании, 
			// например "СистемныеПоля.НомерПоПорядку"
			Если СтрРазделить(Элемент.Поле, ".").Количество() > 1 Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ СтруктураРасшифровки.Свойство(Элемент.Поле) Тогда
				СтруктураРасшифровки.Вставить(Элемент.Поле, Элемент.Значение);
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Если ВключаяРодителей Тогда
		Для Каждого Элемент Из ТекущееПоле.ПолучитьРодителей() Цикл 
			ЗаполнитьСтруктуруРасшифровки(Данные, Элемент.Идентификатор, СтруктураРасшифровки, ВключаяРодителей); 
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройки динамических списков

Процедура УдалитьЭлементыПользовательскихНастроекДинамическогоСписка(Форма, ВариантыНастроек)
	
	Команды  = Форма.Команды;
	Элементы = Форма.Элементы;
	
	Для Каждого СтрокаТаблицы Из ВариантыНастроек Цикл
		Команда = Команды.Найти(СтрокаТаблицы.Идентификатор);
		Команды.Удалить(Команда);
		
		ЭлементФормы = Элементы.Найти(СтрокаТаблицы.Идентификатор);
		Элементы.Удалить(ЭлементФормы);
	КонецЦикла;
	
	ВариантыНастроек.Очистить();
	
КонецПроцедуры

Функция ПроверитьСтатусПроектаНаСервере(Знач Ссылка, Отказ) Экспорт
	
	Результат = Новый Структура("РазрешеноСоздавать, ТекстСообщения", Истина, "");	
	
	Если ТипЗнч(Ссылка) <> Тип("СправочникСсылка.Проекты") Тогда
		Возврат Результат;
	КонецЕсли;
	
	РешенныеСтатусы = Новый Массив;
	РешенныеСтатусы.Добавить(Справочники.СтатусыОбъектов.Отклонен);
	РешенныеСтатусы.Добавить(Справочники.СтатусыОбъектов.Приостановлен);
	РешенныеСтатусы.Добавить(Справочники.СтатусыОбъектов.Решен);
	
	Статус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Статус");
	
	Если РешенныеСтатусы.Найти(Статус) <> Неопределено Тогда
		Отказ = Истина;
		Результат.РазрешеноСоздавать = Ложь;
		Результат.ТекстСообщения = "Для проектов в статусах ""Приостановлен"", ""Решен"" и ""Отклонен"" запрещено создавать подчиненные объекты.";
	ИначеЕсли Статус = Справочники.СтатусыОбъектов.Новый Тогда
		Отказ = Истина;
		Результат.РазрешеноСоздавать = Ложь;
		Результат.ТекстСообщения = "Для проектов в статусе ""Новый"" запрещено создавать подчиненные объекты.";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекущаяДатаСеансаНаСервере() Экспорт
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Комментарии

// Возвращает список объектов отображаемых в комментариях для переданного объекта
//
// Параметры:
//  Объект	 - ОпределяемыйТип.ИсточникКомментариев	 - целевой объект
// 
// Возвращаемое значение:
//  СписокЗначений - список объектов
//
Функция ПолучитьСписокОбъектовДляКомментириев(Знач Объект) Экспорт
	
	Возврат РегистрыСведений.Комментарии.ПолучитьСписокОбъектов(Объект);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прикрепленные файлы

// Подготавливает запрашиваемые клиентом файлы, при необходимости упаковывает
//  их в архив и помещает во временное хранилище формы.
//
// Параметры:
//  ИдентификаторФормы			 - УникальныйИдентификатор	 - уникальный идентификатор формы.
//  Архивировать				 - Булево					 - признак необходимости помещения запрашиваемых файлов в один архив.
//  Файлы						 - Неопределено, Массив		 - массив запрашиваемых файлов. Если нужно получить все файлы объекта, то указывается Неопределено.
//  Объект						 - ЛюбаяСсылка				 - объект-владелец файлов.
//  ЗагрузкаИзображенийОписания	 - Булево					 - загружать изображения из описаний
// 
// Возвращаемое значение:
//  Массив - элементов типа ОписаниеПередаваемогоФайла.
//
Функция ПодготовитьФайлыДляКлиента(Знач ИдентификаторФормы, Знач Архивировать, Знач Файлы = Неопределено, Знач Объект = Неопределено, ЗагрузкаИзображенийОписания = Ложь) Экспорт
	
	ПодготовленныеФайлы = Новый Массив;
	НесуществующиеФайлы = Новый Массив;
	КаталогХранения = ПовторноеИспользованиеВызовСервера.КаталогХраненияФайловНаСервере();
	
	Запрос = Новый Запрос;
	
	Если (Файлы = Неопределено) ИЛИ (Архивировать = Истина) Тогда
		Если ЗагрузкаИзображенийОписания Тогда
			СсылкиФайлов = Новый Массив;
			
			Для Каждого Файл Из Файлы Цикл
				СсылкиФайлов.Добавить(Файл.Ссылка);
			КонецЦикла;
			
			Файлы = СсылкиФайлов;
		КонецЕсли;
		
		Запрос.Текст =  		
		"ВЫБРАТЬ
		|	СвязьОбъектовСЗаявкамиНаРазработку.Заявка КАК Объект,
		|	ПрикрепленныеФайлы.Файл КАК Файл
		|ПОМЕСТИТЬ ФайлыДляЗаявки
		|ИЗ
		|	РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку КАК СвязьОбъектовСЗаявкамиНаРазработку
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
		|		ПО СвязьОбъектовСЗаявкамиНаРазработку.Заявка = ПрикрепленныеФайлы.Объект
		|			И (ПрикрепленныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.Объект))
		|ГДЕ
		|	СвязьОбъектовСЗаявкамиНаРазработку.Объект = &Объект
		|	И &СкачатьВсеФайлы = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПрикрепленныеФайлы.Объект,
		|	ПрикрепленныеФайлы.Файл
		|ИЗ
		|	РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
		|ГДЕ
		|	ПрикрепленныеФайлы.Объект = &Объект
		|	И ПрикрепленныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.Объект)
		|	И &СкачатьВсеФайлы = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Файлы.Наименование КАК ИмяФайлаНаСервере,
		|	Файлы.ОригинальноеИмя КАК ИмяФайлаНаКлиенте,
		|	Файлы.Каталог КАК КаталогХраненияФайла,
		|	Файлы.ДатаСоздания КАК ДатаСоздания
		|ИЗ
		|	ФайлыДляЗаявки КАК ФайлыДляЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО ФайлыДляЗаявки.Файл = Файлы.Ссылка
		|ГДЕ
		|	НЕ Файлы.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Файлы.Наименование,
		|	Файлы.ОригинальноеИмя,
		|	Файлы.Каталог,
		|	Файлы.ДатаСоздания
		|ИЗ
		|	РегистрСведений.Комментарии КАК Комментарии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
		|		ПО Комментарии.Идентификатор = ПрикрепленныеФайлы.Объект
		|			И (ПрикрепленныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.ФайлыКомментария))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО (ПрикрепленныеФайлы.Файл = Файлы.Ссылка)
		|			И (НЕ Файлы.ПометкаУдаления)
		|ГДЕ
		|	Комментарии.Объект В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ФайлыДляЗаявки.Объект
		|			ИЗ
		|				ФайлыДляЗаявки КАК ФайлыДляЗаявки)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Файлы.Наименование,
		|	Файлы.ОригинальноеИмя,
		|	Файлы.Каталог,
		|	Файлы.ДатаСоздания
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.Ссылка В(&Файлы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСоздания УБЫВ";
		
		Запрос.УстановитьПараметр("Файлы", Файлы);		
		Запрос.УстановитьПараметр("Объект", Объект);
		Запрос.УстановитьПараметр("СкачатьВсеФайлы", ?(Файлы = Неопределено, Истина, Ложь));
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ВременныйКаталог = РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(СтрЗаменить(ПолучитьИмяВременногоФайла("sdms.path"), ".sdms.path", ""));
			СоздатьКаталог(ВременныйКаталог);
			
			// Получение номера объекта для имени архива
			ТипОбъекта = ТипЗнч(Объект);
			
			Если ТипОбъекта = Тип("Неопределено") Тогда
				ПорядковыйНомер = "images";
			ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
				ПорядковыйНомер = Объект.Код;
			ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
				ПорядковыйНомер = Объект.Номер;
			Иначе
				ПорядковыйНомер = "unnumbered";
			КонецЕсли;
			
			ИмяФайла       = "attachments_" + ПорядковыйНомер + ".zip";
			ПолноеИмяФайла = ВременныйКаталог + ИмяФайла;
			ЗаписьАрхива = Новый ЗаписьZipФайла(ПолноеИмяФайла);
			СписокФайлов = Новый Массив;
			СоответствиеФайлХэш = Новый Соответствие;
			
			ТаблицаПодготовленныеФайлы = Новый ТаблицаЗначений;
			ТаблицаПодготовленныеФайлы.Колонки.Добавить("ИмяФайлаИсточника", Новый ОписаниеТипов("Строка"));
			ТаблицаПодготовленныеФайлы.Колонки.Добавить("ИмяФайлаПриемника", Новый ОписаниеТипов("Строка"));
			
			Выборка = РезультатЗапроса.Выбрать();
				
			Пока Выборка.Следующий() Цикл
				
				ИмяФайлаИсточника = КаталогХранения + РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(Выборка.КаталогХраненияФайла)
					+ Выборка.ИмяФайлаНаСервере;
									
				Файл = Новый Файл(ИмяФайлаИсточника);
				Если НЕ Файл.Существует() Тогда
					НесуществующиеФайлы.Добавить(Выборка.ИмяФайлаНаКлиенте);
					Продолжить;
				КонецЕсли;
				
				ИмяФайлаПриемника = ВременныйКаталог + Выборка.ИмяФайлаНаКлиенте;
				
				ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
				ХешированиеДанных.ДобавитьФайл(ИмяФайлаИсточника);
				ХешСтрока = СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");			
				
				// Помещаем в таблицу файлы с разными хешами
				НайденныйФайл = СоответствиеФайлХэш.Получить(ХешСтрока);
				Если НайденныйФайл = Неопределено Тогда
					СоответствиеФайлХэш.Вставить(ХешСтрока, ИмяФайлаИсточника);
					
					СтрокаФайл = ТаблицаПодготовленныеФайлы.Добавить();
					СтрокаФайл.ИмяФайлаИсточника = ИмяФайлаИсточника;
					СтрокаФайл.ИмяФайлаПриемника = ИмяФайлаПриемника;
				КонецЕсли;
			КонецЦикла;
						
			Для Каждого Строка Из ТаблицаПодготовленныеФайлы Цикл				
				
				ИмяФайлаПриемника = Строка.ИмяФайлаПриемника;				
				РезультатПоиска = СписокФайлов.Найти(Строка.ИмяФайлаПриемника);
				Индекс = 0;
				Если РезультатПоиска = Неопределено Тогда
					СписокФайлов.Добавить(Строка.ИмяФайлаПриемника);
				Иначе
					Имя = РаботаСФайламиКлиентСервер.ИмяФайлаБезРасширения(Строка.ИмяФайлаПриемника);
					Расширение = РаботаСФайламиКлиентСервер.РасширениеИмениФайла(Строка.ИмяФайлаПриемника);
					Пока Истина Цикл
						Индекс = Индекс + 1;   
						ПроверяемоеИмя = Имя + " (" + Индекс + ")" + Расширение;
						Если СписокФайлов.Найти(ПроверяемоеИмя) = Неопределено Тогда
							ИмяФайлаПриемника = ПроверяемоеИмя;
							СписокФайлов.Добавить(ИмяФайлаПриемника);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
								
				КопироватьФайл(Строка.ИмяФайлаИсточника, ИмяФайлаПриемника);
				ЗаписьАрхива.Добавить(ИмяФайлаПриемника);
			КонецЦикла;
			
			ЗаписьАрхива.Записать();
				
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяФайла), ИдентификаторФормы);
			ПодготовленныеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла, АдресВоВременномХранилище));
			
			УдалитьФайлы(ВременныйКаталог);
		КонецЕсли;
	ИначеЕсли ЗагрузкаИзображенийОписания Тогда
		Для Каждого Изображение Из Файлы Цикл
			Если НЕ ЭтоАдресВременногоХранилища(Изображение.АдресВХранилище) Тогда
				КаталогФайловНаСервере = ПовторноеИспользованиеВызовСервера.КаталогХраненияФайловНаСервере();
				ИмяФайла = КаталогФайловНаСервере + ОбщегоНазначенияКлиентСервер.ДобавитьСлэш(Изображение.Каталог, Истина) + Изображение.УникальноеИмяФайла;  			
				Файл = Новый Файл(ИмяФайла);
				Если НЕ Файл.Существует() Тогда
					НесуществующиеФайлы.Добавить(ИмяФайла);
					Продолжить;
				КонецЕсли;	
				АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла), ИдентификаторФормы);	
			Иначе
				АдресВоВременномХранилище = Изображение.АдресВХранилище; 
			КонецЕсли;
			
			ПодготовленныеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(Изображение.КороткоеИмяФайла, АдресВоВременномХранилище));
		КонецЦикла;				
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.Наименование КАК ИмяФайлаНаСервере,
		|	Файлы.ОригинальноеИмя КАК ИмяФайлаНаКлиенте,
		|	Файлы.Каталог КАК КаталогНаСервере
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.Ссылка В (&Файлы)";
		
		Запрос.УстановитьПараметр("Файлы", Файлы);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ИмяФайла = КаталогХранения + РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(Выборка.КаталогНаСервере) 
				+ Выборка.ИмяФайлаНаСервере;
			Файл = Новый Файл(ИмяФайла);
			Если НЕ Файл.Существует() Тогда
				НесуществующиеФайлы.Добавить(Выборка.ИмяФайлаНаКлиенте);
				Продолжить;
			КонецЕсли;	
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла), ИдентификаторФормы);
			ПодготовленныеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(Выборка.ИмяФайлаНаКлиенте, АдресВоВременномХранилище));
		КонецЦикла;		
	КонецЕсли;
	
	Возврат Новый Структура("ПодготовленныеФайлы, НенайденныеФайлы", ПодготовленныеФайлы, НесуществующиеФайлы);
	
КонецФункции

// Выполняет подготовку данных для сохранения их на диске сервера и в БД для объектов.
//
// Параметры:
//  СохраняемыеФайлы	 - Массив	 - массив элементов типа Структура с описанием свойств файлов.
//  Владелец			 - ЛюбаяСсылка	 - владелец присоединяемых файлов.
//  ВозвращатьРезультат	 - Булево		 - Принзнак возврата результата в виде структуры
//  Параметры			 - Структура	 - дополнительные параметры обработки
// 
// Возвращаемое значение:
//  Структура - Реультат сохранения файлов
//
Функция СохранитьФайлыНаСервере(СохраняемыеФайлы, Владелец, Знач ВозвращатьРезультат, Параметры = Неопределено) Экспорт
		
	// Уникальный идентификатор владельца будет имененм для каталога
	КаталогТекущихФайлов = Строка(Владелец.УникальныйИдентификатор());
	
	// Поместим описание сохраняемых файлов в таблицу
	ТаблицаОписанияФайлов = ПоместитьОписаниеФайловВТаблицу(СохраняемыеФайлы, КаталогТекущихФайлов);
			
	Результат = Новый Структура("Ошибка, ТекстОшибки, ТаблицаФайлов");
	
	Попытка
		// Передаем сформированную информацию на сервер для сохранения файлов		
		Если Параметры = Неопределено Тогда    
			ПараметрыСохранения = Новый Структура;
			ИнтеграцияДополнительныхПодсистем.ДополнитьПараметрыДляСохраненияФайлов(Владелец, ПараметрыСохранения);
		КонецЕсли;
		
		РаботаСФайламиСервер.СохранитьФайлыНаСервере(Владелец, ТаблицаОписанияФайлов, ПараметрыСохранения);
		
		Результат.Ошибка = Ложь;
		Результат.ТаблицаФайлов = ТаблицаОписанияФайлов;
	Исключение
		
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки = ОписаниеОшибки();
		
		Если НЕ ВозвращатьРезультат Тогда
			ЗаписьЖурналаРегистрации("Работа с файлами.Сохранение", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
		КонецЕсли;
	КонецПопытки;
	
	Возврат ?(ВозвращатьРезультат, Результат, Неопределено);
	
КонецФункции

// Возвращает данные для отправки электронной почты
//
// Параметры:
//  ДопДанные	 - Структура	 - данные письма
// 
// Возвращаемое значение:
//  Струтура - данные для отправка почты
//
Функция ПолучитьАдресПочты(ДопДанные) Экспорт
	
	Данные = Новый Структура("Получатель, АдресаДляОтправкиКопий, ВнешняяСсылка, Тема", , "");
	
	ТипЗначения = ТипЗнч(ДопДанные.Ссылка);
	
	Если ТипЗначения = Тип("СправочникСсылка.Проекты") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Проекты.Руководитель.Почта КАК Руководитель,
		|	Проекты.Заказчик.Почта КАК Заказчик,
		|	Проекты.Куратор.Почта КАК Куратор
		|ПОМЕСТИТЬ ПользовательИзПроекта
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Участники.Пользователь КАК Наблюдатель
		|ПОМЕСТИТЬ Наблюдатели
		|ИЗ
		|	РегистрСведений.Участники КАК Участники
		|ГДЕ
		|	(ВЫРАЗИТЬ(Участники.Объект КАК Справочник.Проекты)) = &Ссылка
		|	И Участники.Роль В (ЗНАЧЕНИЕ(Справочник.РолиУчастников.Наблюдатель), ЗНАЧЕНИЕ(Справочник.РолиУчастников.Подписчик), ЗНАЧЕНИЕ(Справочник.РолиУчастников.УчастникКомандыУправленияПроектом))
		|	И &Наблюдатели
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Пользователи.Почта, ЕСТЬNULL(Подписчики.Наименование, """")) КАК Почта
		|ИЗ
		|	Наблюдатели КАК Наблюдатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ((ВЫРАЗИТЬ(Наблюдатели.Наблюдатель КАК Справочник.Пользователи)) = Пользователи.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Подписчики КАК Подписчики
		|		ПО ((ВЫРАЗИТЬ(Наблюдатели.Наблюдатель КАК Справочник.Подписчики)) = Подписчики.Ссылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПользовательИзПроекта.Руководитель
		|ИЗ
		|	ПользовательИзПроекта КАК ПользовательИзПроекта
		|ГДЕ
		|	&Руководитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПользовательИзПроекта.Заказчик КАК Почта
		|ИЗ
		|	ПользовательИзПроекта КАК ПользовательИзПроекта
		|ГДЕ
		|	ПользовательИзПроекта.Заказчик <> """"
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПользовательИзПроекта.Куратор
		|ИЗ
		|	ПользовательИзПроекта КАК ПользовательИзПроекта
		|ГДЕ
		|	ПользовательИзПроекта.Куратор <> """"";
		
		Запрос.УстановитьПараметр("Ссылка", ДопДанные.Ссылка);
		Запрос.УстановитьПараметр("Руководитель", ДопДанные.Адресаты.Руководитель);
		Запрос.УстановитьПараметр("Наблюдатели", ДопДанные.Адресаты.Наблюдатели);
		
		Пакет = Запрос.ВыполнитьПакет();
		
		Получатели = Пакет.Получить(2);
		ПолучателиКопии = Пакет.Получить(3);
		
		Если НЕ ПолучателиКопии.Пустой() Тогда
			АдресаКопии = ПолучателиКопии.Выгрузить().ВыгрузитьКолонку("Почта");
			СтрокаАдресовКопии = СтрСоединить(АдресаКопии, "; ");
		Иначе
			СтрокаАдресовКопии = "";
		КонецЕсли;
		
		Если НЕ Получатели.Пустой() Тогда
			МассивАдресов = Получатели.Выгрузить().ВыгрузитьКолонку("Почта");
			СтрокаАдресов = СтрСоединить(МассивАдресов, "; ");
			Данные.Вставить("Получатель", СтрокаАдресов);
			Данные.Вставить("АдресаДляОтправкиКопий", СтрокаАдресовКопии);
		Иначе
			Данные.Вставить("Получатель", СтрокаАдресовКопии);
		КонецЕсли;
		
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ВнутреннееЗадание") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВнутреннееЗадание.Автор.Почта КАК Автор,
		|	ВнутреннееЗадание.Заказчик.Почта КАК Заказчик,
		|	ВнутреннееЗадание.Назначена.Почта КАК Назначена
		|ПОМЕСТИТЬ ПользовательИзЗадания
		|ИЗ
		|	Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
		|ГДЕ
		|	ВнутреннееЗадание.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Участники.Пользователь КАК Наблюдатель
		|ПОМЕСТИТЬ Наблюдатели
		|ИЗ
		|	РегистрСведений.Участники КАК Участники
		|ГДЕ
		|	(ВЫРАЗИТЬ(Участники.Объект КАК Документ.ВнутреннееЗадание)) = &Ссылка
		|	И Участники.Роль В (ЗНАЧЕНИЕ(Справочник.РолиУчастников.Наблюдатель), ЗНАЧЕНИЕ(Справочник.РолиУчастников.Подписчик), ЗНАЧЕНИЕ(Справочник.РолиУчастников.УчастникКомандыУправленияПроектом))
		|	И &Наблюдатели
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Пользователи.Почта, ЕСТЬNULL(Подписчики.Наименование, """")) КАК Почта
		|ИЗ
		|	Наблюдатели КАК Наблюдатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ((ВЫРАЗИТЬ(Наблюдатели.Наблюдатель КАК Справочник.Пользователи)) = Пользователи.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Подписчики КАК Подписчики
		|		ПО ((ВЫРАЗИТЬ(Наблюдатели.Наблюдатель КАК Справочник.Подписчики)) = Подписчики.Ссылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПользовательИзЗадания.Автор
		|ИЗ
		|	ПользовательИзЗадания КАК ПользовательИзЗадания
		|ГДЕ
		|	&Автор
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПользовательИзЗадания.Заказчик
		|ИЗ
		|	ПользовательИзЗадания КАК ПользовательИзЗадания
		|ГДЕ
		|	&Заказчик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПользовательИзЗадания.Назначена КАК Почта
		|ИЗ
		|	ПользовательИзЗадания КАК ПользовательИзЗадания";
		
		Запрос.УстановитьПараметр("Ссылка", ДопДанные.Ссылка);
		Запрос.УстановитьПараметр("Автор", ДопДанные.Адресаты.Автор);
		Запрос.УстановитьПараметр("Заказчик", ДопДанные.Адресаты.Заказчик);
		Запрос.УстановитьПараметр("Наблюдатели", ДопДанные.Адресаты.Наблюдатели);
		
		Пакеты = Запрос.ВыполнитьПакет();
		Получатели = Пакеты.Получить(2);
		ПолучателиКопии = Пакеты.Получить(3);
		
		Если НЕ ПолучателиКопии.Пустой() Тогда
			АдресНазначенного = ПолучателиКопии.Выгрузить().ВыгрузитьКолонку("Почта")[0];
		Иначе
			АдресНазначенного = "";
		КонецЕсли;
		
		Если НЕ Получатели.Пустой() Тогда
			МассивАдресов = Получатели.Выгрузить().ВыгрузитьКолонку("Почта");
			СтрокаАдресов = СтрСоединить(МассивАдресов, "; ");
			Данные.Вставить("Получатель", СтрокаАдресов);
			Данные.Вставить("АдресаДляОтправкиКопий", АдресНазначенного);
		Иначе
			Данные.Вставить("Получатель", АдресНазначенного);
		КонецЕсли;
		
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
		Почта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДопДанные.Получатель, "Почта");
		Данные.Вставить("Получатель", Почта);
	КонецЕсли;
	
	Данные.Тема = КодироватьСтроку(Строка(ДопДанные.Ссылка), СпособКодированияСтроки.КодировкаURL);
	Данные.ВнешняяСсылка  = ОбщегоНазначения.ПолучитьHTTPСсылкуНаОбъект(ДопДанные.Ссылка);
	
	Возврат Данные;
	
КонецФункции

// Помещает описание сохраняемых файлов для объектов в таблицу.
//
// Параметры:
//  СохраняемыеФайлы	 - Массив	 - массив элементов типа Структура с описанием свойств файлов.
//  КаталогТекущихФайлов - Строка	 - каталог текущих файлов
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица описаний файлов
//
Функция ПоместитьОписаниеФайловВТаблицу(СохраняемыеФайлы, КаталогТекущихФайлов) Экспорт
		
	// Таблица будет хранить список выгруженных в каталог сервера файлов. Эти
	// данные пригодятся в случае, если при создании задачи произошла ошибка.
	// Тогда файлы и каталоги по этой таблице надо будет удалить с сервера.
	ТаблицаОписанияФайлов = РаботаСФайламиСервер.ТаблицаОписанияФайлов();
	
	Для Каждого ОписаниеФайла Из СохраняемыеФайлы Цикл
		НоваяСтрока = ТаблицаОписанияФайлов.Добавить();
		НоваяСтрока.Имя                = ОписаниеФайла.Имя;
		НоваяСтрока.ПолноеИмяНаКлиенте = ОписаниеФайла.ПолноеИмя;
		НоваяСтрока.ОригинальноеИмя    = ОписаниеФайла.Имя;
		НоваяСтрока.Размер			   = ОписаниеФайла.Размер;
		НоваяСтрока.Каталог            = КаталогТекущихФайлов;
		НоваяСтрока.Назначение         = Перечисления.НазначенияФайлов.Объект;
		НоваяСтрока.АдресВоВременномХранилище = ОписаниеФайла.АдресВХранилище;		
		
		СсылкаНовогоФайла = Справочники.Файлы.ПолучитьСсылку();
		НоваяСтрока.Ссылка = СсылкаНовогоФайла;
		НоваяСтрока.НовыйФайл = Истина;
	КонецЦикла;
	
	Возврат ТаблицаОписанияФайлов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с данными БД

// Возвращает признак "Черновик" из заявки на разработку.
//
// Параметры:
//  Ссылка - ДокументСсылка.ЗаявкаНаРазработку - ссылка на объект.
//
// Возвращаемое значение:
//  Признак черновика.
//
Функция ЗаявкаНаРазработкуЯвляетсяЧерновиком(Знач Ссылка) Экспорт
	
	Возврат Ссылка.Черновик;
	
КонецФункции

// Возвращает значение реквизита ВидПроцесса
//
// Параметры:
//  Объект	 - СправочникСсылка.Проекты, ДокументСсылка.ВнутреннееЗадание, ДокументСсылка.Задача, ДокументСсылка.ЗаявкаНаРазработку	 - объект, значение реквизита которого требуется получить
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыПроцессов - вид процесса
//
Функция ПолучитьВидПроцессаОбъекта(Знач Объект) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ВидПроцесса");
	
КонецФункции

// Возвращает признак использования разделения видов процессов в направлении
//
// Параметры:
//  Направление	 - СправочникСсылка.НаправленияРазработки	 - направление, признак которого тебуется получить
// 
// Возвращаемое значение:
//  Булево - признак использования видов процессов в направлении разработки
//
Функция ПолучитьИспользованиеВидовПроцессов(Знач Направление) Экспорт
	
	Возврат Справочники.НаправленияРазработки.ИспользуетВидыПроцессов(Направление);
	
КонецФункции

// Возвращает ссылку на документ МатрицаТребований
//
// Параметры:
//  ДокументОснование - СправочникСсылка.Проект или ДокументСсылка.ВнутреннееЗадание 
// 
// Возвращаемое значение:
//   - ДокументСсылка.МатрицаТребований.
//
Функция ПолучитьСсылкуМатрицаТребований(Знач ДокументОснование) Экспорт
	
	МатрицаТребований = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МатрицаТребований.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.МатрицаТребований КАК МатрицаТребований
	|ГДЕ
	|	МатрицаТребований.ОбъектОснование = &ОбъектОснование";
	
	Запрос.УстановитьПараметр("ОбъектОснование", ДокументОснование);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		МатрицаТребований =  Выборка.Ссылка;
	КонецЕсли;
	
	Возврат МатрицаТребований;

КонецФункции

// Функция - Получить данные объекта основания
//
// Параметры:
//  Объект	 - СправочникСсылка.Проекты,ДокументСсылка.ВнутреннееЗадание - объект
// 
// Возвращаемое значение:
//  Структура - ВидПроцесса,ЮридическоеЛицо,Проект
//
Функция ПолучитьДанныеОбъектаОснования(Знач Объект) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.ВнутреннееЗадание") Тогда
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "ВидПроцесса, Проект, ЮридическоеЛицо, Продукт");
	Иначе
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "ВидПроцесса, ЮридическоеЛицо, Продукт");
		Результат.Вставить("Проект", Объект);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Профиль разработчика

Функция ПроверитьСуществованиеПрофиляРазработчика() Экспорт
	
	Результат = Новый Структура("ПрофильСуществует, Ссылка", Ложь, Справочники.ПрофилиРазработчиков.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрофилиРазработчиков.Ссылка КАК Профиль
	|ИЗ
	|	Справочник.ПрофилиРазработчиков КАК ПрофилиРазработчиков
	|ГДЕ
	|	ПрофилиРазработчиков.Владелец = &Владелец
	|	И НЕ ПрофилиРазработчиков.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Результат.ПрофильСуществует = Истина;
	Результат.Ссылка = Выборка.Профиль;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Хранилища настроек

Функция ЗагрузитьНастройкиДанныхФормы(Знач КлючОбъекта, Знач КлючНастроек, Знач ИмяПользователя = Неопределено) Экспорт
	
	Если ИмяПользователя = Неопределено Тогда
		ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	КонецЕсли;
	
	Возврат ХранилищеНастроекДанныхФорм.Загрузить(КлючОбъекта, КлючНастроек, , ИмяПользователя);
	
КонецФункции

Функция ЗагрузитьОбщиеНастройки(Знач КлючОбъекта, Знач КлючНастроек, Знач ИмяПользователя = Неопределено) Экспорт
	
	Если ИмяПользователя = Неопределено Тогда
		ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	КонецЕсли;
	
	Возврат ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек, , ИмяПользователя);
	
КонецФункции

Функция ЗагрузитьСистемнуюНастройку(Знач КлючОбъекта, Знач КлючНастроек, Знач ИмяПользователя = "", Знач УдалитьПослеЧтения = Ложь) Экспорт
	
	Если ПустаяСтрока(ИмяПользователя) Тогда
		ИмяПользователя = ИмяПользователя();
	КонецЕсли;
	
	Настройка = ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта, КлючНастроек, , ИмяПользователя);
	
	Если УдалитьПослеЧтения Тогда
		УдалитьСистемнуюНастройку(КлючОбъекта, КлючНастроек, ИмяПользователя);
	КонецЕсли;
	
	Возврат Настройка;
	
КонецФункции

// Считывает настройку динамических списков
//
// Параметры:
//  КлючОбъекта			 - Строка	 - Ключ объекта
//  КлючНастроек		 - Строка	 - Ключ настроек
//  ИмяПользователя		 - Строка	 - Имя пользователя
//  УдалитьПослеЧтения	 - Булево	 - Флаг удаления после чтения
// 
// Возвращаемое значение:
//  Настройка - Хранимая настройка
//
Функция ЗагрузитьНастройкуДинамическихСписков(Знач КлючОбъекта, Знач КлючНастроек, 
		Знач ИмяПользователя = "", Знач УдалитьПослеЧтения = Ложь) Экспорт
	
	Если ПустаяСтрока(ИмяПользователя) Тогда
		ИмяПользователя = ИмяПользователя();
	КонецЕсли;
	
	Настройка = ХранилищеПользовательскихНастроекДинамическихСписков.Загрузить(КлючОбъекта, КлючНастроек, , ИмяПользователя);
	
	Если УдалитьПослеЧтения Тогда
		УдалитьСистемнуюНастройку(КлючОбъекта, КлючНастроек, ИмяПользователя);
	КонецЕсли;
	
	Возврат Настройка;
	
КонецФункции

Процедура СохранитьНастройкиДанныхФормы(Знач КлючОбъекта, Знач КлючНастроек, Знач Настройки, Знач ИмяПользователя = Неопределено) Экспорт

	Если ИмяПользователя = Неопределено Тогда
		ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	КонецЕсли;
	
	ХранилищеНастроекДанныхФорм.Сохранить(КлючОбъекта, КлючНастроек, Настройки, , ИмяПользователя);
	
КонецПроцедуры

Процедура СохранитьОбщиеНастройки(Знач КлючОбъекта, Знач КлючНастроек, Знач Настройки, Знач ИмяПользователя = Неопределено) Экспорт
	
	Если ИмяПользователя = Неопределено Тогда
		ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	КонецЕсли;
	
	ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, Настройки, , ИмяПользователя);
	
КонецПроцедуры

Процедура СохранитьСистемнуюНастройку(Знач КлючОбъекта, Знач КлючНастроек, Знач Настройки, Знач ИмяПользователя = "") Экспорт
	
	Если ПустаяСтрока(ИмяПользователя) Тогда
		ИмяПользователя = ИмяПользователя();
	КонецЕсли;
	
	ХранилищеСистемныхНастроек.Сохранить(КлючОбъекта, КлючНастроек, Настройки, , ИмяПользователя);
	
КонецПроцедуры

Процедура УдалитьНастройкиДанныхФормы(Знач КлючОбъекта, Знач КлючНастроек, Знач ИмяПользователя = Неопределено) Экспорт
	
	Если ИмяПользователя = Неопределено Тогда
		ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	КонецЕсли;
	
	ХранилищеНастроекДанныхФорм.Удалить(КлючОбъекта, КлючНастроек, ИмяПользователя);
	
КонецПроцедуры

Процедура УдалитьОбщиеНастройки(Знач КлючОбъекта, Знач КлючНастроек, Знач ИмяПользователя = Неопределено) Экспорт
	
	Если ИмяПользователя = Неопределено Тогда
		ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	КонецЕсли;
	
	ХранилищеОбщихНастроек.Удалить(КлючОбъекта, КлючНастроек, ИмяПользователя);
	
КонецПроцедуры

Процедура УдалитьСистемнуюНастройку(Знач КлючОбъекта, Знач КлючНастроек, Знач ИмяПользователя = "") Экспорт
	
	Если ПустаяСтрока(ИмяПользователя) Тогда
		ИмяПользователя = ИмяПользователя();
	КонецЕсли;
	
	ХранилищеСистемныхНастроек.Удалить(КлючОбъекта, КлючНастроек, ИмяПользователя);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поиск по документам и справочникам

// Заполняет выпадающий список при поиске по номеру объекта
//
// Параметры:
//  СтрокаПоиска	 - Строка - номер искомого объекта 
//  ПараметрыПоиска	 - Массив - масиив представлений объектов, по которым идет поиск
//  ДанныеВыбора	 - Неопределено - значения выпадающего списка 
//
Процедура ЗаполнитьСписокПредложений(Знач СтрокаПоиска, Знач ПараметрыПоиска, ДанныеВыбора) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = СгенерироватьТекстЗапроса(ПараметрыПоиска, СтрокаПоиска);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ДанныеВыбора = Новый СписокЗначений;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ДанныеВыбора.Добавить(), Выборка);		
		КонецЦикла;	
	КонецЕсли;
			
КонецПроцедуры

// Генерирует текст запроса для поиска по номерам объектов
// на основании переданных объектов.
//
// Параметры:
//  Представления	 - Массив - масиив представлений объектов, по которым идет поиск
//  СтрокаПоиска	 - Строка - номер искомого объекта
// 
// Возвращаемое значение:
//  Строка - текст запроса 
//
Функция СгенерироватьТекстЗапроса(Знач Представления, Знач СтрокаПоиска)
	
	Шаблон =
	"ВЫБРАТЬ ПЕРВЫЕ 5
	|	%1.Ссылка КАК Значение,
	|	%1.Представление КАК Представление
	|ИЗ
	|	%2.%1 КАК %1
	|ГДЕ
	|	%1.Номер ПОДОБНО ""%%{СтрокаПоиска}""";
	
	СтрокиЗапроса = Новый Массив;
	Для Каждого Представление Из Представления Цикл
		
		Данные = СтрРазделить(Представление, ".");
		Тип = Данные[0];
		Объект = Данные[1];
		
		СтрокаЗапроса = СтрШаблон(Шаблон, Объект, Тип);
		СтрокиЗапроса.Добавить(СтрокаЗапроса);		
		
	КонецЦикла;
	
	ТекстЗапроса = СтрСоединить(СтрокиЗапроса, Символы.ПС +  "ОБЪЕДИНИТЬ" + Символы.ПС);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "{СтрокаПоиска}", СтрокаПоиска); 
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Избранное 

Процедура ОбработатьПометкуИзбранного(Знач Значение, Знач Добавление, Знач ИмяТипа) Экспорт
	
	ТипОбъекта = Перечисления.ТипыИзбранныхОбъектов[ИмяТипа];
	РегистрыСведений.ИзбранныеОбъекты.ИзменитьЗапись(Значение, ТипОбъекта, Добавление);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проведуры и функции общего назначения

// Возвращает значение реквизита объекта
//
// Параметры:
//  Ссылка		 - ЛюбаяСсылка	 - сслыка на объект, значение реквизита которого требуется получить
//  ИмяРеквизита - Строка	 - название реквизита как оно задано в конфигураторе
// 
// Возвращаемое значение:
//  Произвольный - значение реквизита объекта
//
Функция ЗначениеРеквизитаОбъекта(Знач Ссылка, Знач ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

Функция ПолучитьВариантНавигационнойСсылки(Знач Ссылка) Экспорт
	
	КлючиНастроек = ОбщегоНазначенияКлиентСервер.КлючиНастроекВариантовНавигационныхСсылок();
	Настройки = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(КлючиНастроек.КлючОбъекта, КлючиНастроек.КлючНастроек);
	
	Если ТипЗнч(Настройки) = Тип("Структура") И Настройки.Свойство("ВариантПредставленияСсылки") Тогда
		ВариантыСсылок = СформироватьВариантыСсылок(Ссылка);
		
		Вариант = Настройки.ВариантПредставленияСсылки;
		Если Вариант = 0 Тогда
			ВариантСсылки = ВариантыСсылок.Внешняя;
		ИначеЕсли Вариант = 1 Тогда
			ВариантСсылки = ВариантыСсылок.Внутренняя;
		ИначеЕсли Вариант = 2 Тогда
			ВариантСсылки = ВариантыСсылок.Markdown;
		ИначеЕсли Вариант = 3 Тогда
			Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.Задача") Тогда
				ВариантСсылки = ВариантыСсылок.КороткаяСсылка;
			Иначе
				ВариантСсылки = ВариантыСсылок.Внешняя;
			КонецЕсли;
		КонецЕсли;
		
		НавигационнаяСсылка = ВариантыСсылок.Внешняя;
	Иначе
		НавигационнаяСсылка = ОбщегоНазначения.ПолучитьHTTPСсылкуНаОбъект(Ссылка);
		ВариантСсылки = НавигационнаяСсылка;
	КонецЕсли;
	
	Результат = Новый Структура("ВариантСсылки, НавигационнаяСсылка, Представление", ВариантСсылки, НавигационнаяСсылка, Строка(Ссылка));
	Возврат Результат;
	
КонецФункции
	
Функция СформироватьВариантыСсылок(Знач Ссылка) Экспорт
	
	// Текстовое представление объекта 
	ПредставлениеСсылки = СтрЗаменить(Строка(Ссылка), "[", "");
	ПредставлениеСсылки = СтрЗаменить(ПредставлениеСсылки, "]", "");
	
	Результат = Новый Структура;
	Результат.Вставить("Внешняя", ОбщегоНазначения.ПолучитьHTTPСсылкуНаОбъект(Ссылка));
	Результат.Вставить("Внутренняя", ПолучитьНавигационнуюСсылку(Ссылка));
	Результат.Вставить("Markdown", СтрШаблон("[%1](%2)", ПредставлениеСсылки, Результат.Внешняя));
	
	КороткаяСсылка = "";
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.Задача") Тогда
		КороткаяСсылка = Документы.Задача.СсылкаДляПубликации1С(Ссылка);
	КонецЕсли;
	
	Результат.Вставить("КороткаяСсылка", КороткаяСсылка);
	
	Возврат Результат;
	
КонецФункции

Функция ХэшСумма(Знач Данные, Знач РезультатСтрокой = Истина) Экспорт
	
	ХэшированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХэшированиеДанных.Добавить(Данные);
	
	Если РезультатСтрокой Тогда
		Результат = СтрЗаменить(ХэшированиеДанных.ХешСумма, " ", "");
	Иначе
		Результат = ХэшированиеДанных.ХешСумма;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заинтересованные лица

Функция ПолучитьЗаинтересованныхЛиц(Знач Объект) Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрСведенийЗаинтересованныеЛица.Пользователь КАК Пользователь,
	|	РегистрСведенийЗаинтересованныеЛица.Роль КАК Роль,
	|	РегистрСведенийЗаинтересованныеЛица.ОтношениеКПроекту КАК ОтношениеКПроекту,
	|	РегистрСведенийЗаинтересованныеЛица.ДатаДобавления КАК ДатаДобавления,
	|	РегистрСведенийЗаинтересованныеЛица.Должность КАК Должность
	|ПОМЕСТИТЬ ОтобранныеЛица
	|ИЗ
	|	РегистрСведений.ЗаинтересованныеЛица КАК РегистрСведенийЗаинтересованныеЛица
	|ГДЕ
	|	РегистрСведенийЗаинтересованныеЛица.Объект = &Объект
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеЛица.Пользователь КАК Пользователь,
	|	ОтобранныеЛица.Роль КАК Роль,
	|	ОтобранныеЛица.ОтношениеКПроекту КАК ОтношениеКПроекту,
	|	ОтобранныеЛица.ДатаДобавления КАК ДатаДобавления,
	|	ЕСТЬNULL(Пользователи.Должность, ОтобранныеЛица.Должность) КАК Должность
	|ИЗ
	|	ОтобранныеЛица КАК ОтобранныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ((ВЫРАЗИТЬ(ОтобранныеЛица.Пользователь КАК Справочник.Пользователи)) = Пользователи.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Роль,
	|	ДатаДобавления";
	
	Запрос.УстановитьПараметр("Объект", Объект);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Заинтересованный = Новый Структура("Пользователь, Роль, ОтношениеКПроекту, ДатаДобавления, Должность");
		ЗаполнитьЗначенияСвойств(Заинтересованный, Выборка);
		Результат.Добавить(Заинтересованный);
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКоличествоЗаинтересованныхЛиц(Знач Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	РегистрСведений.ЗаинтересованныеЛица КАК РегистрСведенийЗаинтересованныеЛица
	|ГДЕ
	|	РегистрСведенийЗаинтересованныеЛица.Объект = &Объект";
	
	Запрос.Параметры.Вставить("Объект", Объект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

Процедура УдалитьЗаписьЗаинтересованныеЛица(Знач Объект, Знач Пользователь) Экспорт
	
	РегистрыСведений.ЗаинтересованныеЛица.УдалитьЗапись(Объект, Пользователь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СрокСдачиЗадачи

Процедура СохранитьСрокСдачи(Знач Задача, Знач Дата, Знач ДатаДоИзменения = Неопределено, Знач Комментарий = "") Экспорт
				
	РегистрыСведений.СрокиСдачиЗадач.СохранитьСрокСдачи(Задача, Дата, ДатаДоИзменения, Комментарий);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Филиалы

// Возвращает ссылку на текущий филиал пользователя с указанным уровнем.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - ссылка на пользователя.
//
// Возвращаемое значение:
//  СправочникСсылка.Филиал - ссылку на текущий филиал пользователя, если запись для пользователя есть,
// 		либо пустую ссылка, если записи нет.
//
Функция ФилиалПользователя(Знач Пользователь) Экспорт
		
	Возврат РегистрыСведений.ЛичныеДела.ФилиалПользователя(Пользователь);
	
КонецФункции

#КонецОбласти
