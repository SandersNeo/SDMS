///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
//   
// Серверные процедуры и функции для работы с системы безопасности:
// - для проверки наличия программных ролей пользователей;
// - для изменения интерфейсов после расчет интерактивных ролей;
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Проверяем, нужно ли добавлять кнопку "Настройка прав" для текущего объекта.
Функция ДоступнаНастройкаПравДляОбъекта(Знач ПолноеИмяФормы) Экспорт
	
	ОбъектМетаданных = ОбщегоНазначения.ПолучитьИдентификаторОбъекта(ПолноеИмяФормы);
	
	Возврат ЗначениеЗаполнено(ОбъектМетаданных);
	
КонецФункции

// Проверяет, можно ли пользователю открывать переданную форму
//
// Параметры:
//  Форма	 - УправляемаяФорма	 - форма объекта
//  Отказ	 - Булево	 - признак отказа от открытия. Должен быть признаком формы.
//
Процедура НастроитьФормуПередОткрытием(Форма, Отказ) Экспорт
	
	// Первым шагом проверяем роль "ПолныеПрава" - это наш суперпользователь.
	Если УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("ПолныеПрава") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПрав = ПолучитьБезопасностьОбъекта(Форма.ИмяФормы, Справочники.ПрограммныеРоли.Открытие, Форма.Объект.Ссылка);
	
	// Рассчитаем значения безопасности в разрезе прав (т.к их может быть
	// несколько для одного права).
	ТаблицаПравоВидРазрешения = РассчитатьБезопасностьПоТаблицеПрав(ТаблицаПрав, Форма.Объект.Ссылка);

	// Теперь нужно проверить есть ли разрешение для каждого из прав.
	Для Каждого СтрокаТаблицы Из ТаблицаПравоВидРазрешения Цикл		
		Разрешение = (СтрокаТаблицы.ВидРазрешенияПредставление = Перечисления.ВидыПравДоступа.Разрешено);
		
		Если НЕ Разрешение Тогда
			Отказ = Истина; 
			Попытка
				Форма["СообщениеПользователю"] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Право, "СообщениеПользователю");
			Исключение
			КонецПопытки;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Производит настройку интерфейса формы в зависимости от интерактивных прав.
//
// Параметры:
//  Форма	 - УправляемаяФорма	 - форма
//
Процедура НастроитьФормуПослеОткрытия(Форма) Экспорт
	
	СоответствиеИмяФормыСсылка = ПолучитьСоответствиеИмяФормыСсылка();
	
	ИмяРеквизитаСсылка = СоответствиеИмяФормыСсылка.Получить(Форма.ИмяФормы);
	Если ИмяРеквизитаСсылка = Неопределено Тогда
		СсылкаНаОбъект = Форма.Объект.Ссылка;
	ИначеЕсли НЕ ЗначениеЗаполнено(ИмяРеквизитаСсылка) Тогда
		СсылкаНаОбъект = Неопределено;
	Иначе
		СсылкаНаОбъект = Форма[ИмяРеквизитаСсылка];
	КонецЕсли;

	ТаблицаПрав = ПолучитьБезопасностьОбъекта(Форма.ИмяФормы, Справочники.ПрограммныеРоли.Изменение, СсылкаНаОбъект);
	
	// Рассчитаем значения безопасности в разрезе прав (т.к их может быть
	// несколько для одного права).
	ТаблицаПравоВидРазрешения = РассчитатьБезопасностьПоТаблицеПрав(ТаблицаПрав, СсылкаНаОбъект);

	// TODO
	// Пока реквизит создан интерактивно, возможно стоит перенести на программное создание.
	// Помещаем таблицу безопасностей во временное хранилище, если там что-то есть.
	Если ТаблицаПравоВидРазрешения.Количество() <> 0 Тогда
		Форма.АдресТаблицыБезопасностей = ПоместитьВоВременноеХранилище(ТаблицаПравоВидРазрешения, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
	// Вызываем процедуру по последовательной настройке каждой безопасности.
	НастроитьИнтерактивнуюБезопасность(Форма, ТаблицаПравоВидРазрешения);
		
КонецПроцедуры

// Производит настройку интерфейса, на основании таблицы разрешений. Необходимо для
// того, чтобы из формы объекта вызвать настройку конкретных элементов.
Процедура НастроитьИнтерактивнуюБезопасность(Форма, ТаблицаПравоВидРазрешения) Экспорт 
	
	Для Каждого СтрокаТаблицы Из ТаблицаПравоВидРазрешения Цикл		
		Разрешение = (СтрокаТаблицы.ВидРазрешенияПредставление = Перечисления.ВидыПравДоступа.Разрешено);
		
		Выполнить(Строка(СтрокаТаблицы.ИмяМетодаНастройки) + "(Форма, Разрешение);");
	КонецЦикла;
	
КонецПроцедуры

// Проверяет нахождение пользователя в группе доступа
// 
// Возвращаемое значение:
//  Булево - признак наличия права создания кастомных команд
//
Функция НаходитсяВГруппеДоступа(Знач ГруппаДоступа, Знач Пользователь = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли; 
	
	ГруппыДоступа = БезопасностьПовтИсп.ПолучитьГруппыДоступаПользователя(Пользователь); 
	
	Возврат ГруппыДоступа.Найти(ГруппаДоступа) <> Неопределено;
	
КонецФункции

// Получает таблицу прав по текущему объекту и пользователю. Используется в форме просмотра
// списка прав для пользователя.
//
// Параметры:
//		- ПолноеИмяФормы - Строка - полное имя текущей формы - ЭтотОбъект.ИмяФормы.
//
//		- ОбъектСсылка - ОпределяемыйТип.ОбъектОграниченийДоступа - ссылка на конкретный объект
//									ограничений для РС.НастройкиПравОбъектов.
// Возвращаемое значение:
//		- ТаблицаПрав - ТаблицаЗначений - таблица со всеми необходимыми параметрами для
//									дальнейшего расчета прав.
Функция ПолучитьНастройкиБезопасностиПоОбъектуДляПользователя(Знач ПолноеИмяФормы, Знач ОбъектСсылка) Экспорт
	
	ТаблицаПрав = ПолучитьВсюБезопасностьОбъекта(ПолноеИмяФормы, ОбъектСсылка);
	
	// Рассчитаем значения безопасности в разрезе прав (т.к их может быть
	// несколько для одного права).
	ТаблицаПравоВидРазрешения = РассчитатьБезопасностьПоТаблицеПрав(ТаблицаПрав, ОбъектСсылка);
			
	Возврат ТаблицаПравоВидРазрешения;
	
КонецФункции

// TODO
// Нужно как мне кажется исключить роли Чтение, Изменение - которые принадлежат текущему объекту.
// Чтобы нельзя было давать права на эти роли пользователям.
// Или завести как предопределенные.

// Функция получает ограниченный список прав (по типу права, например права
//  используемые при открытии формы) для текущего объекта и пользователя.
//
// Параметры:
//  ПолноеИмяФормы - Строка									 - Полное имя формы.
//  ТипПрава		 - СправочникСсылка.ПрограммныеРоли	 - ссылка на элемент справочника
//  	(группы справочника) для отбора соотв. прав.
//  Объект			 - ОпределяемыйТип.ОбъектОграниченийДоступа	 - ссылка на конкретный объект
//  	ограничений для РС.НастройкиПравОбъектов.
// 
// Возвращаемое значение:
//   - ТаблицаПрав - ТаблицаЗначений - таблица со всеми необходимыми параметрами для
//  дальнейшего расчета прав.
//
Функция ПолучитьБезопасностьОбъекта(Знач ПолноеИмяФормы, Знач ТипПрава, Знач Объект = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИдентификаторыОбъектовМетаданных.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ИдентификаторыМетаданныхОбъекта
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|ГДЕ
	|	НЕ ИдентификаторыОбъектовМетаданных.ПометкаУдаления
	|	И НЕ ИдентификаторыОбъектовМетаданных.ЭтоГруппа
	|	И ИдентификаторыОбъектовМетаданных.ПолноеИмяФормы = &ПолноеИмяФормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвязьОбъектовИРолей.Роль КАК Право,
	|	ЕСТЬNULL(ПрограммныеРоли.Родитель, ЗНАЧЕНИЕ(Справочник.ПрограммныеРоли.ПустаяСсылка)) КАК ТипПрава,
	|	ВЫБОР
	|		КОГДА НастройкиПравОбъектов.Объект ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ЗначенияРолейДляГруппДоступа.Объект ЕСТЬ NULL
	|						ТОГДА ВЫБОР
	|								КОГДА СвязьОбъектовИРолей.РассчитыватьПраво
	|									ТОГДА НЕОПРЕДЕЛЕНО
	|								ИНАЧЕ СвязьОбъектовИРолей.ЗначениеПоУмолчанию
	|							КОНЕЦ
	|					ИНАЧЕ ЗначенияРолейДляГруппДоступа.ВидПраваДоступа
	|				КОНЕЦ
	|		ИНАЧЕ НастройкиПравОбъектов.ВидПраваДоступа
	|	КОНЕЦ КАК ВидПраваДоступа,
	|	СвязьОбъектовИРолей.ИмяМетода КАК ИмяМетода,
	|	СвязьОбъектовИРолей.ИмяМетодаНастройки КАК ИмяМетодаНастройки
	|ИЗ
	|	РегистрСведений.СвязьОбъектовИРолей КАК СвязьОбъектовИРолей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыМетаданныхОбъекта КАК ИдентификаторыМетаданныхОбъекта
	|		ПО СвязьОбъектовИРолей.Объект = ИдентификаторыМетаданныхОбъекта.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрограммныеРоли КАК ПрограммныеРоли
	|		ПО СвязьОбъектовИРолей.Роль = ПрограммныеРоли.Ссылка
	|			И (ПрограммныеРоли.Родитель = &ТипПрава)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияРолейДляГруппДоступа КАК ЗначенияРолейДляГруппДоступа
	|		ПО (ЗначенияРолейДляГруппДоступа.ГруппаДоступа В (&ГруппыДоступа))
	|			И СвязьОбъектовИРолей.Объект = ЗначенияРолейДляГруппДоступа.Объект
	|			И СвязьОбъектовИРолей.Роль = ЗначенияРолейДляГруппДоступа.Роль
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравОбъектов КАК НастройкиПравОбъектов
	|		ПО (НастройкиПравОбъектов.Объект = &ОбъектСсылка)
	|			И (НастройкиПравОбъектов.Пользователь = &Пользователь)
	|			И СвязьОбъектовИРолей.Роль = НастройкиПравОбъектов.Роль
	|ГДЕ
	|	СвязьОбъектовИРолей.Использование";
	
	Запрос.УстановитьПараметр("ПолноеИмяФормы", ПолноеИмяФормы);
	Запрос.УстановитьПараметр("ГруппыДоступа", БезопасностьПовтИсп.ПолучитьГруппыДоступаПользователя());
	Запрос.УстановитьПараметр("ОбъектСсылка", Объект);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ТипПрава", ТипПрава);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Процедура предназначена для получения таблицы безопасностей для конкретного
// объекта. Используется в форме "Настройка прав объектов".
//
Функция ПолучитьТаблицуБезопасностейДляКонкретногоОбъекта(Знач ПолноеИмяФормы, Знач СсылкаНаОбъект, Знач ДоступныйСписокПрав) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторыОбъектовМетаданных.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ИдентификаторыМетаданныхОбъекта
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|ГДЕ
	|	ИдентификаторыОбъектовМетаданных.ПолноеИмяФормы = &ПолноеИмяФормы
	|	И НЕ ИдентификаторыОбъектовМетаданных.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияРолейДляГруппДоступа.Роль КАК Роль,
	|	ЗначенияРолейДляГруппДоступа.ГруппаДоступа КАК ГруппаДоступа,
	|	ЗначенияРолейДляГруппДоступа.ВидПраваДоступа КАК ВидПраваДоступа,
	|	ВидыПравДоступа.Порядок КАК ПорядокПраваДоступа
	|ПОМЕСТИТЬ ПодготовленныеЗначенияДляГруппДоступа
	|ИЗ
	|	РегистрСведений.ЗначенияРолейДляГруппДоступа КАК ЗначенияРолейДляГруппДоступа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыМетаданныхОбъекта КАК ИдентификаторыМетаданныхОбъекта
	|		ПО ЗначенияРолейДляГруппДоступа.Объект = ИдентификаторыМетаданныхОбъекта.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.ВидыПравДоступа КАК ВидыПравДоступа
	|		ПО ЗначенияРолейДляГруппДоступа.ВидПраваДоступа = ВидыПравДоступа.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодготовленныеЗначенияДляГруппДоступа.Роль КАК Роль,
	|	ПодготовленныеЗначенияДляГруппДоступа.ГруппаДоступа КАК ГруппаДоступа,
	|	МАКСИМУМ(ПодготовленныеЗначенияДляГруппДоступа.ПорядокПраваДоступа) КАК ПорядокПраваДоступа
	|ПОМЕСТИТЬ СгруппированныеЗначенияПравДоступа
	|ИЗ
	|	ПодготовленныеЗначенияДляГруппДоступа КАК ПодготовленныеЗначенияДляГруппДоступа
	|
	|СГРУППИРОВАТЬ ПО
	|	ПодготовленныеЗначенияДляГруппДоступа.Роль,
	|	ПодготовленныеЗначенияДляГруппДоступа.ГруппаДоступа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвязьОбъектовИРолей.Роль КАК Право,
	|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Пользователь,
	|	""<Все пользователи>"" КАК ПредставлениеПользователь,
	|	СвязьОбъектовИРолей.ЗначениеПоУмолчанию КАК Разрешение,
	|	ВЫБОР
	|		КОГДА НЕ СвязьОбъектовИРолей.РассчитыватьПраво
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(СвязьОбъектовИРолей.ЗначениеПоУмолчанию)
	|		ИНАЧЕ ""<Рассчитывается>""
	|	КОНЕЦ КАК ПредставлениеРазрешение,
	|	ПрограммныеРоли.Наименование КАК НаименованиеПрава,
	|	ИСТИНА КАК СлужебнаяЗапись,
	|	1 КАК ПриоритетСтроки
	|ИЗ
	|	РегистрСведений.СвязьОбъектовИРолей КАК СвязьОбъектовИРолей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыМетаданныхОбъекта КАК ИдентификаторыМетаданныхОбъекта
	|		ПО СвязьОбъектовИРолей.Объект = ИдентификаторыМетаданныхОбъекта.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрограммныеРоли КАК ПрограммныеРоли
	|		ПО СвязьОбъектовИРолей.Роль = ПрограммныеРоли.Ссылка
	|			И (ПрограммныеРоли.Ссылка В (&СписокПрав))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СгруппированныеЗначенияПравДоступа.Роль,
	|	СгруппированныеЗначенияПравДоступа.ГруппаДоступа,
	|	ГруппыДоступа.Наименование,
	|	ПодготовленныеЗначенияДляГруппДоступа.ВидПраваДоступа,
	|	ПРЕДСТАВЛЕНИЕ(ПодготовленныеЗначенияДляГруппДоступа.ВидПраваДоступа),
	|	ПрограммныеРоли.Наименование,
	|	ИСТИНА,
	|	2
	|ИЗ
	|	СгруппированныеЗначенияПравДоступа КАК СгруппированныеЗначенияПравДоступа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодготовленныеЗначенияДляГруппДоступа КАК ПодготовленныеЗначенияДляГруппДоступа
	|		ПО СгруппированныеЗначенияПравДоступа.Роль = ПодготовленныеЗначенияДляГруппДоступа.Роль
	|			И СгруппированныеЗначенияПравДоступа.ГруппаДоступа = ПодготовленныеЗначенияДляГруппДоступа.ГруппаДоступа
	|			И СгруппированныеЗначенияПравДоступа.ПорядокПраваДоступа = ПодготовленныеЗначенияДляГруппДоступа.ПорядокПраваДоступа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
	|		ПО СгруппированныеЗначенияПравДоступа.ГруппаДоступа = ГруппыДоступа.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрограммныеРоли КАК ПрограммныеРоли
	|		ПО СгруппированныеЗначенияПравДоступа.Роль = ПрограммныеРоли.Ссылка
	|			И (ПрограммныеРоли.Ссылка В (&СписокПрав))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НастройкиПравОбъектов.Роль,
	|	НастройкиПравОбъектов.Пользователь,
	|	Пользователи.ФИО,
	|	НастройкиПравОбъектов.ВидПраваДоступа,
	|	ПРЕДСТАВЛЕНИЕ(НастройкиПравОбъектов.ВидПраваДоступа),
	|	ПрограммныеРоли.Наименование,
	|	ЛОЖЬ,
	|	3
	|ИЗ
	|	РегистрСведений.НастройкиПравОбъектов КАК НастройкиПравОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО НастройкиПравОбъектов.Пользователь = Пользователи.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрограммныеРоли КАК ПрограммныеРоли
	|		ПО НастройкиПравОбъектов.Роль = ПрограммныеРоли.Ссылка
	|			И (ПрограммныеРоли.Ссылка В (&СписокПрав))
	|ГДЕ
	|	НастройкиПравОбъектов.Объект = &Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПрограммныеРоли.Наименование,
	|	ПриоритетСтроки";
	
	Запрос.УстановитьПараметр("ПолноеИмяФормы", ПолноеИмяФормы);
	Запрос.УстановитьПараметр("Объект", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("СписокПрав", ДоступныйСписокПрав); 
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПроверитьПраваРодительскогоОбъекта(Знач Форма, Знач ИмяФормы, Знач СсылкаНаОбъект, Знач СообщениеПриЗапрете) Экспорт
	
	РазрешеноОткрытие = Ложь;

	// Оставим кнопку по настройке прав только для тех пользователей, кому
	// разрешена безопасность. Получаем все безопасности для формы настройки
	// прав и определяем необходимо, ли ее отобразить пользователю.
	ТаблицаПрав = ПолучитьБезопасностьОбъекта(ИмяФормы, Справочники.ПрограммныеРоли.Открытие, СсылкаНаОбъект);
	ТаблицаПравоВидРазрешения = РассчитатьБезопасностьПоТаблицеПрав(ТаблицаПрав, СсылкаНаОбъект);
	Для Каждого СтрокаТаблицы Из ТаблицаПравоВидРазрешения Цикл		
		ТекущееРазрешение = (СтрокаТаблицы.ВидРазрешенияПредставление = Перечисления.ВидыПравДоступа.Разрешено);
		РазрешеноОткрытие = (РазрешеноОткрытие ИЛИ ТекущееРазрешение);
	КонецЦикла;
	
	Если НЕ РазрешеноОткрытие Тогда
		Форма["СообщениеПользователю"] = СообщениеПриЗапрете;
	КонецЕсли;
	
	Возврат НЕ РазрешеноОткрытие;
	
КонецФункции

// Функция проверяет, есть ли у текущего пользователя доступ к изменению прав текущего
// объекта и возвращает соответствующий результат. Используется для отображения кнопки
// настройки прав.
//	Параметры:
//		- СсылкаНаОбъект - ОпределяемыйТип.ОбъектОграниченийДоступа - ссылка на объект, для настройки
//																ограничений.
//	Возвращаемое значение:
//		- РазрешенаНастройкаПрав - Булево - разрешена ли настройка прав для текущего объекта.
//
Функция ПроверитьДоступностьНастройкиПравОбъектов(Знач СсылкаНаОбъект) Экспорт
	
	РазрешенаНастройкаПрав = Ложь;

	// Оставим кнопку по настройке прав только для тех пользователей, кому
	// разрешена безопасность. Получаем все безопасности для формы настройки
	// прав и определяем необходимо, ли ее отобразить пользователю.
	ПолноеИмяФормы = "ОбщаяФорма.НастройкаПравОбъектов";
	ТаблицаПрав = ПолучитьБезопасностьОбъекта(ПолноеИмяФормы, Справочники.ПрограммныеРоли.Изменение, СсылкаНаОбъект);
	ТаблицаПравоВидРазрешения = РассчитатьБезопасностьПоТаблицеПрав(ТаблицаПрав, СсылкаНаОбъект);
	Для Каждого СтрокаТаблицы Из ТаблицаПравоВидРазрешения Цикл		
		ТекущееРазрешение = (СтрокаТаблицы.ВидРазрешенияПредставление = Перечисления.ВидыПравДоступа.Разрешено);
		РазрешенаНастройкаПрав = (РазрешенаНастройкаПрав ИЛИ ТекущееРазрешение);
	КонецЦикла;
	
	Возврат РазрешенаНастройкаПрав;
	
КонецФункции

#КонецОбласти

#Область РаботаСПодпискамиНаСобытия

#Область ОбработчикиПодписокНаСобытия

Процедура БезопасностьПередЗаписьюРегистра(Источник, Отказ, Замещение) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	
	Если ТипИсточника = Тип("РегистрСведенийНаборЗаписей.ЛичныеДела") Тогда
		ОбработатьЛичныеДелаПередЗаписью(Источник);
	КонецЕсли;
	
КонецПроцедуры

Процедура БезопасностьПриЗаписиРегистра(Источник, Отказ, Замещение) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	
	Если ТипИсточника = Тип("РегистрСведенийНаборЗаписей.ЛичныеДела") Тогда
		ОбработатьЛичныеДелаПослеЗаписи(Источник);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыОбработкиПодписок

Процедура ОбработатьЛичныеДелаПередЗаписью(Источник)
	
	Если Источник.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Событие = Источник.Отбор.Событие.Значение;
	ЭтоСобытиеСменыДолжности = (Событие = Перечисления.СобытияПоЛичнымДелам.ПринятНаДолжность);
	ЭтоСобытиеСменыФилиала = (Событие = Перечисления.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение);
	
	Если ЭтоСобытиеСменыДолжности ИЛИ ЭтоСобытиеСменыФилиала Тогда
		Сотрудник = Источник.Отбор.Сотрудник.Значение;
		
		Если ЭтоСобытиеСменыДолжности Тогда
			СтароеЗначение = РегистрыСведений.ЛичныеДела.ДолжностьПользователя(Сотрудник);
		Иначе
			СтароеЗначение = РегистрыСведений.ЛичныеДела.ФилиалПользователя(Сотрудник);
		КонецЕсли;
		
		НовоеЗначение = Источник.Получить(0).Данные;
		
		ДанныеДляБезопасности = Новый Структура;
		ДанныеДляБезопасности.Вставить("Сотрудник", Сотрудник);
		ДанныеДляБезопасности.Вставить("СтароеЗначение", СтароеЗначение);
		ДанныеДляБезопасности.Вставить("НовоеЗначение", НовоеЗначение);
		
		Источник.ДополнительныеСвойства.Вставить("БезопасностьИзменениеЗначения", ДанныеДляБезопасности);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьЛичныеДелаПослеЗаписи(Источник)
	
	ДанныеБезопасности = Неопределено;
	Если Источник.ДополнительныеСвойства.Свойство("БезопасностьИзменениеЗначения", ДанныеБезопасности) Тогда
		РегистрыСведений.ОчередьСобытийНаОбработку.ОбновитьРолиУчастникаГруппы(ДанныеБезопасности.Сотрудник,
			ДанныеБезопасности.СтароеЗначение, ДанныеБезопасности.НовоеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция получает полный список прав для текущего объекта и пользователя.
//
// Параметры:
//  ПолноеИмяФормы - Строка - полное имя формы.
//  Объект			 - Ссылка - ссылка на объект
// 
// Возвращаемое значение:
//   - ТаблицаПрав - ТаблицаЗначений - таблица со всеми необходимыми параметрами для
//  дальнейшего расчета прав.
//
Функция ПолучитьВсюБезопасностьОбъекта(Знач ПолноеИмяФормы, Знач Объект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИдентификаторыОбъектовМетаданных.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ИдентификаторыМетаданныхОбъекта
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|ГДЕ
	|	ИдентификаторыОбъектовМетаданных.ПолноеИмяФормы = &ПолноеИмяФормы
	|	И НЕ ИдентификаторыОбъектовМетаданных.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвязьОбъектовИРолей.Роль КАК Право,
	|	ВЫБОР
	|		КОГДА НастройкиПравОбъектов.Объект ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ЗначенияРолейДляГруппДоступа.Объект ЕСТЬ NULL
	|						ТОГДА ВЫБОР
	|								КОГДА СвязьОбъектовИРолей.РассчитыватьПраво
	|									ТОГДА НЕОПРЕДЕЛЕНО
	|								ИНАЧЕ СвязьОбъектовИРолей.ЗначениеПоУмолчанию
	|							КОНЕЦ
	|					ИНАЧЕ ЗначенияРолейДляГруппДоступа.ВидПраваДоступа
	|				КОНЕЦ
	|		ИНАЧЕ НастройкиПравОбъектов.ВидПраваДоступа
	|	КОНЕЦ КАК ВидПраваДоступа,
	|	СвязьОбъектовИРолей.ИмяМетода КАК ИмяМетода
	|ИЗ
	|	РегистрСведений.СвязьОбъектовИРолей КАК СвязьОбъектовИРолей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыМетаданныхОбъекта КАК ИдентификаторыМетаданныхОбъекта
	|		ПО СвязьОбъектовИРолей.Объект = ИдентификаторыМетаданныхОбъекта.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрограммныеРоли КАК ПрограммныеРоли
	|		ПО СвязьОбъектовИРолей.Роль = ПрограммныеРоли.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияРолейДляГруппДоступа КАК ЗначенияРолейДляГруппДоступа
	|		ПО (ЗначенияРолейДляГруппДоступа.ГруппаДоступа В (&ГруппыДоступа))
	|			И СвязьОбъектовИРолей.Объект = ЗначенияРолейДляГруппДоступа.Объект
	|			И СвязьОбъектовИРолей.Роль = ЗначенияРолейДляГруппДоступа.Роль
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравОбъектов КАК НастройкиПравОбъектов
	|		ПО (НастройкиПравОбъектов.Объект = &ОбъектСсылка)
	|			И (НастройкиПравОбъектов.Пользователь = &Пользователь)
	|			И СвязьОбъектовИРолей.Роль = НастройкиПравОбъектов.Роль
	|ГДЕ
	|	СвязьОбъектовИРолей.Использование";
	
	Запрос.УстановитьПараметр("ПолноеИмяФормы", ПолноеИмяФормы);
	Запрос.УстановитьПараметр("ГруппыДоступа", БезопасностьПовтИсп.ПолучитьГруппыДоступаПользователя());
	Запрос.УстановитьПараметр("ОбъектСсылка", Объект);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьСоответствиеИмяФормыСсылка()
	
	СоответствиеИмяФормыСсылка = Новый Соответствие;
	СоответствиеИмяФормыСсылка.Вставить("Документ.УслугиСтороннейОрганизации.Форма.МастерИмпортаУслуг", "");
	СоответствиеИмяФормыСсылка.Вставить("Обработка.УправлениеНастройками.Форма.НастройкиФилиала", "");
	СоответствиеИмяФормыСсылка.Вставить("ОбщаяФорма.НастройкаПравОбъектов", "СсылкаНаОбъект");
	СоответствиеИмяФормыСсылка.Вставить("Справочник.ГруппыЗаказчиковНаправлений.Форма.УправлениеГруппами", "");
	СоответствиеИмяФормыСсылка.Вставить("Справочник.НастройкиЭскалацииОшибок.Форма.НастройкаУведомлений", "");
	
	Возврат СоответствиеИмяФормыСсылка;
	                                             
КонецФункции

// Рассчитывает по таблице прав необходимые значения и далее группирует их. В результате
// получается таблица прав вида Право -> ВидРазрешения.
//
// Параметры:
//		- ТаблицаПрав - ТаблицаЗначений - полная таблица прав для объекта (в ней могут дублироваться
//									права).
//
//		- ОбъектСсылка - ОпределяемыйТип.ОбъектОграниченийДоступа - ссылка на конкретный объект
//									ограничений для РС.НастройкиПравОбъектов.
// Возвращаемое значение:
//		- ТаблицаПрав - ТаблицаЗначений - подготовленная таблица с рассчитанными значениями прав.
//
Функция РассчитатьБезопасностьПоТаблицеПрав(Знач ТаблицаПрав, Знач ОбъектСсылка)
	
	// После того как все значения будут рассчитаны, сохраним результат
	// в новую таблицу.
	ТаблицаПравоВидРазрешения = Новый ТаблицаЗначений;
	ТаблицаПравоВидРазрешения.Колонки.Добавить("Право", Новый ОписаниеТипов("СправочникСсылка.ПрограммныеРоли"));
	ТаблицаПравоВидРазрешения.Колонки.Добавить("ИмяМетодаНастройки", ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(150));
	ТаблицаПравоВидРазрешения.Колонки.Добавить("ВидРазрешенияЧисло", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаТаблицы Из ТаблицаПрав Цикл
		НоваяСтрокаТаблицы = ТаблицаПравоВидРазрешения.Добавить();
		НоваяСтрокаТаблицы.Право = СтрокаТаблицы.Право;
		НоваяСтрокаТаблицы.ИмяМетодаНастройки = СтрокаТаблицы.ИмяМетодаНастройки;
		
		Если СтрокаТаблицы.ВидПраваДоступа = Неопределено Тогда
			Выполнить("НоваяСтрокаТаблицы.ВидРазрешенияЧисло = Число(" + СтрокаТаблицы.ИмяМетода + "(ОбъектСсылка));");
		Иначе
			НоваяСтрокаТаблицы.ВидРазрешенияЧисло = ?((СтрокаТаблицы.ВидПраваДоступа = Перечисления.ВидыПравДоступа.Разрешено), 1, 0);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПравоВидРазрешения.Свернуть("Право, ИмяМетодаНастройки", "ВидРазрешенияЧисло");
	ТаблицаПравоВидРазрешения.Колонки.Добавить("ВидРазрешенияПредставление", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПравДоступа"));
	
	Для Каждого СтрокаТаблицыСвернутая Из ТаблицаПравоВидРазрешения Цикл
		СтрокаТаблицыСвернутая.ВидРазрешенияПредставление = ?(СтрокаТаблицыСвернутая.ВидРазрешенияЧисло > 0, Перечисления.ВидыПравДоступа.Разрешено,
			Перечисления.ВидыПравДоступа.Запрещено);
	КонецЦикла;
	
	КолонкаТаблицы = ТаблицаПравоВидРазрешения.Колонки.Найти("ВидРазрешенияЧисло");
	ТаблицаПравоВидРазрешения.Колонки.Удалить(КолонкаТаблицы);
	
	Возврат ТаблицаПравоВидРазрешения;
		
КонецФункции

#КонецОбласти
	
#КонецЕсли
