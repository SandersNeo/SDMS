///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с интерфейсом приложения на стороне клиента.
// - общие процедуры и функции;
// - процедуры и функции интерактивного взаимодействия с пользователем.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Подтверждение выбора отсутствующего сотрудника

Процедура ПодтвердитьВыборОтсутствующегоПользователя(Знач Пользователь, Знач ДанныеОтсутствия, Знач ДопПараметры) Экспорт
	
	ПользовательПредставление = Строка(Пользователь);	
	ДатаНачала = Формат(ДанныеОтсутствия.ДатаНачала, "ДФ=dd.MM.yyyy");	
	
	Если ЗначениеЗаполнено(ДанныеОтсутствия.ДатаОкончания) Тогда
		ДатаОкончания = Формат(ДанныеОтсутствия.ДатаОкончания, "ДФ=dd.MM.yyyy");
		
		ТекстВопроса = СтрШаблон("%1 будет отсутствовать с %2 по %3. Продолжить?", 
			ПользовательПредставление, ДатаНачала, ДатаОкончания);
	Иначе
		ТекстВопроса = СтрШаблон("%1 уволен с %2. Продолжить?", 
			ПользовательПредставление, ДатаНачала);
	КонецЕсли;
					
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодтвержденияВыбораОтсутствующего", ЭтотОбъект, ДопПараметры);	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
КонецПроцедуры

Процедура ПослеПодтвержденияВыбораОтсутствующего(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДопПараметры.Форма;
	Форма.Подключаемый_ПослеПодтвержденияВыбораОтсутствующего(ДопПараметры);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка создания задачи-автотеста

Процедура ЗадатьВопросОСозданииЗадачиАвтотеста(Знач СвойстваЗадачи) Экспорт

	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДополнительныхЗадач", ИнтерфейсПриложенияКлиент, СвойстваЗадачи);	
	
	ОткрытьФорму("Документ.Задача.Форма.СозданиеДополнительныхЗадач", , , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ПослеЗакрытияВопросаДополнительныхЗадач(Результат, СвойстваЗадачи) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Автотесты Тогда
		ПараметрыОткрытия = Новый Структура("ЗначенияЗаполнения", Новый Структура);
		ПараметрыОткрытия.Вставить("ЗадачаДляАвтотеста", Истина);
		ПараметрыОткрытия.Вставить("ИзначальнаяЗадача", СвойстваЗадачи.Ссылка);
		ПараметрыОткрытия.Вставить("Наименование", СвойстваЗадачи.Наименование);
		ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("Направление", СвойстваЗадачи.Направление);
		ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("Заказчик", СвойстваЗадачи.Автор);
		ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("ВидРодительскогоПроекта", СвойстваЗадачи.ВидРодительскогоПроекта);
		ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("Проект", СвойстваЗадачи.Проект);
		ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("Назначение", СвойстваЗадачи.Назначение);
		ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("СерьезностьОшибки", СвойстваЗадачи.СерьезностьОшибки);
		ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("ВидПроцесса", СвойстваЗадачи.ВидПроцесса);
		
		ОткрытьФорму("Документ.Задача.ФормаОбъекта", ПараметрыОткрытия, , Новый УникальныйИдентификатор);
	КонецЕсли; 
	
	Если Результат.TestRail Тогда	
		ИнтерфейсПриложенияВызовСервера.ДобавитьЗаданиеПоЗакрытиюTestRail(СвойстваЗадачи.Ссылка);				
	КонецЕсли;
 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проверка статуса проекта (для создания подчиненных)

Функция ПроверитьСтатусОбъекта(Знач Ссылка) Экспорт
	
	Отказ = Ложь;
	Результат = ОбщегоНазначенияВызовСервера.ПроверитьСтатусПроектаНаСервере(Ссылка, Отказ);

	Если НЕ Результат.РазрешеноСоздавать Тогда
		ПоказатьПредупреждение(, Результат.ТекстСообщения);
	КонецЕсли;
		
	Возврат Результат.РазрешеноСоздавать;
	
КонецФункции

Функция ПолучитьОграниченияПоСтатусамДляПроекта(Знач СоответствиеСтатусов, Знач ПрочитатьИзСтруктуры = Истина) Экспорт

	МассивСтатусов = Новый Массив;
	
	Если ПрочитатьИзСтруктуры Тогда
		МассивСтатусов.Добавить(СоответствиеСтатусов.Получить("Новый").Ссылка);
		МассивСтатусов.Добавить(СоответствиеСтатусов.Получить("Приостановлен").Ссылка);
		МассивСтатусов.Добавить(СоответствиеСтатусов.Получить("Решен").Ссылка);
		МассивСтатусов.Добавить(СоответствиеСтатусов.Получить("Отклонен").Ссылка);
	Иначе
		МассивСтатусов.Добавить(СоответствиеСтатусов.Получить("Приостановлен"));
		МассивСтатусов.Добавить(СоответствиеСтатусов.Получить("Решен"));
		МассивСтатусов.Добавить(СоответствиеСтатусов.Получить("Отклонен"));	
	КонецЕсли;
	
	Возврат МассивСтатусов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с окнами клиенского приложения

// Выполняет поиск окна приложения по его имени.
//
// Параметры:
//  Формы - ФиксированныйМассив - массив управляемых форм.
//  Имя   - Строка - имя искомой формы.
//
// Возвращаемое значение:
//  Если найдена, возвращается управляемая форма. В противном случае возвращается
//  Неопределено.
//
Функция НайтиФормуПоИмени(Знач Формы, Знач Имя) Экспорт
	
	НайденнаяФорма = Неопределено;
	
	Для Каждого УправляемаяФорма Из Формы Цикл	
		Если УправляемаяФорма.ИмяФормы = Имя Тогда
			НайденнаяФорма = УправляемаяФорма;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденнаяФорма;
	
КонецФункции

// Открыта ли форма
//
// Параметры:
//  Имя	 - 	Строка - Имя формы
// 
// Возвращаемое значение:
//  Булево - открыта ли форма
//
Функция ФормаОткрыта(Знач Имя) Экспорт
	
	Окна = ПолучитьОкна();
	Результат = Ложь;
	
	Для Каждого Окно Из Окна Цикл   
		Если Окно.Содержимое.Количество() > 0 И Окно.Содержимое[0].ИмяФормы = Имя Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Открытие окон приложения

// Открывает окно с информацией о пользователе: ФИО, должность, email.
//
// Параметры:
//  Владелец             - УправляемаяФорма - форма-владелец открываемого окна.
//  Пользователь         - СправочникСсылка.Пользователи - ссылка на пользователя.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки.
//
Процедура ОткрытьИнформациюОПользователе(Знач Владелец, Знач Пользователь, СтандартнаяОбработка) Экспорт
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОткрытия = Новый Структура("Пользователь", Пользователь);
		
		ОткрытьФорму("ОбщаяФорма.ИнформацияОПользователе", ПараметрыОткрытия, Владелец, , , , , 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	КонецЕсли;
	
КонецПроцедуры

// Открывает отдельное окно, в котором находится URL-ссылка на объект информационной
// базы.
// 
// Параметры:
//  Ссылка           - ЛюбаяСсылка - ссылка на объект, которую нужно отобразить.
//  Владелец         - Форма, ЭлементУправления - форма или элемент управления 
//                     другой формы.
//  КлючУникальности - Произвольный - некоторый ключ, значение которого будет 
//                     использоваться для поиска уже открытых форм. Если будет 
//                     найдена форма с таким же ключом уникальности, вместо открытия 
//                     новой формы будет активизирована найденная форма.
//
Процедура ОткрытьОкноНавигационнойСсылки(Знач Ссылка, Знач Владелец, Знач КлючУникальности) Экспорт
	
	ОткрытьФорму("ОбщаяФорма.НавигационнаяСсылка", 	Новый Структура("Объект", Ссылка),
		Владелец, КлючУникальности, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

// Открывает окно с описанием назначения объектов информационной базы.
//
// Параметры:
//  Форма - Форма, ЭлементУправления - форма или элемент управления 
//          другой формы.
//
Процедура ОткрытьОписаниеНазначенияОбъектов(Знач Форма) Экспорт
	
	ПараметрыОткрытия = Новый Структура("КлючОбъекта", Форма.Параметры.Ключ);
	
	ОткрытьФорму("ОбщаяФорма.ОписаниеНазначенияОбъектов", ПараметрыОткрытия, Форма,
		Форма.УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму объекта в новом окне.
//
// Параметры:
//	Основание - ссылка на объект, форму которого открываем.
//  Форма - УправляемаяФорма - форма родитель.
//
Процедура ОткрытьОбъектОснованиеВНовомОкне(Знач Основание) Экспорт
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Основание);
	
	ТипЗначения = ТипЗнч(Основание);
	
	Если ЗначениеЗаполнено(Основание) Тогда
		Если ТипЗначения = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
			ОткрытьФорму("Документ.ЗаявкаНаРазработку.ФормаОбъекта", ПараметрыФормы);				
		ИначеЕсли ТипЗначения = Тип("ДокументСсылка.Задача") Тогда
			ОткрытьФорму("Документ.Задача.ФормаОбъекта", ПараметрыФормы);
		ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ВнутреннееЗадание") Тогда
			ОткрытьФорму("Документ.ВнутреннееЗадание.ФормаОбъекта", ПараметрыФормы);
		Иначе
			ОткрытьФорму("Справочник.Проекты.ФормаОбъекта", ПараметрыФормы);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму группы заказчиков направлений - форму выбора
//
// Параметры:
//	Объект - ссылка - ссылка на объект, для процедуры ГруппаЗаказчиковОбработкаВыбора.
//  ГруппыЗаказчиков - массив - группы заказчиков по направлению и системам 
//  ЭлементВладелец  - ЭлементФормы - элемент управления, для которого будет вызвано событий обработка выбора
//
Процедура ОткрытьФормуВыбораГруппыЗаказчиков(Знач Объект, Знач ГруппыЗаказчиков, Знач ЭлементВладелец = Неопределено) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ГруппыЗаказчиков", ГруппыЗаказчиков);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ГруппаЗаказчиковОбработкаВыбора", Объект);
	
	ОткрытьФорму("Справочник.ГруппыЗаказчиковНаправлений.ФормаВыбора", ПараметрыОткрытия, ЭлементВладелец, , , , ОписаниеОповещения);
	
КонецПроцедуры

// Выполняет поиск у формы-владельца открытой формы наблюдателей. Если такая есть,
// открывает ее. В противном случае открывается новая форма.
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - ссылка на объект информационной базы.
//  ПараметрыВыполнения - УправляемаяФорма, ПараметрыВыполненияКоманды - набор
//                        дополнительных  параметров.
//
Процедура ОткрытьФормуСпискаЗаинтересованныхЛиц(Знач Ссылка, Знач ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(ПараметрыВыполнения) = Тип("ПараметрыВыполненияКоманды") Тогда
		ФормаВладелец       = ПараметрыВыполнения.Источник;
		ОкноФормыВладельца  = ПараметрыВыполнения.Окно;
		НавигационнаяСсылка = ПараметрыВыполнения.НавигационнаяСсылка;
		Уникальность        = ПараметрыВыполнения.Уникальность;
	Иначе
		ФормаВладелец       = ПараметрыВыполнения;
		ОкноФормыВладельца  = ПараметрыВыполнения.Окно;
		НавигационнаяСсылка = "e1cib/command/РегистрСведений.ЗаинтересованныеЛица.Команда.СписокЗаинтересованныхЛиц";
		Уникальность        = Ложь;
	КонецЕсли;
	
	ИмяФормы = "РегистрСведений.ЗаинтересованныеЛица.Форма.СписокЗаинтересованныхЛиц";
	
	// Временное условие для решения ошибки cannot read property of undefined при перезаписи формы наблюдателей
	Если ФормаВладелец.ИскатьФормуЗаинтересованныхЛиц = Истина Тогда 
		НайденноеОкно = НайтиФормуПоИмени(ОкноФормыВладельца.Содержимое, ИмяФормы);	
	Иначе
		НайденноеОкно = Неопределено;
		ФормаВладелец.ИскатьФормуЗаинтересованныхЛиц = Истина;
	КонецЕсли;		
	
	Если НайденноеОкно <> Неопределено Тогда
		ОткрытьФорму(НайденноеОкно, ОкноФормыВладельца);
	Иначе
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Объект", Ссылка);
		
		ОткрытьФорму(ИмяФормы, ПараметрыОткрытия, ФормаВладелец, Уникальность,
			ОкноФормыВладельца, НавигационнаяСсылка);
	КонецЕсли;
	
	ИмяФормы = ФормаВладелец.ИмяФормы;
	Функциональность = "Открытие вкладки ""Заинтересованные лица""";
	ОбщегоНазначенияВызовСервера.ОтслеживаниеИспользованияФункциональностиНаСервере(Функциональность, ИмяФормы);
	
КонецПроцедуры

// Формирует параметры открытия для дальнейшего формирования страниц формы настроек
//
// Параметры:
//  ПрочиеНастройки	 - Структура - Настройки для отображения на странице прочее
// 
// Возвращаемое значение:
//  - структура - содержит страницы формы настроек, значения выбранных элементов 
//	для каждой страницы и необходимость отображения данной страницы 
//
Функция СформироватьПараметрыОткрытия(ПрочиеНастройки = Неопределено) Экспорт
	
	ПараметрыОткрытия = Новый Структура;	

	ПараметрыОткрытия.Вставить("Направления", Новый Структура("Значение, Использование", , Ложь));
	ПараметрыОткрытия.Вставить("Системы", Новый Структура("Значение, Использование", , Ложь));
	ПараметрыОткрытия.Вставить("ГруппыЗаказчиков", Новый Структура("Значение, Использование", , Ложь));
	ПараметрыОткрытия.Вставить("Продукты", Новый Структура("Значение, Использование", , Ложь));
	ПараметрыОткрытия.Вставить("Статусы", Новый Структура("Значение, Использование", , Ложь));
	ПараметрыОткрытия.Вставить("Филиалы", Новый Структура("Значение, Использование", , Ложь));
	ПараметрыОткрытия.Вставить("ПрочиеОтборы", Новый Структура("Значение, Использование", , Ложь));
	ПараметрыОткрытия.Вставить("НастройкиПрочиеОтборы", "");
	
	Если ПрочиеНастройки <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("ПрочиеНастройки", ПрочиеНастройки);
	КонецЕсли;

	Возврат ПараметрыОткрытия;

КонецФункции

Процедура ОткрытьФормуНастройкиИнструментов(Форма, ПараметрыОткрытия, 
	ОписаниеОповещения = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ОписаниеОповещения = Неопределено Тогда
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияОкнаНастройкиИнструментов", ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
		
	ОткрытьФорму("ОбщаяФорма.НастройкиИнструментов", ПараметрыОткрытия, 
		Форма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры
	
Процедура ОткрытьФормуПрочиеНастройкиИнструментов(Форма, ПараметрыОткрытия, ОписаниеОповещения) Экспорт
			
	ОткрытьФорму("ОбщаяФорма.ПрочиеНастройкиИнструментов", ПараметрыОткрытия, 
		Форма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры
	
Процедура ПослеЗакрытияОкнаНастройкиИнструментов(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Форма[ДополнительныеПараметры.ИмяРеквизита] = Результат[ДополнительныеПараметры.КлючСтруктуры];

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Динамические списки

// Выполняет открытие формы объекта-основания для списка задач при выборе значения
// в поле "ОбъектОснование".
//
// Параметры:
//  Данные               - ДанныеФормыКоллекция - строка динамического списка.
//  ИмяПоля              - Строка - имя поля динамического списка.
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
//
Процедура ОткрытьОбъектОснованиеИзСписка(Знач Данные, Знач ИмяПоля, СтандартнаяОбработка) Экспорт
	
	Если Данные <> Неопределено И Данные.Свойство("ОбъектОснование") Тогда
		Если СтрНайти(ИмяПоля, "ОбъектОснование", НаправлениеПоиска.СКонца) > 0 
			И ЗначениеЗаполнено(Данные.ОбъектОснование) Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ПараметрыОткрытия = Новый Структура("Ключ", Данные.ОбъектОснование);
			ОткрытьФорму("Документ.ЗаявкаНаРазработку.ФормаОбъекта", ПараметрыОткрытия);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Метрики

Процедура НачатьВыборПериода(Форма) Экспорт
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = Новый СтандартныйПериод(Форма.ДатаНачала, Форма.ДатаОкончания);
	
	ДополнительныеПараметры = Новый Структура("Форма", Форма);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборПериода", ЭтотОбъект, ДополнительныеПараметры);
	
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПриИзмененииПериода(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.ДатаОкончания) Тогда
		Если Форма.ДатаНачала > Форма.ДатаОкончания Тогда
			Дата = Форма.ДатаОкончания;
			Форма.ДатаОкончания = Форма.ДатаНачала;
			Форма.ДатаНачала = Дата;
		КонецЕсли;
		
		Форма.ДатаОкончания = КонецМесяца(Форма.ДатаОкончания);
	КонецЕсли;
	
	Форма.ДатаНачала = НачалоМесяца(Форма.ДатаНачала);
	
КонецПроцедуры

Процедура ОбработатьВыборПериода(Период, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;	
	
	Если Период <> Неопределено Тогда
		Форма.ДатаНачала = НачалоМесяца(Период.ДатаНачала);
		
		Если ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
			Форма.ДатаОкончания = КонецМесяца(Период.ДатаОкончания);
		Иначе
			Форма.ДатаОкончания = Период.ДатаОкончания;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Строка поиска вспомогательных окон подбора значений

// Сбрасывает поиск, очищает отбор строк у таблицы поиска, устанавливает фокус
// на строке поиска.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой необходимо изменить состояние поиска.
//  ТаблицаПоиска - Строка - имя элемента таблицы формы, в которой очищается отбор.
//
Процедура СброситьПоиск(Форма, ТаблицаПоиска) Экспорт
	
	// Очистка отбора, очистка строки поиска и установка фокуса на строку поиска
	Форма.Элементы[ТаблицаПоиска].ОтборСтрок = Неопределено;
	
	// Сброс значения реквизита СтрокаПоиска
	Форма.СтрокаПоиска = "";
	
	// Установка элемента поиска в качестве активного элемента
	Форма.ТекущийЭлемент = Форма.Элементы.СтрокаПоиска;	
	
КонецПроцедуры

// Устанавливает или сбрасывает отбор в таблице формы в зависимости от значения
// строки поиска.
//
// Параметры:
//  Форма         - УправляемаяФорма - форма, в которой выполняется обработка поиска.
//  ТаблицаПоиска - Строка - имя элемента таблицы формы, для которой изменяется отбор.
//  Текст         - Строка - текст поиска.
//  ПолеПоиска    - Строка - имя поля таблицы формы, в котором необходимо выполнить поиска.
//
Процедура УстановитьОтборПриИзмененииСтрокиПоиска(Форма, ТаблицаПоиска, Текст, ПолеПоиска) Экспорт
	
	Если НЕ ПустаяСтрока(Текст) Тогда
		Форма.Элементы[ТаблицаПоиска].ОтборСтрок = Новый ФиксированнаяСтруктура(ПолеПоиска, Текст);
	Иначе
		Форма.Элементы[ТаблицаПоиска].ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
