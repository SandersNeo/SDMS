///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ВнешнееСоединение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда

#Область ОбработчикиСобытийФормы
// Обработчики событий форм основных объектов, использовать для многостраничных форм.
// Размещать соответственно наименованиям методов.

// При чтении на сервере
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - форма на которой размещен редактор описания.
//  ТекущийОбъект			 - ДокументОбъект, СправочникОбъект - текущие данные объекта.
//  ЗапрещеноРедактировать	 - Булево - признак блокировки изменения описания.
//
Процедура ПриЧтенииНаСервере(Форма, Знач ТекущийОбъект, Знач ЗапрещеноРедактировать = Ложь) Экспорт
	
	Если Форма.Элементы.Найти(РедакторОписанияКлиентСервер.ИмяРеквизита()) <> Неопределено Тогда
		Если ТипЗнч(ТекущийОбъект.Описание) = Тип("ХранилищеЗначения") Тогда
			ОписаниеОбъекта = ТекущийОбъект.Описание.Получить();
		Иначе
			ОписаниеОбъекта = ТекущийОбъект.Описание;
		КонецЕсли;
		
		ЗаполнитьТекстHTML(Форма, ОписаниеОбъекта, ЗапрещеноРедактировать);
		Форма[РедакторОписанияКлиентСервер.ИмяРеквизитаИзмененоОписание()] = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// При создании на сервере
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - форма на которой будет размещен редактор описания.
//  ГруппаВладелец			 - ГруппаФормы - группа в которой будет размещены элементы нового редактора.
//  ЗапрещеноРедактировать	 - Булево - признак блокировки изменения описания.
//  ПараметрыАвтосохранения	 - Структура - параметры заполненные при восстановлении описания из автосохранения.
//
Процедура ПриСозданииНаСервере(Форма, ГруппаВладелец, Знач ЗапрещеноРедактировать = Ложь,
	Знач ПараметрыАвтосохранения = Неопределено) Экспорт
	
	ИмяСвойстваОписание = "Описание";
	Создать(Форма, ГруппаВладелец);
	
	Если ПараметрыАвтосохранения <> Неопределено Тогда
		ОписаниеОбъекта = ПараметрыАвтосохранения.ТекстОписания;
		
	ИначеЕсли Форма.Параметры.Свойство(ИмяСвойстваОписание) Тогда
		ОписаниеОбъекта = Форма.Параметры[ИмяСвойстваОписание];
		
	ИначеЕсли НЕ Форма.Параметры.Ключ.Пустая() Тогда
		Если НЕ Форма.Объект.Свойство(ИмяСвойстваОписание) Тогда
			ОписаниеОбъекта = Форма.РеквизитФормыВЗначение("Объект")[ИмяСвойстваОписание];
		Иначе
			ОписаниеОбъекта = Форма.Объект[ИмяСвойстваОписание];
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Форма.Параметры.Основание) Тогда
		ОписаниеОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Параметры.Основание, ИмяСвойстваОписание);
		
	ИначеЕсли ЗначениеЗаполнено(Форма.Параметры.ЗначениеКопирования) Тогда
		ОписаниеОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Параметры.ЗначениеКопирования, ИмяСвойстваОписание);
		
	Иначе
		ОписаниеОбъекта = "";
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеОбъекта) = Тип("ХранилищеЗначения") Тогда
		ОписаниеОбъекта = ОписаниеОбъекта.Получить();
	КонецЕсли;
	
	ЗаполнитьТекстHTML(Форма, ОписаниеОбъекта, ЗапрещеноРедактировать);
			
КонецПроцедуры

// Перед записью на сервере
//
// Параметры:
//  Форма				- ФормаКлиентскогоПриложения - форма на которой размещен редактор описания.
//  ТекущийОбъект		- ДокументОбъект, СправочникОбъект - текущие данные объекта.
//  ПараметрыЗаписи		- Структура - параметры записи объекта.
//  СсылкаНаОбъект		- ДокументСсылка, СправочникСсылка - ссылка объекта.
//  ИмяРеквизита		- Строка - если это не основное описание, то передается для разделения реквизитов
//
Процедура ПередЗаписьюНаСервере(Форма, ТекущийОбъект, Знач ПараметрыЗаписи, Знач СсылкаНаОбъект, ИмяРеквизита = "") Экспорт
	
	ОписаниеОбъекта = Форма[РедакторОписанияКлиентСервер.ИмяРеквизитаАктуальноеОписание(ИмяРеквизита)];
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		ПараметрыЗаписи[РедакторОписанияКлиентСервер.ИмяРеквизитаИзмененоОписание(ИмяРеквизита)] = Истина;
	КонецЕсли;
	
	ОписаниеИзменилось = ПараметрыЗаписи[РедакторОписанияКлиентСервер.ИмяРеквизитаИзмененоОписание(ИмяРеквизита)];
	
	Если ОписаниеИзменилось Тогда
		РезультатОбработки = ОбработатьОписание(СсылкаНаОбъект, ОписаниеОбъекта, ИмяРеквизита);
		ОписаниеОбъекта = РезультатОбработки.Описание;
		
		Если ТипЗнч(ТекущийОбъект.Описание) = Тип("ХранилищеЗначения") Тогда
			ТекущийОбъект.Описание = Новый ХранилищеЗначения(ОписаниеОбъекта, Новый СжатиеДанных(9));
		Иначе
			ТекущийОбъект.Описание = ОписаниеОбъекта;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОписаниеИзменилось", ОписаниеИзменилось);
	
КонецПроцедуры

// После записи на сервере
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - форма на которой размещен редактор описания.
//  ТекущийОбъект			 - ДокументОбъект, СправочникОбъект - текущие данные объекта.
//  ПараметрыЗаписи			 - Структура - параметры записи объекта.
//  ЗапрещеноРедактировать	 - Булево - признак блокировки изменения описания.
//  ИмяРеквизита		- Строка - если это не основное описание, то передается для разделения реквизитов
//
Процедура ПослеЗаписиНаСервере(Форма, Знач ТекущийОбъект, Знач ПараметрыЗаписи, Знач ЗапрещеноРедактировать = Ложь, ИмяРеквизита = "") Экспорт
	
	ИмяРеквизитаИзмененоОписание = РедакторОписанияКлиентСервер.ИмяРеквизитаИзмененоОписание(ИмяРеквизита);
	ИзмененоОписание = ПараметрыЗаписи[ИмяРеквизитаИзмененоОписание];
			
	Если ИзмененоОписание Тогда
		Если ТипЗнч(ТекущийОбъект.Описание) = Тип("ХранилищеЗначения") Тогда
			Описание = ТекущийОбъект.Описание.Получить();
		Иначе
			Описание = ТекущийОбъект.Описание;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ИмяРеквизита) Тогда
			ЗаполнитьТекстHTML(Форма, Описание, ЗапрещеноРедактировать);
		КонецЕсли;
			
		Форма[РедакторОписанияКлиентСервер.ИмяРеквизитаАктуальноеОписание(ИмяРеквизита)] = Описание;
		Форма[ИмяРеквизитаИзмененоОписание] = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Дополнительно обрабатывает описание
//
// Параметры:
//  ТекущийОбъект			 - ДокументОбъект, СправочникОбъект - текущие данные объекта.
//
Процедура ДополнительноОбработатьОписание(Знач ТекущийОбъект) Экспорт 
	
	Если ТипЗнч(ТекущийОбъект.Описание) = Тип("ХранилищеЗначения") Тогда
		Описание = ТекущийОбъект.Описание.Получить();
	Иначе
		Описание = ТекущийОбъект.Описание;
	КонецЕсли;
	 
	// В данной процедуре выделются картинки из описания и сохраняются в прикрепленных файлах
	// Обычно это происходит при интерактивной записи, но если задача/заявка записывается програмно, 
	// то были случаи, что картинки не сохранялись регистре, а потом удалялись физически с attachments.
	// Разделить когда идет интерактивная, а когда програмная - нельзя, поэтому имеет смысл обработать еще раз. 
	ОбработатьОписание(ТекущийОбъект.Ссылка, Описание);  
	
КонецПроцедуры

Процедура ЗаменитьСсылкиХранилищаНаВнутренние(Текст, ТаблицаОписанияФайлов) Экспорт
	
	Для Каждого СтрокаТаблицы Из ТаблицаОписанияФайлов Цикл
		ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьСлэш(ОбщегоНазначенияКлиентСервер.ДобавитьСлэш(
			WebОкружениеВызовСервера.АдресПубликацииФайлов()) + СтрокаТаблицы.Каталог) + СтрокаТаблицы.Имя;
		Текст = СтрЗаменить(Текст, СтрокаТаблицы.АдресВоВременномХранилище, ПутьКФайлу);
	КонецЦикла;
		
КонецПроцедуры

// Инициализирует поле HTML документа. Заполняет описание. При необходимости конвертирует в нужный формат.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - форма на которой размещен редактор описания.
//  Описание				 - Строка - описание объекта.
//  ЗапрещеноРедактировать	 - Булево - признак блокировки изменения описания.
//  ИмяРеквизита			 - Строка - дополнительный параметр для использования нескольких редакторов на одной форме.
//  Подсказка				 - Строка - подсказка в поле ввода описания.
//
Процедура ЗаполнитьТекстHTML(Форма, Знач Описание, Знач ЗапрещеноРедактировать = Ложь,
	Знач ИмяРеквизита = "", Знач Подсказка = "") Экспорт
	
	ИсточникОписания = Неопределено;
	ОписаниеЗафиксировано = Ложь;
	СозданиеОбъекта = Истина;
	
	Если Форма.Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Форма.Параметры.Ключ) Тогда
		МетаданныеСсылки = Форма.Параметры.Ключ.Метаданные();
		
		Если НЕ Метаданные.РегистрыСведений.Содержит(МетаданныеСсылки) Тогда
			ИсточникОписания = Форма.Объект.Ссылка;
			СозданиеОбъекта = Ложь;
		КонецЕсли;
		
	ИначеЕсли Форма.Параметры.Свойство("Основание") И ЗначениеЗаполнено(Форма.Параметры.Основание) Тогда
		ИсточникОписания = Форма.Параметры.Основание;
	ИначеЕсли Форма.Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Форма.Параметры.ЗначениеКопирования) Тогда
		ИсточникОписания = Форма.Параметры.ЗначениеКопирования;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсточникОписания) Тогда
		ОписаниеЗафиксировано = РегистрыСведений.ЗначенияДополнительныхРеквизитовОбъектов.ЗначениеДополнительногоРеквизита(
		ИсточникОписания, ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.MarkdownОписаниеЗафиксировано);
		
	ИначеЕсли Форма.Параметры.Свойство("Ключ") И ТипЗнч(Форма.Параметры.Ключ) = Тип("ДокументСсылка.ЗаявкаНаРазработку")
		И НЕ ЗначениеЗаполнено(Описание) Тогда
		
		ШаблоныМакет = Документы.ЗаявкаНаРазработку.ПолучитьМакет("Шаблоны").ПолучитьТекст();
		Описание = ОбщегоНазначения.ПолучитьСодержимоеОбластиШаблона(ШаблоныМакет, "ЗаявкаОписаниеHTML");
	КонецЕсли;
	
	Если СозданиеОбъекта И ОписаниеЗафиксировано Тогда
		РезультатКонвертации = КонвертацияОписания.КонвертироватьТекст(Описание);
		
		Если РезультатКонвертации.Успешно Тогда
			Описание = РезультатКонвертации.ОписаниеОбъекта;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось конвертировать описание");
		КонецЕсли;
	КонецЕсли;
	
	Реквизит = РедакторОписанияКлиентСервер.ИмяРеквизита(ИмяРеквизита);
	
	Форма[РедакторОписанияКлиентСервер.ИмяРеквизитаАктуальноеОписание(ИмяРеквизита)] = Описание;
	
	Если НЕ СозданиеОбъекта И ОписаниеЗафиксировано Тогда
		Форма[Реквизит] = ПолучитьЗафиксированноеОписание(Описание);
		
		Если Форма.Элементы.Найти("РедакторОписания_ДобавитьВЧекЛист") <> Неопределено Тогда
			Форма.Элементы.РедакторОписания_ДобавитьВЧекЛист.Видимость = Ложь;
		КонецЕсли;
		
		// если описание зафиксировано, то не нужно включать его в подсчет статистики открытий
		Форма[РедакторОписанияКлиентСервер.ИмяРеквизитаОткрытиеОписания(ИмяРеквизита)] = Истина;
	Иначе
		Форма[Реквизит] = РедакторОписанияВызовСервера.ПолучитьРедактор(Описание, Подсказка, ЗапрещеноРедактировать);
	КонецЕсли;
		
КонецПроцедуры

// Ищет base64 изображения в описании, сохраняет на сервер, сверяет изображения объекта в регистре с фактическими.
//
// Параметры:
//  ВладелецФайлов	 - ДокументСсылка, СправочникСсылка - ссылка на объект владеющий файлами.
//  Описание		 - Строка - описание объекта в HTML формате.
// 
// Возвращаемое значение:
//  Структура:
//		Описание	 - Строка - описание объекта в HTML формате с измененным расположением изображений
//		Изображения  - Таблица значений со свойствами изображений ИЛИ Неопределено.
//
Функция ОбработатьОписание(Знач ВладелецФайлов, Знач Описание, Знач ИмяРеквизита = "") Экспорт
	
	Результат = Новый Структура("Описание, Изображения", "", Неопределено);
	
	ОписаниеТипаСтрока = ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(100);
	ОписаниеИсходное = Описание;
	
	СохранятьВБазе = (ВладелецФайлов <> Неопределено);
	
	Если НЕ ЗначениеЗаполнено(ИмяРеквизита) Тогда
		НазначениеФайла = Перечисления.НазначенияФайлов.ИзображениеОписанияДокумента;
	ИначеЕсли ИмяРеквизита = "Комментарии" Тогда 
		НазначениеФайла = Перечисления.НазначенияФайлов.ИзображениеКомментария;
	ИначеЕсли ИмяРеквизита = "ПримечаниеТестировщиков" Тогда 
		НазначениеФайла = Перечисления.НазначенияФайлов.ИзображениеПримечанияТестировщика;
	Иначе
		НазначениеФайла = Перечисления.НазначенияФайлов.ИзображениеПримечанияРазработчика;
	КонецЕсли;
	
	ИзображенияОписания = Новый ТаблицаЗначений;
	ИзображенияОписания.Колонки.Добавить("Наименование", ОписаниеТипаСтрока);
	ИзображенияОписания.Колонки.Добавить("Каталог", ОписаниеТипаСтрока);
	ИзображенияОписания.Колонки.Добавить("АдресВХранилище", Новый ОписаниеТипов("Строка"));

	КаталогПубликацииФайлов = Константы.КаталогПубликацииФайлов.Получить();

	Если ЗначениеЗаполнено(Описание) Тогда
		Если СохранятьВБазе Тогда
			Если ТипЗнч(ВладелецФайлов) <> Тип("Строка") Тогда
				КаталогВладельца = Строка(ВладелецФайлов.УникальныйИдентификатор());
			Иначе
				КаталогВладельца = ВладелецФайлов;
			КонецЕсли;
			
			СохранятьНаСервер = ИнтеграцияДополнительныхПодсистем.ОпределитьМестоХраненияФайлов();
			КорневойURL = ОбщегоНазначенияКлиентСервер.ДобавитьСлэш(WebОкружениеВызовСервера.АдресПубликацииФайлов());	
			ВнешнееХранилище = "";
			
			НастройкиПодключения = ИнтеграцияДополнительныхПодсистемПовтИсп.ПолучитьНастройкиПодключенияКMinio();
			Если НастройкиПодключения <> Неопределено Тогда
				ВнешнееХранилище = СтрШаблон("https://%1:%2/", НастройкиПодключения.Сервер, НастройкиПодключения.Порт);
			КонецЕсли;
			
			Если СохранятьНаСервер Тогда
				КаталогФайловНаСервере = ПовторноеИспользованиеВызовСервера.КаталогХраненияФайловНаСервере();
				КаталогСРазделителем = РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(КаталогФайловНаСервере);
				Каталог = КаталогСРазделителем + РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(КаталогВладельца);
				
				СоздатьКаталог(Каталог);
				АдресСохраненияФайла = КорневойURL + КаталогВладельца;
			Иначе
				Каталог = "";
				АдресСохраненияФайла = ВнешнееХранилище + КаталогПубликацииФайлов;
			КонецЕсли;	
			
			ОписаниеФайла = "Изображение описания документа";
		КонецЕсли;
			
		ЧтениеHTML = Новый ЧтениеHTML;
		ЧтениеHTML.УстановитьСтроку(Описание);
		
		ПостроительDOM = Новый ПостроительDOM;
		ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
		Изображения = ДокументHTML.ПолучитьЭлементыПоИмени("img");
		
		НачалоИзображения = "data:image/";
		ПозицияРасширения = 12;

		Для Каждого Изображение Из Изображения Цикл
			Если НазначениеФайла = Перечисления.НазначенияФайлов.ИзображениеКомментария Тогда
				Изображение.Источник = СтрЗаменить(Изображение.Источник, "\""", "");
			КонецЕсли;
			
			Если СтрНачинаетсяС(Изображение.Источник, НачалоИзображения) Тогда
				ПозицияBase64 = СтрНайти(Изображение.Источник, ",") + 1;
				ПозицияОкончанияРасширенияФайла = СтрНайти(Изображение.Источник, ";", , ПозицияРасширения);
				Расширение = Сред(Изображение.Источник, ПозицияРасширения, ПозицияОкончанияРасширенияФайла - ПозицияРасширения);
				
				Base64Строка = Сред(Изображение.Источник, ПозицияBase64);
				ДвоичныеДанные = Base64Значение(Base64Строка);
				
				СсылкаНовогоФайла = Справочники.Файлы.ПолучитьСсылку();
				УникальноеИмяФайлаБезРасширения = РаботаСФайламиКлиентСервер.СоздатьУникальноеИмяФайла("", СсылкаНовогоФайла);
				УникальноеИмяФайла = СтрШаблон("%1.%2", УникальноеИмяФайлаБезРасширения, Расширение);
				
				Если СохранятьВБазе Тогда   
					ИмяСобытия = "Редактор описания.Сохранение изображения";
					
					СвойстваФайла = Справочники.Файлы.СвойстваФайла();
					СвойстваФайла.ИмяФайла = УникальноеИмяФайла;
					СвойстваФайла.ОригинальноеИмя = УникальноеИмяФайла;
					СвойстваФайла.Каталог = КаталогВладельца;
					СвойстваФайла.Расширение = Расширение;
					СвойстваФайла.Описание = ОписаниеФайла;
					СвойстваФайла.Ссылка = СсылкаНовогоФайла;
					СвойстваФайла.НовыйФайл = Истина;
					
					ФайлСсылка = РаботаСФайламиСервер.ОбработатьФайлНаСервере(СвойстваФайла, ДвоичныеДанные, 
						НазначениеФайла, Каталог, ВладелецФайлов, ИмяСобытия, СохранятьНаСервер); 
				
					Если ФайлСсылка = Неопределено Тогда
						Продолжить;
					КонецЕсли;    
					
					НоваяСтрока = ИзображенияОписания.Добавить();
					НоваяСтрока.Наименование = УникальноеИмяФайла;
					НоваяСтрока.Каталог = КаталогВладельца;
					
					ПутьКФайлу = СтрШаблон("%1/%2", АдресСохраненияФайла, УникальноеИмяФайла);
					Изображение.Источник = ПутьКФайлу;
				Иначе
					НоваяСтрока = ИзображенияОписания.Добавить();
					НоваяСтрока.Наименование = УникальноеИмяФайла;
					НоваяСтрока.АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
					
					Изображение.Источник = УникальноеИмяФайла;
				КонецЕсли;
				
			ИначеЕсли СтрНачинаетсяС(Изображение.Источник, КорневойURL) 
				ИЛИ (ЗначениеЗаполнено(ВнешнееХранилище) И СтрНачинаетсяС(Изображение.Источник, ВнешнееХранилище)) Тогда

				ЧастиПути = СтрРазделить(Изображение.Источник, "/");
				КоличествоЧастей = ЧастиПути.ВГраница();
				
				НоваяСтрока = ИзображенияОписания.Добавить();
				НоваяСтрока.Наименование = ЧастиПути[КоличествоЧастей];
				КаталогИзображения = ЧастиПути[КоличествоЧастей - 1];
				
				Если КаталогИзображения = КаталогПубликацииФайлов Тогда
					КаталогИзображения = КаталогВладельца;
				КонецЕсли;
				
				НоваяСтрока.Каталог = КаталогИзображения;
				
			Иначе
				ТипКлиента = КлиентскоеПриложение.ТипПриложения();
				ТекстОшибки = СтрШаблон(
					"Ссылка: %1
					|Тип клиента: %2", Изображение.Источник, ТипКлиента);
				ЗаписьЖурналаРегистрации("Редактор описания.Корневой URL изображения отличается",
					УровеньЖурналаРегистрации.Предупреждение, , , ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьHTML = Новый ЗаписьHTML;
		ЗаписьHTML.УстановитьСтроку();
		
		ЗаписьDOM = Новый ЗаписьDOM;
		ЗаписьDOM.Записать(ДокументHTML.Тело, ЗаписьHTML);
		
		Описание = ЗаписьHTML.Закрыть();
		
		// Убираем теги body
		ДлинаОписания = СтрДлина(Описание);
		Описание = Сред(Описание, 7, ДлинаОписания - 13); // BSLLS:MagicNumber-off
	КонецЕсли;
		
	Если СохранятьВБазе Тогда	
		НаборЗаписей = РегистрыСведений.ПрикрепленныеФайлы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ВладелецФайлов);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИзображенияОписания.Наименование КАК Наименование,
		|	ИзображенияОписания.Каталог КАК Каталог
		|ПОМЕСТИТЬ ИзображенияОписания
		|ИЗ
		|	&ИзображенияОписания КАК ИзображенияОписания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Файлы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Файлы
		|ИЗ
		|	ИзображенияОписания КАК ИзображенияОписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО ИзображенияОписания.Наименование = Файлы.Наименование
		|		И ИзображенияОписания.Каталог = Файлы.Каталог
		|ГДЕ
		|	НЕ Файлы.ПолучатьИзMinio
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Файлы.Ссылка
		|ИЗ
		|	ИзображенияОписания КАК ИзображенияОписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО ИзображенияОписания.Наименование = Файлы.Наименование
		|ГДЕ
		|	Файлы.ПолучатьИзMinio
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрикрепленныеФайлы.Файл КАК Файл
		|ПОМЕСТИТЬ ПрикрепленныеФайлы
		|ИЗ
		|	РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
		|ГДЕ
		|	ПрикрепленныеФайлы.Объект = &Владелец
		|	И ПрикрепленныеФайлы.Назначение = &НазначениеФайла
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрикрепленныеФайлы.Файл КАК Файл,
		|	ЛОЖЬ КАК ДобавитьЗапись
		|ИЗ
		|	ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Файлы КАК Файлы
		|		ПО Файлы.Ссылка = ПрикрепленныеФайлы.Файл
		|ГДЕ
		|	Файлы.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Файлы.Ссылка,
		|	ИСТИНА
		|ИЗ
		|	Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
		|		ПО Файлы.Ссылка = ПрикрепленныеФайлы.Файл
		|ГДЕ
		|	ПрикрепленныеФайлы.Файл ЕСТЬ NULL";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Владелец", ВладелецФайлов);
		Запрос.УстановитьПараметр("НазначениеФайла", НазначениеФайла);
		Запрос.УстановитьПараметр("ИзображенияОписания", ИзображенияОписания);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				НаборЗаписей.Отбор.Файл.Установить(Выборка.Файл);
				
				Если Выборка.ДобавитьЗапись Тогда
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.Объект = ВладелецФайлов;
					НоваяЗапись.Файл = Выборка.Файл;
					НоваяЗапись.Назначение = НазначениеФайла;
				Иначе                                    
					Текст = СтрШаблон("Удален файл %1, текущее описание: %2; исходное описание: %3", 
						Выборка.Файл, Описание, ОписаниеИсходное);
					ЗаписьЖурналаРегистрации("Редактор описания.Удаление прикрепленного Файла", 
						УровеньЖурналаРегистрации.Предупреждение,, ВладелецФайлов, Текст);				
				КонецЕсли;
				
				НаборЗаписей.Записать();
				НаборЗаписей.Очистить(); 
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		Результат.Изображения = ИзображенияОписания;
	КонецЕсли;
	
	Результат.Описание = Описание;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьТекстДляУстановкиВДокумент(Знач ТекстMarkDown) Экспорт
		
	// Проверка наличия js и других html-тегов - для корректного отображения
	НовыйТекстMarkDown = ПроверитьНаличиеЗапрещенныхТегов(ТекстMarkDown);
	
	// Заменим спецсимволы для корректного отображения html
	ТекстБезПереносовСтрок = "";
	ЗаменитьСпецСимволыНаHTML(НовыйТекстMarkDown);
	
	Шаблон = "([^\n]+|^$)";
	МассивПодстрок = СтрНайтиВсеПоРегулярномуВыражению(НовыйТекстMarkDown, Шаблон);
	
	Для Каждого Строка Из МассивПодстрок Цикл
		Если ЗначениеЗаполнено(Строка.Значение) Тогда
			РедактируемаяСтрока = Строка.Значение + "  \r\n";
		Иначе
			РедактируемаяСтрока = "\r\n\r\n";
		КонецЕсли;            
	    ТекстБезПереносовСтрок = ТекстБезПереносовСтрок + РедактируемаяСтрока;
	КонецЦикла;	
			
	Возврат ТекстБезПереносовСтрок;
	
КонецФункции

// Возвращает описание для полнотекстового индекса
//
// Параметры:
//  Описание - Строка, ХранилищеЗначений - Описание объекта
// 
// Возвращаемое значение:
//  Строка - Текст описания
//
Функция ПолучитьИндексируемоеОписание(Знач Описание) Экспорт
	
	Если ТипЗнч(Описание) = Тип("ХранилищеЗначения") Тогда
		Описание = Описание.Получить();	
	КонецЕсли;
	
	Описание = КонвертацияОписания.ОчиститьHTMLОтТегов(Описание);
	
	Возврат Новый ХранилищеЗначения(Описание, Новый СжатиеДанных(9));
	
КонецФункции

// Создает реквизиты и элементы формы для функционирования редактора.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - форма на которой размещен редактор описания.
//  ГруппаВладелец			 - ГруппаФормы - группа в которой будет размещены элементы нового редактора.
//  ИмяРеквизита			 - Строка - дополнительный параметр для использования нескольких редакторов на одной форме.
//
Процедура Создать(Форма, ГруппаВладелец, ИмяРеквизита = "") Экспорт
	
	ОписаниеТипаСтрока = ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(0);

	ИмяРеквизитаРедактора = РедакторОписанияКлиентСервер.ИмяРеквизита(ИмяРеквизита);
	ТекстHTML = Новый РеквизитФормы(ИмяРеквизитаРедактора, ОписаниеТипаСтрока);
	
	ИмяРеквизитаАктуальноеОписание = РедакторОписанияКлиентСервер.ИмяРеквизитаАктуальноеОписание(ИмяРеквизита);
	АктуальноеОписание = Новый РеквизитФормы(ИмяРеквизитаАктуальноеОписание, ОписаниеТипаСтрока);
	
	ИмяРеквизитаИзмененоОписание = РедакторОписанияКлиентСервер.ИмяРеквизитаИзмененоОписание(ИмяРеквизита);
	ИзмененоОписание = Новый РеквизитФормы(ИмяРеквизитаИзмененоОписание, Новый ОписаниеТипов("Булево"));

	ИмяРеквизитаОткрытиеОписания = РедакторОписанияКлиентСервер.ИмяРеквизитаОткрытиеОписания(ИмяРеквизита);
	ОткрытиеОписания = Новый РеквизитФормы(ИмяРеквизитаОткрытиеОписания, Новый ОписаниеТипов("Булево"));
	
	НовыеРеквизитыФормы = Новый Массив;
	НовыеРеквизитыФормы.Добавить(ТекстHTML);
	НовыеРеквизитыФормы.Добавить(АктуальноеОписание);
	НовыеРеквизитыФормы.Добавить(ИзмененоОписание);
	НовыеРеквизитыФормы.Добавить(ОткрытиеОписания);
			
	Форма.ИзменитьРеквизиты(НовыеРеквизитыФормы);
	
	ПолеДокументаHTML = Форма.Элементы.Добавить(ИмяРеквизитаРедактора, Тип("ПолеФормы"), ГруппаВладелец);
	ПолеДокументаHTML.ПутьКДанным = ИмяРеквизитаРедактора;
	ПолеДокументаHTML.Вид = ВидПоляФормы.ПолеHTMLДокумента;
	ПолеДокументаHTML.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеДокументаHTML.УстановитьДействие("ПриНажатии", "Подключаемый_ПриНажатииПоляHTMLДокумента");
	
	КомандаДобавленияВЧекЛист = Форма.Команды.Найти("ДобавитьВыделенныйТекстВЧекЛист");
	
	Если КомандаДобавленияВЧекЛист <> Неопределено Тогда
		КомандыКонтекстногоМеню = Форма.Элементы.Добавить("РедакторОписания_КомандыКонтекстногоМеню", Тип("ГруппаФормы"),
			ПолеДокументаHTML.КонтекстноеМеню);
		КомандыКонтекстногоМеню.Вид = ВидГруппыФормы.ГруппаКнопок;
			
		КнопкаПанели = Форма.Элементы.Добавить("РедакторОписания_ДобавитьВЧекЛист", Тип("КнопкаФормы"), КомандыКонтекстногоМеню);
		КнопкаПанели.ИмяКоманды = "ДобавитьВыделенныйТекстВЧекЛист";
	ИначеЕсли КлиентскоеПриложение.ТипПриложения() = ТипКлиентскогоПриложения.ВебКлиент Тогда
		// Убираем рамку вокруг html поля
		ПолеДокументаHTML.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Создает HTML-текст на основании переданного текста в формате markdown.
//
// Параметры:
//  ИсходныйТекст				 - Строка	 - текст в формате markdown.
//  ИспользоватьСтильДайджеста	 - Булева - Должен использоваться ли стиль дайджеста или нет
// 
// Возвращаемое значение:
//  Строка. Текст - HTML.
//
Функция СоздатьHTML(Знач ИсходныйТекст) Экспорт
	
	Шаблон = ПолучитьОбщийМакет("MarkdownHTML").ПолучитьТекст();

	Если КлиентскоеПриложение.ТипПриложения() = ТипКлиентскогоПриложения.ТонкийКлиент Тогда
		BaseURL = WebОкружениеВызовСервера.АдресПубликацииСлужебныхДанных();
	Иначе
		BaseURL = "../../assets";
	КонецЕсли;
	
	Возврат СтрШаблон(Шаблон, BaseURL, ИсходныйТекст);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

Процедура ЗаменитьСпецСимволыНаHTML(ТекстMarkDown)
	
	ТекстMarkDown = СтрЗаменить(ТекстMarkDown, "\", "\\");
	ТекстMarkDown = СтрЗаменить(ТекстMarkDown, Символ(34), "\" + Символ(34));
	ТекстMarkDown = СтрЗаменить(ТекстMarkDown, "<", "\<");
	ТекстMarkDown = СтрЗаменить(ТекстMarkDown, ">", "\>");
	
	ТекстMarkDown = СтрЗаменить(ТекстMarkDown, "'", "\'"); 
	ТекстMarkDown = СтрЗаменить(ТекстMarkDown, "`", "\`");
	ТекстMarkDown = СтрЗаменить(ТекстMarkDown, "_", "\_");
	ТекстMarkDown = СтрЗаменить(ТекстMarkDown, "!", "\!");
	
	// Удаление из строки служебного символа Unicode (LS - line separator).
	// P.S. В Notepad++ отображается как LS	
	ТекстMarkDown = СтрЗаменить(ТекстMarkDown, Символ(8232), "");
	
	// Удаление символа возврата каретки (CR - carriage return).
	// При обработке текста скрипт редактора Markdown вызовет
	// исключение при наличии этого символа в описании.
	ТекстMarkDown = СтрЗаменить(ТекстMarkDown, Символы.ВК, "");
		
КонецПроцедуры

Функция ПроверитьНаличиеЗапрещенныхТегов(Знач ТекстMarkDown)
	
	ЭкранироватьHTMLКомментарии(ТекстMarkDown);
	
	// Проверим наличие js в исходном тексте
	// и обернем их в блоки кода
	Шаблон = "([`]+\n|)(?:<script)[^~]*?(?:\/script>)[`]*";
	ОбернутьЗапрещенныеТегиВБлокКода(ТекстMarkDown, Шаблон);
		
	// Проверим наличие тега img - чтобы исключить в описании код
	// Например, <img src='x' onerror='alert(1)'> 
	Шаблон = "([`]+\n|[`]+|)<img[^`\/>]*\/?>`*";
	ОбернутьЗапрещенныеТегиВБлокКода(ТекстMarkDown, Шаблон);
	
	Возврат ТекстMarkDown;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбернутьЗапрещенныеТегиВБлокКода(ТекстMarkDown, Знач Шаблон)
	
	МассивПодстрок = СтрНайтиВсеПоРегулярномуВыражению(ТекстMarkDown, Шаблон);	
	
	Для Каждого СтрокаСкрипт Из МассивПодстрок Цикл
		КодВНачале = ?(СтрНачинаетсяС(СтрокаСкрипт.Значение, "```"), "", Символы.ПС + "```" + Символы.ПС);
		КодВКонце = ?(СтрЗаканчиваетсяНа(СтрокаСкрипт.Значение, "```"), "", Символы.ПС + "```" + Символы.ПС);
		
		НоваяСтрокаСкрипт = СтрШаблон("%1%2%3", КодВНачале, СтрокаСкрипт.Значение, КодВКонце);
		ТекстMarkDown = СтрЗаменить(ТекстMarkDown, СтрокаСкрипт.Значение, НоваяСтрокаСкрипт);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗафиксированноеОписание(Знач Описание)
	
	ТекстБезПереносовСтрок = ОбработатьТекстДляУстановкиВДокумент(Описание);
		
	Результат = СоздатьHTML(ТекстБезПереносовСтрок);
		
	Возврат Результат;
		
КонецФункции

// Экранирует html комментарии, если прикреплен блок кода 
//
// Параметры:
//  ТекстMarkDown - Строка - видимый текст описания 
//
Процедура ЭкранироватьHTMLКомментарии(ТекстMarkDown)
	
	// Опытным путем установлено, что если прикреплен блок html 
	// кода с комментариями в конце и началале, то скрипт 
	// MarkDown некорректно их обрабатывает.
	// Поэтому проэкранируем все возможные случаи
	
	Шаблон = "([`]+\n|)(?:<!\-\- )[^~]*?(?:\ \-\->)[`]*";
	НайденныеКомментарии = СтрНайтиВсеПоРегулярномуВыражению(ТекстMarkDown, Шаблон);
	
	Для Каждого ЭлементКомментарий Из НайденныеКомментарии Цикл
		Комментарий = ЭлементКомментарий.Значение;
		ОткрывающийКомментарий = Символы.ПС + Комментарий;
		ЗакрывающийКомментарий = Комментарий + Символы.ПС + "```" + Символы.ПС;
		
		Если СтрНачинаетсяС(ТекстMarkDown, ОткрывающийКомментарий) Тогда
			ТекстMarkDown = СтрЗаменить(ТекстMarkDown, ОткрывающийКомментарий, "```" + Комментарий + "```" + Символы.НПП);
		ИначеЕсли СтрЗаканчиваетсяНа(ТекстMarkDown, ЗакрывающийКомментарий) Тогда
			ТекстMarkDown = СтрЗаменить(ТекстMarkDown, ЗакрывающийКомментарий, "```" + Комментарий + "```"+ Символы.НПП);
		ИначеЕсли СтрНачинаетсяС(ТекстMarkDown, Комментарий) Тогда
	        ТекстMarkDown = СтрЗаменить(ТекстMarkDown, Комментарий, "```" + Комментарий + "```" + Символы.НПП);
		ИначеЕсли СтрЗаканчиваетсяНа(ТекстMarkDown, Комментарий) Тогда
	        ТекстMarkDown = СтрЗаменить(ТекстMarkDown, Комментарий, "```" + Комментарий + "```" + Символы.НПП);	
		КонецЕсли;	                                          
	КонецЦикла;		
	
КонецПроцедуры	

#КонецОбласти

#КонецЕсли
