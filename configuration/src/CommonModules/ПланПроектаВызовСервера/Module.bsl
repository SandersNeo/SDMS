///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция ИзменитьЗаписьПлана(ДанныеЗаполнения, Знач Владелец) Экспорт
	
	Результат = Неопределено;
	
	МенеджерЗаписи = РегистрыСведений.ПланыВыполненияПроектов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.КлючСобытия = ДанныеЗаполнения.КлючСобытия;
	МенеджерЗаписи.Объект = Владелец;
	
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		ПроцентВыполнения = 0;
		
		Если НЕ ДанныеЗаполнения.ЭтоГруппа Тогда
			ДокументПлана = ДанныеЗаполнения.Документ;
			ЭтоЧерновик = Ложь;
			
			Если ТипЗнч(ДокументПлана) = Тип("СправочникСсылка.Файлы") ИЛИ НЕ ЗначениеЗаполнено(ДокументПлана) Тогда
				ДокументПлана = Неопределено;
			ИначеЕсли ТипЗнч(ДокументПлана) = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
				УстановитьПривилегированныйРежим(Истина);
				ЭтоЧерновик = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПлана, "Черновик");
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			
			Если ЭтоЧерновик Тогда
				ПроцентВыполнения = 10;
			ИначеЕсли ЗначениеЗаполнено(ДокументПлана) И ДанныеЗаполнения.Статус = Справочники.СтатусыОбъектов.Новый Тогда
				ПроцентВыполнения = 20;
			Иначе
				ПроцентВыполнения = РегистрыСведений.ПланыВыполненияПроектов.ПолучитьПроцентВыполения(ДанныеЗаполнения.Статус, ДокументПлана);
			КонецЕсли;
			
		ИначеЕсли ДанныеЗаполнения.ЕстьПодчиненные Тогда
			ПроцентВыполнения = МенеджерЗаписи.ПроцентВыполнения;
		Иначе
			ПроцентВыполнения = 0;
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить("ПроцентВыполнения", ПроцентВыполнения);
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеЗаполнения, , "КлючСобытия");
		
		МенеджерЗаписи.Записать();
		
		Если НЕ (ДанныеЗаполнения.ЭтоГруппа И ДанныеЗаполнения.ЕстьПодчиненные) Тогда
			РегистрСведений = РегистрыСведений.ПланыВыполненияПроектов;
			Результат = РегистрСведений.ПересчитатьРодительскиеЭлементыПлана(Владелец, ДанныеЗаполнения.ВладелецСобытия);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбновитьРодительскиеЗаписиПлана(Знач Объект, Знач ДанныеДляОбновленияФормы) Экспорт
	
	Результат = Новый Структура("ДанныеПредыдущегоВладельца, ДанныеНовогоВладельца");
	
	Результат.ДанныеПредыдущегоВладельца = РегистрыСведений.ПланыВыполненияПроектов.ПересчитатьРодительскиеЭлементыПлана(Объект, ДанныеДляОбновленияФормы.ПредыдущийВладелец);
	Результат.ДанныеНовогоВладельца = РегистрыСведений.ПланыВыполненияПроектов.ПересчитатьРодительскиеЭлементыПлана(Объект, ДанныеДляОбновленияФормы.НовыйВладелец);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПлановуюДатуОкончания(Знач Объект) Экспорт
	
	Результат = Новый Структура("ТекстОшибки, ДатаОкончания_План", "", '00010101');
	
	ШаблонЗапроса =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоПлановПроекта
	|ИЗ
	|	РегистрСведений.ПланыВыполненияПроектов КАК ПланыВыполненияПроектов
	|ГДЕ
	|	ПланыВыполненияПроектов.Объект = &Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОбъекта.%1 КАК ДатаНачала_План,
	|	ДанныеОбъекта.ДатаНачалаРазработки КАК ДатаНачала_Факт
	|ИЗ
	|	%2 КАК ДанныеОбъекта
	|ГДЕ
	|	ДанныеОбъекта.Ссылка = &Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ПланыВыполненияПроектов.Объект КАК Объект,
	|	МИНИМУМ(ПланыВыполненияПроектов.ДатаНачала_План) КАК ДатаНачала_План,
	|	МАКСИМУМ(ПланыВыполненияПроектов.ДатаОкончания_План) КАК ДатаОкончания_План,
	|	Проекты.ДатаПлановоеОкончание КАК ОбъектДатаПлановоеОкончание
	|ИЗ
	|	РегистрСведений.ПланыВыполненияПроектов КАК ПланыВыполненияПроектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
	|		ПО ПланыВыполненияПроектов.Объект = Проекты.Ссылка
	|			И ПланыВыполненияПроектов.Объект = &Объект
	|			И (ПланыВыполненияПроектов.Объект ССЫЛКА Справочник.Проекты)
	|			И (ПланыВыполненияПроектов.ДатаНачала_План <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|			И (ПланыВыполненияПроектов.ДатаОкончания_План <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланыВыполненияПроектов.Объект,
	|	Проекты.ДатаПлановоеОкончание
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланыВыполненияПроектов.Объект,
	|	МИНИМУМ(ПланыВыполненияПроектов.ДатаНачала_План),
	|	МАКСИМУМ(ПланыВыполненияПроектов.ДатаОкончания_План),
	|	ВнутреннееЗадание.ИсполнитьДо
	|ИЗ
	|	РегистрСведений.ПланыВыполненияПроектов КАК ПланыВыполненияПроектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
	|		ПО ПланыВыполненияПроектов.Объект = ВнутреннееЗадание.Ссылка
	|			И ПланыВыполненияПроектов.Объект = &Объект
	|			И (ПланыВыполненияПроектов.Объект ССЫЛКА Документ.ВнутреннееЗадание)
	|			И (ПланыВыполненияПроектов.ДатаНачала_План <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|			И (ПланыВыполненияПроектов.ДатаОкончания_План <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланыВыполненияПроектов.Объект,
	|	ВнутреннееЗадание.ИсполнитьДо";
	#КонецОбласти
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Проекты") Тогда
		ИмяОбъекта = "Справочник.Проекты";
		ИмяРеквизита = "ДатаПлановоеНачало";
	Иначе
		ИмяОбъекта = "Документ.ВнутреннееЗадание";
		ИмяРеквизита = "ПлановоеНачало";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрШаблон(ШаблонЗапроса, ИмяРеквизита, ИмяОбъекта);
	Запрос.УстановитьПараметр("Объект", Объект);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Выборка.Следующий();
	
	Если Выборка.КоличествоПлановПроекта = 0 Тогда
		Результат.ТекстОшибки = "План проектов не заполнен";
	Иначе
		ПланируемыеСрокиПоПланамПроектов = РезультатЗапроса[2];
	
		Если НЕ ПланируемыеСрокиПоПланамПроектов.Пустой() Тогда
			Выборка = ПланируемыеСрокиПоПланамПроектов.Выбрать();
			Выборка.Следующий();
			
			КоличествоВыходных = ОбщегоНазначениявызовСервера.КоличествоВыходныхДней(Выборка.ДатаНачала_План, Выборка.ДатаОкончания_План);
			ПланируемыйСрок = (Выборка.ДатаОкончания_План - Выборка.ДатаНачала_План) / 86400 - КоличествоВыходных;
		Иначе
			ПланируемыйСрок = 0;
		КонецЕсли;
		
		Если ПланируемыйСрок = 0 Тогда
			Результат.ТекстОшибки = "В планах проектов недостаточно данных для расчета планового окончания";
		Иначе
			ДанныеОбъекта = РезультатЗапроса[1];
			Выборка = ДанныеОбъекта.Выбрать();
			Выборка.Следующий();
			
			Если ЗначениеЗаполнено(Выборка.ДатаНачала_Факт) Тогда
				Результат.ДатаОкончания_План = ОбщегоНазначенияВызовСервера.ДобавитьКДатеРабочихДней(Выборка.ДатаНачала_Факт, ПланируемыйСрок);
			Иначе
				Результат.ТекстОшибки = "Заполните фактическую дату начала.";
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПроцентВыполнения(Знач Объект) Экспорт
	
	Результат = Новый Структура("ТекстОшибки, ПроцентВыполнения", "", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланыВыполненияПроектов.ПроцентВыполнения КАК ПроцентВыполнения
	|ИЗ
	|	РегистрСведений.ПланыВыполненияПроектов КАК ПланыВыполненияПроектов
	|ГДЕ
	|	ПланыВыполненияПроектов.Объект = &Объект
	|	И ПланыВыполненияПроектов.ВладелецСобытия = &ПустойИдентификатор";
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("ПустойИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ПроцентыПлана = Запрос.Выполнить().Выгрузить();
		
		Результат.ПроцентВыполнения = Окр(ПроцентыПлана.Итог("ПроцентВыполнения") / ПроцентыПлана.Количество());
	Иначе
		Результат.ТекстОшибки = "План проектов не заполнен";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьДатаОкончания_План(Дерево, Знач ДатаНачала_План, Знач ДатаОкончания_План, Знач ПланируемыйСрок, Знач Порядок) Экспорт
	
	Если ЗначениеЗаполнено(ДатаОкончания_План) И ЗначениеЗаполнено(ДатаНачала_План) Тогда
		КоличествоВыходных = ОбщегоНазначенияВызовСервера.КоличествоВыходныхДней(ДатаНачала_План, ДатаОкончания_План);
		Длительность = (ДатаОкончания_План - ДатаНачала_План) / 86400 - КоличествоВыходных;
		Смещение = ПланируемыйСрок - Длительность;
	Иначе 
		Смещение = 0;
	КонецЕсли;
	
	Если ПланируемыйСрок = 0 Тогда
		ДатаОкончания_План = ДатаНачала_План;	
	Иначе
		ДатаОкончания_План = ОбщегоНазначенияВызовСервера.ДобавитьКДатеРабочихДней(ДатаНачала_План, ПланируемыйСрок);
	КонецЕсли;	
	
	ИзменяемаяСтрока = Дерево.Строки.Найти(Порядок, "Порядок", Истина);
	ИзменяемаяСтрока.ДатаОкончания_План = ДатаОкончания_План;
	
	Если Смещение <> 0 Тогда // пересчитать даты в записях, для которых изменяемая запись является предшественником	
		ПересчитатьЗаписиСПредшественником(Дерево, Порядок, Смещение, Порядок);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПересчитатьЗаписиСПредшественником(Дерево, Порядок, КоличествоДнейСмещения, НачальныйПорядок) Экспорт
	
	ПривязанныеЗаписи = Дерево.Строки.НайтиСтроки(Новый Структура("Предшественник", Порядок), Истина);
	
	Для Каждого Запись Из ПривязанныеЗаписи Цикл
		Если ЗначениеЗаполнено(Запись.ДатаНачала_План) И Запись.Порядок <> НачальныйПорядок Тогда
			Запись.ДатаНачала_План = ОбщегоНазначенияВызовСервера.ДобавитьКДатеРабочихДней(Запись.ДатаНачала_План, КоличествоДнейСмещения);
			Запись.ДатаОкончания_План = ОбщегоНазначенияВызовСервера.ДобавитьКДатеРабочихДней(Запись.ДатаНачала_План, Запись.ПланируемыйСрок);
			ПересчитатьЗаписиСПредшественником(Дерево, Запись.Порядок, КоличествоДнейСмещения, НачальныйПорядок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьСтроку(Знач ДанныеЗаполнения, Знач Владелец, Знач Порядок) Экспорт
	
	Возврат РегистрыСведений.ПланыВыполненияПроектов.СоздатьСтроку(ДанныеЗаполнения, Владелец, Порядок);
	
КонецФункции

Функция УдалитьПунктПлана(Знач КлючСобытия, Знач Владелец, Знач Порядок = 0) Экспорт
	
	ДанныеДляОбновленияФормы = Неопределено;
	
	МенеджерЗаписи = РегистрыСведений.ПланыВыполненияПроектов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Владелец;
	МенеджерЗаписи.КлючСобытия = КлючСобытия;
	МенеджерЗаписи.Прочитать();
	
	ВладелецСобытия = МенеджерЗаписи.ВладелецСобытия;
	
	Попытка
		МенеджерЗаписи.Удалить();
		ПунктУдален = Истина;
	Исключение
		ОписаниеОшибки = "Не удалось записать план проекта по причине: " + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("План проектов.Запись изменений", УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		ПунктУдален = Ложь;
	КонецПопытки;
	
	Если ПунктУдален Тогда
		ДанныеДляОбновленияФормы = РегистрыСведений.ПланыВыполненияПроектов.ПересчитатьРодительскиеЭлементыПлана(Владелец, ВладелецСобытия);
		Если Порядок > 0 Тогда
			ОбновитьПредшественника = РегистрыСведений.ПланыВыполненияПроектов.УдалитьПредшественника(Порядок);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("ПунктУдален, ДанныеДляОбновленияФормы, ОбновитьПредшественника",
		ПунктУдален, ДанныеДляОбновленияФормы, ОбновитьПредшественника); 
	
КонецФункции

#КонецОбласти
