///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ВнешнееСоединение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда

#Область ПрограммныйИнтерфейс

Процедура ВыполнитьСемантическийАнализ() Экспорт
	
	РезультатыПоиска = ВыполнитьПоискСтопСлов();
	
	Если РезультатыПоиска <> Неопределено Тогда
		ПроверитьОбъектыПоОтборам(РезультатыПоиска);
		ОбработатьЗаписиРегистра(РезультатыПоиска);
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиПодписок

Процедура СемантическийАнализПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	// Получаем массив имен реквизитов для проверки семантики
	МассивРеквизитов = ПроверяемыеРеквизиты(Источник.Ссылка);
	
	ОбработатьПроверяемыеРеквизиты = Ложь;
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаявкаНаРазработку") Тогда
		МассивРеквизитов.Добавить("ЮридическоеЛицо");
		ОбработатьПроверяемыеРеквизиты = Истина;
	КонецЕсли;
	
	// Получаем значения этих реквизитов до записи
	ДополнительноеСвойство = Новый Структура;
	ДополнительноеСвойство.Вставить("ЭтоНовыйОбъект", Источник.Ссылка.Пустая());
	
	// Для нового объекта нет смысла проверять наличие старых значений реквизитов
	Если НЕ ДополнительноеСвойство.ЭтоНовыйОбъект Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, МассивРеквизитов);
		
		Если ОбработатьПроверяемыеРеквизиты Тогда
			СтароеЗначение = ЗначенияРеквизитов.ЮридическоеЛицо;
			ЗначенияРеквизитов.Удалить("ЮридическоеЛицо");
			
			ДополнительноеСвойство.Вставить("ЮридическоеЛицоИзменено", (Источник.ЮридическоеЛицо <> СтароеЗначение));
		Иначе
			ДополнительноеСвойство.Вставить("ЮридическоеЛицоИзменено", Ложь);
		КонецЕсли;
		
		ДополнительноеСвойство.Вставить("ЗначенияРеквизитов", ЗначенияРеквизитов);
	КонецЕсли;
	
	// Добавляем их как дополнительные свойства в текущему объекту
	Источник.ДополнительныеСвойства.Вставить(ИмяДополнительногоСвойства(), ДополнительноеСвойство);
	
КонецПроцедуры

Процедура СемантическийАнализПриЗаписи(Источник, Отказ) Экспорт
	
	ДополнительноеСвойство = Неопределено;
	
	// Если в дополнительных свойствах объекта присутствует свойство "ДанныеДляСемантическогоАнализа"
	Если Источник.ДополнительныеСвойства.Свойство(ИмяДополнительногоСвойства(), ДополнительноеСвойство) Тогда
		
		// 1. Для нового объекта старых значений реквизитов не будет.
		// 2. При смене юридического лица добавляем для анализа все проверяемые реквизиты
		ТекстОписания = Источник.Описание.Получить();
		ЗаполненоОписание = НЕ ПустаяСтрока(ТекстОписания);
		Если ДополнительноеСвойство.ЭтоНовыйОбъект Тогда			
			// Проверяем изменение реквизитов созданной задачи 	
			Если ТипЗнч(Источник) = Тип("ДокументОбъект.Задача") Тогда
				НаименованиеЗаявкиОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.ОбъектОснование, "Наименование");
				Если НаименованиеЗаявкиОснования <> Источник.Наименование Тогда
					ДобавитьДляАнализа(Источник.Ссылка, "Наименование", Источник.Наименование);
				КонецЕсли;
				ХранилищеЗаявкиОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.ОбъектОснование, "Описание");
				ОписаниеЗаявкиОснования = ХранилищеЗаявкиОснования.Получить();
				Если ОписаниеЗаявкиОснования <> ТекстОписания И ЗаполненоОписание Тогда
					ДобавитьДляАнализа(Источник.Ссылка, "Описание", ТекстОписания);
				КонецЕсли;
			Иначе
				ДобавитьЗаписиДляАнализаБезПроверок(Источник, ТекстОписания);
			КонецЕсли;	
		// Проверка при смене юридического лица	
		ИначеЕсли ДополнительноеСвойство.ЮридическоеЛицоИзменено Тогда
			ДобавитьЗаписиДляАнализаБезПроверок(Источник, ТекстОписания);			
		// Для измененного объекта проверяем, было ли изменение
		Иначе
			Для Каждого Структура Из ДополнительноеСвойство.ЗначенияРеквизитов Цикл
				Если Структура.Ключ = "Описание" Тогда
					Если ЗаполненоОписание Тогда
						СтароеОписание = Структура.Значение.Получить();
						Если СтароеОписание <> ТекстОписания Тогда
							ДобавитьДляАнализа(Источник.Ссылка, "Описание", ТекстОписания);
						КонецЕсли;
					КонецЕсли;
				Иначе
					НовоеЗначение = Источник[Структура.Ключ];
					Если НЕ ПустаяСтрока(НовоеЗначение) И (НовоеЗначение <> Структура.Значение) Тогда
						ДобавитьДляАнализа(Источник.Ссылка, Структура.Ключ, НовоеЗначение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыполнитьПоискСтопСлов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФразыДляСемантическогоАнализа.Ссылка КАК Ссылка,
	|	ФразыДляСемантическогоАнализа.Наименование КАК Наименование,
	|	ФразыДляСемантическогоАнализаШаблоныПоиска.Шаблон КАК Шаблон,
	|	ФразыДляСемантическогоАнализа.СообщениеПользователю КАК СообщениеПользователю
	|ИЗ
	|	Справочник.ФразыДляСемантическогоАнализа КАК ФразыДляСемантическогоАнализа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФразыДляСемантическогоАнализа.ШаблоныПоиска КАК ФразыДляСемантическогоАнализаШаблоныПоиска
	|		ПО ФразыДляСемантическогоАнализа.Ссылка = ФразыДляСемантическогоАнализаШаблоныПоиска.Ссылка
	|ГДЕ
	|	НЕ ФразыДляСемантическогоАнализа.ПометкаУдаления
	|ИТОГИ ПО
	|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ПараметрыПоиска = Обработки.ПолнотекстовыйПоиск.ПараметрыПоиска();
		ПараметрыПоиска.СемантическийАнализ = Истина;
		
		Результат = ПолучитьТаблицуРезультатовПоиска();
		
		ВыборкаСтопСлово = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСтопСлово.Следующий() Цикл
			
			Выборка = ВыборкаСтопСлово.Выбрать();
			Пока Выборка.Следующий() Цикл
				ПараметрыПоиска.СтрокаПоиска = Выборка.Шаблон;
				
				РезультатПолнотекстовогоПоиска = Обработки.ПолнотекстовыйПоиск.ВыполнитьПолнотекстовыйПоиск(ПараметрыПоиска);
				Если РезультатПолнотекстовогоПоиска.ПолноеКоличество > 0 Тогда
					Для Каждого РезультатПоиска Из РезультатПолнотекстовогоПоиска.РезультатыПоиска Цикл
						НоваяСтрока = Результат.Добавить();
						НоваяСтрока.КлючЗаписи = РезультатПоиска.КлючЗаписи;
						НоваяСтрока.ТекстСОшибкой = РезультатПоиска.ОписаниеHTML;
						НоваяСтрока.ШаблонПоиска = Выборка.Шаблон;
						НоваяСтрока.Фраза = Выборка.Ссылка;
						НоваяСтрока.ДатаПоиска = ТекущаяДатаСеанса();
						НоваяСтрока.Объект = РезультатПоиска.Ссылка;
						НоваяСтрока.СообщениеПользователю = Выборка.СообщениеПользователю;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьДляАнализа(Знач Ссылка, Знач НазваниеРеквизита, Знач Текст)
	
	Если НазваниеРеквизита = "Описание" Тогда
		ВидТекста = Перечисления.ВидыТекстовСемантическогоАнализа.Описание;
	ИначеЕсли НазваниеРеквизита = "Наименование" Тогда
		ВидТекста = Перечисления.ВидыТекстовСемантическогоАнализа.Тема;
	КонецЕсли;
	
	РегистрыСведений.ТекстыОбъектовДляСемантическогоАнализа.Добавить(Ссылка, ВидТекста, Текст);
	
КонецПроцедуры

Процедура ДобавитьЗаписиДляАнализаБезПроверок(Знач Источник, Знач ТекстОписания)
	
	// Добавляем наименование для проверки
	ДобавитьДляАнализа(Источник.Ссылка, "Наименование", Источник.Наименование);
	Если НЕ ПустаяСтрока(ТекстОписания) Тогда				
		// Если описание не пустое, то добавляем его на проверку
		ДобавитьДляАнализа(Источник.Ссылка, "Описание", ТекстОписания);
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяДополнительногоСвойства()
	
	Возврат "ДанныеДляСемантическогоАнализа";
	
КонецФункции

Процедура ОбработатьЗаписиРегистра(Знач РезультатПоиска)
	
	ДатаОбновленияИндекса = ПолнотекстовыйПоиск.ДатаАктуальности();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТекстыОбъектовДляСемантическогоАнализа.Дата КАК Дата,
	|	ТекстыОбъектовДляСемантическогоАнализа.Объект КАК Объект,
	|	ТекстыОбъектовДляСемантическогоАнализа.ВидТекста КАК ВидТекста,
	|	ТекстыОбъектовДляСемантическогоАнализа.ИндексируемыйТекст КАК ИндексируемыйТекст
	|ИЗ
	|	РегистрСведений.ТекстыОбъектовДляСемантическогоАнализа КАК ТекстыОбъектовДляСемантическогоАнализа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ТекстыОбъектовДляСемантическогоАнализа.Автор = Пользователи.Ссылка
	|ГДЕ
	|	ТекстыОбъектовДляСемантическогоАнализа.Дата <= &Дата
	|	И НЕ ТекстыОбъектовДляСемантическогоАнализа.Обработан
	|	И НЕ Пользователи.Служебный";
	
	Запрос.УстановитьПараметр("Дата", ДатаОбновленияИндекса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтруктураИзмерений = Новый Структура("Дата, Объект, ВидТекста");
			ЗаполнитьЗначенияСвойств(СтруктураИзмерений, Выборка);
			
			МенеджерЗаписи = РегистрыСведений.ТекстыОбъектовДляСемантическогоАнализа.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураИзмерений);
			МенеджерЗаписи.Прочитать();
			
			Если МенеджерЗаписи.Выбран() Тогда
				КлючЗаписи = РегистрыСведений.ТекстыОбъектовДляСемантическогоАнализа.СоздатьКлючЗаписи(СтруктураИзмерений);
				
				НайденныеСтроки = РезультатПоиска.НайтиСтроки(Новый Структура("КлючЗаписи", КлючЗаписи));
				МенеджерЗаписи.НайденыСтопСлова = (НайденныеСтроки.Количество() > 0);
				МенеджерЗаписи.Обработан = Истина;
				
				Если МенеджерЗаписи.НайденыСтопСлова Тогда
					ТекущиеРезультатыПоиска = Новый Массив;
					
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						СтруктураРезультатаПоиска = Новый Структура("ШаблонПоиска, ТекстСОшибкой, Фраза, ДатаПоиска");
						ЗаполнитьЗначенияСвойств(СтруктураРезультатаПоиска, НайденнаяСтрока);
						ТекущиеРезультатыПоиска.Добавить(СтруктураРезультатаПоиска);
					КонецЦикла;
					
					ДанныеХранилища = МенеджерЗаписи.ХранилищеРезультатовПроверки.Получить();
					
					Если ДанныеХранилища <> Неопределено Тогда
						Для Каждого СтруктураРезультатаПоиска Из ТекущиеРезультатыПоиска Цикл
							ДанныеХранилища.Добавить(ТекущиеРезультатыПоиска);
						КонецЦикла;
					Иначе
						ДанныеХранилища = ТекущиеРезультатыПоиска;
					КонецЕсли;
					
					ТекстСообщения = СформироватьТекстСообщения(МенеджерЗаписи, РезультатПоиска.Скопировать(НайденныеСтроки));
				Иначе
					ДанныеХранилища = Новый Структура("ДатаПроверки, Текст", ТекущаяДатаСеанса(), МенеджерЗаписи.ИндексируемыйТекст);
					ТекстСообщения = Неопределено;
				КонецЕсли;
				
				МенеджерЗаписи.ХранилищеРезультатовПроверки = Новый ХранилищеЗначения(ДанныеХранилища, Новый СжатиеДанных(9));
				МенеджерЗаписи.ИндексируемыйТекст = "";
				
				НачатьТранзакцию();
				Попытка
					МенеджерЗаписи.Записать();
					
					Если МенеджерЗаписи.НайденыСтопСлова Тогда
						РегистрыСведений.ОчередьСобытийНаОбработку.ОтправитьОповещенияПоСтопСловам(МенеджерЗаписи.Объект, МенеджерЗаписи.Автор, ТекстСообщения);
					КонецЕсли;
					
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					
					ЗаписьЖурналаРегистрации("Обновление текста объекта для семантического анализа", УровеньЖурналаРегистрации.Ошибка,
						, КлючЗаписи, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуРезультатовПоиска()
	
	ОписаниеСтроки = ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(0);
		
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("КлючЗаписи", Новый ОписаниеТипов("РегистрСведенийКлючЗаписи.ТекстыОбъектовДляСемантическогоАнализа"));
	Результат.Колонки.Добавить("ТекстСОшибкой", ОписаниеСтроки);
	Результат.Колонки.Добавить("ШаблонПоиска", ОписаниеСтроки);
	Результат.Колонки.Добавить("Фраза", Новый ОписаниеТипов("СправочникСсылка.ФразыДляСемантическогоАнализа"));
	Результат.Колонки.Добавить("ДатаПоиска", ОбщегоНазначенияКлиентСервер.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Результат.Колонки.Добавить("Объект", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ОбъектСемантическогоАнализа.Тип.Типы()));
	Результат.Колонки.Добавить("СообщениеПользователю", ОписаниеСтроки);
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьОбъектыПоОтборам(РезультатПоиска)
	
	ТаблицаНайденныхФраз = РезультатПоиска.Скопировать(, "Фраза");
	ТаблицаНайденныхФраз.Свернуть("Фраза");
	НайденныеФразы = ТаблицаНайденныхФраз.ВыгрузитьКолонку("Фраза");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФразыДляСемантическогоАнализа.Ссылка КАК Ссылка,
	|	ФразыДляСемантическогоАнализа.НастройкиОтбора КАК НастройкиОтбора
	|ИЗ
	|	Справочник.ФразыДляСемантическогоАнализа КАК ФразыДляСемантическогоАнализа
	|ГДЕ
	|	ФразыДляСемантическогоАнализа.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", НайденныеФразы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		ОтборОбъектов = Новый Структура("Фраза");
		
		Пока Выборка.Следующий() Цикл
			НастройкиКомпоновки = Выборка.НастройкиОтбора.Получить();
			ТипНастроекКомпоновки = ТипЗнч(НастройкиКомпоновки);
			
			// Если в хранилище нет настроек, или в настройках не заполнен отбор,
			// то никаких проверок выполнять не требуется
			Если НастройкиКомпоновки = Неопределено
				ИЛИ (ТипНастроекКомпоновки = Тип("НастройкиКомпоновкиДанных")
					И НастройкиКомпоновки.Отбор.Элементы.Количество() = 0) Тогда
				Продолжить;
			КонецЕсли;
			
			ОтборОбъектов.Фраза = Выборка.Ссылка;
			
			НайденныеОбъекты = РезультатПоиска.НайтиСтроки(ОтборОбъектов);
			
			ВыбранныеОбъекты = Новый Массив;
			Для Каждого НайденныйОбъект Из НайденныеОбъекты Цикл
				ВыбранныеОбъекты.Добавить(НайденныйОбъект.Объект);
			КонецЦикла;
			
			РезультатПроверки = РезультатПроверкиПоОтбору(НастройкиКомпоновки, ВыбранныеОбъекты);
			//Для Каждого НайденныйОбъект Из НайденныеОбъекты Цикл
			//	НайденнаяСтрока = РезультатПроверки.Найти(НайденныйОбъект.Объект);
			//	Если НайденнаяСтрока = Неопределено Тогда
			//		РезультатПоиска.Удалить(НайденныйОбъект);
			//	КонецЕсли;
			//КонецЦикла;
			
			СтрокиНаУдаление = РезультатПоиска.НайтиСтроки(ОтборОбъектов);
			Для Каждого СтрокаНаУдаление Из СтрокиНаУдаление Цикл
				Если РезультатПроверки.Найти(СтрокаНаУдаление.Объект) = Неопределено Тогда
					РезультатПоиска.Удалить(СтрокаНаУдаление);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверяемыеРеквизиты(Знач Ссылка)
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
	
	Возврат МенеджерОбъекта.РеквизитыСемантическогоАнализа();
	
КонецФункции

Функция РезультатПроверкиПоОтбору(Знач Настройки, Знач ВыбранныеОбъекты)
	
	СхемаКомпоновкиДанных = Справочники.ФразыДляСемантическогоАнализа.ПолучитьМакет("ОтборДокументов");
	
	Результат = Новый ТаблицаЗначений;
	
	НастройкиПоУмолчанию = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	Для Каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
		ЗаполнитьЗначенияСвойств(НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")), ЭлементОтбора);
	КонецЦикла;
	
	ЭлементОтбора = НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = ВыбранныеОбъекты;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВыбранныеОбъекты");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиПоУмолчанию, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	//Запрос = Новый Запрос(МакетКомпоновки.НаборыДанных.Получить(0).Запрос);
	//
	//Для Каждого ПараметрЗапроса Из МакетКомпоновки.ЗначенияПараметров Цикл
	//	Запрос.УстановитьПараметр(ПараметрЗапроса.Имя, ПараметрЗапроса.Значение);
	//КонецЦикла;
	//
	//Результат = Запрос.Выполнить().Выгрузить();
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат Результат.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция СформироватьТекстСообщения(Знач МенеджерЗаписи, Знач ТаблицаНайденныхСтрок)
	
	// Структура результата:
	//	- Заголовок - Строка - общий шаблон для рокета и почты
	//	- НайденныеВхождения - Массив
	//		- Структура - СообщениеПользователю - из реквизита справочника
	//					- Вхождения - Массив - найденные различные вхождения по одной фразе
	//	- Подвал - Строка
	
	Результат = Новый Структура("Заголовок, НайденныеВхождения, Подвал", "", Новый Массив, "");
	
	Если МенеджерЗаписи.ВидТекста = Перечисления.ВидыТекстовСемантическогоАнализа.Описание Тогда
		ОбластьПоиска = "описания";
	Иначе
		ОбластьПоиска = "темы";
	КонецЕсли;
	
	ШаблонЗаголовка = "Автоматический анализ <strong>%1</strong> выявил наличие стоп-слов, которые должны быть исключены. Обратите внимание в исходном тексте на слова, выделенные жирным.";
	//ШаблонЗаголовка = "В результате проведения анализа %1 %%1обнаружены подозрительные формулировки, которые могут привести к неправильной трактовке, либо вызвать дополнительные уточнения со стороны руководства.";
	
	Результат.Заголовок = СтрШаблон(ШаблонЗаголовка, ОбластьПоиска);
	//Результат.Подвал = "Обратите внимание на указанные фрагменты и при необходимости исправьте их.";
		
	СвернутаяТаблицаНайденныхСтрок = ТаблицаНайденныхСтрок.Скопировать();
	СвернутаяТаблицаНайденныхСтрок.Свернуть("ТекстСОшибкой, Фраза");
	
	ТаблицаНайденныхСтрок.Свернуть("Фраза, СообщениеПользователю");
	
	ОтборСтрок = Новый Структура("Фраза");
	
	Для Каждого НайденнаяСтрока Из ТаблицаНайденныхСтрок Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборСтрок, НайденнаяСтрока);
		
		ТаблицаНайденныхСтрокСОшибками = СвернутаяТаблицаНайденныхСтрок.Скопировать(ОтборСтрок, "ТекстСОшибкой");
		ТаблицаНайденныхСтрокСОшибками.Свернуть("ТекстСОшибкой");
		
		Вхождения = Новый Массив;
		Для Каждого Строка Из ТаблицаНайденныхСтрокСОшибками Цикл
			ТекстСОшибкой = СтрЗаменитьПоРегулярномуВыражению(Строка.ТекстСОшибкой, "<div.*?>|</div>", "", Истина, Истина);
			ТекстСОшибкой = СокрЛП(ТекстСОшибкой);
			
			Вхождения.Добавить(ТекстСОшибкой);
		КонецЦикла;
		
		СтруктураНайденногоВхождения = Новый Структура;
		СтруктураНайденногоВхождения.Вставить("Фраза", Строка(НайденнаяСтрока.Фраза));
		СтруктураНайденногоВхождения.Вставить("СообщениеПользователю", НайденнаяСтрока.СообщениеПользователю);
		СтруктураНайденногоВхождения.Вставить("Вхождения", Вхождения);
		
		Результат.НайденныеВхождения.Добавить(СтруктураНайденногоВхождения);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
