///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс 

// Выполняет проверку файлов на допустимое расширение имени файла и размер файла
// Добавленные изображения в описание документа - markdown
//
// Параметры:
//  ОписанияФайлов - Массив - массив структур с описанием свойств файлов.
//
// Возвращаемое значение:
//  Массив - МассивОшибок с описанием предупреждений, если такие возникли в процессе.
//
Функция ОбработатьПомещенныеФайлы(ОписанияФайлов) Экспорт
	
	МассивОшибок = Новый Массив;
	
	НастройкиРаботыСФайлами = ПовторноеИспользованиеВызовСервера.ПолучитьНастройкиРаботыСФайлами();
	МассивРасширений = СтрРазделить(НРег(НастройкиРаботыСФайлами.СписокЗапрещенныхРасширений), " ", Ложь);
	
	КоличествоЗаписей = ОписанияФайлов.Количество();
	Для Н = 1 По КоличествоЗаписей Цикл
		СвойстваФайла = ОписанияФайлов[КоличествоЗаписей - Н];
		
		// Проверим настройку запрета загрузки файлов по расширению и само 
		// расширение файла в спике запрещенных к загрузке.
		Если НастройкиРаботыСФайлами.ЗапретЗагрузкиФайловПоРасширению Тогда
			
			Если МассивРасширений.Найти(НРег(СвойстваФайла.Расширение)) <> Неопределено Тогда
				ОписаниеОшибки = СтрШаблон("Загрузка файлов с расширением ""%1"" запрещена. Обратитесь к администратору.",
					СвойстваФайла.Расширение);
				
				МассивОшибок.Добавить(Новый Структура("ИмяФайла, Ошибка", СвойстваФайла.ПолноеИмя, ОписаниеОшибки));
				
				УдалитьИзВременногоХранилища(СвойстваФайла.АдресВХранилище);
				ОписанияФайлов.Удалить(КоличествоЗаписей - Н);
				
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверим размер файла
		ЧтениеДанных = Новый ЧтениеДанных(ПолучитьИзВременногоХранилища(СвойстваФайла.АдресВХранилище));
		РезультатЧтения = ЧтениеДанных.Прочитать();
		ЧтениеДанных.Закрыть();
		
		БайтВМегабайте = 1048576; // Количество байт в мегабайте (1024 * 1024)
		
		РазмерСтрокой = РаботаСФайламиКлиентСервер.РазмерФайлаСтрокой(РезультатЧтения.Размер);
		Если РезультатЧтения.Размер > НастройкиРаботыСФайлами.МаксимальныйРазмерФайла Тогда
			РазмерМаксимальный = НастройкиРаботыСФайлами.МаксимальныйРазмерФайла / БайтВМегабайте;
			
			ОписаниеОшибки = СтрШаблон(
				"Размер файла ""%1"" (%2) превышает допустимый размер файла (%3 Мбайт). Обратитесь к администратору.",
				СвойстваФайла.Имя, РазмерСтрокой, РазмерМаксимальный);
				
			МассивОшибок.Добавить(Новый Структура("ИмяФайла, Ошибка", СвойстваФайла.ПолноеИмя, ОписаниеОшибки));
			
			УдалитьИзВременногоХранилища(СвойстваФайла.АдресВХранилище);
			ОписанияФайлов.Удалить(КоличествоЗаписей - Н);
			
			Продолжить;
		Иначе
			СвойстваФайла.Размер = РезультатЧтения.Размер;
			СвойстваФайла.РазмерСтрокой = РазмерСтрокой;
		КонецЕсли;		
		
	КонецЦикла;
	
	Возврат МассивОшибок;
	
КонецФункции

// Подготавливает запрашиваемые клиентом файлы, при необходимости упаковывает
//  их в архив и помещает во временное хранилище формы.
//
// Параметры:
//  ИдентификаторФормы			 - УникальныйИдентификатор	 - уникальный идентификатор формы.
//  Архивировать				 - Булево					 - признак необходимости помещения запрашиваемых файлов в один архив.
//  Файлы						 - Неопределено, Массив		 - массив запрашиваемых файлов. 
//															   Если нужно получить все файлы объекта, то указывается Неопределено.
//  Объект						 - ЛюбаяСсылка				 - объект-владелец файлов.
// 
// Возвращаемое значение:
//  Массив - элементов типа ОписаниеПередаваемогоФайла.
//
Функция ПодготовитьФайлыДляКлиента(Знач ИдентификаторФормы, Знач Архивировать, 
			Знач Файлы = Неопределено, Знач Объект = Неопределено, Знач ЗагрузкаИзображенийОписания = Ложь) Экспорт
	
	ПодготовленныеФайлы = Новый Массив;
	НесуществующиеФайлы = Новый Массив;
	
	СохранятьНаСервер = ИнтеграцияДополнительныхПодсистем.ОпределитьМестоХраненияФайлов();
	КаталогХранения = ПовторноеИспользованиеВызовСервера.КаталогХраненияФайловНаСервере();
	
	Запрос = Новый Запрос;
	
	Если (Файлы = Неопределено) ИЛИ (Архивировать = Истина) Тогда
		Запрос.Текст =  		
		"ВЫБРАТЬ
		|	СвязьОбъектовСЗаявкамиНаРазработку.Заявка КАК Объект,
		|	ПрикрепленныеФайлы.Файл КАК Файл
		|ПОМЕСТИТЬ ФайлыДляЗаявки
		|ИЗ
		|	РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку КАК СвязьОбъектовСЗаявкамиНаРазработку
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
		|		ПО СвязьОбъектовСЗаявкамиНаРазработку.Заявка = ПрикрепленныеФайлы.Объект
		|			И (ПрикрепленныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.Объект))
		|ГДЕ
		|	СвязьОбъектовСЗаявкамиНаРазработку.Объект = &Объект
		|	И &СкачатьВсеФайлы = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СвязьОбъектовСЗаявкамиНаРазработку.Заявка,
		|	ПрикрепленныеФайлы.Файл
		|ИЗ
		|	РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку КАК СвязьОбъектовСЗаявкамиНаРазработку
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Комментарии КАК Комментарии
		|		ПО СвязьОбъектовСЗаявкамиНаРазработку.Заявка = Комментарии.Объект
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
		|		ПО (Комментарии.Идентификатор = ПрикрепленныеФайлы.Объект)
		|			И (ПрикрепленныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.ФайлыКомментария))
		|ГДЕ
		|	СвязьОбъектовСЗаявкамиНаРазработку.Объект = &Объект
		|	И &СкачатьВсеФайлы = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПрикрепленныеФайлы.Объект,
		|	ПрикрепленныеФайлы.Файл
		|ИЗ
		|	РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
		|ГДЕ
		|	ПрикрепленныеФайлы.Объект = &Объект
		|	И ПрикрепленныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.Объект)
		|	И &СкачатьВсеФайлы = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Комментарии.Объект,
		|	ПрикрепленныеФайлы.Файл
		|ИЗ
		|	РегистрСведений.Комментарии КАК Комментарии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
		|		ПО Комментарии.Идентификатор = ПрикрепленныеФайлы.Объект
		|			И (ПрикрепленныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.ФайлыКомментария))
		|ГДЕ
		|	Комментарии.Объект = &Объект
		|	И &СкачатьВсеФайлы = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Файлы.Наименование КАК ИмяФайлаНаСервере,
		|	Файлы.ОригинальноеИмя КАК ИмяФайлаНаКлиенте,
		|	Файлы.Каталог КАК КаталогХраненияФайла,
		|	Файлы.ПолучатьИзMinio КАК ПолучатьИзMinio,
		|	Файлы.ДатаСоздания КАК ДатаСоздания
		|ИЗ
		|	ФайлыДляЗаявки КАК ФайлыДляЗаявки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО ФайлыДляЗаявки.Файл = Файлы.Ссылка
		|ГДЕ
		|	НЕ Файлы.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Файлы.Наименование,
		|	Файлы.ОригинальноеИмя,
		|	Файлы.Каталог,
		|	Файлы.ПолучатьИзMinio,
		|	Файлы.ДатаСоздания
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.Ссылка В(&Файлы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСоздания УБЫВ";
		
		Запрос.УстановитьПараметр("Файлы", Файлы);		
		Запрос.УстановитьПараметр("Объект", Объект);
		Запрос.УстановитьПараметр("СкачатьВсеФайлы", ?(Файлы = Неопределено, Истина, Ложь));
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
									
			ИмяВременногоФайла = СтрЗаменить(ПолучитьИмяВременногоФайла("sdms.path"), ".sdms.path", ""); 
			ВременныйКаталог = РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(ИмяВременногоФайла);
			СоздатьКаталог(ВременныйКаталог);
			
			// Получение номера объекта для имени архива
			ТипОбъекта = ТипЗнч(Объект);
			
			Если ТипОбъекта = Тип("Неопределено") Тогда
				ПорядковыйНомер = "images";
			ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
				ПорядковыйНомер = Объект.Код;
			ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипОбъекта) Тогда
				ПорядковыйНомер = Объект.Номер;
			Иначе
				ПорядковыйНомер = "unnumbered";
			КонецЕсли;
			
			ИмяФайла       = "attachments_" + ПорядковыйНомер + ".zip";
			ПолноеИмяФайла = ВременныйКаталог + ИмяФайла;
			
			ЗаписьАрхива = Новый ЗаписьZipФайла(ПолноеИмяФайла);
			СписокФайлов = Новый Массив;
			СоответствиеФайлХэш = Новый Соответствие;
			
			ТаблицаПодготовленныеФайлы = Новый ТаблицаЗначений;
			ТаблицаПодготовленныеФайлы.Колонки.Добавить("ИмяФайлаИсточника", Новый ОписаниеТипов("Строка"));
			ТаблицаПодготовленныеФайлы.Колонки.Добавить("ИмяФайлаПриемника", Новый ОписаниеТипов("Строка"));
			
			Выборка = РезультатЗапроса.Выбрать();
				
			Пока Выборка.Следующий() Цикл
				ИмяФайлаПриемника = ВременныйКаталог + Выборка.ИмяФайлаНаКлиенте;

				// TO DO: заменить реквизит ПолучатьИзMinio на значение 
				// СохранятьНаСервер = ИнтеграцияДополнительныхПодсистем.ОпределитьМестоХраненияФайлов();
				// после полного перехода на минио, когда файлы не нужно будет получать из разных источников
				Если НЕ Выборка.ПолучатьИзMinio Тогда
					ИмяФайлаИсточника = КаталогХранения + РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(Выборка.КаталогХраненияФайла)
						+ Выборка.ИмяФайлаНаСервере;
										
					Файл = Новый Файл(ИмяФайлаИсточника);
					Если НЕ Файл.Существует() Тогда
						НесуществующиеФайлы.Добавить(Выборка.ИмяФайлаНаКлиенте);
						Продолжить;
					КонецЕсли;
				
					ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
					ХешированиеДанных.ДобавитьФайл(ИмяФайлаИсточника);
					ХешированиеДанных.Добавить(Выборка.ИмяФайлаНаКлиенте);
					ХешСтрока = СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");			
					
					// Помещаем в таблицу файлы с разными хешами
					НайденныйФайл = СоответствиеФайлХэш.Получить(ХешСтрока);
					Если НайденныйФайл = Неопределено Тогда
						СоответствиеФайлХэш.Вставить(ХешСтрока, ИмяФайлаИсточника);
						
						СтрокаФайл = ТаблицаПодготовленныеФайлы.Добавить();
						СтрокаФайл.ИмяФайлаИсточника = ИмяФайлаИсточника;
						СтрокаФайл.ИмяФайлаПриемника = ИмяФайлаПриемника;
					КонецЕсли;
				Иначе
					ФайлДвоичныеДанные = ИнтеграцияДополнительныхПодсистем.ПолучитьФайл(Выборка.ИмяФайлаНаСервере);
					Если ФайлДвоичныеДанные = Неопределено Тогда
						НесуществующиеФайлы.Добавить(Выборка.ИмяФайлаНаКлиенте);
						Продолжить;
					КонецЕсли;
					ФайлДвоичныеДанные.Записать(ИмяФайлаПриемника);
					ЗаписьАрхива.Добавить(ИмяФайлаПриемника);
				КонецЕсли;
			КонецЦикла;
						
			Для Каждого Строка Из ТаблицаПодготовленныеФайлы Цикл				
				
				ИмяФайлаПриемника = Строка.ИмяФайлаПриемника;				
				РезультатПоиска = СписокФайлов.Найти(Строка.ИмяФайлаПриемника);
				Индекс = 0;
				Если РезультатПоиска = Неопределено Тогда
					СписокФайлов.Добавить(Строка.ИмяФайлаПриемника);
				Иначе
					Имя = РаботаСФайламиКлиентСервер.ИмяФайлаБезРасширения(Строка.ИмяФайлаПриемника);
					Расширение = РаботаСФайламиКлиентСервер.РасширениеИмениФайла(Строка.ИмяФайлаПриемника);
					Пока Истина Цикл
						Индекс = Индекс + 1;   
						ПроверяемоеИмя = Имя + " (" + Индекс + ")" + Расширение;
						Если СписокФайлов.Найти(ПроверяемоеИмя) = Неопределено Тогда
							ИмяФайлаПриемника = ПроверяемоеИмя;
							СписокФайлов.Добавить(ИмяФайлаПриемника);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
								
				КопироватьФайл(Строка.ИмяФайлаИсточника, ИмяФайлаПриемника);
				ЗаписьАрхива.Добавить(ИмяФайлаПриемника);
			КонецЦикла;
			
			ЗаписьАрхива.Записать();
				
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяФайла), ИдентификаторФормы);
			ПодготовленныеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла, АдресВоВременномХранилище));
			
			УдалитьФайлы(ВременныйКаталог);
		КонецЕсли;
		
	ИначеЕсли ЗагрузкаИзображенийОписания Тогда
		Для Каждого Изображение Из Файлы Цикл
			Если НЕ ЭтоАдресВременногоХранилища(Изображение.АдресВХранилище) Тогда
				КаталогФайловНаСервере = ПовторноеИспользованиеВызовСервера.КаталогХраненияФайловНаСервере();
				ИмяФайла = КаталогФайловНаСервере + ОбщегоНазначенияКлиентСервер.ДобавитьСлэш(Изображение.Каталог, Истина) + Изображение.УникальноеИмяФайла;  			
				Файл = Новый Файл(ИмяФайла);
				Если НЕ Файл.Существует() Тогда
					НесуществующиеФайлы.Добавить(ИмяФайла);
					Продолжить;
				КонецЕсли;	
				АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла), ИдентификаторФормы);	
			Иначе
				АдресВоВременномХранилище = Изображение.АдресВХранилище; 
			КонецЕсли;
			
			ПодготовленныеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(Изображение.КороткоеИмяФайла, АдресВоВременномХранилище));
		КонецЦикла;
		
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.Наименование КАК ИмяФайлаНаСервере,
		|	Файлы.ОригинальноеИмя КАК ИмяФайлаНаКлиенте,
		|	Файлы.ПолучатьИзMinio КАК ПолучатьИзMinio,
		|	Файлы.Каталог КАК КаталогНаСервере
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.Ссылка В (&Файлы)";
		
		Запрос.УстановитьПараметр("Файлы", Файлы);
				
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// TO DO: заменить реквизит ПолучатьИзMinio на значение СохранятьНаСервер
			// после полного перехода на минио, когда файлы не нужно будет получать из разных источников
			Если НЕ Выборка.ПолучатьИзMinio Тогда
				ИмяФайла = КаталогХранения + РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(Выборка.КаталогНаСервере) 
					+ Выборка.ИмяФайлаНаСервере;
				Файл = Новый Файл(ИмяФайла);
				Если НЕ Файл.Существует() Тогда
					НесуществующиеФайлы.Добавить(Выборка.ИмяФайлаНаКлиенте);
					Продолжить;
				КонецЕсли;	
				ФайлДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
			Иначе
				ФайлДвоичныеДанные = ИнтеграцияДополнительныхПодсистем.ПолучитьФайл(Выборка.ИмяФайлаНаСервере);
				Если ФайлДвоичныеДанные = Неопределено Тогда
					НесуществующиеФайлы.Добавить(Выборка.ИмяФайлаНаКлиенте);
				КонецЕсли;	
			КонецЕсли;
			
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлДвоичныеДанные, ИдентификаторФормы);
			ПодготовленныеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(Выборка.ИмяФайлаНаКлиенте, АдресВоВременномХранилище));
		КонецЦикла;
	КонецЕсли;
	
	Возврат Новый Структура("ПодготовленныеФайлы, НенайденныеФайлы", ПодготовленныеФайлы, НесуществующиеФайлы);
	
КонецФункции

#КонецОбласти
