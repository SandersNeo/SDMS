///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Получает параметры соединения для Конвертера описаний из безопасного хранилища данных.
//
// Возвращаемое значение:
//   Структура, Неопределено - параметры соединения, либо Неопределено, если параметры не найдены
//
Функция КонвертерПолучитьПараметрыСоединения() Экспорт

	Назначение = Перечисления.НазначенияДанныхБезопасногоХранилища.НастройкиПодключенияКонвертераОписаний;

	УстановитьПривилегированныйРежим(Истина);
	Параметры = РегистрыСведений.БезопасноеХранилищеДанных.ПолучитьДанные(Назначение);
	УстановитьПривилегированныйРежим(Ложь);

	Если Параметры <> Неопределено Тогда
		Если Параметры.ЗащищенноеСоединение Тогда
			ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
		Иначе
			ЗащищенноеСоединение = Неопределено;
		КонецЕсли;

		Соединение = Новый HTTPСоединение(Параметры.Сервер, Параметры.Порт, , , , Параметры.Таймаут, ЗащищенноеСоединение);
		Параметры.Вставить("HTTPСоединение", Соединение);
	КонецЕсли;

	Возврат Параметры;

КонецФункции

// Конвертирует текст в разные варианты форматов.
//
// Параметры:
//  ОписаниеОбъекта	 - Строка - текст описания
//  ТипКонвертации	 - Число - 0(Markdown-HTML), 1(HTML-Markdown), 2(Очистка HTML от тегов) 
//  Параметры		 - Структура - Параметры подключения. Есть смысл передавать если происходит несколько конвертаций подряд.
// 
// Возвращаемое значение:
//  Структура - результат конвертации:
//    * Успешно			 - Булево - признак успешности выполнения.
//    * ОписаниеОбъекта	 - Строка - конвертированный текст, либо исходный при неудаче.
Функция КонвертироватьТекст(Знач ОписаниеОбъекта, Знач ТипКонвертации = 0, Знач Параметры = Неопределено) Экспорт

	Результат = Новый Структура("Успешно, ОписаниеОбъекта", Ложь, ОписаниеОбъекта);

	Если ЗначениеЗаполнено(ОписаниеОбъекта) Тогда
		КодУспешногоОтвета = 200;

		Если Параметры = Неопределено Тогда
			Параметры = КонвертерПолучитьПараметрыСоединения();
		КонецЕсли;

		Если Параметры = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;

		HTTPСоединение = Параметры.HTTPСоединение;

		Если ТипКонвертации = 0 Тогда
			АдресРесурса = Параметры.АдресРесурсаПолучитьHTML;
		ИначеЕсли ТипКонвертации = 1 Тогда
			АдресРесурса = Параметры.АдресРесурсаПолучитьMarkdown;
		ИначеЕсли ТипКонвертации = 3 Тогда
			АдресРесурса = Параметры.АдресРесурсаПолучитьHTMLИзJira;
		ИначеЕсли ТипКонвертации = 4 Тогда
			АдресРесурса = Параметры.АдресРесурсаПолучитьJiraИзHTML;
		Иначе
			АдресРесурса = Параметры.АдресРесурсаПолучитьJiraИзMarkdown;
		КонецЕсли;

		Если ЗначениеЗаполнено(АдресРесурса) Тогда
			HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
			HTTPЗапрос.Заголовки.Вставить("Content-Type", "text/plain");
			HTTPЗапрос.УстановитьТелоИзСтроки(ОписаниеОбъекта);

			Попытка
				HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);

				Если HTTPОтвет.КодСостояния = КодУспешногоОтвета Тогда
					Результат.ОписаниеОбъекта = HTTPОтвет.ПолучитьТелоКакСтроку();
					Результат.Успешно = Истина;
				Иначе
					ВызватьИсключение СтрШаблон("Код состояния: %1", HTTPОтвет.КодСостояния);
				КонецЕсли;
			Исключение
				ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

				ТекстОшибки = СтрШаблон(
				"Адрес ресурса: %1
				|
				|ОписаниеОбъекта: %2
				|
				|ОписаниеОшибки: %3", АдресРесурса, ОписаниеОбъекта, ОписаниеОшибки);

				ЗаписьЖурналаРегистрации("Конвертация описания.Ошибка", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
			КонецПопытки;
		КонецЕсли;
	Иначе
		Результат.ОписаниеОбъекта = "";
		Результат.Успешно = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Очищает текст HTML от тегов.
//
// Параметры:
//   ТекстHTML - Строка - Текст в HTML формате, который необходимо очистить
//
// Возвращаемое значение:
//   Строка - Очищенный текст
//
Функция ОчиститьHTMLОтТегов(Знач ТекстHTML) Экспорт
	
	Если ТекстHTML = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстHTML);

	ПостроительDOM = Новый ПостроительDOM;
	ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
	ЧтениеHTML.Закрыть();

	ОчищенныйТекст = ОбработатьУзлы(ДокументHTML.ДочерниеУзлы);

	Возврат ОчищенныйТекст;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьОтступы(БлокиДокумента, ДополнительныйОтступ)
	
	// Если после предыдущего элемента уже добавлен дополнительный отступ, нет смысла добавлять его перед текущим
	Если Не ДополнительныйОтступ Тогда
		БлокиДокумента.Добавить(Символы.ПС);
		ДополнительныйОтступ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьСмещение(Смещения, База, Пролет, Значение)

	БазаПролет = База + Пролет;
	ПолучитьСмещение(Смещения, БазаПролет);
	Смещения[БазаПролет] = Макс(ПолучитьСмещение(Смещения, БазаПролет), ПолучитьСмещение(Смещения, База) + Значение);

КонецПроцедуры

Функция ОбработатьСписок(Узлы, Уровень, Нумерованный = Ложь)

	ДанныеЭлементовСписка = Новый Массив;

	ДлинаНумератора = ?(Нумерованный, СтрДлина(Формат(Узлы.Количество(), "ЧГ=0")) + 2, 3);
	ОписаниеСтроки = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаНумератора, ДопустимаяДлина.Фиксированная));

	Для Каждого Узел Из Узлы Цикл
		ТекстЭлемента = ОбработатьУзлы(Узел.ДочерниеУзлы, Уровень + 1);
		СтрокиТекста = Новый Массив;

		Для Каждого Подстрока Из СтрРазделить(ТекстЭлемента, Символы.ПС) Цикл
			Если ЗначениеЗаполнено(Подстрока) Тогда
				Если СтрокиТекста.Количество() = 0 Тогда
					Если Нумерованный Тогда
						Нумератор = Формат(ДанныеЭлементовСписка.Количество() + 1, "ЧГ=0; ЧФ='Ч.'");
						Нумератор = ОписаниеСтроки.ПривестиЗначение(Нумератор);
					Иначе
						Нумератор = "*  ";
					КонецЕсли;
				Иначе
					Нумератор = ОписаниеСтроки.ПривестиЗначение("");
				КонецЕсли;

				СтрокиТекста.Добавить(Нумератор + Подстрока);
			КонецЕсли;
		КонецЦикла;

		ДанныеЭлемента = СтрСоединить(СтрокиТекста, Символы.ПС);
		ДанныеЭлементовСписка.Добавить(ДанныеЭлемента);
	КонецЦикла;

	Если Уровень > 0 Тогда
		ДанныеЭлементовСписка.Вставить(0, "");
	КонецЕсли;

	Возврат СтрСоединить(ДанныеЭлементовСписка, Символы.ПС);

КонецФункции

Процедура ОбработатьСтрокиТаблицы(СтрокиТаблицы, Узлы)

	Для Каждого Узел Из Узлы Цикл
		ИмяТега = НРег(Узел.ИмяУзла);

		Если ИмяТега = "tr" Тогда
			Ячейки = Новый Массив;

			Для Каждого УзелЯчейка Из Узел.ДочерниеУзлы Цикл
				ИмяДочернегоТега = НРег(УзелЯчейка.ИмяУзла);

				Если ИмяДочернегоТега = "td" Или ИмяДочернегоТега = "th" Тогда
					Колонок = УзелЯчейка.ПолучитьАтрибут("colspan");
					Колонок = ?(ЗначениеЗаполнено(Колонок), Число(Колонок), 1);

					Строк = УзелЯчейка.ПолучитьАтрибут("rowspan");
					Строк = ?(ЗначениеЗаполнено(Строк), Число(Строк), 1);

					ТекстЯчейки = ОбработатьУзлы(УзелЯчейка.ДочерниеУзлы);
					СтрокиЯчейки = СтрРазделить(ТекстЯчейки, Символы.ПС);

					ДанныеЯчейки = Новый Структура("СтрокиЯчейки, Строк, Колонок", СтрокиЯчейки, Строк, Колонок);
					Ячейки.Добавить(ДанныеЯчейки);
				КонецЕсли;
			КонецЦикла;

			СтрокиТаблицы.Добавить(Ячейки);
		Иначе
			ОбработатьСтрокиТаблицы(СтрокиТаблицы, Узел.ДочерниеУзлы);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ОбработатьУзлы(УзлыДокумента, Уровень = 0)

	БлокиДокумента = Новый Массив;
	ДополнительныйОтступ = Истина;

	Для Каждого Узел Из УзлыДокумента Цикл
		ДанныеУзла = "";
		БлочныйЭлемент = Истина;

		Если Узел.ТипУзла = ТипУзлаDOM.Элемент Тогда
			ИмяТега = НРег(Узел.ИмяУзла);

			Если ИмяТега = "p" Тогда
				ДанныеУзла = ОбработатьУзлы(Узел.ДочерниеУзлы, Уровень);

				Если ДанныеУзла = Символы.НПП Или ДанныеУзла = " " Тогда
					ДанныеУзла = Неопределено;
				Иначе
					ДополнительныйОтступ = Ложь;
				КонецЕсли;

			ИначеЕсли ИмяТега = "h1" Или ИмяТега = "h2" Или ИмяТега = "h3" Или ИмяТега = "h4" Тогда
				ДанныеУзла = Узел.ТекстовоеСодержимое;
				ДополнительныйОтступ = Ложь;

			ИначеЕсли ИмяТега = "ul" Тогда
				ДанныеУзла = ОбработатьСписок(Узел.ДочерниеУзлы, Уровень);
				ДобавитьОтступы(БлокиДокумента, ДополнительныйОтступ);

			ИначеЕсли ИмяТега = "ol" Тогда
				ДанныеУзла = ОбработатьСписок(Узел.ДочерниеУзлы, Уровень, Истина);
				ДобавитьОтступы(БлокиДокумента, ДополнительныйОтступ);

			ИначеЕсли ИмяТега = "hr" Тогда
				ДанныеУзла = "------------------------------";
				ДобавитьОтступы(БлокиДокумента, ДополнительныйОтступ);

			ИначеЕсли ИмяТега = "code" Тогда
				ДанныеБлокаКода = СтрРазделить(Узел.ТекстовоеСодержимое, Символы.ПС);
				ДанныеУзла = "| " + СтрСоединить(ДанныеБлокаКода, Символы.ПС + "| ");
				ДополнительныйОтступ = Ложь;

			ИначеЕсли ИмяТега = "blockquote" Тогда
				СтрокиЦитаты = Новый Массив;

				Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
					ДанныеБлокаЦитаты = ОбработатьУзлы(ДочернийУзел.ДочерниеУзлы);
					СтрокиЦитаты.Добавить(ДанныеБлокаЦитаты);
				КонецЦикла;

				ДанныеУзла = "> " + СтрСоединить(СтрокиЦитаты, Символы.ПС + "> ");
				ДополнительныйОтступ = Ложь;

			ИначеЕсли ИмяТега = "figure" Или ИмяТега = "pre" Тогда
				ДанныеУзла = ОбработатьУзлы(Узел.ДочерниеУзлы);
				ДобавитьОтступы(БлокиДокумента, ДополнительныйОтступ);

			ИначеЕсли ИмяТега = "img" Тогда
				Ссылка = Узел.ПолучитьАтрибут("src");

				Если ЗначениеЗаполнено(Ссылка) Тогда
					ДанныеУзла = СтрШаблон("[Изображение: %1]", Ссылка);
					ДополнительныйОтступ = Ложь;
				Иначе
					ДанныеУзла = Неопределено;
				КонецЕсли;

				БлочныйЭлемент = Ложь;

			ИначеЕсли ИмяТега = "a" Тогда
				Ссылка = Узел.ПолучитьАтрибут("href");

				Если ЗначениеЗаполнено(Ссылка) Тогда
					ДанныеУзла = СтрШаблон("%1 [%2]", Узел.ТекстовоеСодержимое, Ссылка);
					ДополнительныйОтступ = Ложь;
				Иначе
					ДанныеУзла = Неопределено;
				КонецЕсли;

				БлочныйЭлемент = Ложь;

			ИначеЕсли ИмяТега = "table" Тогда
				СтрокиТаблицы = Новый Массив;
				ОбработатьСтрокиТаблицы(СтрокиТаблицы, Узел.ДочерниеУзлы);
				ДанныеУзла = ТаблицаВСтроку(СтрокиТаблицы, 3);
				БлочныйЭлемент = Ложь;

			ИначеЕсли ИмяТега = "br" Тогда
				ДанныеУзла = Символы.ПС;
				БлочныйЭлемент = Ложь;
				ДополнительныйОтступ = Ложь;

			Иначе
				ДанныеУзла = ОбработатьУзлы(Узел.ДочерниеУзлы, Уровень);
				БлочныйЭлемент = Ложь;
				ДополнительныйОтступ = Ложь;
			КонецЕсли;

		ИначеЕсли Узел.ТипУзла = ТипУзлаDOM.Текст Тогда
			ДанныеУзла = Узел.ТекстовоеСодержимое;
			БлочныйЭлемент = Ложь;
			ДополнительныйОтступ = Ложь;
		Иначе
			ДанныеУзла = Неопределено;
			БлочныйЭлемент = Ложь;
			ДополнительныйОтступ = Ложь;
		КонецЕсли;

		Если ДанныеУзла <> Неопределено Тогда
			БлокиДокумента.Добавить(ДанныеУзла);

			Если БлочныйЭлемент Тогда
				БлокиДокумента.Добавить(Символы.ПС);
			КонецЕсли;

			Если ДополнительныйОтступ Тогда
				БлокиДокумента.Добавить(Символы.ПС);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Пока БлокиДокумента.ВГраница() >= 0 И БлокиДокумента.Получить(БлокиДокумента.ВГраница()) = Символы.ПС Цикл
		БлокиДокумента.Удалить(БлокиДокумента.ВГраница());
	КонецЦикла;

	Возврат СтрСоединить(БлокиДокумента);

КонецФункции

Функция ПолучитьСмещение(Смещения, Индекс)

	КоличествоСмещений = Смещения.Количество();

	Пока КоличествоСмещений <= Индекс Цикл
		Смещения.Добавить(?(КоличествоСмещений = 0, 0, 1 + Смещения[КоличествоСмещений - 1]));
		КоличествоСмещений = Смещения.Количество();
	КонецЦикла;

	Возврат Смещения[Индекс];

КонецФункции

Функция ПолучитьСтрокуТаблицы(Таблица, Индекс)

	Если Таблица.Количество() <= Индекс Тогда
		Для Счетчик = Таблица.Количество() По Индекс Цикл
			Таблица.Добавить(Новый Массив);
		КонецЦикла;
	КонецЕсли;

	Возврат Таблица[Индекс];

КонецФункции

Функция ТаблицаВСтроку(ТаблицаСтрок, ИнтервалСтолбцов)

	ПодготовленнаяТаблица = Новый Массив;

	СмещенияСтрок = Новый Массив;
	СмещенияСтрок.Добавить(0);

	Для НомерСтроки = 0 По ТаблицаСтрок.ВГраница() Цикл
		СтрокаТаблицы = ПолучитьСтрокуТаблицы(ПодготовленнаяТаблица, НомерСтроки);
		Ячейки = ТаблицаСтрок[НомерСтроки];
		ИндексКолонки = 0;

		Для НомерЯчейки = 0 По Ячейки.ВГраница() Цикл
			Ячейка = Ячейки[НомерЯчейки];

			Пока СтрокаТаблицы.Количество() > ИндексКолонки И СтрокаТаблицы[ИндексКолонки] <> Неопределено Цикл
				ИндексКолонки = ИндексКолонки + 1;
			КонецЦикла;

			Для ВысотаЯчейки = 0 По Ячейка.Строк - 1 Цикл
				НоваяСтрока = ПолучитьСтрокуТаблицы(ПодготовленнаяТаблица, НомерСтроки + ВысотаЯчейки);

				Для ШиринаЯчейки = 0 По Ячейка.Колонок - 1 Цикл
					НомерКолонки = ИндексКолонки + ШиринаЯчейки;

					Пока НоваяСтрока.Количество() <= НомерКолонки Цикл
						НоваяСтрока.Добавить(Неопределено);
					КонецЦикла;

					НоваяСтрока[НомерКолонки] = Ячейка;
				КонецЦикла;
			КонецЦикла;

			ИндексКолонки = ИндексКолонки + Ячейка.Колонок;
			ОбновитьСмещение(СмещенияСтрок, НомерСтроки, Ячейка.Строк, Ячейка.СтрокиЯчейки.Количество());
		КонецЦикла;
	КонецЦикла;

	ПодготовленнаяТаблица = ТранспонироватьТаблицу(ПодготовленнаяТаблица);

	ВыходныеСтроки = Новый Массив;
	СмещенияСтолбцов = Новый Массив;

	Для ИндексКолонки = 0 По ПодготовленнаяТаблица.ВГраница() Цикл
		ИндексСтроки = 0;
		КолонкаТаблицы = ПодготовленнаяТаблица[ИндексКолонки];

		Пока ИндексСтроки < КолонкаТаблицы.Количество() Цикл
			Ячейка = КолонкаТаблицы[ИндексСтроки];

			Если Ячейка <> Неопределено Тогда
				Если Не Ячейка.Свойство("Выведена") Тогда
					ШиринаЯчейки = 0;

					НужнаяДлина = ПолучитьСмещение(СмещенияСтолбцов, ИндексКолонки);
					ОписаниеСтроки = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(НужнаяДлина, ДопустимаяДлина.Фиксированная));

					Для НомерСтроки = 0 По Ячейка.СтрокиЯчейки.ВГраница() Цикл
						Строка = Ячейка.СтрокиЯчейки[НомерСтроки];
						СмещениеСтроки = ПолучитьСмещение(СмещенияСтрок, ИндексСтроки) + НомерСтроки;

						Пока ВыходныеСтроки.Количество() <= СмещениеСтроки Цикл
							ВыходныеСтроки.Добавить("");
						КонецЦикла;

						ВыходныеСтроки[СмещениеСтроки] = ОписаниеСтроки.ПривестиЗначение(ВыходныеСтроки[СмещениеСтроки]) + Строка;

						ДлинаСтроки = СтрДлина(Строка);
						ШиринаЯчейки = ?(ДлинаСтроки > ШиринаЯчейки, ДлинаСтроки, ШиринаЯчейки);
					КонецЦикла;

					ОбновитьСмещение(СмещенияСтолбцов, ИндексКолонки, Ячейка.Колонок, ШиринаЯчейки + ИнтервалСтолбцов);
					Ячейка.Вставить("Выведена", Истина);
				КонецЕсли;

				ИндексСтроки = ИндексСтроки + Ячейка.Строк;
			Иначе
				СмещениеСтроки = ПолучитьСмещение(СмещенияСтрок, ИндексСтроки);

				Если ВыходныеСтроки.Количество() <= СмещениеСтроки Тогда
					ВыходныеСтроки.Добавить("");
				КонецЕсли;

				ИндексСтроки = ИндексСтроки + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат СтрСоединить(ВыходныеСтроки, Символы.ПС);

КонецФункции

Функция ТранспонироватьТаблицу(Таблица)

	НоваяТаблица = Новый Массив;

	Для НомерСтроки = 0 По Таблица.ВГраница() Цикл
		Строка = Таблица[НомерСтроки];

		Для НомерКолонки = 0 По Строка.ВГраница() Цикл
			Колонка = ПолучитьСтрокуТаблицы(НоваяТаблица, НомерКолонки);
			Колонка.Добавить(Строка[НомерКолонки]);
		КонецЦикла;
	КонецЦикла;

	Возврат НоваяТаблица;

КонецФункции

#КонецОбласти
