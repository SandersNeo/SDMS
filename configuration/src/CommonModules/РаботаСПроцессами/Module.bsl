///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ВнешнееСоединение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет список значений для выбора статуса на форме быстрого создания задачи
//
// Параметры:
//  СписокВыбора	 - СписокЗначений	 - список выбора поля статуса
//
Процедура ЗаполнитьСтатусыДляФормыБыстрогоСозданияЗадачи(СписокВыбора) Экспорт
	
	Ссылка = Документы.Задача.ПустаяСсылка();
	Статус = Справочники.СтатусыОбъектов.Новый;
	
	Таблица = ПолучитьСписокСтатусовДляПерехода(Ссылка, Статус, Неопределено, ПараметрыСеанса.Филиал, , Истина); 
	ВыбранныеСтатусы = Таблица.ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыОбъектов.Ссылка КАК Значение,
	|	СтатусыОбъектов.Наименование КАК Представление,
	|	СтатусыОбъектов.ИмяКартинкиВБиблиотеке КАК НазваниеКартинки
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|ГДЕ
	|	СтатусыОбъектов.Ссылка В(&ВыбранныеСтатусы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыОбъектов.Порядок";
	
	Запрос.УстановитьПараметр("ВыбранныеСтатусы", ВыбранныеСтатусы); 
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		ИмяКартинки = "Статус" + Выборка.НазваниеКартинки;
		Картинка = БиблиотекаКартинок[ИмяКартинки];
		СписокВыбора.Добавить(Выборка.Значение, Выборка.Представление, , Картинка);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет неявный переход объекта по основным статусам
//
// Параметры:
//  Ссылка			 - ДокументСсылка.Задача	 - ссылка на объект
//  ДанныеОбъекта	 - Структура	 - содержит заполненную структуру, ранее полученную методом ПолучитьСтруктуруДанныхОбъекта()
//
Процедура ИзменитьСтатус(Знач Ссылка, Знач ДанныеОбъекта) Экспорт
	
	ТипОбъекта = ТипЗнч(Ссылка);
	
	Если ТипОбъекта = Тип("ДокументСсылка.Задача") Тогда
		ИзменитьСтатусЗадачи(Ссылка, ДанныеОбъекта);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет порядок пользовательских статусов, основанных на переданном статусе
//
// Параметры:
//  Статус	 - СправочникСсылка.СтатусыОбъектов	 - статус, на основании которого основаны пользовательские
//  Порядок	 - Число	 - новый порядок статуса
//
Процедура ОбновитьПорядкиПользовательскихСтатусов(Знач Статус, Знач Порядок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыОбъектов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|ГДЕ
	|	СтатусыОбъектов.Родитель = &Статус
	|	И НЕ СтатусыОбъектов.Предопределенный";
	
	Запрос.УстановитьПараметр("Статус", Статус);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ПользовательскийСтатусОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПользовательскийСтатусОбъект.ОбменДанными.Загрузка = Истина;
			ПользовательскийСтатусОбъект.Порядок = Порядок;
			ПользовательскийСтатусОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает статусы заявок при изменении статуса задачи
//
// Параметры:
//  ДанныеОбъекта	 - Структура	 - даныне объекта для пересчета статуса
//  	*ОбъектОснование - ДокументСсылка.ЗаявкаНаРазработку
//  	*НоваяСистема - СправочникСсылка.СистемыУчета
//  	*СтараяСистема - СправочникСсылка.СистемыУчета
//  ПересчетСистем	 - Булево	 - признак обработки систем заявки
//  ДатаЗаписи	 - Дата	 - дата пересчета
//
Процедура ПересчитатьСтатусыЗаявок(Знач ДанныеОбъекта, Знач ПересчетСистем, Знач ДатаЗаписи) Экспорт
	
	// Если объект основания является заявкой
	ОбъектОснование = ДанныеОбъекта.ОбъектОснование;
	Если ЗначениеЗаполнено(ОбъектОснование) И ТипЗнч(ОбъектОснование) = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда		
		СтатусыЗаявокПоСистемам = РегистрыСведений.СтатусыЗаявокПоСистемам;
		
		Если ПересчетСистем Тогда
			Системы = Новый Массив;
			Системы.Добавить(ДанныеОбъекта.НоваяСистема);
			Системы.Добавить(ДанныеОбъекта.СтараяСистема);
			
			СтатусыЗаявокПоСистемам.РассчитатьСтатусыПоСистемам(ОбъектОснование, Системы, ДанныеОбъекта.СтараяСистема, ДатаЗаписи);			
		Иначе
			СтатусыЗаявокПоСистемам.РассчитатьСтатусыПоСистемам(ОбъектОснование, ДанныеОбъекта.НоваяСистема, , ДатаЗаписи);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список статусов, в которые для типа объекта возможен переход из текущего статуса
//
// Параметры:
//  Ссылка	 - ДокументСсылка.Задача			  - ссылка на объект
//  Статус	 - СправочникСсылка.СтатусыОбъектов	  - ссылка на текущий статус
//  Роль	 - СправочникСсылка.РолиПользователей - роль пользователя
//  Филиал	 - СправочникСсылка.Филиалы			  - филиал объекта
//  Команда	 - СправочникСсылка.Филиалы			  - Команда объекта
//  ДляПустойСсылки- Булево - Если Истина, то вернет данные статусов для пустой ссылки
// 
// Возвращаемое значение:
//  Массив - данные статусов, в которые возможен переход
//
Функция ПолучитьСписокСтатусовДляПерехода(Знач Ссылка, Знач Статус, Знач Роль, Знач Филиал, Знач Команда = Неопределено, Знач ДляПустойСсылки = Ложь) Экспорт
	
	ЭтоНовый = НЕ ЗначениеЗаполнено(Ссылка);
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		
	Если ЭтоНовый Тогда
		Статус = Справочники.СтатусыОбъектов.Новый;
	КонецЕсли;    
	
	ДанныеФилиала = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Филиал, "Руководитель, ЗаместительРуководителя, Территория");
	
	Если ЗначениеЗаполнено(ДанныеФилиала.Территория) Тогда
		СТО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФилиала.Территория, "Руководитель");
	Иначе
		СТО = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Команда) Тогда
		РуководительКоманды = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Команда, "Руководитель");
	Иначе
		РуководительКоманды = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	ПолныеПрава = (УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("Администратор")
		ИЛИ ТекущийПользователь = ДанныеФилиала.Руководитель
		ИЛИ ТекущийПользователь = ДанныеФилиала.ЗаместительРуководителя
		ИЛИ ТекущийПользователь = РуководительКоманды
		ИЛИ ТекущийПользователь = СТО); 
		
	РолиУчастник = РегистрыСведений.Участники.ПолучитьРолиУчастника(Ссылка, ТекущийПользователь);
	РолиУчастник.Добавить(Справочники.РолиУчастников.ВсеРоли);
	
	Если ЗначениеЗаполнено(Роль) Тогда
		РольНаправление = Роль;
	Иначе
		Направление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Направление");
		РольНаправление = ПолучитьРольПользователяДляСтатусов(Ссылка, Направление);
	КонецЕсли;
	
	ТаблицаДанныхСтатусов = ПолучитьТаблицуДанныхСтатусов();
	ТипОбъекта = Справочники.ТипыОбъектовВладельцев.НайтиСвязанныйЭлемент(Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиСменыСтатусовПроцессов.СледующийСтатус КАК Ссылка,
	|	СтатусыОбъектов.Наименование КАК Представление,
	|	СтатусыОбъектов.Порядок КАК Порядок,
	|	СтатусыОбъектов.ИмяКартинкиВБиблиотеке КАК ИмяПредопределенныхДанных,
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексКартинки,
	|	НастройкиСменыСтатусовПроцессов.БыстрыйДоступ КАК БыстрыйДоступ,
	|	ЛОЖЬ КАК ТекущийСтатус
	|ИЗ
	|	Справочник.Процессы КАК Процессы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Процессы.НастройкиСменыСтатусов КАК НастройкиСменыСтатусовПроцессов
	|		ПО Процессы.Ссылка = НастройкиСменыСтатусовПроцессов.Ссылка
	|			И (НастройкиСменыСтатусовПроцессов.ТекущийСтатус <> НастройкиСменыСтатусовПроцессов.СледующийСтатус)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ((ВЫРАЗИТЬ(НастройкиСменыСтатусовПроцессов.СледующийСтатус КАК Справочник.СтатусыОбъектов)) = СтатусыОбъектов.Ссылка)
	|ГДЕ
	|	Процессы.Ссылка = &Процесс
	|	И НастройкиСменыСтатусовПроцессов.ТекущийСтатус = &Статус
	|	И ВЫБОР
	|			КОГДА &ПолныеПрава
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НастройкиСменыСтатусовПроцессов.Роль В (&РолиУчастник)
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Представление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыОбъектов.Ссылка КАК Ссылка,
	|	СтатусыОбъектов.Наименование КАК Представление,
	|	СтатусыОбъектов.Порядок КАК Порядок,
	|	СтатусыОбъектов.ИмяКартинкиВБиблиотеке КАК ИмяПредопределенныхДанных,
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексКартинки,
	|	ЛОЖЬ КАК БыстрыйДоступ,
	|	ЛОЖЬ КАК ТекущийСтатус
	|ИЗ
	|	РегистрСведений.НастройкиПереходаСтатусовОбъектов КАК НастройкиПереходаСтатусовОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО НастройкиПереходаСтатусовОбъектов.НовыйСтатус = СтатусыОбъектов.Ссылка
	|ГДЕ
	|	НастройкиПереходаСтатусовОбъектов.Объект = &ТипОбъекта
	|	И НастройкиПереходаСтатусовОбъектов.ТекущийСтатус = &Статус
	|	И НастройкиПереходаСтатусовОбъектов.РольПользователя = &Роль
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыОбъектов.Ссылка КАК Ссылка,
	|	СтатусыОбъектов.Представление КАК Представление,
	|	СтатусыОбъектов.Порядок КАК Порядок,
	|	СтатусыОбъектов.ИмяКартинкиВБиблиотеке КАК ИмяПредопределенныхДанных,
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексКартинки,
	|	ЛОЖЬ КАК БыстрыйДоступ,
	|	ИСТИНА КАК ТекущийСтатус
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|ГДЕ
	|	СтатусыОбъектов.Ссылка = &Статус";
	#КонецОбласти
	
	Процесс = Справочники.Процессы.ИспользуемыйПроцессФилиала(Филиал, ТипОбъекта);
	
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Запрос.УстановитьПараметр("Статус", Статус);
	Запрос.УстановитьПараметр("РолиУчастник", РолиУчастник);
	Запрос.УстановитьПараметр("Роль", РольНаправление);
	Запрос.УстановитьПараметр("ПолныеПрава", ПолныеПрава);
	Запрос.УстановитьПараметр("Процесс", Процесс);
		
	Пакеты = Запрос.ВыполнитьПакет();
	
	РезультатЗапросаТекущийСтатус = Пакеты.Получить(Пакеты.ВГраница());
	
	Если НЕ РезультатЗапросаТекущийСтатус.Пустой() Тогда
		Выборка = РезультатЗапросаТекущийСтатус.Выбрать();
		Выборка.Следующий();
		
		НоваяСтрока = ТаблицаДанныхСтатусов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);	
		НоваяСтрока.Идентификатор = ПолучитьИдентификаторСтатуса(Выборка.Ссылка);
	КонецЕсли;
	
	// Если объект уже есть в базе можно формировать список статусов для перехода
	Если НЕ ЭтоНовый ИЛИ ДляПустойСсылки Тогда	
		// Для задачи статусы считаются исходя из роли пользователя в задаче, если такой процесс вообще задан.
		// Если пользователь не является участников работы над задачей, то ему даются статусы для "Все роли".   	
		
		// Можеть возникнуть ситуация, когда статус будет удален из процесса. В данном
		// случае при формировании списка статусов, список переходов будет пустой. При
		// этом, задачу из текущего статуса перевести никто не сможет до тех пор, пока
		// статус не вернут обратно в процесс. Для избежания подобных ситуаций сделана
		// проверка того, что статус находится в процессе. В случае отсутствия, список
		// переходов будет софрмирован на основании настроек "по умолчанию". При этом,
		// если задача находилась в пользовательском статусе, будет сделано приведение
		// пользовательского статуса к служебному.
		СтатусНаходитсяВПроцессе = СтатусНаходитсяВПроцессе(Процесс, Статус);
	
		Если ЗначениеЗаполнено(Процесс) И СтатусНаходитсяВПроцессе Тогда
			РезультатЗапроса = Пакеты.Получить(0); // Настройки процесса филиала
		Иначе
			РезультатЗапроса = Пакеты.Получить(1); // Стандартные настройки смены статуса
		КонецЕсли;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = ТаблицаДанныхСтатусов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);	
				НоваяСтрока.Идентификатор = ПолучитьИдентификаторСтатуса(Выборка.Ссылка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаДанныхСтатусов;
	
КонецФункции

// В зависимости от того, использует ли филиал процессы, формирует список всех статусов, участвующих в переходах
//
// Параметры:
//  Филиал					 - СправочникСсылка.Филиалы	 - ссылка на филиал
//  ТипОбъекта				 - СправочникСсылка.ТипыОбъектовВладельцев	 - ссылка на тип объекта
//  ВернутьСписокЗначений	 - Булево	 - если Истина - вернет список значений, если Ложь - массив ссылок
// 
// Возвращаемое значение:
//  СписокЗначений, Массив - набор статусов процесса филиала
//
Функция ПолучитьСписокВсехСтатусовДляФилиала(Знач Филиал, Знач ТипОбъекта, Знач ВернутьСписокЗначений = Истина) Экспорт
	
	Процесс = Справочники.Процессы.ИспользуемыйПроцессФилиала(Филиал, ТипОбъекта);
	
	Если ЗначениеЗаполнено(Процесс) Тогда
		Результат = Справочники.Процессы.ПолучитьСтатусыПроцессаФилиала(Процесс, ТипОбъекта, ВернутьСписокЗначений);
	Иначе
		РегистрСведений = РегистрыСведений.НастройкиПереходаСтатусовОбъектов;
		Результат = РегистрСведений.ПолучитьСтатусыПоУмолчанию(ТипОбъекта, ВернутьСписокЗначений);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Для любого статуса возвращает ссылку на служебный или сам статус, если он является служебным
//
// Параметры:
//  Ссылка	 - СправочникСсылка.СтатусыОбъектов	 - сслыка на статус
// 
// Возвращаемое значение:
//  СправочникСсылка.СтатусыОбъектов - ссылка на элемент справочника
//
Функция ПолучитьСсылкуНаСлужебныйСтатус(Знач Ссылка) Экспорт
	
	Результат = Ссылка;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Предопределенный, Родитель");
	
	Если НЕ ЗначенияРеквизитов.Предопределенный Тогда
		Результат = ЗначенияРеквизитов.Родитель;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Находит пользовательские статусы в процессе филиала, аналогичные основным, или возвращает
//  данные по основным статусам, если филиал не использует процессы
//
// Параметры:
//  Филиал		 - СправочникСсылка.Процессы			 - ссылка на филиал
//  Статусы		 - Массив, СправочникСсылка.СтатусыОбъектов	 - массив статусов или ссылка на статус
//  ТипОбъекта	 - СправочникСсылка.ТипыОбъектовВладельцев - тип объекта владельца
// 
// Возвращаемое значение:
//  Массив - содержит структуры с данными статусов
//
Функция ПолучитьСтатусыАналогичныеОсновным(Знач Филиал, Знач Статусы, Знач ТипОбъекта) Экспорт
	
	Процесс = Справочники.Процессы.ИспользуемыйПроцессФилиала(Филиал, ТипОбъекта);
	
	Если ЗначениеЗаполнено(Процесс) Тогда
		Результат = ПолучитьДанныеСтатусовИзПроцессаФилиала(Процесс, Статусы);
	Иначе
		Результат = ПолучитьДанныеСлужебныхСтатусов(Статусы);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует структуру данных, которые необходимы для проведения объекта по статусам
//
// Параметры:
//  Ссылка	 - СоставнойТип	 - ссылка на объект, который может переходить по статусам и использует настройку процессов
// 
// Возвращаемое значение:
//  Структура - структура, которую необходимо заполнить данными. Состав структуры может отличаться для рахных типов объектов
//
Функция ПолучитьСтруктуруДанныхОбъекта(Знач Ссылка) Экспорт
	
	ТипОбъекта = ТипЗнч(Ссылка);
	
	Если ТипОбъекта = Тип("ДокументСсылка.Задача") Тогда
		Результат = ПолучитьСтруктуруДанныхЗадачи();
	Иначе
		Результат = Новый Структура;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует и возвращает таблицу данных статусов
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица данных статусов. Используется при формировании списка доступных переходов
//	 * Ссылка		 - СправочникСсылка.СтатусыОбъектов	 - статус
//	 * Представление - Строка	 - представление статуса
//	 * ИмяПредопределенныхДанных - содердит имя предопределенных данных, которое используется для отображения картинок
//	 * ТекущийСтатус	 - Булево	 - признак текущего статуса, установленного задаче
//	 * Идентификатор	 - Строка	 - GUID ссылки в строком формате без разделителей. Используется в именах команд
//	 * БыстрыйДоступ	 - Булево	 - если установлен, статус будет выведен отдельной кнопкой, в противном случае через подменю
//
Функция ПолучитьТаблицуДанныхСтатусов() Экспорт
	
	ОписаниеТипаСтрока = ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(0);
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТипаЧисло = ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(3, 0, ДопустимыйЗнак.Неотрицательный);
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.СтатусыОбъектов"));
	ТаблицаЗначений.Колонки.Добавить("Представление", ОписаниеТипаСтрока);
	ТаблицаЗначений.Колонки.Добавить("ИмяПредопределенныхДанных", ОписаниеТипаСтрока);
	ТаблицаЗначений.Колонки.Добавить("ИндексКартинки", ОписаниеТипаЧисло);
	ТаблицаЗначений.Колонки.Добавить("Порядок", ОписаниеТипаЧисло);
	ТаблицаЗначений.Колонки.Добавить("ТекущийСтатус", ОписаниеТипаБулево);
	ТаблицаЗначений.Колонки.Добавить("Идентификатор", ОписаниеТипаСтрока);
	ТаблицаЗначений.Колонки.Добавить("БыстрыйДоступ", ОписаниеТипаБулево);
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Создать кнопки перехода статусов
//
// Параметры:
//  Форма	 - УправляемаяФорма	 - Форма
//  Группа	 - 	 ГруппаФормы - Группа кнопок	 
//
Процедура СоздатьКнопкиПереходаСтатусов(Форма, Знач Группа) Экспорт	
	
	КэшСтатусов = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормы(Форма, "КэшСтатусов");	
	
	Если КэшСтатусов = Неопределено Тогда
		КэшСтатусов = Новый СписокЗначений;
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("КэшСтатусов", Новый ОписаниеТипов("СписокЗначений")));
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыОбъектов.Ссылка КАК Ссылка,
	|	СтатусыОбъектов.ИмяКартинкиВБиблиотеке КАК ИмяКартинкиВБиблиотеке,
	|	СтатусыОбъектов.Представление КАК Представление
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|ГДЕ
	|	НЕ СтатусыОбъектов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыОбъектов.Порядок";   
	
	СтруктураСтатуса = Запрос.Выполнить().Выбрать();
	
	Пока СтруктураСтатуса.Следующий() Цикл         
		
		ИдентификаторСтатуса = Строка(СтруктураСтатуса.Ссылка.УникальныйИдентификатор()); 
		ИдентификаторСтатуса = СтрЗаменить(ИдентификаторСтатуса, "-", "");	
		
		Если КэшСтатусов.НайтиПоЗначению(СтруктураСтатуса.Ссылка) = Неопределено Тогда
			КэшСтатусов.Добавить(СтруктураСтатуса.Ссылка, ИдентификаторСтатуса); 
		КонецЕсли;
		
		Попытка
			Картинка = БиблиотекаКартинок["Статус" + СтруктураСтатуса.ИмяКартинкиВБиблиотеке];
		Исключение
			Картинка = Новый Картинка;
		КонецПопытки;
		
		ИмяКоманды = "УстановитьСтатус_" + ИдентификаторСтатуса;
		
		КомандаФормы = Форма.Команды.Найти(ИмяКоманды);
		Если КомандаФормы = Неопределено Тогда
			КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
			КомандаФормы.Действие = "УстановитьСтатусПоКнопке";
		КонецЕсли;
		                                     
		НоваяКнопка = Форма.Элементы.Вставить(СтрШаблон("%1_КнопкаСтатуса_%2", Группа.Имя, ИдентификаторСтатуса),
			Тип("КнопкаФормы"), Группа);
		
		НоваяКнопка.Заголовок = СтруктураСтатуса.Представление;
		НоваяКнопка.ИмяКоманды = КомандаФормы.Имя;
		НоваяКнопка.Картинка = Картинка;
		НоваяКнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КонецЦикла;	
	
	Форма.КэшСтатусов = КэшСтатусов;
	
КонецПроцедуры

// Возвращает видимые статусы в контекстном меню инструмента
//
// Параметры:
//  Задача					 - ДокументСсылка.Задача - Текущая задача
//  КэшВспомогательныхДанных - Соответсвие			 - Кэш дополнительных данных
//  Группа					 - Строка				 - Имя группы статусов на форме
// 
// Возвращаемое значение:
//  Массив - Имена статусов, которые должны быть видны на форме
//
Функция ПолучитьВидимыеСтатусы(Знач Задача, КэшВспомогательныхДанных, Группа = "") Экспорт	
	
	МассивВидимыхСтатусов = Новый Массив;

	Если ТипЗнч(Задача) <> Тип("ДокументСсылка.Задача") Тогда
		Возврат МассивВидимыхСтатусов;
	КонецЕсли;
	
	КэшСтатусов = КэшВспомогательныхДанных.Получить("КэшСтатусов");
    	
	РевьюерОбъекта = ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.РевьюерОбъекта;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, 
		"Филиал, КомандаРазработчиков, ТребуетсяПубликация, Статус, Филиал, Направление"); 
	
	РольПользователя = ОбщегоНазначения.РольПользователяВНаправлении(Реквизиты.Направление);
	
	Ревьюер = РегистрыСведений.ЗначенияДополнительныхРеквизитовОбъектов.ЗначениеДополнительногоРеквизита(Задача, РевьюерОбъекта);
	
	ДанныеСтатусов = ПолучитьСписокСтатусовДляПерехода(Задача, Реквизиты.Статус, 
		РольПользователя, Реквизиты.Филиал, Реквизиты.КомандаРазработчиков);
		
	КэшВспомогательныхДанных.Вставить("ЕстьНезакрытыйПериод", ОбщегоНазначения.ЕстьНезакрытыйПериодПриостановкиЗадачи(Задача));
	КэшВспомогательныхДанных.Вставить("СрокСдачи", РегистрыСведений.СрокиСдачиЗадач.ПолучитьСрокСдачиЗадачи(Задача));
	КэшВспомогательныхДанных.Вставить("Статус", Реквизиты.Статус);
	КэшВспомогательныхДанных.Вставить("ТребуетсяПубликация", Реквизиты.ТребуетсяПубликация);
	КэшВспомогательныхДанных.Вставить("Ревьюер", Ревьюер);

	Настройки = РаботаСНастройками.ПолучитьДополнительныеРеквизитыФилиала(Реквизиты.Филиал);
	Для Каждого Настройка Из Настройки Цикл
		КэшВспомогательныхДанных.Вставить(Настройка.Ключ, Настройка.Значение);
	КонецЦикла;
	
	Для Каждого СтруктураСтатуса Из ДанныеСтатусов Цикл         
		
		НайденныйСтатус = КэшСтатусов.НайтиПоЗначению(СтруктураСтатуса.Ссылка);
		
		// Для текущего статуса задачи не показывается кнопка
		Если СтруктураСтатуса.ТекущийСтатус = Истина Тогда
			НовыйСтатус = СтруктураСтатуса.Ссылка;
			Продолжить;
		КонецЕсли;
		
		МассивВидимыхСтатусов.Добавить(СтрШаблон("%1КнопкаСтатуса_%2", ?(ЗначениеЗаполнено(Группа), Группа + "_", ""), 
			СтруктураСтатуса.Идентификатор));

	КонецЦикла;	
	
	Возврат МассивВидимыхСтатусов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСЗадачами

Процедура ЗаписатьСтатистикуСтатусовЗадач(Знач Задача, Знач Статус, Знач Исполнитель, Знач ДатаЗаписи)
	
	РегистрыСведений.СтатистикаСтатусовНазначенныхЗадач.ОбработатьИзменениеСтатусаЗадачи(Задача, Статус, Исполнитель, ДатаЗаписи);
	РегистрыСведений.СтатистикаСтатусовНеназначенныхЗадач.ОбработатьИзменениеСтатусаЗадачи(Задача, Статус, Исполнитель, ДатаЗаписи);
	
КонецПроцедуры

Процедура ИзменитьСтатусЗадачи(Знач ЗадачаСсылка, Знач ДанныеОбъекта)
	
	// Прерываение, если статус не был изменен и назначенный не изменился
	Если ДанныеОбъекта.НовыйСтатус = ДанныеОбъекта.СтарыйСтатус 
		И ДанныеОбъекта.НовыйИсполнитель = ДанныеОбъекта.СтарыйИсполнитель
		И ДанныеОбъекта.НоваяСистема = ДанныеОбъекта.СтараяСистема Тогда
		Возврат;
	КонецЕсли;
	
	// Получение массива основных статусов для объекта
	ОсновныеСтатусы = ПолучитьОсновныеСтатусы(ДанныеОбъекта.СтарыйСтатус, ДанныеОбъекта.НовыйСтатус,
		Справочники.ТипыОбъектовВладельцев.Документ_Задача);
	
	СтатусCodeReview = Справочники.СтатусыОбъектов.CodeReview;
	СтатусТестирование = Справочники.СтатусыОбъектов.Тестирование;
	
	// Переключатель. Используется для фиксации смены системы заявки.
	// Если происходит переход более чем через один статус, тогда при
	// первом переводе задачи в статус требуется в регистре сведений
	// СтатусыЗаявокПоСистемам пересчитать статус заявки по предыдущей
	// системе. После этого, обрабатывать старую систему не требуется.
	ОбрабатыватьСменуСистемыЗаявки = Истина;
	
	// Дата записи для периодических регистров сведений. Используется
	// для добавления записей в регистрах со сдвигом одна секунду.
	// Сдвиг необходим для исключения перетирания записей в регистрах
	// сведений, у которых установлена периодичность "В переделах секунды".
	ДатаЗаписи = ТекущаяДатаСеанса();
	
	// Результат проверки, есть ли у задачи незакрытый период приостановки
	ЕстьНезакрытыйПериодПриостановки = Ложь;
	
	// После создания задачи её старый статус имеет значение Неопределено,
	// поэтому нет смысла проверять наличие закрытого периода приостановки
	Если ДанныеОбъекта.СтарыйСтатус <> Неопределено Тогда
		СлужебныйСтатус = ПолучитьСсылкуНаСлужебныйСтатус(ДанныеОбъекта.СтарыйСтатус);
		Если СлужебныйСтатус = Справочники.СтатусыОбъектов.Приостановлен Тогда
			// Проверяем, есть ли у задачи незакрытый период приостановки
			ЕстьНезакрытыйПериодПриостановки = ОбщегоНазначения.ЕстьНезакрытыйПериодПриостановкиЗадачи(ЗадачаСсылка);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеОбъекта.НовыйСтатус <> ДанныеОбъекта.СтарыйСтатус
		ИЛИ (ЗначениеЗаполнено(ДанныеОбъекта.СтарыйИсполнитель) <> ЗначениеЗаполнено(ДанныеОбъекта.НовыйИсполнитель)) Тогда
		
		ВидДействия = Перечисления.ВидыДействий.ДобавлениеВОчередь;
		ТипОбъекта = Справочники.ТипыОбъектовВладельцев.Документ_Задача;
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Филиал", ДанныеОбъекта.Филиал);
		СтруктураДанных.Вставить("СтарыйСтатус", ДанныеОбъекта.СтарыйСтатус);
		СтруктураДанных.Вставить("НовыйСтатус", ДанныеОбъекта.НовыйСтатус);
		
		Действие = Справочники.Процессы.ПолучитьДействияСменыСтатуса(ТипОбъекта, СтруктураДанных, ВидДействия);

		Если Действие = Справочники.ДействияПриСменеСтатуса.ДобавлениеВОчередьТестирования Тогда
			РегистрыСведений.ОчередьЗадач.ДобавитьЗадачуВОчередьТестирования(ЗадачаСсылка);
		ИначеЕсли Действие = Справочники.ДействияПриСменеСтатуса.УдалениеИзОчередиТестирования Тогда
			РегистрыСведений.ОчередьЗадач.УдалитьЗадачуИзОчередиТестирования(ЗадачаСсылка);
		КонецЕсли;
	КонецЕсли;
	
	// Переход по основным статусам и фиксация во вспомогательных регистрах
	Для Каждого СтруктураСтатуса Из ОсновныеСтатусы Цикл
				
		ОсновнойСтатус = СтруктураСтатуса.Статус;
		ДанныеОбъекта.НовыйСтатус = ОсновнойСтатус;
		
		Если ДанныеОбъекта.НовыйСтатус <> ДанныеОбъекта.СтарыйСтатус 
			ИЛИ ДанныеОбъекта.НовыйИсполнитель <> ДанныеОбъекта.СтарыйИсполнитель Тогда
 
			// Свойства задач
			РегистрыСведений.СвойстваЗадач.Добавить(ЗадачаСсылка, ДанныеОбъекта, ДатаЗаписи);
		
			// Последним статусом может оказаться пользовательский статус.
			// При записи в регистр сведений СвойстваЗадач не важно, какой
			// тип статуса будет иметь поле ДанныеОбъекта.НовыйСтатус в то
			// время как при записи в последующие регистры требуется чтобы
			// новый статус был служебным (предопределенным).
			ДанныеОбъекта.НовыйСтатус = ПолучитьСсылкуНаСлужебныйСтатус(ДанныеОбъекта.НовыйСтатус);
		
			// Статистика статусов не-/назначенных задач
			ЗаписатьСтатистикуСтатусовЗадач(ЗадачаСсылка, ОсновнойСтатус, ДанныеОбъекта.НовыйИсполнитель, ДатаЗаписи);
		КонецЕсли;
		
		Если ДанныеОбъекта.НовыйСтатус <> ДанныеОбъекта.СтарыйСтатус Тогда
			
			// Закрываем период приостановки, если задача выходит из статуса "Приостановлен"
			Если ЕстьНезакрытыйПериодПриостановки Тогда
				РегистрыСведений.ПриостановленныеЗадачи.Возобновить(ЗадачаСсылка);
				ЕстьНезакрытыйПериодПриостановки = Ложь;
			КонецЕсли;
			
			// Количество циклов операций над задачами
			Если ОсновнойСтатус = СтатусCodeReview ИЛИ ОсновнойСтатус = СтатусТестирование Тогда
				РегистрыСведений.КоличествоЦикловОперацийНадЗадачами.Добавить(ЗадачаСсылка, ОсновнойСтатус);
			КонецЕсли;
			
			// История состава спринтов
			// Если для задачи есть активный спринт, обновить статус задачи в истории спринта
			Спринт = РегистрыСведений.СоставСпринтов.ПолучитьАктивныеСпринтыОбъекта(ЗадачаСсылка);
			Если ЗначениеЗаполнено(Спринт) Тогда
				РегистрыСведений.ИсторияСоставаСпринтов.Добавить(ЗадачаСсылка, Спринт, ОсновнойСтатус);
			КонецЕсли;
			
			// Если задача переходит в статус "Приостановлен" или в статус, основанный на статусе
			// "Приостановлен", следует зафиксировать начало приостановки в регистре сведений.
			Если ДанныеОбъекта.НовыйСтатус = Справочники.СтатусыОбъектов.Приостановлен Тогда
				РегистрыСведений.ПриостановленныеЗадачи.Приостановить(ЗадачаСсылка, ДанныеОбъекта.КомментарийПриостановки);
				ЕстьНезакрытыйПериодПриостановки = Истина;
			КонецЕсли;
		КонецЕсли;
				
		СистемаИзменена = ДанныеОбъекта.НоваяСистема <> ДанныеОбъекта.СтараяСистема;
		ОснованиеЗаявка = ЗначениеЗаполнено(ДанныеОбъекта.ОбъектОснование) 
				И ТипЗнч(ДанныеОбъекта.ОбъектОснование) = Тип("ДокументСсылка.ЗаявкаНаРазработку");
			
		Если ОснованиеЗаявка И (ДанныеОбъекта.НовыйСтатус <> ДанныеОбъекта.СтарыйСтатус 
			ИЛИ СистемаИзменена) Тогда
			
			ПересчетСистем = ОбрабатыватьСменуСистемыЗаявки И СистемаИзменена;
			
			Если ПересчетСистем Тогда 
				ОбрабатыватьСменуСистемыЗаявки = Ложь;
			КонецЕсли;
			
			Данные = Новый Структура("ДанныеОбъекта, ПересчетСистем, ДатаЗаписи", ДанныеОбъекта, ПересчетСистем, ДатаЗаписи);
			РегистрыСведений.ОчередьСобытийНаОбработку.ДобавитьЗаданиеПересчитатьСтатусыЗаявок(ЗадачаСсылка, Данные);
		КонецЕсли;
		
		ДатаЗаписи = ДатаЗаписи + 1;

		// Переносим новый статус в поле старого статуса
		ДанныеОбъекта.СтарыйСтатус = ДанныеОбъекта.НовыйСтатус;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьСтруктуруДанныхЗадачи()
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("КомментарийПриостановки");
	ДанныеОбъекта.Вставить("НоваяСистема");
	ДанныеОбъекта.Вставить("НовыйИсполнитель");
	ДанныеОбъекта.Вставить("НовыйСтатус");
	ДанныеОбъекта.Вставить("ОбъектОснование");
	ДанныеОбъекта.Вставить("Порядок");
	ДанныеОбъекта.Вставить("ПроцентВыполнения");
	ДанныеОбъекта.Вставить("СтараяСистема");
	ДанныеОбъекта.Вставить("СтарыйИсполнитель");
	ДанныеОбъекта.Вставить("СтарыйСтатус");
	ДанныеОбъекта.Вставить("Филиал");
	
	Возврат ДанныеОбъекта;
	
КонецФункции

#КонецОбласти

Функция ПолучитьАвтораЗаявкиПоОбъекту(Знач Ссылка)
	
	// Поиск автора заявки, которой принадлежит задача
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявкаНаРазработку.Автор КАК Автор
	|ИЗ
	|	РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку КАК СвязьОбъектовСЗаявкамиНаРазработку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО СвязьОбъектовСЗаявкамиНаРазработку.Заявка_Новая = ЗаявкаНаРазработку.Ссылка
	|ГДЕ
	|	СвязьОбъектовСЗаявкамиНаРазработку.Объект = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Автор;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

Функция ПолучитьДанныеСлужебныхСтатусов(Знач Статусы)
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыОбъектов.Ссылка КАК Ссылка,
	|	СтатусыОбъектов.Наименование КАК Наименование,
	|	СтатусыОбъектов.ИмяКартинкиВБиблиотеке КАК ИмяКартинки
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|ГДЕ
	|	СтатусыОбъектов.Ссылка В(&Ссылка)
	|	И НЕ СтатусыОбъектов.ПометкаУдаления
	|	И СтатусыОбъектов.Предопределенный
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыОбъектов.Порядок";
	
	Запрос.УстановитьПараметр("Ссылка", Статусы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтруктураСтатуса = Новый Структура;
			СтруктураСтатуса.Вставить("Ссылка", Выборка.Ссылка);
			СтруктураСтатуса.Вставить("Наименование", Выборка.Наименование);
			СтруктураСтатуса.Вставить("ИмяКартинки", Выборка.ИмяКартинки);
			
			Результат.Добавить(СтруктураСтатуса);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеСтатусовИзПроцессаФилиала(Знач Процесс, Знач Статусы)
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыОбъектов.Ссылка КАК Ссылка,
	|	СтатусыОбъектов.Наименование КАК Наименование,
	|	СтатусыОбъектов.ИмяКартинкиВБиблиотеке КАК ИмяКартинки
	|ИЗ
	|	Справочник.Процессы КАК Процессы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Процессы.НастройкиСменыСтатусов КАК НастройкиСменыСтатусовПроцесса
	|		ПО Процессы.Ссылка = НастройкиСменыСтатусовПроцесса.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (НастройкиСменыСтатусовПроцесса.ТекущийСтатус = СтатусыОбъектов.Ссылка)
	|ГДЕ
	|	Процессы.Ссылка = &Процесс
	|	И СтатусыОбъектов.Ссылка В(&Статусы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НастройкиСменыСтатусовПроцесса.НомерСтроки";
	
	Запрос.УстановитьПараметр("Процесс", Процесс);
	Запрос.УстановитьПараметр("Статусы", Статусы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		ИмеющиесяСтатусы = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			
			Если ИмеющиесяСтатусы.Найти(Выборка.Ссылка) = Неопределено Тогда
				СтруктураСтатуса = Новый Структура("Ссылка, Наименование, ИмяКартинки");
				СтруктураСтатуса.Вставить("Ссылка", Выборка.Ссылка);
				СтруктураСтатуса.Вставить("Наименование", Выборка.Наименование);
				СтруктураСтатуса.Вставить("ИмяКартинки", Выборка.ИмяКартинки);
			
				Результат.Добавить(СтруктураСтатуса);
				ИмеющиесяСтатусы.Добавить(Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИдентификаторСтатуса(Знач Ссылка)
	
	Возврат ОбщегоНазначенияКлиентСервер.СтрУникальныйИдентификатор(Ссылка.УникальныйИдентификатор());
	
КонецФункции

Функция ПолучитьОсновныеСтатусы(Знач СтарыйСтатус, Знач НовыйСтатус, Знач ТипОбъекта)
	
	Результат = Новый Массив;
	
	// При создании задачи у неё нет статуса
	Если СтарыйСтатус = Неопределено Тогда
		СтарыйСтатус = Справочники.СтатусыОбъектов.Новый;
	КонецЕсли;
	
	ПоляСтруктуры = "Статус, Порядок";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОбязательныеСтатусыОбъектов.ПромежуточныйСтатус КАК Статус,
	|	СтатусыОбъектов.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.ОбязательныеСтатусыОбъектов КАК ОбязательныеСтатусыОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ОбязательныеСтатусыОбъектов.ПромежуточныйСтатус = СтатусыОбъектов.Ссылка
	|ГДЕ
	|	ОбязательныеСтатусыОбъектов.ТипОбъекта = &ТипОбъекта
	|	И ОбязательныеСтатусыОбъектов.ТекущийСтатус = &ТекущийСтатус
	|	И ОбязательныеСтатусыОбъектов.НовыйСтатус = &НовыйСтатус
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбязательныеСтатусыОбъектов.Порядок";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Запрос.УстановитьПараметр("ТекущийСтатус", СтарыйСтатус);
	Запрос.УстановитьПараметр("НовыйСтатус", НовыйСтатус);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтруктураСтатуса = Новый Структура(ПоляСтруктуры, Выборка.Статус, Выборка.Порядок);
			Результат.Добавить(СтруктураСтатуса);
		КонецЦикла;
	КонецЕсли;
	
	// В обязательном порядке добавляем новый статус.
	// Как минимум - для фикскации в свойствах задач.
	ПорядокНовогоСтатуса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовыйСтатус, "Порядок");
	СтруктураСтатуса = Новый Структура(ПоляСтруктуры, НовыйСтатус, ПорядокНовогоСтатуса);
	Результат.Добавить(СтруктураСтатуса);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьРольПользователяДляСтатусов(Знач Ссылка, Знач Направление)
	
	РеквизитыФилиала = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыСеанса.Филиал, "ТипФилиала, Руководитель");
	
	Если ЗначениеЗаполнено(ПараметрыСеанса.РольВОтделеIT) Тогда
		РольПользователяСтатус = ПараметрыСеанса.РольВОтделеIT;
	Иначе
		Если РеквизитыФилиала.ТипФилиала <> Перечисления.ТипыФилиалов.НеIT Тогда
			Если РеквизитыФилиала.Руководитель = ПараметрыСеанса.ТекущийПользователь Тогда
				РольПользователяСтатус = Справочники.РолиПользователей.РуководительIT;
				
			ИначеЕсли РеквизитыФилиала.ТипФилиала = Перечисления.ТипыФилиалов.QA Тогда
				// Для филиала тестирования устанавливаем роль "Тестировщик", что бы 
				// пользователь мог возвращать задачи из статуса "Протестировано" в 
				// статус "В работе" и "Тестирование"
				РольПользователяСтатус = Справочники.РолиПользователей.Тестировщик;	
			Иначе
				РольПользователяСтатус = Справочники.РолиПользователей.Разработчик;
			КонецЕсли;
		Иначе
			АвторЗаявки = ПолучитьАвтораЗаявкиПоОбъекту(Ссылка);
			Если АвторЗаявки = ПараметрыСеанса.ТекущийПользователь Тогда
				РольПользователяСтатус = Справочники.РолиПользователей.Заказчик;
			Иначе
				РольПользователяСтатус = ОбщегоНазначения.РольПользователяВНаправлении(Направление);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РольПользователяСтатус;
	
КонецФункции

Функция СтатусНаходитсяВПроцессе(Знач Процесс, Знач Статус)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСТИНА КАК СтатусЕстьВПроцессе
	|ИЗ
	|	Справочник.Процессы КАК Процессы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Процессы.НастройкиСменыСтатусов КАК ПроцессыНастройкиСменыСтатусов
	|		ПО Процессы.Ссылка = ПроцессыНастройкиСменыСтатусов.Ссылка
	|			И (ПроцессыНастройкиСменыСтатусов.ТекущийСтатус = &Статус)
	|ГДЕ
	|	Процессы.Ссылка = &Процесс";
	
	Запрос.УстановитьПараметр("Статус", Статус);
	Запрос.УстановитьПараметр("Процесс", Процесс);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат (НЕ РезультатЗапроса.Пустой());
	
КонецФункции

#КонецОбласти

#КонецЕсли
