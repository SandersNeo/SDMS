///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ВнешнееСоединение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда

#Область ПрограммныйИнтерфейс

//  Получить дополнительные реквизиты филиала
//
// Параметры:
//  Филиал	 - СправочникСсылка.Филиалы	 - Филиал для получения настроек
// 
// Возвращаемое значение:
//  Структура - Структура
//		*ЗапросСозданияЗадачиАвтотеста - Булево
//		*ПрефиксЗадачиАвтотеста - Строка
//		*ИсполнителяCodeReviewНазначаетРуководитель - Булево
//
Функция ПолучитьДополнительныеРеквизитыФилиала(Знач Филиал) Экспорт
	
	СтруктураРеквизиты = Новый Структура;
	СтруктураРеквизиты.Вставить("ЗапросСозданияЗадачиАвтотеста", Ложь);
	СтруктураРеквизиты.Вставить("ПрефиксЗадачиАвтотеста", "");
	СтруктураРеквизиты.Вставить("ИсполнителяCodeReviewНазначаетРуководитель", Ложь);
	СтруктураРеквизиты.Вставить("ТестируемыеСистемы", Новый Массив);
	
	ВидыНастроекФилиалов = ПланыВидовХарактеристик.ВидыНастроекФилиалов;
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(ВидыНастроекФилиалов.ПрефиксЗадачиАвтотеста);
	МассивРеквизитов.Добавить(ВидыНастроекФилиалов.ЗапросСозданияЗадачиАвтотеста);
	МассивРеквизитов.Добавить(ВидыНастроекФилиалов.ИсполнителяCodeReviewНазначаетРуководитель);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНастроекФилиалов.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	ЕСТЬNULL(НастройкиФилиалов.Значение, НЕОПРЕДЕЛЕНО) КАК Значение
	|ИЗ
	|	ПланВидовХарактеристик.ВидыНастроекФилиалов КАК ВидыНастроекФилиалов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиФилиалов КАК НастройкиФилиалов
	|		ПО (НастройкиФилиалов.Филиал = &ТекущийФилиал)
	|			И ВидыНастроекФилиалов.Ссылка = НастройкиФилиалов.Настройка
	|ГДЕ
	|	ВидыНастроекФилиалов.Ссылка В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.ПрефиксЗадачиАвтотеста), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.ЗапросСозданияЗадачиАвтотеста), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.ИсполнителяCodeReviewНазначаетРуководитель))";
	
	Запрос.УстановитьПараметр("ТекущийФилиал", Филиал);
	Запрос.УстановитьПараметр("МассивРеквизитов", МассивРеквизитов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаФилиал = РезультатЗапроса.Выбрать();
		
	Пока ВыборкаФилиал.Следующий() Цикл
		Если ВыборкаФилиал.Значение <> Неопределено Тогда
			СтруктураРеквизиты[ВыборкаФилиал.ИмяПредопределенныхДанных] = ВыборкаФилиал.Значение;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат СтруктураРеквизиты;
	
КонецФункции

// Возвращает настройки из указанной группы вида настроек, если настройка отсутствует в значении будет пустая ссылка.
// 
// Параметры:
//  ГруппаНастроек - ПланВидовХарактеристикСсылка.ВидыНастроекПользователя - Ссылка на группу настроек
// 
// Возвращаемое значение:
//  Результат - Соответствие - полученные настройки пользователя для заполнения объекта
//  *Ключ - ПланВидовХарактеристикСсылка.ВидыНастроекПользователя - вид настройки
//  *Значение - Характеристика.ВидыНастроекПользователя, Неопределено - значение для вида настройки
//
Функция ПолучитьНастройкиАвтозаполнения(Знач ГруппаНастроек) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыНастроекПользователя.Ссылка КАК Настройка,
	|	ВидыНастроекПользователя.ТипЗначения КАК ТипЗначения,
	|	ЕСТЬNULL(НастройкиПользователя.Значение, НЕОПРЕДЕЛЕНО) КАК Значение
	|ИЗ
	|	ПланВидовХарактеристик.ВидыНастроекПользователя КАК ВидыНастроекПользователя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователя КАК НастройкиПользователя
	|		ПО ВидыНастроекПользователя.Ссылка = НастройкиПользователя.Настройка
	|			И (НастройкиПользователя.Пользователь = &Пользователь)
	|ГДЕ
	|	ВидыНастроекПользователя.Родитель = &ГруппаНастроек";
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ГруппаНастроек", ГруппаНастроек);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗначениеНастройки = Выборка.ТипЗначения.ПривестиЗначение(Выборка.Значение);
		
		Результат.Вставить(Выборка.Настройка, ЗначениеНастройки);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Настраивает отображение и список выбора для поля филиал.
// Учитывает, является ли пользователь администратором или нет
//
// Параметры:
//  Форма	 - УправляемаяФорма	 - форма настроек филиала
//
Процедура НастроитьОтображениеПоляФилиал(Форма) Экспорт
	
	ЭтоАдминистратор = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("Администратор");
	ЧтениеВсехДанных = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("ЧтениеВсехДанныхИнформационнойБазы");
	
	Если НЕ ЭтоАдминистратор И НЕ ЧтениеВсехДанных Тогда
		
		ПолеФилиала = Форма.Элементы.Филиал;
		
		ФилиалыПользователя = Справочники.Филиалы.ПолучитьВсеФилиалыРуководителя();
		КоличествоФилиалов = ФилиалыПользователя.Количество();
		
		// Если пользователь не является руководителем филиалов, скрываем поле
		Если КоличествоФилиалов = 0 Тогда
			ПолеФилиала.Видимость = Ложь;
			
		// Если пользователь является руководителем только одного филиала,
		// скрываем поле и устанавливаем филиалом текущий филиал пользователя
		ИначеЕсли КоличествоФилиалов = 1 Тогда
			Форма.Филиал = ФилиалыПользователя.Получить(0).Значение;
			ПолеФилиала.Доступность = Ложь;
		Иначе
			// Если пользователь является руководителем нескольких филиалов,
			// добавляем их в список выбора
			СписокВыбора = ПолеФилиала.СписокВыбора;
			ПолеФилиала.РежимВыбораИзСписка = Истина;
			
			Для Каждого ЭлементСписка Из ФилиалыПользователя Цикл
				ЗаполнитьЗначенияСвойств(СписокВыбора.Добавить(), ЭлементСписка);
			КонецЦикла;
			
			Форма.Филиал = ФилиалыПользователя.Получить(0).Значение;
		КонецЕсли;
	Иначе
		Форма.Элементы.ГруппаСтраницыНастроек.ТолькоПросмотр = ЧтениеВсехДанных;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет настройки филиала
//
// Параметры:
//  Форма	 - УправляемаяФорма	 - форма настроек филиала
//
Процедура ОбновитьНастройкиФилиала(Форма) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыНастроекФилиалов.Ссылка КАК Ссылка,
	|	ВидыНастроекФилиалов.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	|ПОМЕСТИТЬ ВсеВидыНастроек
	|ИЗ
	|	ПланВидовХарактеристик.ВидыНастроекФилиалов КАК ВидыНастроекФилиалов
	|ГДЕ
	|	НЕ ВидыНастроекФилиалов.ЭтоГруппа
	|	И НЕ ВидыНастроекФилиалов.ПометкаУдаления
	|	И НЕ ВидыНастроекФилиалов.Скрытый
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыНастроекФилиалов.Ссылка КАК Ссылка,
	|	ВидыНастроекФилиалов.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	НастройкиФилиалов.Значение КАК Значение
	|ПОМЕСТИТЬ НастройкиФилиала
	|ИЗ
	|	РегистрСведений.НастройкиФилиалов КАК НастройкиФилиалов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ВидыНастроекФилиалов КАК ВидыНастроекФилиалов
	|		ПО НастройкиФилиалов.Настройка = ВидыНастроекФилиалов.Ссылка
	|ГДЕ
	|	НастройкиФилиалов.Филиал = &Филиал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеВидыНастроек.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	ЕСТЬNULL(НастройкиФилиалов.Значение, НЕОПРЕДЕЛЕНО) КАК Значение
	|ИЗ
	|	ВсеВидыНастроек КАК ВсеВидыНастроек
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиФилиала КАК НастройкиФилиалов
	|		ПО ВсеВидыНастроек.Ссылка = НастройкиФилиалов.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Мессенджеры.ИмяПредопределенныхДанных,
	|	ЕСТЬNULL(АдресаПолучателей.Адрес, """")
	|ИЗ
	|	Справочник.Мессенджеры КАК Мессенджеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресаПолучателей КАК АдресаПолучателей
	|		ПО (АдресаПолучателей.Получатель = &Филиал)
	|			И (АдресаПолучателей.Мессенджер = Мессенджеры.Ссылка)
	|ГДЕ
	|	НЕ Мессенджеры.ИспользуетсяИдентификатор
	|	И Мессенджеры.Ссылка = &ОсновнойМессенджер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Мессенджеры.ИмяПредопределенныхДанных,
	|	ЕСТЬNULL(АдресаПолучателей.Идентификатор, """")
	|ИЗ
	|	Справочник.Мессенджеры КАК Мессенджеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресаПолучателей КАК АдресаПолучателей
	|		ПО (АдресаПолучателей.Получатель = &Филиал)
	|			И (АдресаПолучателей.Мессенджер = Мессенджеры.Ссылка)
	|ГДЕ
	|	Мессенджеры.ИспользуетсяИдентификатор
	|	И Мессенджеры.Ссылка = &ОсновнойМессенджер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СистемыУчета.Ссылка КАК Ссылка,
	|	СистемыУчета.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Филиалы.РазрабатываемыеСистемы КАК ФилиалыРазрабатываемыеСистемы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СистемыУчета КАК СистемыУчета
	|		ПО ФилиалыРазрабатываемыеСистемы.Система = СистемыУчета.Ссылка
	|ГДЕ
	|	ФилиалыРазрабатываемыеСистемы.Ссылка = &Филиал
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФилиалыРазрабатываемыеСистемы.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Филиалы.ТипФилиала КАК ТипФилиала,
	|	Филиалы.ЗаместительРуководителя КАК ЗаместительРуководителя
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|ГДЕ
	|	Филиалы.Ссылка = &Филиал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Филиалы.Ссылка КАК Ссылка,
	|	Филиалы.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|ГДЕ
	|	Филиалы.Родитель = &Филиал
	|	И НЕ Филиалы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыЗадач.Ссылка КАК Ссылка,
	|	ВидыЗадач.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.ВидыЗадачФилиалов КАК ВидыЗадачФилиалов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗадач КАК ВидыЗадач
	|		ПО ВидыЗадачФилиалов.ВидЗадачи = ВидыЗадач.Ссылка
	|ГДЕ
	|	ВидыЗадачФилиалов.Филиал = &Филиал
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвязанныеОбъекты.ПриемникСвязи КАК Филиал,
	|	ПРЕДСТАВЛЕНИЕ(СвязанныеОбъекты.ПриемникСвязи) КАК Наименование,
	|	СвязанныеОбъекты.РассчитыватьМетрикиСИсточником КАК РассчитыватьМетрикиСИсточником
	|ИЗ
	|	РегистрСведений.СвязанныеОбъекты КАК СвязанныеОбъекты
	|ГДЕ
	|	СвязанныеОбъекты.ИсточникСвязи = &Филиал
	|	И СвязанныеОбъекты.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.СвязанаС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШаблоныОписанияДляФилиалов.Шаблон КАК Ссылка,
	|	ШаблоныОписанияДокументов.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.ШаблоныОписанияДляФилиалов КАК ШаблоныОписанияДляФилиалов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныОписанияДокументов КАК ШаблоныОписанияДокументов
	|		ПО ШаблоныОписанияДляФилиалов.Шаблон = ШаблоныОписанияДокументов.Ссылка
	|ГДЕ
	|	ШаблоныОписанияДляФилиалов.Филиал = &Филиал";
	
	Запрос.УстановитьПараметр("Филиал", Форма.Филиал);
	Запрос.УстановитьПараметр("ОсновнойМессенджер", Константы.ОсновнойМессенджер.Получить());
	
	Пакеты = Запрос.ВыполнитьПакет();
	КоличествоПакетов = Пакеты.ВГраница();
	
	РезультатЗапроса = Пакеты.Получить(КоличествоПакетов - 6);
	РезультатРазрабатываемыеСистемы = Пакеты.Получить(КоличествоПакетов - 5);
	РезультатТипФилиала = Пакеты.Получить(КоличествоПакетов - 4);
	РезультатКомандыРазработчиков = Пакеты.Получить(КоличествоПакетов - 3);
	РезультатВидыЗадач = Пакеты.Получить(КоличествоПакетов - 2);
	РезультатСвязанныеФилиалы = Пакеты.Получить(КоличествоПакетов - 1);
	РезультатШаблоныЗаявок = Пакеты.Получить(КоличествоПакетов);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		РаботаСНастройками.УстановитьЗначенияРеквизитам(Форма, РезультатЗапроса);
	КонецЕсли;
	
	ЗаполнитьНастройкиВидовДеятельностейУслуг(Форма);
	ЗаполнитьДиапазоныСложностиЗадач(Форма);
	ЗаполнитьИсполнителейCodeReview(Форма);
	ЗаполнитьСотрудниковФилиала(Форма);
	ОбновитьСпискиВыбора(Форма);
	ЗаполнитьСвязанныеФилиалы(Форма, РезультатСвязанныеФилиалы);
	
	РаботаСНастройками.УстановитьПараметрыВыбора(Форма);
	
	Если НЕ РезультатТипФилиала.Пустой() Тогда
		Выборка = РезультатТипФилиала.Выбрать();
		Выборка.Следующий();
		
		ТипФилиала = Выборка.ТипФилиала;
		Форма.ЗаместительРуководителя = Выборка.ЗаместительРуководителя;
	Иначе
		ТипФилиала = Перечисления.ТипыФилиалов.НеIT;
		Форма.ЗаместительРуководителя = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;

	Форма.ТипФилиала = ТипФилиала;
	Форма.Элементы.ТипФилиала.Видимость = (ТипФилиала <> Перечисления.ТипыФилиалов.НеIT);
		
	ЗаполнитьСписок(Форма.КомандыРазработчиков, РезультатКомандыРазработчиков);
	ЗаполнитьСписок(Форма.ТипыЗадач, РезультатВидыЗадач);
	ЗаполнитьСписок(Форма.РазрабатываемыеСистемы, РезультатРазрабатываемыеСистемы);
	ЗаполнитьСписок(Форма.ШаблоныЗаявок, РезультатШаблоныЗаявок);
		
	ОбновитьОтображениеРазделовИЭлементовФормы(Форма, ТипФилиала);
	
	Форма.Модифицированность = Ложь;
	
КонецПроцедуры

// Сохраняет измененные настройки
//
// Параметры:
//  Филиал			 - СправочникСсылка.Филиалы	 - филиал-владелец настроек
//  НовыеЗначения	 - Массив	 - содержит структуры с данными сохраняемых настроек
//		* ИмяНастройки	 - Строка	 - имя настройки
//		* Значение		 - Произвольный	 - значение настройки, зависит от типа настройки
//
Процедура СохранитьИзмененныеНастройки(Филиал, НовыеЗначения) Экспорт
	
	Для Каждого СтруктураЗначения Из НовыеЗначения Цикл
		Если СтруктураЗначения.ИмяНастройки = "ДеревоВидовДеятельностиУслуг" Тогда
			СохранитьВидыДеятельностиУслуг(Филиал, СтруктураЗначения.Значение);
			
		ИначеЕсли СтруктураЗначения.ИмяНастройки = "ДиапазоныСложностиЗадач" Тогда
			СохранитьДиапазоныСложностиЗадач(Филиал, СтруктураЗначения.Значение);
			
		ИначеЕсли СтруктураЗначения.ИмяНастройки = "ИсполнителиCodeReview" Тогда
			СохранитьИсполнителейCodeReview(Филиал, СтруктураЗначения.Значение);
			
		ИначеЕсли СтруктураЗначения.ИмяНастройки = "УдаленыКомандыРазработчиков" Тогда
			ПометитьКомандыНаУдалениеИУдалитьУчастников(СтруктураЗначения.Значение);
			
		ИначеЕсли СтруктураЗначения.ИмяНастройки = "ТипыЗадач" Тогда
			СохранитьВидыЗадачФилиала(Филиал, СтруктураЗначения.Значение);
			
		ИначеЕсли СтруктураЗначения.ИмяНастройки = "ИзмененыСвойстваОбъекта" Тогда
			СохранитьИзмененияОбъекта(Филиал, СтруктураЗначения.Значение);
			
		ИначеЕсли СтруктураЗначения.ИмяНастройки = "ШаблоныЗаявок" Тогда
			СохранитьШаблоныЗаявок(Филиал, СтруктураЗначения.Значение);	
			
		ИначеЕсли ТипЗнч(СтруктураЗначения.ИмяНастройки) = Тип("СправочникСсылка.Мессенджеры") Тогда   
			
			ИспользуетсяИдентификатор = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(СтруктураЗначения.ИмяНастройки, 
				"ИспользуетсяИдентификатор");             
			Адрес = ?(ИспользуетсяИдентификатор, "", СтруктураЗначения.Значение);
			Идентификатор = ?(ИспользуетсяИдентификатор, СтруктураЗначения.Значение, "");
			СохранитьАдресМессенджера(Филиал, СтруктураЗначения.ИмяНастройки, Адрес, Идентификатор);			
		Иначе
			НастройкаСсылка = ПланыВидовХарактеристик.ВидыНастроекФилиалов[СтруктураЗначения.ИмяНастройки];
			РегистрыСведений.НастройкиФилиалов.СохранитьНастройку(Филиал, НастройкаСсылка, СтруктураЗначения.Значение);
			
			СохранятьИсториюИзменений = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаСсылка, "СохранятьИсториюИзменений");
			
			Если НастройкаСсылка = ПланыВидовХарактеристик.ВидыНастроекФилиалов.ФилиалТестирования 
				ИЛИ НастройкаСсылка = ПланыВидовХарактеристик.ВидыНастроекФилиалов.КомандаТестирования Тогда
				
				НовыеДанные = Новый Структура("ФилиалТестирования", СтруктураЗначения.Значение);
				ИнтеграцияДополнительныхПодсистем.ДобавитьЗаданиеПоПересчетуГабаритногоПланирования(Филиал, НовыеДанные);	
			КонецЕсли;
			
			Если СохранятьИсториюИзменений Тогда
				РегистрыСведений.ИсторияИзмененийНастроекФилиалов.СохранитьНастройку(Филиал, 
					НастройкаСсылка, СтруктураЗначения.Значение);	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Создает элементы формы и заполняет дерево разделов настрое
//
// Параметры:
//  Форма	 - УправляемаяФорма	 - форма настроек филиала
//
Процедура СформироватьЭлементыФормы(Форма, ОткрытьНастройкиПользователя = Ложь) Экспорт
	
	Запрос = Новый Запрос;	
	#Область ТекстЗапроса
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВидыНастроекФилиалов.Ссылка КАК Ссылка,
	|	ВидыНастроекФилиалов.Родитель КАК Родитель,
	|	ВидыНастроекФилиалов.ПорядокСледования КАК ПорядокСледования,
	|	ВидыНастроекФилиалов.Наименование КАК Наименование,
	|	ВидыНастроекФилиалов.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	ВидыНастроекФилиалов.ЭтоГруппа КАК ЭтоГруппа,
	|	ВидыНастроекФилиалов.ТипЗначения КАК ТипЗначения,
	|	ВидыНастроекФилиалов.Подсказка КАК Подсказка,
	|	ВидыНастроекФилиалов.ОтображатьКакПодраздел КАК ОтображатьКакПодраздел,
	|	ВидыНастроекФилиалов.ИспользоватьСписокВыбора КАК ИспользоватьСписокВыбора,
	|	ВидыНастроекФилиалов.Основной КАК Основной,
	|	ВидыНастроекФилиалов.ТребуетсяПерезапуск КАК ТребуетсяПерезапуск,
	|	ВидыНастроекФилиалов.ГлавныйРеквизит КАК ГлавныйРеквизит,
	|	ВидыНастроекФилиалов.ОтображатьЗаголовок КАК ОтображатьЗаголовок,
	|	ВидыНастроекФилиалов.ВариантГруппировки КАК ВариантГруппировки
	|ИЗ
	|	ПланВидовХарактеристик.ВидыНастроекФилиалов КАК ВидыНастроекФилиалов
	|ГДЕ
	|	НЕ ВидыНастроекФилиалов.ПометкаУдаления
	|	И НЕ ЕСТЬNULL(ВидыНастроекФилиалов.Скрытый, ЛОЖЬ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Мессенджеры.Ссылка,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.Основное),
	|	-1,
	|	""Адрес канала "" + Мессенджеры.Наименование,
	|	Мессенджеры.ИмяПредопределенныхДанных,
	|	ЛОЖЬ,
	|	ТИПЗНАЧЕНИЯ(ВЫРАЗИТЬ("""" КАК СТРОКА(100))),
	|	"""",
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	НЕОПРЕДЕЛЕНО,
	|	ИСТИНА,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	Справочник.Мессенджеры КАК Мессенджеры
	|ГДЕ
	|	НЕ Мессенджеры.ИспользуетсяИдентификатор
	|	И Мессенджеры.Ссылка = &ОсновнойМессенджер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Мессенджеры.Ссылка,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.Основное),
	|	-1,
	|	""Идентификатор канала "" + Мессенджеры.Наименование,
	|	Мессенджеры.ИмяПредопределенныхДанных,
	|	ЛОЖЬ,
	|	ТИПЗНАЧЕНИЯ(ВЫРАЗИТЬ("""" КАК СТРОКА(100))),
	|	"""",
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	НЕОПРЕДЕЛЕНО,
	|	ИСТИНА,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	Справочник.Мессенджеры КАК Мессенджеры
	|ГДЕ
	|	Мессенджеры.ИспользуетсяИдентификатор
	|	И Мессенджеры.Ссылка = &ОсновнойМессенджер
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокСледования,
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыНастроекФилиаловСписокВыбора.Ссылка КАК Ссылка,
	|	ВидыНастроекФилиаловСписокВыбора.НомерСтроки КАК НомерСтроки,
	|	ВидыНастроекФилиаловСписокВыбора.Значение КАК Значение,
	|	ВидыНастроекФилиаловСписокВыбора.Представление КАК Представление
	|ИЗ
	|	ПланВидовХарактеристик.ВидыНастроекФилиалов.СписокВыбора КАК ВидыНастроекФилиаловСписокВыбора
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТипыФилиалов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТипыФилиалов
	|ИЗ
	|	Перечисление.ТипыФилиалов КАК ТипыФилиалов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыНастроекФилиалов.Ссылка КАК Ссылка,
	|	ВидыНастроекФилиалов.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	ВЫБОР
	|		КОГДА ВидыНастроекФилиалов.ЭтоГруппа
	|					И ВидыНастроекФилиалов.Родитель = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.ПустаяСсылка)
	|				ИЛИ ВидыНастроекФилиалов.ОтображатьКакПодраздел
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоРаздел,
	|	ТипыФилиала.Ссылка КАК ТипФилиала
	|ПОМЕСТИТЬ ВсеВидыНастроек
	|ИЗ
	|	ПланВидовХарактеристик.ВидыНастроекФилиалов КАК ВидыНастроекФилиалов,
	|	ТипыФилиалов КАК ТипыФилиала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыНастроекФилиаловТипыФилиалов.Ссылка КАК Ссылка,
	|	ВидыНастроекФилиаловТипыФилиалов.ТипФилиала КАК ТипФилиала
	|ПОМЕСТИТЬ ВидыНастроекФилиаловСТипамиФилиалов
	|ИЗ
	|	ПланВидовХарактеристик.ВидыНастроекФилиалов.ТипыФилиалов КАК ВидыНастроекФилиаловТипыФилиалов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыНастроекФилиаловСТипамиФилиалов.Ссылка КАК Ссылка,
	|	ТипыФилиала.Ссылка КАК ТипФилиала
	|ПОМЕСТИТЬ ДополненныеТипамиВидыНастроекФилиалов
	|ИЗ
	|	ВидыНастроекФилиаловСТипамиФилиалов КАК ВидыНастроекФилиаловСТипамиФилиалов,
	|	ТипыФилиалов КАК ТипыФилиала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеВидыНастроек.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	ВсеВидыНастроек.ЭтоРаздел КАК ЭтоРаздел,
	|	ВсеВидыНастроек.ТипФилиала КАК ТипФилиала,
	|	ВЫБОР
	|		КОГДА ДополненныеТипамиВидыНастроекФилиалов.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		КОГДА ВидыНастроекФилиаловСТипамиФилиалов.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Отображать
	|ИЗ
	|	ВсеВидыНастроек КАК ВсеВидыНастроек
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДополненныеТипамиВидыНастроекФилиалов КАК ДополненныеТипамиВидыНастроекФилиалов
	|		ПО ВсеВидыНастроек.Ссылка = ДополненныеТипамиВидыНастроекФилиалов.Ссылка
	|			И ВсеВидыНастроек.ТипФилиала = ДополненныеТипамиВидыНастроекФилиалов.ТипФилиала
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыНастроекФилиаловСТипамиФилиалов КАК ВидыНастроекФилиаловСТипамиФилиалов
	|		ПО (ДополненныеТипамиВидыНастроекФилиалов.Ссылка = ВидыНастроекФилиаловСТипамиФилиалов.Ссылка)
	|			И (ДополненныеТипамиВидыНастроекФилиалов.ТипФилиала = ВидыНастроекФилиаловСТипамиФилиалов.ТипФилиала)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыНастроекФилиалов.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	|ИЗ
	|	ПланВидовХарактеристик.ВидыНастроекФилиалов КАК ВидыНастроекФилиалов
	|ГДЕ
	|	ВидыНастроекФилиалов.Основной";
	#КонецОбласти
	
	Если ОткрытьНастройкиПользователя Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВидыНастроекФилиалов.Основное", "ВидыНастроекПользователя.ПустаяСсылка");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВидыНастроекФилиалов", "ВидыНастроекПользователя");
		ОсновнойМессенджер = Справочники.Мессенджеры.ПустаяСсылка();
	Иначе
		ОсновнойМессенджер = Константы.ОсновнойМессенджер.Получить();
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ОсновнойМессенджер", ОсновнойМессенджер);
	Пакеты = Запрос.ВыполнитьПакет();
	
	НастройкиРезультатЗапроса = Пакеты.Получить(0);
	СписокВыбораРезультатЗапроса = Пакеты.Получить(1);
	НастройкиТиповФилиаловРезультатЗапроса = Пакеты.Получить(6);
	ОсновныеРеквизитыРезультатЗапроса = Пакеты.Получить(7);
	
	ТаблицаЗначений = НастройкиТиповФилиаловРезультатЗапроса.Выгрузить();
	ТаблицаЗначений.Колонки.Добавить("ИмяРеквизита", ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(200));
	
	Если НЕ НастройкиРезультатЗапроса.Пустой() Тогда
		ТаблицаНастроек = НастройкиРезультатЗапроса.Выгрузить();
		ДанныеСписокВыбора = СписокВыбораРезультатЗапроса.Выгрузить();
		
		СоздатьРеквизитыФормы(Форма, ТаблицаНастроек, ТаблицаЗначений);
		СоздатьЭлементыФормы(Форма, ТаблицаНастроек, ДанныеСписокВыбора, ОткрытьНастройкиПользователя);
	КонецЕсли;
	
	Форма.ДоступныеНастройки.Загрузить(ТаблицаЗначений);
	
	Если НЕ ОсновныеРеквизитыРезультатЗапроса.Пустой() Тогда
		Идентификатор = ОбщегоНазначенияКлиентСервер.СтрУникальныйИдентификатор(Форма.УникальныйИдентификатор);
		ВыборкаОсновныхРеквизитов = ОсновныеРеквизитыРезультатЗапроса.Выбрать();
		
		Пока ВыборкаОсновныхРеквизитов.Следующий() Цикл
			ИмяРеквизита = СтрШаблон("%1_%2", ВыборкаОсновныхРеквизитов.ИмяПредопределенныхДанных, Идентификатор);
			Форма.ОсновныеЭлементы.Добавить(ИмяРеквизита);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Очищает сохраненные настройки в регистре и заново перечитывает их
//
// Параметры:
//  Форма	 - УправляемаяФорма	 - форма настроек филиала
//
Процедура УстановитьВидыДеятельностиУслугПоУмолчанию(Форма) Экспорт
	
	ЗаполнитьНастройкиВидовДеятельностейУслуг(Форма);
	
КонецПроцедуры

// Заполняет значения реквизитов формы значениями настроек
//
// Параметры:
//  Форма			 - УправляемаяФормы	 - форма управления настройками
//  РезультатЗапроса - РезультатЗапроса	 - результат запроса с настройками. Обязательно должен содержать колонки
//  	* ИмяПредопределенныхДанных	 - Строка	 - имя предопределенной настройки филиала из ПВХ.ВидыНастроекФилиала
//  	* Значение	 - Характеристика.ВидыНастроекФилиала	 - значение настройки
//
Процедура УстановитьЗначенияРеквизитам(Форма, Знач РезультатЗапроса) Экспорт
	
	ИдентификаторФормы = ОбщегоНазначенияКлиентСервер.СтрУникальныйИдентификатор(Форма.УникальныйИдентификатор);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ИмяРеквизита = СтрШаблон("%1_%2", Выборка.ИмяПредопределенныхДанных, ИдентификаторФормы);
		Форма[ИмяРеквизита] = Выборка.Значение;
		РаботаСНастройкамиКлиентСервер.ОбновитьЗависимыеЭлементыНастроекПользователя(Форма, ИмяРеквизита);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает элементам формы параметры выбора элементов для списков выбора
//
// Параметры:
//  Форма	 - УправляемаяФорма	 - форма настроек филиалов
//
Процедура УстановитьПараметрыВыбора(Форма) Экспорт
	
	Филиал = Форма.Филиал;
	Элементы = Форма.Элементы;	
	Идентификатор = ОбщегоНазначенияКлиентСервер.СтрУникальныйИдентификатор(Форма.УникальныйИдентификатор);

	ИнтеграцияДополнительныхПодсистем.УстановитьПараметрыВыбораДоскиTrello(Форма, Идентификатор);
	
	// Ревьюер
	ИмяЭлемента = СтрШаблон("ИсполнителиCodeReview_%1_Ревьюер", Идентификатор);
	НайденныйЭлемент = Элементы.Найти(ИмяЭлемента);
	
	Если НайденныйЭлемент <> Неопределено Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Филиал", ПараметрыСеанса.СвязанныеФилиалы);
	
		НовыеПараметрыВыбора = Новый Массив;
		НовыеПараметрыВыбора.Добавить(НовыйПараметр);
		
		ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметрыВыбора);
		НайденныйЭлемент.ПараметрыВыбора = ПараметрыВыбора;
	КонецЕсли;
	
КонецПроцедуры

// Удаляет пользовательские настройки отбора, которые пересекаются с фиксированными настройками.
// Используется в формах с динамическим списком, которые могут открываться с фиксированными настройками отбора,
// переданными в параметры открытия формы.
//
// Параметры:
//  ПользовательскиеНастройки - ПользовательскиеНастройкиКомпоновкиДанных. 
//  ФиксированныеНастройки - НастройкиКомпоновкиДанных.
//
Процедура УдалитьКонфликтующиеНастройкиДинамическогоСписка(ПользовательскиеНастройки, ФиксированныеНастройки) Экспорт
	
	// Если форма открывается без фиксированных настроек, то нет необходимости обрабатывать пользовательские настройки.
	Если ФиксированныеНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыПользовательскихНастроек = ПользовательскиеНастройки.Элементы; 
	
	ПоляФиксированногоОтбора = Новый Массив; 
	ФиксированныеНастройкиОтбора = ФиксированныеНастройки.Отбор.Элементы;
	Для Каждого Элемент Из ФиксированныеНастройкиОтбора Цикл
		ПоляФиксированногоОтбора.Добавить(Элемент.ЛевоеЗначение);	
	КонецЦикла;
	
	Если ПоляФиксированногоОтбора.Количество() > 0 Тогда 
		Для Каждого ЭлементНастройки Из ЭлементыПользовательскихНастроек Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ОтборКомпоновкиДанных") Тогда 
				ЭлементыОтбора = ЭлементНастройки.Элементы;
				УдалитьПользовательскиеНастройкиОтбора(ЭлементыОтбора, ПоляФиксированногоОтбора);					
			КонецЕсли; 		
		КонецЦикла;  
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДополнительныеОбъектыРазделов()
	
	ДополнительныеОбъекты = Новый ТаблицаЗначений;
	ДополнительныеОбъекты.Колонки.Добавить("Раздел");
	ДополнительныеОбъекты.Колонки.Добавить("ИмяОбъекта");
	
	НоваяСтрока = ДополнительныеОбъекты.Добавить();
	НоваяСтрока.Раздел = "АвтопулЗадач";
	НоваяСтрока.ИмяОбъекта = "ДиапазоныСложностиЗадач";
	
	НоваяСтрока = ДополнительныеОбъекты.Добавить();
	НоваяСтрока.Раздел = "CodeReview";
	НоваяСтрока.ИмяОбъекта = "ИсполнителиРевью";
	
	НоваяСтрока = ДополнительныеОбъекты.Добавить();
	НоваяСтрока.Раздел = "СотрудникиФилиала";
	НоваяСтрока.ИмяОбъекта = "СотрудникиФилиала";
	
	НоваяСтрока = ДополнительныеОбъекты.Добавить();
	НоваяСтрока.Раздел = "ПроцессРазработки";
	НоваяСтрока.ИмяОбъекта = "ШаблоныЗаявок";
	
	Возврат ДополнительныеОбъекты;
	
КонецФункции

Процедура ЗаполнитьДиапазоныСложностиЗадач(Форма)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЛичныеДелаСрезПоследних.Сотрудник КАК Пользователь
	|ПОМЕСТИТЬ СотрудникиФилиала
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(&ТекущаяДата, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаСрезПоследних
	|ГДЕ
	|	(ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы)) = &Филиал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Пользователи.Должность КАК Должность
	|ПОМЕСТИТЬ ДолжностиФилиала
	|ИЗ
	|	СотрудникиФилиала КАК СотрудникиФилиала
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО СотрудникиФилиала.Пользователь = Пользователи.Ссылка
	|ГДЕ
	|	НЕ Пользователи.Недействителен
	|	И НЕ Пользователи.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДиапазоныСложностиЗадачДляДолжностей.Должность КАК Должность,
	|	ДиапазоныСложностиЗадачДляДолжностей.МаксимальнаяСложность КАК МаксимальнаяСложность,
	|	ДиапазоныСложностиЗадачДляДолжностей.МинимальнаяСложность КАК МинимальнаяСложность
	|ПОМЕСТИТЬ ДиапазоныФилиала
	|ИЗ
	|	РегистрСведений.ДиапазоныСложностиЗадачДляДолжностей КАК ДиапазоныСложностиЗадачДляДолжностей
	|ГДЕ
	|	ДиапазоныСложностиЗадачДляДолжностей.Филиал = &Филиал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДиапазоныФилиала.Должность, ДолжностиФилиала.Должность) КАК Должность,
	|	ЕСТЬNULL(ДиапазоныФилиала.МаксимальнаяСложность, 0) КАК МаксимальнаяСложность,
	|	ЕСТЬNULL(ДиапазоныФилиала.МинимальнаяСложность, 0) КАК МинимальнаяСложность
	|ИЗ
	|	ДолжностиФилиала КАК ДолжностиФилиала
	|		ПОЛНОЕ СОЕДИНЕНИЕ ДиапазоныФилиала КАК ДиапазоныФилиала
	|		ПО ДолжностиФилиала.Должность = ДиапазоныФилиала.Должность";
	
	Запрос.УстановитьПараметр("Филиал", Форма.Филиал);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Форма.ДиапазоныСложностиЗадач.Загрузить(РезультатЗапроса.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИсполнителейCodeReview(Форма)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЛичныеДелаСрезПоследних.Сотрудник КАК Пользователь
	|ПОМЕСТИТЬ ТекущиеСотрудникиФилиала
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(&ТекущаяДата, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаСрезПоследних
	|ГДЕ
	|	(ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы)) = &Филиал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.Наименование КАК ПредставлениеПользователя
	|ПОМЕСТИТЬ СотрудникиФилиала
	|ИЗ
	|	ТекущиеСотрудникиФилиала КАК ТекущиеСотрудникиФилиала
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ТекущиеСотрудникиФилиала.Пользователь = Пользователи.Ссылка
	|ГДЕ
	|	НЕ Пользователи.Недействителен
	|	И НЕ Пользователи.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиФилиала.Пользователь КАК Сотрудник,
	|	ЕСТЬNULL(ЗначенияДополнительныхРеквизитовОбъектов.Значение, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Ревьюер
	|ИЗ
	|	СотрудникиФилиала КАК СотрудникиФилиала
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияДополнительныхРеквизитовОбъектов КАК ЗначенияДополнительныхРеквизитовОбъектов
	|		ПО (СотрудникиФилиала.Пользователь = (ВЫРАЗИТЬ(ЗначенияДополнительныхРеквизитовОбъектов.Объект КАК Справочник.Пользователи)))
	|			И (ЗначенияДополнительныхРеквизитовОбъектов.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДополнительныхРеквизитов.РевьюерОбъекта))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СотрудникиФилиала.ПредставлениеПользователя";
	
	Запрос.УстановитьПараметр("Филиал", Форма.Филиал);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ЗначениеВДанныеФормы(РезультатЗапроса.Выгрузить(), Форма.ИсполнителиCodeReview);
	Иначе
		Форма.ИсполнителиCodeReview.Очистить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиВидовДеятельностейУслуг(Форма)
	
	// В данной ситуации не получится использовать метод
	// РеквизитФормыВЗначение(). Вместо него используется
	// ДанныеФормыВЗначение(), на который ругается феникс
	
	// BSLLS:FormDataToValue-off
	Дерево = ДанныеФормыВЗначение(Форма.ДеревоВидовДеятельностиУслуг, Тип("ДеревоЗначений"));
	// BSLLS:FormDataToValue-on
	
	Дерево.Строки.Очистить();
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыДеятельностиУслуг.Услуга КАК Услуга,
	|	СправочникУслуги.КраткоеНаименование КАК УслугаПредставление,
	|	ДоступныеУслугиФилиалов.ВидДеятельностиУслуги КАК ВидДеятельностиУслуги,
	|	ДоступныеУслугиФилиалов.Использование КАК Использование,
	|	ДоступныеУслугиФилиалов.Порядок КАК Порядок,
	|	ДоступныеУслугиФилиалов.Порядок КАК ПолеУпорядочивания
	|ПОМЕСТИТЬ ДоступныеУслугиФилиала
	|ИЗ
	|	РегистрСведений.ДоступныеУслугиФилиалов КАК ДоступныеУслугиФилиалов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДеятельностиУслуг КАК ВидыДеятельностиУслуг
	|		ПО (ВидыДеятельностиУслуг.Ссылка = ДоступныеУслугиФилиалов.ВидДеятельностиУслуги)
	|			И (ДоступныеУслугиФилиалов.Филиал = &Филиал)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Услуги КАК СправочникУслуги
	|		ПО (ВидыДеятельностиУслуг.Услуга = СправочникУслуги.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УслугиДолжности.Ссылка КАК Услуга,
	|	СправочникУслуги.КраткоеНаименование КАК УслугаПредставление,
	|	ВидыДеятельностиУслуг.Ссылка КАК ВидыДеятельностиУслуг,
	|	ЛОЖЬ КАК Использование,
	|	0 КАК Порядок,
	|	СправочникУслуги.КраткоеНаименование КАК ПолеУпорядочивания
	|ПОМЕСТИТЬ УслугиДолжности
	|ИЗ
	|	Справочник.Услуги.Должности КАК УслугиДолжности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (Пользователи.Должность = УслугиДолжности.Должность)
	|			И (Пользователи.Филиал = &Филиал)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Услуги КАК СправочникУслуги
	|		ПО (СправочникУслуги.Ссылка = УслугиДолжности.Ссылка)
	|			И (НЕ СправочникУслуги.ПометкаУдаления)
	|			И (НЕ СправочникУслуги.ФиксированныйТариф)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Услуги.ВидыДеятельности КАК УслугиВидыДеятельности
	|		ПО УслугиДолжности.Ссылка = УслугиВидыДеятельности.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДеятельностиУслуг КАК ВидыДеятельностиУслуг
	|		ПО (ВидыДеятельностиУслуг.Услуга = УслугиВидыДеятельности.Ссылка)
	|			И (ВидыДеятельностиУслуг.ВидДеятельности = УслугиВидыДеятельности.ВидДеятельности)
	|			И (НЕ ВидыДеятельностиУслуг.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоступныеУслугиФилиала КАК ДоступныеУслугиФилиала
	|		ПО (ДоступныеУслугиФилиала.Услуга = УслугиДолжности.Ссылка)
	|			И (ВидыДеятельностиУслуг.Ссылка = ДоступныеУслугиФилиала.ВидДеятельностиУслуги)
	|ГДЕ
	|	ДоступныеУслугиФилиала.Услуга ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеУслугиФилиала.ВидДеятельностиУслуги КАК ВидДеятельностиУслуги,
	|	ДоступныеУслугиФилиала.УслугаПредставление КАК Услуга,
	|	ПРЕДСТАВЛЕНИЕ(ДоступныеУслугиФилиала.ВидДеятельностиУслуги) КАК ВидДеятельности,
	|	ДоступныеУслугиФилиала.Использование КАК Использование,
	|	ДоступныеУслугиФилиала.Порядок КАК Порядок,
	|	ДоступныеУслугиФилиала.ПолеУпорядочивания КАК ПолеУпорядочивания
	|ИЗ
	|	ДоступныеУслугиФилиала КАК ДоступныеУслугиФилиала
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УслугиДолжности.ВидыДеятельностиУслуг,
	|	УслугиДолжности.УслугаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(УслугиДолжности.ВидыДеятельностиУслуг),
	|	УслугиДолжности.Использование,
	|	УслугиДолжности.Порядок,
	|	УслугиДолжности.ПолеУпорядочивания
	|ИЗ
	|	УслугиДолжности КАК УслугиДолжности
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолеУпорядочивания
	|ИТОГИ ПО
	|	Услуга";
	
	Запрос.УстановитьПараметр("Филиал", Форма.Филиал);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаУслуга = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаУслуга.Следующий() Цикл
			СтрокаУслуги = Дерево.Строки.Добавить();
			СтрокаУслуги.Представление = ВыборкаУслуга.Услуга;
			СтрокаУслуги.ЭтоУслуга = Истина;
			СтрокаУслуги.Порядок = ВыборкаУслуга.Порядок;
			
			Включено = 0;
			Выключено = 0;
			
			Выборка = ВыборкаУслуга.Выбрать();
			Пока Выборка.Следующий() Цикл
				СтрокаВидаДеятельности = СтрокаУслуги.Строки.Добавить();
				СтрокаВидаДеятельности.Представление = Выборка.ВидДеятельности;
				СтрокаВидаДеятельности.ЭтоУслуга = Ложь;
				СтрокаВидаДеятельности.Порядок = Выборка.Порядок;
				СтрокаВидаДеятельности.ВидДеятельностиУслуги = Выборка.ВидДеятельностиУслуги;
				СтрокаВидаДеятельности.Использование = Выборка.Использование;
				
				Если Выборка.Использование Тогда
					Включено = Включено + 1;
				Иначе
					Выключено = Выключено + 1;
				КонецЕсли;
			КонецЦикла;
			
			ОбщееКоличество = Выборка.Количество();
			СтрокаУслуги.Использование = ПолучитьИспользованиеРодительскойСтроки(ОбщееКоличество, Включено, Выключено);
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеВДанныеФормы(Дерево, Форма.ДеревоВидовДеятельностиУслуг);
	
КонецПроцедуры

Процедура ЗаполнитьСвязанныеФилиалы(Форма, Знач РезультатЗапроса)
	
	ТаблицаФилиалов = Форма.СвязанныеФилиалы;
	ТаблицаФилиалов.Очистить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда       
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаФилиалов.Добавить(), Выборка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСотрудниковФилиала(Форма)
	
	ТаблицаСотрудников = Форма.СотрудникиФилиала;
	ТаблицаСотрудников.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛичныеДелаСрезПоследних.Сотрудник КАК Сотрудник,
	|	ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы) КАК Филиал
	|ПОМЕСТИТЬ ПользователиФилиала
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(&ТекущаяДата, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаСрезПоследних
	|ГДЕ
	|	(ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы)) = &Филиал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Сотрудник,
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторИБ,
	|	ЕСТЬNULL(РолиПоНаправлениям.Роль, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) КАК Роль
	|ИЗ
	|	ПользователиФилиала КАК ПользователиФилиала
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ПользователиФилиала.Сотрудник = Пользователи.Ссылка
	|			И (НЕ Пользователи.Недействителен)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО ПользователиФилиала.Филиал = Филиалы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиФилиалов КАК НастройкиФилиалов
	|		ПО (Филиалы.Ссылка = НастройкиФилиалов.Филиал)
	|			И (НастройкиФилиалов.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.НаправлениеРазработки))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиПользователейПоНаправлениям КАК РолиПоНаправлениям
	|		ПО ((ВЫРАЗИТЬ(НастройкиФилиалов.Значение КАК Справочник.НаправленияРазработки)) = РолиПоНаправлениям.НаправлениеРазработки)
	|			И (Пользователи.Ссылка = РолиПоНаправлениям.Пользователь)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователи.Наименование";
	
	Запрос.УстановитьПараметр("Филиал", Форма.Филиал);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаСотрудников.Добавить();
			НоваяСтрока.Сотрудник = Выборка.Сотрудник;
			НоваяСтрока.Роль = Выборка.Роль;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбора(Знач Ссылка, ДанныеСписковВыбора, НовыйЭлемент)
	
	ОтборСтрок = Новый Структура("Ссылка", Ссылка);
	НайденныеСтроки = ДанныеСписковВыбора.НайтиСтроки(ОтборСтрок);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		НовыйЭлемент.РежимВыбораИзСписка = Истина;
		СписокВыбора = НовыйЭлемент.СписокВыбора;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(СписокВыбора.Добавить(), НайденнаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	НовыйЭлемент.КнопкаВыбора = Ложь;
	НовыйЭлемент.КнопкаСоздания = Ложь;
	НовыйЭлемент.КнопкаВыпадающегоСписка = Истина;
	НовыйЭлемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	
КонецПроцедуры

Процедура ЗаполнитьСписок(Список, РезультатЗапроса)
	
	Список.Очистить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Список.Добавить(Выборка.Ссылка, Выборка.Наименование);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьЭлементГруппыЗаполненияДокументов(Знач Ссылка, НовыйЭлемент)
	
	НовыйЭлемент.КнопкаВыбора = Ложь;
	НовыйЭлемент.КнопкаСоздания = Ложь;
	НовыйЭлемент.КнопкаВыпадающегоСписка = Истина;
	НовыйЭлемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	НовыйЭлемент.РедактированиеТекста = Ложь;
	
	ТипЗначенияНастройки = Ссылка.ТипЗначения;
	
	Если ТипЗначенияНастройки.СодержитТип(Тип("СправочникСсылка.НаправленияРазработки")) Тогда
		ТаблицаНаправленийРолей = Пользователи.ТаблицаНаправленийРолейПользователя();
		НовыйЭлемент.СписокВыбора.ЗагрузитьЗначения(ТаблицаНаправленийРолей.СписокНаправлений.ВыгрузитьЗначения());
		
	ИначеЕсли ТипЗначенияНастройки.СодержитТип(Тип("СправочникСсылка.ЮридическиеЛица")) Тогда
		НовыйЭлемент.Доступность = Ложь;
		НовыйЭлемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
		
	ИначеЕсли ТипЗначенияНастройки.СодержитТип(Тип("ПеречислениеСсылка.ВидыПроцессов")) Тогда
		НовыйЭлемент.Доступность = Ложь;
		
	ИначеЕсли ТипЗначенияНастройки.СодержитТип(Тип("СправочникСсылка.ГруппыЗаказчиковНаправлений")) Тогда
		НовыйЭлемент.КнопкаВыбора = Истина;
		НовыйЭлемент.Доступность = Ложь;
		НовыйЭлемент.КнопкаОчистки = Истина;
		
	ИначеЕсли ТипЗначенияНастройки.СодержитТип(Тип("СправочникСсылка.НазначенияЗадач")) Тогда
		НовыйЭлемент.КнопкаОткрытия = Ложь;
		НовыйЭлемент.РедактированиеТекста = Ложь;
		НовыйЭлемент.РежимВыбораИзСписка = Истина;
		
		ОбщегоНазначения.ЗаполнитьСписокНазначений(НовыйЭлемент.СписокВыбора);
		
	ИначеЕсли ТипЗначенияНастройки.СодержитТип(Тип("СправочникСсылка.СистемыУчета"))
			ИЛИ ТипЗначенияНастройки.СодержитТип(Тип("СправочникСсылка.Пользователи"))
			ИЛИ ТипЗначенияНастройки.СодержитТип(Тип("СправочникСсылка.Продукты")) Тогда
		
		НовыйЭлемент.КнопкаВыбора = Истина;
		НовыйЭлемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.Авто;
		НовыйЭлемент.КнопкаОчистки = Истина;
		
	ИначеЕсли ТипЗначенияНастройки.СодержитТип(Тип("СправочникСсылка.ВидыЗадач")) Тогда
		ВидыЗадач = РегистрыСведений.ВидыЗадачФилиалов.ПолучитьВидыЗадач(ПараметрыСеанса.Филиал);
		
		НовыйЭлемент.СписокВыбора.ЗагрузитьЗначения(ВидыЗадач);
		НовыйЭлемент.Видимость = (ВидыЗадач.Количество() <> 0);
	КонецЕсли;
	
КонецПроцедуры

Функция НастроитьВидимостьПоЭлементамСтраницы(Форма, ПодчиненныйРаздел)
	
	Элементы = Форма.Элементы;
	Видимость = Ложь;
	
	Если ПодчиненныйРаздел.Отображать Тогда
		ИмяСтраницы = ПодчиненныйРаздел.Идентификатор;
		
		НайденнаяСтраница = Элементы.Найти(ИмяСтраницы);
		Если НайденнаяСтраница <> Неопределено Тогда
			Для Каждого ПодчиненныйЭлемент Из НайденнаяСтраница.ПодчиненныеЭлементы Цикл
				Если ПодчиненныйЭлемент.Видимость Тогда
					Видимость = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого ПодчиненныйЭлемент Из ПодчиненныйРаздел.ПолучитьЭлементы() Цикл
			Видимость = Видимость ИЛИ НастроитьВидимостьПоЭлементамСтраницы(Форма, ПодчиненныйЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	ПодчиненныйРаздел.Отображать = Видимость;
	
	Возврат Видимость;
	
КонецФункции

Функция НастроитьОтображениеРаздела(Источник, СтрокаРаздела)
	
	Результат = Ложь;
	
	Если Источник.ИмяПредопределенныхДанных = СтрокаРаздела.ИмяПредопределенныхДанных Тогда
		Результат = Истина;
		Источник.Отображать = СтрокаРаздела.Отображать;
	Иначе
		Для Каждого ПодчиненныйЭлемент Из Источник.ПолучитьЭлементы() Цикл
			Результат = НастроитьОтображениеРаздела(ПодчиненныйЭлемент, СтрокаРаздела);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НаходитсяВГруппеЗаполненияДокументов(ПроверяемаяНастройка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыНастроекПользователя.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ВидыНастроекПользователя КАК ВидыНастроекПользователя
	|ГДЕ
	|	ВидыНастроекПользователя.Ссылка = &Ссылка
	|	И ВидыНастроекПользователя.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ЗаполнениеДокументов))";
	
	Запрос.УстановитьПараметр("Ссылка", ПроверяемаяНастройка);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ОбновитьОтображениеРазделовИЭлементовФормы(Форма, Знач ТипФилиала)
	
	Элементы = Форма.Элементы;
	ДеревоРазделов = Форма.ДеревоРазделов;
	
	ОтборСтрок = Новый Структура("ТипФилиала", ТипФилиала);
	
	// В данной ситуации не получится использовать метод
	// РеквизитФормыВЗначение(). Вместо него используется
	// ДанныеФормыВЗначение(), на который ругается феникс
	
	// BSLLS:FormDataToValue-off
	ТаблицаЗначений = ДанныеФормыВЗначение(Форма.ДоступныеНастройки, Тип("ТаблицаЗначений"));
	// BSLLS:FormDataToValue-on
	
	ДанныеНастроекДляФилиала = ТаблицаЗначений.Скопировать(ОтборСтрок);
	
	ОтборСтрок.Очистить();
	ОтборСтрок.Вставить("ЭтоРаздел", Ложь);
	
	СтрокиРеквизитов = ДанныеНастроекДляФилиала.НайтиСтроки(ОтборСтрок);
	
	Для Каждого СтрокаРеквизита Из СтрокиРеквизитов Цикл
		НайденныйЭлемент = Элементы.Найти(СтрокаРеквизита.ИмяРеквизита);
		
		Если НайденныйЭлемент <> Неопределено Тогда
			НайденныйЭлемент.Видимость = СтрокаРеквизита.Отображать;
		КонецЕсли;
	КонецЦикла;
	
	ОтборСтрок.ЭтоРаздел = Истина;
	СтрокиРазделов = ДанныеНастроекДляФилиала.НайтиСтроки(ОтборСтрок);
	
	Для Каждого СтрокаРаздела Из СтрокиРазделов Цикл
		Для Каждого СтрокаДерева Из ДеревоРазделов.ПолучитьЭлементы() Цикл
			ПрекратитьПоиск = НастроитьОтображениеРаздела(СтрокаДерева, СтрокаРаздела);
		КонецЦикла;
	КонецЦикла;
	
	УстановитьВидимостьРазделовПоЭлементамСтраниц(Форма);
	
КонецПроцедуры

Процедура ОбновитьСпискиВыбора(Форма)
	
	Элементы = Форма.Элементы;
	Филиал = Форма.Филиал;
	Идентификатор = ОбщегоНазначенияКлиентСервер.СтрУникальныйИдентификатор(Форма.УникальныйИдентификатор);
	
	ОбновитьСписокВыбораЗаместителя(Филиал, Элементы.ЗаместительРуководителя);	
	
КонецПроцедуры

Процедура ОбновитьСписокВыбораЗаместителя(Знач Филиал, Элемент)
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Филиал", Филиал));
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
	
КонецПроцедуры

Функция ПолучитьИспользованиеРодительскойСтроки(Знач Всего, Знач Включено, Знач Выключено)
	
	Если Включено = Всего Тогда
		Результат = 1;
	ИначеЕсли Выключено = Всего Тогда
		Результат = 0;
	Иначе
		Результат = 2;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПометитьКомандыНаУдалениеИУдалитьУчастников(Знач УдаляемыеКоманды)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЛичныеДелаСрезПоследних.Сотрудник КАК Пользователь
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВКоманду)) КАК ЛичныеДелаСрезПоследних
	|ГДЕ
	|	ЛичныеДелаСрезПоследних.Данные В (&УдаляемыеКоманды)";
	
	Запрос.УстановитьПараметр("УдаляемыеКоманды", УдаляемыеКоманды);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.ЛичныеДела.ПереводВКоманду(Выборка.Пользователь, Справочники.Филиалы.ПустаяСсылка());
	КонецЦикла;
	
	Для Каждого УдаляемаяКоманда Из УдаляемыеКоманды Цикл
		ФилиалОбъект = УдаляемаяКоманда.ПолучитьОбъект();
		ФилиалОбъект.ПометкаУдаления = Истина;
		ФилиалОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьГруппуФормы(Элементы, Строка, Идентификатор, Владелец, Настройки, ДанныеСписковВыбора)
	
	ИмяГруппы = СтрШаблон("Группа_%1_%2", Строка.ИмяПредопределенныхДанных, Идентификатор);
	
	Если Элементы.Найти(ИмяГруппы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяГруппа = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Владелец);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Заголовок = Строка.Наименование;
	НоваяГруппа.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
	НоваяГруппа.ОтображатьЗаголовок = Строка.ОтображатьЗаголовок;
	
	Если Строка.ОтображатьЗаголовок Тогда
		НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	КонецЕсли;
	
	Если Строка.ВариантГруппировки = "Горизонтальная" Тогда
		НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	Иначе
		НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("Родитель", Строка.Ссылка);
	НайденныеСтроки = Настройки.НайтиСтроки(ОтборСтрок);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.ЭтоГруппа Тогда
			СоздатьГруппуФормы(Элементы, НайденнаяСтрока, Идентификатор, НоваяГруппа, Настройки, ДанныеСписковВыбора);
		Иначе
			СоздатьЭлементФормы(Элементы, НайденнаяСтрока, Идентификатор, НоваяГруппа, Настройки, ДанныеСписковВыбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьДополнительныеОбъектыРазделов(ДобавляемыеРеквизиты)
	
	// Диапазоны сложности задач
	ИмяТаблицы = "ДиапазоныСложностиЗадач";
	ОписаниеТипаЧисло = ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный);	
	ОписаниеТипаДолжности = Новый ОписаниеТипов("СправочникСсылка.Должности");
	
	ТаблицаРеквизит = Новый РеквизитФормы(ИмяТаблицы, Новый ОписаниеТипов("ТаблицаЗначений"));
	КолонкаДолжность = Новый РеквизитФормы("Должность", ОписаниеТипаДолжности, ИмяТаблицы, "Должность");
	КолонкаМинимальнаяСложность = Новый РеквизитФормы("МинимальнаяСложность", ОписаниеТипаЧисло, ИмяТаблицы, "Минимальная");
	КолонкаМаксимальнаяСложность = Новый РеквизитФормы("МаксимальнаяСложность", ОписаниеТипаЧисло, ИмяТаблицы, "Максимальная");
	
	ДобавляемыеРеквизиты.Добавить(ТаблицаРеквизит);
	ДобавляемыеРеквизиты.Добавить(КолонкаДолжность);
	ДобавляемыеРеквизиты.Добавить(КолонкаМинимальнаяСложность);
	ДобавляемыеРеквизиты.Добавить(КолонкаМаксимальнаяСложность);
	
	// Исполнители code review
	ИмяТаблицы = "ИсполнителиCodeReview";
	ОписаниеТипаПользователь = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	
	ТаблицаРеквизит = Новый РеквизитФормы(ИмяТаблицы, Новый ОписаниеТипов("ТаблицаЗначений"));
	КолонкаСотрудник = Новый РеквизитФормы("Сотрудник", ОписаниеТипаПользователь, ИмяТаблицы, "Сотрудник");
	КолонкаРевьюер = Новый РеквизитФормы("Ревьюер", ОписаниеТипаПользователь, ИмяТаблицы, "Ревьюер");
	
	ДобавляемыеРеквизиты.Добавить(ТаблицаРеквизит);
	ДобавляемыеРеквизиты.Добавить(КолонкаСотрудник);
	ДобавляемыеРеквизиты.Добавить(КолонкаРевьюер);
	
	// Сотрудники филиала
	ИмяТаблицы = "СотрудникиФилиала";
	ОписаниеТипаРоли = Новый ОписаниеТипов("СправочникСсылка.РолиПользователей");
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ИмяКолонки = "Проектная деятельность";
	
	ТаблицаРеквизит = Новый РеквизитФормы(ИмяТаблицы, Новый ОписаниеТипов("ТаблицаЗначений"));
	КолонкаСотрудник = Новый РеквизитФормы("Сотрудник", ОписаниеТипаПользователь, ИмяТаблицы, "Сотрудник");
	КолонкаРоль = Новый РеквизитФормы("Роль", ОписаниеТипаРоли, ИмяТаблицы, "Роль");
	
	ДобавляемыеРеквизиты.Добавить(ТаблицаРеквизит);
	ДобавляемыеРеквизиты.Добавить(КолонкаСотрудник);
	ДобавляемыеРеквизиты.Добавить(КолонкаРоль);
	
	// Шаблоны заявок на разработку
	ИмяРеквизита = "ШаблоныЗаявок";
	ОписаниеТипаРеквизита = Новый ОписаниеТипов("СписокЗначений"); 
	РеквизитШаблон = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипаРеквизита, , "Шаблоны заявок на разработку");
	ДобавляемыеРеквизиты.Добавить(РеквизитШаблон);
	
КонецПроцедуры

Процедура СоздатьЗависящиеНастройки(Элементы, Строка, Настройки, Идентификатор, ДанныеСписковВыбора, Владелец)
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("ГлавныйРеквизит", Строка.Ссылка);
	
	// Поиск зависящих настроек
	ЗависящиеНастройки = Настройки.НайтиСтроки(ОтборСтрок);
	
	// Если для настройки есть зависящие настройки
	Если ЗависящиеНастройки.Количество() > 0 Тогда
		
		// Создание подчиненной группы для хранения разделителя и группы зависимых настроек
		ИмяПодчиненнойГруппы = СтрШаблон("%1_%2_Подчиненные", Строка.ИмяПредопределенныхДанных, Идентификатор);
		
		ПодчиненнаяГруппа = Элементы.Добавить(ИмяПодчиненнойГруппы, Тип("ГруппаФормы"), Владелец);
		ПодчиненнаяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ПодчиненнаяГруппа.ОтображатьЗаголовок = Ложь;
		ПодчиненнаяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ПодчиненнаяГруппа.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
		ПодчиненнаяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
		
		ИмяЭлементаОтступа = СтрШаблон("%1_%2_Отступ", Строка.ИмяПредопределенныхДанных, Идентификатор);
		ЭлементОтступа = Элементы.Добавить(ИмяЭлементаОтступа, Тип("ДекорацияФормы"), ПодчиненнаяГруппа);
		ЭлементОтступа.Вид = ВидДекорацииФормы.Картинка;
		ЭлементОтступа.Ширина = 1;
		ЭлементОтступа.Высота = 1;
		
		ИмяГруппы = СтрШаблон("%1_%2_ГруппаНастроек", Строка.ИмяПредопределенныхДанных, Идентификатор);
		ГруппаНастроек = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ПодчиненнаяГруппа);
		ГруппаНастроек.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаНастроек.ОтображатьЗаголовок = Ложь;
		ГруппаНастроек.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаНастроек.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
		ГруппаНастроек.Отображение = ОтображениеОбычнойГруппы.Нет;
		
		Для Каждого ЗависящаяНастройка Из ЗависящиеНастройки Цикл
			Если ЗависящаяНастройка.ЭтоГруппа Тогда
				СоздатьГруппуФормы(Элементы, ЗависящаяНастройка, Идентификатор, ГруппаНастроек, Настройки, ДанныеСписковВыбора);
			Иначе
				СоздатьЭлементФормы(Элементы, ЗависящаяНастройка, Идентификатор, ГруппаНастроек, Настройки, ДанныеСписковВыбора);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьРеквизитыФормы(Форма, Знач ТаблицаРеквизитов, ДоступныеНастройки)
	
	ИдентификаторФормы = ОбщегоНазначенияКлиентСервер.СтрУникальныйИдентификатор(Форма.УникальныйИдентификатор);
	ДобавляемыеРеквизиты = Новый Массив;
	
	Отбор = Новый Структура("ИмяПредопределенныхДанных");
	
	Для Каждого СтрокаРеквизита Из ТаблицаРеквизитов Цикл
		Если НЕ СтрокаРеквизита.ЭтоГруппа Тогда
			ИмяРеквизита = СтрШаблон("%1_%2", СтрокаРеквизита.ИмяПредопределенныхДанных, ИдентификаторФормы);
			
			Если ТипЗнч(СтрокаРеквизита.ТипЗначения) = Тип("Тип") Тогда  
				Массив = Новый Массив;
				Массив.Добавить(СтрокаРеквизита.ТипЗначения);
				Описание = Новый ОписаниеТипов(Массив);
				СтрокаРеквизита.ТипЗначения = Описание;
			Иначе  
				Описание = СтрокаРеквизита.ТипЗначения;
			КонецЕсли;
			
			НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, СтрокаРеквизита.ТипЗначения, , СтрокаРеквизита.Наименование);
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			
			Отбор.ИмяПредопределенныхДанных = СтрокаРеквизита.ИмяПредопределенныхДанных;
			НайденныеСтроки = ДоступныеНастройки.НайтиСтроки(Отбор);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.ИмяРеквизита = ИмяРеквизита;
				
				Если СтрокаРеквизита.Основной Тогда
					СтрокаПодчиненнаяГруппа = ДоступныеНастройки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПодчиненнаяГруппа, НайденнаяСтрока);
					СтрокаПодчиненнаяГруппа.ИмяРеквизита = СтрШаблон("%1_Подчиненные", ИмяРеквизита);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;
	
	НовыйРеквизит = Новый РеквизитФормы("ТипФилиала", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыФилиалов"), , "Тип филиала");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	СоздатьДополнительныеОбъектыРазделов(ДобавляемыеРеквизиты);
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

Функция СоздатьСтраницуФормы(Форма, СтрокаТаблицы, Настройки, ДанныеСписковВыбора)
	
	Элементы = Форма.Элементы;
	Идентификатор = ОбщегоНазначенияКлиентСервер.СтрУникальныйИдентификатор(Форма.УникальныйИдентификатор);
	ИмяСтраницы = СтрШаблон("Страница_%1_%2", СтрокаТаблицы.ИмяПредопределенныхДанных, Идентификатор);
	
	Страница = Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), Элементы.ГруппаСтраницыНастроек);
	Страница.Вид = ВидГруппыФормы.Страница;
	Страница.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	Если СтрокаТаблицы.ИмяПредопределенныхДанных = "Основное" Тогда
		// ЗаместительРуководителя
		НовыйЭлемент = Элементы.Добавить("ЗаместительРуководителя", Тип("ПолеФормы"), Страница);
		НовыйЭлемент.ПутьКДанным = "ЗаместительРуководителя";
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.КнопкаОткрытия = Ложь;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "СвойстваОбъектаПриИзменении");
		
		ОбновитьСписокВыбораЗаместителя(Форма.Филиал, НовыйЭлемент);

		// ТипФилиала
		НовыйЭлемент = Элементы.Добавить("ТипФилиала", Тип("ПолеФормы"), Страница);
		НовыйЭлемент.ПутьКДанным = "ТипФилиала";
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.КнопкаОткрытия = Ложь;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "СвойстваОбъектаПриИзменении");		
		НовыйЭлемент.РежимВыбораИзсписка = Истина;
		НовыйЭлемент.СписокВыбора.Добавить(Перечисления.ТипыФилиалов.IT);
		НовыйЭлемент.СписокВыбора.Добавить(Перечисления.ТипыФилиалов.QA);
	КонецЕсли;
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Родитель", СтрокаТаблицы.Ссылка);
	ОтборСтрок.Вставить("Основной", Истина);
	
	НайденныеСтроки = Настройки.НайтиСтроки(ОтборСтрок);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СоздатьЭлементФормы(Элементы, НайденнаяСтрока, Идентификатор, Страница, Настройки, ДанныеСписковВыбора);
	КонецЦикла;
	
	ОтборСтрок.Удалить("Основной");
	НайденныеСтроки = Настройки.НайтиСтроки(ОтборСтрок);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.ЭтоГруппа Тогда
			Если НЕ НайденнаяСтрока.ОтображатьКакПодраздел Тогда
				СоздатьГруппуФормы(Элементы, НайденнаяСтрока, Идентификатор, Страница, Настройки, ДанныеСписковВыбора);
			КонецЕсли;
		Иначе
			СоздатьЭлементФормы(Элементы, НайденнаяСтрока, Идентификатор, Страница, Настройки, ДанныеСписковВыбора);
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеОбъекты = ДополнительныеОбъектыРазделов();
	
	ОтборСтрок = Новый Структура("Раздел", СтрокаТаблицы.ИмяПредопределенныхДанных);
	НайденныеСтроки = ДополнительныеОбъекты.НайтиСтроки(ОтборСтрок);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.ИмяОбъекта = "ДиапазоныСложностиЗадач" Тогда
			СформироватьТаблицуДиапазоныСложностиЗадач(Элементы, Страница, Идентификатор);
		ИначеЕсли НайденнаяСтрока.ИмяОбъекта = "ИсполнителиРевью" Тогда
			СформироватьТаблицуИсполнительCodeReview(Элементы, Страница, Идентификатор);
		ИначеЕсли НайденнаяСтрока.ИмяОбъекта = "ШаблоныЗаявок" Тогда
			СформироватьПолеСписокШаблонов(Элементы, Страница, Идентификатор);
		Иначе
			СформироватьТаблицуСотрудникиФилиала(Элементы, Страница, Идентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Если Страница.ПодчиненныеЭлементы.Количество() = 0 Тогда
		ИмяДекорации = СтрШаблон("ПустаяДекорация_%1_%2", СтрокаТаблицы.ИмяПредопределенныхДанных, Идентификатор);
		НовыйЭлемент = Элементы.Добавить(ИмяДекорации, Тип("ДекорацияФормы"), Страница);
	КонецЕсли;
	
	Возврат ИмяСтраницы;
	
КонецФункции

Процедура СоздатьЭлементФормы(Элементы, Строка, Идентификатор, Владелец, Настройки, ДанныеСписковВыбора)
	
	ИмяЭлемента = СтрШаблон("%1_%2", Строка.ИмяПредопределенныхДанных, Идентификатор);
	
	Если Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйЭлемент = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Владелец);
	НовыйЭлемент.ПутьКДанным = ИмяЭлемента;
	НовыйЭлемент.Заголовок = Строка.Наименование;
	
	// Определение типа элемента
	ОписаниеТипа = Строка.ТипЗначения;
	ТипыЗначения = ОписаниеТипа.Типы();
	ЭтоБулево = (ТипыЗначения.Найти(Тип("Булево")) <> Неопределено);
	ЭтоДата = (ТипыЗначения.Найти(Тип("Дата")) <> Неопределено);
	ЭтоЧисло = (ТипыЗначения.Найти(Тип("Число")) <> Неопределено);
	
	// Для булевого значения - поле флажка с заголовком справа
	Если ЭтоБулево Тогда
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	Иначе
		// Для всего остального - поле ввода
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		
		Если НЕ Строка.ОтображатьЗаголовок Тогда
			НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		КонецЕсли;
		
		// Для даты дополнительно установим формат редактирования в зависимости от квалификатора даты
		Если ЭтоДата Тогда
			ФорматыРедактирования = Новый Соответствие;
			ФорматыРедактирования.Вставить(ЧастиДаты.Время, "ДЛФ=T");
			ФорматыРедактирования.Вставить(ЧастиДаты.Дата, "ДЛФ=D");
			ФорматыРедактирования.Вставить(ЧастиДаты.ДатаВремя, "ДЛФ=DT");
			
			ФорматДаты = ОписаниеТипа.КвалификаторыДаты.ЧастиДаты;
			НовыйЭлемент.ФорматРедактирования = ФорматыРедактирования.Получить(ФорматДаты);
		КонецЕсли;
		
		Если ЭтоЧисло И НЕ Строка.ИспользоватьСписокВыбора Тогда
			НовыйЭлемент.КнопкаРегулирования = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Если справочник подчинен филиалам, то нужен отбор
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипыЗначения[0]);
	Если ОбъектМетаданных <> Неопределено И Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда   
		Если ОбъектМетаданных = Метаданные.Справочники.Процессы Тогда
			НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Филиал", "Филиал", 
				РежимИзмененияСвязанногоЗначения.НеИзменять);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НоваяСвязь);
			Элементы[НовыйЭлемент.Имя].СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипОбъекта", 
				Справочники.ТипыОбъектовВладельцев.НайтиПоРеквизиту("Настройка", Строка.Ссылка));
			
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);			
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			
			Элементы[НовыйЭлемент.Имя].ПараметрыВыбора = НовыеПараметры;
		ИначеЕсли Метаданные.НайтиПоТипу(ТипыЗначения[0]).Владельцы.Содержит(Метаданные.Справочники.Филиалы) Тогда
			НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Филиал", 
				РежимИзмененияСвязанногоЗначения.НеИзменять);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НоваяСвязь);
			Элементы[НовыйЭлемент.Имя].СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
		КонецЕсли;
	КонецЕсли;
	
	// Для типов задач документации и автотеста требуется подключить обработчик события начала выбора.
	// Список выбора должен формироваться из типов задач, выбранных в разделе "Типы задач"
	Если Строка.Ссылка = ПланыВидовХарактеристик.ВидыНастроекФилиалов.ТипДляЗадачиАвтотеста Тогда
		
		НовыйЭлемент.УстановитьДействие("НачалоВыбора", "Подключаемый_ПерезаполнитьСписокВыбораТиповЗадач");
		НовыйЭлемент.РежимВыбораИзСписка = Истина;
		
	ИначеЕсли Строка.Ссылка = ПланыВидовХарактеристик.ВидыНастроекПользователя.ГруппаЗаказчиковДляБыстрогоСозданияЗадачи Тогда
		НовыйЭлемент.УстановитьДействие("НачалоВыбора", "Подключаемый_ГруппаЗаказчиковНачалоВыбора");	
	КонецЕсли;
	
	// Если заполнена подсказка, то добавим кнопку
	НовыйЭлемент.Подсказка = Строка.Подсказка;
	НовыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	
	Если НаходитсяВГруппеЗаполненияДокументов(Строка.Ссылка) Тогда
		НастроитьЭлементГруппыЗаполненияДокументов(Строка.Ссылка, НовыйЭлемент);
	КонецЕсли;
	
	// Если есть данные списка выбора, то заполним список
	// выбора и установим режим выбора из списка
	Если Строка.ИспользоватьСписокВыбора Тогда
		ЗаполнитьСписокВыбора(Строка.Ссылка, ДанныеСписковВыбора, НовыйЭлемент);
	КонецЕсли;
	
	// Добавляем действие при изменении реквизита
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииРеквизитаФормы");
	
	СоздатьЗависящиеНастройки(Элементы, Строка, Настройки, Идентификатор, ДанныеСписковВыбора, Владелец);
	
КонецПроцедуры

Процедура СоздатьЭлементыФормы(Форма, Знач Настройки, Знач ДанныеСписковВыбора, Знач ОткрытьНастройкиПользователя)
	
	// В данной ситуации не получится использовать метод
	// РеквизитФормыВЗначение(). Вместо него используется
	// ДанныеФормыВЗначение(), на который ругается феникс
	
	// BSLLS:FormDataToValue-off
	ДеревоРазделов = ДанныеФормыВЗначение(Форма.ДеревоРазделов, Тип("ДеревоЗначений"));
	// BSLLS:FormDataToValue-on
	
	ДеревоРазделов.Строки.Очистить();
	
	Если ОткрытьНастройкиПользователя Тогда
		ПустаяСсылка = ПланыВидовХарактеристик.ВидыНастроекПользователя.ПустаяСсылка();
	Иначе
		ПустаяСсылка = ПланыВидовХарактеристик.ВидыНастроекФилиалов.ПустаяСсылка();
	КонецЕсли;
	
	СформироватьПодчиненныеРазделы(Форма, ПустаяСсылка, ДеревоРазделов, 
		Настройки, ДанныеСписковВыбора, ОткрытьНастройкиПользователя);
	
	ЗначениеВДанныеФормы(ДеревоРазделов, Форма.ДеревоРазделов);
	
КонецПроцедуры
 
Процедура СохранитьАдресМессенджера(Знач Филиал, Знач Мессенджер, Знач Адрес, Знач Идентификатор)
	
	РегистрыСведений.АдресаПолучателей.Добавить(Филиал, Мессенджер, Адрес, Идентификатор);
	
КонецПроцедуры 

Процедура СохранитьВидыДеятельностиУслуг(Знач Филиал, Знач ДанныеТаблицы)
	
	ОписаниеТипаЧисло = ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(3, 0, ДопустимыйЗнак.Неотрицательный);
	ОписаниеТипаДата = ОбщегоНазначенияКлиентСервер.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Филиал", Новый ОписаниеТипов("СправочникСсылка.Филиалы"));
	ТаблицаЗначений.Колонки.Добавить("ВидДеятельностиУслуги", Новый ОписаниеТипов("СправочникСсылка.ВидыДеятельностиУслуг"));
	ТаблицаЗначений.Колонки.Добавить("Использование", Новый ОписаниеТипов("Булево"));
	ТаблицаЗначений.Колонки.Добавить("Порядок", ОписаниеТипаЧисло);
	ТаблицаЗначений.Колонки.Добавить("Автор", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаЗначений.Колонки.Добавить("ДатаОбновления", ОписаниеТипаДата);
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	ЕстьВключенные = Ложь;
	Для Каждого ДанныеСтроки Из ДанныеТаблицы Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		НоваяСтрока.Автор = ТекущийПользователь;
		НоваяСтрока.ДатаОбновления = ТекущаяДата;
		
		ЕстьВключенные = ЕстьВключенные ИЛИ НоваяСтрока.Использование;
	КонецЦикла;
	
	Если ЕстьВключенные Тогда
		РегистрыСведений.ДоступныеУслугиФилиалов.Добавить(Филиал, ТаблицаЗначений);
	Иначе
		РегистрыСведений.ДоступныеУслугиФилиалов.Очистить(Филиал);
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьДиапазоныСложностиЗадач(Знач Филиал, Знач ДанныеТаблицы)
	
	ОписаниеТипаЧисло = ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Должность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	Таблица.Колонки.Добавить("МинимальнаяСложность", ОписаниеТипаЧисло);
	Таблица.Колонки.Добавить("МаксимальнаяСложность", ОписаниеТипаЧисло);
	
	Для Каждого СтрокаДанных Из ДанныеТаблицы Цикл
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаДанных);
	КонецЦикла;
	
	РегистрыСведений.ДиапазоныСложностиЗадачДляДолжностей.ЗаписатьДиапазоныФилиала(Филиал, Таблица);
	
КонецПроцедуры

Процедура СохранитьИзмененияОбъекта(Знач Филиал, Знач Изменения)
	
	ФилиалОбъект = Филиал.ПолучитьОбъект();
	ФилиалОбъект.ЗаместительРуководителя = Изменения.ЗаместительРуководителя;	
	ФилиалОбъект.ТипФилиала = Изменения.ТипФилиала;	
	ФилиалОбъект.РазрабатываемыеСистемы.Очистить();         
	
	Для Каждого Система Из Изменения.РазрабатываемыеСистемы Цикл
		ФилиалОбъект.РазрабатываемыеСистемы.Добавить().Система = Система;
	КонецЦикла;
	
	СвязанныеФилиалы = Новый ТаблицаЗначений;
	СвязанныеФилиалы.Колонки.Добавить("Филиал", Новый ОписаниеТипов("СправочникСсылка.Филиалы"));
	СвязанныеФилиалы.Колонки.Добавить("РассчитыватьМетрикиСИсточником", Новый ОписаниеТипов("Булево"));
	
	Для Каждого Строка Из Изменения.СвязанныеФилиалы  Цикл 
		ЗаполнитьЗначенияСвойств(СвязанныеФилиалы.Добавить(), Строка);
	КонецЦикла;
	
	Результат = Справочники.Филиалы.ПолучитьИзмененияСвязанныеФилиалы(Филиал, СвязанныеФилиалы); 
	ФилиалОбъект.ДополнительныеСвойства.Вставить("СвязанныеФилиалы", Результат);
	
	ФилиалОбъект.Записать(); 
	
КонецПроцедуры

Процедура СохранитьИсполнителейCodeReview(Знач Филиал, Знач ДанныеТаблицы)
	
	РегистрСведений = РегистрыСведений.ЗначенияДополнительныхРеквизитовОбъектов;
	Настройка = ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.РевьюерОбъекта;
	
	Для Каждого Строка Из ДанныеТаблицы Цикл
		РегистрСведений.УстановитьЗначениеДополнительногоРеквизита(Строка.Сотрудник, Настройка, Строка.Ревьюер);
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьВидыЗадачФилиала(Знач Филиал, Знач ВидыЗадач)

	РегистрыСведений.ВидыЗадачФилиалов.ЗаписатьВидыЗадач(Филиал, ВидыЗадач);
	
КонецПроцедуры

Процедура СохранитьШаблоныЗаявок(Знач Филиал, Знач Шаблоны)
	
	РегистрыСведений.ШаблоныОписанияДляФилиалов.Записать(Филиал, Шаблоны);
	
КонецПроцедуры

Процедура СформироватьПодчиненныеРазделы(Форма, Родитель, СтрокаРаздела, Настройки, ДанныеСписковВыбора, ОткрытьНастройкиПользователя)
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Родитель", Родитель);
	
	Если ЗначениеЗаполнено(Родитель) Тогда
		ОтборСтрок.Вставить("ОтображатьКакПодраздел", Истина);
	КонецЕсли;
	
	НайденныеПодразделы = Настройки.НайтиСтроки(ОтборСтрок);
	
	Для Каждого НайденныйПодраздел Из НайденныеПодразделы Цикл
		
		Если НЕ ОткрытьНастройкиПользователя Тогда			
			Если НайденныйПодраздел.ИмяПредопределенныхДанных = "ТипыЗадач" Тогда
				ИмяСтраницы = "Страница_ТипыЗадач";
			ИначеЕсли НайденныйПодраздел.ИмяПредопределенныхДанных = "КомандыРазработчиков" Тогда
				ИмяСтраницы = "Страница_КомандыРазработчиков";
			ИначеЕсли НайденныйПодраздел.ИмяПредопределенныхДанных = "РазрабатываемыеСистемы" Тогда
				ИмяСтраницы = "Страница_РазрабатываемыеСистемы";
			ИначеЕсли НайденныйПодраздел.ИмяПредопределенныхДанных = "СвязанныеФилиалы" Тогда
				ИмяСтраницы = "Страница_СвязанныеФилиалы";
			ИначеЕсли НайденныйПодраздел.ИмяПредопределенныхДанных = "ВидыДеятельности" Тогда
				ИмяСтраницы = "Страница_ВидыДеятельностиУслуг";
			Иначе
				ИмяСтраницы = СоздатьСтраницуФормы(Форма, НайденныйПодраздел, Настройки, ДанныеСписковВыбора);
			КонецЕсли;
			
		Иначе
			Если НайденныйПодраздел.ИмяПредопределенныхДанных = "НастройкиОповещений" Тогда
				ИмяСтраницы = "СтраницаНастройкиОповещенияПользователя";
			ИначеЕсли НайденныйПодраздел.ИмяПредопределенныхДанных = "ПубликацияИСоздание" Тогда
				ИмяСтраницы = "НастройкиОповещений";
			Иначе
				ИмяСтраницы = СоздатьСтраницуФормы(Форма, НайденныйПодраздел, Настройки, ДанныеСписковВыбора);
			КонецЕсли;
		КонецЕсли;
			
		СтрокаПодраздела = СтрокаРаздела.Строки.Добавить();
		СтрокаПодраздела.Идентификатор = ИмяСтраницы;
		СтрокаПодраздела.Представление = НайденныйПодраздел.Наименование;
		СтрокаПодраздела.ИмяПредопределенныхДанных = НайденныйПодраздел.ИмяПредопределенныхДанных;
		СтрокаПодраздела.Отображать = Истина;
		
		СформироватьПодчиненныеРазделы(Форма, НайденныйПодраздел.Ссылка, СтрокаПодраздела, 
			Настройки, ДанныеСписковВыбора, ОткрытьНастройкиПользователя);
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьПолеСписокШаблонов(ЭлементыФормы, Страница, ИдентификаторФормы)
	
	ИмяПоля = "ШаблоныЗаявок";
	ПолеФормы = ЭлементыФормы.Добавить(ИмяПоля, Тип("ПолеФормы"), Страница);
	ПолеФормы.ПутьКДанным = "ШаблоныЗаявок";
	ПолеФормы.Вид = ВидПоляФормы.ПолеВвода;
	ПолеФормы.УстановитьДействие("НачалоВыбора", "Подключаемый_ШаблоныЗаявокНачалоВыбора");

КонецПроцедуры

Процедура СформироватьТаблицуДиапазоныСложностиЗадач(ЭлементыФормы, Страница, ИдентификаторФормы)
	
	// Таблица
	ИмяТаблицы = СтрШаблон("%1_%2", "ДиапазоныСложностиЗадач", ИдентификаторФормы);
	ТаблицаФормы = ЭлементыФормы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), Страница);
	ТаблицаФормы.ПутьКДанным = "ДиапазоныСложностиЗадач";
	ТаблицаФормы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ТаблицаФормы.ИзменятьПорядокСтрок = Ложь;
	ТаблицаФормы.ИзменятьСоставСтрок = Ложь;
	ТаблицаФормы.РазрешитьНачалоПеретаскивания = Ложь;
	ТаблицаФормы.РазрешитьПеретаскивание = Ложь;
	
	// Колонка "Должность"
	ИмяКолонки = СтрШаблон("%1_%2", ИмяТаблицы, "Должность");
	КолонкаДолжность = ЭлементыФормы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТаблицаФормы);
	КолонкаДолжность.ПутьКДанным = "ДиапазоныСложностиЗадач.Должность";
	КолонкаДолжность.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
	КолонкаДолжность.ТолькоПросмотр = Истина;
	
	// Группа колонок "Сложность"
	ГруппаКолонок = ЭлементыФормы.Добавить("ДиапазоныСложностиЗадачГруппа", Тип("ГруппаФормы"), ТаблицаФормы);
	ГруппаКолонок.Группировка = ГруппировкаКолонок.Горизонтальная;
	ГруппаКолонок.Заголовок = "Сложность";
	ГруппаКолонок.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
	ГруппаКолонок.ОтображатьЗаголовок = Истина;
	ГруппаКолонок.ОтображатьВШапке = Истина;
	
	// Колонка "Минимальная сложность"
	ИмяКолонки = СтрШаблон("%1_%2", ИмяТаблицы, "МинимальнаяСложность");
	КолонкаМинимальнаяСложность = ЭлементыФормы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ГруппаКолонок);
	КолонкаМинимальнаяСложность.ПутьКДанным = "ДиапазоныСложностиЗадач.МинимальнаяСложность";
	КолонкаМинимальнаяСложность.Вид = ВидПоляФормы.ПолеВвода;
	КолонкаМинимальнаяСложность.УстановитьДействие("ПриИзменении", "ДиапазоныСложностиЗадачМинимальнаяСложностьПриИзменении");
	
	// Колонка "Максимальная сложность"
	ИмяКолонки = СтрШаблон("%1_%2", ИмяТаблицы, "МаксимальнаяСложность");
	КолонкаМаксимальнаяСложность = ЭлементыФормы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ГруппаКолонок);
	КолонкаМаксимальнаяСложность.ПутьКДанным = "ДиапазоныСложностиЗадач.МаксимальнаяСложность";
	КолонкаМаксимальнаяСложность.Вид = ВидПоляФормы.ПолеВвода;
	КолонкаМаксимальнаяСложность.УстановитьДействие("ПриИзменении", "ДиапазоныСложностиЗадачМаксимальнаяСложностьПриИзменении");
	
КонецПроцедуры

Процедура СформироватьТаблицуИсполнительCodeReview(ЭлементыФормы, Страница, ИдентификаторФормы)
	
	// Таблица
	ИмяТаблицы = СтрШаблон("%1_%2", "ИсполнителиCodeReview", ИдентификаторФормы);
	ТаблицаФормы = ЭлементыФормы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), Страница);
	ТаблицаФормы.ПутьКДанным = "ИсполнителиCodeReview";
	ТаблицаФормы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ТаблицаФормы.ИзменятьПорядокСтрок = Ложь;
	ТаблицаФормы.ИзменятьСоставСтрок = Ложь;
	ТаблицаФормы.РазрешитьНачалоПеретаскивания = Ложь;
	ТаблицаФормы.РазрешитьПеретаскивание = Ложь;
	
	// Колонка "Сотрудник"
	ИмяКолонки = СтрШаблон("%1_%2", ИмяТаблицы, "Сотрудник");
	КолонкаСотрудник = ЭлементыФормы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТаблицаФормы);
	КолонкаСотрудник.ПутьКДанным = "ИсполнителиCodeReview.Сотрудник";
	КолонкаСотрудник.ТолькоПросмотр = Истина;
	
	// Колонка "Ревьюер"
	ИмяКолонки = СтрШаблон("%1_%2", ИмяТаблицы, "Ревьюер");
	КолонкаРевьюер = ЭлементыФормы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТаблицаФормы);
	КолонкаРевьюер.ПутьКДанным = "ИсполнителиCodeReview.Ревьюер";
	КолонкаРевьюер.Вид = ВидПоляФормы.ПолеВвода;
	КолонкаРевьюер.УстановитьДействие("ПриИзменении", "ИсполнителиCodeReviewРевьюерПриИзменении");
	КолонкаРевьюер.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
	КолонкаРевьюер.КнопкаСоздания = Ложь;
	КолонкаРевьюер.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.Авто;
	
КонецПроцедуры

Процедура СформироватьТаблицуСотрудникиФилиала(ЭлементыФормы, Страница, ИдентификаторФОрмы)
	
	// Таблица
	ИмяТаблицы = СтрШаблон("%1_%2", "СотрудникиФилиала", ИдентификаторФормы);
	ТаблицаФормы = ЭлементыФормы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), Страница);
	ТаблицаФормы.ПутьКДанным = "СотрудникиФилиала";
	ТаблицаФормы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ТаблицаФормы.ТолькоПросмотр = Истина;
	ТаблицаФормы.УстановитьДействие("Выбор", "Подключаемый_СотрудникиФилиалаВыбор");
	
	// Колонка "Сотрудник"
	ИмяКолонки = СтрШаблон("%1_%2", ИмяТаблицы, "Сотрудник");
	КолонкаСотрудник = ЭлементыФормы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТаблицаФормы);
	КолонкаСотрудник.ПутьКДанным = "СотрудникиФилиала.Сотрудник";
	КолонкаСотрудник.ТолькоПросмотр = Истина;
	
	// Колонка "Роль"
	ИмяКолонки = СтрШаблон("%1_%2", ИмяТаблицы, "Роль");
	КолонкаРевьюер = ЭлементыФормы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТаблицаФормы);
	КолонкаРевьюер.ПутьКДанным = "СотрудникиФилиала.Роль";
	КолонкаРевьюер.Вид = ВидПоляФормы.ПолеВвода;
	
КонецПроцедуры

Процедура УдалитьЭлементы(ПодчиненныеЭлементы, ВсеЭлементы)  
	
	Для Счетчик = -ПодчиненныеЭлементы.Количество() + 1 По 0 Цикл 
		
		Элемент = ПодчиненныеЭлементы[-Счетчик];
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			УдалитьЭлементы(Элемент.ПодчиненныеЭлементы, ВсеЭлементы);
		КонецЕсли;
		ВсеЭлементы.Удалить(Элемент);  
		
	КонецЦикла;  
	
КонецПроцедуры

Процедура УстановитьВидимостьРазделовПоЭлементамСтраниц(Форма)
	
	ПодчиненныеЭлементыДерева = Форма.ДеревоРазделов.ПолучитьЭлементы();
	
	Для Каждого ПодчиненныйРаздел Из ПодчиненныеЭлементыДерева Цикл
		НастроитьВидимостьПоЭлементамСтраницы(Форма, ПодчиненныйРаздел);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьПользовательскиеНастройкиОтбора(ПользовательскиеОтборы, ПоляОтбораДляУдаления)     
	
	Для Счетчик = -(ПользовательскиеОтборы.Количество() - 1) По 0 Цикл 			
		Элемент = ПользовательскиеОтборы[-Счетчик];
		ТипЭлемента = ТипЗнч(Элемент);
		
		Если ТипЭлемента = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЭлементыГруппыОтбора = Элемент.Элементы;
			УдалитьПользовательскиеНастройкиОтбора(ЭлементыГруппыОтбора, ПоляОтбораДляУдаления); 
			
			Если ЭлементыГруппыОтбора.Количество() = 0 Тогда
				ПользовательскиеОтборы.Удалить(Элемент);
			КонецЕсли;
			
		ИначеЕсли ТипЭлемента = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ПоляОтбораДляУдаления.Найти(Элемент.ЛевоеЗначение) <> Неопределено Тогда
				ПользовательскиеОтборы.Удалить(Элемент);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;		
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
