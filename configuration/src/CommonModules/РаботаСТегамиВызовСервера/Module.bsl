///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обновляет элементы формы после изменения тегов
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения	 - Управляемая форма
//  СписокТегов	 - ТаблицаЗначений				 - Таблица с данными тегов объекта
//  Цвет		 - Цвет, ЦветСтиля				 - Цвет фона тега
//
Процедура Обновить(Форма, Знач СписокТегов, Знач Цвет = Неопределено) Экспорт

	Обработать(СписокТегов, Форма.Объект.Ссылка);
	Форма.СписокТегов.Загрузить(СписокТегов.Выгрузить());	
	Форма.ТегиHTML = РаботаСТегамиКлиентСервер.ПредставлениеТегов(СписокТегов, Ложь, Цвет);

КонецПроцедуры

// Обрабатывает добавление и удаление тегов
//
// Параметры:
//  СписокТегов - ТаблицаЗначений - Таблица с данными тегов объекта
//  Объект - ДокументСсылка, СправочникСсылка - ссылка на объект владелец тегов 
//
Процедура Обработать(СписокТегов, Знач Объект) Экспорт
	
	// Если теги добавляются в заявке на разработку,
	// то нужно добавить их в подчиненные задачи.
	ОбновитьТегиПодчиненных = (ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаявкаНаРазработку"));
	
	Если ОбновитьТегиПодчиненных Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументЗадача.Ссылка КАК Задача
		|ИЗ
		|	Документ.Задача КАК ДокументЗадача
		|ГДЕ
		|	ДокументЗадача.ОбъектОснование = &Объект";
		
		Запрос.УстановитьПараметр("Объект", Объект);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
		Иначе
			ОбновитьТегиПодчиненных = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Таблицу обходим в обратном порядке, 
	// по причине удаления строк отвязанных тегов.
	
	ИндексСтроки = СписокТегов.Количество() - 1;
	
	Пока ИндексСтроки >= 0 Цикл
		Строка = СписокТегов[ИндексСтроки];		
		ДанныеСтруктура = Новый Структура("Событие, Тег, Добавлен", "ИзменениеТега", Строка.ТегПредставление, Ложь);
		ТегИзменен = Ложь;
		
		// Отвязка тега		
		Если Строка.Отвязать Тогда
			РегистрыСведений.ТегиОбъектов.Удалить(Строка.Тег, Объект);
			СписокТегов.Удалить(Строка);
			
			ТегИзменен = Истина;
			
		// Привязка тега	
		ИначеЕсли НЕ Строка.Сохранен Тогда
			Если Строка.Тег.Пустая() Тогда 
				СсылкаНаТег = Справочники.Теги.Добавить(Строка.ТегПредставление);
				Строка.Тег = СсылкаНаТег;
			Иначе	
				СсылкаНаТег = Строка.Тег;
			КонецЕсли;
			
			РегистрыСведений.ТегиОбъектов.Добавить(СсылкаНаТег, Объект);
			
			Если ОбновитьТегиПодчиненных Тогда
				Пока Выборка.Следующий() Цикл
					РегистрыСведений.ТегиОбъектов.Добавить(СсылкаНаТег, Выборка.Задача);
				КонецЦикла;
				
				Выборка.Сбросить();
			КонецЕсли;
			
			ДанныеСтруктура.Добавлен = Истина;
			Строка.Сохранен = Истина;

			ТегИзменен = Истина;
		КонецЕсли;

		// Добавление в историю
		Если ТегИзменен Тогда
			Категория = Перечисления.КатегорииСобытийИсторияИзменений.Прочее;
			Данные = ЗаписатьЗначениеJSON(ДанныеСтруктура);
			СтруктураЗаписи = Новый Структура("Данные, Категория", Данные, Категория);
			РегистрыСведений.ИсторияИзмененийОбъектовПоСобытиям.Добавить(Объект, СтруктураЗаписи);
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
