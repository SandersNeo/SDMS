///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции:
// - работа с простыми типами данных и их преобразование;
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция - Получить идентификатор сеанса
//
// Параметры:
//  HTTPОтвет	 - HTTPОтвет - ответ HTTP
// 
// Возвращаемое значение:
//  ИдентификаторСеанса - Строка
//
Функция ПолучитьИдентификаторСеанса(Знач HTTPОтвет) Экспорт
	
	ИдентификаторСеанса = Неопределено;
	ЗначениеЗаголовка   = HTTPОтвет.Заголовки.Получить("Set-Cookie");
	
	Если ЗначениеЗаголовка <> Неопределено 
		И СтрНайти(ЗначениеЗаголовка, "ibsession=") > 0 Тогда
					
		ИдентификаторСеанса = Сред(ЗначениеЗаголовка, 11, 36);
	КонецЕсли;
	
	Возврат ИдентификаторСеанса;
	
КонецФункции

// Получает hex код цвета
//
// Параметры:
//  Цвет - Цвет, ЦветСтиля	 - выбранный цвет
// 
// Возвращаемое значение:
//  строка - hex код
//
Функция ПолучитьHexКодЦвета(Знач Цвет) Экспорт  
	
	ФД = Новый ФорматированныйДокумент;
	ФД.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(" ", , Цвет));
	
	ТекстHTML = "";
	ФД.ПолучитьHTML(ТекстHTML, Неопределено);
	
	ПозицияЧислаHEX = СтрНайти(ТекстHTML, "#") + 1;
	Возврат Сред(ТекстHTML, ПозицияЧислаHEX, 6);

КонецФункции      

// Получает цвет из hex кода
//
// Параметры:
//  строка - hex код
// 
// Возвращаемое значение:
// 	Цвет - Цвет, ЦветСтиля
//
Функция ЧислоHEXВЦвет(ЧислоHEX) Экспорт
	
	R = ЧислоИзШестнадцатеричнойСтроки("0x" + Лев(ЧислоHEX, 2));
	G = ЧислоИзШестнадцатеричнойСтроки("0x" + Сред(ЧислоHEX, 3, 2));
	B = ЧислоИзШестнадцатеричнойСтроки("0x" + Сред(ЧислоHEX, 5, 2));
	
	Результат = Новый Цвет(R, G, B);
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа простыми типами данных, их преобразование

// Добавляет к входной строке прямой или обратный слэш. Предварительно может
// проверить наличие слэша в конце строки. Если символ присутствует, то
// операция не выполняется и возвращается исходная строка.
//
// Параметры:
//  ИсходнаяСтрока   - Строка - строка, в конец которой надо добавить разделитель.
//	ОбратныйСлэш     - Булево - признак добавления не прямого, а обратного слэша "\".
//  ПроверятьНаличие - Булево - проверять наличие слэша в конце строки. Если да, то
//                     при наличии в конце строки слэша он не добавляется.
//
// Возвращаемое значение:
//  Строка со слэшем в конце.
//
Функция ДобавитьСлэш(Знач ИсходнаяСтрока, Знач ОбратныйСлэш = Ложь, Знач ПроверятьНаличие = Истина) Экспорт
	
	Если ОбратныйСлэш Тогда
		СимволСлэша = "\";
	Иначе
		СимволСлэша = "/";
	КонецЕсли;
	
	ИсходнаяСтрока = СокрЛП(ИсходнаяСтрока);
	Если ПроверятьНаличие Тогда
		Если НЕ СтрЗаканчиваетсяНа(ИсходнаяСтрока, СимволСлэша) Тогда
			ИсходнаяСтрока = ИсходнаяСтрока + СимволСлэша;
		КонецЕсли;
	Иначе
		ИсходнаяСтрока = ИсходнаяСтрока + СимволСлэша;
	КонецЕсли;
	
	Возврат ИсходнаяСтрока;
	
КонецФункции

// Создает объект ОписаниеТипов, содержащий тип Дата.
//
// Параметры:
//  СоставДаты - ЧастиДаты - состав даты (время/дата/дата и время).
//
// Возвращаемое значение:
//  ОписаниеТипов. Описание типа Дата.
//
Функция ОписаниеТипаДата(Знач СоставДаты = Неопределено) Экспорт
	
	Если СоставДаты = Неопределено Тогда
		СоставДаты = ЧастиДаты.ДатаВремя;
	КонецЕсли;
	
	Возврат Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(СоставДаты));
	
КонецФункции

// Создает объект ОписаниеТипов, содержащий тип Строка.
//
// Параметры:
//  ДлинаСтроки - Число - длина строки.
//
// Возвращаемое значение:
//  ОписаниеТипов. Описание типа Строка.
//
Функция ОписаниеТипаСтрока(Знач ДлинаСтроки) Экспорт
	
	КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная);
	
	Возврат Новый ОписаниеТипов("Строка", , КвалификаторСтроки);
	
КонецФункции

// Создает объект ОписаниеТипов, содержащий тип Число.
//
// Параметры:
//  Разрядность             - Число - общее количество разрядов числа (количество 
//                            разрядов целой части + количество разрядов дробной 
//                            части).
//  РазрядностьДробнойЧасти - Число - количество разрядов дробной части.
//  ДопустимыйЗнак          - ДопустимыйЗнак - допустимый знак числа.
//
// Возвращаемое значение:
//  ОписаниеТипов. Описание типа Число.
//
Функция ОписаниеТипаЧисло(Знач Разрядность, Знач РазрядностьДробнойЧасти = 0, Знач ДопустимыйЗнак = Неопределено) Экспорт
	
	Если ДопустимыйЗнак = Неопределено Тогда
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти);
	Иначе
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, ДопустимыйЗнак);
	КонецЕсли;
	
	Возврат Новый ОписаниеТипов("Число", КвалификаторЧисла);
	
КонецФункции

// Преобразует навигационную ссылку или идентификатор из нее в УникальныйИдентификатор.
//
// Параметры:
//  НавигационнаяСсылка - Строка - навигационная ссылка на объект БД.
//
// Возвращаемое значение:
//  УникальныйИдентификатор.
//
Функция ПолучитьИдентификаторИзНавигационнойСсылки(Знач НавигационнаяСсылка) Экспорт
	
	Идентификатор = Неопределено;
	
	// Если передана полная навигационная ссылка, выполняется отсечение незначащей
	// части строки.
	ПозицияНачала = СтрНайти(НРег(НавигационнаяСсылка), "?ref=");
	Если ПозицияНачала > 0 Тогда
		НавигационнаяСсылка = Сред(НавигационнаяСсылка, ПозицияНачала + 5, 32);
	КонецЕсли;
	
	Если СтрДлина(НавигационнаяСсылка) = 32 Тогда
		Идентификатор = СтрШаблон("%1-%2-%3-%4-%5", Прав(НавигационнаяСсылка, 8),
			Сред(НавигационнаяСсылка, 21, 4), Сред(НавигационнаяСсылка, 17, 4),
			Лев(НавигационнаяСсылка, 4), Сред(НавигационнаяСсылка, 5, 12));	
			
		Попытка
			Идентификатор = Новый УникальныйИдентификатор(Идентификатор);
		Исключение
			Идентификатор = Неопределено;
		КонецПопытки;
	КонецЕсли;
		
	Возврат Идентификатор;	
	
КонецФункции

// Приводит строковое значение к числу, отбрасывая лидирующие нули.
//
// Параметры:
//  ИсходнаяСтрока - Строка - строка, которую необходимо преобразовать.
//
//  Разрядность             - Число - общее количество разрядов числа 
//
// Возвращаемое значение:
//  Преобразованное число.
//
Функция ПривестиКЧислу(Знач ИсходнаяСтрока, Знач Разрядность) Экспорт
	
	ОписаниеТипаЧисло = ОписаниеТипаЧисло(Разрядность);
	Возврат ОписаниеТипаЧисло.ПривестиЗначение(ИсходнаяСтрока);
	
КонецФункции

// Преобразует уникальный идентификатор в строку. При необходимости удаляет
// дефисы-разделители.
//
// Параметры:
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор.
//  УдалитьДефисы           - Булево - признак необходимости удаления дефисов.
//
// Возвращаемое значение:
//  Строка.
//
Функция СтрУникальныйИдентификатор(Знач УникальныйИдентификатор, Знач УдалитьДефисы = Истина) Экспорт
	
	ОтформатированныйИдентификатор = Строка(УникальныйИдентификатор);
	
	Если УдалитьДефисы Тогда
		ОтформатированныйИдентификатор = СтрЗаменить(ОтформатированныйИдентификатор, "-", "");
	КонецЕсли;
	
	Возврат ОтформатированныйИдентификатор;
	
КонецФункции

// Увеличивает значение на величину N. По умолчанию на единицу. Аналог процедуры Inc()
// в других языках программирования.
//
// Параметры:
//  Значение - Число - изменяемое значение.
//  Величина - Число - величина, на которую необходимо изменить значение.
//
Процедура УвеличитьЗначение(Значение, Знач Величина = 1) Экспорт
	
	Значение = Значение + Величина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с коллекциями данных

// Удаляет из массива элемент со значением Значение.
//
// Параметры:
//  Значение - Произвольный - искомое значение, которое необходимо удалить.
//  Массив   - Массив - массив значений.
//
Процедура УдалитьЗначениеИзМассива(Знач Значение, Массив) Экспорт
	
	Индекс = Массив.Найти(Значение);
	Если Индекс <> Неопределено Тогда
		Массив.Удалить(Индекс);
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с отборами и параметрами динамических списков

Функция ПолучитьНастройкуОтбораКомпоновкиДанных(Знач НастройкиКомпоновки) Экспорт
	
	НастройкиОтбора = Неопределено;
	
	Для Каждого Настройка Из НастройкиКомпоновки.Элементы Цикл
		Если ТипЗнч(Настройка) = Тип("ОтборКомпоновкиДанных") Тогда
			НастройкиОтбора = Настройка.Элементы;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НастройкиОтбора;
	
КонецФункции

// Устанавливает элемент отбор динамического списка
//
// Параметры:
//   Список         - обрабатываемый динамический список,
//   ИмяПоля        - имя поля компоновки, отбор по которому нужно установить,
//   ВидСравнения   - вид сравнения отбора, по умолчанию - Равно,
//   ПравоеЗначение - значение отбора
//
Процедура УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения) Экспорт
    
    ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяПоля);    
    ЭлементОтбора.ВидСравнения   = ВидСравнения;
    ЭлементОтбора.Использование  = Истина;
    ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
    
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Информационные сообщения

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщения - Строка - текст сообщения.
//  КлючДанных     - ЛюбаяСсылка - на объект информационной базы.
//                   Ссылка на объект информационной базы, к которому это сообщение относится,
//                   или ключ записи.
//  Поле           - Строка - наименование реквизита формы.
//  ПутьКДанным    - Строка - путь к данным (путь к реквизиту формы).
//  Отказ          - Булево - Выходной параметр. Всегда устанавливается 
//                   в значение Истина.
//
//	Пример:
//
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ПолеВРеквизитеФормыОбъект",
//		"Объект");
//
//	Альтернативный вариант использования в форме объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"Объект.ПолеВРеквизитеФормыОбъект");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ИмяРеквизитаФормы");
//
//	3. Для вывода сообщения связанного с объектом информационной базы.
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
// 4. Для вывода сообщения по ссылке на объект информационной базы.
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), Ссылка, , , Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным.
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых.
//  3. Установка ссылки без установки поля (и/или пути к данным).
//
Процедура СообщитьПользователю(Знач ТекстСообщения, Знач КлючДанных = Неопределено, Знач Поле = "", Знач ПутьКДанным = "", Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Поле  = Поле;
	
	ЭтоОбъект = Ложь;
	
	#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда
		
	Если КлючДанных <> Неопределено И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = СтрНайти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
	
	#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

// Заменяет угловые скобки на код символа для корректного отображения текста комментария в письмах
//
// Параметры:
//  Текст - Строка - исходный текст
// 
// Возвращаемое значение:
//  Строка - исходный текст с экранированными угловыми скобками
//
Функция ЭкранироватьУгловыеСкобки(Знач Текст) Экспорт
	
	Текст = СтрЗаменить(Текст, "<", "&lt;");
	Текст = СтрЗаменить(Текст, ">", "&gt;");
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Процедуры для формы навигационных ссылок

Функция КлючиНастроекВариантовНавигационныхСсылок() Экспорт
	
	Возврат Новый Структура("КлючОбъекта, КлючНастроек", "ОбщаяФорма.НавигационнаяСсылка", "НастройкиДанныхФормы");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Расширение для работы с файлами и файловые операции

// Текст для ссылки, которая устанавливается в элементы приглашения установки
// расширения работы с файлами.
//
Функция ТекстСсылкиУстановкиРасширенияРаботыСФайлами() Экспорт
	
	Возврат "InstallFileSystemExtension";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Трудозатраты

// Возвращает имя команды редактирования трудозатраты для расшифровки табличного
// документа.
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяКомандыРедактированияТрудозатрат() Экспорт
	
	Возврат "EditCostRecord";
	
КонецФункции

// Возвращает имя команды удаления трудозатраты для расшифровки табличного
// документа.
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяКомандыУдаленияТрудозатрат() Экспорт
	
	Возврат "DeleteCostRecord";
	
КонецФункции

#Область CodeReview

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ДАННЫМИ

// Возвращает значение свойства структуры.
//
// Параметры:
//   Структура - Структура, ФиксированнаяСтруктура - Объект, из которого необходимо прочитать значение ключа.
//   Ключ - Строка - Имя свойства структуры, для которого необходимо прочитать значение.
//   ЗначениеПоУмолчанию - Произвольный - Необязательный. Возвращается когда в структуре нет значения по указанному
//                                        ключу.
//       Для скорости рекомендуется передавать только быстро вычисляемые значения (например примитивные типы),
//       а инициализацию более тяжелых значений выполнять после проверки полученного значения (только если это
//       требуется).
//
// Возвращаемое значение:
//   Произвольный - Значение свойства структуры. ЗначениеПоУмолчанию если в структуре нет указанного свойства.
//
Функция СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если Структура = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Структура.Свойство(Ключ) Тогда
		Возврат Структура[Ключ];
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С УПРАВЛЯЕМЫМИ ФОРМАМИ

// Регистрирует сведения для вывода информации
//
Процедура ДобавитьШаг(Результат, ИмяПроцедуры, ПараметрыПроцедуры)
	
	Если НЕ Результат.Свойство("Шаги") Тогда
		Результат.Вставить("Шаги", Новый СписокЗначений);
	КонецЕсли;
	
	Результат.Шаги.Добавить(ПараметрыПроцедуры, ИмяПроцедуры);
	
КонецПроцедуры

// Добавляет в структуру информацию о событии, о котором надо оповестить все открытые формы.
//   Действие выполняется на клиенте после вызова ОбщегоНазначенияКлиент.ПоказатьРезультатВыполнения(Результат).
//
// Параметры:
//   Результат  - Структура. См. ОбщегоНазначенияКлиент.ПоказатьРезультатВыполнения()
//   ИмяСобытия - Строка. Имя события, которое используется для первичной идентификации сообщения принимающими формами
//   Параметр   - Произвольный. Набор данных, который может использоваться принимающей формой для обновления
//   Источник   - Произвольный. Источник оповещения
//
// См. также:
//   ОбщегоНазначенияКлиент.ПоказатьРезультатВыполнения().
//
Процедура ОповеститьОткрытыеФормы(Результат, ИмяСобытия, Параметр = Неопределено, Источник = Неопределено) Экспорт
	
	Если ИмяСобытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеФорм = Новый Структура("ИмяСобытия, Параметр, Источник");
	ОповещениеФорм.ИмяСобытия = ИмяСобытия;
	ОповещениеФорм.Параметр   = Параметр;
	ОповещениеФорм.Источник   = Источник;
	
	ДобавитьШаг(Результат, "ОповеститьОткрытыеФормы", ОповещениеФорм);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

// Проверяет email адрес на соответствие требованиям стандартов RFC 5321, RFC 5322,
// а также RFC 5335, RFC 5336 и RFC 3696.
// Кроме того, функция ограничивает использование спецсимволов.
// 
// Параметры:
//  Адрес - Строка - проверяемый email.
//
// Возвращаемое значение:
//  Булево - Истина, если ошибок нет.
//
Функция АдресЭлектроннойПочтыСоответствуетТребованиям(Знач Адрес) Экспорт
	
	// допустимые символы для email
	Буквы = "abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя";
	Цифры = "0123456789";
	СпецСимволы = "'.@_-";
	
	// проверяем любые сочетания спецсимволов
	Если СтрДлина(СпецСимволы) > 1 Тогда
		Для Позиция1 = 1 По СтрДлина(СпецСимволы)-1 Цикл
			Символ1 = Сред(СпецСимволы, Позиция1, 1);
			Для Позиция2 = Позиция1 + 1 По СтрДлина(СпецСимволы) Цикл
				Символ2 = Сред(СпецСимволы, Позиция2, 1);
				Комбинация1 = Символ1 + Символ2;
				Комбинация2 = Символ2 + Символ1;
				Если СтрНайти(Адрес, Комбинация1) > 0 ИЛИ СтрНайти(Адрес, Комбинация2) > 0 Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// проверяем символ @
	Если СтрЧислоВхождений(Адрес, "@") <> 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	   
	// проверяем две точки подряд
	Если СтрНайти(Адрес, "..") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// приводим строку адреса к нижнему регистру
	Адрес = НРег(Адрес);
	
	// проверяем допустимые символы
	Если Не СтрокаСодержитТолькоДопустимыеСимволы(Адрес, Буквы + Цифры + СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// разбираем адрес на local-part и domain
	Позиция = СтрНайти(Адрес,"@");
	ЛокальноеИмя = Лев(Адрес, Позиция - 1);
	Домен = Сред(Адрес, Позиция + 1);
	
	// проверяем на заполненность и допустимость длины
	Если ПустаяСтрока(ЛокальноеИмя)
	 	или ПустаяСтрока(Домен)
		или СтрДлина(ЛокальноеИмя) > 64
		или СтрДлина(Домен) > 255 Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем наличие спецсимволов в начале и в конце частей адреса
	Если ЕстьСимволыВНачалеВКонце(ЛокальноеИмя, СпецСимволы) или ЕстьСимволыВНачалеВКонце(Домен, СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// в домене должна быть минимум одна точка
	Если СтрНайти(Домен,".") = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// в домене не должно быть символа подчеркивания
	Если СтрНайти(Домен,"_") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// выделяем зону (TLD) из имени домена 
	Зона = Домен;
	Позиция = СтрНайти(Зона,".");
	Пока Позиция > 0 Цикл
		Зона = Сред(Зона, Позиция + 1);
		Позиция = СтрНайти(Зона,".");
	КонецЦикла;
	
	// проверяем зону домена (минимум 2 символа, только буквы)
	Возврат СтрДлина(Зона) >= 2 и СтрокаСодержитТолькоДопустимыеСимволы(Зона,Буквы);
	
КонецФункции

// Поиск элементов и групп отбора динамического списка
// Параметры:
//  ОбластьПоиска - контейнер с элементами и группами отбора, например
//                  Список.Отбор или группа в отборе
//  ИмяПоля - имя поля компоновки (не используется для групп)
//  Представление - представление поля компоновки
//  Примечание: поиск может осуществляться или по ЛевомуЗначению, или по Представлению
//
Функция НайтиЭлементыИГруппыОтбора(знач ОбластьПоиска,
									знач ИмяПоля = Неопределено,
									знач Представление = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Возврат МассивЭлементов;
	
КонецФункции

// Добавление элемента компоновки в контейнер элементов компоновки
// Параметры:
//  ОбластьДобавления - контейнер с элементами и группами отбора, например
//                  Список.Отбор или группа в отборе
//  ИмяПоля - строка - имя для поля компоновки данных
//  ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения
//  ПравоеЗначение - произвольный
//  Представление - представление элемента компоновки данных
//  Использование - булево - использование элемента
//  РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения
//
Функция ДобавитьЭлементКомпоновки(ОбластьДобавления,
									знач ИмяПоля,
									знач ВидСравнения,
									знач ПравоеЗначение = Неопределено,
									знач Представление  = Неопределено,
									знач Использование  = Неопределено,
									знач РежимОтображения = Неопределено) Экспорт
	
	Элемент = ОбластьДобавления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Элемент.ВидСравнения = ВидСравнения;
	
	Если РежимОтображения = Неопределено Тогда
		Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Иначе
		Элемент.РежимОтображения = РежимОтображения;
	КонецЕсли;
	
	Если ПравоеЗначение <> Неопределено Тогда
		Элемент.ПравоеЗначение = ПравоеЗначение;
	КонецЕсли;
	
	Если Представление <> Неопределено Тогда
		Элемент.Представление = Представление;
	КонецЕсли;
	
	Если Использование <> Неопределено Тогда
		Элемент.Использование = Использование;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

// Изменение элементов отбора
// Параметры
//  ИмяПоля - строка - имя поля компоновки
//  ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения
//  ПравоеЗначение - произвольный
//  Представление - строка - представление элемента компоновки данных
//  Использование - булево - использование элемента
//  РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения
//
Функция ИзменитьЭлементыОтбора(ОбластьПоиска,
								знач ИмяПоля = Неопределено,
								знач Представление = Неопределено,
								знач ПравоеЗначение = Неопределено,
								знач ВидСравнения = Неопределено,
								знач Использование = Неопределено,
								знач РежимОтображения = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		Если ИмяПоля <> Неопределено Тогда
			Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		КонецЕсли;
		Если Представление <> Неопределено Тогда
			Элемент.Представление = Представление;
		КонецЕсли;
		Если Использование <> Неопределено Тогда
			Элемент.Использование = Использование;
		КонецЕсли;
		Если ВидСравнения <> Неопределено Тогда
			Элемент.ВидСравнения = ВидСравнения;
		КонецЕсли;
		Если ПравоеЗначение <> Неопределено Тогда
			Элемент.ПравоеЗначение = ПравоеЗначение;
		КонецЕсли;
		Если РежимОтображения <> Неопределено Тогда
			Элемент.РежимОтображения = РежимОтображения;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЭлементов.Количество();
	
КонецФункции

// Поиск элементов и групп отбора динамического списка
// Параметры:
//  ОбластьУдаления - контейнер с элементами и группами отбора, например
//                  Список.Отбор или группа в отборе
//  ИмяПоля - имя поля компоновки (не используется для групп)
//  Представление - представление поля компоновки
//  Примечание: поиск может осуществляться или по ЛевомуЗначению, или по Представлению
//
Процедура УдалитьЭлементыГруппыОтбора(знач ОбластьУдаления,
										знач ИмяПоля = Неопределено,
										знач Представление = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьУдаления.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		Если Элемент.Родитель = Неопределено Тогда
			ОбластьУдаления.Элементы.Удалить(Элемент);
		Иначе
			Элемент.Родитель.Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Используется для создания элемента отбора или, если таковой не найден,
// установления существующим элементам свойств
// Параметры
//  ОбластьПоискаДобавления - контейнер с элементами и группами отбора, например
//                  Список.Отбор или группа в отборе
//  ИмяПоля - строка - имя для поля компоновки данных (заполняется всегда)
// Устанавливаемые поля:
//  ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения
//  ПравоеЗначение - произвольный
//  Представление - представление элемента компоновки данных
//  Использование - булево - использование элемента
//  РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения
//
Процедура УстановитьЭлементОтбора(ОбластьПоискаДобавления,
								знач ИмяПоля,
								знач ПравоеЗначение = Неопределено,
								знач ВидСравнения = Неопределено,
								знач Представление = Неопределено,
								знач Использование = Неопределено,
								знач РежимОтображения = Неопределено) Экспорт
	
	ЧислоИзмененных = ИзменитьЭлементыОтбора(ОбластьПоискаДобавления, ИмяПоля, Представление,
							ПравоеЗначение, ВидСравнения, Использование, РежимОтображения);
	
	Если ЧислоИзмененных = 0 Тогда
		Если ВидСравнения = Неопределено Тогда
			ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		ДобавитьЭлементКомпоновки(ОбластьПоискаДобавления, ИмяПоля, ВидСравнения,
								ПравоеЗначение, Представление, Использование, РежимОтображения);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значение Значение параметра ИмяПараметра динамического списка Список 
// или отключает его использование в зависимости от признака Использование.
//
Процедура УстановитьПараметрДинамическогоСписка(Список, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	Если Использование Тогда
		Список.Параметры.УстановитьЗначениеПараметра(ИмяПараметра, Значение);
	Иначе
		ЗначениеПараметра = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
		Если ЗначениеПараметра <> Неопределено Тогда
			ЗначениеПараметра.Значение = Значение;
			ЗначениеПараметра.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// Актуализация заявок

// Функция - Сформировать заголовок заявки на актуализацию
//
// Параметры:
//  КоличествоЗаявок - 	 Число - Количество заявок, которые необходимо актуализировать 
// 
// Возвращаемое значение:
//   Строка - Заголовок ссылки перехода в обработку актуализации заявок 
//
Функция СформироватьЗаголовокСсылкиАктуализацииЗаявок(Знач КоличествоЗаявок = 0) Экспорт
	
	Заголовок = "Актуализация заявок";
	Если КоличествоЗаявок > 0 Тогда 
		Заголовок = Заголовок + " (" + КоличествоЗаявок + ")";
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Служебные и вспомогательные функции

Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, СпособПоиска, ЗначениеПоиска)
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если СпособПоиска = 1 Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			ИначеЕсли СпособПоиска = 2 Тогда
				Если ЭлементОтбора.Представление = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
			
			Если СпособПоиска = 2 И ЭлементОтбора.Представление = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьСимволыВНачалеВКонце(Строка, ПроверяемыеСимволы)
	
	Для Позиция = 1 По СтрДлина(ПроверяемыеСимволы) Цикл
		Символ = Сред(ПроверяемыеСимволы, Позиция, 1);
		СимволНайден = (Лев(Строка,1) = Символ) или (Прав(Строка,1) = Символ);
		Если СимволНайден Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьФамилиюИнициалыПользователя(Знач ФИО) Экспорт
	
	Результат = "";
	
	Если НЕ ПустаяСтрока(ФИО) Тогда
		ЧастиФИО = СтрРазделить(ФИО, " ", Ложь);
		
		Если ЧастиФИО.Количество() = 1 Тогда
			Результат = ЧастиФИО[0];
			
		ИначеЕсли ЧастиФИО.Количество() = 2 Тогда
			Результат = СтрШаблон("%1 %2.", ЧастиФИО[0], Лев(ЧастиФИО[1], 1));
			
		ИначеЕсли ЧастиФИО.Количество() >= 3 Тогда		
			Результат = СтрШаблон("%1 %2.%3.", ЧастиФИО[0], Лев(ЧастиФИО[1], 1), Лев(ЧастиФИО[2], 1));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтрокаСодержитТолькоДопустимыеСимволы(Строка, ДопустимыеСимволы)
	МассивСимволов = Новый Массив;
	Для Позиция = 1 по СтрДлина(ДопустимыеСимволы) Цикл
		МассивСимволов.Добавить(Сред(ДопустимыеСимволы,Позиция,1));
	КонецЦикла;
	
	Для Позиция = 1 по СтрДлина(Строка) Цикл
		Если МассивСимволов.Найти(Сред(Строка, Позиция, 1)) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

// Функция - Получить реквизит формы
//
// Параметры:
//  Форма		 - УправляемаяФорма	 - Любая управляемая форма
//  ИмяРеквизит	 - Строка			 - Имя реквизита, которое нужно получить с формы
//  ОписаниеТипа - 					 - Описание типов -  Если реквизит не найден, то преобразует пустое значение данного типа
// 
// Возвращаемое значение:
//  Произвольное - Значение реквизита формы.
//
Функция ПолучитьРеквизитФормы(Форма, ИмяРеквизит, ОписаниеТипа = Неопределено) Экспорт
	
	Структура = Новый Структура(ИмяРеквизит, Неопределено);
	ЗаполнитьЗначенияСвойств(Структура, Форма);
	Если Структура[ИмяРеквизит] = Неопределено И НЕ ОписаниеТипа = Неопределено Тогда
		Структура.Вставить(ИмяРеквизит, ОписаниеТипа.ПривестиЗначение(Неопределено));
	КонецЕсли;
	
	Возврат Структура[ИмяРеквизит]; 
	
КонецФункции

#КонецОбласти

#Область ОбщиеПроцедурыДокументов

// Возвращает соответвие цвета состоянию документа
//
// Возвращаемое значение:
//  Соответствие, Ключ (строка) статус документа, Цвет (цвет).
//
Функция ЦветаСостоянияДокумента() Экспорт
	
	ЦветаСостояния = Новый Соответствие;
	ЦветаСостояния.Вставить("ПометкаУдаления", WebЦвета.Серый);
	ЦветаСостояния.Вставить("Проведен", WebЦвета.Зеленый);
	ЦветаСостояния.Вставить("НеПроведен", WebЦвета.Красный);
		
	Возврат ЦветаСостояния;
	
КонецФункции

#КонецОбласти
