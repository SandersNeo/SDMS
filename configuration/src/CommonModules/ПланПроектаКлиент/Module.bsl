///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура ЗадатьВопросОНеСохраненномПланеПроекта(Форма, Знач ПараметрыЗаписи = Неопределено) Экспорт
	
	Если ПараметрыЗаписи = Неопределено Тогда
		ТекстВопроса = 
		"План проекта был изменен.
		|Закрыть форму с потерей изменений?";
	Иначе
		ТекстВопроса = 
		"Есть несохраненный план проекта. После записи план проекта будет потерян. 
		|Продолжить?";
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("Форма, ПараметрыЗаписи", Форма, ПараметрыЗаписи);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВопросОПланеПроекта", ЭтотОбъект, ПараметрыОповещения);						
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

Процедура ЗаполнитьИзмененные(КоллекцияЭлементов, Измененные, ИзменяемыеПорядки) Экспорт
	
	Для Каждого Элемент Из КоллекцияЭлементов Цикл
		
		Если Элемент.Порядок <> Элемент.ПорядокДо ИЛИ Элемент.ВладелецСобытия <> Элемент.ВладелецСобытияДо Тогда
			Измененные.Добавить(Новый Структура("КлючСобытия, Порядок, ВладелецСобытия",
				Элемент.КлючСобытия, Элемент.Порядок, Элемент.ВладелецСобытия));	
		КонецЕсли;
			
		Если Элемент.Порядок <> Элемент.ПорядокДо Тогда
			ИзменяемыеПорядки.Вставить(Элемент.ПорядокДо, Элемент.Порядок);	
		КонецЕсли;
		
		ЗаполнитьИзмененные(Элемент.ПолучитьЭлементы(), Измененные, ИзменяемыеПорядки);
	КонецЦикла;
	
КонецПроцедуры
	
Функция НайтиБлижайшийДокумент(ТекущиеДанные, Знач ВладелецПлана) Экспорт
	
	РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
	
	Если  РодительСтроки <> Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(РодительСтроки.Документ) Тогда
			БлижайшийДокумент = НайтиБлижайшийДокумент(РодительСтроки, ВладелецПлана);
		Иначе
			БлижайшийДокумент = РодительСтроки.Документ;
		КонецЕсли;	
			
	Иначе
		БлижайшийДокумент = ВладелецПлана;
	КонецЕсли;
	
	Возврат БлижайшийДокумент;
	
КонецФункции	

Процедура НачатьРедактированиеСтроки(ПланПроекта, ТекущиеДанные, Знач Проект, Знач ОбновитьДиаграмму = Ложь, ОткрытьДокументы = Ложь) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСобытия = Новый Структура;
	ДанныеСобытия.Вставить("НазваниеСобытия");
	ДанныеСобытия.Вставить("ДатаНачала_План");
	ДанныеСобытия.Вставить("ДатаОкончания_План");
	ДанныеСобытия.Вставить("ДатаНачала_Факт");
	ДанныеСобытия.Вставить("ДатаОкончания_Факт");
	ДанныеСобытия.Вставить("ПланируемыйСрок");
	ДанныеСобытия.Вставить("ПроцентВыполнения");
	ДанныеСобытия.Вставить("Комментарий");
	ДанныеСобытия.Вставить("СписокДокументов");
	ДанныеСобытия.Вставить("СписокФайлов");
	ДанныеСобытия.Вставить("КлючСобытия");
	ДанныеСобытия.Вставить("ВладелецСобытия");
	ДанныеСобытия.Вставить("Автор");
	ДанныеСобытия.Вставить("Ответственный");
	ДанныеСобытия.Вставить("ЭтоЗаказчик");
	ДанныеСобытия.Вставить("ЭтоГруппа");
	ДанныеСобытия.Вставить("КонтрольнаяТочка");
	ДанныеСобытия.Вставить("Предшественник");
	ДанныеСобытия.Вставить("Статус");
	ДанныеСобытия.Вставить("ПредставлениеСтатуса");
	
	ЗаполнитьЗначенияСвойств(ДанныеСобытия, ТекущиеДанные);
	
	ДанныеСобытия.Вставить("ЕстьПодчиненные", ТекущиеДанные.ПолучитьЭлементы().Количество() > 0);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ТекущиеДанные", ТекущиеДанные);
	ПараметрыОповещения.Вставить("Проект", Проект);
	ПараметрыОповещения.Вставить("ОбновитьДиаграмму", ОбновитьДиаграмму);
	ПараметрыОповещения.Вставить("ПланПроекта", ПланПроекта);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРедактированиеСтроки", ПланПроектаКлиент, ПараметрыОповещения);
		
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РедактированиеСобытия", Истина);
	ПараметрыОткрытия.Вставить("ДанныеСобытия", ДанныеСобытия);
	ПараметрыОткрытия.Вставить("Проект", Проект);
	ПараметрыОткрытия.Вставить("ОткрытьДокументы", ОткрытьДокументы);
	
	ОткрытьФорму("РегистрСведений.ПланыВыполненияПроектов.Форма.ФормаРедактированияСобытия", ПараметрыОткрытия,
		ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОбработатьВопросОПланеПроекта(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Форма = ПараметрыОповещения.Форма;
		Форма.ИзмененПланПроекта = Ложь;
		
		ПараметрыЗаписи = ПараметрыОповещения.ПараметрыЗаписи;
		
		Если ПараметрыЗаписи = Неопределено Тогда
			Форма.Закрыть();
		Иначе
			Форма.Записать(ПараметрыЗаписи);
 		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ОбработатьВопросПеремещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = "Отмена" Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	СтрокаПриемник = ДополнительныеПараметры.СтрокаПриемник;
	
	ПредыдущийВладелец = ТекущиеДанные.ПолучитьРодителя();
	
	Если Результат = "Группировка" ИЛИ Результат = "ПовыситьУровень" Тогда 
		НоваяПодСтрока = СтрокаПриемник.ПолучитьЭлементы().Добавить();
		НоваяПодСтрока.ВладелецСобытия = СтрокаПриемник.КлючСобытия;
		НоваяПодСтрока.СтрокаПервогоУровня = Ложь;
	Иначе
		РодительПриемника = СтрокаПриемник.ПолучитьРодителя();
		
		Если РодительПриемника = Неопределено Тогда
			НоваяПодСтрока = ПолучитьНовуюСтроку(ДополнительныеПараметры.ПланПроекта, ТекущиеДанные, СтрокаПриемник);
			НоваяПодСтрока.СтрокаПервогоУровня = Истина;
			
		Иначе
			НоваяПодСтрока = ПолучитьНовуюСтроку(РодительПриемника, ТекущиеДанные, СтрокаПриемник);
			НоваяПодСтрока.ВладелецСобытия = РодительПриемника.КлючСобытия;
			НоваяПодСтрока.СтрокаПервогоУровня = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяПодСтрока, ТекущиеДанные, , "ВладелецСобытия, СтрокаПервогоУровня");
	ПереместитьЭлементыСтроки(ТекущиеДанные, НоваяПодстрока, ДополнительныеПараметры.ПланПроекта);

	Если Результат <> "ПовыситьУровень" Тогда 
		ИзмененныеНомера = Новый Соответствие;	
		ПересчитатьПорядок(ДополнительныеПараметры.ПланПроекта.ПолучитьЭлементы(), ИзмененныеНомера);	
		ОбработатьИзменениеПорядковИВладельцев(ДополнительныеПараметры.ПланПроекта.ПолучитьЭлементы(), ИзмененныеНомера);
		
		ПересчитатьРодительскиеЗаписи(НоваяПодСтрока);
		ПересчитатьРодительскиеЗаписи(ПредыдущийВладелец, Ложь);
	КонецЕсли;
	
	Возврат НоваяПодСтрока;
	
КонецФункции

Процедура ОбработатьИзменениеПорядковИВладельцев(КоллекцияЭлементов, ИзмененныеПорядки) Экспорт
	
	Для Каждого Элемент Из КоллекцияЭлементов Цикл
		Если Элемент.Предшественник > 0 И ИзмененныеПорядки.Получить(Элемент.Предшественник) <> Неопределено Тогда
			Элемент.Предшественник = ИзмененныеПорядки[Элемент.Предшественник];
		КонецЕсли;
		
		Элемент.ПорядокДо = Элемент.Порядок;
		
		ВложенныеЭлементы = Элемент.ПолучитьЭлементы();
		
		Элемент.ЭтоГруппа = ВложенныеЭлементы.Количество() > 0;
		ОбработатьИзменениеПорядковИВладельцев(ВложенныеЭлементы, ИзмененныеПорядки);
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьСозданиеСтроки(Форма, Результат) Экспорт
	
	ТекущиеДанные = Форма.Элементы.ПланПроекта.ТекущиеДанные;
	ЭлементыПлана = Форма.ПланПроекта.ПолучитьЭлементы();
	
	Если Результат.НоваяСтрока Тогда
		Если ТекущиеДанные <> Неопределено Тогда
			Индекс = ЭлементыПлана.Индекс(ТекущиеДанные);
			НоваяСтрока = ЭлементыПлана.Вставить(Индекс + 1);
		Иначе
			НоваяСтрока = ЭлементыПлана.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
		НоваяСтрока.СтрокаПервогоУровня = Истина;
		Порядок = НоваяСтрока.Порядок;
		
	ИначеЕсли Результат.НоваяПодстрока И Форма.Элементы.ПланПроекта.ТекущиеДанные <> Неопределено Тогда
		Порядок = ТекущиеДанные.ПолучитьЭлементы().Количество() + 1;
		
		НоваяСтрока = ТекущиеДанные.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
		НоваяСтрока.Порядок = Порядок;
								
		// Восстановление выделения текущей строки
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		ТекущаяКоллекция = ?(Родитель = Неопределено, ЭлементыПлана, Родитель.ПолучитьЭлементы());
		
		Для Каждого Пункт Из ТекущаяКоллекция Цикл
			Если Пункт.КлючСобытия = ТекущиеДанные.КлючСобытия Тогда
				Идентификатор = Пункт.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		
		Форма.Элементы.ПланПроекта.ТекущаяСтрока = Идентификатор; 
	КонецЕсли;
	
	ПересчитатьПорядок(ЭлементыПлана);
	
	Возврат НоваяСтрока;
	
КонецФункции
	
Процедура ОбновитьДанныеФормы(УровеньПлана, ДанныеДляОбновленияФормы, НомерЭлемента = 0) Экспорт
	
	Если НомерЭлемента >= ДанныеДляОбновленияФормы.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = ДанныеДляОбновленияФормы[НомерЭлемента];
	
	Для Каждого Строка Из УровеньПлана.ПолучитьЭлементы() Цикл
		Если Строка.КлючСобытия = ДанныеСтроки.КлючСобытия Тогда
			ЗаполнитьЗначенияСвойств(Строка, ДанныеСтроки);
			ОбновитьДанныеФормы(Строка, ДанныеДляОбновленияФормы, НомерЭлемента + 1);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитатьПорядок(КоллекцияЭлементов, ИзмененныеНомера = Неопределено, Счетчик = 0) Экспорт
	
	Для Каждого Элемент Из КоллекцияЭлементов Цикл
		Счетчик = Счетчик + 1;
		Элемент.Порядок = Счетчик;
		
		Если ИзмененныеНомера <> Неопределено И Элемент.Порядок <> Элемент.ПорядокДо Тогда
			ИзмененныеНомера.Вставить(Элемент.ПорядокДо, Элемент.Порядок);	
		КонецЕсли;
		
		ПересчитатьПорядок(Элемент.ПолучитьЭлементы(), ИзмененныеНомера, Счетчик);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПланПеретаскивание(Форма, Элемент, СтандартнаяОбработка, Строка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные; 
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Строка <> Неопределено Тогда
		СтрокаПриемник = Форма.ПланПроекта.НайтиПоИдентификатору(Строка);
		
		Если ПроверитьЗацикленность(СтрокаПриемник, ТекущиеДанные) Тогда
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура("СтрокаПриемник, ТекущиеДанные, ПланПроекта", 
			СтрокаПриемник, ТекущиеДанные, Форма.ПланПроекта);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросПеремещения", Форма,  ДополнительныеПараметры);
		ТекстВопроса = "Укажите место перемещения:";
		СписокКнопок = Новый СписокЗначений;
		
		Если СтрокаПриемник.ЭтоГруппа Тогда
			СписокКнопок.Добавить("Группировка", "В группировку");
		КонецЕсли;
		
		СписокКнопок.Добавить("Строка", "В строку рядом");
		СписокКнопок.Добавить("Отмена", "Отмена");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок,,, "Выбор места перемещения");
	Иначе
		НоваяПодстрока = Форма.ПланПроекта.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПодСтрока, ТекущиеДанные, , "ВладелецСобытия");
		ПереместитьЭлементыСтроки(ТекущиеДанные, НоваяПодстрока, Форма.ПланПроекта);
		
		ИзмененныеНомера = Новый Соответствие;
		ПересчитатьПорядок(Форма.ПланПроекта.ПолучитьЭлементы(), ИзмененныеНомера);
				
		ОбработатьИзменениеПорядковИВладельцев(Форма.ПланПроекта.ПолучитьЭлементы(), ИзмененныеНомера);		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПоследнийПорядок(Родитель) Экспорт
	
	ЭлементыПлана = Родитель.ПолучитьЭлементы();
	КоличествоСтрок = ЭлементыПлана.Количество();
	Если КоличествоСтрок > 0 Тогда
		ПоследяяСтрока = ЭлементыПлана.Получить(КоличествоСтрок - 1);
		Порядок = ПолучитьПоследнийПорядок(ПоследяяСтрока);
	Иначе 
		Порядок = Родитель.Порядок;
	КонецЕсли;
	
	Возврат Порядок;
	
КонецФункции

Процедура РазвернутьУровеньГруппировки(Форма, ИмяКоманды) Экспорт
	
	Глубина = Число(Прав(ИмяКоманды, 1));
	ИдентификаторыСтрок = Новый Соответствие;
	ПолучитьРазворачиваемыеСтроки(Форма.ПланПроекта, ИдентификаторыСтрок, Глубина);
	
	Для Каждого Элемент ИЗ ИдентификаторыСтрок Цикл
		Если Элемент.Значение Тогда
			Форма.Элементы.ПланПроекта.Развернуть(Элемент.Ключ);
		Иначе
			Форма.Элементы.ПланПроекта.Свернуть(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция РассчитатьДатаОкончания_План(Знач ДатаНачала_План, Знач ПланируемыйСрок) Экспорт
		
	Если ЗначениеЗаполнено(ДатаНачала_План) Тогда
		Если ПланируемыйСрок = 0 Тогда
			ДатаОкончания_План = ДатаНачала_План;	
		Иначе
			ДатаОкончания_План = ОбщегоНазначенияВызовСервера.ДобавитьКДатеРабочихДней(ДатаНачала_План, ПланируемыйСрок);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДатаОкончания_План;
	
КонецФункции

Функция РассчитатьПланируемыйСрок(Знач ДатаНачала_План, Знач ДатаОкончания_План) Экспорт

	Если ЗначениеЗаполнено(ДатаОкончания_План) И ЗначениеЗаполнено(ДатаНачала_План) Тогда
		КоличествоВыходных = ОбщегоНазначенияВызовСервера.КоличествоВыходныхДней(ДатаНачала_План, ДатаОкончания_План);
		Если КоличествоВыходных > (ДатаОкончания_План - ДатаНачала_План) Тогда
			ПланируемыйСрок = 0;
		Иначе
			ПланируемыйСрок = (ДатаОкончания_План - ДатаНачала_План) / 86400 - КоличествоВыходных;
		КонецЕсли
	Иначе		
		ПланируемыйСрок = 0;
	КонецЕсли;
	
	Возврат ПланируемыйСрок;
	
КонецФункции

Процедура УдалитьТекущуюСтрокуПланПроекта(ПланПроекта, ТекущиеДанные) Экспорт
	
	ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	ТекущаяСтрока = ПланПроекта.НайтиПоИдентификатору(ИдентификаторСтроки);
	СтрокаРодитель = ТекущаяСтрока.ПолучитьРодителя();
	
	Если СтрокаРодитель = Неопределено Тогда
		ПланПроекта.ПолучитьЭлементы().Удалить(ТекущаяСтрока);
	Иначе
		СтрокаРодитель.ПолучитьЭлементы().Удалить(ТекущаяСтрока);
	КонецЕсли;
	
	ИзмененныеНомера = Новый Соответствие;
	ПересчитатьПорядок(ПланПроекта.ПолучитьЭлементы(), ИзмененныеНомера);
	ОбработатьИзменениеПорядковИВладельцев(ПланПроекта.ПолучитьЭлементы(), ИзмененныеНомера);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьРедактированиеСтроки(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	Смещение = 0;
	Если ТекущиеДанные.ДатаОкончания_План <> Результат.ДатаОкончания_План Тогда
		Если ТекущиеДанные.ДатаОкончания_План > Результат.ДатаОкончания_План Тогда
			Смещение = -1 * РассчитатьПланируемыйСрок(Результат.ДатаОкончания_План,
				ТекущиеДанные.ДатаОкончания_План);
		Иначе
			Смещение = РассчитатьПланируемыйСрок(
				ТекущиеДанные.ДатаОкончания_План, Результат.ДатаОкончания_План);
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат, , "КлючСобытия");
	
	Если Смещение = 0 Тогда
		ПересчитатьРодительскиеЗаписи(ТекущиеДанные);
	КонецЕсли;
	
	Оповестить("ИзменениеЗаписи", Смещение, ТекущиеДанные);
		
	Если ДополнительныеПараметры.ОбновитьДиаграмму Тогда
		Оповестить("ОбновитьДиаграмму", ДополнительныеПараметры.Проект);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПересчитатьРодительскиеЗаписи(ТекущиеДанные, ПолучатьРодителя = Истина, ОбратныйПорядок = Ложь, 
	КлючСобытия = Неопределено, Идентификатор = Неопределено) Экспорт
	
	Если ПолучатьРодителя Тогда
		Родитель = ТекущиеДанные.ПолучитьРодителя();
	Иначе
		Родитель = ТекущиеДанные;
	КонецЕсли;
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Родитель.КлючСобытия = КлючСобытия Тогда
		Идентификатор = Родитель.ПолучитьИдентификатор();
	КонецЕсли;
	
	МаксимальнаяДатаОкончания = '00010101';
	МинимальнаяДатаНачала = '00010101';

	МаксимальнаяДатаОкончанияФакт = '00010101';
	МинимальнаяДатаНачалаФакт = '00010101';	
	
	ПроцентВыполненияОбщий = 0;
	
	ЭлементыПлана = Родитель.ПолучитьЭлементы();
	КоличествоЭлементов = ЭлементыПлана.Количество();
	
	Если КоличествоЭлементов > 0 Тогда				
		Для Каждого Строка Из ЭлементыПлана Цикл
			Если ОбратныйПорядок И (Строка.ЭтоГруппа ИЛИ Строка.ПолучитьЭлементы().Количество() > 0) Тогда
				ПересчитатьРодительскиеЗаписи(Строка, Ложь, ОбратныйПорядок, КлючСобытия, Идентификатор);
			КонецЕсли;
						
			Если Строка.ДатаОкончания_План > МаксимальнаяДатаОкончания Тогда
				МаксимальнаяДатаОкончания = Строка.ДатаОкончания_План;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(МинимальнаяДатаНачала)
				ИЛИ (ЗначениеЗаполнено(Строка.ДатаНачала_План) И Строка.ДатаНачала_План < МинимальнаяДатаНачала) Тогда
				
				МинимальнаяДатаНачала = Строка.ДатаНачала_План;
			КонецЕсли;
			
			Если Строка.ДатаОкончания_Факт > МаксимальнаяДатаОкончанияФакт Тогда
				МаксимальнаяДатаОкончанияФакт = Строка.ДатаОкончания_Факт;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(МинимальнаяДатаНачалаФакт)
				ИЛИ (ЗначениеЗаполнено(Строка.ДатаНачала_Факт) И Строка.ДатаНачала_Факт < МинимальнаяДатаНачалаФакт) Тогда
				
				МинимальнаяДатаНачалаФакт = Строка.ДатаНачала_Факт;
			КонецЕсли;
			
			ПроцентВыполненияОбщий = ПроцентВыполненияОбщий + Строка.ПроцентВыполнения;
			
			Если Строка.КлючСобытия = КлючСобытия Тогда
				Идентификатор = Строка.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЦикла;
		
		Родитель.ПроцентВыполнения = ПроцентВыполненияОбщий / КоличествоЭлементов;
	Иначе
		Родитель.ПроцентВыполнения = 0;	
	КонецЕсли;
	
	Родитель.ЭтоГруппа = (КоличествоЭлементов > 0);
	РассчитатьПланируемыйСрок = Ложь;
	
	Если ЗначениеЗаполнено(МинимальнаяДатаНачала) И Родитель.ДатаНачала_План <> МинимальнаяДатаНачала Тогда
		Родитель.ДатаНачала_План = МинимальнаяДатаНачала;
		РассчитатьПланируемыйСрок = Истина;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(МаксимальнаяДатаОкончания) И Родитель.ДатаОкончания_План <> МаксимальнаяДатаОкончания Тогда
		Родитель.ДатаОкончания_План = МаксимальнаяДатаОкончания;
		РассчитатьПланируемыйСрок = Истина;
	КонецЕсли;
	
	Если РассчитатьПланируемыйСрок Тогда
		Родитель.ПланируемыйСрок = ПланПроектаКлиент.РассчитатьПланируемыйСрок(
			Родитель.ДатаНачала_План, Родитель.ДатаОкончания_План);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(МинимальнаяДатаНачалаФакт) И Родитель.ДатаНачала_Факт <> МинимальнаяДатаНачалаФакт Тогда
		Родитель.ДатаНачала_Факт = МинимальнаяДатаНачалаФакт;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(МаксимальнаяДатаОкончанияФакт) И Родитель.ДатаОкончания_Факт <> МаксимальнаяДатаОкончанияФакт Тогда
		Родитель.ДатаОкончания_Факт = МаксимальнаяДатаОкончанияФакт;
	КонецЕсли;
		
	Если НЕ ОбратныйПорядок Тогда
		ПересчитатьРодительскиеЗаписи(Родитель, , , КлючСобытия, Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереместитьЭлементыСтроки(Знач ТекущиеДанные, НоваяПодстрока, ПланПроекта)
	
	ЭлементыПереносимойСтроки = ТекущиеДанные.ПолучитьЭлементы();
	
	Для Каждого Элемент Из ЭлементыПереносимойСтроки Цикл
		НоваяСтрока = НоваяПодстрока.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
		СкопироватьСтрокиВПриемник(Элемент, НоваяСтрока);
	КонецЦикла;
	
	// Получаем коллекцию элементов родителя текущего элемента
	// и удаляем текущий элемент из этого родителя
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	
	Если Родитель <> Неопределено Тогда	
		РодительСтроки = Родитель.ПолучитьЭлементы();
	Иначе
		РодительСтроки = ПланПроекта.ПолучитьЭлементы();	
	КонецЕсли;
	
	РодительСтроки.Удалить(ТекущиеДанные);
	
КонецПроцедуры	

Функция ПолучитьНовуюСтроку(УровеньДерева, ТекущиеДанные, СтрокаПриемник)
	
	ЭлементыПлана = УровеньДерева.ПолучитьЭлементы();
	Индекс = ЭлементыПлана.Индекс(СтрокаПриемник);
			
	ИндексПеремещаемойСтроки = ЭлементыПлана.Индекс(ТекущиеДанные);
	Если ИндексПеремещаемойСтроки <> -1 И ИндексПеремещаемойСтроки < Индекс Тогда
		Индекс = Индекс + 1;
	КонецЕсли;
			
	Возврат ЭлементыПлана.Вставить(Индекс);
	
КонецФункции

Процедура ПолучитьРазворачиваемыеСтроки(Знач Корень, ИдентификаторыСтрок, Знач Глубина)
	
	Глубина = Глубина - 1;
	
	Для Каждого Строка ИЗ Корень.ПолучитьЭлементы() Цикл
		ИдентификаторыСтрок.Вставить(Строка.ПолучитьИдентификатор(), Глубина > 0);
		ПолучитьРазворачиваемыеСтроки(Строка, ИдентификаторыСтрок, Глубина);
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьЗацикленность(СтрокаПриемник, Строка)
	
	ПриемникВИерархииЗаписи = Ложь;
	
	Родитель = СтрокаПриемник.ПолучитьРодителя();
	
	Пока Родитель <> Неопределено Цикл
		Если Родитель = Строка Тогда
			ПриемникВИерархииЗаписи = Истина;
			Прервать;
		КонецЕсли;
		
		Родитель = Родитель.ПолучитьРодителя();
	КонецЦикла;
	
	Возврат ПриемникВИерархииЗаписи;
	
КонецФункции

Процедура СкопироватьСтрокиВПриемник(Элемент, НоваяСтрока)
	
	ЭлементыПереносимойСтроки = Элемент.ПолучитьЭлементы();
	Для Каждого ЭлементКоллекции Из ЭлементыПереносимойСтроки Цикл
		НоваяПодСтрока = НоваяСтрока.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяПодСтрока, ЭлементКоллекции);
		СкопироватьСтрокиВПриемник(ЭлементКоллекции, НоваяПодСтрока);
	КонецЦикла;	
		
КонецПроцедуры

#КонецОбласти
