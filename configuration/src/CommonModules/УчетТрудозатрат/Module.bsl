///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции работы с трудозатратами и всех, что с ними
// связано.
//
// - Трудозатраты: создание интерфейса, чтение и запись данных.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Добавляет запись в регистр сведений ПросмотренныеЗаявки
//
// Параметры:
//  Ссылка - ДокументСсылка.Задача, ДокументСсылка.ЗаявкаНаРазработку - открытый объект
//  ОбъектОснование - Произвольный - основание объекта
//
Процедура ДобавитьВПросмотренныеЗаявки(Знач Ссылка, Знач ОбъектОснование = Неопределено) Экспорт
	
	Если Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияДополнительныхПодсистем.ДобавитьВПросмотренныеЗаявки(Ссылка, ОбъектОснование);
	
КонецПроцедуры

// Заполняет список выбора поля формы "Вид деятельности" списком видов деятельности и услуг 
//
// Параметры:
//  ВидДеятельности - ПолеФормы - поле, список выбора которого требуется заполнить.
//  Направление     - СправочникСсылка.НаправлениеРазработки - направление объекта трудозатрат.
//  Пользователь    - СправочникСсылка.Пользователи - пользователь, который вносит трудозатраты.
//
// Возвращаемое значение:
//   Соответствие
// 	 * Ключ     - Строка	- сумма строк идентификаторов Вида деятельности и Услуги, если она есть
// 	 * Значение - Структура.
//    	** ВидДеятельности - СправочникСсылка.ВидыДеятельности - элемент справочника.
//    	** Услуга 		    - СправочникСсылка.Услуги - элемент справочника.
//
Функция ДополнитьВидыДеятельностиУслугами(ВидДеятельности, Знач Направление, Знач Пользователь = Неопределено, Знач Дата = Неопределено, Знач Собрание = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ВидыДеятельностиСУслугами = Ложь;
	
	Если Пользователи.ЭтоСотрудникИТОрганизации(Пользователь, Дата)
		И РегистрыСведений.ИспользованиеЮридическихЛицНаправлений.Использует(Направление) Тогда
		
		ОсновноеЮрЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Направление, "ОсновноеЮридическоеЛицо");
			
		Если ЗначениеЗаполнено(ОсновноеЮрЛицо) Тогда
			ХешВидДеятельностиУслуга = ЗаполнитьСписокВидовДеятельностиУслуг(ВидДеятельности.СписокВыбора, Пользователь, Собрание);
			
			Если ЗначениеЗаполнено(Собрание) И ХешВидДеятельностиУслуга.Количество() = 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Услуга не заполнена или не соответствует должности");
				ВидыДеятельностиСУслугами = Истина;
			КонецЕсли;
			
			Если ХешВидДеятельностиУслуга.Количество() > 0 Тогда
				ВидыДеятельностиСУслугами = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ВидыДеятельностиСУслугами Тогда
		ХешВидДеятельностиУслуга = ЗаполнитьСписокВыбораВидовДеятельности(ВидДеятельности.СписокВыбора, Пользователь, Собрание);
	КонецЕсли;
	
	Возврат ХешВидДеятельностиУслуга;
	
КонецФункции

// Заполняет список выбора поля формы "Вид деятельности" списком видов деятельности и услуг 
//
// Параметры:
//  СписокВыбора - список выбора элемента управляемой формы - список поля Вид деятельности формы источника.
//
// Возвращаемое значение:
//   Соответствие - Соответствие.
// 	 * Ключ     - Строка	- сумма строк идентификаторов Вида деятельности и Услуги
// 	 * Значение - Структура.
//    	** ВидДеятельности - ПеречислениеСсылка.ВидыДеятельности - значение перечисления.
//    	** Услуга 		   - СправочникСсылка.Услуги - элемент справочника.
//
Функция ЗаполнитьСписокВидовДеятельностиУслуг(СписокВыбора, Знач Пользователь, Знач Собрание) Экспорт
	
	СписокВыбора.Очистить();
	
	ХешВидДеятельностиУслуга = Новый Соответствие;
		
	ДанныеПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Пользователь, "Филиал, Должность");
		
	ТекстЗапроса = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ВидыДеятельностиУслуг.Ссылка КАК Ссылка,
	|	ВидыДеятельностиУслуг.Наименование КАК Наименование,
	|	ВидыДеятельностиУслуг.Услуга КАК Услуга,
	|	ВидыДеятельностиУслуг.ВидДеятельности КАК ВидДеятельности,
	|	ДоступныеУслугиФилиалов.Порядок КАК Порядок,
	|	СправочникУслуги.ИндексКартинки КАК ИндексКартинки
	|ИЗ
	|	Справочник.ВидыДеятельностиУслуг КАК ВидыДеятельностиУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Услуги КАК СправочникУслуги
	|		ПО ВидыДеятельностиУслуг.Услуга = СправочникУслуги.Ссылка
	|			И (НЕ СправочникУслуги.ПометкаУдаления)
	|			И (СправочникУслуги.Используется)
	|			И (НЕ СправочникУслуги.ФиксированныйТариф)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Услуги.Должности КАК УслугиДолжности
	|		ПО (УслугиДолжности.Ссылка = СправочникУслуги.Ссылка)
	|			И (УслугиДолжности.Должность = &Должность)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеУслугиФилиалов КАК ДоступныеУслугиФилиалов
	|		ПО (ДоступныеУслугиФилиалов.Филиал = &Филиал)
	|			И (ДоступныеУслугиФилиалов.ВидДеятельностиУслуги = ВидыДеятельностиУслуг.Ссылка)
	|			И (ДоступныеУслугиФилиалов.Использование)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДеятельности КАК СпрВидыДеятельности
	|		ПО ВидыДеятельностиУслуг.ВидДеятельности = СпрВидыДеятельности.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияДополнительныхРеквизитовОбъектов КАК ЗначенияПрименяетсяДляСобрания
	|		ПО СпрВидыДеятельности.Ссылка = ЗначенияПрименяетсяДляСобрания.Объект
	|			И (ЗначенияПрименяетсяДляСобрания.Реквизит = &ПрименяетсяДляСобрания)
	|ГДЕ
	|	НЕ ВидыДеятельностиУслуг.ПометкаУдаления
	|	И &УсловиеСобрание
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Наименование
	|ИТОГИ ПО
	|	Услуга";
	#КонецОбласти
	
	Запрос = Новый Запрос;
    Запрос.Текст = ТекстЗапроса;
	ИнтеграцияДополнительныхПодсистем.ИзменитьЗапросСпискаВидовДеятельностиУслуг(Запрос, Собрание, Пользователь);		
	
	Запрос.УстановитьПараметр("Должность", ДанныеПользователя.Должность);	
	Запрос.УстановитьПараметр("Филиал", ДанныеПользователя.Филиал);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		КартинкиУслуг = Справочники.Услуги.Картинки();
		
		ПредыдущееЗначение = Неопределено;
		ВыборкаГруппировки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаГруппировки.Следующий() Цикл
			Выборка = ВыборкаГруппировки.Выбрать();
			Пока Выборка.Следующий() Цикл
				ИдентификаторСтроки = XMLСтрока(Выборка.Ссылка);
				ЭлементСписка = СписокВыбора.Добавить(ИдентификаторСтроки, Выборка.Наименование);
				
				Если Выборка.Услуга <> ПредыдущееЗначение Тогда
					ЭлементСписка.Картинка = КартинкиУслуг.Получить(Выборка.ИндексКартинки);
					ПредыдущееЗначение = Выборка.Услуга;
				Иначе
					ЭлементСписка.Картинка = БиблиотекаКартинок.ПустаяКартинка;
				КонецЕсли;
				
				Данные = Новый Структура("ВидДеятельности, Услуга", Выборка.ВидДеятельности, Выборка.Услуга);
				ХешВидДеятельностиУслуга.Вставить(ИдентификаторСтроки, Данные);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ХешВидДеятельностиУслуга
	
КонецФункции

// Заполняет итоговые трудозатраты объекта при его открытии
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма объекта 
//  ЭтоНовый - Булево - Признак того, что объект новый
//
Процедура ЗаполнитьТрудозатраты(Форма, Знач ЭтоНовый) Экспорт
	
	Если ЭтоНовый Тогда
		Возврат;
	КонецЕсли;

	Ссылка = Форма.Объект.Ссылка;

	ЗначенияФильтра = УчетТрудозатратКлиентСервер.ЗначенияФильтраТрудозатрат();

	Трудозатраты = РегистрыСведений.Трудозатраты.СформироватьДанныеДляФормы(Ссылка, Истина);
	Форма.ФактическиеЗатратыВремени = Трудозатраты.ТрудозатратыФактическиеВсе;
	Форма.ФактическиеТрудозатратыКоманд = Трудозатраты.ТрудозатратыПоКомандам;

	Если УчетТрудозатратВызовСервера.НесколькоФилиаловПользователя() Тогда
		Заголовок = "Мои команды";
	Иначе
		Заголовок = "Моя команда";
	КонецЕсли;

	Форма.Элементы.ФактическиеТрудозатратыКоманд.Заголовок = Заголовок;

	ТипЗначенияОбъекта = ТипЗнч(Ссылка);
	
	Если ТипЗначенияОбъекта = Тип("СправочникСсылка.Проекты") 
		ИЛИ ТипЗначенияОбъекта = Тип("ДокументСсылка.ВнутреннееЗадание") Тогда
		Форма.ФактическиеТрудозатратыПоОбъекту = Трудозатраты.ОбщиеТрудозатратыПоОбъекту;
		Форма.ФактическаяСтоимостьТрудозатрат = Трудозатраты.ОбщаяСтоимостьТрудозатрат;
	КонецЕсли;
	
	Если ТипЗначенияОбъекта = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
		Форма.ФактическиеТрудозатратыОбщие = Трудозатраты.КоличествоЧасов;
	КонецЕсли;

	Для Каждого Элемент Из Трудозатраты.ЗначенияФильтра Цикл
		Форма.УправлениеТрудозатратами_ЗначенияФильтров.Добавить(Элемент.Значение, Элемент.Представление);
	КонецЦикла;

	Если НЕ ЗначениеЗаполнено(Форма.УправлениеТрудозатратами_ФильтрТрудозатрат) Тогда
		Форма.УправлениеТрудозатратами_ФильтрТрудозатрат = ЗначенияФильтра.Общие; 
	КонецЕсли;
	
КонецПроцедуры

// Добавляет трудозатраты к уже имеющимся. Либо фиксирует трудозатраты по
//  задачам, в которых их нету. Основное назначение - работа из документа Спринт.
//
// Параметры:
//  НаборДанных	 - ТаблицаЗначений	 - таблица с данными плановых трудозатрат.
//  Спринт		 - ДокументСсылка.Спринт - документ спринта
//
Процедура ЗаписатьНаборПлановыхТрудозатрат(Знач НаборДанных, Знач Спринт = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТрудозатрат.Объект КАК Объект,
	|	ТаблицаТрудозатрат.Трудозатраты КАК Трудозатраты,
	|	ТаблицаТрудозатрат.ТрудозатратыТестирования КАК ТрудозатратыТестирования
	|ПОМЕСТИТЬ ТаблицаТрудозатрат
	|ИЗ
	|	&ТаблицаТрудозатрат КАК ТаблицаТрудозатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланируемыеТрудозатратыПоСпринтам.Объект КАК Объект,
	|	СУММА(ПланируемыеТрудозатратыПоСпринтам.Трудозатраты) КАК Трудозатраты,
	|	ПланируемыеТрудозатратыПоСпринтам.ТипТрудозатрат КАК ТипТрудозатрат
	|ПОМЕСТИТЬ РаспределенныеТрудозатраты
	|ИЗ
	|	РегистрСведений.ПланируемыеТрудозатратыПоСпринтам КАК ПланируемыеТрудозатратыПоСпринтам
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланируемыеТрудозатратыПоСпринтам.Объект,
	|	ПланируемыеТрудозатратыПоСпринтам.ТипТрудозатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланируемыеТрудозатраты.Объект КАК Объект,
	|	ПланируемыеТрудозатраты.Трудозатраты - ЕСТЬNULL(РаспределенныеТрудозатраты.Трудозатраты, 0) КАК Трудозатраты,
	|	ПланируемыеТрудозатраты.ТипТрудозатрат КАК ТипТрудозатрат
	|ПОМЕСТИТЬ СвободныеТрудозатраты
	|ИЗ
	|	РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РаспределенныеТрудозатраты КАК РаспределенныеТрудозатраты
	|		ПО ПланируемыеТрудозатраты.Объект = РаспределенныеТрудозатраты.Объект
	|			И (ПланируемыеТрудозатраты.ТипТрудозатрат = РаспределенныеТрудозатраты.ТипТрудозатрат)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТрудозатрат.Объект КАК Объект,
	|	ТаблицаТрудозатрат.Трудозатраты КАК ДобавляемыеТрудозатраты,
	|	ТаблицаТрудозатрат.Трудозатраты - ЕСТЬNULL(СвободныеТрудозатраты.Трудозатраты, 0) + ЕСТЬNULL(ПланируемыеТрудозатраты.Трудозатраты, 0) КАК НовыеТрудозатраты,
	|	ЕСТЬNULL(ПланируемыеТрудозатраты.Трудозатраты, 0) КАК ПредыдущиеТрудозатраты
	|ИЗ
	|	ТаблицаТрудозатрат КАК ТаблицаТрудозатрат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
	|		ПО ТаблицаТрудозатрат.Объект = ПланируемыеТрудозатраты.Объект
	|			И ПланируемыеТрудозатраты.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвободныеТрудозатраты КАК СвободныеТрудозатраты
	|		ПО ТаблицаТрудозатрат.Объект = СвободныеТрудозатраты.Объект
	|			И СвободныеТрудозатраты.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка)
	|ГДЕ
	|	ТаблицаТрудозатрат.Трудозатраты > ЕСТЬNULL(СвободныеТрудозатраты.Трудозатраты, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТрудозатрат.Объект КАК Объект,
	|	ТаблицаТрудозатрат.Трудозатраты КАК ДобавляемыеТрудозатраты
	|ИЗ
	|	ТаблицаТрудозатрат КАК ТаблицаТрудозатрат
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвободныеТрудозатраты КАК СвободныеТрудозатраты
	|		ПО ТаблицаТрудозатрат.Объект = СвободныеТрудозатраты.Объект
	|			И СвободныеТрудозатраты.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка)
	|ГДЕ
	|	ТаблицаТрудозатрат.Трудозатраты <= ЕСТЬNULL(СвободныеТрудозатраты.Трудозатраты, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТрудозатрат.Объект КАК Объект,
	|	ТаблицаТрудозатрат.ТрудозатратыТестирования КАК ДобавляемыеТрудозатраты,
	|	ТаблицаТрудозатрат.ТрудозатратыТестирования - ЕСТЬNULL(СвободныеТрудозатратыТестирорвания.Трудозатраты, 0) + ЕСТЬNULL(ПланируемыеТрудозатратыТестирование.Трудозатраты, 0) КАК НовыеТрудозатраты,
	|	ЕСТЬNULL(ПланируемыеТрудозатратыТестирование.Трудозатраты, 0) КАК ПредыдущиеТрудозатраты
	|ИЗ
	|	ТаблицаТрудозатрат КАК ТаблицаТрудозатрат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатратыТестирование
	|		ПО ТаблицаТрудозатрат.Объект = ПланируемыеТрудозатратыТестирование.Объект
	|			И (ПланируемыеТрудозатратыТестирование.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Тестирование))
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвободныеТрудозатраты КАК СвободныеТрудозатратыТестирорвания
	|		ПО ТаблицаТрудозатрат.Объект = СвободныеТрудозатратыТестирорвания.Объект
	|			И СвободныеТрудозатратыТестирорвания.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Тестирование)
	|ГДЕ
	|	ТаблицаТрудозатрат.ТрудозатратыТестирования <> ЕСТЬNULL(СвободныеТрудозатратыТестирорвания.Трудозатраты, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТрудозатрат.Объект КАК Объект,
	|	ТаблицаТрудозатрат.ТрудозатратыТестирования КАК ДобавляемыеТрудозатраты
	|ИЗ
	|	ТаблицаТрудозатрат КАК ТаблицаТрудозатрат
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвободныеТрудозатраты КАК СвободныеТрудозатратыТестирорвания
	|		ПО ТаблицаТрудозатрат.Объект = СвободныеТрудозатратыТестирорвания.Объект
	|			И СвободныеТрудозатратыТестирорвания.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Тестирование)
	|ГДЕ
	|	ТаблицаТрудозатрат.ТрудозатратыТестирования = ЕСТЬNULL(СвободныеТрудозатратыТестирорвания.Трудозатраты, 0)";
	
	Запрос.УстановитьПараметр("ТаблицаТрудозатрат", НаборДанных);
	
	РезультатПакеты = Запрос.ВыполнитьПакет();
	
	ОбработатьПакеты(РезультатПакеты, Спринт, РезультатПакеты.ВГраница() - 3, Перечисления.ТипыТрудозатрат.Разработка);
	ОбработатьПакеты(РезультатПакеты, Спринт, РезультатПакеты.ВГраница() - 1, Перечисления.ТипыТрудозатрат.Тестирование);
	
КонецПроцедуры 

Процедура ОбработатьПакеты(РезультатПакеты, Знач Спринт, НомерПакета, ТипТрудозатрат)
	
	Если НЕ РезультатПакеты.Получить(НомерПакета).Пустой() Тогда
		Выборка = РезультатПакеты.Получить(НомерПакета).Выбрать();		
		КатегорияПрочее = Перечисления.КатегорииСобытийИсторияИзменений.Прочее;
		
		Пока Выборка.Следующий() Цикл
			ЗаписатьПлановыеТрудозатраты(Выборка.Объект, Выборка.НовыеТрудозатраты, ТипТрудозатрат); 
			
			ДанныеСтруктура = Новый Структура;
			ДанныеСтруктура.Вставить("Событие", "ИзменениеРеквизита");

			Если Спринт <> Неопределено Тогда
				РегистрыСведений.ПланируемыеТрудозатратыПоСпринтам.Добавить(
					Выборка.Объект, Спринт, ТипТрудозатрат, Выборка.ДобавляемыеТрудозатраты);
			КонецЕсли;
			
			// TODO: сделать сохранение данных истории вне цикла
			ТекстСтарогоЗначения = "";
			Если Выборка.ПредыдущиеТрудозатраты > 0 Тогда
				ТекстСтарогоЗначения = СтрШаблон("с <b>%1</b>", Выборка.ПредыдущиеТрудозатраты);
				ДанныеСтруктура.Вставить("СтароеЗначение", Выборка.ПредыдущиеТрудозатраты);
			КонецЕсли;
			
			Если ТипТрудозатрат = Перечисления.ТипыТрудозатрат.Тестирование Тогда			
				ДанныеСтруктура.Вставить("Реквизит", "Оценка трудозатрат тестирования");
			Иначе
				ДанныеСтруктура.Вставить("Реквизит", "Оценка трудозатрат");
			КонецЕсли;
						
			ДанныеСтруктура.Вставить("НовоеЗначение", Выборка.НовыеТрудозатраты);
			Данные = ЗаписатьЗначениеJSON(ДанныеСтруктура);
			
			ЗаписьДляИстории = Новый Структура("Данные, Категория", Данные, КатегорияПрочее);
			РегистрыСведений.ИсторияИзмененийОбъектовПоСобытиям.Добавить(Выборка.Объект, ЗаписьДляИстории);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ РезультатПакеты.Получить(НомерПакета + 1).Пустой() Тогда
		ВыборкаСвободных = РезультатПакеты.Получить(НомерПакета + 1).Выбрать();
		
		Пока ВыборкаСвободных.Следующий() Цикл
			Если Спринт <> Неопределено Тогда
				РегистрыСведений.ПланируемыеТрудозатратыПоСпринтам.Добавить(ВыборкаСвободных.Объект, 
					Спринт, ТипТрудозатрат, ВыборкаСвободных.ДобавляемыеТрудозатраты);
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

// Записывает плановые трудозатраты по объекту в регистр сведений ПланируемыеТрудозатраты.
//
// Параметры:
//  Объект       - ДокументСсылка.Задача - объект-владелец плановых трудозатрат.
//  Трудозатраты - Число - величина трудозатрат.
//
Процедура ЗаписатьПлановыеТрудозатраты(Знач Объект, Знач Трудозатраты, Знач ТипТрудозатрат = Неопределено) Экспорт
	
	Если ТипТрудозатрат = Неопределено Тогда
		ТипТрудозатрат = Перечисления.ТипыТрудозатрат.Разработка;
	КонецЕсли;
	
	НоваяЗапись = РегистрыСведений.ПланируемыеТрудозатраты.СоздатьМенеджерЗаписи();
	НоваяЗапись.Объект = Объект;
	НоваяЗапись.Трудозатраты = Трудозатраты;
	НоваяЗапись.ТипТрудозатрат = ТипТрудозатрат;
	НоваяЗапись.Автор = ПараметрыСеанса.ТекущийПользователь;
	НоваяЗапись.ДатаДобавления = ТекущаяДатаСеанса();
	НоваяЗапись.Записать();
	
КонецПроцедуры

// Создает на форме элементы и команды для управления трудозатратами.
//
// Параметры:
//  Форма         - УправляемаяФорма - форма, в которой будут созданы элементы и
//                  команды.
//  ГруппаСтраниц - ГруппаФормы - группа страниц, в которую будет добавлена новая
//                  страница.
//
Процедура КонструкторИнтерфейсаУправленияТрудозатратами(Форма, ГруппаСтраниц) Экспорт
	
	Перем НовыеКоманды;
	
	СоздатьРеквизитыФормы(Форма);
	
	СоздатьЭлементыФормы(Форма, ГруппаСтраниц, НовыеКоманды);	
	
КонецПроцедуры

// Возвращает идентификатор вида деятельности
//
// Параметры:
//  ВидДеятельности	 - СправочникСсылка.ВидыДеятельности - вид деятельности
//  Услуга				 - СправочникСсылка.Услуги - услуга
// 
// Возвращаемое значение:
//  Строка - идентификатор
//
Функция ПолучитьИдентификаторВидаДеятельности(Знач ВидДеятельности, Знач Услуга) Экспорт
	
	Результат = "";
	
	Если ЗначениеЗаполнено(Услуга) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыДеятельностиУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыДеятельностиУслуг КАК ВидыДеятельностиУслуг
		|ГДЕ
		|	ВидыДеятельностиУслуг.ВидДеятельности = &ВидДеятельности
		|	И ВидыДеятельностиУслуг.Услуга = &Услуга";
		
		Запрос.УстановитьПараметр("ВидДеятельности", ВидДеятельности);
		Запрос.УстановитьПараметр("Услуга", Услуга);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Результат = XMLСтрока(Выборка.Ссылка);
		КонецЕсли;
	Иначе
		Результат = XMLСтрока(ВидДеятельности);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает общее количество часов по объекту
//
// Параметры:
//  Объект	 - ДокументСсылка.ЗаявкаНаРазработку	 - заявка
// 
// Возвращаемое значение:
//  Число - общее количество часов трудозатрат по объекту
//
Функция ПолучитьОбщееКоличествоЧасов(Знач Объект) Экспорт
	
	Результат = РегистрыСведений.Трудозатраты.СформироватьДанныеДляФормы(Объект, Истина);
	
	Возврат Результат.КоличествоЧасов;
	
КонецФункции

// Возвращает плановые трудозатраты по объекту.
//
// Параметры:
//  Объект - ДокументСсылка.Задача - объект, для которого нужно получить плановые
//           трудозатраты.
//
// Возвращаемое значение:
//  Число.
//
Функция ПолучитьПлановыеТрудозатраты(Знач Объект, Знач ТипТрудозатрат = Неопределено) Экспорт
	
	Если ТипТрудозатрат = Неопределено Тогда
		ТипТрудозатрат = Перечисления.ТипыТрудозатрат.Разработка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланируемыеТрудозатраты.Трудозатраты КАК Трудозатраты
	|ИЗ
	|	РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
	|ГДЕ
	|	ПланируемыеТрудозатраты.Объект = &Объект
	|	И ПланируемыеТрудозатраты.ТипТрудозатрат = &ТипТрудозатрат";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("ТипТрудозатрат", ТипТрудозатрат);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ПлановыеТрудозатраты = Выборка.Трудозатраты;
	Иначе
		ПлановыеТрудозатраты = 0;
	КонецЕсли;
	
	Возврат ПлановыеТрудозатраты;	
	
КонецФункции

// Возвращает общую стоимость реализации заявки.
//
// Параметры:
//  Заявка - ДокументСсылка.ЗаявкаНаРазработку - заявка, для которой нужно получить
//           стоимость ее реализации.
//
// Возвращаемое значение:
//  Число - стоимость реализации заявки в рублях.
//
Функция ПолучитьСтоимостьРеализацииЗаявки(Знач Заявка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОказанныеУслугиОбороты.СуммаОборот КАК СтоимостьРеализации
	|ИЗ
	|	РегистрНакопления.ОказанныеУслуги.Обороты(, , Авто, ОбъектОснование = &Заявка) КАК ОказанныеУслугиОбороты";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Стоимость = Выборка.СтоимостьРеализации;
	Иначе
		Стоимость = 0;
	КонецЕсли;
	
	Возврат Стоимость;	
	
КонецФункции

// Проверяет нужно ли добавить событие на обновление юрлица или направления в трудозатратах
//
// Параметры:
//  Объект			 - ДокументОбъект.ЗаявкаНаРазработку, ДокументОбъект.ВнутреннееЗадание, СправочникОбъект.Проекты - изменяемый объект
//  ЭтоНовыйОбъект - Булево - это новый объект
//  ДанныеДоЗаписи - Структура - данные объекта до записи
//
Процедура ПроверкаНеобходимостиПересчетаТрудозатрат(Знач Объект, Знач ЭтоНовыйОбъект, Знач ДанныеДоЗаписи) Экспорт
	
	Если НЕ ЭтоНовыйОбъект И ДанныеДоЗаписи <> Неопределено 
		И (ДанныеДоЗаписи.ЮридическоеЛицо <> Объект.ЮридическоеЛицо 
			ИЛИ ДанныеДоЗаписи.Направление <> Объект.Направление) Тогда
			
		РегистрыСведений.ОчередьСобытийНаОбработку.ДобавитьЗаданиеОбновленияКлючевыхИзмеренийТрудозатрат(Объект.Ссылка,
			Объект.Направление, Объект.ЮридическоеЛицо);
	КонецЕсли;
	
КонецПроцедуры 

// Перебрасывает общие трудозатраты объекта со старого основания на новое.
//
// Параметры:
//  Объект				 - ДокументСсылка.ЗаявкаНаРазработку, ДокументСсылка.ВнутреннееЗадание, СправочникСсылка.Проекты - ссылка на изменяемый объект. 
//  Основание			 - ДокументСсылка.ВнутреннееЗадание, СправочникСсылка.Проекты - ссылка на основание объекта. 
//  ПредыдущееОснование	 - ДокументСсылка.ВнутреннееЗадание, СправочникСсылка.Проекты - ссылка на основание объекта до изменения.
//
Процедура ОбработатьТрудозатратыПриИзмененииОснованияОбъекта(Знач Объект, Знач Основание, Знач ПредыдущееОснование) Экспорт

	Данные = Новый Структура("Затрата, Стоимость", 0, 0);
	
	ВидРеквизита = ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.ФактическиеТрудозатраты;
	Затрата = РегистрыСведений.ЗначенияДополнительныхРеквизитовОбъектов.ЗначениеДополнительногоРеквизита(Объект, ВидРеквизита); 
	
	ВидРеквизита = ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.ФактическаяСтоимостьРабот;
	Стоимость = РегистрыСведений.ЗначенияДополнительныхРеквизитовОбъектов.ЗначениеДополнительногоРеквизита(Объект, ВидРеквизита); 
	
	Если Затрата <> 0 ИЛИ Стоимость <> 0 Тогда 
		Если ЗначениеЗаполнено(ПредыдущееОснование) Тогда
			// Убираем трудозатраты и стоимость у предыдущего основания. 
			Данные.Затрата = -Затрата;
			Данные.Стоимость = -Стоимость;
			РегистрыСведений.ОчередьСобытийНаОбработку.ПересчитатьФактическиеТрудозатраты(ПредыдущееОснование, Данные);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Основание) Тогда
        	// И добавляем их к новому основанию. 
			Данные.Затрата = Затрата;
			Данные.Стоимость = Стоимость;
			РегистрыСведений.ОчередьСобытийНаОбработку.ПересчитатьФактическиеТрудозатраты(Основание, Данные);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаполнитьСписокВыбораВидовДеятельности(СписокВыбора, Знач Пользователь, Знач Собрание)
		
	ХешВидДеятельностиУслуга = Новый Соответствие;
		
	Если Пользователи.ПринадлежитIT(Пользователь) Тогда
		Назначение = Перечисления.НазначенияВидовДеятельности.ITПодразделение;
	Иначе
		Назначение = Перечисления.НазначенияВидовДеятельности.Общее;
	КонецЕсли;

	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВидыДеятельности.Ссылка КАК Ссылка,
	|	ВидыДеятельности.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ВидыДеятельности КАК ВидыДеятельности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияДополнительныхРеквизитовОбъектов КАК ЗначенияПрименяетсяДляСобрания
	|		ПО ВидыДеятельности.Ссылка = ЗначенияПрименяетсяДляСобрания.Объект
	|			И (ЗначенияПрименяетсяДляСобрания.Реквизит = &ПрименяетсяДляСобрания)
	|ГДЕ
	|	ВидыДеятельности.Назначение = &Назначение
	|	И НЕ ВидыДеятельности.ПометкаУдаления
	|	И &УсловиеСобрание
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.Текст = ТекстЗапроса;
	ИнтеграцияДополнительныхПодсистем.ИзменитьЗапросСпискаВидовДеятельностиУслуг(Запрос, Собрание);		
    
	Запрос.УстановитьПараметр("Назначение", Назначение);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ИдентификаторСтроки = XMLСтрока(Выборка.Ссылка);
		СписокВыбора.Добавить(ИдентификаторСтроки, Выборка.Наименование);
		
		Данные = Новый Структура("ВидДеятельности, Услуга", Выборка.Ссылка);
		ХешВидДеятельностиУслуга.Вставить(ИдентификаторСтроки, Данные);
	КонецЦикла;
	
	Возврат ХешВидДеятельностиУслуга;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры создания реквизитов, команд и элементов управления трудозатратами
// на форме.

Процедура СоздатьРеквизитыФормы(Форма)
	
	// Создание реквизита для хранения представления информации о трудозатратах
	РеквизитHTMLПредставление = Новый РеквизитФормы("УправлениеТрудозатратами_HTMLПредставление", Новый ОписаниеТипов("Строка"));

	// Добавление поля для хранения значения фильтра
	РеквизитФильтрТрудозатрат = Новый РеквизитФормы("УправлениеТрудозатратами_ФильтрТрудозатрат",
		Новый ОписаниеТипов("Строка, СправочникСсылка.Пользователи, СправочникСсылка.Филиалы"));
    РеквизитЗначенияФильтровТрудозатрат = Новый РеквизитФормы("УправлениеТрудозатратами_ЗначенияФильтров", 
		Новый ОписаниеТипов("СписокЗначений"));

	// Создание реквизита для хранения фильтра	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитHTMLПредставление);
	ДобавляемыеРеквизиты.Добавить(РеквизитФильтрТрудозатрат);
    ДобавляемыеРеквизиты.Добавить(РеквизитЗначенияФильтровТрудозатрат);

	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

Процедура СоздатьЭлементыФормы(Форма, ГруппаСтраниц, Знач ОписаниеКоманд)
	
	Элементы = Форма.Элементы;
	
	// Страница панели с элементами для управления трудозатратами
	СтраницаПанели = Элементы.Добавить("УправленияТрудозатратами_ОсновнаяСтраница", Тип("ГруппаФормы"), ГруппаСтраниц);
	
	СтраницаПанели.Заголовок = "Трудозатраты";
	СтраницаПанели.Подсказка = "Управление фактическими трудозатратами";
	СтраницаПанели.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	СтраницаПанели.Картинка = БиблиотекаКартинок.ПанельНавигацииТрудозатраты;
		
	// Поле отображения информации о трудозатратах
	ЭлементФормы = Элементы.Добавить("УправлениеТрудозатратами_HTMLПредставление", Тип("ПолеФормы"), СтраницаПанели);
	ЭлементФормы.Вид = ВидПоляФормы.ПолеHTMLДокумента;
	ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементФормы.ПутьКДанным = "УправлениеТрудозатратами_HTMLПредставление";
	ЭлементФормы.УстановитьДействие("ПриНажатии", "Подключаемый_УправлениеТрудозатратамиПриНажатииHTML");
	ЭлементФормы.ЦветРамки = ЦветаСтиля.ЦветФонаФормы;
	
	Если КлиентскоеПриложение.ТипПриложения() = ТипКлиентскогоПриложения.ВебКлиент Тогда
		ЭлементФормы.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
