///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция ВозможноИзменитьПароль(Пользователь, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры) <> Тип("Структура") Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Пользователь, "Ссылка, Недействителен, ИдентификаторПользователяИБ");
	Если РеквизитыПользователя.Ссылка <> Пользователь Тогда
		РеквизитыПользователя.Ссылка = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Пользователь).ПустаяСсылка();
		РеквизитыПользователя.Недействителен = Ложь;
		РеквизитыПользователя.ИдентификаторПользователяИБ = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ПроверятьДействительностьПользователя") И РеквизитыПользователя.Недействителен <> Ложь Тогда
		ДополнительныеПараметры.Вставить("ТекстОшибки", СтрШаблон("Пользователь ""%1"" недействителен.", Пользователь));
		Возврат Ложь;
	КонецЕсли;
	
	ИдентификаторПользователяИБ = РеквизитыПользователя.ИдентификаторПользователяИБ;
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДополнительныеПараметры.Свойство("ПроверятьНаличиеПользователяИБ") И ПользовательИБ = Неопределено Тогда
		ДополнительныеПараметры.Вставить("ТекстОшибки", СтрШаблон("Не найдена учетная запись пользователя ""%1"".", Пользователь));
		Возврат Ложь;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);
	
	ИдентификаторТекущегоПользователяИБ = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	ДополнительныеПараметры.Вставить("ЭтоТекущийПользовательИБ", ИдентификаторПользователяИБ = ИдентификаторТекущегоПользователяИБ);
	ДополнительныеПараметры.Вставить("ПарольУстановлен", ПользовательИБ <> Неопределено И ПользовательИБ.ПарольУстановлен);
	
	Если ПользовательИБ <> Неопределено И ПользовательИБ.ЗапрещеноИзменятьПароль Тогда
		ТекстОшибки = СтрШаблон("Установлен запрет изменения пароля пользователя ""%1"".
			|Обратитесь к администратору.", Пользователь);
			
		ДополнительныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
		Возврат Ложь;
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

// Проверяет, находится ли пользователь в отпуске и возвращает данные о периоде отпуска.
//
// Параметры:
//  Пользователь  - СправочникСсылка.Пользователи - ссылка на пользователя
//
// Возвращаемое значение:
//   Структура - структура с данными о результате работы функции
// 		* ДатаНачала - Дата, Неопределено - дата фактического начала отпуска/декрета и т.д. (или увольнения).
// 		* ДатаОкончания - Дата, Неопределено - дата фактического окончания отпуска/декрета и т.д
// 		* Отсутствует - Булево - признак того, что пользователь уволен или отсутствует
//
Функция ДанныеОтсутствия(Знач Пользователь) Экспорт
		
	Данные = Новый Структура("Отсутствует, ДатаНачала, ДатаОкончания");
	
	Если Пользователь = ТекущийПользователь() Тогда
		Данные.Отсутствует = Ложь;
		Возврат Данные;
	КонецЕсли;
	
	Запрос = Новый Запрос;	
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ЛичныеДелаСрезПоследних.Период КАК Период,
	|	ЛичныеДелаСрезПоследних.Сотрудник КАК Сотрудник,
	|	ЛичныеДелаСрезПоследних.Событие КАК Событие,
	|	ЛичныеДелаСрезПоследних.Данные КАК Данные,
	|	ЛичныеДелаСрезПоследних.ДатаДобавления КАК ДатаДобавления
	|ПОМЕСТИТЬ ЛичныеДела
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(
	|			,
	|			Сотрудник = &Пользователь
	|				И Событие В (ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПринятНаДолжность), ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.Уволен))) КАК ЛичныеДелаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЛичныеДела.Период) КАК Период,
	|	ЛичныеДела.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ПоследняяЗапись
	|ИЗ
	|	ЛичныеДела КАК ЛичныеДела
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛичныеДела.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоследняяЗапись.Сотрудник КАК Сотрудник,
	|	ПоследняяЗапись.Период КАК ДатаУвольнения
	|ИЗ
	|	ПоследняяЗапись КАК ПоследняяЗапись
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЛичныеДела КАК ЛичныеДела
	|		ПО ПоследняяЗапись.Сотрудник = ЛичныеДела.Сотрудник
	|			И ПоследняяЗапись.Период = ЛичныеДела.Период
	|			И (ЛичныеДела.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.Уволен))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремени.Дата КАК ДатаС,
	|	ДОБАВИТЬКДАТЕ(ТабельУчетаРабочегоВремени.Дата, ДЕНЬ, 1) КАК ДатаПо
	|ПОМЕСТИТЬ Даты
	|ИЗ
	|	РегистрСведений.ТабельУчетаРабочегоВремени КАК ТабельУчетаРабочегоВремени
	|ГДЕ
	|	ТабельУчетаРабочегоВремени.Сотрудник = &Пользователь
	|	И ТабельУчетаРабочегоВремени.ВидВремени <> &Явка
	|	И ТабельУчетаРабочегоВремени.ВидВремени <> &Выходные
	|	И ТабельУчетаРабочегоВремени.Дата >= &ТекущаяДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Даты.ДатаС КАК ДатаС,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПо
	|ПОМЕСТИТЬ НегруппированныеДаты
	|ИЗ
	|	Даты КАК Даты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Даты КАК Даты1
	|		ПО Даты.ДатаС = Даты1.ДатаПо
	|ГДЕ
	|	Даты1.ДатаС ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	Даты.ДатаС
	|ИЗ
	|	Даты КАК Даты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Даты КАК Даты1
	|		ПО Даты.ДатаПо = Даты1.ДатаС
	|ГДЕ
	|	Даты1.ДатаС ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НегруппированныеДаты.ДатаС КАК ДатаНачала,
	|	МИНИМУМ(НегруппированныеДаты1.ДатаПо) КАК ДатаОкончания
	|ИЗ
	|	НегруппированныеДаты КАК НегруппированныеДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НегруппированныеДаты КАК НегруппированныеДаты1
	|		ПО НегруппированныеДаты.ДатаС <= НегруппированныеДаты1.ДатаПо
	|			И (НЕ НегруппированныеДаты.ДатаС = ДАТАВРЕМЯ(1, 1, 1))
	|ГДЕ
	|	НегруппированныеДаты.ДатаС <= &СледующийРабочийДень
	|
	|СГРУППИРОВАТЬ ПО
	|	НегруппированныеДаты.ДатаС
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(НегруппированныеДаты1.ДатаПо) >= &ТекущаяДата";
	#КонецОбласти
	
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	
	Явка = Справочники.КлассификаторИспользованияРабочегоВремени.ПолучитьЭлементПоБуквенномуКоду("Я");
	Выходные = Справочники.КлассификаторИспользованияРабочегоВремени.ПолучитьЭлементПоБуквенномуКоду("В");
	СледующийРабочийДень = РегистрыСведений.ПроизводственныйКалендарь.СледующийРабочийДень(ТекущаяДата);
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("Явка", Явка);
	Запрос.УстановитьПараметр("Выходные", Выходные);
	Запрос.УстановитьПараметр("СледующийРабочийДень", СледующийРабочийДень);
	
	Пакеты = Запрос.ВыполнитьПакет();
	
	ДанныеУвольнения = Пакеты[2];
	ДанныеОтсутствия = Пакеты[Пакеты.ВГраница()];
	
	Если НЕ ДанныеУвольнения.Пустой() Тогда
		Выборка = ДанныеУвольнения.Выбрать();
		Выборка.Следующий();
		
		Данные.Отсутствует = Истина;
		Данные.ДатаНачала = Выборка.ДатаУвольнения;
		
	ИначеЕсли НЕ ДанныеОтсутствия.Пустой() Тогда
		Выборка = ДанныеОтсутствия.Выбрать();
		Выборка.Следующий();
		
		Данные.Отсутствует = Истина;
		Данные.ДатаНачала = Выборка.ДатаНачала;
		Данные.ДатаОкончания = Выборка.ДатаОкончания;
		
	Иначе
		Данные.Отсутствует = Ложь;
	КонецЕсли;
				
	Возврат Данные;
	
КонецФункции

Функция ИмяПользователяСвободно(Знач ИмяПользователя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	
	Возврат (ПользовательИБ = Неопределено);
	
КонецФункции

// Возвращает ссылку на текущего пользователя из параметра сеанса.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - ссылка элемент справочника Пользователи
//
Функция ТекущийПользователь() Экспорт
	                  
	Возврат ПараметрыСеанса.ТекущийПользователь;
	
КонецФункции

#КонецОбласти
