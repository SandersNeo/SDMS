///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обновление конфигурации

// Открывает историю изменения системы
//
Процедура ОткрытьИсториюИзмененийСистемы() Экспорт
	
	ОткрытьФорму("Справочник.ОписанияИзмененийСистемы.Форма.ОписаниеИзмененийСистемы");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Jira

// Перейти на инцедент в Jira
//
// Параметры:
//  Форма	 - 	 - Управляемая форма - форма задачи
//
Процедура ПерейтиJira(Форма) Экспорт  
	
	Модуль = ОбщийМодуль("ИнтеграцияJiraВызовСервера");
	ГиперСсылка = Модуль.ПолучитьГиперСсылку(Форма.Объект.Ссылка);
	
	Если ЗначениеЗаполнено(ГиперСсылка) Тогда
		ПерейтиПоНавигационнойСсылке(ГиперСсылка);
	Иначе
		ТекстОшибки = "Невозможно перейти по данному номеру инцидента";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// TeamCity

// Добавляет задание сборки теста в ОчередьЗадачДляTeamCity
//
// Параметры:
//  Ссылка - ДокументСсылка.Задача - Ссылка на задачу
//
Асинх Процедура ЗапуститьСборкуTeamCity(Знач Ссылка) Экспорт
	
	Модуль = ОбщийМодуль("ИнтеграцияTeamCityКлиент");
	Модуль.ЗапуститьСборкуTeamCity(Ссылка);
		
КонецПроцедуры

// Открывает управление очередью TeamCity
//
// Параметры:
//  ИмяФормы - Строка - Имя формы с которой вызван метод 
//
Процедура ОткрытьУправлениеОчередьюTeamCity(Знач ИмяФормы) Экспорт
	
	Модуль = ОбщийМодуль("ИнтеграцияTeamCityКлиент");
	Модуль.ОткрытьУправлениеОчередьюTeamCity(ИмяФормы);
	
КонецПроцедуры

// Открывает ссылки на результаты тестирования TeamCity
//
// Параметры:
//  Форма - УправляемаяФорма - форма задачи 
//
Процедура ТестированиеРезультатПоследнегоТестированияTeamCityОткрытие(Форма) Экспорт
	
	Модуль = ОбщийМодуль("ИнтеграцияTeamCityКлиент");
	Модуль.ТестированиеРезультатПоследнегоТестированияTeamCityОткрытие(Форма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Trello

// Выгружает объекты в trello
//
// Параметры:
//  Филиал			 - СправочникСсылка.Филиалы	 - Филиал для выгрузки
//  МассивОбъектов	 - Массив					 - Массив объектов
//
Процедура ВыгрузитьВTrello(Филиал, МассивОбъектов) Экспорт

	Если ПодсистемаСуществует("Trello") Тогда	  
		Модуль = ОбщийМодуль("ИнтеграцияTrelloВызовСервера");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборДоскиTrello", ЭтотОбъект, 
			Новый Структура("МассивОбъектов", МассивОбъектов));		
		СписокДосок = Модуль.ПолучитьДоступныеДоскиTrello(Филиал);
		СписокДосок.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выбор доски Trello");  
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Оценка производительности

// Завершает замер времени на клиенте.
//
// Параметры:
//  УИДЗамера - УникальныйИдентификатор - уникальный идентификатор замера.
//
Процедура ЗавершитьЗамерВремени(УИДЗамера) Экспорт
	
	Если ПодсистемаСуществует("ОценкаПроизводительности") Тогда	  
		Модуль = ОбщийМодуль("ОценкаПроизводительностиКлиент");
		Модуль.ЗавершитьЗамерВремени(УИДЗамера);	
	КонецЕсли;
	
КонецПроцедуры

// Начинает замер времени ключевой операции.
// Результат замера будет записан в регистр сведений ЗамерыВремени.
// Поскольку клиентские замеры хранятся в клиентском буфере и записываются с периодичностью,
// указанной в константе ОценкаПроизводительностиПериодЗаписи (по умолчанию, каждую минуту),
// в случае завершения сеанса часть замеров может быть потеряна.
//
// Параметры:
//	АвтоЗавершение - Булево	 - 	признак автоматического завершения замера.
//								Истина - завершение замера будет выполнено автоматически
//								через глобальный обработчик ожидания.
//								Ложь - завершить замер необходимо явно вызовом процедуры
//								ЗавершитьЗамерВремени.
//	КлючеваяОперация - Строка - имя ключевой операции. Если Неопределено> то ключевую операцию
//								необходимо указать явно вызовом процедуры
//								УстановитьКлючевуюОперациюЗамера.
//
// Возвращаемое значение:
//	УникальныйИдентификатор - уникальный идентификатор замера, который позволяет идентифицировать замер.
//
Функция НачатьЗамерВремени(АвтоЗавершение = Истина, КлючеваяОперация = Неопределено) Экспорт
	
	Значение = Неопределено;
	
	Если ПодсистемаСуществует("ОценкаПроизводительности") Тогда	
		Модуль = ОбщийМодуль("ОценкаПроизводительностиКлиент");
		Значение = Модуль.НачатьЗамерВремени(АвтоЗавершение, КлючеваяОперация);	
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции   

////////////////////////////////////////////////////////////////////////////////
// Общее

// Действия при начале работы системы
//
// Параметры:
//  Настройки	 - Структура - Структура настроек клиентского приложения
//
Процедура ПриНачалеРаботыСистемы(Настройки) Экспорт
	
	Если Настройки.Свойство("ПоказатьОписаниеИзмененийСистемы") И Настройки.ПоказатьОписаниеИзмененийСистемы Тогда
		ОткрытьФорму("Справочник.ОписанияИзмененийСистемы.Форма.ОписаниеИзмененийСистемы");
	КонецЕсли;	                      
	
	Если Настройки.Свойство("ОткрыватьОпрос") И ТипЗнч(Настройки.ОткрыватьОпрос) = Тип("ДокументСсылка.Опрос") 
			И ЗначениеЗаполнено(Настройки.ОткрыватьОпрос) Тогда 
		ОткрытьФорму("Обработка.ПроведениеОпроса.Форма.Форма", Новый Структура("Опрос", Настройки.ОткрыватьОпрос)); 	
	КонецЕсли;  	
	
КонецПроцедуры

// Возвращает признак существования подсистемы
//
// Параметры:
//  ИмяПодсистемы	 - Строка	 - Имя подсистемы
// 
// Возвращаемое значение:
//  Булево - признак существования подсистемы
//
Функция ПодсистемаСуществует(ИмяПодсистемы) Экспорт 
	
	ИмяПараметра = "СтандартныеПодсистемы.ПодсистемыКонфигурации"; 
	
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ИменаПодсистем = ИнтеграцияДополнительныхПодсистемПовтИсп.ИменаПодсистем();
		ПараметрыПриложения.Вставить(ИмяПараметра, ИменаПодсистем);
	КонецЕсли;    
	
	ИменаПодсистем = ПараметрыПриложения[ИмяПараметра];
	Возврат ИменаПодсистем.Получить(ИмяПодсистемы) <> Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЦелиOKR

Процедура ПриИзмененииЦелиOKR(Форма, Знач Направление) Экспорт
	
	Если ПодсистемаСуществует("ЦелиOKR") И ЗначениеЗаполнено(Направление) Тогда
		АдресДополнительныхРеквизитов = Форма[ДополнительныеРеквизитыКлиентСервер.ИмяРеквизитаАдреса()];

		ИнтеграцияДополнительныхПодсистем.ПриИзмененииЦелиOKR(Направление, АдресДополнительныхРеквизитов, Форма["ЦелиOKR"]);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьВыборДоскиTrello(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Модуль = ОбщийМодуль("ИнтеграцияTrelloВызовСервера");
		ТекстСообщения = Модуль.ВыгрузитьЗадачиНаДоскуВTrello(ДополнительныеПараметры.МассивОбъектов, 
			Результат.Значение);
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Функция ОбщийМодуль(Имя)
	
	Модуль = Вычислить(Имя);
	
#Если Не ВебКлиент Тогда
	
	// В веб-клиенте не проверяется
	// т.к. при обращении к модулям с вызовом сервера типа такого модуля в веб-клиенте не существует.
	
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение СтрШаблон("Общий модуль ""%1"" не существует.", Имя);
	КонецЕсли;
	
#КонецЕсли
	
	Возврат Модуль;
	
КонецФункции

#КонецОбласти
