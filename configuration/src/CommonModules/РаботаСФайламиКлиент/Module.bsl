///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПоказатьДиалогВыбораФайлов(ОписаниеОповещения, РежимДиалога, Знач Заголовок = "", Знач Фильтр = "", Знач МножественныйВыбор = Ложь) Экспорт
	
	// Проверим заполнение параметров
	Если ПустаяСтрока(Заголовок) Тогда
		
		Если РежимДиалога = РежимДиалогаВыбораФайла.ВыборКаталога Тогда
			Заголовок = "Выбор каталога";
		ИначеЕсли РежимДиалога = РежимДиалогаВыбораФайла.Открытие Тогда
			Заголовок = "Открыть";
		ИначеЕсли РежимДиалога = РежимДиалогаВыбораФайла.Сохранение Тогда
			Заголовок = "Сохранить";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Фильтр) Тогда
		Фильтр =  "Все файлы (*.*)|" + ПолучитьМаскуВсеФайлыКлиента();
	КонецЕсли;
	
	// Сформируем параметры для процедуры отображения диалога выбора файла
	Параметры = Новый Структура;
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	Параметры.Вставить("РежимДиалога", РежимДиалога);
	Параметры.Вставить("Заголовок", Заголовок);
	Параметры.Вставить("Фильтр", Фильтр);
	Параметры.Вставить("МножественныйВыбор", МножественныйВыбор);	
	
	// Если работа идет через веб-клиент, необходимо сначала подключить расширение
	// работы с файлами. Для остальных видов клиентов сразу показываем стандартный 
	// диалог открытия файлов.
	#Если ВебКлиент Тогда
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПодключениеРасширенияРаботыСФайлами",
		РаботаСФайламиКлиент, Параметры, "ОбработатьОшибкуПодключенияРасширенияРаботуСФайлами", 
		РаботаСФайламиКлиент);  
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
		
	#Иначе
		
	ПоказатьДиалогВыбораФайловСлужебный(Параметры);
		
	#КонецЕсли
	
КонецПроцедуры

Функция РазмерФайлаНеПревышаетМаксимальныйРазмер(РазмерБайт) Экспорт
	
	Возврат РазмерБайт <= ПовторноеИспользованиеВызовСервера.МаксимальныйРазмерФайла();
	
КонецФункции

// Иницирует скачивание файла по двойному клику в списке файлов или открытии в плане проекта
//
// Параметры:
//  Владелец - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - Объект к которому прикреплен файл 
//  Файлы    - Массив - Массив файлов
//  Архивировать - Булево - признак скачивания файла в архиве 
//
Процедура НачатьСкачиваниеФайлов(Знач Владелец, Знач Файлы, Знач УникальныйИдентификатор, Знач Архивировать = Ложь) Экспорт
	
	ПараметрыСкачивания = ПараметрыСкачиванияФайлов();
	ПараметрыСкачивания.Владелец           = Владелец;
	ПараметрыСкачивания.Файлы              = Файлы;
	ПараметрыСкачивания.ИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыСкачивания.Архивировать       = Архивировать;
	
	СкачатьФайлы(ПараметрыСкачивания);
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами. Новая версия 8.3.21

// Процедура - Добавить файлы, новая версия добавления файлов
//
// Параметры:
//  ДополнительныеПараметры	 - Структура  - Структура с параметрами добавления файлов
//  	* Фильтр - Строка - Фильтр для добавления файлов
//  	* МножественныйВыбор - Булево - Множественный выбор файлов ( По умолчанию: Ложь)
//  	* ИдентификаторФормы - УникальныйИдентификатор - Уникальный идентификатор формы
//
Процедура ДобавитьФайлы(Знач ДополнительныеПараметры) Экспорт

    ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов;
	Если ДополнительныеПараметры.Свойство("МножественныйВыбор") Тогда
		ПараметрыДиалога.МножественныйВыбор = ДополнительныеПараметры.МножественныйВыбор;
	Иначе
		ПараметрыДиалога.МножественныйВыбор = Ложь;
	КонецЕсли;
	Если ДополнительныеПараметры.Свойство("Фильтр") Тогда
		 ПараметрыДиалога.Фильтр = ДополнительныеПараметры.Фильтр;
	КонецЕсли;
	ПараметрыДиалога.Заголовок = НСтр("ru = 'Выберите файл'");
		
	Оповещение = Новый ОписаниеОповещения("ЗавершитьПомещениеФайловВоВременноеХранилище", ЭтотОбъект, ДополнительныеПараметры);
	ОповещениеПередНачаломПомещения = Новый ОписаниеОповещения("ПередНачаломПомещения", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПомещениеФайловНаСервер(Оповещение, , ОповещениеПередНачаломПомещения, 
		ПараметрыДиалога, ДополнительныеПараметры.ИдентификаторФормы);
		
КонецПроцедуры

// Процедура - Скачать файлы, новая версия скачивания файлов
//
// Параметры:
//  ДополнительныеПараметры	 - Структура - Стурктура с параметрами скачивания файлов 
//  	* Владелец - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - Объект к которому прикреплен файл 
//  	* Файлы    - Массив - Массив файлов
//  	* Архивировать - Булево - признак скачивания файла в архиве
//  	* УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы
Процедура СкачатьФайлы(Знач ДополнительныеПараметры) Экспорт
	
   ПараметрыСкачивания = ПараметрыСкачиванияФайлов();
	ЗаполнитьЗначенияСвойств(ПараметрыСкачивания, ДополнительныеПараметры);
	ПараметрыСкачивания.Владелец           = ДополнительныеПараметры.Владелец;
	ПараметрыСкачивания.Файлы              = ДополнительныеПараметры.Файлы;
	ПараметрыСкачивания.ИдентификаторФормы = ДополнительныеПараметры.ИдентификаторФормы;
	ПараметрыСкачивания.Архивировать       = ДополнительныеПараметры.Архивировать;
	
	СкачиваниеФайлов(ПараметрыСкачивания);	
		
КонецПроцедуры

// Проверяет параметры оповещения о помещении присоединенных файлов на сервер.
//
// Параметры:
//  ИмяСобытия - Строка - имя события оповещения.
//  Владелец   - Произвольный - идентификатор объекта-владельца файлов.
//  Параметры  - Структура - параметры, пришедшие с оповещением.
//
// Возвращаемое значение:
//  Булево - Истина, оповещение принадлежит владельцу. Ложь, когда оповещение не принадлежит 
//  владельцу.
//
Функция ОбработатьПомещениеПрисоединенныхФайловНаСервер(Знач ИмяСобытия, Знач Владелец, Знач Параметры) Экспорт
	
	Возврат (ИмяСобытия = "ОбщегоНазначенияКлиент.ПослеПомещенияПрисоединенныхФайловНаСервер"
		И Параметры.Владелец = Владелец);
	
КонецФункции

// Возвращает структуру параметров со значениями, которые использует механизм
// добавления файлов. Содержит следующие свойства:
//
// - Операция           - Строка - строковое описание операции добавления файлов.
//             			  Всегда "ДобавлениеФайлов".
// - Владелец           - Ссылка - ссылка на владельца файла.
// - ИдентификаторФормы - УникальныйИдентификатор - идентификатор формы для 
//                        временного хранилища.
// - Заголовок          - Строка - заголовок диалогового окна добавления файлов.
// - МножественныйВыбор - Булево - признак выбора нескольких файлов.
// - Автосохранение     - Булево - признак автоматического сохранения файлов при
//                        добавлении.
//
// Возвращаемое значение:
//  Структура - Структура для добавления файлов 
// 
Функция ПараметрыДобавленияФайлов() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Операция", "ДобавлениеФайлов");
	СтруктураПараметров.Вставить("Владелец", Неопределено);
	СтруктураПараметров.Вставить("ИдентификаторФормы", Неопределено);
	СтруктураПараметров.Вставить("Заголовок", НСтр("ru = 'Выбор файлов'"));
	СтруктураПараметров.Вставить("МножественныйВыбор",  Ложь);
	СтруктураПараметров.Вставить("Автосохранение", Истина);
	СтруктураПараметров.Вставить("Устав", Ложь);
	СтруктураПараметров.Вставить("ДополнительноеСвойство");

	Возврат СтруктураПараметров;
	
КонецФункции
	
// Возвращает структуру параметров со значениями, которые использует механизм
//  скачивания файлов.
// 
// Возвращаемое значение:
//  СтруктураПараметров - Структура - Структура для скачивания файлов 
//
Функция ПараметрыСкачиванияФайлов() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Операция", "СкачиваниеФайлов");
	СтруктураПараметров.Вставить("Владелец", Неопределено);
	СтруктураПараметров.Вставить("ИдентификаторФормы", Неопределено);
	СтруктураПараметров.Вставить("Заголовок", НСтр("ru = 'Выбор каталога'"));
	СтруктураПараметров.Вставить("Файлы",  Новый Массив);
	СтруктураПараметров.Вставить("Архивировать", Ложь);
	СтруктураПараметров.Вставить("ЗагрузкаИзображенийОписания", Ложь);
	
	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти                               

#Область ОбработчикиОповещений

// Процедура-обработчик завершения подключения расширения работы с файлами.
// Может выполнять как только проверку подключения/установку, так и другие
// операции.
//
// Параметры:
//  Подключено - Булево - признак успешного подключения расширения.
//  Параметры  - Произвольный - дополнительные данные.
//
Процедура ОбработатьПодключениеРасширенияРаботыСФайлами(Подключено, Параметры) Экспорт
	
	// По-умолчанию устанавливаем при отсутствии, и выполняем другие действия
	ТолькоПодключениеРасширения = Ложь;
	УстановитьПриОтсутствии     = Истина;
	
	// Попробуем найти служебные параметры, указывающие выполнить только подключение
	// и установку расширения.
	СлужебныеПараметры = ПолучитьСлужебныеПараметрыОбработчиковРасширенияРаботыСФайлами(Параметры);
	СлужебныеПараметры.Свойство("ТолькоПодключениеРасширения", ТолькоПодключениеРасширения);
	СлужебныеПараметры.Свойство("УстановитьПриОтсутствии", УстановитьПриОтсутствии);
	
	// Обрабатываем само подключение
	Если Подключено Тогда
		
		// Если нужно только проверить подключение расширения, выходим из процедуры
		Если ТолькоПодключениеРасширения = Истина Тогда
			Возврат;
		КонецЕсли;
		
		// Если расширение работы с файлами установлено, открываем диалог выбора файлов
		ПоказатьДиалогВыбораФайловСлужебный(Параметры);
	Иначе
		
		// Если необходимо, пробуем установить компоненту работы с файлами
		Если УстановитьПриОтсутствии = Истина Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьУстановкуРасширенияРаботыСФайлами", 
				РаботаСФайламиКлиент, Параметры, "ОбработатьОшибкуУстановкиРасширенияРаботыСФайлами",
				РаботаСФайламиКлиент);
				
			НачатьУстановкуРасширенияРаботыСФайлами(ОписаниеОповещения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик завершения установки расширения работы с файлами.
//
// Параметры:
//  Параметры  - Произвольный - дополнительные данные.
//
Процедура ОбработатьУстановкуРасширенияРаботыСФайлами(Параметры) Экспорт
	
	// По-умолчанию устанавливаем и выполняем другие действия
	ТолькоПодключениеРасширения = Ложь;
	
	// Попробуем найти служебные параметры, указывающие выполнить только подключение
	// и установку расширения.
	СлужебныеПараметры = ПолучитьСлужебныеПараметрыОбработчиковРасширенияРаботыСФайлами(Параметры);
	СлужебныеПараметры.Свойство("ТолькоПодключениеРасширения", ТолькоПодключениеРасширения);
	
	// Если нужна только установка, то дальше ничего не делаем
	Если ТолькоПодключениеРасширения = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьДиалогВыбораФайловСлужебный(Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОшибокОповещений

// Процедура выводит окно с предупреждением о проблеме с подключением расширения
// работы с файлами.
//
Процедура ОбработатьОшибкуПодключенияРасширенияРаботуСФайлами() Экспорт
	
	ТекстОшибки = "При подключении расширения браузера для работы с файлами возникла ошибка.
		|Пожалуйста, обратитесь к администратору.";
		
	ПоказатьПредупреждение(, ТекстОшибки, , "Ошибка подключения расширения браузера");
	
КонецПроцедуры

// Процедура выводит окно с предупреждением о проблеме с установкой расширения
// работы с файлами.
// 
Процедура ОбработатьОшибкуУстановкиРасширенияРаботыСФайлами() Экспорт
	
	ТекстОшибки = "При установке расширения браузера для работы с файлами возникла ошибка.
		|Пожалуйста, обратитесь к администратору.";
		
	ПоказатьПредупреждение(, ТекстОшибки, , "Ошибка установки расширения браузера");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

///////////////////////////////////////////////////////////////////////////////
// Работа с файлами. Версия 8.3.21

// Обрабатывает выбор каталога пользователем, подготавливает файлы для клиента
// и запускает процесс передачи файлов на клиентскиую машину.
//
// Параметры:
//  Параметры - Структура - параметры, переданные в описании оповщения.
//
Процедура СкачиваниеФайлов(Параметры) Экспорт
			
	// Подготовка файла на сервере
	Результат = РаботаСФайламиВызовСервера.ПодготовитьФайлыДляКлиента(Параметры.ИдентификаторФормы, Параметры.Архивировать,
    	Параметры.Файлы, Параметры.Владелец, Параметры.ЗагрузкаИзображенийОписания);
		
	// Если есть файлы которые не существуют на сервере
	КоличествоНенайденных = Результат.НенайденныеФайлы.Количество();
	Если КоличествоНенайденных > 0 Тогда
		Сообщение = "Не удалось найти следующие файлы:" + Символы.ПС;
		Счетчик = 0;
		Для Каждого ИмяФайла Из Результат.НенайденныеФайлы Цикл
			Сообщение = Сообщение + " - " + ИмяФайла + Символы.ПС;
			Счетчик = Счетчик + 1;
			Если Счетчик = 5 И КоличествоНенайденных > 5 Тогда
				Сообщение = Сообщение + "и ещё " + СтрокаСЧислом(";%1 файл;%1 файла;;%1 файлов;%1 файл", 
															КоличествоНенайденных - Счетчик, ВидЧисловогоЗначения.Количественное);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ПоказатьПредупреждение(, Сообщение, , "Предупреждение");
		Возврат;
	КонецЕсли;
			
	ПараметрыДиалога = Новый ПараметрыДиалогаПолученияФайлов;
	ПараметрыДиалога.ВыборКаталога = Истина;
	ПараметрыДиалога.Заголовок = НСтр("ru = 'Выберите путь для сохранения файла'");
		
	НачатьПолучениеФайловССервера(Результат.ПодготовленныеФайлы, ПараметрыДиалога);
	
	ПоказатьОповещениеПользователя("Скачивание файлов", , "Выбранные файлы успешно скачаны на локальный диск этого компьютера.", 
		БиблиотекаКартинок.УспешноеСохранениеФайлов32);
	
КонецПроцедуры

// Выполняет помещение файла(ов) во временнное хранилище на сервере.
//
// Параметры:
//  ПомещенныеФайлы - Массив - массив с описанием файлов, помещенных на сервер.
//  Параметры       - Структура - дополнительные параметры.
//
Процедура ЗавершитьПомещениеФайловВоВременноеХранилище(ПомещенныеФайлы, Параметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохраняемыеФайлы = СформироватьСвойстваФайлов(ПомещенныеФайлы);
	
	// Проверим файл(ы) на корректность 
	ПрикреплениеФайловКомментария = Параметры.Свойство("ПрикреплениеФайловКомментария", ПрикреплениеФайловКомментария);
	ОписаниеОшибок = РаботаСФайламиВызовСервера.ОбработатьПомещенныеФайлы(СохраняемыеФайлы);
			
	// Если в процессе проверки были выявлены ошибки, сообщим о них пользователю
	Если ОписаниеОшибок.Количество() > 0 Тогда
		Для Каждого ЭлементМассива Из ОписаниеОшибок Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЭлементМассива.Ошибка);
		КонецЦикла;			
	КонецЕсли;
		
	// Если после проверки в списке остались файлы, добавим их в прикрепленные файлы	
	Если СохраняемыеФайлы.Количество() > 0 Тогда
		Для Каждого СвойстваФайла Из СохраняемыеФайлы Цикл
			СвойстваФайла.ИндексКартинки = РаботаСФайламиКлиентСервер.ИндексИконкиФайлаПоРасширению(СвойстваФайла.Расширение);
			
			Если ПрикреплениеФайловКомментария  Тогда
				СсылкиНаФайлыКомментария = Параметры.ПрикреплениеФайловКомментария.СсылкиНаФайлыКомментария;
				НоваяСтрока = СсылкиНаФайлыКомментария.Добавить();
				НоваяСтрока.АдресВоВременномХранилище = СвойстваФайла.АдресВХранилище;
				НоваяСтрока.ОригинальноеИмя = СвойстваФайла.Имя;
				НоваяСтрока.Имя = СвойстваФайла.Имя;
				НоваяСтрока.ПолноеИмянаКлиенте = СвойстваФайла.ПолноеИмя;
				НоваяСтрока.ИндексКартинки 	= СвойстваФайла.ИндексКартинки;
				НоваяСтрока.Размер 	= СвойстваФайла.Размер;
			КонецЕсли;				
		КонецЦикла;
		
		Объект = Параметры.Владелец;
		
		Если Параметры.Автосохранение Тогда
			ОбщегоНазначенияВызовСервера.СохранитьФайлыНаСервере(СохраняемыеФайлы, Объект, Ложь);
		КонецЕсли;
		
		ПараметрыОповещения = Новый Структура("Владелец, ОбработанныеФайлы, ДополнительноеСвойство",
		Объект, СохраняемыеФайлы, Параметры.ДополнительноеСвойство);
		
		Если Параметры.Устав Тогда
			Оповестить("ОбщегоНазначенияКлиент.ПослеПомещенияУставаНаСервер", ПараметрыОповещения);
		Иначе
			Оповестить("ОбщегоНазначенияКлиент.ПослеПомещенияПрисоединенныхФайловНаСервер", ПараметрыОповещения);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат проверка соответствия имени файла требованиям системы
//
// Параметры:
//  ИмяФайла  - Строка - имя загружаемого файла
//
// Возвращаемое значение:
//   Булево   - Истина, если Имя корректно, иначе Ложь
//
Функция ИмяФайлаКорректное(Знач ИмяФайла)
		
	// 150 символов т.к. тип хранения имени в реквизите формы Строка - длина 150	
	МаксимальнаяДлина = 150;
	
	Если СтрДлина(ИмяФайла) > МаксимальнаяДлина Тогда
		ИмяКорректно = Ложь;
	Иначе
		ИмяКорректно = Истина;
	КонецЕсли;
	
	Возврат ИмяКорректно;

КонецФункции

// Возвращает структуру c описанием свойств файла, которыми оперирует механизм
// работы с файлами.
//
// Возвращаемое значение:
//  Структура.
//
Функция ОписаниеСвойствФайла()
	
	СвойстваФайла = Новый Структура; 
	СвойстваФайла.Вставить("Имя", "");
	СвойстваФайла.Вставить("ПолноеИмя", "");
	СвойстваФайла.Вставить("ПолноеИмяНаКлиенте", "");
	СвойстваФайла.Вставить("ОригинальноеИмя", "");
	СвойстваФайла.Вставить("Расширение", "");
	СвойстваФайла.Вставить("Каталог", "");
	СвойстваФайла.Вставить("Размер", 0);
	СвойстваФайла.Вставить("РазмерСтрокой", "");
	СвойстваФайла.Вставить("ИндексКартинки", 0);
	СвойстваФайла.Вставить("Назначение", ПредопределенноеЗначение("Перечисление.НазначенияФайлов.ПустаяСсылка"));
	СвойстваФайла.Вставить("Описание", "");
	СвойстваФайла.Вставить("АдресВХранилище", "");
	СвойстваФайла.Вставить("Ссылка", ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка"));
	СвойстваФайла.Вставить("ИдентификаторКартинки", "");
	
	Возврат СвойстваФайла;
	
КонецФункции

// Процедура - Перед началом помещения файлов проверяет размер и расширение
//
// Параметры:
//  Файлы						 - Массив    - Массив с файлами  
//  ОтказОтПомещенияВсехФайлов	 - Булево    - Если проверка не пройдена - отказ от помещения 
//  Параметры					 - Структура - Дополнительные параметры
//
Процедура ПередНачаломПомещения(Файлы, ОтказОтПомещенияВсехФайлов = Ложь, Параметры) Экспорт
	
	Если Файлы = Неопределено Тогда
		ОтказОтПомещенияВсехФайлов = Истина;
		Возврат;
	КонецЕсли;
	
	МассивОшибок = Новый Массив;
	
	НастройкиРаботыСФайлами = ПовторноеИспользованиеВызовСервера.ПолучитьНастройкиРаботыСФайлами();
	МассивРасширений = СтрРазделить(НРег(НастройкиРаботыСФайлами.СписокЗапрещенныхРасширений), " ", Ложь);
	
	Для Каждого СвойстваФайла Из Файлы Цикл
		// Проверим расширение
		Если МассивРасширений.Найти(НРег(Сред(СвойстваФайла.Расширение, 2))) <> Неопределено Тогда
			ОписаниеОшибки = СтрШаблон("Загрузка файлов с расширением ""%1"" запрещена. Обратитесь к администратору.",
				СвойстваФайла.Расширение);
			
			МассивОшибок.Добавить(ОписаниеОшибки);		
		КонецЕсли;
		
		// Проверим размер файла	
		БайтВМегабайте = 1048576; // Количество байт в мегабайте (1024 * 1024)
		
		РазмерСтрокой = РаботаСФайламиКлиентСервер.РазмерФайлаСтрокой(СвойстваФайла.Размер());
		Если СвойстваФайла.Размер() > НастройкиРаботыСФайлами.МаксимальныйРазмерФайла Тогда
			РазмерМаксимальный = НастройкиРаботыСФайлами.МаксимальныйРазмерФайла / БайтВМегабайте;
			
			ОписаниеОшибки = СтрШаблон("Размер файла ""%1"" (%2) превышает допустимый размер файла (%3 Мбайт).
				|Обратитесь к администратору.", СвойстваФайла.Имя, РазмерСтрокой, РазмерМаксимальный);
			
			МассивОшибок.Добавить(ОписаниеОшибки);	
		КонецЕсли;			
	КонецЦикла;	
	
	// Если в процессе проверки были выявлены ошибки, сообщим о них пользователю и отменим помещение
	Если МассивОшибок.Количество() > 0 Тогда
		Для Каждого Ошибка Из МассивОшибок Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка);
		КонецЦикла;
		ОтказОтПомещенияВсехФайлов = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьСвойстваФайлов(Знач ФайлыДляОбработки)
	
	СохраняемыеФайлы = Новый Массив;
	
	Для Каждого ОписаниеФайла Из ФайлыДляОбработки Цикл
		ФайлОбработки = ОписаниеФайла.СсылкаНаФайл;

		// Для случая, когда имя файла вместе с расширением превышает 150 символов
		// возьмем в качестве имени 150 символов справа, именно справа, чтобы сохранить расширения файла.
		// (150 символов т.к. тип хранения имени в реквизите формы Строка - длина 150)
		Если НЕ ИмяФайлаКорректное(ФайлОбработки.Имя) Тогда
			ИмяФайла = Прав(ФайлОбработки.Имя, 150);
		Иначе
			ИмяФайла = ФайлОбработки.Имя;
		КонецЕсли;
		
		СвойстваФайла = ОписаниеСвойствФайла(); 						
		СвойстваФайла.Имя					= ИмяФайла;
		СвойстваФайла.ПолноеИмя				= ФайлОбработки.Имя;
		СвойстваФайла.Расширение			= Сред(ФайлОбработки.Расширение, 2);
		СвойстваФайла.Размер		 		= ФайлОбработки.Размер();
		СвойстваФайла.ИдентификаторКартинки = Новый УникальныйИдентификатор;			
		СвойстваФайла.АдресВХранилище = ОписаниеФайла.Адрес;
			
		СохраняемыеФайлы.Добавить(СвойстваФайла);
	КонецЦикла;
	
	Возврат СохраняемыеФайлы;
	
КонецФункции	

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Служебная процедура для отображения диалога работы с файлами и каталогами.
//
// Параметры:
//  Параметры - Структура - параметры диалога.
//
Процедура ПоказатьДиалогВыбораФайловСлужебный(Параметры)
	
	ДиалогВыбораФайлов = Новый ДиалогВыбораФайла(Параметры.РежимДиалога);	
	ДиалогВыбораФайлов.Заголовок = Параметры.Заголовок;
	
	Если Параметры.РежимДиалога = РежимДиалогаВыбораФайла.Открытие Тогда
		ДиалогВыбораФайлов.МножественныйВыбор = Параметры.МножественныйВыбор;
	КонецЕсли;
	
	Если Параметры.РежимДиалога <> РежимДиалогаВыбораФайла.ВыборКаталога Тогда	
		ДиалогВыбораФайлов.Фильтр = Параметры.Фильтр;
	КонецЕсли;
	
	ДиалогВыбораФайлов.Показать(Параметры.ОписаниеОповещения);	
	
КонецПроцедуры

// Функция пробует выделить из параметров, которые были переданы в обработчики
// подключение и установки расширениядля работы с файлами, служебные данные.
//
// Параметры:
//  Параметры - Произвольный - значение, переданное из одного из обработчиков
//                             подключения/установки расширения.
//
// Возвращаемое значение:
// Структура служебных параметров (при отсутствии - пустая структура).
//
Функция ПолучитьСлужебныеПараметрыОбработчиковРасширенияРаботыСФайлами(Параметры)
	
	// Это значение будет возвращено
	СлужебныеПараметры = Новый Структура;
	
	// Определим тип дополнительных параметров. Если это структура, то она может содержать
	// служебные данные.
	ТипПараметров = ТипЗнч(Параметры);
	Если ТипПараметров = Тип("Структура") Тогда
		
		// Попробуем найти служебные параметры, указывающий выполнить только подключение
		// и установку расширения.
		Если Параметры.Свойство("ТолькоПодключениеРасширения") Тогда
			СлужебныеПараметры.Вставить("ТолькоПодключениеРасширения", Параметры.ТолькоПодключениеРасширения);
		КонецЕсли;
		
		Если Параметры.Свойство("УстановитьПриОтсутствии") Тогда
			СлужебныеПараметры.Вставить("УстановитьПриОтсутствии", Параметры.УстановитьПриОтсутствии);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СлужебныеПараметры;
	
КонецФункции
