///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции работы с трудозатратами и всем, что
// связано с ними. Доступны для вызова с клиента.
//
// - Трудозатраты.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает вид деятельности внутренних трудозатрат.
// Используется в инструментах (например, "Управление нагрузкой", "Мои задачи" и т.д.). 
//
// Параметры:
//  Ссылка	 - ДокументСсылка.ВнутренниеТрудозатраты - Ссылка на документ внутренние трудозатраты 
// 
// Возвращаемое значение:
//  ВидДеятельности - СправочникСсылка.ВидДеятельности - Ссылка на элемент справочника Вид деятельности
//
Функция ПолучитьВидДеятельностиВнутреннихТрудозатрат(Знач Ссылка) Экспорт

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВидДеятельности");	
	
КонецФункции

// Возвращает структуру с данными по трудозатратам для формирования отчета.
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - ссылка на объект, трудозатраты по которому нужно
//           получить.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПолучитьДанныеДляОтчета(Знач Ссылка) Экспорт
	
	Возврат РегистрыСведений.Трудозатраты.СформироватьДанныеДляОтчета(Ссылка);
	
КонецФункции

// Возвращает структуру с данными по стоимости объекта для формирования отчета.
//
// Параметры:
//  Объект - ДокументСсылка.ВнутреннееЗадание, ДокументСсылка.ЗаявкаНаРазработку - ссылка на документ, для которого рассчитывается стоимость
//  КраткоеПредставлениеОбъектаМетаданных - Строка - Представление объекта метаданных в родительном падеже, отображаемое в предупреждении
//		об отсутствии фактических затрат. Например: "заявки", "внутреннего задания"
//
// Возвращаемое значение:
//  Структура.
//
Функция ПолучитьДанныеДляОтчетаСтоимостиОбъекта(Знач Объект, Знач КраткоеПредставлениеОбъектаМетаданных) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Пустой", Истина);
	Результат.Вставить("Заголовок", "");
	Результат.Вставить("ТабличныйДокумент", Неопределено);
	
	ТипЗначенияОбъекта = ТипЗнч(Объект);
	
	Если ТипЗначенияОбъекта = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
		ТекстЗапроса = ТекстЗапросаДляЗаявкиНаРазработку();
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументСсылка.ВнутреннееЗадание") Тогда
		ТекстЗапроса = ТекстЗапросаДляВнутреннегоЗадания();
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Объект", Объект);
	ПакетыЗапроса = Запрос.ВыполнитьПакет();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ВыборкаПредставления = ПакетыЗапроса[ПакетыЗапроса.ВГраница()].Выбрать();
	ВыборкаПредставления.Следующий();
	ПредставлениеОбъекта = ВыборкаПредставления.ПредставлениеОбъекта;
	
	СтоимостьОбъекта = 0;
	
	Макет = РегистрыСведений.Трудозатраты.ПолучитьМакет("СтоимостьОбъекта");
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьМакета.Параметры.ПредставлениеОбъекта = ПредставлениеОбъекта;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
	
	ВыборкаТрудозатрат = ПакетыЗапроса[ПакетыЗапроса.ВГраница() - 1].Выбрать();
	
	Пока ВыборкаТрудозатрат.Следующий() Цикл
		ОбластьМакета.Параметры.Заполнить(ВыборкаТрудозатрат);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		СтоимостьОбъекта = СтоимостьОбъекта + ВыборкаТрудозатрат.ОбщаяСтоимость;
	КонецЦикла;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьМакета.Параметры.СтоимостьОбъекта = СтоимостьОбъекта;
	ОбластьМакета.Параметры.КраткоеПредставлениеОбъектаМетаданных = КраткоеПредставлениеОбъектаМетаданных;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Результат.Пустой = (ВыборкаТрудозатрат.Количество() = 0);
	Результат.Заголовок = СтрШаблон("Стоимость: %1", ПредставлениеОбъекта);
	Результат.ТабличныйДокумент = ТабличныйДокумент;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру с данными трудозатрат.
//
// Параметры:
//  Ссылка      - ЛюбаяСсылка - ссылка на объект, трудозатраты по которому нужно
//                получить.
//  Подчиненные - Булево - признак получения трудозатрат по всей структуре подчиненности 
//                объекта.
//  ДобавитьСтоимость - Булево - признак добавления параметра со стоимостью заявки.
//                      Актуально для заявки.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПолучитьДанныеПоТрудозатратам(Знач Ссылка, Знач Подчиненные = Ложь, Знач ВидТрудозатрат = Неопределено, Знач ДобавитьСтоимость = Ложь, Знач ИмяФормы = "") Экспорт	
	
	Если ЗначениеЗаполнено(ИмяФормы) Тогда
		Функциональность = "Открытие вкладки ""Трудозатраты""";
		ОбщегоНазначенияВызовСервера.ОтслеживаниеИспользованияФункциональностиНаСервере(Функциональность, ИмяФормы);
	КонецЕсли;
	
	ДанныеТрудозатрат = РегистрыСведений.Трудозатраты.СформироватьДанныеДляФормы(Ссылка, , ВидТрудозатрат);
	
	Если ДобавитьСтоимость Тогда
		Стоимость = УчетТрудозатрат.ПолучитьСтоимостьРеализацииЗаявки(Ссылка);
		ДанныеТрудозатрат.Вставить("Стоимость", Стоимость);
	КонецЕсли;
	
	Возврат ДанныеТрудозатрат;
	
КонецФункции

// Возвращает структуру с датами, ограничивающими внесение трудозатрат и текущей датой.
//
// Возвращаемое значение:
// Структура - структура со свойствами.
// 	* НачалоПериода - Дата - минимальная разрешенная дата
// 	* КонецПериода - Дата - максимальная разрешенная дата
// 	* ТекущаяДатаСеанса - Дата - дата полученная методом ТекущаяДатаСеанса()
//
Функция ПолучитьРазрешенныйПериодДобавленияТрудозатрат() Экспорт
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	ДатаЗапрета = Константы.ДатаЗапретаИзмененияДанных.Получить();
	ДеньПослеЗапрета = ДатаЗапрета + 86400; // + 1 день
	
	РазрешенныйПериод = Новый Структура;
	РазрешенныйПериод.Вставить("НачалоПериода", ДеньПослеЗапрета);
	РазрешенныйПериод.Вставить("КонецПериода", НачалоДня(ТекущаяДатаСеанса));
	РазрешенныйПериод.Вставить("ТекущаяДатаСеанса", ТекущаяДатаСеанса);
	
	Возврат	РазрешенныйПериод;
	
КонецФункции

// Возвращает ключ записи для редактирования/удаления трудозатрат.
//
// Параметры:
//  Идентификатор - УникальныйИдентификатор - идентификатор записи регистра
//                  сведений - значение реквизита Идентификатор.
//
// Возвращаемое значение:
//  РегистрСведенийКлючЗаписи.Трудозатраты, Неопределено.
//
Функция ПолучитьКлючЗаписи(Знач Идентификатор) Экспорт
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	Трудозатраты.Период КАК Период,
	//|	Трудозатраты.Задача КАК Задача
	//|ИЗ
	//|	РегистрСведений.Трудозатраты КАК Трудозатраты
	//|ГДЕ
	//|	Трудозатраты.Идентификатор = &Идентификатор";
	//
	//ИдентификаторЗаписи = Новый УникальныйИдентификатор(Идентификатор);
	//Запрос.УстановитьПараметр("Идентификатор", ИдентификаторЗаписи);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Если НЕ РезультатЗапроса.Пустой() Тогда
	//	Выборка = РезультатЗапроса.Выбрать();
	//	Выборка.Следующий();
	//	
	//	СвойстваКлюча = Новый Структура;
	//	СвойстваКлюча.Вставить("Период", Выборка.Период);
	//	СвойстваКлюча.Вставить("Задача", Выборка.Задача);
	//	
	//	КлючЗаписи = РегистрыСведений.Трудозатраты.СоздатьКлючЗаписи(СвойстваКлюча);
	//Иначе
	//	КлючЗаписи = Неопределено;
	//КонецЕсли;

	//Возврат КлючЗаписи;
	
	Возврат XMLЗначение(Тип("ДокументСсылка.Трудозатраты"), Идентификатор);
	
КонецФункции

// Возвращает строку для фильтра, полученную изпараметра сеанса связанные филиалы.
// 
// Возвращаемое значение:
//  Строка -  значение гуидо филиалов
//
Функция ПолучитьФильтрИзСвязанныхФилиалов() Экспорт
	
	Массив = Новый Массив;
	
	Для Каждого Строка Из ПараметрыСеанса.СвязанныеФилиалы Цикл
		Массив.Добавить(Строка.УникальныйИдентификатор());	
	КонецЦикла;                                           
	
	Возврат СтрСоединить(Массив, " ");

КонецФункции

// Выполняет пометку на удаление документа трудозатрат
//
// Параметры:
//  Ссылка	 - ДокументСсылка.Трудозатраты	 - документ, которые требуется пометить на удаление
//
Процедура УдалитьТрудозатраты(Знач Ссылка) Экспорт
	
	Документы.Трудозатраты.УдалитьТрудозатраты(Ссылка);
	
КонецПроцедуры

// Проверяет количество фиилалов пользователя
// 
// Возвращаемое значение:
//   Булево 
//
Функция НесколькоФилиаловПользователя() Экспорт
		
	Возврат (ПараметрыСеанса.СвязанныеФилиалы.Количество() > 1
		ИЛИ ПараметрыСеанса.ДоступныеФилиалыРуководителя.Количество() > 1);
	
КонецФункции

// Возвращает нужные отпуска из "Классификатор использования рабочего времени"
// 
// Возвращаемое значение:
//  Массив - Массив отпусков
//
Функция ПолучитьВидыОтпусковСотрудника() Экспорт
	
	Отпуска = Новый Массив;	
	Отпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ПолучитьЭлементПоБуквенномуКоду("ОТ"));
	Отпуска.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.ПолучитьЭлементПоБуквенномуКоду("ОД"));
	
	Возврат Отпуска;
	
КонецФункции

Функция ПолучитьЗаголовокГиперссылкиТрудозатрат() Экспорт
	
	Результат = Новый Структура("Заголовок", 0);
	КоличествоЧасовЗаДень = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Трудозатраты.Затрата), 0) КАК СуммаТрудозатрат
	|ПОМЕСТИТЬ ТрудозатратыФакт
	|ИЗ
	|	РегистрСведений.Трудозатраты КАК Трудозатраты
	|ГДЕ
	|	Трудозатраты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Трудозатраты.Пользователь = &Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроизводственныйКалендарь.КоличествоРабочихЧасов * КоэффициентМинимальногоВремениТрудозатрат.Значение КАК ТрудозатратыПлан,
	|	ЕСТЬNULL(ТрудозатратыФакт.СуммаТрудозатрат, 0) КАК СуммаТрудозатрат
	|ИЗ
	|	РегистрСведений.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.КоэффициентМинимальногоВремениТрудозатрат КАК КоэффициентМинимальногоВремениТрудозатрат
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТрудозатратыФакт КАК ТрудозатратыФакт
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ПроизводственныйКалендарь.ДатаКалендаря = &ДатаНачала";
	
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаСоСдвигом();
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ТекущаяДата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ТекущаяДата));
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		КоличествоЧасовЗаДень = Выборка.СуммаТрудозатрат;
		Если КоличествоЧасовЗаДень >= Выборка.ТрудозатратыПлан Тогда
			Результат.Вставить("Цвет", ЦветаСтиля.ЦветКорректногоЗначения);
		КонецЕсли;
	КонецЕсли;
	
	Результат.Заголовок = СтрШаблон("%1 час.", КоличествоЧасовЗаДень);
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ПользовательскиеНастройки

// Возвращает ключи для получения и записи пользовательской настройки сортировки таблицы трудозатрат
// 
// Возвращаемое значение:
//  Структура
//
Функция КлючиНастройкиСортировкиСпискаТрудозатрат()
	
	Ключи = Новый Структура("КлючОбъекта,КлючНастроек", "СписокТрудозатрат", "СортироватьПоВозрастанию");
	Возврат Ключи;
	
КонецФункции

// Возвращает настройку сортировки списка трудозатрат, сохраненную текущим пользователем. 
// Если пользователь не сохранял настройку, то возвращает Истина (значение, соответствующее сортировке по возрастанию).
// 
// Возвращаемое значение:
//  Булево - Истина - сортировка по возрастанию, Ложь - сортировать по убыванию 
//
Функция НастройкаНаправленияСортировкиСпискаТрудозатрат() Экспорт
	
	КлючиНастройки = КлючиНастройкиСортировкиСпискаТрудозатрат();
	НастройкаСортировки = ОбщегоНазначенияВызовСервера.ЗагрузитьОбщиеНастройки(КлючиНастройки.КлючОбъекта, КлючиНастройки.КлючНастроек);
	
	Возврат ?(НастройкаСортировки = Неопределено, Истина, НастройкаСортировки);
	
КонецФункции

// Получает текущую настройку сортировки списка трудозатрат для текущего пользователя и записывает в настроки обратную полученной.
// Например, если настройка соответствовала сортировке по возрастанию, то будет сохранена настройка сортировки по убыванию (и наоборот).
// В случае, если настройка не была сохранена ранее, записывается настройка сортировки по убыванию.
// Возвращает новую настройку сортировки.
//
// Возвращаемое значение:
//  Булево - Истина - сортировка по возрастанию, Ложь - сортировать по убыванию 
//
Функция ИнвертироватьНастройкуСортировкиСпискаТрудозатрат() Экспорт 
 
	ТекущаяНастройкаСортировки = НастройкаНаправленияСортировкиСпискаТрудозатрат(); 
	НоваяНастройкаСортировки = НЕ ТекущаяНастройкаСортировки;
		 
	КлючиНастройки = КлючиНастройкиСортировкиСпискаТрудозатрат();
	ОбщегоНазначенияВызовСервера.СохранитьОбщиеНастройки(КлючиНастройки.КлючОбъекта, КлючиНастройки.КлючНастроек, НоваяНастройкаСортировки);
	
	Возврат НоваяНастройкаСортировки; 
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаДляВнутреннегоЗадания()
	
	Возврат 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнутреннееЗадание.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВнутреннееЗадание.Ссылка) КАК ПредставлениеОбъекта
	|ПОМЕСТИТЬ ТекущийДокумент
	|ИЗ
	|	Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
	|ГДЕ
	|	ВнутреннееЗадание.Ссылка = &Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнутреннееЗадание.Ссылка КАК ВнутреннееЗаданиеВторойИерархии,
	|	ВнутреннееЗаданиеТретьейИерархии.Ссылка КАК ВнутреннееЗаданиеТретьейИерархии
	|ПОМЕСТИТЬ ПодчиненныеВнутренниеЗадания
	|ИЗ
	|	ТекущийДокумент КАК ТекущийДокумент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
	|		ПО ТекущийДокумент.Ссылка = ВнутреннееЗадание.ОбъектОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннееЗадание КАК ВнутреннееЗаданиеТретьейИерархии
	|		ПО (ВнутреннееЗадание.Ссылка = ВнутреннееЗаданиеТретьейИерархии.ОбъектОснование)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТекущийДокумент.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВсеДокументыДляРасчета
	|ИЗ
	|	ТекущийДокумент КАК ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкаНаРазработку.Ссылка
	|ИЗ
	|	ТекущийДокумент КАК ТекущийДокумент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО ТекущийДокумент.Ссылка = ЗаявкаНаРазработку.ОбъектОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодчиненныеВнутренниеЗадания.ВнутреннееЗаданиеВторойИерархии
	|ИЗ
	|	ПодчиненныеВнутренниеЗадания КАК ПодчиненныеВнутренниеЗадания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкаНаРазработку.Ссылка
	|ИЗ
	|	ПодчиненныеВнутренниеЗадания КАК ПодчиненныеВнутренниеЗадания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО ПодчиненныеВнутренниеЗадания.ВнутреннееЗаданиеВторойИерархии = ЗаявкаНаРазработку.ОбъектОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодчиненныеВнутренниеЗадания.ВнутреннееЗаданиеТретьейИерархии
	|ИЗ
	|	ПодчиненныеВнутренниеЗадания КАК ПодчиненныеВнутренниеЗадания
	|ГДЕ
	|	НЕ ПодчиненныеВнутренниеЗадания.ВнутреннееЗаданиеТретьейИерархии ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкаНаРазработку.Ссылка
	|ИЗ
	|	ПодчиненныеВнутренниеЗадания КАК ПодчиненныеВнутренниеЗадания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО ПодчиненныеВнутренниеЗадания.ВнутреннееЗаданиеТретьейИерархии = ЗаявкаНаРазработку.ОбъектОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВсеДокументыДляРасчета.Ссылка КАК Объект,
	|	Трудозатраты.Филиал КАК Филиал,
	|	СУММА(ОказанныеУслугиОбороты.КоличествоОборот) КАК КоличествоЧасов,
	|	СУММА(ОказанныеУслугиОбороты.СуммаОборот) КАК ОбщаяСтоимость
	|ИЗ
	|	РегистрНакопления.ОказанныеУслуги.Обороты(
	|			,
	|			,
	|			Авто,
	|			ОбъектОснование В
	|				(ВЫБРАТЬ
	|					ВсеДокументыДляРасчета.Ссылка
	|				ИЗ
	|					ВсеДокументыДляРасчета)) КАК ОказанныеУслугиОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеДокументыДляРасчета КАК ВсеДокументыДляРасчета
	|		ПО ОказанныеУслугиОбороты.ОбъектОснование = ВсеДокументыДляРасчета.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Трудозатраты КАК Трудозатраты
	|		ПО ОказанныеУслугиОбороты.Регистратор = Трудозатраты.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Трудозатраты.Филиал,
	|	ВсеДокументыДляРасчета.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбщаяСтоимость УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущийДокумент.ПредставлениеОбъекта КАК ПредставлениеОбъекта
	|ИЗ
	|	ТекущийДокумент КАК ТекущийДокумент";

КонецФункции

Функция ТекстЗапросаДляЗаявкиНаРазработку()
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявкаНаРазработку.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗаявкаНаРазработку.Ссылка) КАК ПредставлениеОбъекта
	|ПОМЕСТИТЬ ТекущийДокумент
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|ГДЕ
	|	ЗаявкаНаРазработку.Ссылка = &Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущийДокумент.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВсеДокументыДляРасчета
	|ИЗ
	|	ТекущийДокумент КАК ТекущийДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВсеДокументыДляРасчета.Ссылка КАК Объект,
	|	Трудозатраты.Филиал КАК Филиал,
	|	СУММА(ОказанныеУслугиОбороты.КоличествоОборот) КАК КоличествоЧасов,
	|	СУММА(ОказанныеУслугиОбороты.СуммаОборот) КАК ОбщаяСтоимость
	|ИЗ
	|	РегистрНакопления.ОказанныеУслуги.Обороты(
	|			,
	|			,
	|			Авто,
	|			ОбъектОснование В
	|				(ВЫБРАТЬ
	|					ВсеДокументыДляРасчета.Ссылка
	|				ИЗ
	|					ВсеДокументыДляРасчета)) КАК ОказанныеУслугиОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеДокументыДляРасчета КАК ВсеДокументыДляРасчета
	|		ПО ОказанныеУслугиОбороты.ОбъектОснование = ВсеДокументыДляРасчета.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Трудозатраты КАК Трудозатраты
	|		ПО ОказанныеУслугиОбороты.Регистратор = Трудозатраты.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Трудозатраты.Филиал,
	|	ВсеДокументыДляРасчета.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбщаяСтоимость УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущийДокумент.ПредставлениеОбъекта КАК ПредставлениеОбъекта
	|ИЗ
	|	ТекущийДокумент КАК ТекущийДокумент";

КонецФункции

#КонецОбласти
