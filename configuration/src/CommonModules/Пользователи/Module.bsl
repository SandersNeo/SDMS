///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Добавляет или удаляет роль пользователя
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь
//  Роль		 - Метаданные.Роли - роль
//  ДобавитьРоль - Булево - Истина - добавить, Ложь - удалить
//
Процедура ИзменитьРольПользователя(Пользователь, Роль, Знач ДобавитьРоль) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
	
	Если ПользовательИБ = Неопределено Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;
	
	Если ДобавитьРоль Тогда
		Если НЕ ПользовательИБ.Роли.Содержит(Роль) Тогда
			ПользовательИБ.Роли.Добавить(Роль);
			// Оповестить пользователя о смене роли
		КонецЕсли;
	Иначе
		Если ПользовательИБ.Роли.Содержит(Роль) Тогда
			ПользовательИБ.Роли.Удалить(Роль);
			// Оповестить пользователя о смене роли
		КонецЕсли;
	КонецЕсли;
	ПользовательИБ.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Генерирует временный пароль для пользователя. Пароль представляет собой число
// в интервале от 100000 до 999999 без разделителей разрядов.
//
// Возвращаемое значение:
//  Строка. Значение сгенерированного пароля.
//
Функция НовыйВременныйПароль() Экспорт
	
	НачальноеЧисло = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ГенераторПароля = Новый ГенераторСлучайныхЧисел(НачальноеЧисло);
	
	НижнийПорог = 10000000;
	ВерхнийПорог = 99999999;
	
	ВременныйПароль = ГенераторПароля.СлучайноеЧисло(НижнийПорог, ВерхнийПорог);
	
	Возврат Формат(ВременныйПароль, "ЧГ=0");
	
КонецФункции

// Получает связанные данные пользователя
//
// Параметры:
//  Пользователь  - СправочникСсылка.Пользователи - ссылка на элемент справочника
//
// Возвращаемое значение:
//   Структура - структура с данными о результате работы функции
// 		* Успешно - Булево	- Ложь, если была ошибка, иначе Истина.
// 		* ТекстОшибки - Строка - Описание возникшей ошибки.
// 		* Данные - Структура - Структура данных пользователя.
//
Функция ПолучитьДанныеПользователя(Знач Пользователь) Экспорт
	
	Результат = Новый Структура("Успешно, ТекстОшибки", Истина, "");

	Запрос = Новый Запрос;
	Запрос.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ЛичныеДела.Сотрудник КАК Пользователь,
	|	ВЫРАЗИТЬ(ЛичныеДела.Данные КАК Справочник.Филиалы) КАК Филиал
	|ПОМЕСТИТЬ ФилиалПользователя
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(
	|			&ТекущаяДата,
	|			Сотрудник = &Пользователь
	|				И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДела
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛичныеДела.Сотрудник КАК Пользователь,
	|	ВЫРАЗИТЬ(ЛичныеДела.Данные КАК Справочник.Филиалы) КАК Команда
	|ПОМЕСТИТЬ КомандаПользователя
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(
	|			&ТекущаяДата,
	|			Сотрудник = &Пользователь
	|				И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВКоманду)) КАК ЛичныеДела
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвязанныеОбъекты.ПриемникСвязи КАК Ссылка
	|ИЗ
	|	ФилиалПользователя КАК ФилиалПользователя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязанныеОбъекты КАК СвязанныеОбъекты
	|		ПО ФилиалПользователя.Филиал = СвязанныеОбъекты.ИсточникСвязи
	|			И (СвязанныеОбъекты.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.СвязанаС))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	ФилиалПользователя.Филиал КАК Филиал,
	|	Филиалы.ТипФилиала КАК ТипФилиала,
	|	ЕСТЬNULL(КомандаПользователя.Команда, ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК Команда,
	|	ЕСТЬNULL(РолиПользователей.ПринадлежитITОтделу, ЛОЖЬ) КАК ПринадлежитITОтделу
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФилиалПользователя КАК ФилиалПользователя
	|		ПО (ФилиалПользователя.Пользователь = Пользователи.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО (ФилиалПользователя.Филиал = Филиалы.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КомандаПользователя КАК КомандаПользователя
	|		ПО (КомандаПользователя.Пользователь = Пользователи.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РолиПользователей КАК РолиПользователей
	|		ПО Пользователи.РольВОтделеIT = РолиПользователей.Ссылка
	|			И (РолиПользователей.ПринадлежитITОтделу = ИСТИНА)
	|ГДЕ
	|	Пользователи.Ссылка = &Пользователь";	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());	

	РезультатПакеты = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатПакеты.ВГраница();
	
	Если НЕ РезультатПакеты[КоличествоПакетов].Пустой() Тогда
		Выборка = РезультатПакеты[КоличествоПакетов].Выбрать();
		Выборка.Следующий();
		
		ITФилиал = (Выборка.ТипФилиала <> Перечисления.ТипыФилиалов.НеIT);
		
		СтруктураАвтора = Новый Структура;
		СтруктураАвтора.Вставить("Ссылка", Пользователь);
		СтруктураАвтора.Вставить("Филиал", Выборка.Филиал);	
		СтруктураАвтора.Вставить("ITСтруктура", ITФилиал);
		СтруктураАвтора.Вставить("Команда", Выборка.Команда);
		СтруктураАвтора.Вставить("ПринадлежитITОтделу", Выборка.ПринадлежитITОтделу);
		СтруктураАвтора.Вставить("СвязанныеФилиалы", РезультатПакеты[КоличествоПакетов - 1].Выгрузить());
		
		Результат.Вставить("Данные", СтруктураАвтора); 
	Иначе
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = "Указанный пользователь отсутствует.";
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Проверяет отношение пользователя к IT отделу по нескольким признакам.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь системы.
//
// Возвращаемое значение:
//  Булево. Признак отношения пользователя к ИТ.
//
Функция ПринадлежитIT(Знач Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЛичныеДела.Данные КАК Справочник.Филиалы) КАК Филиал
	|ПОМЕСТИТЬ ФилиалПользователя
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(
	|			&ТекущаяДата,
	|			Сотрудник = &Пользователь
	|				И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДела
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК ЕстьПрава
	|ИЗ
	|	ФилиалПользователя КАК ФилиалПользователя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО ФилиалПользователя.Филиал = Филиалы.Ссылка
	|			И (Филиалы.ТипФилиала <> ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.НеIT))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РолиПользователей КАК РолиПользователей
	|		ПО Пользователи.РольВОтделеIT = РолиПользователей.Ссылка
	|			И (РолиПользователей.ПринадлежитITОтделу = ИСТИНА)
	|ГДЕ
	|	Пользователи.Ссылка = &Пользователь";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ТаблицаНаправленийРолейПользователя(Знач Направление = Неопределено, Знач ПолучитьТолькоТаблицуНаправлений = Ложь) Экспорт
	
	Пользователь = ПараметрыСеанса.ТекущийПользователь;
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РолиПользователейПоНаправлениям.НаправлениеРазработки КАК Направление,
	|	РолиПользователейПоНаправлениям.НаправлениеРазработки.Наименование КАК НаименованиеНаправления,
	|	РолиПользователейПоНаправлениям.Роль КАК РольПользователя
	|ИЗ
	|	РегистрСведений.РолиПользователейПоНаправлениям КАК РолиПользователейПоНаправлениям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаправленияРазработки КАК НаправленияРазработки
	|		ПО РолиПользователейПоНаправлениям.НаправлениеРазработки = НаправленияРазработки.Ссылка
	|ГДЕ
	|	РолиПользователейПоНаправлениям.Пользователь = &Пользователь
	|	И НЕ НаправленияРазработки.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеНаправления";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	ТаблицаНаправлений = Запрос.Выполнить().Выгрузить();
	
	Если ПолучитьТолькоТаблицуНаправлений Тогда
		Результат = ТаблицаНаправлений;		
	Иначе	
		СписокНаправлений = Новый СписокЗначений;
		РольПользователя = Неопределено;
		
		Для Каждого Строка Из ТаблицаНаправлений Цикл
			СписокНаправлений.Добавить(Строка.Направление, Строка.НаименованиеНаправления);		
		КонецЦикла;
		
		Если Направление <> Неопределено 
			И Направление <> Справочники.НаправленияРазработки.ПустаяСсылка() Тогда
			
			Если СписокНаправлений.НайтиПоЗначению(Направление) = Неопределено Тогда
				СписокНаправлений.Добавить(Направление, Направление.Наименование);
			КонецЕсли;
			НайденныеСтроки = ТаблицаНаправлений.НайтиСтроки(Новый Структура("Направление", Направление));
			Если НайденныеСтроки.Количество() > 0 Тогда
				РольПользователя = НайденныеСтроки[0].РольПользователя;
			Иначе
				РольПользователя = Справочники.РолиПользователей.ПустаяСсылка();
			КонецЕсли;
		Иначе
			РольПользователя = Справочники.РолиПользователей.ПустаяСсылка();
		КонецЕсли;
		
		СписокНаправлений.СортироватьПоПредставлению();		
		Результат = Новый Структура("СписокНаправлений, РольПользователя", СписокНаправлений, РольПользователя);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет нахождение пользователя в филиале юридического лица, являющегося IT-организацией
//
// Параметры:
//  Пользователь  - СправочникСсылка.Пользователи - пользователь, для которого происходит проверка.
//  Дата  - ДатаВремя - дата на которую проверяем.
//
// Возвращаемое значение:
//   Булево   - Истина, если филиал пользователя на дату относится к IT-организации, иначе Ложь.
//
Функция ЭтоСотрудникИТОрганизации(Знач Пользователь, Знач Дата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЛичныеДела.Данные КАК Справочник.Филиалы) КАК Филиал
	|ПОМЕСТИТЬ ФилиалыСотрудника
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(
	|			&Дата,
	|			Сотрудник = &Пользователь
	|				И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДела
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	ФилиалыСотрудника КАК ФилиалыСотрудника
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЮридическиеЛица КАК ЮридическиеЛица
	|			ПО Филиалы.ЮридическоеЛицо = ЮридическиеЛица.Ссылка
	|				И (ЮридическиеЛица.ЯвляетсяИТОрганизацией)
	|		ПО ФилиалыСотрудника.Филиал = Филиалы.Ссылка";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
			
КонецФункции

#КонецОбласти
