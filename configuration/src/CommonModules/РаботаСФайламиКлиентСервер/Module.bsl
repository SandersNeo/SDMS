///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Добавляет в конец пути разделитель, принятый в текущей операционной системе.
//
// Параметры:
//  Путь - Строка - путь (каталог).
//
// Возвращаемое значение:
//  Строка. Исходное значение пути + символ разделителя.
//
Функция ДобавитьРазделительПути(Знач Путь) Экспорт
	
	Если ПустаяСтрока(Путь) Тогда
		Возврат Путь;
	КонецЕсли;
	
	Разделитель = ПолучитьРазделительПути();
	
	Если НЕ СтрЗаканчиваетсяНа(Путь, Разделитель) Тогда
		Путь = Путь + Разделитель;
	КонецЕсли;

	Возврат Путь;
	
КонецФункции

// Возвращает имя файла без его расширения.
//
// Параметры:
//  ИмяФайла - Строка - имя файла.
//
// Возвращаемое значение:
//  Строка с имененм файла без расширения.
//
Функция ИмяФайлаБезРасширения(Знач ИмяФайла) Экспорт
	
	ПозицияСимвола = СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца);
	Если ПозицияСимвола <> 0 Тогда
		ИмяФайла = Сред(ИмяФайла, 1, ПозицияСимвола - 1);
	КонецЕсли;
	
	Возврат ИмяФайла;	
	
КонецФункции

Функция ИндексИконкиФайлаПоРасширению(Знач Расширение) Экспорт
	
	СоответствиеИконок = ПовторноеИспользованиеВызовСервера.ПолучитьСоответствиеИконокФайловРасширениям();
	
	ИндексИконки = СоответствиеИконок.Получить(ВРег(Расширение));
	Если ИндексИконки = Неопределено Тогда
		ИндексИконки = 0;
	КонецЕсли;
	
	Возврат ИндексИконки;
	
КонецФункции

// Функция возвращает префикс для уникальных имен файлов.
//
Функция ПрефиксУникальногоИмениФайла() Экспорт
	
	Возврат "sdms_file_";
	
КонецФункции

// Приводит размер файла в байтах к плавающему значению Байт/КБайт/МБайт/ГБайт
//
// Параметры:
//  Размер - Число - размер файла в байтах.
//
// Возвращаемое значение:
//  Строка с размером файла и с одной из подписей Байт/КБайт/МБайт/ГБайт.
//
Функция РазмерФайлаСтрокой(Знач Размер, Знач Округлять = Ложь) Экспорт
	
	Если Размер < 1024 Тогда
		РазмерФайла = Размер;
		ПостФикс    = "Байт";
			
	ИначеЕсли Размер < 1048576 Тогда
		РазмерФайла = Размер / 1024;
		ПостФикс    = "КБайт";
			
	ИначеЕсли Размер < 1073741824 Тогда
		РазмерФайла = Размер / 1048576;
		Постфикс    = "МБайт";
			
	Иначе
		РазмерФайла = Размер / 1073741824;
		ПостФикс    = "ГБайт";
	КонецЕсли;
	
	Если Округлять Тогда
		ФорматнаяСтрока = "ЧДЦ=; ЧРД=.; ЧН=0; ЧГ=0";
	Иначе
		ФорматнаяСтрока = "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0";
	КонецЕсли;
	
	Возврат СтрШаблон("%1 %2", Формат(РазмерФайла, ФорматнаяСтрока), ПостФикс);	
	
КонецФункции

// Вычленяет из имени файла его расширение в возвращает в качестве результата.
//
// Параметры:
//  ИмяФайла - Строка - имя файла, расширение которго нужно получить.
//  БезТочки - Булево - признак, указывающий функции исключить точку из результата.
//
// Возвращаемое значение:
//  Строка с расширением файла. Если расширение не найдено, то пвозвращается
//  пустая строка.
//
Функция РасширениеИмениФайла(Знач ИмяФайла, Знач БезТочки = Ложь) Экспорт
	
	Расширение = "";
	
	ПозицияТочки = СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца);
	Если ПозицияТочки > 0 Тогда
		
		Если БезТочки Тогда
			Расширение = Сред(ИмяФайла, ПозицияТочки + 1);
		Иначе
			Расширение = Сред(ИмяФайла, ПозицияТочки);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Расширение;
	
КонецФункции

// Возвращает незаполненную структуру свойств файла.
//
Функция СвойстваФайла() Экспорт
	
	Возврат Новый Структура("Имя, ПолноеИмя, Расширение, Размер, АдресВХранилище, Описание",
		"", "", "", 0, "", "");
	
КонецФункции

// Функция формирует уникальное имя файла для хранения его на сервере. Имя файла
// включает в себя обязательный префикс из функции ПрефиксУникальногоИмениФайла(), 
// GUID без знаков "-" и расширение файла (при наличии).
//
// Параметры:
//  ИмяФайла - Строка - исходное имя файла. Необходимо для выделения расширения.
//
// Возвращаемое значение:
//  Строка с уникальным именем файла.
//
Функция СоздатьУникальноеИмяФайла(Знач ИмяФайла, Знач Ссылка = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		СтрокаУникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
	Иначе
		СтрокаУникальныйИдентификатор = Строка(Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
	УникальноеИмяФайла = ПрефиксУникальногоИмениФайла() + СтрЗаменить(СтрокаУникальныйИдентификатор, "-", "");
	
	Расширение = РасширениеИмениФайла(ИмяФайла);
	Если НЕ ПустаяСтрока(Расширение) Тогда
		УникальноеИмяФайла = УникальноеИмяФайла + Расширение;
	КонецЕсли;
	
	Возврат НРег(УникальноеИмяФайла);	
	
КонецФункции

// Функция формирует имя файла выбрасывая из первоначально предложенного имени все
// запрещенные символы
// Параметры
//  ИмяФайла     – Строка, содержащая имя файла, без каталога.
//
// Возвращаемое значение:
//   Строка – имя файла, которое может быть использовано в файловой системе
//
Функция УдалитьЗапрещенныеСимволыИмени(Знач ИмяФайла) Экспорт
	
	ИтоговоеИмяФайла = СокрЛП(ИмяФайла);
	
	Если ПустаяСтрока(ИтоговоеИмяФайла) Тогда
		Возврат ИтоговоеИмяФайла;
	КонецЕсли;
	
	СписокСимволов = Новый СписокЗначений;
	
	СписокСимволов.Добавить("\");
	СписокСимволов.Добавить("/");
	СписокСимволов.Добавить(":");
	СписокСимволов.Добавить("*");
	СписокСимволов.Добавить("&");
	СписокСимволов.Добавить("""");
	СписокСимволов.Добавить("<");
	СписокСимволов.Добавить(">");
	СписокСимволов.Добавить("|");
	
	Для Каждого СтрокаЗапретногоСимвола  Из СписокСимволов Цикл
		ИтоговоеИмяФайла = СтрЗаменить(ИтоговоеИмяФайла,  СтрокаЗапретногоСимвола.Значение, "");      
	КонецЦикла;
	
	Возврат ИтоговоеИмяФайла;
	
КонецФункции

// Функция по префиксу ПрефиксУникальногоИмениФайла() проверяет уникальность
// файла.
//
// Возвращаемое значение:
//  Истина, когда файл относится к уникальным файлам, Ложь в противном случае.
//
Функция ЭтоУникальноеИмяФайла(Знач ИмяФайла) Экспорт
	
	Префикс = ПрефиксУникальногоИмениФайла();
	КоличествоСимволов = СтрДлина(Префикс);
	
	Возврат (Лев(НРег(ИмяФайла), КоличествоСимволов) = Префикс);
	
КонецФункции

#КонецОбласти
