///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции работы с участниками наблюдения за объектами 
// и всем, что с ними связано.
//
// Серверный интерфейс подсистемы
// - работа с формой владельца интерфейса
// - редактирование участников
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Добавляет участников наблюдения из объекта основания в регистр сведений "Участники"
// 
// Параметры:
//  Ссылка         - ОпределяемыйТип.ОбъектНаблюдения - ссылка на объект БД. 
//
Процедура ДобавитьУчастниковИзОбъектаОснования(Знач Ссылка) Экспорт
	
	ДокументОснования = ПолучитьОснованиеДляДокумента(Ссылка); 
	
	Если ЗначениеЗаполнено(ДокументОснования) Тогда
		МассивДокументовОснований = Новый Массив;
		МассивДокументовОснований.Добавить(ДокументОснования);
		Участники = ПолучитьУчастниковДляОбъектов(МассивДокументовОснований);
		
		// Если это документ заявка или задача и автор является заместителем руководителя филиала,
		// то нужно добавить руководителя филиала в участники для текущего объекта
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаявкаНаРазработку")
			ИЛИ ТипЗнч(Ссылка) = Тип("ДокументСсылка.Задача") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Филиалы.ЗаместительРуководителя КАК ЗаместительРуководителя,
			|	Филиалы.Руководитель КАК Руководитель
			|ИЗ
			|	Справочник.Филиалы КАК Филиалы
			|ГДЕ
			|	Филиалы.Ссылка = &Филиал";
			
			Запрос.УстановитьПараметр("Филиал", ПараметрыСеанса.Филиал);
	
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.ЗаместительРуководителя = ПараметрыСеанса.ТекущийПользователь Тогда
					Если Участники.Найти(Выборка.Руководитель) = Неопределено Тогда
						Участники.Добавить(Выборка.Руководитель);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Участники.Количество() > 0 Тогда
			Для Каждого Пользователь Из Участники Цикл
				РегистрыСведений.Участники.Добавить(Ссылка, Пользователь, Справочники.РолиУчастников.Наблюдатель);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает роли участников, которые добавляются и удаляются интерактивно
// 
// Возвращаемое значение:
//   Массив - массив ссылок на предопределенные элементы справочника РолиУчастников
//
Функция ИнтерактивныеРоли() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Справочники.РолиУчастников.Наблюдатель);
	Массив.Добавить(Справочники.РолиУчастников.Подписчик);
	Массив.Добавить(Справочники.РолиУчастников.УчастникКомандыУправленияПроектом);
	
	Возврат Новый ФиксированныйМассив(Массив);
	
КонецФункции

// Обновляет участников наблюдения за объектом в регистре сведений "Участники"
// 
// Параметры:
//  Объект         - ОпределяемыйТип.ОбъектНаблюдения - ссылка на объект БД.
//  ДанныеДоЗаписи - Структура - данные реквизитов и таб.частей объекта до 
//                               записи новых данных в БД. 
//
Процедура ОбновитьУчастниковОбъекта(Знач Объект, Знач ОбъектДоЗаписи) Экспорт
		
	// ДОБАВЛЕНИЕ УЧАСТНИКОВ ПРИ ИЗМЕНЕНИИ ЗНАЧЕНИЙ РЕКВИЗИТОВ ОБЪЕКТА НАБЛЮДЕНИЯ
	
	// при изменении реквизита Автор	
	Если ОбъектДоЗаписи.Свойство("Автор") И ОбъектДоЗаписи.Автор <> Объект.Автор Тогда
		Если ЗначениеЗаполнено(Объект.Автор) Тогда
			РегистрыСведений.Участники.Добавить(Объект, Объект.Автор, Справочники.РолиУчастников.Автор);
		КонецЕсли;

		Если ЗначениеЗаполнено(ОбъектДоЗаписи.Автор) Тогда
			РегистрыСведений.Участники.Изменить(Объект, ОбъектДоЗаписи.Автор, Справочники.РолиУчастников.Автор, Ложь, Истина);
			РегистрыСведений.Участники.Добавить(Объект, ОбъектДоЗаписи.Автор, Справочники.РолиУчастников.ПредыдущийАвтор);
		КонецЕсли;
	КонецЕсли;
	
	// при изменении реквизита Заказчик
	Если ОбъектДоЗаписи.Свойство("Заказчик") И ОбъектДоЗаписи.Заказчик <> Объект.Заказчик Тогда
		Если ЗначениеЗаполнено(Объект.Заказчик) Тогда
			РегистрыСведений.Участники.Добавить(Объект, Объект.Заказчик, Справочники.РолиУчастников.Заказчик);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектДоЗаписи.Заказчик) Тогда
			РегистрыСведений.Участники.Изменить(Объект, ОбъектДоЗаписи.Заказчик, Справочники.РолиУчастников.Заказчик, Ложь, Истина);
		КонецЕсли;
	КонецЕсли;
	
	// при изменении реквизита Назначена
	МенятьИсполнителя = ОбъектДоЗаписи.Свойство("Назначена") И ОбъектДоЗаписи.Назначена <> Объект.Назначена;
	
	Если ОбъектДоЗаписи.Свойство("Назначена") Тогда  
		ПредыдущийИсполнитель = ОбъектДоЗаписи.Назначена;
	Иначе       
		ПредыдущийИсполнитель = Неопределено;
	КонецЕсли;
	
	Если ОбъектДоЗаписи.Свойство("Назначена") И ЗначениеЗаполнено(Объект.Назначена) Тогда	
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.Задача") Тогда
			Если Объект.Статус = Справочники.СтатусыОбъектов.Тестирование Тогда
				РегистрыСведений.Участники.Добавить(Объект, Объект.Назначена, Справочники.РолиУчастников.Тестировщик);
				МенятьИсполнителя = Ложь;
			Иначе
				ПринадлежитIT = Пользователи.ПринадлежитIT(Объект.Назначена);
				
				Если ПринадлежитIT Тогда
					СтатусДляПроверки = РаботаСПроцессами.ПолучитьСсылкуНаСлужебныйСтатус(Объект.Статус);
					
					Если СтатусДляПроверки = Справочники.СтатусыОбъектов.CodeReview Тогда						
						РегистрыСведений.Участники.Добавить(Объект, Объект.Назначена, Справочники.РолиУчастников.Ревьюер); 
						МенятьИсполнителя = Ложь;					
						
					ИначеЕсли МенятьИсполнителя Тогда 
						ПредыдущийИсполнитель = ПредыдущийИсполнитель(Объект, Справочники.РолиУчастников.Исполнитель);	
						РегистрыСведений.Участники.Добавить(Объект, Объект.Назначена, Справочники.РолиУчастников.Исполнитель);
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли МенятьИсполнителя Тогда
			РегистрыСведений.Участники.Добавить(Объект, Объект.Назначена, Справочники.РолиУчастников.Исполнитель);		
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредыдущийИсполнитель) И ПредыдущийИсполнитель <> Объект.Назначена И МенятьИсполнителя Тогда
		// Если был подписан на уведомления то добавим в наблюдатели
		БылПодписан = РегистрыСведений.Участники.ЭтоУчастник(Объект, ПредыдущийИсполнитель, Справочники.РолиУчастников.Исполнитель, Истина);
		
		Если БылПодписан Тогда
			РегистрыСведений.Участники.Добавить(Объект, ПредыдущийИсполнитель, Справочники.РолиУчастников.Наблюдатель);
		КонецЕсли;
		
		// Удалим (скроем) как исполнителя
		РегистрыСведений.Участники.Изменить(Объект, ПредыдущийИсполнитель, Справочники.РолиУчастников.Исполнитель, Ложь, Истина);
	КонецЕсли;
	
	// при изменении реквизита Руководитель
	Если ОбъектДоЗаписи.Свойство("Руководитель") И ОбъектДоЗаписи.Руководитель <> Объект.Руководитель Тогда
		Если ЗначениеЗаполнено(Объект.Руководитель) Тогда
			РегистрыСведений.Участники.Добавить(Объект, Объект.Руководитель, Справочники.РолиУчастников.РуководительПроекта);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектДоЗаписи.Руководитель) Тогда
			РегистрыСведений.Участники.Изменить(Объект, ОбъектДоЗаписи.Руководитель, 
				Справочники.РолиУчастников.РуководительПроекта, Ложь, Истина);
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьОснованиеДляДокумента(Объект) 
	
	ОснованиеДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект,"ОбъектОСнование");
	
	Если Не ЗначениеЗаполнено(ОснованиеДокумента) и (ТипЗнч(Объект) = Тип("ДокументСсылка.Задача") ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.ВнутреннееЗадание")) тогда
		ПроектДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект,"Проект"); 
		Если ЗначениеЗаполнено(ПроектДокумента) Тогда
			ОснованиеДокумента = ПроектДокумента;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОснованиеДокумента 
	
КонецФункции

Функция ПолучитьУчастниковДляОбъектов(МассивОбъектов)
		
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Объект", Метаданные.ОпределяемыеТипы.ОбъектНаблюдения.Тип);
	
	Для Каждого Объект Из МассивОбъектов Цикл
		ТаблицаОбъектов.Добавить().Объект = Объект;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОбъектов.Объект КАК Объект
	|ПОМЕСТИТЬ ПодчиненныеОбъекты
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Участники.Пользователь КАК Пользователь
	|ИЗ
	|	ПодчиненныеОбъекты КАК ПодчиненныеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Участники КАК Участники
	|		ПО ПодчиненныеОбъекты.Объект = Участники.Объект
	|			И (НЕ Участники.Скрытый)
	|			И (Участники.ПолучатьОповещения)
	|			И (Участники.Роль = ЗНАЧЕНИЕ(Справочник.РолиУчастников.Наблюдатель))";
	
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	МассивУчастников = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивУчастников.Добавить(Выборка.Пользователь);
	КонецЦикла;
	
	Возврат МассивУчастников;
		
КонецФункции

// Возвращает активного (не скрытый) пользователя - исполнителя 
Функция ПредыдущийИсполнитель(Знач Объект, Знач Роль)
	
	ПредыдущийИсполнитель = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Участники.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.Участники КАК Участники
	|ГДЕ
	|	Участники.Объект = &Объект
	|	И Участники.Роль = &Роль
	|	И НЕ Участники.Скрытый";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Роль", Роль);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			ПредыдущийИсполнитель = Выборка.Пользователь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредыдущийИсполнитель;

КонецФункции

#КонецОбласти
