///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для формы ФормаОбработки НастройкиПользователя

//для сервера вызывается с удалением
Процедура ОбновитьЗависимыеЭлементыНастроекПользователя(Форма, Знач ИмяТекущегоЭлемента, ИменаИзмененныхРеквизитов = Неопределено) Экспорт
	
	Если Форма.ИмяФормы <> "Обработка.НастройкиПользователя.Форма.ФормаОбработки" Тогда
		Возврат;
	КонецЕсли;
	
	НаправлениеРазработки = Неопределено;
	СистемаУчета = Неопределено;
	Продукт = Неопределено;
	
	Если СтрНачинаетсяС(ИмяТекущегоЭлемента, "Направление") Тогда
		НаправлениеРазработки = Форма[ИмяТекущегоЭлемента];
	ИначеЕсли СтрНачинаетсяС(ИмяТекущегоЭлемента, "СистемаДляЗаполненияЗаявки") Тогда
		СистемаУчета = Форма[ИмяТекущегоЭлемента];
	ИначеЕсли СтрНачинаетсяС(ИмяТекущегоЭлемента, "ПродуктДляЗаполненияЗаявки") Тогда
		Продукт = Форма[ИмяТекущегоЭлемента];
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗависимыеЭлементы = ОпределитьЗависимыеЭлементы(Форма, ИмяТекущегоЭлемента, НаправлениеРазработки, СистемаУчета);
	
	ИзмененКлючевойРеквизит = (ТипЗнч(ИменаИзмененныхРеквизитов) = Тип("Массив"));
	
	Для Каждого КлючИЗначение Из ЗависимыеЭлементы Цикл
		
		Элемент = КлючИЗначение.Значение;
		ИмяЭлемента = Элемент.Имя;
		
		Если КлючИЗначение.Ключ = "ЮрЛицо" Тогда
			
			ДанныеСписка = РаботаСНастройкамиВызовСервера.ПолучитьСписокВыбораЮридическихЛиц(НаправлениеРазработки);
			
			ЗаполнятьСписокВыбора = (ДанныеСписка.Количество() > 0);
			Элемент.Доступность = ЗаполнятьСписокВыбора;
			
			СписокВыбора = Элемент.СписокВыбора;
			СписокВыбора.Очистить();
			
			Если ЗаполнятьСписокВыбора Тогда
				Для Каждого ЭлементСписка Из ДанныеСписка Цикл
					СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
				КонецЦикла;
			КонецЕсли;
			
			Если ИзмененКлючевойРеквизит Тогда
				ВыбранноеЮридическоеЛицо = Форма[ИмяЭлемента];
				НайденныйЭлемент = СписокВыбора.НайтиПоЗначению(ВыбранноеЮридическоеЛицо);
				Если НайденныйЭлемент = Неопределено Тогда
					Форма[ИмяЭлемента] = ПредопределенноеЗначение("Справочник.ЮридическиеЛица.ПустаяСсылка");
					ИменаИзмененныхРеквизитов.Добавить(ИмяЭлемента);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли КлючИЗначение.Ключ = "ВидПроцесса" Тогда
			
			Доступность = (ОбщегоНазначенияВызовСервера.ПолучитьИспользованиеВидовПроцессов(НаправлениеРазработки) = Истина);
			
			Элемент.Доступность = Доступность;
			
			Если ИзмененКлючевойРеквизит И НЕ Доступность Тогда
				Форма[ИмяЭлемента] = ПредопределенноеЗначение("Перечисление.ВидыПроцессов.ПустаяСсылка");
				ИменаИзмененныхРеквизитов.Добавить(ИмяЭлемента);
			КонецЕсли;
			
		ИначеЕсли КлючИЗначение.Ключ = "ГруппаЗаказчиковЗаявки" Тогда
			
			СписокВыбора = Элемент.СписокВыбора;
			СписокВыбора.Очистить();
			
			Если ЗначениеЗаполнено(Продукт) Тогда
				ДанныеСписка = Новый СписокЗначений;
			Иначе
				ДанныеСписка = РаботаСНастройкамиВызовСервера.СписокВыбораГруппЗаказчиков(НаправлениеРазработки, СистемаУчета);
			КонецЕсли;
			
			ЗаполнятьСписокВыбора = (ДанныеСписка.Количество() > 0);
			
			Если ЗаполнятьСписокВыбора Тогда
				Для Каждого ЭлементСписка Из ДанныеСписка Цикл
					СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
				КонецЦикла;
			КонецЕсли;
			
			Если ИзмененКлючевойРеквизит Тогда
				ВыбраннаяГруппаЗаказчиков = Форма[ИмяЭлемента];
				НайденныйЭлемент = СписокВыбора.НайтиПоЗначению(ВыбраннаяГруппаЗаказчиков);
				Если НайденныйЭлемент = Неопределено Тогда
					Форма[ИмяЭлемента] = ПредопределенноеЗначение("Справочник.ГруппыЗаказчиковНаправлений.ПустаяСсылка");
					ИменаИзмененныхРеквизитов.Добавить(ИмяЭлемента);
				КонецЕсли;
			КонецЕсли;
			
			Элемент.Доступность = ЗаполнятьСписокВыбора;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОпределитьЗависимыеЭлементы(Форма, Знач ИмяЭлементаНаправления, НаправлениеРазработки, СистемаУчета)
	
	Результат = Новый Структура;
	
	Элементы = Форма.Элементы;
	
	Идентификатор = ОбщегоНазначенияКлиентСервер.СтрУникальныйИдентификатор(Форма.УникальныйИдентификатор);
	ОкончаниеИмениЭлемента = СтрШаблон("_%1", Идентификатор);
	КлючЗависимости = СтрЗаменить(ИмяЭлементаНаправления, ОкончаниеИмениЭлемента, "");
	
	ЗависимостьЭлементов = Новый Соответствие;
	
	//определяем имя элемента для юр лица
	ЗависимостьЭлементов.Вставить("НаправлениеДляБыстрогоСозданияЗадачи", "ЮрЛицоДляБыстрогоСозданияЗадачи");
	ЗависимостьЭлементов.Вставить("НаправлениеДляЗаполненияВЗ", "ЮрЛицоДляЗаполненияВЗ");
	ЗависимостьЭлементов.Вставить("НаправлениеДляЗаполненияЗаявки", "ЮрЛицоДляЗаполненияЗаявки");
	
	ИмяЭлемента = Строка(ЗависимостьЭлементов[КлючЗависимости]) + ОкончаниеИмениЭлемента;
	
	Элемент = Элементы.Найти(ИмяЭлемента);
	
	Если Элемент <> Неопределено Тогда
		Результат.Вставить("ЮрЛицо", Элемент);
	КонецЕсли;
	
	//определяем имя элемента для вида процесса
	ЗависимостьЭлементов.Очистить();
	
	ЗависимостьЭлементов.Вставить("НаправлениеДляЗаполненияВЗ", "ВидПроцессаДляЗаполненияВЗ");
	ЗависимостьЭлементов.Вставить("НаправлениеДляЗаполненияЗадачи", "ВидПроцессаДляЗаполненияЗадачи");
	ЗависимостьЭлементов.Вставить("НаправлениеДляЗаполненияЗаявки", "ВидПроцессаДляЗаполненияЗаявки");
	
	ИмяЭлемента = Строка(ЗависимостьЭлементов[КлючЗависимости]) + ОкончаниеИмениЭлемента;
	
	Элемент = Элементы.Найти(ИмяЭлемента);
	Если Элемент <> Неопределено Тогда
		Результат.Вставить("ВидПроцесса", Элемент);
	КонецЕсли;
	
	//определяем имя элемента для системы учета
	ЗависимостьЭлементов.Очистить();
	
	ЗависимостьЭлементов.Вставить("НаправлениеДляЗаполненияЗаявки", "ГруппаЗаказчиковДляЗаполненияЗаявки");
	ЗависимостьЭлементов.Вставить("СистемаДляЗаполненияЗаявки", "ГруппаЗаказчиковДляЗаполненияЗаявки");
	ЗависимостьЭлементов.Вставить("ПродуктДляЗаполненияЗаявки", "ГруппаЗаказчиковДляЗаполненияЗаявки");
	
	ИмяЭлемента = Строка(ЗависимостьЭлементов[КлючЗависимости]) + ОкончаниеИмениЭлемента;
	
	Элемент = Элементы.Найти(ИмяЭлемента);
	Если Элемент <> Неопределено Тогда
		Результат.Вставить("ГруппаЗаказчиковЗаявки", Элемент);
		
		Если НаправлениеРазработки = Неопределено Тогда
			ИмяЭлементаНаправления = "НаправлениеДляЗаполненияЗаявки" + ОкончаниеИмениЭлемента;
			Если Элементы.Найти(ИмяЭлементаНаправления) <> Неопределено Тогда
				НаправлениеРазработки = Форма[ИмяЭлементаНаправления];
			КонецЕсли;
		КонецЕсли;
		
		Если СистемаУчета = Неопределено Тогда
			ИмяЭлементаСистемы = "СистемаДляЗаполненияЗаявки" + ОкончаниеИмениЭлемента;
			Если Элементы.Найти(ИмяЭлементаСистемы) <> Неопределено Тогда
				СистемаУчета = Форма[ИмяЭлементаСистемы];
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
