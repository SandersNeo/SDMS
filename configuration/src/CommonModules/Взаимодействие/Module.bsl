///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Вывод сообщения о внесении трудозатрат в систему взаимодействия
//
// Параметры:
//  ТаблицаПользователи	 - ТаблицаЗначений	 - Таблица с сообщениями в разрезе пользователей
//  	* Пользователь - СправочникСсылка.Пользователи	 - Пользователь
//  	* Текст	 - Строка - Текст сообщения о внесении трудозатрат
//
Процедура ВыводСообщенияОВнесенииТрудозатрат(ТаблицаПользователи) Экспорт
		
	Если НЕ СистемаВзаимодействия.ИспользованиеДоступно() Тогда
		Возврат;
	КонецЕсли;
		
	ИдентификаторыИТекстОповещения = ПолучитьИдентификаторы(ТаблицаПользователи);
	
	Если ИдентификаторыИТекстОповещения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторБота = Взаимодействие.ПолучитьИдентификаторБота(Справочники.НазначенияОбсуждений.УведомленияSDMS);
	
	Данные = Новый Структура;
	ДействияСообщения = Новый Массив;
	
	Для Каждого Элемент Из ИдентификаторыИТекстОповещения Цикл
		ИдентификаторОбсуждения = Новый ИдентификаторОбсужденияСистемыВзаимодействия(Элемент.Обсуждение);
		Сообщение = ДобавитьСообщение(ИдентификаторОбсуждения, ДействияСообщения, ИдентификаторБота, Данные, Элемент.Текст);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьСообщенияОповещения(Знач Ссылка, Знач Автор, ТаблицаПользователи) Экспорт
	
	Если НЕ СистемаВзаимодействия.ИспользованиеДоступно() Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыИТекстОповещения = ПолучитьИдентификаторы(ТаблицаПользователи);
	
	Если ИдентификаторыИТекстОповещения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторБота = Взаимодействие.ПолучитьИдентификаторБота(Справочники.НазначенияОбсуждений.УведомленияSDMS);
	
	ИмяФормы = СтрШаблон("%1.ФормаОбъекта", Ссылка.Метаданные().ПолноеИмя());
	
	Данные = Новый Структура;
	Данные.Вставить("Ссылка", Ссылка);
	Данные.Вставить("ИмяФормы", ИмяФормы);
	
	Для Каждого Элемент Из ИдентификаторыИТекстОповещения Цикл
		ТекстСообщения = СформироватьУведомлениеСобытия(Ссылка, Автор, Элемент.Данные, Элемент.ДатаСобытия, Элемент.Текст);
		
		ИдентификаторОбсуждения = Новый ИдентификаторОбсужденияСистемыВзаимодействия(Элемент.Обсуждение);
		Сообщение = ДобавитьСообщение(ИдентификаторОбсуждения, Элемент.Действия, ИдентификаторБота, Данные, ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьСообщенияСВ(Знач ИдентификаторИБ, Знач Обсуждение, ТекстСообщения) Экспорт
		
	Если НЕ СистемаВзаимодействия.ИспользованиеДоступно() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ИдентификаторПользователя = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ИдентификаторИБ);
	Исключение
		Возврат;
	КонецПопытки;
	
	ИдентификаторБота = ПолучитьИдентификаторБота(Справочники.НазначенияОбсуждений.УведомленияSDMS);
	
	ИдентификаторОбсуждения = Новый ИдентификаторОбсужденияСистемыВзаимодействия(Обсуждение);
	ДействияСообщения = Новый Массив;
	Данные = Новый Структура;
	
	Сообщение = ДобавитьСообщение(ИдентификаторОбсуждения, ДействияСообщения, ИдентификаторБота, Данные, ТекстСообщения);

КонецПроцедуры

Процедура ДобавлениеКомментария(Знач Ссылка, Знач Отправитель, Знач Текст, Знач ИдентификаторКомментария, Знач Дата, Знач Общедоступный) Экспорт
	
	Если НЕ СистемаВзаимодействия.ИспользованиеДоступно() Тогда
		Возврат;
	КонецЕсли;
	
	Идентификаторы = ПолучитьИдентификаторыДляОповещения(Ссылка, Отправитель, Общедоступный);
	
	Если Идентификаторы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = СформироватьУведомлениеКомментарий(Ссылка, Отправитель, Текст, Дата, " добавил(-а) комментарий: ");
	
	ДействияСообщения = Новый Массив;
	ДействияСообщения.Добавить(ВзаимодействиеКлиентСервер.ДанныеДействияОткрытьКомментарий());
	
	ИдентификаторБота = ПолучитьИдентификаторБота(Справочники.НазначенияОбсуждений.УведомленияSDMS);
	ИмяФормы = СтрШаблон("%1.ФормаОбъекта", Ссылка.Метаданные().ПолноеИмя());
	
	Данные = Новый Структура;
	Данные.Вставить("Ссылка", Ссылка);
	Данные.Вставить("ИмяФормы", ИмяФормы);
	Данные.Вставить("ИдентификаторКомментария", ИдентификаторКомментария);
	
	НаборЗаписей = РегистрыСведений.ИдентификаторыСообщений.СоздатьНаборЗаписей();
	
	Для Каждого Элемент Из Идентификаторы Цикл
		ИдентификаторОбсуждения = Новый ИдентификаторОбсужденияСистемыВзаимодействия(Элемент.Обсуждение);
		
		Сообщение = ДобавитьСообщение(ИдентификаторОбсуждения, ДействияСообщения, ИдентификаторБота, Данные, ТекстСообщения);
		ИдентификаторСообщения = Строка(Сообщение.Идентификатор);
		
		Запись = НаборЗаписей.Добавить();
		Запись.ИдентификаторСообщения = ИдентификаторСообщения;
		Запись.ИдентификаторКомментария = ИдентификаторКомментария;
		Запись.ИдентификаторОбсуждения = Элемент.Обсуждение;
	КонецЦикла;
	
	НаборЗаписей.Записать(Ложь);
	
КонецПроцедуры

// Изменение аватара пользователя
//
// Параметры:
//  ДанныеКартинки	 - ДвоичныеДанные	 - Данные картинки
//
Процедура ИзменениеАватараПользователя(Знач ДанныеКартинки = Неопределено) Экспорт
	
	Если НЕ СистемаВзаимодействия.ИспользованиеДоступно() Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = СистемаВзаимодействия.ИдентификаторТекущегоПользователя();
	Пользователь = СистемаВзаимодействия.ПолучитьПользователя(Идентификатор);     
	Пользователь.Картинка = Новый Картинка(ДанныеКартинки);
	Пользователь.Записать(); 
	
КонецПроцедуры

Процедура ИзменениеКомментария(Знач Ссылка, Знач Отправитель, Знач Текст, Знач ИдентификаторКомментария, Знач Дата) Экспорт
	
	Если НЕ СистемаВзаимодействия.ИспользованиеДоступно() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИдентификаторыСообщений.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	ИдентификаторыСообщений.ИдентификаторОбсуждения КАК ИдентификаторОбсуждения
	|ИЗ
	|	РегистрСведений.ИдентификаторыСообщений КАК ИдентификаторыСообщений
	|ГДЕ
	|	ИдентификаторыСообщений.ИдентификаторКомментария = &ИдентификаторКомментария";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИдентификаторКомментария", ИдентификаторКомментария);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ИдентификаторБота = ПолучитьИдентификаторБота(Справочники.НазначенияОбсуждений.УведомленияSDMS);
		ТекстСообщения = СформироватьУведомлениеКомментарий(Ссылка, Отправитель, Текст, Дата, " изменил(-а) комментарий: ");
		НаборЗаписей = РегистрыСведений.ИдентификаторыСообщений.СоздатьНаборЗаписей();
		
		ДействияСообщения = Новый Массив;
		ДействияСообщения.Добавить(ВзаимодействиеКлиентСервер.ДанныеДействияОткрытьКомментарий());
		
		ИмяФормы = СтрШаблон("%1.ФормаОбъекта", Ссылка.Метаданные().ПолноеИмя());
		
		Данные = Новый Структура;
		Данные.Вставить("Ссылка", Ссылка);
		Данные.Вставить("ИмяФормы", ИмяФормы);
		Данные.Вставить("ИдентификаторКомментария", ИдентификаторКомментария);
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ИдентификаторСообщения = Новый ИдентификаторСообщенияСистемыВзаимодействия(Выборка.ИдентификаторСообщения);
			ИдентификаторОбсуждения = Новый ИдентификаторОбсужденияСистемыВзаимодействия(Выборка.ИдентификаторОбсуждения);
			
			УдалитьСообщение(ИдентификаторСообщения);
			
			НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(Выборка.ИдентификаторСообщения);
			НаборЗаписей.Записать();
			
			НовоеСообщение = ДобавитьСообщение(ИдентификаторОбсуждения, ДействияСообщения, ИдентификаторБота, Данные, ТекстСообщения);
			
			ИдентификаторНовогоСообщения = Строка(НовоеСообщение.Идентификатор);
			НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(ИдентификаторНовогоСообщения);
			
			Запись = НаборЗаписей.Добавить();
			Запись.ИдентификаторСообщения = ИдентификаторНовогоСообщения;
			Запись.ИдентификаторКомментария = ИдентификаторКомментария;
			Запись.ИдентификаторОбсуждения = Выборка.ИдентификаторОбсуждения;
			
			НаборЗаписей.Записать();
			НаборЗаписей.Очистить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалениеКомментария(ИдентификаторКомментария) Экспорт
	
	Если НЕ СистемаВзаимодействия.ИспользованиеДоступно() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИдентификаторыСообщений.ИдентификаторСообщения КАК ИдентификаторСообщения
	|ИЗ
	|	РегистрСведений.ИдентификаторыСообщений КАК ИдентификаторыСообщений
	|ГДЕ
	|	ИдентификаторыСообщений.ИдентификаторКомментария = &ИдентификаторКомментария";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИдентификаторКомментария", ИдентификаторКомментария);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		НаборЗаписей = РегистрыСведений.ИдентификаторыСообщений.СоздатьНаборЗаписей();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ИдентификаторСообщения = Новый ИдентификаторСообщенияСистемыВзаимодействия(Выборка.ИдентификаторСообщения);
			УдалитьСообщение(ИдентификаторСообщения);
			
			НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(Выборка.ИдентификаторСообщения);
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключитьОбсуждение(Знач Назначение) Экспорт
	
	Если НЕ СистемаВзаимодействия.ИспользованиеДоступно() Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОбсуждения = ПолучитьИдентификаторОбсуждения(Назначение);
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторОбсуждения) Тогда
		ИдентификаторБота = ПолучитьИдентификаторБота(Назначение);
		ИдентификаторТекущегоПользователя = СистемаВзаимодействия.ИдентификаторТекущегоПользователя();
		
		Обсуждение = СистемаВзаимодействия.СоздатьОбсуждение();
		Обсуждение.Групповое = Ложь;
		
		Обсуждение.Участники.Добавить(ИдентификаторТекущегоПользователя);
		Обсуждение.Участники.Добавить(ИдентификаторБота);
		
		Обсуждение.Записать();
		
		РегистрыСведений.ОбсужденияПользователей.ДобавитьЗапись(Назначение, Обсуждение.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьПользователя(Пользователь, ИдентификаторПользователяИБ, Почта) Экспорт
	
	Если НЕ СистемаВзаимодействия.ИспользованиеДоступно() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
	УстановитьПривилегированныйРежим(Ложь);
	
	Назначение = Справочники.НазначенияОбсуждений.УведомленияSDMS;
	ИдентификаторБота = Взаимодействие.ПолучитьИдентификаторБота(Назначение);
	
	НаборЗаписей = РегистрыСведений.ОбсужденияПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Назначение.Установить(Назначение);
	
	УстановитьПривилегированныйРежим(Истина);
	НовыйПользователь = СистемаВзаимодействия.СоздатьПользователя(ПользовательИБ);
	НовыйПользователь.АдресЭлектроннойПочты = СокрЛП(Почта);
	НовыйПользователь.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Обсуждение = СистемаВзаимодействия.СоздатьОбсуждение();
	Обсуждение.Групповое = Ложь;
	
	Обсуждение.Участники.Добавить(НовыйПользователь.Идентификатор);
	Обсуждение.Участники.Добавить(ИдентификаторБота);
	
	УстановитьПривилегированныйРежим(Истина);
	Обсуждение.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Пользователь = Пользователь;
	НоваяЗапись.Назначение = Назначение;
	НоваяЗапись.Идентификатор = Строка(Обсуждение.Идентификатор);
	
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДействияПоКатегориямСообщений()
	
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("Категория", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииСообщенийПользователя"));
	Данные.Колонки.Добавить("Действие", Новый ОписаниеТипов("Строка"));
	
	НоваяСтрока = Данные.Добавить();
	НоваяСтрока.Категория = Перечисления.КатегорииСообщенийПользователя.АвтоматическоеЗакрытиеЗадач;
	НоваяСтрока.Действие = ВзаимодействиеКлиентСервер.ДействиеОткрытьКомментарииОбъекта();
	
	Возврат Данные;
	
КонецФункции

Функция ДобавитьСообщение(ИдентификаторОбсуждения, Действия, ИдентификаторБота, Данные, ТекстСообщения)
	
	Сообщение = СистемаВзаимодействия.СоздатьСообщение(ИдентификаторОбсуждения);
	Сообщение.Автор = ИдентификаторБота;
	Сообщение.Текст = ТекстСообщения;

	Если Данные.Количество() > 0 Тогда
		Сообщение.Данные = Данные;    
	КонецЕсли;
	
	Для Каждого Действие Из Действия Цикл
		Сообщение.Действия.Добавить(Действие.Действие, Действие.Текст, Действие.Картинка);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Сообщение.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Сообщение;
	
КонецФункции

Процедура УдалитьСообщение(ИдентификаторСообщения)
	
	УстановитьПривилегированныйРежим(Истина);
	СистемаВзаимодействия.УдалитьСообщение(ИдентификаторСообщения);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПолучитьИдентификаторБота(Знач Назначение) Экспорт
	
	ИдентификаторНазначения = Строка(Назначение.УникальныйИдентификатор());
	ИдентификаторБота = Новый ИдентификаторПользователяСистемыВзаимодействия(ИдентификаторНазначения);
	
	Возврат ИдентификаторБота;
	
КонецФункции

Функция ПолучитьИдентификаторОбсуждения(Знач Назначение)
	
	Результат = Неопределено;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОбсужденияПользователей.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.ОбсужденияПользователей КАК ОбсужденияПользователей
	|ГДЕ
	|	ОбсужденияПользователей.Пользователь = &Пользователь
	|	И ОбсужденияПользователей.Назначение = &Назначение";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Назначение", Назначение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Новый ИдентификаторОбсужденияСистемыВзаимодействия(Выборка.Идентификатор);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИдентификаторыДляОповещения(Знач Ссылка = Неопределено, Знач Отправитель, Знач ОбщедоступныйКомментарий = Ложь)
	
	РезультатЗапроса = РегистрыСведений.Участники.ПолучателиОповещения(Ссылка, Истина, Отправитель);
	
	Если НЕ ОбщедоступныйКомментарий Тогда
		ОбщегоНазначения.ОтфильтроватьРезультатЗапросаПолучателей(РезультатЗапроса, Отправитель);
	КонецЕсли;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ТаблицаУчастников = РезультатЗапроса.Выгрузить();
	ТаблицаУчастников.Колонки.Добавить("Текст", Новый ОписаниеТипов("Строка"));
	ТаблицаУчастников.Колонки.Добавить("Данные", Новый ОписаниеТипов("Строка"));
	ТаблицаУчастников.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ТаблицаУчастников.Колонки.Добавить("КатегорияОповещения", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииСообщенийПользователя"));
	
	Возврат ПолучитьИдентификаторы(ТаблицаУчастников);
	
КонецФункции

Функция ПолучитьИдентификаторы(ТаблицаУчастников)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДействияСообщения.Категория КАК Категория,
	|	ДействияСообщения.Действие КАК Действие
	|ПОМЕСТИТЬ ДействияСообщения
	|ИЗ
	|	&ДействияСообщения КАК ДействияСообщения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Участники.Пользователь КАК Пользователь,
	|	Участники.Текст КАК Текст,
	|	Участники.КатегорияОповещения КАК Категория,
	|	Участники.Данные КАК Данные,
	|	Участники.ДатаСобытия КАК ДатаСобытия
	|ПОМЕСТИТЬ Участники
	|ИЗ
	|	&Участники КАК Участники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Участники.Пользователь КАК Пользователь,
	|	ЕСТЬNULL(ДействияСообщения.Действие, """") КАК Действие,
	|	ОбсужденияПользователей.Идентификатор КАК ИдентификаторОбсуждения,
	|	Участники.Текст КАК Текст,
	|	Участники.Данные КАК Данные,
	|	Участники.ДатаСобытия КАК ДатаСобытия,
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторИБ
	|ИЗ
	|	Участники КАК Участники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбсужденияПользователей КАК ОбсужденияПользователей
	|		ПО Участники.Пользователь = ОбсужденияПользователей.Пользователь
	|			И (ОбсужденияПользователей.Назначение = ЗНАЧЕНИЕ(Справочник.НазначенияОбсуждений.УведомленияSDMS))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО Участники.Пользователь = Пользователи.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДействияСообщения КАК ДействияСообщения
	|		ПО Участники.Категория = ДействияСообщения.Категория
	|ИТОГИ
	|	МИНИМУМ(Действие),
	|	МИНИМУМ(ИдентификаторОбсуждения),
	|	МИНИМУМ(Текст),
	|	МИНИМУМ(ДатаСобытия),
	|	МИНИМУМ(ИдентификаторИБ)
	|ПО
	|	Пользователь,
	|	ВЫРАЗИТЬ(ДействияСообщения.Действие КАК СТРОКА(250))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	КопияТаблицы = ТаблицаУчастников.Скопировать();
	ДействияСообщения = ДействияПоКатегориямСообщений();

	Запрос.УстановитьПараметр("Участники", КопияТаблицы);
	Запрос.УстановитьПараметр("ДействияСообщения", ДействияСообщения);
	
	ВыборкаПользователи = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Идентификаторы = Новый Массив;

	Пока ВыборкаПользователи.Следующий() Цикл
		
		ВыборкаДействие = ВыборкаПользователи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаДействие.Следующий() Цикл
			
			Попытка
				ИдентификаторПользователя = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ВыборкаДействие.ИдентификаторИБ);
			Исключение
				Продолжить;
			КонецПопытки;
			
			Действия = Новый Массив;
			Если ВзаимодействиеКлиентСервер.ЭтоДействиеОткрытьКомментарии(ВыборкаДействие.Действие) Тогда
				Действия.Добавить(ВзаимодействиеКлиентСервер.ДанныеДействияОткрытьКомментарий());
			КонецЕсли;
			
			МассивДанных = Новый Массив;
			
			Выборка = ВыборкаДействие.Выбрать();
			Пока Выборка.Следующий() Цикл
				МассивДанных.Добавить(Выборка.Данные);
			КонецЦикла;
			
			Данные = Новый Структура("Пользователь, Обсуждение, Текст, ДатаСобытия, Данные, Действия", 
				ИдентификаторПользователя, ВыборкаДействие.ИдентификаторОбсуждения, ВыборкаДействие.Текст, ВыборкаДействие.ДатаСобытия, МассивДанных, Действия);
			
			Идентификаторы.Добавить(Данные);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Идентификаторы;
	
КонецФункции

Функция СформироватьУведомлениеКомментарий(Объект, Отправитель, Текст, Дата, ОписаниеСобытия)
	
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Объект);
	
	ШрифтBold = Новый Шрифт( , , Истина);
	ШрифтItalic = Новый Шрифт( , , , Истина);
	
	Текст = СтрЗаменить(Текст, "<br>", Символы.ПС);
	
	ЧастиТекста = Новый Массив;
	
	ЧастиТекста.Добавить(Новый ФорматированнаяСтрока(Строка(Объект), ШрифтBold, , , НавигационнаяСсылка));
	ЧастиТекста.Добавить(Символы.ПС);
	ЧастиТекста.Добавить(Символы.ПС);
	ЧастиТекста.Добавить(Формат(Дата, "ДФ='dd.MM.yyyy HH:mm'"));
	ЧастиТекста.Добавить(" ");
	ЧастиТекста.Добавить(Новый ФорматированнаяСтрока(Строка(Отправитель), ШрифтBold));
	ЧастиТекста.Добавить(ОписаниеСобытия);
	ЧастиТекста.Добавить(Символы.ПС);
	ЧастиТекста.Добавить(Новый ФорматированнаяСтрока(Текст, ШрифтItalic));
	
	ТекстСообщения = Новый ФорматированнаяСтрока(ЧастиТекста);
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция СформироватьУведомлениеСобытия(Объект, Отправитель, ДанныеСообщения, Дата, ОписаниеСобытия) Экспорт
	
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Объект);
	
	ШрифтBold = Новый Шрифт( , , Истина);
	ШрифтItalic = Новый Шрифт( , , , Истина);
	
	ЧастиТекста = Новый Массив;
	
	ЧастиТекста.Добавить(Новый ФорматированнаяСтрока(Строка(Объект), ШрифтBold, , , НавигационнаяСсылка));
	ЧастиТекста.Добавить(Символы.ПС);
	ЧастиТекста.Добавить(Символы.ПС);
	ЧастиТекста.Добавить(Формат(Дата, "ДФ='dd.MM.yyyy HH:mm'"));
	ЧастиТекста.Добавить(" ");
	ЧастиТекста.Добавить(Новый ФорматированнаяСтрока(Строка(Отправитель), ШрифтBold));
	ЧастиТекста.Добавить(ОписаниеСобытия);
	
	Для Каждого Данные Из ДанныеСообщения Цикл
		Если НЕ ЗначениеЗаполнено(Данные) Тогда
			Продолжить;
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Данные);
		ДанныеСтруктура = ПрочитатьJSON(ЧтениеJSON);
		
		ЧастиТекста.Добавить(Символы.ПС);
		
		Если ДанныеСтруктура.Событие = "ИзменениеСтатусаПоСистеме" Тогда
			ЧастиТекста.Добавить("Установлен статус по системе ");
			ЧастиТекста.Добавить(Новый ФорматированнаяСтрока(ДанныеСтруктура.Система, ШрифтBold)); 
			ЧастиТекста.Добавить(": ");
			ЧастиТекста.Добавить(ДанныеСтруктура.Статус);
			
		ИначеЕсли ДанныеСтруктура.Событие = "ИзменениеНазначенногоПоСистеме" Тогда
			
			Если ДанныеСтруктура.Добавлен Тогда
				ЧастиТекста.Добавить("Заявка по системе ");
				ЧастиТекста.Добавить(Новый ФорматированнаяСтрока(ДанныеСтруктура.Система, ШрифтBold));
				ЧастиТекста.Добавить(" назначена на ");
				ЧастиТекста.Добавить(ДанныеСтруктура.Назначенный);
			Иначе 
				ЧастиТекста.Добавить("По системе ");
				ЧастиТекста.Добавить(Новый ФорматированнаяСтрока(ДанныеСтруктура.Система, ШрифтBold));
				ЧастиТекста.Добавить(" был удален назначенный ");
				ЧастиТекста.Добавить(ДанныеСтруктура.Назначенный);	
			КонецЕсли;
			
		ИначеЕсли ДанныеСтруктура.Событие = "АвтоматическоеЗакрытиеЗадач" Тогда
			
			ЧастиТекста.Добавить(Новый ФорматированнаяСтрока(ДанныеСтруктура.ТекстКомментария, ШрифтItalic));
			
		Иначе
			Реквизит = "";
			СтароеЗначение = "";
			НовоеЗначение = ""; 
			
			Если ДанныеСтруктура.Свойство("Реквизит") Тогда
				Реквизит = ДанныеСтруктура.Реквизит;
			КонецЕсли;
			
			Если ДанныеСтруктура.Свойство("СтароеЗначение") Тогда
				СтароеЗначение = ДанныеСтруктура.СтароеЗначение;
			КонецЕсли;
			
			Если ДанныеСтруктура.Свойство("НовоеЗначение") Тогда
				НовоеЗначение = ДанныеСтруктура.НовоеЗначение;
			КонецЕсли; 
			
			ЧастиТекста.Добавить(Новый ФорматированнаяСтрока(Реквизит, ШрифтBold));
			ЧастиТекста.Добавить(": ");
			ЧастиТекста.Добавить(Новый ФорматированнаяСтрока(СтароеЗначение, , ЦветаСтиля.ЦветТекстаНеиспользуемогоЭлемента));
			
			Если ЗначениеЗаполнено(СтароеЗначение) И ЗначениеЗаполнено(НовоеЗначение) Тогда
				ЧастиТекста.Добавить(" → ");
			КонецЕсли;
			
			ЧастиТекста.Добавить(НовоеЗначение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстСообщения = Новый ФорматированнаяСтрока(ЧастиТекста);
	
	Возврат ТекстСообщения;
	
КонецФункции

#КонецОбласти

#КонецЕсли
