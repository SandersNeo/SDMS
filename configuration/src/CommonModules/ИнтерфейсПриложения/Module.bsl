///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

Функция ПолучитьДанныеСтилейПодсказок() Экспорт
	
	Данные = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыОбъектов.Наименование КАК Наименование,
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексКартинки
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтатусыОбъектов.Наименование,
	|	СтатусыОбъектов.ИндексЗафиксирован
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|ГДЕ
	|	СтатусыОбъектов.ИндексЗафиксирован <> 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтатусыОбъектов.Наименование,
	|	СтатусыОбъектов.ИндексЗафиксирован
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|ГДЕ
	|	СтатусыОбъектов.Ссылка = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Черновик"",
	|	&ИндексЧерновика
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИндексКартинки";
	
	Запрос.УстановитьПараметр("ИндексЧерновика", Справочники.СтатусыОбъектов.ИндексКартинкиЧерновик());
	
	ШаблонСвойстваПодсказки = "[style ^= ""background-image: url(e1cib/pictureCollection/picture/0_15e55347-cc69-49ee-8914-27669a7f8881?""][style $= ""gx=%1&scale=100&interfaceVar=16&fg=333333&rtl=false);""]";
	
	ШаблонЗначенияПодсказки =
	"content: ""%1""; display: none; position: fixed; text-align: center; background-color: #FFFBEB; border: 1px solid #F0D56F; border-image: initial; border-radius: 8px; font-family: ""Almarai"", Arial, sans-serif; font-size: 10pt; color: #D39802";
	
	СкриптПодсказокСтатусов = "";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СвойстваПодсказки = СтрШаблон(ШаблонСвойстваПодсказки, Формат(Выборка.ИндексКартинки, "ЧН="));   
		ЗначенияПодсказки = СтрШаблон(ШаблонЗначенияПодсказки, Выборка.Наименование); 
		Данные.Добавить(СтрШаблон("%1::after {%2}", СвойстваПодсказки, ЗначенияПодсказки));
	КонецЦикла; 
	
	Данные.Добавить("[style ^= ""background-image: url(e1cib/pictureCollection/picture/0_15e55347-cc69-49ee-8914-27669a7f8881?""]:hover::after {display: table-cell; vertical-align: middle; padding: 2px 5px;}");
	
	Шаблоны = Новый Соответствие;
	Шаблоны.Вставить("Ошибка: Блокирующая", "[style ^= ""background-image: url(e1cib/pictureCollection/picture/0_81a22061-1b2b-43f7-bc26-70dd3c7fe7a5?""]"); 
	Шаблоны.Вставить("Ошибка: Критическая", "[style ^= ""background-image: url(e1cib/pictureCollection/picture/0_52e0d6e0-a423-4254-baa5-000357b00f81?""]");
	Шаблоны.Вставить("Ошибка: Средняя", "[style ^= ""background-image: url(e1cib/pictureCollection/picture/0_d5725dc3-0996-4145-bc22-dd733dd94c5a?""]");
	Шаблоны.Вставить("Ошибка: Низкая", "[style ^= ""background-image: url(e1cib/pictureCollection/picture/0_e6a9f108-0d12-4911-bbb0-1598c52e2600?""]");
	Шаблоны.Вставить("Новая задача", "[style ^= ""background-image: url(e1cib/pictureCollection/picture/0_7c3c435f-ba90-4ccc-8817-cad501c39156?""]");
	Шаблоны.Вставить("Улучшение", "[style ^= ""background-image: url(e1cib/pictureCollection/picture/0_fb38e75c-b1cc-47a3-ba29-80bd61b12013?""]");
	Шаблоны.Вставить("Улучшение Junior", "[style ^= ""background-image: url(e1cib/pictureCollection/picture/0_f38c78fd-87d9-4d13-b5df-08b411ac4258?""]");
	Шаблоны.Вставить("Исследование", "[style ^= ""background-image: url(e1cib/pictureCollection/picture/0_592398aa-9a47-485e-ad32-089344a1ff12?""]");
	Шаблоны.Вставить("Техническая задача", "[style ^= ""background-image: url(e1cib/pictureCollection/picture/0_baa25559-4f6c-4cb9-a796-24c09fca76ea?""]");
	Шаблоны.Вставить("Консультация", "[style ^= ""background-image: url(e1cib/pictureCollection/picture/0_42adee6c-5e7a-4eed-b9cf-f0c2792c97ab?""]");
	
	Для Каждого Строка Из Шаблоны Цикл
		СвойстваПодсказки = Строка.Значение;   
		ЗначенияПодсказки = СтрШаблон(ШаблонЗначенияПодсказки, Строка.Ключ); 
		Данные.Добавить(СтрШаблон("%1::after {%2}", СвойстваПодсказки, ЗначенияПодсказки));
		Данные.Добавить(СтрШаблон("%1:hover::after {display: table-cell; vertical-align: middle; padding: 2px 5px;}", Строка.Значение));
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

// Формирует заголовок окна объекта по переданным параметрам.
//
// Параметры:
//  ВидПроекта - СправочникСсылка.ВидыПроектов - вид проекта-основания.
//  Заголовок  - Строка - заголовок формы объекта.
//
Процедура СформироватьЗаголовокОкнаОбъекта(Знач ВидПроекта, Заголовок) Экспорт
	
	Если СтрНачинаетсяС(Заголовок, "[") Тогда
		Заголовок = СтрЗаменить(Заголовок, Лев(Заголовок, СтрНайти(Заголовок, "]") + 1), "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидПроекта) Тогда
		Если ВидПроекта = Справочники.ВидыПроектов.Проект Тогда
			Префикс = "Обычный";
		Иначе
			Префикс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПроекта, "ИмяПредопределенныхДанных");
		КонецЕсли;
		
		Заголовок = СтрШаблон("[%1] %2", ВРег(Префикс), Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Изменяет режим выделения таблицы по переданным параметрам
//
// Параметры:
//  МножественныйВыбор - Булево, Неопределено - значение параметра формы МножественныйВыбор
//  Элемент            - РежимВыделенияТаблицы - таблица на форме
//
Процедура УстановитьРежимВыделенияСтрокТаблицы(Знач МножественныйВыбор, Элемент) Экспорт
	
	Если МножественныйВыбор = Ложь Тогда
		Элемент.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
	Иначе
		Элемент.РежимВыделения = РежимВыделенияТаблицы.Множественный;
	КонецЕсли;	
		
КонецПроцедуры	

// Функция заполняет соответсвие группы заказчиков по направлениям и системам
//
// Возвращаемое значение:
// ГруппыЗаказчиков - Соответствие - содержит все группы заказчиков по направлениям и системам
Функция ПолучитьСписокГруппЗаказчиков() Экспорт
	
	ТаблицаГруппЗаказчиков = Справочники.ГруппыЗаказчиковНаправлений.ПолучитьГруппыЗаказчиков();
	ГруппыЗаказчиков = Новый Соответствие;
	
	Для Каждого Строка Из ТаблицаГруппЗаказчиков Цикл
		ЭлементНаправление = ГруппыЗаказчиков.Получить(Строка.Направление);
		
		Если ЭлементНаправление = Неопределено Тогда
			ЭлементНаправление = Новый Соответствие;
			ЭлементСистема = Новый Массив;
		Иначе
			ЭлементСистема = ЭлементНаправление.Получить(Строка.Система);
			
			Если ЭлементСистема = Неопределено Тогда
				ЭлементСистема = Новый Массив;
			КонецЕсли;
		КонецЕсли;
		
		ЭлементСистема.Добавить(Строка.ГруппаЗаказчиков);
		
		ЭлементНаправление.Вставить(Строка.Система, ЭлементСистема);
		ГруппыЗаказчиков.Вставить(Строка.Направление, ЭлементНаправление);
	КонецЦикла;
	
	Возврат ГруппыЗаказчиков;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерфейс рабочих столов

// Формирует заголовок гиперссылки открытия отчета Задачи на тестирование
//
// Возвращаемое значение:
//   Строка - заголовок для гиперссылки 
//
Функция ЗаголовокЗадачиНаТестирование() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Документ.Задача КАК ДокументЗадача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ДокументЗадача.Статус = СтатусыОбъектов.Ссылка
	|ГДЕ
	|	НЕ ДокументЗадача.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА ДокументЗадача.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Тестирование)
	|					ИЛИ СтатусыОбъектов.Родитель = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Тестирование)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И ДокументЗадача.Назначена = &Назначена";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Назначена", ПараметрыСеанса.ТекущийПользователь);			
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если Выборка.Количество = 0 Тогда
		Заголовок = "Задачи на тестирование";
	Иначе
		Заголовок = СтрШаблон("Задачи на тестирование (%1)", Выборка.Количество);
	КонецЕсли;
	
	Возврат Заголовок;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для НастройкиКолонок

////////////////////////////////////////////////////////////////////////////////
// ОбновитьПорядокКолонокНаСервере() - процедура обновляет порядок колонок 
// Параметры:
// Порядок              - Структура     - Хранит обновленный порядок колнок таблицы из настройки
// Элементы             - ЭлементыФормы - Проверка на изменения порядка колонок таблицы
// ТаблицаЭлемента      - ТаблицаФормы  - Таблица для измения колонок
// УчитыватьИерархию    - Булево  - Признак обработки родителя текущего элемента
//
Процедура ОбновитьПорядокКолонокНаСервере(Знач Порядок, Элементы, ТаблицаЭлемента, УчитыватьИерархию = Ложь) Экспорт
	
	СледующийПоПорядку = Неопределено;
	МаксимальныйИндексКолонки = Порядок.Количество();
	
	Для ПорядковыйНомер = 0 По МаксимальныйИндексКолонки - 1 Цикл
		ЭлементСоответствия = Порядок.Получить(МаксимальныйИндексКолонки - ПорядковыйНомер);
		
		Если ЭлементСоответствия <> Неопределено Тогда                 
			// Элемент могли переименовать или удалить, а в сохраненных настройках он остается
			ВыбранныйЭлемент = Элементы.Найти(ЭлементСоответствия.Поле);
			
			Если УчитыватьИерархию Тогда 
				ВыбранныйЭлемент = ПолучитьВысшийЭлемент(ВыбранныйЭлемент); 
			КонецЕсли;
		
			Если ВыбранныйЭлемент <> Неопределено Тогда 
				Элементы.Переместить(ВыбранныйЭлемент, ТаблицаЭлемента, СледующийПоПорядку);
				СледующийПоПорядку = ВыбранныйЭлемент;      
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс вспомогательных окон

// Устанавливает условное оформление для вспомогательных окон подбора значений.
// Например:
//  - Справочник.СистемыУчета.Форма.МножественныйВыбор
//  - Документ.ЗаявкаНаРазработку.Форма.ВыборНазначенного
//
// Параметры:
//  Форма          - УправляемаяФорма - форма, которой необходимо установить условное оформление.
//  ПолеОтбора     - Строка - имя поля, по которому будет выполняться отбор.
//  ПолеОформления - Строка - имя поля, которому будет устанавливаться условное оформление.
//
Процедура УстановитьУсловноеОформлениеСпискаДоступныхЗначений(Форма, ПолеОтбора, ПолеОформления) Экспорт
	
	// Создание условного оформления: если у строки из доступных значений установлен признак Избранное = Истина,
	// тогда необходимо установить для поля шрифт стиля ЖирныйТекстВспомогательныхДанных.
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	// Установка условия
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПолеОтбора);
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование  = Истина;
	
	// Установка условного оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйТекстВспомогательныхДанных);
	
	// Задание оформляемых полей
	ОформлениеПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ОформлениеПоля.Поле = Новый ПолеКомпоновкиДанных(ПолеОформления);
	ОформлениеПоля.Использование = Истина;
	
КонецПроцедуры

#КонецОбласти    

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьВысшийЭлемент(Элемент) 
	
	Результат = Неопределено;
	
	Если ТипЗнч(Элемент.Родитель) = Тип("ГруппаФормы") Тогда  
		Результат = ПолучитьВысшийЭлемент(Элемент.Родитель);		
	Иначе 
		Результат = Элемент;
	КонецЕсли; 	   
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
