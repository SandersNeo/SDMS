///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Проверяет, виден ли текущий раздел настроек. Если нет, то переключатеся на первый видимый раздел.
//
// Параметры:
//  Форма	 - УправляемаяФорма	 - форма настроек филиалов
//
Процедура АктуализироватьТекущийВыбранныйРаздел(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	ДеревоРазделов = Форма.ДеревоРазделов;
	
	ТекущиеДанные = Элементы.ДеревоРазделов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если НЕ ТекущиеДанные.Отображать Тогда
			Для Каждого Раздел Из ДеревоРазделов.ПолучитьЭлементы() Цикл
				Если Раздел.Отображать Тогда
					Элементы.ДеревоРазделов.ТекущаяСтрока = Раздел.ПолучитьИдентификатор();
					НайденнаяСтраница = Элементы.Найти(Раздел.Идентификатор);
					Элементы.ГруппаСтраницыНастроек.ТекущаяСтраница = НайденнаяСтраница;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Имя события для обработки оповещения
// 
// Возвращаемое значение:
//  Строка - имя события
//
Функция ИмяСобытияОповещения() Экспорт
	
	Возврат "Обработка.УправлениеНастройками.Форма.НастройкиФилиала";
	
КонецФункции

// Настраивает доступность подчиненных элементов согласно значению основной настройки
//
// Параметры:
//  Форма	 - УправляемаяФорма	 - форма настройки филиалов
//
Процедура НастроитьДоступностьЗависимыхЭлементов(Форма) Экспорт
	
	ОсновныеЭлементы = Форма.ОсновныеЭлементы;
	Элементы = Форма.Элементы;
	
	Для Каждого ЭлементСпискаЗначений Из ОсновныеЭлементы Цикл
		ИмяЭлемента = ЭлементСпискаЗначений.Значение;
		Элемент = Элементы.Найти(ИмяЭлемента);
		
		Если Элемент <> Неопределено Тогда
			ГруппаПодчиненные = Элементы[ИмяЭлемента + "_Подчиненные"];
			ДоступностьЭлементов = Форма[ИмяЭлемента];
			ОбновитьДоступностьПодчиненныхЭлементов(ГруппаПодчиненные, ДоступностьЭлементов);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет полиск уже открытой формы или открывает новую форму если открытой формы настроек нет.
//  При открытии существующей формы устанавливается текущий филиал из переданного в параметрах
//
// Параметры:
//  Филиал	 - СправочникСсылка.Филиалы							 - ссылка на филиал, для которого выполняется открытие настроек
//  Раздел	 - ПланВидовХарактеристикСсылка.ВидыНастроекФилиалов - раздел, который требуется открыть при открытии формы
//
Процедура ОткрытьФормуНастроекФилиала(Знач Филиал = Неопределено, Знач Раздел = Неопределено) Экспорт
	
	ИмяФормы = "Обработка.УправлениеНастройками.Форма.НастройкиФилиала";
	
	СписокОткрытыхОкон = ПолучитьОкна();
	
	ФормаНайдена = Ложь;
	Для Каждого Окно Из СписокОткрытыхОкон Цикл
		СодержимоеОкна = Окно.Содержимое;
		
		Для Каждого ПодчиненнаяФорма Из СодержимоеОкна Цикл
			Если ПодчиненнаяФорма.ИмяФормы = ИмяФормы Тогда
				ФормаНайдена = Истина;
				ПодчиненнаяФорма.Активизировать();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ФормаНайдена Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Филиал", Филиал);
	
	Если Раздел <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("ОткрываемыйРаздел", Раздел);
	КонецЕсли;
	
	Если НЕ ФормаНайдена Тогда
		ОткрытьФорму("Обработка.УправлениеНастройками.Форма", ПараметрыОткрытия);
	Иначе
		ИмяСобытия = ИмяСобытияОповещения();
		Оповестить(ИмяСобытия, ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

// Находит страницу настроек по имени и переключается на нее, при этом, устанавливается соответствующий раздел в дереве настроек
//
// Параметры:
//  Форма		 - УправляемаяФорма	 - форма настроек филиалов
//  ИмяСтраницы	 - Строка, ПланВидовХарактеристикСсылка.ВидыНастроекФилиалов	 - имя страницы формы, на которую нужно переключиться
//
Процедура ПереключитьсяНаСтраницуНастроек(Форма, Знач ИмяСтраницы) Экспорт
	
	ТипЗначения = ТипЗнч(ИмяСтраницы);
	Если ТипЗначения = Тип("ПланВидовХарактеристикСсылка.ВидыНастроекФилиалов") Тогда
		ИмяСтраницы = СформироватьИмяСтраницыНастроек(ИмяСтраницы, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	НайденнаяСтраница = Элементы.Найти(ИмяСтраницы);
	Если НайденнаяСтраница <> Неопределено Тогда
		Элементы.ГруппаСтраницыНастроек.ТекущаяСтраница = НайденнаяСтраница;
		
		СтрокаНайдена = Ложь;
		Для Каждого СтрокаДерева Из Форма.ДеревоРазделов.ПолучитьЭлементы() Цикл
			ИдентификаторСтрокиДерева = НайтиСтрокуПоИмениСтраницы(СтрокаДерева, ИмяСтраницы);
			
			Если ИдентификаторСтрокиДерева <> Неопределено Тогда
				СтрокаНайдена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаНайдена Тогда
			Элементы.ДеревоРазделов.ТекущаяСтрока = ИдентификаторСтрокиДерева;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает структуру данных настроек для сохранения
//
// Параметры:
//  Форма						 - УправляемаяФорма	 - форма настроек филиалов
//  ИменаИзмененныхРеквизитов	 - Соответствие		 - содержит имена измененных реквизитов
//  УдаляемыеКоманды			 - Массив			 - Ссылки на удаляемые команды
//  ТипыЗадач					 - Массив			 - Ссылки на типы задач филиала
// 
// Возвращаемое значение:
//  Массив - данные настроек, которые требуется сохранить
//
Функция ПолучитьСохраняемыеНастройки(Форма, ИменаИзмененныхРеквизитов, УдаляемыеКоманды = Неопределено, ТипыЗадач = Неопределено) Экспорт
	
	НовыеЗначения = Новый Массив;
		
	Для Каждого ИмяРеквизита Из ИменаИзмененныхРеквизитов Цикл
		Если ИмяРеквизита = "ДеревоВидовДеятельностиУслуг" Тогда
			ИмяНастройки = ИмяРеквизита;
			ЗначениеНастройки = ОбработатьИзменениеВидовДеятельностиУслуг(Форма);
			
		ИначеЕсли ИмяРеквизита = "ДиапазоныСложностиЗадач" Тогда
			ИмяНастройки = ИмяРеквизита;
			ЗначениеНастройки = ОбработатьИзменениеСложностиЗадач(Форма);
			
		ИначеЕсли ИмяРеквизита = "ИсполнителиCodeReview" Тогда
			ИмяНастройки = ИмяРеквизита;
			ЗначениеНастройки = ОбработатьИзменениеИсполнителейCodeReview(Форма);
			
		ИначеЕсли ИмяРеквизита = "УдаленыКомандыРазработчиков" Тогда
			ИмяНастройки = ИмяРеквизита;
			ЗначениеНастройки = УдаляемыеКоманды;
			
		ИначеЕсли ИмяРеквизита = "ТипыЗадач" Тогда
			ИмяНастройки = ИмяРеквизита;
			ЗначениеНастройки = ТипыЗадач;
			
		ИначеЕсли ИмяРеквизита = "ИзмененыСвойстваОбъекта" Тогда
			ИмяНастройки = ИмяРеквизита;
			ЗначениеНастройки = ОбработатьИзменениеСвойствОбъекта(Форма);
			
		ИначеЕсли ИмяРеквизита = "ШаблоныЗаявок" Тогда
			ИмяНастройки = ИмяРеквизита;
			ЗначениеНастройки = ОбработатьИзменениеШаблоновЗаявок(Форма);
			
		ИначеЕсли ИмяРеквизита = "ТаблицаДетальныеНастройки" ИЛИ ИмяРеквизита = "ДеревоНаправленийСистемОповещения" Тогда
			ИмяНастройки = ИмяРеквизита;	
			ЗначениеНастройки = Форма[ИмяРеквизита];

		Иначе
			ПозицияРазделителя = СтрНайти(ИмяРеквизита, "_");
			ИмяНастройки = Лев(ИмяРеквизита, ПозицияРазделителя - 1);
			ЗначениеНастройки = Форма[ИмяРеквизита];
			
			Если Форма.ИмяФормы = "Обработка.УправлениеНастройками.Форма.НастройкиФилиала" Тогда
				Мессенджер = Форма.Мессенджеры.Получить(ИмяНастройки);
				Если Мессенджер <> Неопределено Тогда
					ИмяНастройки = Мессенджер;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураЗначения = Новый Структура;
		СтруктураЗначения.Вставить("ИмяНастройки", ИмяНастройки);
		СтруктураЗначения.Вставить("Значение", ЗначениеНастройки);
		
		НовыеЗначения.Добавить(СтруктураЗначения);
	КонецЦикла;
	
	Возврат НовыеЗначения;
	
КонецФункции

// Обновляет доступность подчиненных элементов формы при изменении основного реквизита страницы
//
// Параметры:
//  Форма	 - УправляемаяФорма	 - форма настроек филиалов
//  Элемент	 - ПолеФормы	 - измененный элемент формы
//
Процедура ПослеИзмененияЭлементаФормы(Форма, ИмяЭлемента, ИменаИзмененныхРеквизитов = Неопределено) Экспорт
		
	ЭтоОсновнойЭлемент = (Форма.ОсновныеЭлементы.НайтиПоЗначению(ИмяЭлемента) <> Неопределено);
	Если ЭтоОсновнойЭлемент Тогда
		ДоступностьЭлементов = Форма[ИмяЭлемента];
		ГруппаПодчиненные = Форма.Элементы[ИмяЭлемента + "_Подчиненные"];
		ОбновитьДоступностьПодчиненныхЭлементов(ГруппаПодчиненные, ДоступностьЭлементов);
	КонецЕсли;
	
	// Обновление списков выбора для формы настроек пользователя
	РаботаСНастройкамиКлиентСервер.ОбновитьЗависимыеЭлементыНастроекПользователя(Форма, ИмяЭлемента, ИменаИзмененныхРеквизитов);
	
КонецПроцедуры

// Определяет, требуется ли перезапуск сеанса после изменения настройки
//
// Параметры:
//  Форма						 - УправляемаяФорма	 - форма настроек филиалов
//  ИменаИзмененныхРеквизитов	 - Массив	 - содержит имена реквизитов, изменение которых требуется перезапуска сеанса
//
Процедура ПослеСохраненияНастроек(Форма, ИменаИзмененныхРеквизитов) Экспорт
	
	ТребуетсяПерезапуск = Ложь;
	Для Каждого ИмяРеквизита Из ИменаИзмененныхРеквизитов Цикл
		НайденнаяНастройка = Форма.НастройкиТребующиеПерезапуск.НайтиПоЗначению(ИмяРеквизита);
		Если НайденнаяНастройка <> Неопределено Тогда
			ТребуетсяПерезапуск = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТребуетсяПерезапуск Тогда
		ПоказатьУведомлениеПользователю();
	КонецЕсли;
	
	ИменаИзмененныхРеквизитов.Очистить();
	Форма.Модифицированность = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиСтрокуПоИмениСтраницы(СтрокаДерева, Знач ИмяСтраницы)
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Идентификатор = ИмяСтраницы Тогда
		Результат = СтрокаДерева.ПолучитьИдентификатор();
	Иначе
		Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
			Результат = НайтиСтрокуПоИмениСтраницы(ПодчиненнаяСтрока, ИмяСтраницы);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьДоступностьПодчиненныхЭлементов(Элемент, Знач ДоступностьЭлементов)
	
	Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
		ТипПодчиненного = ТипЗнч(ПодчиненныйЭлемент);
		
		Если ТипПодчиненного = Тип("ПолеФормы") Тогда
			ПодчиненныйЭлемент.Доступность = ДоступностьЭлементов;
		ИначеЕсли ТипПодчиненного = Тип("ГруппаФормы") ИЛИ ТипПодчиненного = Тип("ТаблицаФормы") Тогда
			ОбновитьДоступностьПодчиненныхЭлементов(ПодчиненныйЭлемент, ДоступностьЭлементов);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьИзменениеВидовДеятельностиУслуг(Форма)
	
	ПоляСтруктуры = "Филиал, ВидДеятельностиУслуги, Использование, Порядок";
	ДанныеДерева = Новый Массив;
	
	ЕстьВключенные = Ложь;
	ПорядковыйНомер = 1;
	
	Для Каждого СтрокаУслуги Из Форма.ДеревоВидовДеятельностиУслуг.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаВидаДеятельности Из СтрокаУслуги.ПолучитьЭлементы() Цикл
			ДанныеСтроки = Новый Структура(ПоляСтруктуры);
			ДанныеСтроки.Филиал = Форма.Филиал;
			ДанныеСтроки.ВидДеятельностиУслуги = СтрокаВидаДеятельности.ВидДеятельностиУслуги;
			ДанныеСтроки.Использование = (СтрокаВидаДеятельности.Использование = 1);
			ДанныеСтроки.Порядок = ПорядковыйНомер;
			
			ДанныеДерева.Добавить(ДанныеСтроки);
			
			ПорядковыйНомер = ПорядковыйНомер + 1;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеДерева;
	
КонецФункции

Функция ОбработатьИзменениеИсполнителейCodeReview(Форма)
	
	Результат = Новый Массив;
	
	ПоляСтруктуры = "Сотрудник, Ревьюер";
	
	Для Каждого Строка Из Форма.ИсполнителиCodeReview Цикл
		СтруктураСтроки = Новый Структура(ПоляСтруктуры);
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
		Результат.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьИзменениеСвойствОбъекта(Форма)
	
	Результат = Новый Структура;
	Результат.Вставить("ЗаместительРуководителя", Форма.ЗаместительРуководителя);
	Результат.Вставить("ТипФилиала", Форма.ТипФилиала);
	Результат.Вставить("РазрабатываемыеСистемы", Новый Массив);
	Результат.Вставить("СвязанныеФилиалы", Новый Массив);
	
	Для Каждого ЭлементСписка Из Форма.РазрабатываемыеСистемы Цикл
		Если ЗначениеЗаполнено(ЭлементСписка.Значение)
			И Результат.РазрабатываемыеСистемы.Найти(ЭлементСписка.Значение) = Неопределено Тогда
			
			Результат.РазрабатываемыеСистемы.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из Форма.СвязанныеФилиалы Цикл
		Если ЗначениеЗаполнено(ЭлементСписка.Филиал) Тогда
			Структура = Новый Структура("Филиал, РассчитыватьМетрикиСИсточником");
			ЗаполнитьЗначенияСвойств(Структура, ЭлементСписка);
			Результат.СвязанныеФилиалы.Добавить(Структура);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьИзменениеСложностиЗадач(Форма)
	
	Результат = Новый Массив;
	
	ПоляСтруктуры = "Должность, МинимальнаяСложность, МаксимальнаяСложность";
	
	Для Каждого СтрокаТаблицы Из Форма.ДиапазоныСложностиЗадач Цикл
		СтруктураДанных = Новый Структура(ПоляСтруктуры);
		ЗаполнитьЗначенияСвойств(СтруктураДанных, СтрокаТаблицы);
		Результат.Добавить(СтруктураДанных);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьИзменениеШаблоновЗаявок(Форма)
	
	Результат = Форма.ШаблоныЗаявок.ВыгрузитьЗначения();
		
	Возврат Результат;
	
КонецФункции	

Процедура ПоказатьУведомлениеПользователю()
	
	Текст = "Перезапуск сеанса";
	Пояснение = "Для применения некоторых измененных настроек требуется перезапуск сеанса";
	Картинка = БиблиотекаКартинок.Предупреждение32;
	СтатусОповещения = СтатусОповещенияПользователя.Важное;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПерезапускТекущегоСеанса", ПриложениеКлиент);
	
	ПоказатьОповещениеПользователя(Текст, ОписаниеОповещения, Пояснение, Картинка, СтатусОповещения);
	
КонецПроцедуры

Функция СформироватьИмяСтраницыНастроек(Знач Раздел, Знач УникальныйИдентификатор)
	
	ИмяПредопределенныхДанных = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Раздел, "ИмяПредопределенныхДанных");
	Идентификатор = ОбщегоНазначенияКлиентСервер.СтрУникальныйИдентификатор(УникальныйИдентификатор);
	
	Возврат СтрШаблон("Страница_%1_%2", ИмяПредопределенныхДанных, Идентификатор);
	
КонецФункции

#КонецОбласти
