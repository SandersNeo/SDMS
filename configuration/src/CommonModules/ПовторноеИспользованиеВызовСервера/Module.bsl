///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает значение массив доверенных доменов из константы
// 
// Возвращаемое значение:
//  Массив - массив доменов
//
Функция ДоверенныеДомены() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДоверенныеДомены = Константы.ДоверенныеДомены.Получить();
	
	Если ДоверенныеДомены = Неопределено Тогда
		Возврат Новый Массив;
	Иначе
		Возврат СтрРазделить(ДоверенныеДомены, ";", Ложь);
	КонецЕсли;
	
КонецФункции
	
// Возвращает массив разрешенных расширений для установки в описание документа
// 
// Возвращаемое значение:
//  Массив - названия доступных расширений
//
Функция ДопустимыеРасширенияИзображенияВОПисанииДокумента() Экспорт
	
	МассивРасширений = Новый Массив;
	МассивРасширений.Добавить("png");
	МассивРасширений.Добавить("jpg");
	МассивРасширений.Добавить("jpeg");
	МассивРасширений.Добавить("tif");
	МассивРасширений.Добавить("bmp");
	МассивРасширений.Добавить("svg");
	МассивРасширений.Добавить("tmp");
	
	Возврат МассивРасширений;
	
КонецФункции

// Возвращает значение каталога для хранения файлов на сервере
// 
// Возвращаемое значение:
//  Строка - значение каталога
//
Функция ЗначениеКонстантыКаталогХраненияФайловНаСервере() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.КаталогХраненияФайловНаСервере.Получить();
	
КонецФункции

// Возвращает каталог для хранения файлов объектов на сервере
// 
// Возвращаемое значение:
//  Строка - путь к каталогу
//
Функция КаталогХраненияАватаровНаСервере() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначениеКонстанты = Константы.КаталогХраненияФайловНаСервере.Получить(); 
	КаталогХраненияФайлов = РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(ЗначениеКонстанты);  
	
	ЗначениеКонстанты = Константы.КаталогХраненияАватаровПользователей.Получить();
	КаталогФайловОбъектов = РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(ЗначениеКонстанты);
	
	Возврат СтрШаблон("%1%2", КаталогХраненияФайлов, КаталогФайловОбъектов);
	
КонецФункции

// Возвращает каталог для хранения файлов объектов на сервере
// 
// Возвращаемое значение:
//  Строка - путь к каталогу
//
Функция КаталогХраненияФайловНаСервере() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначениеКонстанты = Константы.КаталогХраненияФайловНаСервере.Получить();
	
	КаталогХраненияФайлов = РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(ЗначениеКонстанты);
	КаталогФайловОбъектов = РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(Константы.КаталогФайловОбъектов.Получить());
	
	Возврат СтрШаблон("%1%2", КаталогХраненияФайлов, КаталогФайловОбъектов);
	
КонецФункции

// Возвращает максимально допустимый размер изображения в байтах
// 
// Возвращаемое значение:
//  Число - размер изображения
//
Функция МаксимальныйРазмерИзображения() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МаксимальныйРазмерИзображения = Константы.МаксимальныйРазмерИзображения.Получить();
	
	// Если значение константы не установлено, по-умолчанию устанавливаем 
	// ограничение на размер файла в 1 Мбайт.
	Если (МаксимальныйРазмерИзображения = Неопределено) ИЛИ (МаксимальныйРазмерИзображения = 0) Тогда
		МаксимальныйРазмерИзображения = 1048576;
		Константы.МаксимальныйРазмерИзображения.Установить(МаксимальныйРазмерИзображения);
	КонецЕсли;
	
	Возврат МаксимальныйРазмерИзображения;
	
КонецФункции

// Возвращает максимальный допустимый размер файла в байтах.
// 
// Возвращаемое значение:
//  Число - размер файла
//
Функция МаксимальныйРазмерФайла() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МаксимальныйРазмерФайла = Константы.МаксимальныйРазмерФайла.Получить();
	
	// Если значение константы не установлено, по-умолчанию устанавливаем 
	// ограничение на размер файла в 20 Мбайт.
	Если (МаксимальныйРазмерФайла = Неопределено) ИЛИ (МаксимальныйРазмерФайла = 0) Тогда
		МаксимальныйРазмерФайла = 20971520;
		Константы.МаксимальныйРазмерФайла.Установить(МаксимальныйРазмерФайла);
	КонецЕсли;
	
	Возврат МаксимальныйРазмерФайла;
	
КонецФункции

// Возвращает каталог временных файлов, которые использует система.
// 
// Возвращаемое значение:
//  Строка - значение каталога
//
Функция ПолучитьКаталогВременныхФайлов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначенияКлиентСервер.ДобавитьСлэш(Константы.КаталогВременныхФайлов.Получить());
	
КонецФункции

// Формирует структуру настроек для работы с файлами
// 
// Возвращаемое значение:
//  Структура - настройки и их значения
//	* МаксимальныйРазмерФайла	 - Число	 - максимальный размер файла
//	* СписокЗапрещенныхРасширений	 - Массив	 - список запрещенных расширений файлов
//	* ЗапретЗагрузкиФайловПоРасширению	 - Булево	 - признак запрета загрузки файлов, если они не подходят по расширению
//
Функция ПолучитьНастройкиРаботыСФайлами() Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("МаксимальныйРазмерФайла", МаксимальныйРазмерФайла());
	СтруктураНастроек.Вставить("СписокЗапрещенныхРасширений", СписокЗапрещенныхРасширений());
	СтруктураНастроек.Вставить("ЗапретЗагрузкиФайловПоРасширению", ЗапрещатьЗагрузкуФайловПоРасширению());
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Формирует структуру настроек для работы с изображениями
// 
// Возвращаемое значение:
//  Структура - настройки для работы с изображениями
//	* МаксимальныйРазмерИзображения	 - Число	 - максимальный размер изображения в байтах
// 	* ДопустимыеРасширения	 - Массив	 - допустимые расширения изображений
//
Функция ПолучитьНастройкиРаботыСИзображениями() Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("МаксимальныйРазмерИзображения", МаксимальныйРазмерИзображения());
	СтруктураНастроек.Вставить("ДопустимыеРасширения", ДопустимыеРасширенияИзображенияВОписанииДокумента());
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает причины изменения для статуса
//
// Параметры:
//  Статус	 - СправочникСсылка.СтатусыОбъектов	 - ссылка на статус
//  Объект	 - ЛюбаяСсылка						 - ссылка на объект, для которого нужны причины изменения
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с описанием причины или Неопределено, в случае отсутствия
//
Функция ПолучитьПричиныИзмененияСтатуса(Знач Статус, Знач Объект = Неопределено) Экспорт
	
	ТипОбъекта = Неопределено;
	СвязанныйЭлемент = Неопределено;
	
	Если Объект <> Неопределено Тогда
		Попытка
			ТипОбъекта = Справочники.ТипыОбъектовВладельцев.НайтиСвязанныйЭлемент(Объект);
		Исключение
			// Ничего не требуется делать
		КонецПопытки;                    
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПричиныИзмененияСтатусов.Ссылка КАК Ссылка,
	|	ПричиныИзмененияСтатусов.Наименование КАК Наименование,
	|	ПричиныИзмененияСтатусов.Описание КАК Описание,
	|	ПричиныИзмененияСтатусов.НеобходимоОтправитьУведомление КАК НеобходимоОтправитьУведомление,
	|	ПричиныИзмененияСтатусов.ОбязательноеЗаполнениеКомментария КАК ОбязательноеЗаполнениеКомментария
	|ИЗ
	|	Справочник.СтатусыОбъектов.ПричиныИзмененияСтатуса КАК СтатусыОбъектовПричиныИзмененияСтатуса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПричиныИзмененияСтатусов КАК ПричиныИзмененияСтатусов
	|		ПО (СтатусыОбъектовПричиныИзмененияСтатуса.Ссылка = &Статус)
	|			И СтатусыОбъектовПричиныИзмененияСтатуса.Причина = ПричиныИзмененияСтатусов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПричиныИзмененияСтатусов.ОбластьИспользования КАК ТаблицаОбластьИспользования
	|		ПО (ПричиныИзмененияСтатусов.Ссылка = ТаблицаОбластьИспользования.Ссылка)
	|			И (ТаблицаОбластьИспользования.ТипОбъекта = &ТипОбъекта)
	|ГДЕ
	|	НЕ ПричиныИзмененияСтатусов.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА &ТипОбъекта = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ ТаблицаОбластьИспользования.ТипОбъекта ЕСТЬ NULL
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыОбъектовПричиныИзмененияСтатуса.Порядок";
	
	Запрос.УстановитьПараметр("Статус", Статус);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ПричиныИзменения = Неопределено;
	Иначе
		ПричиныИзменения = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	Возврат ПричиныИзменения;
	
КонецФункции

// Возвращшает сдвиг часового пояса относительно Владивостокского времени для филиала текущего пользователя
// 
// Возвращаемое значение:
//  Число - величина сдвига часового пояса
//
Функция ПолучитьСдвигЧасовогоПояса() Экспорт
	
	Настройка = ПланыВидовХарактеристик.ВидыНастроекФилиалов.СмещениеЧасовогоПоясаОтносительноВладивостока;
	Возврат РегистрыСведений.НастройкиФилиалов.ЗначениеНастройки(ПараметрыСеанса.Филиал, Настройка);
	
КонецФункции

// Возвращает соответствие индексов картинок расширениям файлов
// 
// Возвращаемое значение:
//  Соответствие - ключ - расширение файла, значение - индекс картинки
//
Функция ПолучитьСоответствиеИконокФайловРасширениям() Экспорт
	
	Число8 = 8;
	Число10 = 10;
	Число12 = 12;
	Число16 = 16;
	Число18 = 18;
	Число20 = 20;
	Число30 = 30;
	Число32 = 32;
	Число34 = 34;
	Число42 = 42;
	Число44 = 44;
	Число46 = 46;
	Число48 = 48;
	Число50 = 50;
	Число52 = 52;
	Число66 = 66;
	
	СоответствиеИконок = Новый Соответствие;
	СоответствиеИконок.Вставить("MXL", Число8);
	СоответствиеИконок.Вставить("EPF", Число12);
	СоответствиеИконок.Вставить("DOC", Число18);
	СоответствиеИконок.Вставить("DOCX", Число18);
	СоответствиеИконок.Вставить("DOCM", Число18);
	СоответствиеИконок.Вставить("RTF", Число18);
	СоответствиеИконок.Вставить("ODT", Число18);
	СоответствиеИконок.Вставить("XLSX", Число20);
	СоответствиеИконок.Вставить("XLSM", Число20);
	СоответствиеИконок.Вставить("XLS", Число20);
	СоответствиеИконок.Вставить("CSV", Число20);
	СоответствиеИконок.Вставить("ODS", Число20);
	СоответствиеИконок.Вставить("XML", Число30);
	СоответствиеИконок.Вставить("XSD", Число30);
	СоответствиеИконок.Вставить("MSG", Число32);
	СоответствиеИконок.Вставить("RAR", Число34);
	СоответствиеИконок.Вставить("ZIP", Число34);
	СоответствиеИконок.Вставить("ARJ", Число34);
	СоответствиеИконок.Вставить("ISO", Число34);
	СоответствиеИконок.Вставить("7Z", Число34);
	СоответствиеИконок.Вставить("JPG", Число42);
	СоответствиеИконок.Вставить("BMP", Число44);
	СоответствиеИконок.Вставить("TIF", Число46);
	СоответствиеИконок.Вставить("TIFF", Число46);
	СоответствиеИконок.Вставить("GIF", Число48);
	СоответствиеИконок.Вставить("PNG", Число50);
	СоответствиеИконок.Вставить("PDF", Число52);
	СоответствиеИконок.Вставить("ERF", Число66);
	СоответствиеИконок.Вставить("TXT", Число10);
	СоответствиеИконок.Вставить("SEL", Число10);
	СоответствиеИконок.Вставить("DAT", Число10);
	СоответствиеИконок.Вставить("CFG", Число10);
	СоответствиеИконок.Вставить("INI", Число10);
	СоответствиеИконок.Вставить("HTML", Число16);
	СоответствиеИконок.Вставить("HTM", Число16);
	СоответствиеИконок.Вставить("CSS", Число16);
	
	Возврат СоответствиеИконок;
	
КонецФункции

// Возвращает соответствие content-type расширениям файлов
// 
// Возвращаемое значение:
//  Соответствие - ключ - расширение файла, значение - content-type
//
Функция ПолучитьСоответствиеТиповФайловРасширениям() Экспорт
	
	СоответствиеТипов = Новый Соответствие;
	СоответствиеТипов.Вставить("ai", "	application/postscript");
	СоответствиеТипов.Вставить("avi", "	video/avi");
	СоответствиеТипов.Вставить("conf", "text/plain");
	СоответствиеТипов.Вставить("cpp", "text/x-c");
	СоответствиеТипов.Вставить("css", "text/css");
	СоответствиеТипов.Вставить("doc", "application/msword");
	СоответствиеТипов.Вставить("docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document");
	СоответствиеТипов.Вставить("htm", "text/html");
	СоответствиеТипов.Вставить("html", "text/html");
	СоответствиеТипов.Вставить("list", "text/plain");
	СоответствиеТипов.Вставить("mp4", "video/mp4");
	СоответствиеТипов.Вставить("pdf", "application/pdf");
	СоответствиеТипов.Вставить("xls", "application/vnd.ms-excel");
	СоответствиеТипов.Вставить("xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
	СоответствиеТипов.Вставить("xml", "application/xml");
	СоответствиеТипов.Вставить("zip", "application/zip");

	// картинки
	СоответствиеТипов.Вставить("bmp", "image/bmp");
	СоответствиеТипов.Вставить("gif", "image/gif");
	СоответствиеТипов.Вставить("ico", "image/x-icon");
	СоответствиеТипов.Вставить("jfif", "image/jpeg");
	СоответствиеТипов.Вставить("jpeg", "image/jpeg");
	СоответствиеТипов.Вставить("jpg", "image/jpeg");
	СоответствиеТипов.Вставить("png", "image/png");
	СоответствиеТипов.Вставить("tiff", "image/tiff");

	Возврат СоответствиеТипов;

КонецФункции

// Возвращает список расширений файлов у которые есть свои иконки
// 
// Возвращаемое значение:
//  Массив - Массив расширений
//
Функция ПолучитьРасширенияФайловСИконками() Экспорт
		
	МассивРасширений = Новый Массив;  
	МассивРасширений.Добавить();
	МассивРасширений.Добавить("EPF");
	МассивРасширений.Добавить("TXT");
	МассивРасширений.Добавить("SEL");
	МассивРасширений.Добавить("DAT");
	МассивРасширений.Добавить("CFG");
	МассивРасширений.Добавить("INI");
	МассивРасширений.Добавить("DAT");
	МассивРасширений.Добавить("LOG");
	МассивРасширений.Добавить("DOC");
	МассивРасширений.Добавить("DOCX");
	МассивРасширений.Добавить("DOCM");
	МассивРасширений.Добавить("RTF");
	МассивРасширений.Добавить("ODT");
	МассивРасширений.Добавить("BMP");
	МассивРасширений.Добавить("MD");
	МассивРасширений.Добавить("XLSX");
	МассивРасширений.Добавить("XLSM");
	МассивРасширений.Добавить("XLS");
	МассивРасширений.Добавить("CSV");
	МассивРасширений.Добавить("ODS");
	МассивРасширений.Добавить("MSG");
	МассивРасширений.Добавить("APK");
	МассивРасширений.Добавить("RAR");
	МассивРасширений.Добавить("ZIP");
	МассивРасширений.Добавить("ARJ");
	МассивРасширений.Добавить("ISO");
	МассивРасширений.Добавить("7Z");
	МассивРасширений.Добавить("JPG");
	МассивРасширений.Добавить("JPEG");
	МассивРасширений.Добавить("PNG");
	МассивРасширений.Добавить("MXL");
	МассивРасширений.Добавить("ERF");
	МассивРасширений.Добавить("CFE");
	МассивРасширений.Добавить("JSON");
	МассивРасширений.Добавить("TIFF");
	МассивРасширений.Добавить("TIF");
	МассивРасширений.Добавить("HTML");
	МассивРасширений.Добавить("HTM");
	МассивРасширений.Добавить("CSS");
	МассивРасширений.Добавить("AVI");
	МассивРасширений.Добавить("MKV");
	МассивРасширений.Добавить("MOV");
	МассивРасширений.Добавить("MP4");
	МассивРасширений.Добавить("WMV");
	МассивРасширений.Добавить("PDF");
	МассивРасширений.Добавить("BMPR");
	МассивРасширений.Добавить("BMPN");
	МассивРасширений.Добавить("SVG");
	МассивРасширений.Добавить("AI");
	МассивРасширений.Добавить("XML");
	МассивРасширений.Добавить("XSD");
	МассивРасширений.Добавить("Q1C");
	МассивРасширений.Добавить("SEL");
	МассивРасширений.Добавить("SQL");	
	
	Возврат МассивРасширений;
	
КонецФункции

// Возвращает список расширений файлов запрещенных для загрузки
// 
// Возвращаемое значение:
//  Строка - список расширений разделенный пробелом
//
Функция СписокЗапрещенныхРасширений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СписокЗапрещенныхРасширений = Константы.СписокЗапрещенныхРасширений.Получить();
	
	Если (СписокЗапрещенныхРасширений = Неопределено) ИЛИ ПустаяСтрока(СписокЗапрещенныхРасширений) Тогда
		ЗапрещенныеРасширения = Новый Массив;
		ЗапрещенныеРасширения.Добавить("ADE");
		ЗапрещенныеРасширения.Добавить("ADP");
		ЗапрещенныеРасширения.Добавить("APP");
		ЗапрещенныеРасширения.Добавить("BAS");
		ЗапрещенныеРасширения.Добавить("BAT");
		ЗапрещенныеРасширения.Добавить("CHM");
		ЗапрещенныеРасширения.Добавить("CLASS");
		ЗапрещенныеРасширения.Добавить("CMD");
		ЗапрещенныеРасширения.Добавить("COM");
		ЗапрещенныеРасширения.Добавить("CPL");
		ЗапрещенныеРасширения.Добавить("CRT");
		ЗапрещенныеРасширения.Добавить("DLL");
		ЗапрещенныеРасширения.Добавить("EXE");
		ЗапрещенныеРасширения.Добавить("FXP");
		ЗапрещенныеРасширения.Добавить("HLP");
		ЗапрещенныеРасширения.Добавить("HTA");
		ЗапрещенныеРасширения.Добавить("INS");
		ЗапрещенныеРасширения.Добавить("ISP");
		ЗапрещенныеРасширения.Добавить("JS");
		ЗапрещенныеРасширения.Добавить("JSE");
		ЗапрещенныеРасширения.Добавить("LNK");
		ЗапрещенныеРасширения.Добавить("MDA");
		ЗапрещенныеРасширения.Добавить("MDB");
		ЗапрещенныеРасширения.Добавить("MDE");
		ЗапрещенныеРасширения.Добавить("MDT");
		ЗапрещенныеРасширения.Добавить("MDW");
		ЗапрещенныеРасширения.Добавить("MDZ");
		ЗапрещенныеРасширения.Добавить("MSC");
		ЗапрещенныеРасширения.Добавить("MSI");
		ЗапрещенныеРасширения.Добавить("MSP");
		ЗапрещенныеРасширения.Добавить("MST");
		ЗапрещенныеРасширения.Добавить("OPS");
		ЗапрещенныеРасширения.Добавить("PCD");
		ЗапрещенныеРасширения.Добавить("PIF");
		ЗапрещенныеРасширения.Добавить("PRF");
		ЗапрещенныеРасширения.Добавить("PRG");
		ЗапрещенныеРасширения.Добавить("REG");
		ЗапрещенныеРасширения.Добавить("SCF");
		ЗапрещенныеРасширения.Добавить("SCR");
		ЗапрещенныеРасширения.Добавить("SCT");
		ЗапрещенныеРасширения.Добавить("SHB");
		ЗапрещенныеРасширения.Добавить("SHS");
		ЗапрещенныеРасширения.Добавить("URL");
		ЗапрещенныеРасширения.Добавить("VB");
		ЗапрещенныеРасширения.Добавить("VBE");
		ЗапрещенныеРасширения.Добавить("VBS");
		ЗапрещенныеРасширения.Добавить("WSC");
		ЗапрещенныеРасширения.Добавить("WSF");
		ЗапрещенныеРасширения.Добавить("WSH");
		
		СписокЗапрещенныхРасширений = СтрСоединить(ЗапрещенныеРасширения, " ");
		Константы.СписокЗапрещенныхРасширений.Установить(СписокЗапрещенныхРасширений);
	КонецЕсли;
	
	Возврат СписокЗапрещенныхРасширений;
	
КонецФункции

// Возвращает признак, является ли данная база продутовой или нет
// 
// Возвращаемое значение:
//  Булево - значение признака
//
Функция ЭтоПродуктоваяБаза() Экспорт
	
	АдресПродуктовойБазы = Константы.АдресПродуктовойБазы.Получить();
	
	// Для организации возможности отключения заданий в базе разработки
	// константа продуктовой базы должна быть заполнена.
	
	Если НЕ ЗначениеЗаполнено(АдресПродуктовойБазы) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрокаСоединения = ОбщегоНазначения.СтрокаБезДомена(СтрокаСоединенияИнформационнойБазы()); 
	
	// Удалим порт из строки соединения, если он указан
	ИмяБазы = НСтр(СтрокаСоединения, "Srvr");	
	ЧастиИмениБазы = СтрРазделить(ИмяБазы, ":");
	КоличествоЧастей = ЧастиИмениБазы.Количество();
	
	Если КоличествоЧастей > 1 Тогда
		ЧастьПорт = СтрШаблон(":%1", ЧастиИмениБазы[КоличествоЧастей - 1]); 
		СтрокаСоединения = СтрЗаменить(СтрокаСоединения, ЧастьПорт, "");
	КонецЕсли;
	
	Возврат (АдресПродуктовойБазы = СтрокаСоединения);
	
КонецФункции 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗапрещатьЗагрузкуФайловПоРасширению()
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ЗапрещатьЗагрузкуФайловПоРасширению.Получить();
	
КонецФункции	

#КонецОбласти
