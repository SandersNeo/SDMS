///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Запуск и завершение работы системы

#Область ПрограммныйИнтерфейс

// Восстановление окон
//
// Параметры:
//  ОткрытыеОкна - Массив - Список окон, которые нужно открыть
//
Процедура ВосстановитьОкна(ОткрытыеОкна) Экспорт
	
	Если ОткрытыеОкна.Количество() > 0 Тогда
		Для Каждого Окно Из ОткрытыеОкна Цикл
			Попытка
				Если ОбщегоНазначенияКлиент.ЭтоНавигационнаяСсылка(Окно) Тогда
					ПерейтиПоНавигационнойСсылке(Окно);
				Иначе
					ОткрытьФорму(Окно);
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Выполнение действий перед началом работы пользователя.
//
// Параметры:
//  Отказ - Булево - если запуск выполнен успешно, значение содержит Ложь, если 
//          вход в программу не выполнен, тогда Истина.
//
Процедура ПередНачаломРаботыСистемы(Отказ) Экспорт
	
	Если ПараметрыПриложения = Неопределено Тогда
		ПараметрыПриложения = Новый Соответствие;
	КонецЕсли;
	
	// Определение вида клиентского приложения
	#Если ВебКлиент Тогда
		ПараметрыПриложения.Вставить("ВебКлиент", Истина);
	#Иначе
		ПараметрыПриложения.Вставить("ВебКлиент", Ложь);
	#КонецЕсли
	
	// Хранение списка открытых окон
	ПараметрыПриложения.Вставить("ОткрытыеОкна", Новый Массив);
	
	// Получение текущего пользователя для работы на стороне клиента
	ПараметрыПриложения.Вставить("ТекущийПользователь", ПользователиВызовСервера.ТекущийПользователь());
	
	// Хранит соответствие идентификатора форме, для быстрого поиска инструмента и запуска обновления
	ПараметрыПриложения.Вставить("ОткрытыеИнструменты", Новый Соответствие);
	
КонецПроцедуры

// Выполнение действия при начале работы системы.
//
Процедура ПриНачалеРаботыСистемы() Экспорт
	
	Если ПараметрыПриложения.Получить("ОшибкаОбновленияДанных") = Истина Тогда
		ТекстСообщения = 
		"Ошибка обновления данных при запуске приложения.
		|Работа в программе невозможна.
		|Подробности в журнале регистрации";
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПредупреждениеЗавершенияРаботыСистемы", ПриложениеКлиент);
		ПоказатьПредупреждение(ОписаниеОповещения, ТекстСообщения, 60, "Обновление данных");
		Возврат;	
	КонецЕсли;
	
	КлиентскоеПриложение.УстановитьЗаголовок(ПриложениеВызовСервера.ЗаголовокКлиентскогоПриложения());	
	
	ПараметрыПользователя = ПриложениеВызовСервера.ПроверитьВозможностьРаботыПользователя(ОкноВнешнегоСайта.Доступно);
	ПараметрыПриложения.Вставить("ЕстьПользователи", ПараметрыПользователя.ЕстьПользователи);
	
	ПользователиПриходятОбменом = ИнтеграцияДополнительныхПодсистем.ПодсистемаСуществует("ОбменДанными");
	
	Если ПользователиПриходятОбменом И ПараметрыПользователя.ЕстьПользователи И НЕ ПараметрыПользователя.ПользовательОпределен Тогда
		ТекстСообщения = 
		СтрШаблон("Текущий пользователь не найден в справочнике ""Пользователи"".
		|Работа в программе невозможна.
		|Обратитесь в техническую поддержку: 
		|%1", ОбщегоНазначенияВызовСервера.ПолучитьПочтуТехПоддержки());
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПредупреждениеЗавершенияРаботыСистемы", ПриложениеКлиент);
		ПоказатьПредупреждение(ОписаниеОповещения, ТекстСообщения, 60, "Авторизация");
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПользователя.ПользовательОпределен Тогда
		Если ПараметрыПользователя.Служебный Тогда
			ТекстСообщения = 
			СтрШаблон("Служебному пользователю запрещена работа в программе.
			|Обратитесь в техническую поддержку: 
			|%1", ОбщегоНазначенияВызовСервера.ПолучитьПочтуТехПоддержки());
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПредупреждениеЗавершенияРаботыСистемы", ПриложениеКлиент);
			ПоказатьПредупреждение(ОписаниеОповещения, ТекстСообщения, 30, "Авторизация");
			Возврат;
			
		ИначеЕсли ПараметрыПользователя.Недействительный Тогда
			ТекстСообщения = 
			СтрШаблон("Текущему пользователю запрещена работа в программе.
			|Обратитесь в техническую поддержку: 
			|%1", ОбщегоНазначенияВызовСервера.ПолучитьПочтуТехПоддержки());
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПредупреждениеЗавершенияРаботыСистемы", ПриложениеКлиент);
			ПоказатьПредупреждение(ОписаниеОповещения, ТекстСообщения, 60, "Авторизация");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПользователя.ЗапрещенДоступВебКлиент Тогда
		СтрокиПредупреждения = Новый Массив;
		СтрокиПредупреждения.Добавить(
		"Работа в программе невозможна.
		|SDMS доступно по адресу - 
		|");
		СтрокиПредупреждения.Добавить(Новый ФорматированнаяСтрока(ПараметрыПользователя.АдресПубликации, , , , ПараметрыПользователя.АдресПубликации));
		
		ТекстСообщения = Новый ФорматированнаяСтрока(СтрокиПредупреждения);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПредупреждениеЗавершенияРаботыСистемы", ПриложениеКлиент);
		ПоказатьПредупреждение(ОписаниеОповещения, ТекстСообщения, 60, "Авторизация");
		Возврат;
	КонецЕсли;
	
	ПриНачалеРаботыСистемыПослеВыполненияПроверок();
	
КонецПроцедуры

// Выполняет сохранение списка навигационных ссылок на открытые окна клиентского
// приложения. Сохраняются ссылки только на те окна, которые не являются основным,
// не включены в состав начальной страницы и не являются, формами открытыми из
// других форм.
//
Процедура СохранениеСпискаОткрытыхОконКлиентскогоПриложения() Экспорт
	
	ОткрытыеОкна     = Новый Массив;
	КоличествоОкон   = 0;
	СпискиОтличаются = Ложь;
	
	ФормыОбъектов = Новый Массив;
	ФормыОбъектов.Добавить("ФормаЭлемента");
	ФормыОбъектов.Добавить("ФормаДокумента");
	ФормыОбъектов.Добавить("ФормаСписка");
	
	ФормыРабочихСтолов = Новый Массив;
	ФормыРабочихСтолов.Добавить("Обработка.РабочийСтолСТО.Форма.ФормаОбработки");
	
	ИсключаемыеФормы = Новый Массив;
	ИсключаемыеФормы.Добавить("Обработка.ПроведениеОпроса.Форма.Форма");
	
	ОткрытыеОкнаПриложения = ПолучитьОкна();
	
	// Не сохраняем Основное окно, Начальную страниц и подчиненные окна,
	// кроме входящих в массив СохраняемыеФормы	
	Для Каждого Окно Из ОткрытыеОкнаПриложения Цикл
		Если Окно.Основное ИЛИ Окно.НачальнаяСтраница Тогда
			Продолжить;
		КонецЕсли;
		
		Содержимое = Окно.Содержимое;
		
		Если Содержимое.Количество() > 0 Тогда 
			ПолноеИмяФормы = Содержимое[0].ИмяФормы;
			
			Если ИсключаемыеФормы.Найти(ПолноеИмяФормы) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(Содержимое[0].ВладелецФормы) = Тип("УправляемаяФорма") Тогда	
				СоставляющиеИмениФормы = СтрРазделить(Содержимое[0].ИмяФормы, ".");
				КоличествоСоставляющихИмениФормы = СоставляющиеИмениФормы.Количество();
				ВидФормы = СоставляющиеИмениФормы[КоличествоСоставляющихИмениФормы - 1];
				
				Если ФормыОбъектов.Найти(ВидФормы) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// В случае, если открыта форма обработки, то получаем её имя. 
		// Будем открывать форму обработки по этому имени.		 
		Если Содержимое.Количество() > 0 И ФормыРабочихСтолов.Найти(Содержимое[0].ИмяФормы) <> Неопределено Тогда
			ПолноеИмяФормы = Содержимое[0].ИмяФормы;
			ОткрытыеОкна.Добавить(ПолноеИмяФормы);
			КоличествоОкон = КоличествоОкон + 1;
			
			СпискиОтличаются = СпискиОтличаются ИЛИ (ПараметрыПриложения["ОткрытыеОкна"].Найти(ПолноеИмяФормы) = Неопределено);
		Иначе
			// Получим навигационную ссылку на окно. 
			// Навигационная ссылка будет являться ключом к окну.
			НавигационнаяСсылкаОкна = Окно.ПолучитьНавигационнуюСсылку();
			
			Если ЗначениеЗаполнено(НавигационнаяСсылкаОкна) Тогда
				ОткрытыеОкна.Добавить(НавигационнаяСсылкаОкна);
				КоличествоОкон = КоличествоОкон + 1;
				
				СпискиОтличаются = СпискиОтличаются ИЛИ (ПараметрыПриложения["ОткрытыеОкна"].Найти(НавигационнаяСсылкаОкна) = Неопределено);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Эта проверка нужна для того, чтобы не выполнять ненужное сохранение, если 
	// список открытых окон не менялся.
	Если СпискиОтличаются ИЛИ ПараметрыПриложения["ОткрытыеОкна"].Количество() <> КоличествоОкон Тогда
		ПараметрыПриложения["ОткрытыеОкна"] = ОткрытыеОкна;
		
		ОписаниеНастройки = ПриложениеКлиентСервер.ОписаниеНастройкиСпискаОткрытыхОкон();
		ОбщегоНазначенияВызовСервера.СохранитьСистемнуюНастройку(
			ОписаниеНастройки.КлючОбъекта, ОписаниеНастройки.КлючНастроек, 
			ПараметрыПриложения["ОткрытыеОкна"]);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерактивное взаимодействие с пользователем

Процедура НачатьПерезапускТекущегоСеанса(ДополнительныеПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьПерезапускТекущегоСеанса", ПриложениеКлиент);
	ПоказатьВопрос(Оповещение, "Перезапустить текущий сеанс?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

Процедура ОбработатьПредупреждениеЗавершенияРаботыСистемы(ДополнительныеПараметры) Экспорт
	
	ЗавершитьРаботуСистемы(Ложь, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики описаний оповещений

Процедура ЗавершитьПерезапускТекущегоСеанса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПрекратитьРаботуСистемы(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИспользуемыйКлиент(Знач ДоступенВнешнийСайт)
	
	ДанныеКлиента = Новый Структура("ТипКлиента, Браузер, ВерсияБраузера, ОС");
	
	Если ОбщегоНазначенияКлиент.ЭтоWindows() Тогда 
		ОС = "Windows";
	ИначеЕсли ОбщегоНазначенияКлиент.ЭтоLinux() Тогда 
		ОС = "Linux";
	ИначеЕсли ОбщегоНазначенияКлиент.ЭтоMacOS() Тогда 
		ОС = "Mac";
	Иначе
		ОС = "Другая";
	КонецЕсли;               
	
	ДанныеКлиента.ОС = ОС;
	
	#Если ТонкийКлиент Тогда
		ДанныеКлиента.ТипКлиента = "ТонкийКлиент";
	#ИначеЕсли ТолстыйКлиентУправляемоеПриложение Тогда
		ДанныеКлиента.ТипКлиента = "ТолстыйКлиентУправляемоеПриложение";
	#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда
		ДанныеКлиента.ТипКлиента = "ТолстыйКлиентОбычноеПриложение";
	#ИначеЕсли ВебКлиент Тогда
		Если НЕ ДоступенВнешнийСайт Тогда
			ДанныеКлиента.ТипКлиента = "ВебКлиент";
		Иначе
			ДанныеКлиента.ТипКлиента = "ВебКлиент(панель)";
		КонецЕсли;
		
		ТекущийБраузер = ТекущийБраузер();
		
		Если ТекущийБраузер.Версия <> "" Тогда 
			ТекущийБраузер.Версия = СтрРазделить(ТекущийБраузер.Версия, ".")[0];
		КонецЕсли;
		
		ДанныеКлиента.Браузер = ТекущийБраузер.Название; 
		ДанныеКлиента.ВерсияБраузера = ТекущийБраузер.Версия; 
	#КонецЕсли
	
	Возврат ДанныеКлиента;
	
КонецФункции

Процедура НастроитьГлобальныйПоиск()
	
	ПланПоиска = ГлобальныйПоиск.ПолучитьПлан();
	ПланПоиска.Удалить(СтандартныйВидГлобальногоПоиска.Справка);
	ПланПоиска.Удалить(СтандартныйВидГлобальногоПоиска.ИсторияРаботыПользователя);  
	ПланПоиска.Удалить(СтандартныйВидГлобальногоПоиска.ИзбранноеРаботыПользователя); 
	ПланПоиска.Удалить(СтандартныйВидГлобальногоПоиска.СообщенияСистемыВзаимодействия);
	ПланПоиска.Удалить(СтандартныйВидГлобальногоПоиска.ОбсужденияСистемыВзаимодействия);	
	ГлобальныйПоиск.УстановитьПлан(ПланПоиска); 
	ТекстОписания =
	"Введите + для быстрого создания объектов
	| или #тег для поиска по тегам"; 
	ГлобальныйПоиск.УстановитьОписание(ТекстОписания);
	
КонецПроцедуры

Процедура ОбработатьПараметрыЗапуска()
	
	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат;
	КонецЕсли;
		
	// Предназначена для хранения имен параметров и их значений
	СвойстваПараметров = Новый Структура;
	
	// Получение параметров из строки запуска и преобразование в структуру
	НаборПараметровЗапуска = СтрРазделить(ПараметрЗапуска, "&");
	
	Для Каждого Параметр Из НаборПараметровЗапуска Цикл
		СодержимоеПараметра = СтрРазделить(Параметр, "=");
		
		Если СодержимоеПараметра.Количество() > 1 Тогда
			СвойстваПараметров.Вставить(СодержимоеПараметра[0], СодержимоеПараметра[1]);
		КонецЕсли;
	КонецЦикла;
	
	// Обработка параметров
	Для Каждого ОписаниеПараметра Из СвойстваПараметров Цикл
		
		// Обработка параметра ссылки на задачу
		Если ОписаниеПараметра.Ключ = "issue" Тогда
			Задача = ПриложениеВызовСервера.НайтиЗадачуПоНомеру(ОписаниеПараметра.Значение);
			
			Если Задача <> Неопределено Тогда
				ОткрытьФорму("Документ.Задача.ФормаОбъекта", Новый Структура("Ключ", Задача));
			КонецЕсли;
			
		// Открытие отчета ЗадачиТребующиеТестирования из RoketChat или из электронной почты
		ИначеЕсли ОписаниеПараметра.Ключ = "rocket" ИЛИ ОписаниеПараметра.Ключ = "mail" Тогда
			Значение = ОписаниеПараметра.Значение;
			
			Если Значение = "taskfortest" Тогда
				ПараметрыОткрытия = Новый Структура("Инициатор", ОписаниеПараметра.Ключ);
				ОткрытьФорму("Отчет.ЗадачиНаТестирование.Форма.ФормаОтчета", ПараметрыОткрытия,, Новый УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;

КонецПроцедуры

Процедура ПриНачалеРаботыСистемыПослеВыполненияПроверок()
	
	ДанныеКлиента = ИспользуемыйКлиент(ОкноВнешнегоСайта.Доступно);
	
	Результат = ПриложениеВызовСервера.ПриНачалеРаботыСистемыПослеВыполненияПроверок(ТекущаяДата(), ДанныеКлиента); 
	
	ИнструментыКлиент.ПриНачалеРаботыСистемы(Результат);
	
	Настройки = Результат.Настройки;
	ВосстановитьОкна(Настройки.ОткрытыеОкна);                                                
	ИнтеграцияДополнительныхПодсистемКлиент.ПриНачалеРаботыСистемы(Настройки);
	
	НастроитьГлобальныйПоиск();
			
	// Глобальный обработчик из модуля ПриложениеКлиентГлобальный
	ПодключитьОбработчикОжидания("Подключаемый_ПроверкаБлокировкиСеансовИнформационнойБазы", 60);
	
	// Глобальный обработчик из модуля ПриложениеКлиентГлобальный
	ПодключитьОбработчикОжидания("Подключаемый_ПроверкаДинамическогоИзмененияКонфигурацииБазыДанных", 600);
	
	// Глобальный обработчик из модуля ПриложениеКлиентГлобальный
	Если Результат.АвтоматическоеВосстановление Тогда                                                                      
		ПодключитьОбработчикОжидания("Подключаемый_СохранениеСпискаОткрытыхОконКлиентскогоПриложения", 30);
	Иначе 
		ПодключитьОбработчикОжидания("Подключаемый_ПервоеСохранениеСпискаОткрытыхОконКлиентскогоПриложения", 180, Истина);
	КонецЕсли;
	
	// Обработка параметров запуска приложения
	ОбработатьПараметрыЗапуска();
	
	Если ПараметрыПриложения.Получить("ОткрытиеМастераНастройки") Тогда
		ОткрытьФорму("Обработка.МастерПервоначальнойНастройки.Форма",,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

Функция ТекущийБраузер()
	
	Результат = Новый Структура("Название, Версия", "Другой", "");
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Строка = СистемнаяИнформация.ИнформацияПрограммыПросмотра;

	Строка = СтрЗаменить(Строка, ",", ";");

	// Opera
	Идентификатор = "OPR/";
	Позиция = СтрНайти(Строка, Идентификатор, НаправлениеПоиска.СКонца);
	Если Позиция > 0 Тогда
		Результат.Название = "Opera";
		Строка = Сред(Строка, Позиция + СтрДлина(Идентификатор));
		Позиция = СтрНайти(Строка, " ");
		Если Позиция > 0 Тогда
			Строка = СокрЛ(Лев(Строка, Позиция - 1));
			Результат.Версия = Строка;
		Иначе
			Результат.Версия = Строка;
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	Идентификатор = "Edg/"; // Edge
	Позиция = СтрНайти(Строка, Идентификатор);
	Если Позиция > 0 Тогда
		Результат.Название = "Edge";
		Строка = Сред(Строка, Позиция + СтрДлина(Идентификатор));
		Если Не ПустаяСтрока(Строка) Тогда
			Результат.Версия = СокрЛП(Строка);
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	// IE
	Идентификатор = "MSIE"; // v11-
	Позиция = СтрНайти(Строка, Идентификатор);
	Если Позиция > 0 Тогда
		Результат.Название = "IE";
		Строка = Сред(Строка, Позиция + СтрДлина(Идентификатор));
		Позиция = СтрНайти(Строка, ";");
		Если Позиция > 0 Тогда
			Строка = СокрЛ(Лев(Строка, Позиция - 1));
			Результат.Версия = Строка;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;

	Идентификатор = "Trident"; // v11+
	Позиция = СтрНайти(Строка, Идентификатор);
	Если Позиция > 0 Тогда
		Результат.Название = "IE";
		Строка = Сред(Строка, Позиция + СтрДлина(Идентификатор));
		
		Идентификатор = "rv:";
		Позиция = СтрНайти(Строка, Идентификатор);
		Если Позиция > 0 Тогда
			Строка = Сред(Строка, Позиция + СтрДлина(Идентификатор));
			Позиция = СтрНайти(Строка, ")");
			Если Позиция > 0 Тогда
				Строка = СокрЛ(Лев(Строка, Позиция - 1));
				Результат.Версия = Строка;
			КонецЕсли;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;

	// Chrome
	Идентификатор = "Chrome/";
	Позиция = СтрНайти(Строка, Идентификатор);
	Если Позиция > 0 Тогда
		Результат.Название = "Chrome";
		Строка = Сред(Строка, Позиция + СтрДлина(Идентификатор));
		Позиция = СтрНайти(Строка, " ");
		Если Позиция > 0 Тогда
			Строка = СокрЛ(Лев(Строка, Позиция - 1));
			Результат.Версия = Строка;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;

	// Safari
	Идентификатор = "Safari/";
	Если СтрНайти(Строка, Идентификатор) > 0 Тогда
		Результат.Название = "Safari";
		Идентификатор = "Version/";
		Позиция = СтрНайти(Строка, Идентификатор);
		Если Позиция > 0 Тогда
			Строка = Сред(Строка, Позиция + СтрДлина(Идентификатор));
			Позиция = СтрНайти(Строка, " ");
			Если Позиция > 0 Тогда
				Результат.Версия = СокрЛП(Лев(Строка, Позиция - 1));
			КонецЕсли;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;

	// Firefox
	Идентификатор = "Firefox/";
	Позиция = СтрНайти(Строка, Идентификатор);
	Если Позиция > 0 Тогда
		Результат.Название = "Firefox";
		Строка = Сред(Строка, Позиция + СтрДлина(Идентификатор));
		Если Не ПустаяСтрока(Строка) Тогда
			Результат.Версия = СокрЛП(Строка);
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
