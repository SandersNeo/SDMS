///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// TestRail

Процедура ДобавитьЗакрытиеПрогоновTestRail(Задача) Экспорт
	
	Значение = Метаданные.Перечисления.НазначенияДанныхБезопасногоХранилища.ЗначенияПеречисления.Найти("НастройкиПодключенияКTestRail");
	
	Если Значение <> Неопределено Тогда	
		ТипСобытия = Перечисления.ТипыСобытийОчереди.ЗакрытиеПрогоновTestRail;	
		РегистрыСведений.ОчередьСобытийНаОбработку.Добавить(ТипСобытия,, Задача);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Minio

Функция ОпределитьМестоХраненияФайлов() Экспорт

	СохранятьНаСервер = Истина;
	
	Если ПодсистемаСуществует("Minio") Тогда    
		СохранятьНаСервер = НЕ Константы.СохранятьФайлыВMinio.Получить();
	КонецЕсли;
	
	Возврат СохранятьНаСервер;
	
КонецФункции

Процедура СохранитьФайл(Знач ИмяФайла, Знач Данные, Знач Корзина = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(Корзина) Тогда
		Корзина = Константы.КаталогФайловОбъектов.Получить();
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Данные) Тогда
		Данные = ПолучитьИзВременногоХранилища(Данные);
	КонецЕсли;
		
	Модуль = ОбщийМодуль("ИнтеграцияMinio");
	Модуль.СохранитьФайлВMinio(ИмяФайла, Данные, Корзина);
	
КонецПроцедуры

Функция ПолучитьФайл(Знач ИмяФайла, Знач Корзина = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(Корзина) Тогда
		Корзина = Константы.КаталогФайловОбъектов.Получить();
	КонецЕсли;
	
	Модуль = ОбщийМодуль("ИнтеграцияMinio");
	Возврат Модуль.ПолучитьФайлИзMinio(ИмяФайла, Корзина);	
	
КонецФункции

Процедура УдалитьФайл(Знач ИмяФайла, Знач Корзина = "") Экспорт
	
	Модуль = ОбщийМодуль("ИнтеграцияMinio");
	Модуль.УдалитьФайлИзMinio(ИмяФайла, Корзина);	
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// Опрос

// Обработка регламентного задания по закрытию прохождения опроса
//
Процедура ЗакрытиеПрохожденияОпроса() Экспорт

	Если ПодсистемаСуществует("Опрос") Тогда    
		РегистрыСведений.СтатусыПрохожденияОпроса.ЗакрытиеПрохожденияОпроса();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление конфигурации

// Добавляет гиперссылку на открытие дайджеста
//
// Параметры:
//  Форма	 - УправляемаяФорма	 - форма рабочего стола
//  Группа	 - ГруппаФормы		 - группа, куда добавляется элемент
//
Процедура ДобавитьГиперссылкуНаДайджест(Форма, Группа) Экспорт
	
	Если ПодсистемаСуществует("ОбновлениеИнформационнойБазы") Тогда
		
		НоваяКоманда = Форма.Команды.Добавить("ОткрытьИсториюИзмененийСистемы");
		НоваяКоманда.Действие = "ОткрытьИсториюИзмененийСистемы";     
		
		Кнопка = Форма.Элементы.Добавить("ОткрытьИсториюИзмененийСистемы", Тип("КнопкаФормы"), Группа);
		Кнопка.Вид = ВидКнопкиФормы.Гиперссылка;
		Кнопка.ИмяКоманды = "ОткрытьИсториюИзмененийСистемы";	
		Кнопка.Заголовок  = "Дайджест изменений";
		Кнопка.Картинка = БиблиотекаКартинок.Дайджест;
		Кнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик фонового задания "ОбновлениеИнформационнойБазы". У процедуры два
// назначения:
// 1) Первичный поиск активного фонового задания и его запуск, если задание не
//    найдено. В этом случае в параметр ЗапуститьЗадание передается значение
//    Истина.
// 2) Процедура является непосредственным методом фонового задания. В этом случае
//    параметр ЗапуститьЗадание не задается и принимает значение по умолчанию
//    Ложь.
//
// Параметры:
//  ЗапуститьЗадание - Булево - признак необходимости поиска уже запущенного
//	                   фонового задания. И инициация запуска, если фоновое
//                     не найдено.
//
Процедура ОбновлениеИнформационнойБазы(Знач ЗапуститьЗадание = Ложь) Экспорт
	
	Если НЕ ПодсистемаСуществует("ОбновлениеИнформационнойБазы") Тогда
		Возврат;
	КонецЕсли;
	
	// Фоновое задание должно работать только от имени служебного пользователя
	Если НЕ УправлениеДоступом.ЭтоСлужебныйПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка активности фонового задания и запуск
	Если ЗапуститьЗадание Тогда
		СвойстваЗадания = Новый Структура;
		СвойстваЗадания.Вставить("Ключ", "СлужебныеФоновыеЗадания.ОбновлениеИнформационнойБазы");
		СвойстваЗадания.Вставить("Наименование", "Обновление информационной базы");
		СвойстваЗадания.Вставить("ИмяМетода", "ИнтеграцияДополнительныхПодсистем.ОбновлениеИнформационнойБазы");
		
		ОтборФоновыхЗаданий = Новый Структура("Состояние, Ключ", СостояниеФоновогоЗадания.Активно, СвойстваЗадания.Ключ);
		АктивныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФоновыхЗаданий);
		
		Если АктивныеФоновыеЗадания.Количество() = 0 Тогда
			ФоновоеЗадание = ФоновыеЗадания.Выполнить(СвойстваЗадания.ИмяМетода, , СвойстваЗадания.Ключ, СвойстваЗадания.Наименование);
			ФоновоеЗадание.ОжидатьЗавершенияВыполнения();
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// Выполнение процедур после обновления конфигурации БД
	Обработки.ОбновлениеИнформационнойБазы.Создать().ВыполнитьОбновление();
	
КонецПроцедуры

// Актуализирует справочник ТаблицыИнформационнойБазыДляПредставленийSQL
//
Процедура АктуализироватьТаблицыИБ() Экспорт
	
	Если НЕ ПодсистемаСуществует("ОбновлениеИнформационнойБазы") Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.ТаблицыИнформационнойБазыДляПредставленийSQL.ПометитьУдаленныеМетаданные();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Профили квалификаций

// Актуализирует наименование профиля
//
// Параметры:
//  Ссылка - СправочникСсылка.Пользователи - Пользователь 
//
Процедура АктуализироватьНаименованиеПрофиля(Знач Ссылка) Экспорт

	Если ПодсистемаСуществует("КвалификацияСпециалистов") Тогда
		Модуль = ОбщийМодуль("ОценкаКвалификацииСпециалистов"); 
		Модуль.АктуализироватьНаименованиеПрофиля(Ссылка);
	КонецЕсли;

КонецПроцедуры

// Добавляет настройки оповещений по изменениям знаний в зависимости от роли
//
// Параметры:
//  ТаблицаКатегорий  - ТаблицаЗначений - в которую надо добавить настройку
//
Процедура ДополнитьНастройкиОповещений(ТаблицаКатегорий) Экспорт
	
	Если ПодсистемаСуществует("КвалификацияСпециалистов") 
		И УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("УправлениеЗнаниямиДляАттестаций") Тогда
		
		НоваяСтрока = ТаблицаКатегорий.Добавить();
		НоваяСтрока.КатегорияОповещения = Перечисления.КатегорииСообщенийПользователя.ИзменениеЗнанийИВопросов;
		НоваяСтрока.Наименование = "Изменение знаний и вопросов для аттестации";
		НоваяСтрока.СистемаВзаимодействия = Истина;
		НоваяСтрока.ПериодОтправки = Перечисления.ЧастотаОповещенийПользователя.День;
	КонецЕсли;
	
КонецПроцедуры

// Убирает доступность для оповещения по изменениям знаний если подсистема существует
//
// Параметры:
//  Форма - УправляемаяФорма - форма настроек пользователя
//
Процедура ДополнитьУсловноеОформлениеНастроекПользователя(Форма) Экспорт
	
	Если ПодсистемаСуществует("КвалификацияСпециалистов") Тогда 
		
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.ТаблицаДетальныеНастройкиПериод.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДетальныеНастройки.КатегорияОповещения");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.КатегорииСообщенийПользователя.ИзменениеЗнанийИВопросов;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
		
	КонецЕсли;

КонецПроцедуры

// Добавляет настройки оповещений по изменениям знаний в зависимости от роли
//
// Параметры:
//  Роль - роль конфигурации - которую надо добавить или удалить у пользователя
//  Пользователь - СправочникСсылка.Пользователи - пользователь для которого меняется роль
//  УдалениеРоли - Булево - если Ложь, то добавление роли
//
Процедура НастроитьОповещениеОЗнаниях(Знач Роль, Знач Пользователь, УдалениеРоли = Ложь) Экспорт
	
	Если ПодсистемаСуществует("КвалификацияСпециалистов") 
		И Роль = Метаданные.Роли.УправлениеЗнаниямиДляАттестаций Тогда
		
		ПользовательОбъект = Пользователь.ПолучитьОбъект();
		ИзменениеЗнаний = ПользовательОбъект.НастройкиОповещений.Найти(
		Перечисления.КатегорииСообщенийПользователя.ИзменениеЗнанийИВопросов, "КатегорияОповещения");
			
		Если УдалениеРоли И ИзменениеЗнаний <> Неопределено Тогда
			ПользовательОбъект.НастройкиОповещений.Удалить(ИзменениеЗнаний);
			ПользовательОбъект.Записать();

		ИначеЕсли НЕ УдалениеРоли И ИзменениеЗнаний = Неопределено Тогда
			НоваяСтрока = ПользовательОбъект.НастройкиОповещений.Добавить();
			НоваяСтрока.КатегорияОповещения = Перечисления.КатегорииСообщенийПользователя.ИзменениеЗнанийИВопросов;
			НоваяСтрока.СистемаВзаимодействия = Истина;
			НоваяСтрока.ПериодОтправки = Перечисления.ЧастотаОповещенийПользователя.День;			
			ПользовательОбъект.Записать();							
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Настраивает профикль квалификации в форме пользователя
//
// Параметры:
//  Ссылка				 - СправочникСсылка.Пользователь		 - ссылка на пользователя
//  Элемент				 - ПолеВводаФорма						 - полее ввода квалификации
//  ПрофильКвалификации	 - СправочникСсылка.ПрофилиКвалификации	 - значение профиля квалификации
//
Процедура НастроитьПрофильКвалификацииВФормеПользователя(Знач Ссылка, Элемент, ПрофильКвалификации) Экспорт
	
	Элемент.Видимость = ПодсистемаСуществует("КвалификацияСпециалистов"); 
	
	Если Элемент.Видимость Тогда
		ПрофильКвалификации = РегистрыСведений.ЗначенияДополнительныхРеквизитовОбъектов.ЗначениеДополнительногоРеквизита(
			Ссылка, ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.ПрофильКвалификации);  
			
		Массив = Новый Массив;
		Массив.Добавить(ТипЗнч(ПрофильКвалификации));
		Элемент.ОграничениеТипа = Новый ОписаниеТипов(Массив); 
	КонецЕсли;
		
КонецПроцедуры

// Переносит знания старого профиля пользователя в архив
//
// Параметры:
//  Специалист  - СправочникСсылка.Пользователи - Пользователь, для которого происходит изменение профиля квалификации
//  СтарыйПрофиль  - СправочникСсылка.ПрофилиКвалификации - Профиль пользователя до записи
//  НовыйПрофиль  - СправочникСсылка.ПрофилиКвалификации - Профиль пользователя после записи
//
Процедура ПрофильПользователяПриИзменении(Знач Специалист, Знач СтарыйПрофиль, Знач НовыйПрофиль) Экспорт
	
	Если ПодсистемаСуществует("КвалификацияСпециалистов") Тогда
		Модуль = ОбщийМодуль("ОценкаКвалификацииСпециалистов"); 
		Модуль.ПрофильПользователяПриИзменении(Специалист, СтарыйПрофиль, НовыйПрофиль);
	КонецЕсли;                	
			
КонецПроцедуры

// Переносит знания старого профиля пользователей филиала в архив
//
// Параметры:
//  Филиал  - СправочникСсылка.Филиалы - Филиал, для которого происходит изменение профиля квалификации
//  НовыйПрофиль  - СправочникСсылка.ПрофилиКвалификации - Профиль филиала после записи
//
Процедура ПрофильФилиалаПриИзменении(Знач Филиал, Знач НовыйПрофиль) Экспорт
	
	Если ПодсистемаСуществует("КвалификацияСпециалистов") Тогда
		Модуль = ОбщийМодуль("ОценкаКвалификацииСпециалистов"); 
		Модуль.ПрофильФилиалаПриИзменении(Филиал, НовыйПрофиль);
	КонецЕсли;   
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Рабочий календарь 

// Изменяет запрос списка видов деятельности услуг
//
// Параметры:
//  Запрос		 - Запрос						 - изменяемый запрос
//  Собрание	 - СправочникСсылка.Собрания	 - собрание
//  Пользователь - СправочникСсылка.Пользователь - пользователь
//
Процедура ИзменитьЗапросСпискаВидовДеятельностиУслуг(Запрос, Знач Собрание, Знач Пользователь = Неопределено) Экспорт
	
	Если ПодсистемаСуществует("РабочийКалендарь") Тогда             		
		Модуль = ОбщийМодуль("РаботаСРабочимКалендаремСервер");
		Модуль.ИзменитьЗапросСпискаВидовДеятельностиУслуг(Запрос, Собрание, Пользователь);
	Иначе
		Запрос.УстановитьПараметр("ПрименяетсяДляСобрания", ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.ПустаяСсылка());
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСобрание", "ИСТИНА");	
	КонецЕсли;
			
КонецПроцедуры

// Функция - Обработать создание пользователя
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователь - пользователь
// 
// Возвращаемое значение:
//  Структура - Успешно, Сообщение
//
Функция ОбработатьСозданиеПользователя(Пользователь) Экспорт    
	
	Результат = Новый Структура("Успешно, Сообщение", Истина, "");
	
	Если ПодсистемаСуществует("РабочийКалендарь") Тогда
		РезультатДействия = ДатьПравоНаЧтениеOutlook(Пользователь); 
		ЗаполнитьЗначенияСвойств(Результат, РезультатДействия);
		
		Если НЕ Результат.Успешно Тогда 
			ЗаписьЖурналаРегистрации("ДатьПравоНаЧтениеOutlook", УровеньЖурналаРегистрации.Ошибка,,, Результат.Сообщение); 
		КонецЕсли;                                         
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получить собрание трудозатраты
//
// Параметры:
//  Трудозатрата - 	ДокументСсылка.Трудозатраты - документы Трудозатраты
// 
// Возвращаемое значение:
//  Собрание - СправочникСсылка.Собрание
//
Функция ПолучитьСобраниеТрудозатраты(Знач Трудозатрата) Экспорт  

	Результат = Неопределено;
	
	Если ПодсистемаСуществует("РабочийКалендарь") Тогда 	
		Модуль = ОбщийМодуль("РаботаСРабочимКалендаремСервер");
		Результат = Модуль.ПолучитьСобраниеТрудозатраты(Трудозатрата);
	КонецЕсли;              
	
	Возврат Результат;
	
КонецФункции   

// Обрабатывает собрание трудозатраты перед записью
//
// Параметры:
//  Трудозатрата - ДокументОбъект.Трудозатраты	 - документы Трудозатраты
//  Собрание	 - СправочникСсылка.Собрание	 - Ссылка на собрание
//  Объект		 - ОпределяемыйТип.ОбъектТрудозатрат - Объект трудозатраты
//
Процедура ОбработатьСобраниеВТрудозатратах(Знач Трудозатрата, Знач Собрание, Объект) Экспорт  

	Если ПодсистемаСуществует("РабочийКалендарь") Тогда 	              
		Модуль = ОбщийМодуль("РаботаСРабочимКалендаремСервер");
		Модуль.ОбработатьСобраниеВТрудозатратах(Трудозатрата, Собрание, Объект);
	КонецЕсли;              
	
КонецПроцедуры 

// Сохранить собрание трудозатраты
//
// Параметры:
//  Трудозатрата - ДокументОбъект.Трудозатраты	 - документы Трудозатраты
//  Собрание	 - СправочникСсылка.Собрание	 - Ссылка на собрание
//
Процедура СохранитьСобраниеВТрудозатратах(Знач Трудозатрата, Знач Собрание) Экспорт  
	
	Если ПодсистемаСуществует("РабочийКалендарь") Тогда 	              
		Модуль = ОбщийМодуль("РаботаСРабочимКалендаремСервер");
		Модуль.СохранитьСобраниеВТрудозатратах(Трудозатрата, Собрание);
	КонецЕсли;
	
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// Jira

// Добавляет событие для создания инцидента в Jira
//
// Параметры:
//  Ссылка	- ДокументСсылка - Заявка или задача, по которой создается инцидент
//	ДанныеЗадания - Структура, Неопределено - структура с данными для задания или неопределено
//		* Система - СправочникСсылка.СистемыУчета - ссылка на систему
//		* Филиал - СправочникСсылка.Филиалы - ссылка на филиал
//
Процедура ДобавитьЗаданиеСоздатьИнцидентJira(Знач Ссылка, Знач ДанныеЗадания = Неопределено) Экспорт
	
	Если ПодсистемаСуществует("Jira") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияJira");
		Модуль.ДобавитьЗаданиеСоздатьИнцидентJira(Ссылка, ДанныеЗадания);
	КонецЕсли;

КонецПроцедуры
		
// Добавляет в очередь событие синхронизации с Jira
//
// Параметры:
//  Ссылка	- ДокументСсылка - Заявка или задача, по которой создается инцидент
//	ДанныеЗадания - Структура, Неопределено - структура с данными для задания или неопределено
//		* ИзменилсяИсполнитель - Булево - признак изменения исполнителя
//		* ИзменилосьНазначение - Булево - признак изменения назначения
//		* ОписаниеИзменилось - Булево - признак изменения описания
//
Процедура ДобавитьЗаданиеСинхронизироватьСJira(Знач Ссылка, Знач ДанныеЗадания = Неопределено) Экспорт

	Если ПодсистемаСуществует("Jira") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияJira");
		Модуль.ДобавитьЗаданиеСинхронизироватьСJira(Ссылка, ДанныеЗадания);
	КонецЕсли;
	
КонецПроцедуры

// Ищет определенное совйство в данных, определяющий что изменения инициированы Jira
//
// Параметры:
//  Данные	 - Структура - проивзольная структура, по которой ищется свойство
// 
// Возвращаемое значение:
//  Булево - флаг того, что изменения инициированы Jira
//
Функция ИзмененияИнициированыJira(Знач Данные) Экспорт 
	
	Результат = Ложь;
	
	Если ПодсистемаСуществует("Jira") Тогда
		Данные.Свойство("ИзмененияИнициированыJira", Результат);
		
		Если ТипЗнч(Результат) <> Тип("Булево") Тогда 
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// В случае необходимости решает или отклоняет инцидент в Jira 
//
// Параметры:
//  Заявка		 - ДокументСсылка.ЗаявкаНаразработку - Заявка, которую нужно синхронизировать в Jira
//  Отклонение	 - Булево - Флаг того, что заявку нужно отклонить  
//
Процедура НачатьРешениеИнцидента(Знач Заявка, Знач Отклонение = Ложь) Экспорт

	Если ПодсистемаСуществует("Jira") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияJira");
		Модуль.НачатьРешениеИнцидента(Заявка, Отклонение);
	КонецЕсли;

КонецПроцедуры

// Обновить инцидент jira заявкой
//
// Параметры:
//  Заявка - ДокументСсылка.ЗаявкаНаРазработку - ссылка на заявку
//
Процедура ОбновитьИнцидентJiraЗаявкой(Знач Заявка) Экспорт
 	
	Если ПодсистемаСуществует("Jira") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияJira");
		Модуль.ОбновитьИнцидентJiraЗаявкой(Заявка);
	КонецЕсли;

КонецПроцедуры

// Отправляет в Jira JSON с комментарием
//
// Параметры:
//  НомерИнцидента	 - Строка							 - номер инцидента в Jira
//  Комментарий		 - Строка							 - текст комментария
//  Сервер			 - СправочникСсылка.СерверыJira		 - ссылка на сервер Jira
//  ОбъектСсылка	 - ДокументСсылка.ЗаявкаНаРазработку, ДокументСсылка.Задача - ссылка на объект для
//		инцидента которого нужно отправить комментарий в Jira. Если ошибка возникла при создании объекта,
//		данный параметр будет пустой и нужно использовать
//
Процедура ОтправитьКомментарийВJira(Знач НомерИнцидента, Знач Комментарий, Знач Сервер = Неопределено, 
		Знач ОбъектСсылка = Неопределено) Экспорт
	
	Если ПодсистемаСуществует("Jira") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияJira");
		
		Если Сервер = Неопределено Тогда  
			Менеджер = ОбщийМодуль("Справочники.СерверыJira");
			Сервер = Менеджер.ПустаяСсылка();
		КонецЕсли;
		
		Модуль.ОтправитьКомментарийВJira(НомерИнцидента, Сервер, Комментарий, ОбъектСсылка);
	КонецЕсли;

КонецПроцедуры

// Проверяет наличие автора комментария Jira в реквизите
// с дополнительной информацией, в случае его наличия
// дополняет структуру комментария.
//
// Параметры:
//  СтруктураКомментария - Структура - данные комментария 
//  ПочтаJira - Строка - Почта пользователя в Jira
//
Процедура ПроверитьАвтора(СтруктураКомментария, Знач ПочтаJira) Экспорт
	
	Если ПодсистемаСуществует("Jira") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияJira");
		Модуль.ПроверитьАвтора(СтруктураКомментария, ПочтаJira);
	КонецЕсли;

КонецПроцедуры

// Возвращает признак необходимости создания инцидента в Jira
//
// Параметры:
//  Филиал - СправочникСсылка.Филиалы - Ссылка на филиал 
// 
// Возвращаемое значение:
//  Булево - Истина, если нужно создать инцидент, иначе Ложь
//
Функция СоздаватьИнцидент(Знач Филиал) Экспорт
	
	Результат = Ложь;
	
	Если ПодсистемаСуществует("Jira") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияJira");
		Результат = Модуль.СоздаватьИнцидент(Филиал);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Создает фоновое задание для отправки комментария в jira
//
// Параметры:
//  Объект - ДокументСсылка.ЗаявкаНаРазработку, ДокументСсылка.Задача - ссылка на объект для которого нужно отправить комментарий в Jira. 
//  Комментарий - Строка - Комментарий
//  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор фонового задания 
//
Процедура СоздатьЗаданиеОтправитьКомментарийВJira(Знач Объект, Знач Комментарий, Знач УникальныйИдентификатор) Экспорт 
	
	Если ПодсистемаСуществует("Jira") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияJira");
		Модуль.СоздатьЗаданиеОтправитьКомментарийВJira(Объект, Комментарий, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

// Создает и заполняет номер инцидента jira
//
// Параметры:
//  Форма	 - УправляемаяФорма	 - форма задачи
//
Процедура СоздатьЗаполнитьНомерИнцидентаJira(Форма) Экспорт 
	
	Если ПодсистемаСуществует("Jira") Тогда		
		Модуль = ОбщийМодуль("ИнтеграцияJira");
		Модуль.СоздатьЗаполнитьНомерИнцидентаJira(Форма); 	 
	КонецЕсли;
	
КонецПроцедуры

// Создает и заполняет колонку для номера инцидента jira в коллекции формы 
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - форма заявки
//  ИмяКоллекцииФормы	 - Строка - имя коллекции формы, в которую нужно добавить колонку
//  ЭлементФормыРодитель - ГруппаФормы, ТаблицаФормы - родитель для добавляемого элемента формы
//
Процедура СоздатьЗаполнитьКолонкуНомерИнцидентаJira(Форма, ИмяКоллекцииФормы, ЭлементФормыРодитель) Экспорт
	
	Если ПодсистемаСуществует("Jira") Тогда	
		Модуль = ОбщийМодуль("ИнтеграцияJira");
		Модуль.СоздатьЗаполнитьКолонкуНомерИнцидентаJira(Форма, ИмяКоллекцииФормы, ЭлементФормыРодитель);		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// TeamCity

// Устаналивает видимость команды запуска сборки team city
//
// Параметры:
//  Форма - УправляемаяФорма	 - форма рабочего стола 
//  РольПользователя - СправочникСсылка.РолиПользователей - Роль пользователя
//  Статус - СправочникСсылка.СтатусыОбъектов - Статус задачи 
//
Процедура ВозможноЗапускатьСборкуTeamCity(Форма, Знач РольПользователя, Знач Статус) Экспорт
		
	Если ПодсистемаСуществует("TeamCity") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияTeamCity");
		Модуль.ВозможноЗапускатьСборкуTeamCity(Форма, РольПользователя, Статус);
	КонецЕсли;

КонецПроцедуры

// Добавляет гиперссылку на открытие очереди TeamCity
//
// Параметры:
//  Форма - УправляемаяФорма - форма рабочего стола
//  Группа - ГруппаФормы - группа, куда добавляется элемент
//
Процедура ДобавитьГиперссылкуTeamCity(Форма, Группа) Экспорт
	
	Если ПодсистемаСуществует("TeamCity") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияTeamCity");
		Модуль.ДобавитьГиперссылкуTeamCity(Форма, Группа);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты team city
//
// Параметры:
//  Форма - УправляемаяФорма - форма задачи 
//  ДопРеквизиты - ТаблицаЗначений - таблица с данными доп реквизитов
//
Процедура ЗаполнитьДополнительныеРеквизитыTeamCity(Форма, ДопРеквизиты) Экспорт
	
	Если ПодсистемаСуществует("TeamCity") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияTeamCity");
		Модуль.ЗаполнитьДополнительныеРеквизитыTeamCity(Форма, ДопРеквизиты);
	КонецЕсли;
			
КонецПроцедуры

// Добавляет задание сборки теста в ОчередьЗадачДляTeamCity
//
// Параметры:
//  Ссылка - ДокументСсылка.Задача - Ссылка на задачу 
//  СписокСтран - СписокЗначений - Список выбора пользователя
// 
// Возвращаемое значение:
//  Строка - Текст результата выполнения метода
//
Функция ЗапуститьСборкуTeamCityНаСервере(Знач Ссылка, Знач СписокСтран) Экспорт

	Если ПодсистемаСуществует("TeamCity") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияTeamCity");
		ТекстСообщения = Модуль.ЗапуститьСборкуTeamCityНаСервере(Ссылка, СписокСтран);
	Иначе 
		ТекстСообщения = "Данный метод недоступен, требуется подсистема ""TeamCity"""
	КонецЕсли;
		
	Возврат ТекстСообщения;

КонецФункции

// Обновляет значение дополнительного реквизита для задачи 
//
// Параметры:
//  Ссылка - ДокументСсылка.Задача - Ссылка на задачу
//  РезультатТестирования - Строка - Новое значение результата тестирования
//
Функция ОбновитьРезультатПоследнегоТестирования(Знач Ссылка, Знач РезультатТестирования) Экспорт
	
	Результат = Новый Структура("Успешно, ТекстОшибки", Истина, "");

	Если ПодсистемаСуществует("TeamCity") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияTeamCity");
		Результат = Модуль.ОбновитьРезультатПоследнегоТестирования(Ссылка, РезультатТестирования);
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

// Запускает обработку очереди задач для team city
//
Процедура ОбработатьОчередьЗадачДляTeamCity() Экспорт

	Если ПодсистемаСуществует("TeamCity") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияTeamCity");
		Модуль.ОбработатьОчередьЗадачДляTeamCity();
	КонецЕсли;
	
КонецПроцедуры

// Создает и заполняем реквизиты и элементы TeamCity
//
// Параметры:
//  Форма	 - УправляемаяФорма	 - форма задачи
//
Процедура ПодключитьTeamCity(Форма) Экспорт 

	Если ПодсистемаСуществует("TeamCity") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияTeamCity");
		Модуль.ПодключитьTeamCity(Форма);
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Trello

// Добавляет объект в очередь на синхронизацию с трелло
//
// Параметры:
//  Ссылка - ДокументСсылка - ссылка на документ
//
Процедура АктуализироватьВTrello(Знач Ссылка) Экспорт
	
	Если ПодсистемаСуществует("Trello") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияTrello");
		Модуль.АктуализироватьВTrello(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет задачу в очередь на синхронизацию с трелло
//
// Параметры:
//  Задача - ДокументСсылка.Задача - ссылка на задачу
//  ДоскаTrello - СправочникСсыдка.ДоскиTrello - доска в трелло
//
Процедура АктуализироватьЗадачуВTrello(Знач Задача, Знач ДоскаTrello = Неопределено) Экспорт
	
	Если ПодсистемаСуществует("Trello") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияTrello");
		Модуль.АктуализироватьЗадачуВTrello(Задача, ДоскаTrello);
	КонецЕсли;	

КонецПроцедуры

// Выгружает данные в trello
//
Процедура ВыгрузитьВTrello() Экспорт
	
	Если ПодсистемаСуществует("Trello") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияTrello");
		Модуль.ВыгрузитьВTrello();
	КонецЕсли;	
	
КонецПроцедуры

// Добавляет событие для отправки комментария в Trello.
//
// Параметры:
//  Ссылка - ДокументСсылка.Задача - объект
//  ТекстКомментария - Строка - текст комментария без HTML-тегов
//
Процедура ДобавитьЗаданиеОтправитьКомментарийВTrello(Знач Ссылка, Знач ТекстКомментария) Экспорт  
	
	Если ПодсистемаСуществует("Trello") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияTrello");
		Модуль.ДобавитьЗаданиеОтправитьКомментарийВTrello(Ссылка, ТекстКомментария);
	КонецЕсли;

КонецПроцедуры

// Добавляет в очередь событие актуализации в Trello
//
// Параметры:
//  Ссылка - ДокументСсылка.ЗаявкаНаРазработку - сслыка на объект
//
Процедура ДобавитьЗаданиеАктуализироватьВTrello(Знач Ссылка) Экспорт
	
	Если ПодсистемаСуществует("Trello") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияTrello");
		Модуль.ДобавитьЗаданиеАктуализироватьВTrello(Ссылка);
	КонецЕсли;
	
КонецПроцедуры 

// Настраивает список выбора доски trello
//
// Параметры:
//  Форма	 - УправляемаяФорма			 - форма объекта
//  Филиал	 - СправочникСсылка.Филиалы	 - филал доски
//  Очищать	 - Булево					 - фалг, что нужно очистить доску на форме
//
Процедура НастроитьСписокВыбораДоскаTrello(Форма, Филиал, Очищать = Ложь) Экспорт  
	
	Если ПодсистемаСуществует("Trello") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияTrello");
		ИмяРеквизита = Модуль.ПолучитьИмяРеквизитаДоски(); 
		
		Если Форма.Элементы.Найти(ИмяРеквизита) <> Неопределено Тогда	
			Модуль.НастроитьСписокВыбораДоскаTrello(Форма, Филиал, Очищать);
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры
	
// Дополнительная обработка дополнительного реквизита Доска trello
//
// Параметры:
//  Форма	 - УправляемаяФорма			 - форма объекта
//  Филиал	 - СправочникСсылка.Филиалы	 - филал доски
//
Процедура ОбработатьСозданныйЭлементФормы(Форма, Филиал = Неопределено) Экспорт

	Если ПодсистемаСуществует("Trello") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияTrello");
		Модуль.ОбработатьСозданныйЭлементФормы(Форма, Филиал);
	КонецЕсли;

КонецПроцедуры

// Отправляает коментарий в trello
//
// Параметры:
//  ТекстКомментария - Строка - Текст комментария 
//  Ссылка - ДокументСсылка - ссылка на документ
//
Процедура ОтправитьКомментарийВTrello(Знач ТекстКомментария, Знач Ссылка) Экспорт
	
	Если ПодсистемаСуществует("Trello") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияTrello");
		Модуль.ОтправитьКомментарийВTrello(ТекстКомментария, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак требуется ли синхронизации с trello для филиала
// 
// Возвращаемое значение:
//  Булево - Истина, если требуется, иначе Ложь
//
Функция ПроверитьНастройкуСинхронизацииTrello() Экспорт  
	
	Результат = Ложь;
	
	Если ПодсистемаСуществует("Trello") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияTrello");
		Результат = Модуль.ПроверитьНастройкуСинхронизацииTrello();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Создает кнопку выгрузка в trello в Спринте
//
// Параметры:
//  Форма						 - УправляемаяФорма	 - форма спринта
//  ЭтоСпринтВнутреннееЗадание	 - Булево			 - флан того, что это спринт по внутренним заданиям
//
Процедура СоздатьКнопкуВыгрузкаВTrello(Форма, ЭтоСпринтВнутреннееЗадание) Экспорт 
	
	Если ПодсистемаСуществует("Trello") Тогда
		
		ИнтеграцияСTrello = ПолучитьФункциональнуюОпцию("ИнтеграцияСTrello");
		
		Если НЕ ИнтеграцияСTrello Тогда 
			Возврат;
		КонецЕсли;
	
		НастройкаTrello = ПланыВидовХарактеристик.ВидыНастроекФилиалов.СинхронизацияTrello;		
		Видимость = НЕ ЭтоСпринтВнутреннееЗадание 
			И РегистрыСведений.НастройкиФилиалов.ЗначениеНастройки(Форма.Объект.Филиал, НастройкаTrello);
		
		Если Видимость Тогда	
				
			Элементы = Форма.Элементы;			
			НоваяКоманда = Форма.Команды.Добавить("ВыгрузитьВTrello");
			НоваяКоманда.Действие = "ВыгрузитьВTrello";     
			НоваяКоманда.Заголовок = "Выгрузить";
			
			Кнопка = Элементы.Добавить("КнопкаВыгрузкаВTrello", Тип("КнопкаФормы"), Элементы.ГруппаИнтеграция);
			Кнопка.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
			Кнопка.ИмяКоманды = "ВыгрузитьВTrello";	
			Кнопка.Картинка = БиблиотекаКартинок.Trello;
			Кнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

// Установливает параметры выбора доски trello
//
// Параметры:
//  Форма			 - УправляемаяФорма	 - форма объекта
//  Идентификатор	 - Строка			 - идентификатор доски
//
Процедура УстановитьПараметрыВыбораДоскиTrello(Форма, Идентификатор) Экспорт
	
	Если ПодсистемаСуществует("Trello") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияTrello");
		Модуль.УстановитьПараметрыВыбораДоскиTrello(Форма, Идентификатор);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Габаритное планирование

// Записывает новое значение плана.
//
// Параметры:
//  Ссылка - СправочникСсылка.Проекты - Объект планирования
//  ДополнительныеСвойства - Структура - дополнительные свойства объекта
//
Процедура ЗафиксироватьИзменениеПланаГабаритногоПланирования(Знач Ссылка, ДополнительныеСвойства) Экспорт
	
	Если ПодсистемаСуществует("ГабаритноеПланирование") И ДополнительныеСвойства.Свойство("ИзменилсяПланГабаритноеПланирование") Тогда
		РегистрыСведений.ПланируемыеСлотыГабаритногоПланирования.ЗаписатьПлан(Ссылка, ДополнительныеСвойства.ПланГабаритноеПланирование);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет существование подсистемы "ГабаритноеПланирование" и получает план габаритного планирования по объекту
// 
// Параметры:
//  Ссылка - СправочникСсылка.Проекты - Объект планирования
//
// Возвращаемое значение:
//  План - Число - 0, см "РегистрыСведений.ПланируемыеСлотыГабаритногоПланирования.ПолучитьПлан()".
//
Функция ПолучитьПланГабаритногоПланирования(Знач Ссылка) Экспорт
	
	План = 0;
	
	Если ПодсистемаСуществует("ГабаритноеПланирование") Тогда
		План = РегистрыСведений.ПланируемыеСлотыГабаритногоПланирования.ПолучитьПлан(Ссылка)
	КонецЕсли;
	
	Возврат План;
	
КонецФункции

// Проверяет для проекта есть ли изменения реквизита "ПланГабаритноеПланирование", результат передаётся в структуру
//  ДополнительныеСвойства.
//
// Параметры:
//  Ссылка - СправочникСсылка.Проекты - Объект планирования
//  ДополнительныеСвойства - Структура - дополнительные свойства объекта
//
Процедура ПроверитьИзменениеПланаГабаритногоПланирования(Знач Ссылка, ДополнительныеСвойства) Экспорт
	
	Если ПодсистемаСуществует("ГабаритноеПланирование") И ДополнительныеСвойства.Свойство("ПланГабаритноеПланирование") Тогда
		
		ПредыдущийПланГабаритноеПланирование = РегистрыСведений.ПланируемыеСлотыГабаритногоПланирования.ПолучитьПлан(Ссылка);
		
		Если ДополнительныеСвойства.ПланГабаритноеПланирование <> ПредыдущийПланГабаритноеПланирование Тогда
			ДополнительныеСвойства.Вставить("ИзменилсяПланГабаритноеПланирование");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Включает возможность управлять признаком использования габаритного планирования в направлении разработки.
//
// Параметры:
//  ЭлементФормы - ПолеФормы - поле флажка ИспользоватьГабаритноеПланирование на форме элемента справочника НаправленияРазработки. 
//
Процедура НастроитьДоступностьИспользованияГабаритногоПланирования(ЭлементФормы) Экспорт

	ЭлементФормы.Видимость = ПодсистемаСуществует("ГабаритноеПланирование");	
	
КонецПроцедуры

// Добавляет вид очереди "Габаритное планирование" в список видов очереди, 
// если направление филиала текущего пользователя использует этот функционал. 
//
// Параметры:
//  ЭлементФормыВидыОчереди	 - ПолеФормы - поле формы, в список выбора которого будет добавляться вид очереди.
//
Процедура ДобавитьВидОчередиГабаритноеПланирование(ЭлементФормыВидыОчереди) Экспорт
	
	Если ПодсистемаСуществует("ГабаритноеПланирование") Тогда	
		Модуль = ОбщийМодуль("ГабаритноеПланирование");
		Модуль.ДобавитьВидОчередиГабаритноеПланирование(ЭлементФормыВидыОчереди);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в очередь событие пересчета филиала тестирования для габаритного планирования
//
// Параметры:
//  Объект	 - Справочник.Филиалы	 - сслыка на объект
//  Данные	 - Структура			 - параметры очереди
//
Процедура ДобавитьЗаданиеПоПересчетуГабаритногоПланирования(Знач Объект, Знач Данные) Экспорт
	
	Если ПодсистемаСуществует("ГабаритноеПланирование") Тогда
		Модуль = ОбщийМодуль("ГабаритноеПланирование");
		Модуль.ДобавитьЗаданиеПоПересчетуГабаритногоПланирования(Объект, Данные);
	КонецЕсли;
		
КонецПроцедуры

// Определяет, нужно ли добавлять заявку в очередь ГабаритноеПланирование
//
// Параметры:
//  Заявка	 - ДокументСсылка.ЗаявкаНаРазработку. 
//  Филиал	 - СправочникСсылка.Филиалы.
// 
// Возвращаемое значение:
//  Булево.
//
Функция ДобавлятьЗаявкуВГабаритноеПланирование(Знач Заявка, Знач Филиал) Экспорт
	
	Добавлять = Ложь;
	
	Если ПодсистемаСуществует("ГабаритноеПланирование") Тогда
		Модуль = ОбщийМодуль("ГабаритноеПланирование");
		Добавлять = Модуль.ДобавлятьЗаявкуВГабаритноеПланирование(Заявка, Филиал);
	КонецЕсли; 
	
	Возврат Добавлять;
	
КонецФункции

// Для вида очереди "Габаритное планирование" добавляет раздел габаритного планирования
// заявок к исходному результату запроса.
//
// Параметры:
//  РезультатЗапроса - РезультатЗапроса - исходный результат запроса с данными по заявкам. 
//  ВидОчереди		 - ПеречислениеСсылка.ВидыОчереди.
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - для вида очереди "Габаритное планирование" возвращает выборку заявок, 
//								дополненную разделами габаритного планирования. 
//								Для остальных видов очереди возвращает выборку из исходного результата запроса.
//
Функция ДополнитьИсточникДаннымиГабаритногоПланирования(Знач РезультатЗапроса, ВидОчереди) Экспорт 

	Если ПодсистемаСуществует("ГабаритноеПланирование") Тогда
		Модуль = ОбщийМодуль("ГабаритноеПланирование");
		Модуль.ДополнитьИсточникДаннымиГабаритногоПланирования(РезультатЗапроса, ВидОчереди);
	КонецЕсли; 
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

// Возвращает признак, что тип значения объекта относится к подсистеме габаритное планирования
//
// Параметры:
//  Ссылка	 - ДокументСсылка	 - Ссылка на документ
// 
// Возвращаемое значение:
//  Булево - Истина, если объект относится к объектам подсистемы, иначе Ложь
//
Функция ЭтоОбъектГабаритногоПланирования(Знач Ссылка) Экспорт
	
	Результат = Ложь;

	Если ПодсистемаСуществует("ГабаритноеПланирование") Тогда
		Модуль = ОбщийМодуль("ГабаритноеПланирование");
		Результат = Модуль.ЭтоОбъектГабаритногоПланирования(Ссылка);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Удаляет планирование ресурсов по объекту
//
// Параметры:
//  Ссылка	 - ДокументСсылка.ЗаявкаНаРазработку - Объект габаритного планирования
//
Процедура УдалитьПланированиеРесурсовПоОбъекту(Ссылка) Экспорт
	
	Если ПодсистемаСуществует("ГабаритноеПланирование") Тогда
		Документы.ПланированиеЗанятостиРесурсов.УдалитьПланированиеРесурсовПоОбъекту(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интеграция с УБД 

// Добавляет на форму элемента справочника "Услуги" страницу, содержащую 
// таблицу с идентификаторами услуги в разрезе стран.
//
// Параметры:
//  Форма				 - УправляемаяФорма.   
//  ЭлементФормыРодитель - ГруппаФормы - элемент, который будет родителем для добавляемого элемента.  
//
Процедура СоздатьЗаполнитьИдентификаторыУслуги(Форма, ЭлементФормыРодитель) Экспорт  

	Если ПодсистемаСуществует("УБД") Тогда  
		Модуль = ОбщийМодуль("ИнтеграцияУБД");
		Модуль.СоздатьЗаполнитьИдентификаторыУслуги(Форма, ЭлементФормыРодитель);
	КонецЕсли;
	
КонецПроцедуры 

// Записывает идентификаторы услуги из таблицы на форме в регистр
//
// Параметры:
//  Форма - УправляемаяФорма - форма элемента справочника Услуги. 
//  Объект - СправочникСсылка.Услуги
Процедура ЗаписатьИдентификаторыУслуги(Форма, Объект) Экспорт
	
	Если ПодсистемаСуществует("УБД") Тогда  
		Модуль = ОбщийМодуль("ИнтеграцияУБД");
		Модуль.ЗаписатьИдентификаторыУслуги(Форма, Объект);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обратная связь

Функция ДоступностьИзмененияПочты(Объект, ДоступнаРольАдминистратор) Экспорт
	
	Если ПодсистемаСуществует("ОбратнаяСвязь") Тогда
		ПользовательТехПоддержки = (Объект.Ссылка = Константы.ПользовательТехПоддержки.Получить());
		ЭтоНовый = Объект.Ссылка.Пустая();
		
		РазрешеноРедактированиеПочты = (ДоступнаРольАдминистратор И (ЭтоНовый ИЛИ ПользовательТехПоддержки));
	Иначе
		РазрешеноРедактированиеПочты = Истина;
	КонецЕсли;
	
	Возврат РазрешеноРедактированиеПочты;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Оценка производительности

// Завершает замер времени ключевой операции
// и записывает результат в регистр сведений ЗамерыВремени.
//
// Параметры:
// 	КлючеваяОперация	- СправочникСсылка.КлючевыеОперации, Строка	- ключевая операция.
//	ВремяНачала			- Число										- универсальная дата в миллисекундах,
//								  				  					  возвращаемая при начале замера функцией ОценкаПроизводительности.НачатьЗамерВремени.
//	ВесЗамера			- Число										- количественный показатель замера, например количество строк в документе.
//	Комментарий			- Строка, Соответствие						- произвольная информация замера.
//
Процедура ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала, ВесЗамера = 1, Комментарий = Неопределено) Экспорт
	
	Если ПодсистемаСуществует("ОценкаПроизводительности") Тогда
		Модуль = ОбщийМодуль("ОценкаПроизводительности");
		Модуль.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала, ВесЗамера, Комментарий);
	КонецЕсли;
	
КонецПроцедуры

// Начинает замер времени ключевой операции. Закончить замер нужно явно вызовом
// процедуры ЗакончитьЗамерВремени или ЗакончитьЗамерВремениТехнологический.
//
// Возвращаемое значение:
//	Число(14,0) - время UTC начала с точностью до миллисекунд.
//
Функция НачатьЗамерВремени() Экспорт
	
	ВремяНачала = 0;
	
	Если ПодсистемаСуществует("ОценкаПроизводительности") Тогда
		Модуль = ОбщийМодуль("ОценкаПроизводительности");
		ВремяНачала = Модуль.НачатьЗамерВремени();
	КонецЕсли;
	
	Возврат ВремяНачала;
	
КонецФункции     

// Процедура обработки регламентного задания по очистке регистров замеров
Процедура ОчиститьРегистрыЗамерыВремени() Экспорт  
	
	Если ПодсистемаСуществует("ОценкаПроизводительности") Тогда
		Модуль = ОбщийМодуль("ОценкаПроизводительности");
		Модуль.ОчиститьРегистрыЗамерыВремени();
	КонецЕсли;
	
КонецПроцедуры    

// Установливает значение параметра сеанса
//
// Параметры:
//  УстановленныеПараметры	 - Массив	 - массив установленых параметров
//
Процедура УстановитьЗначениеПараметраСеанса(УстановленныеПараметры) Экспорт
	
	Если ПодсистемаСуществует("ОценкаПроизводительности") Тогда    
		Модуль = ОбщийМодуль("ОценкаПроизводительностиСлужебный");
		ПараметрыСеанса.КомментарийЗамераВремени = Модуль.ПолучитьКомментарийЗамераВремени();
		УстановленныеПараметры.Добавить("КомментарийЗамераВремени");
	КонецЕсли;
	
КонецПроцедуры    

// Процедура обработки регламентного задания по выгрузке данных
//
// Параметры:
//  КаталогиЭкспорта - Структура	 - Структура со значением типа Массив.
//  ДопПараметры	 - Структура	 - Дополнительные параметры 
//
Процедура ЭкспортОценкиПроизводительности(КаталогиЭкспорта, ДопПараметры = Неопределено) Экспорт
	
	Если ПодсистемаСуществует("ОценкаПроизводительности") Тогда
		Модуль = ОбщийМодуль("ОценкаПроизводительности");
		Модуль.ЭкспортОценкиПроизводительности(КаталогиЭкспорта, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка изменения объекта

// Добавить исключаемые объекты
// 
// Параметры:
//  Ссылка - СправочникСсылка.Проекты, ДокументСсылка.ВнутреннееЗадание - объект
//  ОбъектОснование - СправочникСсылка.Проекты, ДокументСсылка.ВнутреннееЗадание - основание объекта
Процедура ДобавитьИсключаемыеОбъекты(Ссылка, ОбъектОснование) Экспорт
	
	Если ПодсистемаСуществует("ЮридическиеЛица") И ЗначениеЗаполнено(ОбъектОснование) Тогда
		РегистрыСведений.ИсключаемыеИзВыполненныхРаботОбъекты.ДобавитьПриНеобходимости(Ссылка, ОбъектОснование)
	КонецЕсли;
	
КонецПроцедуры

// Дополняет результат при обработке изменения объекта
//
// Параметры:
//  Объект			 - ЛюбаяСсылка	 - Объект, изменение которого обрабатывается
//  ЗначенияДоЗаписи - Структура	 - сохраненные значения до записи объекта
//  Результат		 - Структура	 - результат обработки
//
Процедура ДополнитьРезультатИзменениеОбъекта(Объект, ЗначенияДоЗаписи, Результат) Экспорт
	
	Если ПодсистемаСуществует("Jira") Тогда
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.Задача") Тогда
			ИзмененияИнициированыJira = ИзмененияИнициированыJira(ЗначенияДоЗаписи);
			Результат.Вставить("ИзмененияИнициированыJira", ИзмененияИнициированыJira);
		КонецЕсли;
	КонецЕсли;
	
	Если ПодсистемаСуществует("ГабаритноеПланирование") Тогда
		Если ЗначенияДоЗаписи.Значения.Реквизиты.Свойство("ПланГабаритноеПланирование") Тогда
			ПредыдущееЗначение = РегистрыСведений.ПланируемыеСлотыГабаритногоПланирования.ПолучитьПлан(Объект.Ссылка);
			НовоеЗначение = ЗначенияДоЗаписи.Значения.Реквизиты.ПланГабаритноеПланирование;
			
			Если ПредыдущееЗначение <> НовоеЗначение Тогда
				
				ОписаниеИзменения = Новый Структура;
				ОписаниеИзменения.Вставить("СтароеЗначение", ПредыдущееЗначение);
				ОписаниеИзменения.Вставить("НовоеЗначение", НовоеЗначение);
				
				Результат.Реквизиты.Вставить("ПланГабаритноеПланирование", ОписаниеИзменения);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ПодсистемаСуществует("КвалификацияСпециалистов") Тогда
		Если ЗначенияДоЗаписи.Значения.Свойство("ЕстьИзмененияВопросовАттестации") Тогда
			Результат.Вставить("ИзменениеВопросовАттестации", ЗначенияДоЗаписи.Значения.ЕстьИзмененияВопросовАттестации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработка изменения объекта
//
// Параметры:
//  Объект		 - ЛюбаяСсылка	 - Объект, изменение которого обрабатывается
//  Результат	 - Структура	 - результат обработки
//
Процедура ИзменениеОбъекта(Объект, Результат) Экспорт
	
	Если ПодсистемаСуществует("Jira") Тогда
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.Задача") Тогда
			ИзмененияИнициированыJira = Ложь;
			Результат.Свойство("ИзмененияИнициированыJira", ИзмененияИнициированыJira);
			
			ОписаниеИзменилось = Ложь;	
			Результат.Свойство("ОписаниеИзменилось", ОписаниеИзменилось); 
			
			ИзмененоПримечаниеРазработчиков = Ложь;
			Результат.Свойство("ИзмененоПримечаниеРазработчиков", ИзмененоПримечаниеРазработчиков);
			
			ИзмененоПримечаниеТестировщиков = Ложь;
			Результат.Свойство("ИзмененоПримечаниеТестировщиков", ИзмененоПримечаниеТестировщиков);
			
			Если НЕ ИзмененияИнициированыJira
				И (ОписаниеИзменилось ИЛИ ИзмененоПримечаниеРазработчиков ИЛИ ИзмененоПримечаниеТестировщиков) Тогда
			
				РегистрыСведений.ОчередьСобытийНаОбработку.ИзменениеОбъекта(Объект, Результат);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли; 
	
	Если ПодсистемаСуществует("КвалификацияСпециалистов") Тогда
		Если Результат.Свойство("ИзменениеВопросовАттестации") И Результат.ИзменениеВопросовАттестации Тогда
			РегистрыСведений.ОчередьСобытийНаОбработку.ИзменениеОбъекта(Объект, Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Учет трудозатрат

// Добавляет запись в регистр сведений ПросмотренныеЗаявки
//
// Параметры:
//  Ссылка - ДокументСсылка.Задача, ДокументСсылка.ЗаявкаНаРазработку - открытый объект
//  ОбъектОснование - Произвольный - основание объекта
//
Процедура ДобавитьВПросмотренныеЗаявки(Знач Ссылка, Знач ОбъектОснование = Неопределено) Экспорт
	
	Если ПодсистемаСуществует("УчетТрудозатрат") Тогда
		
		ТипЗначенияСсылки = ТипЗнч(Ссылка);
		
		Если ТипЗначенияСсылки = Тип("ДокументСсылка.Задача") Тогда
			Если ТипЗнч(ОбъектОснование) = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
				РегистрыСведений.ПросмотренныеЗаявки.Добавить(ОбъектОснование);
			КонецЕсли;
		ИначеЕсли ТипЗначенияСсылки = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
			РегистрыСведений.ПросмотренныеЗаявки.Добавить(Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Приоритет проектов и внутренних заданий

// Добавляет в результат временной таблицы "ИтоговыеДанные" поле "Полнота данных".
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц с дополняемой временной таблицей.
//
Процедура ДобавитьВРезультатЗапросаПоказательПриоритета(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ПодсистемаСуществует("ПриоритетПроектовИВнутреннихЗаданий") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодготовленныеДанные.Ссылка КАК Ссылка,
		|	ВЫРАЗИТЬ(ПоказателиПриоритета.Значение КАК БУЛЕВО) КАК ПолнотаДанных
		|ПОМЕСТИТЬ ПоказателиПриоритета
		|ИЗ
		|	ПодготовленныеДанные КАК ПодготовленныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейПриоритетаПроектовИВнутреннихЗаданий КАК ПоказателиПриоритета
		|		ПО (ПодготовленныеДанные.Ссылка = (ВЫРАЗИТЬ(ПоказателиПриоритета.Объект КАК Документ.ВнутреннееЗадание)))
		|			И (ПоказателиПриоритета.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ПоказателиПриоритетаПроектовИВнутреннихЗаданий.ПолнотаДанных))";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодготовленныеДанные.Ссылка КАК Ссылка,
		|	ЛОЖЬ КАК ПолнотаДанных
		|ПОМЕСТИТЬ ПоказателиПриоритета
		|ИЗ
		|	ПодготовленныеДанные КАК ПодготовленныеДанные
		|ГДЕ
		|	ЛОЖЬ";

	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Добавляет в список команду "Расчет приоритета" при наличии подсистемы.
//
// Параметры:
//  Команды - СписокЗначений - список команд панели навигации объекта.
//
Процедура ДобавитьКомандуРасчетПриоритета(Команды) Экспорт
	
	Если ПодсистемаСуществует("ПриоритетПроектовИВнутреннихЗаданий") Тогда
		Команды.Добавить("РасчетПриоритета", "Расчет приоритета", , БиблиотекаКартинок.РасчетПриоритета);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общее

// Заполняет служебные фоновые задания
//
Процедура ЗаполнитьСлужебныеФоновыеЗадания() Экспорт
	
	СправочникФЗ = Справочники.СлужебныеФоновыеЗадания;
	
	Если ПодсистемаСуществует("Jira") Тогда
		СправочникФЗ.ЗаполнитьПредопределенныйЭлемент("ОбработкаОчередиСобытийJira", "Обработка очереди событий jira",
			"РегламентныеЗаданияСерверПереопределяемый.ОбработатьОчередьСобытийJira", 60);
	КонецЕсли;
	
	Если ПодсистемаСуществует("TeamCity") Тогда
		СправочникФЗ.ЗаполнитьПредопределенныйЭлемент("ОбработкаОчередиЗадачДляTeamCity", "Обработка очереди задач для TeamCity",
			"РегламентныеЗаданияСерверПереопределяемый.ОбработкаОчередиЗадачДляTeamCity", 30);
	КонецЕсли;
	
	Если ПодсистемаСуществует("ОбменДанными") Тогда
		СправочникФЗ.ЗаполнитьПредопределенныйЭлемент("ОтправкаОшибокВСистемуМониторинга", "Отправка ошибок в систему мониторинга",
			"РегламентныеЗаданияСерверПереопределяемый.ОтправкаОшибокВСистемуМониторинга", 1200);
	КонецЕсли;
	
КонецПроцедуры

// Разрешает интерактивное изменение юридического лица, если оно не заполняется обменом
//
// Параметры:
//  ЭлементФормы - ПолеФормы - поле юридического лица
//
Процедура ИзменитьДоступностьРедактированияЮридическогоЛица(ЭлементФормы) Экспорт
	
	Если НЕ ПодсистемаСуществует("ОбменДанными") Тогда
		ЭлементФормы.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Дополняет описание изменения для истории изменения объекта
//
// Параметры:
//  ДополнительныеСвойства	 - Структура - дополнительные свойства объекта
//  ОписаниеИзменений		 - Структура - описание изменения объекта
//
Процедура ДополнитьОписаниеИзменения(ДополнительныеСвойства, ОписаниеИзменений) Экспорт
	
	Если ПодсистемаСуществует("Jira") Тогда
		ИзмененияИнициированыJira = ДополнительныеСвойства.Свойство("ИзмененияИнициированыJira");
		ОписаниеИзменений.Вставить("ИзмененияИнициированыJira", ИзмененияИнициированыJira);
	КонецЕсли;
	
КонецПроцедуры

// Дполняет параметры для сохранения файлов
//
// Параметры:
//  Ссылка				 - ДокументСсылка.Задача - ссылка на задачу
//  ПараметрыПроцедуры	 - Структура			 - параметры сохранения файлов
//
Процедура ДополнитьПараметрыДляСохраненияФайлов(Ссылка, ПараметрыПроцедуры) Экспорт
	
	Если ПодсистемаСуществует("Jira") Тогда     
		ОтправлятьВJira = ИнтеграцияДополнительныхПодсистемПовтИсп.ТребуетсяОтправкаКомментарияИлиВложенияВJira(Ссылка);
		ПараметрыПроцедуры.Вставить("ОтправлятьВJira", ОтправлятьВJira);	
	КонецЕсли;
			
КонецПроцедуры

// Функция - возвращает регистры, которые нужно чистить
// 
// Возвращаемое значение:
//  Соответствие - Ключ: название регистра, значение: измерение
//
Функция ДополнительныеРегистрыДляОчистки() Экспорт
	
	Результат = Новый Соответствие;
	
	Если ПодсистемаСуществует("НастройкаИнтеграцииСJira") Тогда
		Результат.Вставить("ОчередьОбработкиСобытийJira", "Период");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Дополнительная обработка очереди событий
//
// Параметры:
//  ТипСобытия	 - ПеречислениеСсылка.ТипыСобытийОчереди - тип события
//  Выборка		 - ВыборкаРезультатаЗапроса				 - выборка данных
//  Данные		 - Структура							 - дополнительные данные для обработки
// 
// Возвращаемое значение:
//   - Структура
//		* Успешно	 - Белево	 - признак успешной или не успешной обработки записи
//		* Сообщение	 - Строка	 - строка с ошибкой обработки записи
//
Функция ОбработатьОчередьСобытий(ТипСобытия, Выборка, Данные) Экспорт
	
	Результат = Новый Структура("Успешно, Сообщение", Истина, "");
	
	Имя = Метаданные.Перечисления.ТипыСобытийОчереди.ЗначенияПеречисления.Найти(XMLСтрока(ТипСобытия)).Имя;
	
	Если Имя = "АктуализироватьВTrello" Тогда
		АктуализироватьВTrello(Выборка.Объект);
		
	ИначеЕсли Имя = "ОтправкаКомментарияВTrello" Тогда		
		ОтправитьКомментарийВTrello(Данные.ТекстКомментария, Данные.Источник);
		
	ИначеЕсли Имя = "СинхронизироватьСJira" Тогда		
		ЗапуститьСинхронизациюСJira(Выборка.Объект, Данные);
		
	ИначеЕсли Имя = "СоздатьИнцидентJira" Тогда		
		СоздатьИнцидентJira(Выборка.Объект, Данные);
		
	ИначеЕсли Имя = "ПересчитатьФилиалыТестированияГабаритногоПланирования" Тогда
		Результат = ПересчитатьФилиалыТестированияГабаритногоПланирования(Выборка.Объект, Данные, Выборка.Период);	
		
	ИначеЕсли Имя = "ЗакрытиеПрогоновTestRail" Тогда
		Результат = ЗакрытиеПрогоновTestRail(Выборка.Объект);
		
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// Дополнение результата обработки изменениями из дополнительных подсистем.
//
// Параметры:
//   РезультатОбработки - ТаблицаЗначений - таблица изменений реквизитов и табличных частей объекта
//   Ссылка - ЛюбаяСсылка - ссылка на объект, для которого выполняется обработка
//   Данные - Структура - данные события
//   Период - Дата - период, к которому относятся изменения
Процедура ДополнитьРезультатОбработки(РезультатОбработки, Знач Ссылка, Знач Данные, Знач Период) Экспорт

	ТаблицаИзменений = РезультатОбработки.ТаблицаИзменений;
	Если ТаблицаИзменений = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ПодсистемаСуществует("КвалификацияСпециалистов") И Данные.Свойство("ИзменениеВопросовАттестации")
		И Данные.ИзменениеВопросовАттестации Тогда

		ДанныеСтруктура = Новый Структура("Событие", "ИзменениеВопросовАттестации");
		СтрокаТаблицы = ТаблицаИзменений.Добавить();
		СтрокаТаблицы.Данные = ЗаписатьЗначениеJSON(ДанныеСтруктура);
		СтрокаТаблицы.Категория = Перечисления.КатегорииСобытийИсторияИзменений.Прочее;
		СтрокаТаблицы.Период = Период;
	КонецЕсли;

КонецПроцедуры

// Обработывает файл при сохранении на сервере с точки зрения дополнительной интеграции
//
// Параметры:
//  Владелец				 - ЛюбаяСсылка	 - владелец файла
//  СтрокаТаблицы			 - СтрокаТаблицыЗначений - строка таблицы файлов
//  ПолноеИмяФайлаНаСервере	 - Строка				 - имя файла на сервере
//  Параметры				 - Структура			 - Дополнительные параметры обработки файла
//
Процедура ОбработатьФайл(Владелец, СтрокаТаблицы, ПолноеИмяФайлаНаСервере, Параметры) Экспорт
	
	Если ПодсистемаСуществует("Jira") Тогда
		// Отправка вложения в Jira
		
		Если ТипЗнч(Параметры) = Тип("Структура") И Параметры.Свойство("ОтправлятьВJira") И Параметры.ОтправлятьВJira Тогда
			
			ЭтоВременныйФайл = Ложь;
			Если НЕ ЗначениеЗаполнено(ПолноеИмяФайлаНаСервере) Тогда
				СоздатьВременныйФайлДляОтправки(ПолноеИмяФайлаНаСервере, СтрокаТаблицы);
				ЭтоВременныйФайл = Истина;
			КонецЕсли;
			
			ПараметрыФоновоеЗадание = Новый Массив;
			ПараметрыФоновоеЗадание.Добавить(ПолноеИмяФайлаНаСервере);
			ПараметрыФоновоеЗадание.Добавить(СтрокаТаблицы.Имя);
			ПараметрыФоновоеЗадание.Добавить(Владелец);
			ПараметрыФоновоеЗадание.Добавить(ЭтоВременныйФайл);

			ИмяМетода = "ИнтеграцияJira.ОтправитьВложениеВJira";
			ОбщегоНазначения.СоздатьФоновоеЗадание(ИмяМетода, ПараметрыФоновоеЗадание, "Отправить вложения в Jira");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
			
// Процедура - Очистка регистров дополнительных подсистем
//
// Параметры:
//  ИмяСобытия	 - строка	 - название события для записи в журнал регистрации
//
Процедура ОчиститьОчередьОбмена(ИмяСобытия) Экспорт
	
	Если ПодсистемаСуществует("ОбменДанными") Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , "ОчередьОбъектовДляЗагрузки: Начало");	
		РегистрыСведений.ОчередьОбъектовДляЗагрузки.ОчиститьУстаревшиеДанные();	
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , "ОчередьОбъектовДляЗагрузки: Окончание");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает модуль менеджера
//
// Параметры:
//  Имя	 - 	Строка - Имя модуля
// 
// Возвращаемое значение:
//  ОбщийМодуль - модуль для вызова процедур
//
Функция ОбщийМодуль(Имя) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
		// АПК:488-выкл ВычислитьВБезопасномРежиме не используется, чтобы избежать вызова ОбщийМодуль рекурсивно.
		УстановитьБезопасныйРежим(Истина);
		Модуль = Вычислить(Имя);
		// АПК:488-вкл
	ИначеЕсли СтрЧислоВхождений(Имя, ".") = 1 Тогда
		Возврат СерверныйМодульМенеджера(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение СтрШаблон("Общий модуль ""%1"" не существует", Имя);
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции

// Возвращает признак существования подсистемы
//
// Параметры:
//  ИмяПодсистемы	 - Строка	 - Имя подсистемы
// 
// Возвращаемое значение:
//  Булево - признак существования подсистемы
//
Функция ПодсистемаСуществует(ИмяПодсистемы) Экспорт
	
	ИменаПодсистем = ИнтеграцияДополнительныхПодсистемПовтИсп.ИменаПодсистем();
	Возврат ИменаПодсистем.Получить(ИмяПодсистемы) <> Неопределено;
	
КонецФункции

// Дополняет настройки клиентского приложения
//
// Параметры:
//  Настройки	 - Структура - Настройки клиентского приложения
//
Процедура ДополнитьНастройкиКлиентскогоПриложения(Настройки) Экспорт
	
	Если ПодсистемаСуществует("ОбновлениеИнформационнойБазы") Тогда 
		Настройки.Вставить("ПоказатьОписаниеИзмененийСистемы", 
			Справочники.ОписанияИзмененийСистемы.НеобходимоПоказатьОкноОписанияИзмененийСистемы());
	КонецЕсли;   
	
	Если ПодсистемаСуществует("Опрос") Тогда 
		Настройки.Вставить("ОткрыватьОпрос", Обработки.ПроведениеОпроса.ОткрыватьОпрос());
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЦелиOKR

Процедура ДобавитьЭлементУстановкиЦелей(Знач Объект, Форма, ГруппаВывода, ЭлементПредшественник) Экспорт
	
	Если ПодсистемаСуществует("ЦелиOKR") Тогда
		ИмяРеквизита = "ЦелиOKR";
		Реквизит = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("СправочникСсылка.ЦелиOKR"));

		МассивРеквизитов = Новый Массив;
		МассивРеквизитов.Добавить(Реквизит);
		Форма.ИзменитьРеквизиты(МассивРеквизитов);
		
		Форма[ИмяРеквизита] = РегистрыСведений.ЗначенияДополнительныхРеквизитовОбъектов.ЗначениеДополнительногоРеквизита(
			Объект, ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.ЦелиOKR);
				
		Поле = Форма.Элементы.Вставить(ИмяРеквизита, Тип("ПолеФормы"), ГруппаВывода, ЭлементПредшественник);
		Поле.ПутьКДанным = ИмяРеквизита;
		Поле.Заголовок = "Цели OKR";
		Поле.Вид = ВидПоляФормы.ПолеВвода;
		Поле.АвтомаксимальнаяШирина = Ложь;
		Поле.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииЦелиOKR");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьВидимостьЦелейOKR(Форма, Знач Направление) Экспорт
	
	Если НЕ ПодсистемаСуществует("ЦелиOKR") Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементЦели = Форма.Элементы.ЦелиOKR;
	
	Если ЗначениеЗаполнено(Направление) Тогда		
		ЭлементЦели.Видимость = ЕстьЦелиДляНаправления(Направление);
		
		НаборПараметровВыбора = Новый Массив;
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Направление", Направление);
		НаборПараметровВыбора.Добавить(ПараметрВыбора);
		
		ЭлементЦели.ПараметрыВыбора = Новый ФиксированныйМассив(НаборПараметровВыбора);
	Иначе
		ЭлементЦели.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ЭлементЦели.Видимость И Форма.ЦелиOKR <> Справочники.ЦелиOKR.ПустаяСсылка() Тогда
		Форма.ЦелиOKR = Справочники.ЦелиOKR.ПустаяСсылка();
		
		АдресДополнительныхРеквизитов = Форма[ДополнительныеРеквизитыКлиентСервер.ИмяРеквизитаАдреса()];
		ПриИзмененииЦелиOKR(Направление, АдресДополнительныхРеквизитов, Форма.ЦелиOKR);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииЦелиOKR(Знач Направление, Знач АдресДополнительныхРеквизитов, Знач ЦелиOKR) Экспорт
	
	ДанныеИзХранилища = ПолучитьИзВременногоХранилища(АдресДополнительныхРеквизитов);
	
	ИзменитьЗначениеРеквизита(ДанныеИзХранилища, ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.ЦелиOKR, ЦелиOKR) ;
	ИзменитьЗначениеРеквизита(ДанныеИзХранилища,
		ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.ЦелеваяЗаявка, ЗначениеЗаполнено(ЦелиOKR)) ;
	
	ПоместитьВоВременноеХранилище(ДанныеИзХранилища, АдресДополнительныхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДатьПравоНаЧтениеOutlook(Знач Пользователь)
	
	Результат = Новый Структура("Успешно, Сообщение", Истина, "");
	Почта = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Пользователь, "Почта");

	Если Почта = "" Тогда
		Результат = Новый Структура("Успешно, Сообщение", Истина, "Не заполнена почта пользователя");
		Возврат Результат;
	КонецЕсли;
	
	Назначение = Перечисления.НазначенияДанныхБезопасногоХранилища.НастройкиПодключенияКActiveDirectory;
	
	УстановитьПривилегированныйРежим(Истина);
	НастройкиПодключения = РегистрыСведений.БезопасноеХранилищеДанных.ПолучитьДанные(Назначение);	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НастройкиПодключения = Неопределено Тогда
		Результат.Успешно = Ложь;
		Результат.Сообщение = "Не заполнены настройки подключения к AD.";
		Возврат Результат;
	КонецЕсли;
	
	ЭтоПродуктоваяБаза = ПовторноеИспользованиеВызовСервера.ЭтоПродуктоваяБаза();
		
	Если НЕ ЭтоПродуктоваяБаза И НЕ НастройкиПодключения.ЭтоТестовыеДанные Тогда
		Результат.Успешно = Ложь;
		Результат.Сообщение = "Не заполнены настройки подключения к тестовой базе AD";
		Возврат Результат;		
	КонецЕсли;
		
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", "Basic " + НастройкиПодключения.ТокенАвторизации);
	Заголовки.Вставить("IBSession", "start");
		
	HTTPСоединение = Новый HTTPСоединение(НастройкиПодключения.АдресПубликации,,,,, 60, Новый ЗащищенноеСоединениеOpenSSL);
	АдресЗапроса = СтрШаблон("services/hs/api/calendar/addpermission?email=%1", Почта);
	Запрос = АдресЗапроса;	
	HTTPЗапрос = Новый HTTPЗапрос(Запрос, Заголовки);
		
	Попытка
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);		
	Исключение
		Результат.Успешно = Ложь;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.Сообщение = ТекстОшибки;
		Возврат Результат;
	КонецПопытки;	
	
	ИдентификаторСеанса = ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСеанса(HTTPОтвет);
		
	Если HTTPОтвет.КодСостояния = 200 Тогда 
		
		ДанныеОтвета = ОбщегоНазначения.ПрочитатьСодержимоеJSON(HTTPОтвет.ПолучитьТелоКакСтроку());
		
		Если ДанныеОтвета.Количество() > 0 Тогда
			Если ДанныеОтвета.code <> 0 Тогда 
				Результат.Успешно = Ложь;
				Результат.Сообщение = ДанныеОтвета.message;
			КонецЕсли;
		Иначе
			Результат.Успешно = Ложь;
			Результат.Сообщение = "Некорректный ответ от AD";
		КонецЕсли;
	Иначе
		Результат.Успешно = Ложь;
		Результат.Сообщение = СтрШаблон("Некорректный код состояния %1 ответа от AD", HTTPОтвет.КодСостояния);
	КонецЕсли; 
	
	Если ИдентификаторСеанса <> Неопределено Тогда 
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Cookie", "IBSession=" + ИдентификаторСеанса);
		Заголовки.Вставить("IBSession", "finish");
		HTTPЗапрос = Новый HTTPЗапрос(АдресЗапроса, Заголовки);
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обновляет инцидент в jira
//
// Параметры:
//  Объект - ДокументСсылка - Заявка или задача, по которой создается инцидент
//	Данные - Структура, Неопределено - структура с данными для задания или неопределено
//		* ИзменилсяИсполнитель - Булево - признак изменения исполнителя
//		* ИзменилосьНазначение - Булево - признак изменения назначения
//		* ОписаниеИзменилось - Булево - признак изменения описания
//
Процедура ЗапуститьСинхронизациюСJira(Знач Объект, Знач Данные)
	
	Если ПодсистемаСуществует("Jira") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияJira");
		Модуль.ЗапуститьСинхронизациюСJira(Объект, Данные);
	КонецЕсли;

КонецПроцедуры

Функция ПересчитатьФилиалыТестированияГабаритногоПланирования(Знач Филиал, Знач Данные, Знач Период) 
	
	// Необходимо перепровести все документы планирования ресурсов по данному филиалу, где есть тестирование и больше Период
	// Если в документе заполнен разрез ресурса, то его нужно поменять на ФилиалТестирования, который есть в Данные  
	
	Результат = Новый Структура("Успешно, Сообщение", Истина, "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланированиеЗанятостиРесурсовДанные.Ссылка КАК Ссылка,
	|	ПланированиеЗанятостиРесурсовДанные.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ПланированиеЗанятостиРесурсовДанные.РазрезРесурса <> &ФилиалТестирования
	|				И ПланированиеЗанятостиРесурсовДанные.РазрезРесурса <> ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
	|				И ПланированиеЗанятостиРесурсовДанные.РазрезРесурса <> НЕОПРЕДЕЛЕНО
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Менять
	|ИЗ
	|	Документ.ПланированиеЗанятостиРесурсов.Данные КАК ПланированиеЗанятостиРесурсовДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланированиеЗанятостиРесурсов КАК ПланированиеЗанятостиРесурсов
	|		ПО ПланированиеЗанятостиРесурсовДанные.Ссылка = ПланированиеЗанятостиРесурсов.Ссылка
	|ГДЕ
	|	ПланированиеЗанятостиРесурсов.Дата > &Период
	|	И ПланированиеЗанятостиРесурсов.Проведен
	|	И ПланированиеЗанятостиРесурсов.Филиал = &Филиал
	|	И ПланированиеЗанятостиРесурсовДанные.ТипРесурса = ЗНАЧЕНИЕ(Перечисление.ТипРесурсаФилиала.Тестирование)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланированиеЗанятостиРесурсов.Дата
	|ИТОГИ
	|	МАКСИМУМ(Менять)
	|ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("Филиал", Филиал);
	Запрос.УстановитьПараметр("ФилиалТестирования", Данные.ФилиалТестирования);
	Запрос.УстановитьПараметр("Период", Период);  
	
    Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	НачатьТранзакцию();
	
	Попытка
		Пока Выборка.Следующий() Цикл            
			
			Документ = Выборка.Ссылка.ПолучитьОбъект();
			
			Если Выборка.Менять Тогда
				ДетальныеЗаписи = Выборка.Выбрать();
				
				Пока ДетальныеЗаписи.НайтиСледующий(Новый Структура("Менять", Истина)) Цикл 
					Документ.Данные[ДетальныеЗаписи.НомерСтроки - 1].РазрезРесурса = Данные.ФилиалТестирования;
				КонецЦикла;
			КонецЕсли;
			
			Документ.Записать(РежимЗаписиДокумента.Проведение);			
		КонецЦикла;       
		
		ЗафиксироватьТранзакцию();
	Исключение               
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;           
		
		Результат.Успешно = Ложь;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.Сообщение = ТекстОшибки;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции	

// Создает инцидент в jira
//
// Параметры:
//  Объект - ДокументСсылка - Заявка или задача, по которой создается инцидент
//  Данные - Структура, Неопределено - структура с данными для задания или неопределено
// 		* Система - СправочникСсылка.СистемыУчета - ссылка на систему
// 		* Филиал - СправочникСсылка.Филиалы - ссылка на филиал
//
Процедура СоздатьИнцидентJira(Знач Объект, Знач Данные)
	
	Если ПодсистемаСуществует("Jira") Тогда
		Модуль = ОбщийМодуль("ИнтеграцияJira");
		Модуль.СоздатьИнцидентJira(Объект, Данные);
	КонецЕсли;

КонецПроцедуры

// создает временный файл на сервере для отправки в jira, если файл был сохранен в минио
Процедура СоздатьВременныйФайлДляОтправки(ПолноеИмяФайлаНаСервере, СтрокаТаблицы)
	
	Расширение = РаботаСФайламиКлиентСервер.РасширениеИмениФайла(СтрокаТаблицы.Имя);
	ПолноеИмяФайлаНаСервере = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтрокаТаблицы.АдресВоВременномХранилище);
	ДвоичныеДанные.Записать(ПолноеИмяФайлаНаСервере);
	
КонецПроцедуры

Функция СерверныйМодульМенеджера(Имя)
	ОбъектНайден = Ложь;
	
	ЧастиИмени = СтрРазделить(Имя, ".");
	Если ЧастиИмени.Количество() = 2 Тогда
		
		ИмяВида = ВРег(ЧастиИмени[0]);
		ИмяОбъекта = ЧастиИмени[1];
		
		Если ИмяВида = ВРег("Константы") Тогда
			Если Метаданные.Константы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыСведений") Тогда
			Если Метаданные.РегистрыСведений.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыНакопления") Тогда
			Если Метаданные.РегистрыНакопления.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыБухгалтерии") Тогда
			Если Метаданные.РегистрыБухгалтерии.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("РегистрыРасчета") Тогда
			Если Метаданные.РегистрыРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Справочники") Тогда
			Если Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Документы") Тогда
			Если Метаданные.Документы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Отчеты") Тогда
			Если Метаданные.Отчеты.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Обработки") Тогда
			Если Метаданные.Обработки.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("БизнесПроцессы") Тогда
			Если Метаданные.БизнесПроцессы.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ЖурналыДокументов") Тогда
			Если Метаданные.ЖурналыДокументов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("Задачи") Тогда
			Если Метаданные.Задачи.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыСчетов") Тогда
			Если Метаданные.ПланыСчетов.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыОбмена") Тогда
			Если Метаданные.ПланыОбмена.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовХарактеристик") Тогда
			Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		ИначеЕсли ИмяВида = ВРег("ПланыВидовРасчета") Тогда
			Если Метаданные.ПланыВидовРасчета.Найти(ИмяОбъекта) <> Неопределено Тогда
				ОбъектНайден = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ОбъектНайден Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// АПК:488-выкл ВычислитьВБезопасномРежиме не используется, чтобы избежать вызова ОбщийМодуль рекурсивно.
	УстановитьБезопасныйРежим(Истина);
	Модуль = Вычислить(Имя);
	// АПК:488-вкл
	
	Возврат Модуль;   
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// TestRail

Функция ЗакрытиеПрогоновTestRail(Знач Объект)   
	
	Результат = Новый Структура("Успешно, Сообщение", Истина, "");
	
	Назначение = Перечисления.НазначенияДанныхБезопасногоХранилища.НастройкиПодключенияКTestRail;
	
	УстановитьПривилегированныйРежим(Истина);
	НастройкиПодключения = РегистрыСведений.БезопасноеХранилищеДанных.ПолучитьДанные(Назначение);	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НастройкиПодключения = Неопределено Тогда
		Результат.Успешно = Ложь;
		Результат.Сообщение = "Не заполнены настройки подключения к TestRail.";
		Возврат Результат;
	КонецЕсли;
	
	ЭтоПродуктоваяБаза = ПовторноеИспользованиеВызовСервера.ЭтоПродуктоваяБаза();
		
	Если НЕ ЭтоПродуктоваяБаза И НЕ НастройкиПодключения.ЭтоТестовыеДанные Тогда
		Результат.Успешно = Ложь;
		Результат.Сообщение = "Не заполнены настройки подключения к тестовой базе TestRail";
		Возврат Результат;		
	КонецЕсли;
		
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", "Basic " + НастройкиПодключения.ТокенАвторизации);
	Заголовки.Вставить("Content-type", "application/json");
		
	HTTPСоединение = Новый HTTPСоединение(НастройкиПодключения.Сервер,,,,, 60, Новый ЗащищенноеСоединениеOpenSSL);
	
	ТипЧисло = ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(10);
	Префикс = Документы.Задача.ПолучитьПрефикс();
	Номер = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект, "Номер");
	КороткийНомер = Формат(ТипЧисло.ПривестиЗначение(СтрЗаменить(Номер, Префикс, "")), "ЧГ=");
		
	Для Каждого Идентификатор Из НастройкиПодключения.ИдентификаторыПроектов Цикл 
		
		ОбработатьЗаписиTestRail(HTTPСоединение, Результат, Номер, КороткийНомер, Идентификатор.Значение, Заголовки);
		ОбработатьЗаписиTestRail(HTTPСоединение, Результат, Номер, КороткийНомер, Идентификатор.Значение, Заголовки, Истина);
			
		Если НЕ Результат.Успешно Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьЗаписиTestRail(HTTPСоединение, Результат, Номер, КороткийНомер, Идентификатор, Заголовки, run = Ложь)
	
	АдресЗапроса = СтрШаблон("index.php?/api/v2/%1/%2&is_completed=0", ?(run, "get_runs", "get_plans"),  Идентификатор);
	HTTPЗапрос = Новый HTTPЗапрос(АдресЗапроса, Заголовки);
		
	Попытка
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);		
		
		Если HTTPОтвет.КодСостояния = 200 Тогда 
			
			ДанныеОтвета = ОбщегоНазначения.ПрочитатьСодержимоеJSON(HTTPОтвет.ПолучитьТелоКакСтроку());	
				
			Если ТипЗнч(ДанныеОтвета) = Тип("Структура") Тогда 
				Если ДанныеОтвета.Свойство("plans") Тогда
					ДанныеОтвета = ДанныеОтвета.plans;
				ИначеЕсли ДанныеОтвета.Свойство("runs") Тогда
					ДанныеОтвета = ДанныеОтвета.runs;
				КонецЕсли;			
			КонецЕсли;			

			Для Каждого СтрокаОтвета Из ДанныеОтвета Цикл 
				Если Лев(СтрокаОтвета.name, СтрДлина(КороткийНомер)) = КороткийНомер 
					ИЛИ СтрНайти(СтрокаОтвета.name, Номер) > 0 Тогда
					
					idКЗакрытию = Формат(СтрокаОтвета.id, "ЧГ=0");
					АдресЗапроса = СтрШаблон("index.php?/api/v2/%1/%2", ?(run, "close_run", "close_plan"), idКЗакрытию);
					HTTPЗапрос = Новый HTTPЗапрос(АдресЗапроса, Заголовки);
					HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);		
					
					Если HTTPОтвет.КодСостояния <> 200 Тогда 
						Результат.Успешно = Ложь;
						Результат.Сообщение = СтрШаблон("Некорректный код состояния %1 ответа от TestRail", HTTPОтвет.КодСостояния); 
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;					
		Иначе
			Результат.Успешно = Ложь;
			Результат.Сообщение = СтрШаблон("Некорректный код состояния %1 ответа от TestRail", HTTPОтвет.КодСостояния); 
		КонецЕсли;
	Исключение
		Результат.Успешно = Ложь;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.Сообщение = ТекстОшибки;
	КонецПопытки;     	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЦелиOKR

Функция ЕстьЦелиДляНаправления(Направление)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦелиOKR.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЦелиOKR КАК ЦелиOKR
	|ГДЕ
	|	ЦелиOKR.Направление = &Направление";
	
	Запрос.УстановитьПараметр("Направление", Направление);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции

Процедура ИзменитьЗначениеРеквизита(ДанныеИзХранилища, Реквизит, Значение)
	
	ПараметрыОтбора = Новый Структура("ВидРеквизита", Реквизит);
	
	Строки = ДанныеИзХранилища.НайтиСтроки(ПараметрыОтбора);
	
	Если Строки.Количество() > 0 Тогда
		Строки[0].Значение = Значение;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
