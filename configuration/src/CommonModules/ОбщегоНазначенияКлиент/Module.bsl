///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Открывает страницу документации SDMS по полнотекстовому поиску
Процедура ОткрытьСправкуПолнотекстовыйПоиск() Экспорт
	
	ПерейтиПоНавигационнойСсылке(ОбщегоНазначенияВызовСервера.ПолучитьКонстанту("КорневойURL") + "/docs/common/search/");
	
КонецПроцедуры 

// Открывает справочник филиалов с отбором по кастомным командам
//
// Параметры:
//  Форма	 - Форма	 - Форма откуда открывают
//
Процедура ОткрытьКастомныеКоманды(Форма) Экспорт
	
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	
	Настройки = ОбщегоНазначенияВызовСервера.ПолучитьНастройкиСозданияКастомнойкоманды();
	ПараметрыОткрытия = Новый Структура();
	
	Если Настройки.ЕстьПраво Тогда 
		
		КастомныеКоманды = ПредопределенноеЗначение("Справочник.Филиалы.КастомныеКоманды");
		
		ОтборСписка = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборСписка.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		ОтборСписка.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		ОтборСписка.ПравоеЗначение = КастомныеКоманды;
		ОтборСписка.Использование = Истина;	
		
		ПараметрыОткрытия.Вставить("Филиал", КастомныеКоманды);
		ПараметрыОткрытия.Вставить("СкрытьЛишниеКолонки", Истина);
		ПараметрыОткрытия.Вставить("ОтображениеТаблицы", ОтображениеТаблицы.Дерево);	
			
	Иначе    
		
		Список = Новый СписокЗначений;
		Список.ЗагрузитьЗначения(Настройки.Команды);
		
		ОтборСписка = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборСписка.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		ОтборСписка.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборСписка.ПравоеЗначение = Список;
		ОтборСписка.Использование = Истина;	
		
		ПараметрыОткрытия.Вставить("СкрытьЛишниеКолонки", Истина);
		ПараметрыОткрытия.Вставить("ОтображениеТаблицы", ОтображениеТаблицы.Список);	
		
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("ФиксированныеНастройки", НастройкиКомпоновки);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", НЕ Настройки.ЕстьПраво);	
		
	ОткрытьФорму("Справочник.Филиалы.ФормаСписка", ПараметрыОткрытия, Форма, Форма.УникальныйИдентификатор,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры 

// Возвращает результат проверки возможности установить статус "Решен"
//
// Параметры:
//  ТребуетсяПубликация - Булево - значение реквизита документа Задача
//  НовыйСтатус         - СправочникСсылка.СтатусыОбъектов - Устанавливаемый пользователем статус
//  СтатусРешен         - СправочникСсылка.СтатусыОбъектов - Статус "Решен" для сравнения
//
// Возвращаемое значение:
//  Структура, Отказ если Статус установить нельзя и текст сообщения для пользователя
//
Функция ПроверитьВозможностьУстановкиСтатуса(Знач ТребуетсяПубликация, Знач НовыйСтатус, Знач СтатусРешен) Экспорт
	
	Отказ = Ложь;
	
	Если ТребуетсяПубликация И НовыйСтатус = СтатусРешен Тогда		
		Отказ = Истина; 
		Сообщение = "Задача не может быть переведена в новый статус. Установлен признак ""Требуется публикация"".";
		ПоказатьПредупреждение(, Сообщение, 30);		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Настройки динамических списков

// Подключает обработчик ожидания формы для периодической проверки новых
// пользовательских настроек динамического списка.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, которой подключается обработчик.
//
Процедура ВключитьПроверкуПользовательскихНастроекДинамическогоСписка(Форма) Экспорт
	
	Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверкаПользовательскихНастроекДинамическогоСписка", 60);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Буфер обмена

// Получает внутреннюю навигационную ссылку на объект и копирует ее в буфер обмена.
//
// Параметры:
//  Ссылка         - Составной - GUID ссылочного объекта.
//  ТекстСообщения - Строки - текст сообщения пользователю после успешного копирования в буфер.
//
Процедура КопироватьНавигационнуюСсылкуВБуферОбмена(Знач Ссылка, Знач ТекстСообщения = "") Экспорт
	
	ДанныеСсылки = ОбщегоНазначенияВызовСервера.ПолучитьВариантНавигационнойСсылки(Ссылка);
	КопироватьТекстВБуферОбмена(ДанныеСсылки, ТекстСообщения);
	
КонецПроцедуры

// Помещает текст в поле html и копирует его в буфер обмена.
//
// Параметры:
//  Данные         - Структура, Строка - данные ссылки на объект или строка для помещения в буфер.
//  ТекстСообщения - Строки - текст сообщения пользователю после успешного копирования в буфер.
//
Асинх Процедура КопироватьТекстВБуферОбмена(Знач Данные, Знач ТекстСообщения = "Ссылка скопирована в буфер обмена.") Экспорт
	
	Если СредстваБуфераОбмена.ИспользованиеДоступно() Тогда 
		ЭлементыБуфера = Новый Массив; 
		
		Если ТипЗнч(Данные) = Тип("Структура") Тогда			
			HTMLТекст = Стршаблон("<a href=""%1"">%2</a>", Данные.НавигационнаяСсылка, Данные.Представление);
			
			ЭлементыБуфера.Добавить(Новый ЭлементБуфераОбмена(СтандартныйФорматДанныхБуфераОбмена.HTML, HTMLТекст));
			ЭлементыБуфера.Добавить(Новый ЭлементБуфераОбмена(СтандартныйФорматДанныхБуфераОбмена.Текст, Данные.ВариантСсылки));
		ИначеЕсли ТипЗнч(Данные) = Тип("Дата") Тогда
			ЭлементыБуфера.Добавить(Новый ЭлементБуфераОбмена(СтандартныйФорматДанныхБуфераОбмена.Текст, Строка(Данные)));
		Иначе
			ЭлементыБуфера.Добавить(Новый ЭлементБуфераОбмена(СтандартныйФорматДанныхБуфераОбмена.Текст, Данные));
		КонецЕсли;
		
		ДанныеСкопированы = Ждать СредстваБуфераОбмена.ПоместитьДанныеАсинх(ЭлементыБуфера);
	Иначе
		ТекстСообщения = "Доступ к буферу обмена запрещен. Проверьте настройки браузера.";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		Состояние(, , ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТекущееОкружение

////////////////////////////////////////////////////////////////////////////////
// Функции описания текущего окружения клиентского приложения и операционной системы.

// Возвращает Истина, если клиентское приложение запущено под управлением ОС Linux.
//
// См. ОбщегоНазначения.ЭтоLinuxКлиент
//
// Возвращаемое значение:
//  Булево - если нет клиентского приложения, возвращается Ложь.
//
&НаКлиенте
Функция ЭтоLinux() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ТипСистемы = СистемнаяИнформация.ТипПлатформы;

	Возврат (ТипСистемы = ТипПлатформы.Linux_x86 ИЛИ ТипСистемы = ТипПлатформы.Linux_x86_64);
	
КонецФункции

// Возвращает Истина, если клиентское приложение запущено под управлением macOS.
//
// См. ОбщегоНазначения.ЭтоMacOSКлиент
//
// Возвращаемое значение:
//  Булево - если нет клиентского приложения, возвращается Ложь.
//
&НаКлиенте
Функция ЭтоMacOS() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ТипСистемы = СистемнаяИнформация.ТипПлатформы;

	Возврат (ТипСистемы = ТипПлатформы.MacOS_x86	ИЛИ ТипСистемы = ТипПлатформы.MacOS_x86_64);
	
КонецФункции

// Возвращает Истина, если клиентское приложение запущено под управлением ОС Windows.
//
// Возвращаемое значение:
//  Булево - Истина если ОС Windows, иначе Ложь.
//
Функция ЭтоWindows() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ТипСистемы = СистемнаяИнформация.ТипПлатформы;
	
	Возврат (ТипСистемы = ТипПлатформы.Windows_x86 ИЛИ ТипСистемы = ТипПлатформы.Windows_x86_64);

КонецФункции
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Определяет, различаются ли списки значений и возвращает результат проверки.
//	Сравнение происходит по строковым представлениям списков.
//
// Параметры:
//  ПервыйСписок - СписокЗначений	 - первый из списков, которые требуется проверить
//  ВторойСписок - СписокЗначений	 - второй из списков, которые требуется проверить
// 
// Возвращаемое значение:
//  Булево - признак того, различаются списки, или нет
//
Функция СпискиЗначенийРазличаются(Знач ПервыйСписок, Знач ВторойСписок) Экспорт
	
	// В платформе есть объект СравнениеЗначений, но он недоступен на клиенте.
	// Определить, расходятся ли списки значений на клиенте можно следующим образом:
	
	// 1. Сортировка списков значений по представлению
	ПервыйСписок.СортироватьПоПредставлению();
	ВторойСписок.СортироватьПоПредставлению();
	
	// 2. Проверка идентичности строковых представлений списков значений
	ПредставлениеПервогоСписка = СтрСоединить(ПервыйСписок.ВыгрузитьЗначения(), ";");
	ПредставлениеВторогоСписка = СтрСоединить(ВторойСписок.ВыгрузитьЗначения(), ";");
	
	СпискиРазличаются = (ПредставлениеПервогоСписка <> ПредставлениеВторогоСписка)
		ИЛИ (ПервыйСписок.Количество() <> ВторойСписок.Количество());
	
	Возврат СпискиРазличаются;
	
КонецФункции

Функция СписокТиповДляНавигационныхСсылок()
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить("Документ.Задача", "Задача", , БиблиотекаКартинок.Задача16);
	СписокТипов.Добавить("Документ.ЗаявкаНаРазработку", "Заявка на разработку", , БиблиотекаКартинок.ЗаявкаНаРазработку);
	СписокТипов.Добавить("Справочник.Проекты", "Проект", , БиблиотекаКартинок.Проект);
	
	Возврат СписокТипов;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Навигационные cсылки

// Открывает диалог выбора типа вставляемой ссылки и запускает процесс вставки
// навигационной ссылки в форматированный документ.
//
// Параметры:
//  Форма                   - УправляемаяФорма - форма-владелец форматированного
//                            документа.
//  ФорматированныйДокумент - ФорматированныйДокумент - ревизит формы.
//  ИмяЭлементаФормы        - Строка - имя элемента формы, с которым связан 
//                            форматированный документ.
//
Процедура ВставитьНавигационнуюСсылкуНаОбъект(Знач Форма, Знач ФорматированныйДокумент, Знач ИмяЭлементаФормы) Экспорт
	
	ПараметрыОповещения = Новый Структура("Форма, ФорматированныйДокумент, ИмяЭлементаФормы",
		Форма, ФорматированныйДокумент, ИмяЭлементаФормы);
		
	ОписаниеОповещения  = Новый ОписаниеОповещения("ОбработатьВыборТипаНавигационнойСсылки", 
		ОбщегоНазначенияКлиент, ПараметрыОповещения);
	
	СписокТипов = СписокТиповДляНавигационныхСсылок();
	СписокТипов.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выбор объекта");
	
КонецПроцедуры

// Обрабатывает ответ пользователя на приглашение выбрать объект для получения навигационной ссылки.
//
// Параметры:
//  ВыбранноеЗначение       - Ссылка - ссылка на выбранный объект БД. В случае, если пользователь
//                            отказался от выбора, содержит Неопределено.
//  ДополнительныеПараметры - Произвольный -  значение, которое было указано при создании 
//                            объекта ОписаниеОповещения.
//
Процедура ОбработатьВыборОбъектаНавигационнойСсылки(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ПозицияНачала = 0;
		ПозицияКонца  = 0;
		
		ЭлементФормы = ДополнительныеПараметры.Форма.Элементы[ДополнительныеПараметры.ИмяЭлементаФормы];
		ЭлементФормы.ПолучитьГраницыВыделения(ПозицияНачала, ПозицияКонца);
		
		ВставленноеЗначение = ДополнительныеПараметры.ФорматированныйДокумент.Вставить(ПозицияНачала, ВыбранноеЗначение, Тип("ТекстФорматированногоДокумента"));//ДополнительныеПараметры.ФорматированныйДокумент.Вставить(ПозицияНачала, ВыбранноеЗначение, Тип("ТекстФорматированногоДокумента"));
		ВставленноеЗначение.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ВыбранноеЗначение);		
		
		#Если ВебКлиент Тогда		
		ДополнительныеПараметры.Форма.ОбновитьОтображениеДанных(ЭлементФормы);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает ответ пользователя на приглашение выбрать тип навигационной ссылки.
//
// Параметры:
//  ВыбранныйЭлемент        - ЭлементСпискаЗначений - выбранный элемент списка значений.
//                            В случае, если пользователь отказался от выбора, содержит Неопределено.
//  ДополнительныеПараметры - Произвольный -  значение, которое было указано при создании 
//                            объекта ОписаниеОповещения.
//
Процедура ОбработатьВыборТипаНавигационнойСсылки(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборОбъектаНавигационнойСсылки", 
			ОбщегоНазначенияКлиент, ДополнительныеПараметры);
			
		ПараметрыФормы = Новый Структура("МножественныйВыбор", Ложь);
		ОткрытьФорму(ВыбранныйЭлемент.Значение + ".ФормаВыбора", ПараметрыФормы, ДополнительныеПараметры.Форма, , , , ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

// Открывает навигационную ссылку в программе, которая ассоциирована с протоколом навигационной ссылки.
//
// Протокол (file:) запрещен, при передачи ссылки на файл будет вызвано исключение.
//  для открытия проводника используйте см. ОткрытьПроводник.
//  для открытия файла по расширению используйте см. ОткрытьФайлВПрограммеПросмотра.
//
// Параметры:
//  НавигационнаяСсылка - Строка - ссылка, которую требуется открыть.
//  Оповещение          - ОписаниеОповещения - оповещение о результате открытия.
//      * ПриложениеЗапущено      - Булево    - Истина, если внешнее приложение не вызвало ошибок при открытии.
//      * ДополнительныеПараметры - Структура - значение, которое было указано при создании объекта ОписаниеОповещения.
//
// Пример:
//  ОткрытьНавигационнуюСсылку("https://1c.ru");
//  ОткрытьНавигационнуюСсылку("e1cib/navigationpoint/startpage"); // начальная страница.
//  ОткрытьНавигационнуюСсылку("mailto:help@1c.ru");
//  ОткрытьНавигационнуюСсылку("skype:call?echo123");
//
Процедура ОткрытьНавигационнуюСсылкуОбъект(НавигационнаяСсылка, Знач Оповещение = Неопределено) Экспорт
	
	Если ОбщегоНазначенияКлиент.ЭтоНавигационнаяСсылка(НавигационнаяСсылка) Тогда 
		
		ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);
		Если Оповещение <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(Оповещение, Истина);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Открывает изображение в новой форме в поле HTML документа 
//
// Параметры:
//  НавигационнаяСсылка  - Строка - навигационная ссылка на изображение
//
Процедура ОткрытьПросмотрИзображения(Знач НавигационнаяСсылка) Экспорт
	
	ПараметрыОткрытия = Новый Структура("НавигационнаяСсылка", НавигационнаяСсылка);	
	ОткрытьФорму("ОбщаяФорма.ПросмотрИзображения", ПараметрыОткрытия); 
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Окна клиентского приложения и формы

// Добавляет в структуру дополнительных свойств формы новое свойство и заполняет 
// его переданным значением. Если свойство существует, ему просто присваивается
// значение.
//
// Параметры:
//  ИмяСвойства            - Строка - имя добавляемого свойства.
//  ДополнительныеСвойства - Структура - структура дополнительных свойств формы.
//  ЗначениеСвойства       - Произвольный - значение свойства.
//
Процедура ДобавитьДополнительноеСвойствоФормы(Знач ИмяСвойства, ДополнительныеСвойства, ЗначениеСвойства = Неопределено) Экспорт
	
	Если ДополнительныеСвойства.Свойство(ИмяСвойства) = Ложь Тогда
		ДополнительныеСвойства.Вставить(ИмяСвойства, ЗначениеСвойства);
	Иначе
		ДополнительныеСвойства[ИмяСвойства] = ЗначениеСвойства;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет инициализацию переменной модуля формы для хранения дополнительных данных.
//
// Параметры:
//  ДополнительныеСвойства - Неопределено - переменная для инициализации.
//
Процедура ИнициализироватьДополнительныеСвойстваФормы(ДополнительныеСвойства) Экспорт
	
	Если ДополнительныеСвойства = Неопределено Тогда
		ДополнительныеСвойства = Новый Структура;
	КонецЕсли;
	
КонецПроцедуры

#Область КонтрольНеопубликованногоКомментария

Процедура ЗадатьВопросОНеопубликованномКомментарии(Форма, Знач ПараметрыЗаписи = Неопределено) Экспорт
	
	Если ПараметрыЗаписи = Неопределено Тогда
		ТекстВопроса = 
		"Есть неопубликованный комментарий. 
		|Закрыть форму?";
	Иначе
		ТекстВопроса = 
		"Есть неопубликованный комментарий. После записи комментарий будет потерян. 
		|Продолжить?";
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("Форма, ПараметрыЗаписи", Форма, ПараметрыЗаписи);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросОНеопубликованномКомментарии", 
		ЭтотОбъект, ПараметрыОповещения);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

Процедура ОбработатьВопросОНеопубликованномКомментарии(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Форма = ПараметрыОповещения.Форма;
		Форма.ЕстьНеопубликованныйКомментарий = Ложь;
		
		ПараметрыЗаписи = ПараметрыОповещения.ПараметрыЗаписи;
		
		Если ПараметрыЗаписи = Неопределено Тогда
			Форма.Закрыть();
		Иначе
			Форма.Записать(ПараметрыЗаписи);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольНесохраненныхПоказателейМетрик

// Показывает вопрос закрытия формы с не сохраненными изменениями показателей расчета метрик
//
// Параметры:
//  Форма	 - УправляемаяФорма	 - форма (владелец) проекта или внутреннего задания
//
Процедура ЗадатьВопросОНеСохранныхПоказателяхПриоритета(Форма) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросОНеСохраненныхПоказателяхПриоритета", ЭтотОбъект, Форма);
	ТекстВопроса = "На странице ""Расчет приоритета"" есть несохраненные изменения. Закрыть форму?";
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , "Не сохраненные показатели приоритета");
	
КонецПроцедуры

// Обработчик описания оповещения
//
// Параметры:
//  Результат	 - КодВозвратаДиалога, Неопределено	 - код ответа или Неопределено в случае закрытия формы
//  Форма		 - УправляемаяФорма	 - форма (владелец) проекта или внутреннго задания
//
Процедура ОбработатьВопросОНеСохраненныхПоказателяхПриоритета(Результат, Форма) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Форма.ЕстьИзмененныеПоказателейПриоритета = Ложь;
		Форма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Осуществляет сдвиг стандартного периода вперед или назад на такой же период.
//	Срабатывает только при условии заполненности даты начала и окончания.
//
// Параметры:
//  ИмяКоманды	 - Строка		 - Строка для определения в какую сторону сдвигать период
//  Период		 - СтандартныйПериод	 - Текущий период
// 
// Возвращаемое значение:
//  СтандартныйПериод - Новый период
//
Функция СдвигПериода(Знач ИмяКоманды, Знач Период) Экспорт
	
	Если НЕ (ЗначениеЗаполнено(Период.ДатаНачала) И ЗначениеЗаполнено(Период.ДатаОкончания)) Тогда
		Возврат Период;
	КонецЕсли;
	
	ДатаНачала = НачалоДня(Период.ДатаНачала);
	ДатаОкончания = КонецДня(Период.ДатаОкончания);
	
	Сдвиг = ?(ИмяКоманды = "СдвигПериодаВперед", 1, -1);
	
	НовыйПериод = Новый СтандартныйПериод;
	
	Если ДатаНачала = НачалоМесяца(ДатаНачала) И ДатаОкончания = КонецМесяца(ДатаОкончания) Тогда
		КоличествоМесяцевВТекущемПериоде = Месяц(ДатаОкончания) - Месяц(ДатаНачала) + 1;
		КоличествоЛетВТекущемПериоде = Год(ДатаОкончания) - Год(ДатаНачала);
		
		СдвигМесяцев = КоличествоМесяцевВТекущемПериоде + КоличествоЛетВТекущемПериоде * 12;
		
		НовыйПериод.ДатаНачала = ДобавитьМесяц(ДатаНачала, СдвигМесяцев * Сдвиг);
		НовыйПериод.ДатаОкончания = КонецМесяца(ДобавитьМесяц(ДатаОкончания, СдвигМесяцев*Сдвиг));
	Иначе
		КоличествоСекундВТекущемПериоде = ДатаОкончания - ДатаНачала;
		
		Если Сдвиг = 1 Тогда
			НовыйПериод.ДатаНачала = ДатаОкончания + 1;
			НовыйПериод.ДатаОкончания = НовыйПериод.ДатаНачала + КоличествоСекундВТекущемПериоде;
		Иначе
			НовыйПериод.ДатаОкончания = ДатаНачала - 1;
			НовыйПериод.ДатаНачала = НовыйПериод.ДатаОкончания - КоличествоСекундВТекущемПериоде;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НовыйПериод;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка и подключение расширения работы с файлами

// Установка расширения работы с файлами
//
//Параметры
//РезультатВопроса - ответ на "ПоказатьВопрос" в функции ПроверитьРасширениеРаботыСФайлами()
//ДополнительныеПараметры - Объект
//
Процедура ОбработатьВопросУстановкиРасширенияРаботыСФайлами(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 		
		НачатьУстановкуРасширенияРаботыСФайлами();
		ПодключитьРасширениеРаботыСФайлами();           		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет Веб-клиент на наличие расширения работы с файлами
Функция ПроверитьРасширениеРаботыСФайлами() Экспорт

	Результат = ПодключитьРасширениеРаботыСФайлами();
	Если не Результат Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросУстановкиРасширенияРаботыСФайлами", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Для отправки электронных писем требуется установить расширение для работы с файлами. Выполнить установку?",
			РежимДиалогаВопрос.ДаНет);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Поиск по документам и справочникам

Процедура АвтоПодбор(Знач Текст, Знач ПараметрыПоиска, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда 
		Возврат;
	КонецЕсли;	
	
	СтандартнаяОбработка = Ложь;	
	КопияТекста = НРег(СокрЛП(Текст));
	Если СтрДлина(КопияТекста) >= 2 И ПолнотекстовыйПоискКлиент.СтрокаПодобнаНомеруОбъекта(КопияТекста) Тогда
		ОбщегоНазначенияВызовСервера.ЗаполнитьСписокПредложений(КопияТекста, ПараметрыПоиска, ДанныеВыбора);
	КонецЕсли;
		
КонецПроцедуры	

// Проверяет, является ли переданная строка веб-ссылкой.
// 
// Параметры:
//  Строка - Строка - переданная ссылка.
//
Функция ЭтоВебСсылка(Строка) Экспорт
	
	Возврат СтрНачинаетсяС(Строка, "http://") ИЛИ СтрНачинаетсяС(Строка, "https://")
		ИЛИ СтрНачинаетсяС(Строка, "ftp://");
	
КонецФункции

// Проверяет, является ли переданная строка навигационной ссылкой.
//  
// Параметры:
//  Строка - Строка - навигационная ссылка.
//
Функция ЭтоНавигационнаяСсылка(Строка) Экспорт
	
	Возврат СтрНайти(Строка, "e1cib/data/") <> 0             // объект или запись или реквизит информационной базы
		                                                     // или запись таблицы внешнего источника
		ИЛИ СтрНайти(Строка, "e1cib/app/") <> 0              // обработка или отчет
		ИЛИ СтрНайти(Строка, "e1cib/navigationpoint/") <> 0  // раздел или точка навигации стандартной команды 
		                                                     // или начальная страница
		ИЛИ СтрНайти(Строка, "e1cib/command/") <> 0          // команда глобального командного интерфейса
		ИЛИ СтрНайти(Строка, "e1cib/list/") <> 0;            // форма списка
		
		// e1cib/tempstorage/ ссылки на временное хранилище запрещены.
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ИНТЕРФЕЙСОМ И ФОРМАМИ

// Обновляет интерфейс программы сохраняя текущее активное окно
//
Процедура ОбновитьИнтерфейсПрограммы() Экспорт
	
	ТекущееАктивноеОкно = АктивноеОкно();
	
	ОбновитьИнтерфейс();
	
	Если ТекущееАктивноеОкно <> Неопределено Тогда
		ТекущееАктивноеОкно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с отправкой писем

// Проверяет установлено ли  у веб-клиента расширение для работы с файлами
Функция ПроверкаРасширенияПриОтправкеПисьма() Экспорт
	
	#Если ВебКлиент Тогда
		Если ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайлами() Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	#Иначе
		Возврат Истина;
	#КонецЕсли
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заинтересованные лица

Процедура ОткрытьФормуЗаписиЗаинтересованныеЛица(Форма, ТаблицаФормы, КлючУникальности, Знач Объект, Знач Пользователь = Неопределено) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Объект", Объект);
	ПараметрыОповещения.Вставить("ТаблицаФормы", ТаблицаФормы);
		
	Если Пользователь = Неопределено Тогда
		ПараметрыОткрытия.Вставить("Объект", Объект);
		ПараметрыОповещения.Вставить("Оповестить", Истина);
	Иначе
		ПараметрыОповещения.Вставить("Оповестить", Ложь);
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый Структура("Объект, Пользователь", Объект, Пользователь));
		
		КлючЗаписи = Новый("РегистрСведенийКлючЗаписи.ЗаинтересованныеЛица", МассивПараметров);
		ПараметрыОткрытия.Вставить("Ключ", КлючЗаписи);
	КонецЕсли;
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеЗаинтересованныхЛиц", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму("РегистрСведений.ЗаинтересованныеЛица.ФормаЗаписи", ПараметрыОткрытия, Форма, КлючУникальности,
		, , ОписаниеОповещения);
	
КонецПроцедуры
	
Процедура ОбработатьИзменениеЗаинтересованныхЛиц(Знач Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьТаблицуЗаинтересованныхЛиц(ДополнительныеПараметры.Объект, ДополнительныеПараметры.ТаблицаФормы);
	
	Если ДополнительныеПараметры.Оповестить Тогда
		Оповестить(СобытияОповещенияКлиент.ИмяСобытияОбновленияКоличестваЗаинтересованныхЛиц(), ДополнительныеПараметры.Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьТаблицуЗаинтересованныхЛиц(Знач Объект, Таблица) Экспорт
	
	Таблица.Очистить();
	МассивЗаинтересованных = ОбщегоНазначенияВызовСервера.ПолучитьЗаинтересованныхЛиц(Объект);
		
	Если МассивЗаинтересованных.Количество() > 0 Тогда
		Для Каждого Элемент Из МассивЗаинтересованных Цикл
			ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Элемент);
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Серьезность ошибки

// Устанавливает видимость и значение поля ввода СерьезностьОшибок 
//
// Параметры:
//  Элемент           - ПолеФормы - поле ввода для выбора серьезности ошибки
//  СерьезностьОшибки - СправочникСсылка.СерьезностьОшибок - реквизит формы для хранения серьезности
//  Назначение        - СправочникСсылка.НазначенияЗадач - ссылка на элемент справочника
//
Процедура УстановитьСерьезность(Элемент, СерьезностьОшибки, Знач Назначение) Экспорт
		
	Если Назначение = ПредопределенноеЗначение("Справочник.НазначенияЗадач.Ошибка") Тогда
		СерьезностьОшибки = ПредопределенноеЗначение("Справочник.СерьезностьОшибок.Средняя");
		Элемент.Видимость = Истина;
	Иначе
		СерьезностьОшибки = ПредопределенноеЗначение("Справочник.СерьезностьОшибок.ПустаяСсылка");
		Элемент.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает видимость и значение поля ввода СерьезностьОшибок 
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой необходимо обновить поле Серьезность
//
Процедура ОбновитьВидимостьСерьезностиОшибки(Форма) Экспорт
	
	ЭлементСерьезностьОшибки = Форма.Элементы.Найти("СерьезностьОшибки");
	
	Если ЭлементСерьезностьОшибки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
				
	РеквизитНазначение = Форма["Объект"]["Назначение"];
	
	Если РеквизитНазначение = ПредопределенноеЗначение("Справочник.НазначенияЗадач.Ошибка") Тогда
		ЭлементСерьезностьОшибки.Видимость = Истина;
	КонецЕсли;
				
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СрокСдачиЗадачи

Функция ПроверитьКорректностьНовогоСрока(Знач НовыйСрок, Знач СтарыйСрок) Экспорт
	
	РезультатПроверки = Новый Структура("Ошибка, ТекстОшибки", Ложь, "");
	
	ТекущаяДата = ОбщегоНазначенияВызовСервера.ТекущаяДатаСеансаНаСервере();
	
	Если НовыйСрок <= НачалоДня(ТекущаяДата) Тогда
		РезультатПроверки.Ошибка = Истина;
		РезультатПроверки.ТекстОшибки = "Нельзя устанавливать текущую или прошедшую дату.";
	ИначеЕсли СтарыйСрок = НовыйСрок Тогда
		РезультатПроверки.Ошибка = Истина;
		РезультатПроверки.ТекстОшибки = "Новый срок равен предыдущему сроку.";
	КонецЕсли;
	
	Возврат РезультатПроверки;

КонецФункции
