///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ВнешнееСоединение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда

#Область ПрограммныйИнтерфейс

// Обработчик регламентного задания "КонтрольСлужебныхФоновыхЗаданий".
//
Процедура КонтрольСлужебныхФоновыхЗаданийОбработчикЗадания() Экспорт
	
	МетаданныеРегламентногоЗадания = Метаданные.РегламентныеЗадания.КонтрольСлужебныхФоновыхЗаданий;
	
	// Перед выполнением регламентного задания необходимо проверить глобальное разрешение на запуск
	ПриНачалеВыполненияРегламентногоЗадания(МетаданныеРегламентногоЗадания);
	
	#Область ЦиклическиеЗадания
	////////////////////////////////////////////////////////////////////////////////
	// Область запуска фоновых заданий, которые выполняются циклически
	ОтборФоновыхЗаданий = Новый Структура("Состояние, Ключ", СостояниеФоновогоЗадания.Активно);
	
	// Время в секундах, на которое фоновое задание будет приостановлено до начала следующего цикла выполнения
	ВремяПриостановкиФоновогоЗадания = Справочники.СлужебныеФоновыеЗадания.ВремяПриостановкиЗадания();
	ИнтервалПерезапуска = Константы.ИнтервалПерезапускаСлужебныхФоновыхЗаданий.Получить();
	ИнтервалПерезапуска = ?(ИнтервалПерезапуска = 0, 3600, ИнтервалПерезапуска);
	
	// Выбор свойств используемых служебных фоновых заданий
	ЗапросФоновыхЗаданий = Новый Запрос;
	ЗапросФоновыхЗаданий.Текст =
	"ВЫБРАТЬ
	|	СлужебныеФоновыеЗадания.Код КАК КлючФоновогоЗадания,
	|	СлужебныеФоновыеЗадания.Наименование КАК Наименование,
	|	СлужебныеФоновыеЗадания.ИмяМетода КАК ИмяМетода,
	|	СлужебныеФоновыеЗадания.ПериодичностьЗапуска КАК ПериодичностьЗапуска
	|ИЗ
	|	Справочник.СлужебныеФоновыеЗадания КАК СлужебныеФоновыеЗадания
	|ГДЕ
	|	СлужебныеФоновыеЗадания.Использование = ИСТИНА
	|	И СлужебныеФоновыеЗадания.ПериодичностьЗапуска > 0";
	
	УдалитьСтарыеЗадания = Истина;
	ВремяПриостановки = 60;
	ПрефиксКлюча = РегистрыСведений.ОчередьСобытийНаОбработку.ПрефиксКлючаФоновогоЗадания(); 
	ДатаНачала = ТекущаяДатаСеанса();
	
	Пока Истина Цикл
		РезультатЗапроса = ЗапросФоновыхЗаданий.Выполнить();
		
		// Получение активных фоновых заданий, проверка их работы, запуск в случае отсутствия
		Если НЕ РезультатЗапроса.Пустой() Тогда
			СлужебныеФоновыеЗадания = РезультатЗапроса.Выгрузить();
			
			Если УдалитьСтарыеЗадания Тогда 
				БылиОтмены = Ложь;
				
				Для Каждого СвойстваЗадания Из СлужебныеФоновыеЗадания Цикл
					Если ОтменитьФоновоеЗаданиеПоКлючу(СвойстваЗадания.КлючФоновогоЗадания) Тогда
						БылиОтмены = Истина;
					КонецЕсли;
				КонецЦикла;  
				
				КоличествоПотоков = ОбщегоНазначения.КоличествоПотоковОбработкиОчередиСобытий();
				
				Для НомерПотока = 1 По КоличествоПотоков Цикл
					Если ОтменитьФоновоеЗаданиеПоКлючу(ПрефиксКлюча + НомерПотока) Тогда
						БылиОтмены = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Если БылиОтмены Тогда 
					ОбщегоНазначения.Пауза(ВремяПриостановки);
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого СвойстваЗадания Из СлужебныеФоновыеЗадания Цикл
				// Поиск уже запущенных фоновых заданий с указанным ключом
				ОтборФоновыхЗаданий.Ключ = СвойстваЗадания.КлючФоновогоЗадания;
				АктивныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФоновыхЗаданий);
				
				// Если есть активные фоновые задания
				Если АктивныеФоновыеЗадания.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				// Иначе выполняется запуск нового фонового задания
				Параметры = Новый Массив;
				Параметры.Добавить(СвойстваЗадания.КлючФоновогоЗадания);
				Параметры.Добавить(СвойстваЗадания.ПериодичностьЗапуска);
				Параметры.Добавить(ВремяПриостановкиФоновогоЗадания);
				
				ФоновыеЗадания.Выполнить(СвойстваЗадания.ИмяМетода, Параметры, СвойстваЗадания.КлючФоновогоЗадания,
					СвойстваЗадания.Наименование);
			КонецЦикла;
		КонецЕсли;
		
		// Приостановка регламентного задания на 60 сек.
		УдалитьСтарыеЗадания = Ложь;
		ОбщегоНазначения.Пауза(ВремяПриостановки);
		ТекущаяДата = ТекущаяДатаСеанса();  
		Перезапуск = ДатаНачала + ИнтервалПерезапуска < ТекущаяДата;
		
		// Если у регламентного задания был отключен режим использования или в информационной
		// базе включена блокировка сеансов, то регламентное задание завершается.
		РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(МетаданныеРегламентногоЗадания);
		
		Если НЕ РегламентноеЗадание.Использование
			ИЛИ УправлениеДоступомВызовСервера.БлокировкаСеансовУстановлена() 
			ИЛИ Перезапуск Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	#КонецОбласти
	
КонецПроцедуры

// Обработчик регламентного задания ОбновлениеДатыЗапретаИзмененияДанных,
// устанавливает значение константы ДатаЗапретаИзмененияДанных
Процедура ОбновлениеДатыЗапретаИзмененияДанных() Экспорт
	
	ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеДатыЗапретаИзмененияДанных);
	
	ИмяСобытия = "Регламентные и фоновые задания. Обновление даты запрета изменения данных";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , ,
		"Запуск процедуры ""Обновление даты запрета изменения данных"".");
	
	ТекущаяДата = ТекущаяДатаСеанса();
	НомерДня = День(ТекущаяДата);
	ПрошлыйМесяц = ДобавитьМесяц(ТекущаяДата, -1);
	КонецПрошлогоМесяца = КонецМесяца(ПрошлыйМесяц);
	
	ШестойДеньМесяца = 6;
	
	Документы.Трудозатраты.ПроверитьРасхождениеКлючевыхИзмеренийТрудозатрат();
	
	Если НомерДня = ШестойДеньМесяца Тогда 		
		
		Попытка
			Константы.ДатаЗапретаИзмененияДанных.Установить(КонецПрошлогоМесяца);
		Исключение
			ТекстОшибки = СтрШаблон("Не удалось установить значение константы ""ДатаЗапретаИзмененияДанных"" по причине: %1",
					ОписаниеОшибки());
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		КонецПопытки;
		
		УстановитьПризнакЗапретаИзмененияДокументовТрудозатрат();
		
	ИначеЕсли НомерДня > ШестойДеньМесяца Тогда        
		
		ДатаЗапретаИзмененияДанных = Константы.ДатаЗапретаИзмененияДанных.Получить();
		
		Если ДатаЗапретаИзмененияДанных <> НачалоДня(КонецПрошлогоМесяца) Тогда
			// Отправляем уведомление в служебный канал в мессенджер
			ШаблонСообщения =
				":warning: *НАЙДЕНА ПРОБЛЕМА В ПРОДУКТОВОЙ БАЗЕ SDMS* :warning:
				|Значение константы _ДатаЗапретаИзмененияДанных_ не соответствует _%1_.";
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Формат(КонецПрошлогоМесяца, "ДФ=dd.MM.yyyy"));
			РегистрыСведений.БуферСообщений.Добавить(Перечисления.СпособыОтправкиСообщений.Мессенджер, 
				Перечисления.ТипыСлужебногоКанала.СообщениеОбОшибках, ТекстСообщения,,
				Перечисления.ТипыСообщенийМессенджера.ПроблемаСДатойЗапрета);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , ,
		"Завершение процедуры ""Обновление даты запрета изменения данных"".");
	
КонецПроцедуры

// Процедура обработки регламентного задания по очистке регистров замеров
Процедура ОчиститьРегистрыЗамерыВремени() Экспорт
	
	Возврат;
	
	ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЭкспортОценкиПроизводительности);
	
	ИнтеграцияДополнительныхПодсистем.ОчиститьРегистрыЗамерыВремени();
	
КонецПроцедуры

// Обработчик регламентного задания "ОчисткаИБД"
Процедура ОчисткаИБД() Экспорт
	
	ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОчисткаИБД);
		
	ИмяСобытия = "Регламентные и фоновые задания. Очистка ИБД";	
		
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , "ПрикрепленныеФайлы: Начало");	
	РегистрыСведений.ПрикрепленныеФайлы.ОчиститьБитыеСсылки();	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , "ПрикрепленныеФайлы: Окончание");
	
	// Удаление устаревших записей из регистра сведений "ДоступныеЧерновики"
	РегистрыСведений.ДоступныеЧерновики.УдалитьНеактуальныеЗаписи("Удаление устаревших данных");
	
	// Удаление недействительных участников
	РегистрыСведений.Участники.УдалитьНедействительныхУчастников();
	
	// Удаление автосохраненных описаний, которые храняться больше N-дней
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , "АвтосохраненныеОписания: Начало");
	РегистрыСведений.АвтосохраненныеОписания.ОчиститьНеактуальныеЗаписи();
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , "АвтосохраненныеОписания: Окончание");
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , "НаправленияИСистемы: Начало");
	РегистрыСведений.НаправленияИСистемыИзмененныхЗаявок.ОчиститьУстаревшие();
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , "НаправленияИСистемы: Окончание");
	
	// Удаление писем из папки "Удаленные" служеного почтового ящика SDMS
	ОчиститьСлужебныйПочтовыйЯщик();
	
	ИнтеграцияДополнительныхПодсистем.ОчиститьОчередьОбмена(ИмяСобытия);
	
КонецПроцедуры

// Обработчик регламентного задания "ОчисткаИБДПорционная"
Процедура ОчисткаИБДПорционная() Экспорт
	
	ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОчисткаИБДПорционная);
	
	// Каждые первые 5 дней месяца
	Если День(ТекущаяДатаСеанса()) <= 5 Тогда
		ДатаОтсечки = ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()), -1);
		
		ОчиститьРегистр(ДатаОтсечки, "ОчередьОтправкиЭлектронныхПисем", "ДатаСоздания");
		ОчиститьРегистр(ДатаОтсечки, "ПодготовленныеСообщенияПользователяПоКатегориям", "ДатаСоздания");
		ОчиститьРегистр(ДатаОтсечки, "ОчередьСобытийНаОбработку", "Период");
		ОчиститьРегистр(ДатаОтсечки, "БуферСообщений", "ДатаДобавления");
		ОчиститьРегистр(ДатаОтсечки, "ОчередьСравненияИзмененийОписанийОбъектов", "Дата");
		ОчиститьРегистр(ДатаОтсечки, "СтатистикаЗапросовAPI", "Дата");
		ОчиститьРегистр(ДатаОтсечки, "СтатистикаСеансовПользователей", "Период");
		УдалитьТекстыОбъектовДляСемантическогоАнализаБезСтопСлов(ДатаОтсечки);
		
		ДопРегистры = ИнтеграцияДополнительныхПодсистем.ДополнительныеРегистрыДляОчистки();
		Для Каждого Регистр Из ДопРегистры Цикл
			ОчиститьРегистр(ДатаОтсечки, Регистр.Ключ, Регистр.Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия перед продолжением выполнения обработчика регламентного задания.
//
// Например, проверяет возможность выполнения обработчика регламентного задания.
// Если администратор не заблокировал выполнение регламентных заданий до
// окончания обновления ИБ, тогда требуется прекратить выполнение обработчика.
//
// Параметры:
//  РегламентноеЗадание - ОбъектМетаданных.РегламентноеЗадание - регламентное задание,
//                        из которого был вызван данный метод.
//
Процедура ПриНачалеВыполненияРегламентногоЗадания(РегламентноеЗадание = Неопределено) Экспорт
	
	НайденныеОшибки = Новый Массив;
	НайденныеОшибки.Добавить("Невозможно запустить регламентное задание:");
	
	РазрешитьЗапускЗаданий = Константы.РазрешитьЗапускРегламентныхЗаданий.Получить();
	
	Если НЕ РазрешитьЗапускЗаданий Тогда
		НайденныеОшибки.Добавить("- Запуск регламентных заданий отключен в настройках программы.");
	КонецЕсли;
	
	ЭтоПродуктоваяБаза = ПовторноеИспользованиеВызовСервера.ЭтоПродуктоваяБаза();
	
	Если НЕ ЭтоПродуктоваяБаза Тогда
		НайденныеОшибки.Добавить("- Не допускается запуск регламентных заданий вне продуктовой системы.");
	КонецЕсли;
	
	Если НайденныеОшибки.Количество() > 1 Тогда
		ТекстСообщения = СтрСоединить(НайденныеОшибки, Символы.ПС);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ЗАПУСКА ФОНОВЫХ ЗАДАНИЙ

Процедура ВыполнитьСемантическийАнализ(Знач Ключ, Знач Периодичность, Знач ВремяПриостановки) Экспорт
	
	// Текущее фоновое задание должно работать только от имени служебного пользователя
	Если НЕ УправлениеДоступом.ЭтоСлужебныйПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	ОтборФоновыхЗаданий = Новый Структура("Состояние, Ключ", СостояниеФоновогоЗадания.Активно, Ключ);
	ВремяСледующегоВыполнения = ТекущаяДатаСеанса();
	
	Пока Истина Цикл
		СписокФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФоновыхЗаданий);
		Если СписокФоновыхЗаданий.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		// Проверка наступиления времени выполнения задания
		Если ВремяСледующегоВыполнения <= ТекущаяДатаСеанса() Тогда
			ВремяСледующегоВыполнения = ТекущаяДатаСеанса() + Периодичность;
			
			СемантическийАнализ.ВыполнитьСемантическийАнализ();
		КонецЕсли;
		
		// Приостановка выполнения фонового задания на N-миллисекунд
		ОбщегоНазначения.Пауза(ВремяПриостановки);
		
		// Если в справочнике СлужебныеФоновыеЗадания отключено использование задания
		// или в информационной базе включена блокировка сеансов, регламентное задание завершается.
		Если НЕ Справочники.СлужебныеФоновыеЗадания.ФоновоеЗаданиеИспользуется(Ключ)
			ИЛИ УправлениеДоступомВызовСервера.БлокировкаСеансовУстановлена() Тогда
			
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет периодический пересчет очереди Канбана.
//
// Параметры:
//  Ключ              - Строка - идентификатор фонового задания, уникальный среди всех
//                      фоновых заданий.
//  Периодичность     - Число - периодичность повтора выполнения фонового задания
//                      в секундах.
//  ВремяПриостановки - Число - время приостановки фонового задания в миллисекундах после
//                      завершения итерации выполнения.
//
Процедура ПересчетОчередиЗадач(Знач Ключ, Знач Периодичность, Знач ВремяПриостановки) Экспорт
	
	// Текущее фоновое задание должно работать только от имени служебного пользователя
	Если НЕ УправлениеДоступом.ЭтоСлужебныйПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	ОтборФоновыхЗаданий = Новый Структура("Состояние, Ключ", СостояниеФоновогоЗадания.Активно, Ключ);
	ВремяСледующегоВыполнения = ТекущаяДатаСеанса();
	
	Пока Истина Цикл
		СписокФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФоновыхЗаданий);
		Если СписокФоновыхЗаданий.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		// Проверка наступиления времени выполнения задания
		Если ВремяСледующегоВыполнения <= ТекущаяДатаСеанса() Тогда
			ВремяСледующегоВыполнения = ТекущаяДатаСеанса() + Периодичность;
			
			РегистрыСведений.ОчередьКанбан.АктуализироватьОчередь();			
		КонецЕсли;
		
		// Приостановка выполнения фонового задания на N-миллисекунд
		ОбщегоНазначения.Пауза(ВремяПриостановки);
		
		// Если в справочнике СлужебныеФоновыеЗадания отключено использование задания
		// или в информационной базе включена блокировка сеансов, регламентное задание завершается.
		Если Справочники.СлужебныеФоновыеЗадания.ФоновоеЗаданиеИспользуется(Ключ) = Ложь
			ИЛИ УправлениеДоступомВызовСервера.БлокировкаСеансовУстановлена() Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет периодический пересчет очереди "Заявок на разработку".
//
// Параметры:
//  Ключ              - Строка - идентификатор фонового задания, уникальный среди всех
//                      фоновых заданий.
//  Периодичность     - Число - периодичность повтора выполнения фонового задания
//                      в секундах.
//  ВремяПриостановки - Число - время приостановки фонового задания в миллисекундах после
//                      завершения итерации выполнения.
//
Процедура ПересчетОчередиЗаявок(Знач Ключ, Знач Периодичность, Знач ВремяПриостановки) Экспорт
	
	// Текущее фоновое задание должно работать только от имени служебного пользователя
	Если НЕ УправлениеДоступом.ЭтоСлужебныйПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	ОтборФоновыхЗаданий = Новый Структура("Состояние, Ключ", СостояниеФоновогоЗадания.Активно, Ключ);
	ВремяСледующегоВыполнения = ТекущаяДатаСеанса();
	
	Пока Истина Цикл
		СписокФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФоновыхЗаданий);
		Если СписокФоновыхЗаданий.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		// Проверка наступиления времени выполнения задания
		Если ВремяСледующегоВыполнения <= ТекущаяДатаСеанса() Тогда
			ВремяСледующегоВыполнения = ТекущаяДатаСеанса() + Периодичность;			
			
			РегистрыСведений.ОчередиЗаявок.ПересчитатьОчередь();
			РегистрыСведений.ОчередиЗаявок.ПересчитатьОчередьПоСистеме();			
		КонецЕсли;
		
		// Приостановка выполнения фонового задания на N-миллисекунд
		ОбщегоНазначения.Пауза(ВремяПриостановки);
		
		// Если в справочнике СлужебныеФоновыеЗадания отключено использование задания
		// или в информационной базе включена блокировка сеансов, регламентное задание завершается.
		Если Справочники.СлужебныеФоновыеЗадания.ФоновоеЗаданиеИспользуется(Ключ) = Ложь
			ИЛИ УправлениеДоступомВызовСервера.БлокировкаСеансовУстановлена() Тогда
			
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет периодический анализ и удаление завершенных задач из очереди задач для канбана.
//
// Параметры:
//  Ключ              - Строка - идентификатор фонового задания, уникальный среди всех
//                      фоновых заданий.
//  Периодичность     - Число - периодичность повтора выполнения фонового задания
//                      в секундах.
//  ВремяПриостановки - Число - время приостановки фонового задания в миллисекундах после
//                      завершения итерации выполнения.
//
Процедура УдалениеЗавершенныхЗадачИзОчереди(Знач Ключ, Знач Периодичность, Знач ВремяПриостановки) Экспорт
	
		// Текущее фоновое задание должно работать только от имени служебного пользователя
	Если НЕ УправлениеДоступом.ЭтоСлужебныйПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	ОтборФоновыхЗаданий = Новый Структура("Состояние, Ключ", СостояниеФоновогоЗадания.Активно, Ключ);
	ВремяСледующегоВыполнения = ТекущаяДатаСеанса();
	
	Пока Истина Цикл
		СписокФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФоновыхЗаданий);
		Если СписокФоновыхЗаданий.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		// Проверка наступиления времени выполнения задания
		Если ВремяСледующегоВыполнения <= ТекущаяДатаСеанса() Тогда
			ВремяСледующегоВыполнения = ТекущаяДатаСеанса() + Периодичность;
			
			РегистрыСведений.ОчередьКанбан.УдалитьЗавершенныеЗадачиИзОчереди();
		КонецЕсли;
		
		// Приостановка выполнения фонового задания на N-миллисекунд
		ОбщегоНазначения.Пауза(ВремяПриостановки);
		
		// Если в справочнике СлужебныеФоновыеЗадания отключено использование задания
		// или в информационной базе включена блокировка сеансов, регламентное задание завершается.
		Если Справочники.СлужебныеФоновыеЗадания.ФоновоеЗаданиеИспользуется(Ключ) = Ложь
			ИЛИ УправлениеДоступомВызовСервера.БлокировкаСеансовУстановлена() Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область ОбработкаОчередиСобытий

Процедура ОбработкаОчередиСобытий(Знач Ключ, Знач Периодичность, Знач ВремяПриостановки) Экспорт
	
	// Текущее фоновое задание должно работать только от имени служебного пользователя
	Если НЕ УправлениеДоступом.ЭтоСлужебныйПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	ОтборФоновыхЗаданий = Новый Структура("Состояние, Ключ", СостояниеФоновогоЗадания.Активно, Ключ);
	ВремяСледующегоВыполнения = ТекущаяДатаСеанса();
	
	Пока Истина Цикл
		СписокФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФоновыхЗаданий);
		Если СписокФоновыхЗаданий.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		// Проверка наступиления времени выполнения задания
		Если ВремяСледующегоВыполнения <= ТекущаяДатаСеанса() Тогда
			ВремяСледующегоВыполнения = ТекущаяДатаСеанса() + Периодичность;
			
			РегистрыСведений.ОчередьСобытийНаОбработку.ОбработатьОчередь();
		КонецЕсли;
		
		// Приостановка выполнения фонового задания на N-миллисекунд
		ОбщегоНазначения.Пауза(ВремяПриостановки);
		
		// Если в справочнике СлужебныеФоновыеЗадания отключено использование задания
		// или в информационной базе включена блокировка сеансов, регламентное задание завершается.
		Если Справочники.СлужебныеФоновыеЗадания.ФоновоеЗаданиеИспользуется(Ключ) = Ложь
			ИЛИ УправлениеДоступомВызовСервера.БлокировкаСеансовУстановлена() Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьПотокОчереди(Знач НомерПотока = 0) Экспорт
	
	// Текущее фоновое задание должно работать только от имени служебного пользователя
	Если НЕ УправлениеДоступом.ЭтоСлужебныйПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	Пока Истина Цикл
		
		Если НЕ РазрешеноВыполнениеПотока(НомерПотока) Тогда
			Возврат;
		КонецЕсли;
		
		// Время приостановки хранится в секундах.
		ВремяПриостановки = Константы.ВремяПриостановкиПотоковОбработкиОчередиСобытий.Получить();
		
		// Обрабатываем поток
		РегистрыСведений.ОчередьСобытийНаОбработку.ОбработатьПотокОчереди(НомерПотока);
		
		// Приостановка фонового
		ОбщегоНазначения.Пауза(ВремяПриостановки);
	КонецЦикла;
	
КонецПроцедуры

Функция РазрешеноВыполнениеПотока(Знач НомерПотока)
	
	ОтборФоновыхРодителя = Новый Структура;
	ОтборФоновыхРодителя.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	ОтборФоновыхРодителя.Вставить("Ключ", Справочники.СлужебныеФоновыеЗадания.ОбработкаОчередиСобытий.Код);
	
	// Проверка активности родительского фонового
	РодительскоеЗаданиеЗапущено = (ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФоновыхРодителя).Количество() > 0);
	
	// Поиск номера потока в списке разрешенных
	ПотокРазрешен = (НомерПотока <= Константы.КоличествоПотоковОбработкиОчередиСобытий.Получить());
	
	// Проверка блокировка базы
	УстановленаБлокировка = УправлениеДоступомВызовСервера.БлокировкаСеансовУстановлена();
	
	Возврат (РодительскоеЗаданиеЗапущено И ПотокРазрешен И НЕ УстановленаБлокировка);
	
КонецФункции

#КонецОбласти

Процедура ОтправкаУведомленийОСозданныхЗаявках(Знач Ключ, Знач Периодичность, Знач ВремяПриостановки) Экспорт
	
	// Текущее фоновое задание должно работать только от имени служебного пользователя
	Если НЕ УправлениеДоступом.ЭтоСлужебныйПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	ОтборФоновыхЗаданий = Новый Структура("Состояние, Ключ", СостояниеФоновогоЗадания.Активно, Ключ);
	ВремяСледующегоВыполнения = ТекущаяДатаСеанса();
	
	Пока Истина Цикл
		СписокФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФоновыхЗаданий);
		Если СписокФоновыхЗаданий.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		// Проверка наступиления времени выполнения задания
		Если ВремяСледующегоВыполнения <= ТекущаяДатаСеанса() Тогда
			ВремяСледующегоВыполнения = ТекущаяДатаСеанса() + Периодичность;
			
			РегистрыСведений.ОчередьЗаявокНаОповещениеПользователей.ПодготовитьОповещенияПользователей();
		КонецЕсли;
		
		// Приостановка выполнения фонового задания на N-миллисекунд
		ОбщегоНазначения.Пауза(ВремяПриостановки);
		
		// Если в справочнике СлужебныеФоновыеЗадания отключено использование задания
		// или в информационной базе включена блокировка сеансов, регламентное задание завершается.
		Если Справочники.СлужебныеФоновыеЗадания.ФоновоеЗаданиеИспользуется(Ключ) = Ложь
			ИЛИ УправлениеДоступомВызовСервера.БлокировкаСеансовУстановлена() Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СравнениеИзмененийОписанийОбъектов(Знач Ключ, Знач ПериодичностьЗапуска, Знач ВремяПриостановки) Экспорт
	
	// Текущее фоновое задание должно работать только от имени служебного пользователя
	Если НЕ УправлениеДоступом.ЭтоСлужебныйПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	ОтборФоновыхЗаданий = Новый Структура("Состояние, Ключ", СостояниеФоновогоЗадания.Активно, Ключ);
	ВремяСледующегоВыполнения = ТекущаяДатаСеанса();
	
	Пока Истина Цикл
		СписокФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФоновыхЗаданий);
		Если СписокФоновыхЗаданий.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		// Проверка наступиления времени выполнения задания
		Если ВремяСледующегоВыполнения <= ТекущаяДатаСеанса() Тогда
			ВремяСледующегоВыполнения = ТекущаяДатаСеанса() + ПериодичностьЗапуска;
			
			РегистрыСведений.ОчередьСравненияИзмененийОписанийОбъектов.ОбработатьОчередь();
		КонецЕсли;
		
		// Приостановка выполнения фонового задания на N-миллисекунд
		ОбщегоНазначения.Пауза(ВремяПриостановки);
		
		// Если в справочнике СлужебныеФоновыеЗадания отключено использование задания
		// или в информационной базе включена блокировка сеансов, регламентное задание завершается.
		Если Справочники.СлужебныеФоновыеЗадания.ФоновоеЗаданиеИспользуется(Ключ) = Ложь
			ИЛИ УправлениеДоступомВызовСервера.БлокировкаСеансовУстановлена() Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалениеПрикрепленныхФайлов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Файлы.Ссылка КАК Файл,
	|	Файлы.Каталог КАК Каталог,
	|	Файлы.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ПО (ПрикрепленныеФайлы.Файл = Файлы.Ссылка)
	|ГДЕ
	|	НЕ Файлы.ПометкаУдаления
	|	И ПрикрепленныеФайлы.Объект ЕСТЬ NULL";  
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КаталогФайловНаСервере = ПовторноеИспользованиеВызовСервера.КаталогХраненияФайловНаСервере();
	КаталогФайловНаСервере = РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(КаталогФайловНаСервере);
	
	ХраненияФайлов = ПовторноеИспользованиеВызовСервера.ЗначениеКонстантыКаталогХраненияФайловНаСервере();
	КаталогФайловДляУдаления = РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(ХраненияФайлов) 
		+ РаботаСФайламиКлиентСервер.ДобавитьРазделительПути("attachments_delete");
	  
	Пока Выборка.Следующий() Цикл
		// По непонятной причине, иногда картинка, которая есть в описании объекта, удаляется из регистра
		// нужно проверить, что картинки точно нет 		
		СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(Выборка.Наименование, 1);
		СписокПоиска.ОбластьПоиска.Добавить(Метаданные.Документы.Задача);
		СписокПоиска.ОбластьПоиска.Добавить(Метаданные.Документы.ЗаявкаНаРазработку);
		СписокПоиска.ПолучатьОписание = Истина;
		СписокПоиска.ПолучатьПредставление = Истина;
		СписокПоиска.ПорогНечеткости = 0; 		
		СписокПоиска.ПерваяЧасть(); 
		
		Если СписокПоиска.Количество() > 0 Тогда
			
			Для Каждого ЭлементРезультат Из СписокПоиска Цикл  
				Документ = ЭлементРезультат.Значение;
				
				Если ТипЗнч(Документ) = Тип("ДокументСсылка.Задача") 
					ИЛИ ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда 
					
					Описание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Описание");					
					РедакторОписания.ОбработатьОписание(Документ, Описание.Получить());     
					
					// Бывает ошибочное срабатывание. То есть представление картинки одно, а реальный
					// используемый файл другой. Проверю, что добавился в регистр
					Набор = РегистрыСведений.ПрикрепленныеФайлы.СоздатьНаборЗаписей();
					Набор.Отбор.Объект.Установить(Документ);
					Набор.Отбор.Файл.Установить(Выборка.Файл); 
					Набор.Прочитать();
					
					Если Набор.Количество() > 0 Тогда
						Удалять = Ложь;
						Прервать;
					КонецЕсли;  
				КонецЕсли;
			КонецЦикла; 			
		КонецЕсли;
		
		Откуда = КаталогФайловНаСервере + РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(Выборка.Каталог);
		Куда = КаталогФайловДляУдаления	+ РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(Выборка.Каталог);

		РаботаСФайламиСервер.ПереместитьФайлССервера(Выборка.Файл, Откуда, Куда);				
	КонецЦикла;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Возвращает текст "<не определено>".
Функция ТекстНеОпределено() Экспорт
	
	Возврат НСтр("ru = '<не определено>'");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РЕГЛАМЕНТНЫЕ ЗАДАНИЯ

Процедура АктуализироватьДатыЗаявок() Экспорт
	
	ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.АктуализироватьДатыЗаявок);
	РегистрыСведений.ДатыАктуальностиЗаявокНаРазработку.ВыполнитьАктуализацию();
	
КонецПроцедуры

// Обновляет адреса мессенджера у всех активных пользователей SDMS
//
Процедура ОбновитьIDПользователейМессенджера() Экспорт
	
	ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновитьIDПользователейМессенджера);
	РегистрыСведений.АдресаПолучателей.ОбновитьИдентификаторыПользователейSDMS();
	
КонецПроцедуры

// Обновляет у документов ЗаявкаНаРазработку значение реквизита ПредставлениеСистем.
// Этот реквизит хранит представление всех систем, развернутое в строку.
//
Процедура ОбновитьПредставленияСистемЗаявок() Экспорт

	ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновитьПредставленияСистемЗаявок);
	
	// Проверка систем, у которых были изменены наименования
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РазрабатываемыеСистемы.Ссылка КАК Система
	|ИЗ
	|	Справочник.СистемыУчета КАК РазрабатываемыеСистемы
	|ГДЕ
	|	РазрабатываемыеСистемы.НаименованиеИзменено";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененныеСистемы = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Система");
	
	// Если такие системы существуют, необходимо обновить значение реквизита 
	// ПредставлениеСистем у всех заявок, где эти системы участвуют.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	ДокументЗаявка.Ссылка КАК Заявка,
	|	ДокументЗаявка.Дата КАК Дата,
	|	ДокументЗаявка.Номер КАК Номер
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ДокументЗаявка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ЗаявкаНаРазработкуСистемыРазработки
	|		ПО ДокументЗаявка.Ссылка = ЗаявкаНаРазработкуСистемыРазработки.Ссылка
	|			И (ЗаявкаНаРазработкуСистемыРазработки.Система В (&ИзмененныеСистемы))
	|ГДЕ
	|	ДокументЗаявка.Дата >= &Дата
	|	И ДокументЗаявка.Номер <> &Номер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Запрос.УстановитьПараметр("Номер", "ЗР000000000");
	Запрос.УстановитьПараметр("Дата", '19800101');
	Запрос.УстановитьПараметр("ИзмененныеСистемы", ИзмененныеСистемы);
	
	РезультатЗапроса = Запрос.Выполнить();
	Пока НЕ РезультатЗапроса.Пустой() Цикл
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗаявкаОбъект = Выборка.Заявка.ПолучитьОбъект();
			
			Документы.ЗаявкаНаРазработку.ЗаполнитьПредставлениеСистем(ЗаявкаОбъект);
			
			ЗаявкаОбъект.ОбменДанными.Загрузка = Истина;
			ЗаявкаОбъект.Записать();
		КонецЦикла;
		
		Запрос.Параметры.Номер = Выборка.Номер;
		Запрос.Параметры.Дата  = Выборка.Дата;
		
		РезультатЗапроса = Запрос.Выполнить();
	КонецЦикла;
	
	// Если предыдущий шаг завершился успешно, необходимо у всех измененных систем
	// установить значение НаименованиеИзменено в Ложь.
	Для Каждого Система Из ИзмененныеСистемы Цикл
		СистемаОбъект = Система.ПолучитьОбъект();
		СистемаОбъект.НаименованиеИзменено = Ложь;
		
		СистемаОбъект.ОбменДанными.Загрузка = Истина;
		СистемаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереносПлановогоВремениИзЗавершенныхСпринтов() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Спринт.Ссылка КАК Спринт,
	|	Спринт.ДатаНачала КАК ДатаНачала,
	|	Спринт.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ СпринтыЗавершенныеВчера
	|ИЗ
	|	Документ.Спринт КАК Спринт
	|ГДЕ
	|	РАЗНОСТЬДАТ(Спринт.ДатаОкончания, &ТекущаяДата, ДЕНЬ) = 1
	|	И Спринт.ВидСпринта = ЗНАЧЕНИЕ(Перечисление.ВидыСпринта.IT)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпринтыЗавершенныеВчера.Спринт КАК Спринт,
	|	СпринтыЗавершенныеВчера.ДатаНачала КАК ДатаНачала,
	|	СпринтыЗавершенныеВчера.ДатаОкончания КАК ДатаОкончания,
	|	ДокументЗадача.Ссылка КАК Объект
	|ПОМЕСТИТЬ ОтобранныеЗадачи
	|ИЗ
	|	СпринтыЗавершенныеВчера КАК СпринтыЗавершенныеВчера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ПО СпринтыЗавершенныеВчера.Спринт = СоставСпринтов.Спринт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО ((ВЫРАЗИТЬ(СоставСпринтов.Объект КАК Документ.Задача)) = ДокументЗадача.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (ДокументЗадача.Статус = СтатусыОбъектов.Ссылка)
	|			И (СтатусыОбъектов.Порядок < &ПорядокСтатусаВРаботе)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеЗадачи.Спринт КАК Спринт,
	|	ОтобранныеЗадачи.Объект КАК Объект,
	|	СУММА(ЕСТЬNULL(Трудозатраты.Затрата, 0)) КАК Затрата
	|ПОМЕСТИТЬ ФактическиеТрудозатратыЗаПериодСпринта
	|ИЗ
	|	ОтобранныеЗадачи КАК ОтобранныеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК Трудозатраты
	|		ПО ОтобранныеЗадачи.Объект = Трудозатраты.Объект
	|			И (Трудозатраты.ITСтруктура)
	|			И (Трудозатраты.Период МЕЖДУ ОтобранныеЗадачи.ДатаНачала И ОтобранныеЗадачи.ДатаОкончания)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтобранныеЗадачи.Спринт,
	|	ОтобранныеЗадачи.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическиеТрудозатратыЗаПериодСпринта.Объект КАК Объект,
	|	ДокументСпринт.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОбъектыДобавленныеВНовыйСпринт
	|ИЗ
	|	ФактическиеТрудозатратыЗаПериодСпринта КАК ФактическиеТрудозатратыЗаПериодСпринта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ПО ((ВЫРАЗИТЬ(СоставСпринтов.Объект КАК Документ.Задача)) = ФактическиеТрудозатратыЗаПериодСпринта.Объект)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|		ПО (СоставСпринтов.Спринт = ДокументСпринт.Ссылка)
	|			И (ДокументСпринт.ДатаОкончания > &ТекущаяДата)
	|ГДЕ
	|	ФактическиеТрудозатратыЗаПериодСпринта.Затрата = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическиеТрудозатратыЗаПериодСпринта.Спринт КАК Спринт,
	|	ФактическиеТрудозатратыЗаПериодСпринта.Объект КАК Объект
	|ИЗ
	|	ФактическиеТрудозатратыЗаПериодСпринта КАК ФактическиеТрудозатратыЗаПериодСпринта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыДобавленныеВНовыйСпринт КАК ОбъектыДобавленныеВНовыйСпринт
	|		ПО ФактическиеТрудозатратыЗаПериодСпринта.Объект = ОбъектыДобавленныеВНовыйСпринт.Объект
	|ГДЕ
	|	ФактическиеТрудозатратыЗаПериодСпринта.Затрата = 0
	|	И ОбъектыДобавленныеВНовыйСпринт.Объект ЕСТЬ NULL";
	
	ПорядокСтатусаВРаботе = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтатусыОбъектов.ВРаботе, "Порядок");
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПорядокСтатусаВРаботе", ПорядокСтатусаВРаботе);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.ПланируемыеТрудозатратыПоСпринтам.Удалить(Выборка.Объект, Выборка.Спринт);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитатьОчередьЗадач() Экспорт
	
	ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПересчитатьОчередьЗадач);
	РегистрыСведений.ОчередьЗадач.ПересчетОчереди();
	
КонецПроцедуры

// Возвращает РегламентноеЗадание из информационной базы.
//
// Параметры:
//  Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска
//                  предопределенного регламентного задания.
//                - УникальныйИдентификатор - идентификатор регламентного задания.
//                - Строка - строка уникального идентификатора регламентного задания.
//                - РегламентноеЗадание - регламентное задание из которого нужно получить
//                  уникальный идентификатор для получения свежей копии регламентного задания.
//
// Возвращаемое значение:
//  РегламентноеЗадание - прочитано из базы данных.
//
Функция ПолучитьРегламентноеЗадание(Знач Идентификатор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Идентификатор) = Тип("РегламентноеЗадание") Тогда
		Идентификатор = Идентификатор.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Идентификатор = Новый УникальныйИдентификатор(Идентификатор);
	КонецЕсли;
	
	Если ТипЗнч(Идентификатор) = Тип("ОбъектМетаданных") Тогда
		РегламентноеЗадание = РегламентныеЗадания.НайтиПредопределенное(Идентификатор);
	Иначе
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	КонецЕсли;
	
	Если РегламентноеЗадание = Неопределено Тогда
		ВызватьИсключение("Регламентное задание не найдено.
			|Возможно, оно удалено другим пользователем.");
	КонецЕсли;
	
	Возврат РегламентноеЗадание;
	
КонецФункции

// Возвращает представление регламентного задания,
// это по порядку исключения незаполненных реквизитов:
// Наименование, Метаданные.Синоним, Метаданные.Имя.
//
// Параметры:
//  Задание      - РегламентноеЗадание, Строка - если строка, тогда УникальныйИдентификатор строкой.
//
// Возвращаемое значение:
//  Строка.
//
Функция ПредставлениеРегламентногоЗадания(Знач Задание) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Задание) = Тип("РегламентноеЗадание") Тогда
		РегламентноеЗадание = Задание;
	Иначе
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(Задание));
	КонецЕсли;
	
	Если РегламентноеЗадание <> Неопределено Тогда
		Представление = РегламентноеЗадание.Наименование;
		
		Если ПустаяСтрока(РегламентноеЗадание.Наименование) Тогда
			Представление = РегламентноеЗадание.Метаданные.Синоним;
			
			Если ПустаяСтрока(Представление) Тогда
				Представление = РегламентноеЗадание.Метаданные.Имя;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Представление = ТекстНеОпределено();
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Формирует таблицу зависимостей регламентных заданий от функциональных опций.
//
// Возвращаемое значение:
//  Зависимости - ТаблицаЗначений - таблица значений с колонками:
//    * РегламентноеЗадание - ОбъектМетаданных:РегламентноеЗадание - регламентное задание.
//    * ФункциональнаяОпция - ОбъектМетаданных:ФункциональнаяОпция - функциональная опция,
//        от которой зависит регламентное задание.
//    * ЗависимостьПоИ      - Булево - если регламентное задание зависит более, чем
//        от одной функциональной опции и его необходимо включать только тогда,
//        когда все функциональные опции включены, то следует указывать Истина
//        для каждой зависимости.
//        По умолчанию Ложь - если хотя бы одна функциональная опция включена,
//        то регламентное задание тоже включено.
//    * ВключатьПриВключенииФункциональнойОпции - Булево, Неопределено - если Ложь, то при
//        включении функциональной опции регламентное задание не будет включаться. Значение
//        Неопределено соответствует значению Истина.
//        По умолчанию - неопределено.
//    * ДоступноВПодчиненномУзлеРИБ - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в РИБ.
//        По умолчанию - неопределено.
//    * ДоступноВМоделиСервиса      - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в модели сервиса.
//        По умолчанию - неопределено.
//    * РаботаетСВнешнимиРесурсами   - Булево - Истина, если регламентное задание работает
//        с внешними ресурсами (получение почты, синхронизация данных и т.п.).
//        По умолчанию - Ложь.
//
Функция РегламентныеЗаданияЗависимыеОтФункциональныхОпций() Экспорт
	
	Зависимости = Новый ТаблицаЗначений;
	Зависимости.Колонки.Добавить("РегламентноеЗадание");
	Зависимости.Колонки.Добавить("ФункциональнаяОпция");
	Зависимости.Колонки.Добавить("ЗависимостьПоИ", Новый ОписаниеТипов("Булево"));
	Зависимости.Колонки.Добавить("ДоступноВМоделиСервиса");
	Зависимости.Колонки.Добавить("ДоступноВПодчиненномУзлеРИБ");
	Зависимости.Колонки.Добавить("ВключатьПриВключенииФункциональнойОпции");
	Зависимости.Колонки.Добавить("ДоступноВАвтономномРабочемМесте");
	Зависимости.Колонки.Добавить("РаботаетСВнешнимиРесурсами", Новый ОписаниеТипов("Булево"));
	Зависимости.Колонки.Добавить("Параметризуется", Новый ОписаниеТипов("Булево"));
	
	Зависимости.Сортировать("РегламентноеЗадание");
	
	Возврат Зависимости;
	
КонецФункции

// Отправляет пользователям в эл.почту и мессенджер информацию о задачах в статусе "Тестирование",
// назначенных на них.
//
Процедура РассылкаЗадачиВТестировании() Экспорт
	
	ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.РассылкаЗадачиВТестировании);
	
	ИмяСобытия = "Регламентные и фоновые задания. Рассылка задачи в тестировании";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , ,
		"Запуск процедуры ""Рассылка задачи в тестировании"".");
	
	Запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	// У пользователя в настройках есть галка "Отправлять задачи на тестировании" флаг что надо или не надо получать рассылку по задачам в тестировании
	// Если у пользователя отсутствует такая настройка то считаем что он должен получать уведомление
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументЗадача.Назначена КАК Пользователь,
	|	КОЛИЧЕСТВО(ДокументЗадача.Ссылка) КАК КоличествоЗадач
	|ПОМЕСТИТЬ ЗадачиВТестировании
	|ИЗ
	|	Документ.Задача КАК ДокументЗадача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ДокументЗадача.Статус = СтатусыОбъектов.Ссылка
	|ГДЕ
	|	НЕ ДокументЗадача.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА ДокументЗадача.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Тестирование)
	|					ИЛИ СтатусыОбъектов.Родитель = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Тестирование)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументЗадача.Назначена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиВТестировании.КоличествоЗадач КАК КоличествоЗадач,
	|	Пользователи.Почта КАК ЭлектроннаяПочта,
	|	Пользователи.Ссылка КАК Получатель,
	|	ЕСТЬNULL(АдресаПолучателей.Адрес, """") КАК АдресМессенджер,
	|	ЕСТЬNULL(НастройкиПользователя.Значение, ИСТИНА) КАК НадоПрисылатьУведомление
	|ИЗ
	|	ЗадачиВТестировании КАК ЗадачиВТестировании
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ЗадачиВТестировании.Пользователь = Пользователи.Ссылка
	|			И (Пользователи.Почта <> """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресаПолучателей КАК АдресаПолучателей
	|		ПО ЗадачиВТестировании.Пользователь = АдресаПолучателей.Получатель
	|			И (АдресаПолучателей.Мессенджер = &ОсновнойМессенджер)
	|			И (АдресаПолучателей.Адрес <> """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователя КАК НастройкиПользователя
	|		ПО (НастройкиПользователя.Пользователь = Пользователи.Ссылка)
	|			И (НастройкиПользователя.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ОтправлятьЗадачиНаТестировании))
	|ГДЕ
	|	ЕСТЬNULL(НастройкиПользователя.Значение, ИСТИНА) = ИСТИНА";
	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ОсновнойМессенджер", Константы.ОсновнойМессенджер.Получить());
	РезультатЗапроса = Запрос.Выполнить();
	
	// Отправка уведомлений
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		ШаблоныПисьма = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма();
		
		ТемаПочта = "Задачи в тестировании";
		ШаблонСсылки = "<!-- sdms_link_prefix -->/?C=rocket=taskfortest";
		
		ПодвалПисьма = ШаблоныПисьма.РазделительнаяЛиния + ШаблоныПисьма.ПодвалПисьма;
		
		СсылкаПочта = СтрЗаменить(ШаблоныПисьма.АктивнаяСсылка, "<!-- link -->", "<!-- sdms_link_prefix -->/?C=%22mail=taskfortest%22");
		СсылкаПочта = СтрЗаменить(СсылкаПочта, "<!-- title_link -->", "ссылке");
		
		ТекстШаблона = "У вас %1 вам надо протестировать.<br><br>Для просмотра списка задач перейдите по %2.";
		ШаблонПисьма = СтрЗаменить(ШаблоныПисьма.БлокОсновногоТекста, "<!-- font_size -->", "16px");
		
		Шаблон =
		":bell: *Задачи в тестировании*
		|
		|У вас %1 вам надо протестировать. 
		|Для просмотра списка задач перейдите по [*ссылке*](%2)";
		
		ОтправкаМессенджер = Перечисления.СпособыОтправкиСообщений.Мессенджер;
		ЗадачиВТестировании = Перечисления.ТипыСообщенийМессенджера.РассылкаЗадачиВТестировании;
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаСЧислом = СтрокаСЧислом(";%1 задача, которую;;%1 задачи, которые;%1 задач, которые;%1 задачи, которые",
				Выборка.КоличествоЗадач, ВидЧисловогоЗначения.Количественное);
			
			ТелоПисьма = СтрЗаменить(ШаблонПисьма, "<!-- content -->", СтрШаблон(ТекстШаблона, СтрокаСЧислом, СсылкаПочта));
			ТекстСообщения = ТелоПисьма + ПодвалПисьма;
			
			РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.Добавить(Выборка.ЭлектроннаяПочта, ТемаПочта, ТекстСообщения);
			
			Если НЕ ПустаяСтрока(Выборка.АдресМессенджер) Тогда
				Сообщение = СтрШаблон(Шаблон, СтрокаСЧислом, ШаблонСсылки);
				РегистрыСведений.БуферСообщений.Добавить(ОтправкаМессенджер, Выборка.Получатель, Сообщение, , ЗадачиВТестировании);
			КонецЕсли;
		КонецЦикла;
		
		Комментарий = СтрШаблон("Завершение процедуры ""Подготовить напоминания задачи в тестировании"": добавлено %1 напоминаний.",
			Выборка.Количество());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , Комментарий);
	Иначе
		Комментарий = "Завершение процедуры ""Рассылка задачи в тестировании"": Нет задач в тестировании.";
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , Комментарий);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заменяет ссылки подписчика в объектах на ссылку пользователя, 
// в случае если для подписчика был создан пользователь. 
//
Процедура СконвертироватьПодписчиковВПользователей() Экспорт
	
	ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.СконвертироватьПодписчиковВПользователей);
	ИмяСобытия = "Регламентные и фоновые задания. Конвертации подписчиков";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	Подписчики.Ссылка КАК Подписчик,
	|	Пользователи.Ссылка КАК Пользователь,
	|	Подписчики.Наименование КАК НаименованиеПодписчика
	|ПОМЕСТИТЬ ТаблицаЗаменяемыхПодписчиков
	|ИЗ
	|	Справочник.Подписчики КАК Подписчики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО Подписчики.Наименование = Пользователи.Почта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""РегистрСведений.Участники"" КАК ТипОбъекта,
	|	Участники.Объект КАК Объект,
	|	ТаблицаЗаменяемыхПодписчиков.Подписчик КАК ЧтоИскать,
	|	ТаблицаЗаменяемыхПодписчиков.Пользователь КАК НаЧтоЗаменять,
	|	Участники.ДатаДобавления КАК ДатаДобавления,
	|	Участники.Автор КАК Автор,
	|	ТаблицаЗаменяемыхПодписчиков.НаименованиеПодписчика КАК НаименованиеПодписчика,
	|	"""" КАК ТекстСообщения,
	|	НЕОПРЕДЕЛЕНО КАК Отправлено,
	|	НЕОПРЕДЕЛЕНО КАК Просмотрено,
	|	НЕОПРЕДЕЛЕНО КАК ТипСообщения,
	|	НЕОПРЕДЕЛЕНО КАК ДатаОтправки,
	|	НЕОПРЕДЕЛЕНО КАК ТипОповещения,
	|	Участники.Роль КАК Роль,
	|	Участники.Комментарий КАК Комментарий,
	|	Участники.ПолучатьОповещения КАК ПолучатьОповещения,
	|	Участники.Скрытый КАК Скрытый
	|ПОМЕСТИТЬ ТаблицаОбъектовПодписчиков
	|ИЗ
	|	РегистрСведений.Участники КАК Участники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЗаменяемыхПодписчиков КАК ТаблицаЗаменяемыхПодписчиков
	|		ПО ((ВЫРАЗИТЬ(Участники.Пользователь КАК Справочник.Подписчики)) = ТаблицаЗаменяемыхПодписчиков.Подписчик)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""РегистрСведений.ПодготовленныеСообщенияПользователяПоКатегориям"",
	|	ПодготовленныеСообщенияПользователяПоКатегориям.Объект,
	|	ТаблицаЗаменяемыхПодписчиков.Подписчик,
	|	ТаблицаЗаменяемыхПодписчиков.Пользователь,
	|	ПодготовленныеСообщенияПользователяПоКатегориям.ДатаСоздания,
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаЗаменяемыхПодписчиков.НаименованиеПодписчика,
	|	ПодготовленныеСообщенияПользователяПоКатегориям.ТекстСообщения,
	|	ПодготовленныеСообщенияПользователяПоКатегориям.Отправлено,
	|	НЕОПРЕДЕЛЕНО,
	|	ПодготовленныеСообщенияПользователяПоКатегориям.КатегорияСообщения,
	|	ПодготовленныеСообщенияПользователяПоКатегориям.ДатаОтправки,
	|	ПодготовленныеСообщенияПользователяПоКатегориям.ТипОповещения,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ТаблицаЗаменяемыхПодписчиков КАК ТаблицаЗаменяемыхПодписчиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодготовленныеСообщенияПользователяПоКатегориям КАК ПодготовленныеСообщенияПользователяПоКатегориям
	|		ПО ТаблицаЗаменяемыхПодписчиков.Подписчик = ПодготовленныеСообщенияПользователяПоКатегориям.Пользователь
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Справочник.НастройкиЭскалацииОшибок"",
	|	ПолучателиОповещений.Ссылка,
	|	ТаблицаЗаменяемыхПодписчиков.Подписчик,
	|	ТаблицаЗаменяемыхПодписчиков.Пользователь,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	"""",
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	ТаблицаЗаменяемыхПодписчиков КАК ТаблицаЗаменяемыхПодписчиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиЭскалацииОшибок.ПолучателиОповещений КАК ПолучателиОповещений
	|		ПО ТаблицаЗаменяемыхПодписчиков.Подписчик = ПолучателиОповещений.Получатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаменяемыхПодписчиков.Подписчик КАК ЧтоИскать,
	|	ЕСТЬNULL(ТаблицаОбъектовПодписчиков.ТипОбъекта, """") КАК ТипОбъекта,
	|	ЕСТЬNULL(ТаблицаОбъектовПодписчиков.Объект, НЕОПРЕДЕЛЕНО) КАК Объект,
	|	ТаблицаЗаменяемыхПодписчиков.Пользователь КАК НаЧтоЗаменять,
	|	ЕСТЬNULL(ТаблицаОбъектовПодписчиков.ДатаДобавления, НЕОПРЕДЕЛЕНО) КАК ДатаДобавления,
	|	ЕСТЬNULL(ТаблицаОбъектовПодписчиков.Автор, НЕОПРЕДЕЛЕНО) КАК Автор,
	|	ЕСТЬNULL(ТаблицаОбъектовПодписчиков.НаименованиеПодписчика, """") КАК НаименованиеПодписчика,
	|	ЕСТЬNULL(ТаблицаОбъектовПодписчиков.ТекстСообщения, """") КАК ТекстСообщения,
	|	ЕСТЬNULL(ТаблицаОбъектовПодписчиков.Отправлено, НЕОПРЕДЕЛЕНО) КАК Отправлено,
	|	ЕСТЬNULL(ТаблицаОбъектовПодписчиков.Просмотрено, НЕОПРЕДЕЛЕНО) КАК Просмотрено,
	|	ЕСТЬNULL(ТаблицаОбъектовПодписчиков.ТипСообщения, НЕОПРЕДЕЛЕНО) КАК ТипСообщения,
	|	ЕСТЬNULL(ТаблицаОбъектовПодписчиков.ДатаОтправки, НЕОПРЕДЕЛЕНО) КАК ДатаОтправки,
	|	ЕСТЬNULL(ТаблицаОбъектовПодписчиков.ТипОповещения, НЕОПРЕДЕЛЕНО) КАК ТипОповещения,
	|	ЕСТЬNULL(ТаблицаОбъектовПодписчиков.Роль, НЕОПРЕДЕЛЕНО) КАК Роль,
	|	ЕСТЬNULL(ТаблицаОбъектовПодписчиков.Комментарий, НЕОПРЕДЕЛЕНО) КАК Комментарий,
	|	ЕСТЬNULL(ТаблицаОбъектовПодписчиков.ПолучатьОповещения, НЕОПРЕДЕЛЕНО) КАК ПолучатьОповещения,
	|	ЕСТЬNULL(ТаблицаОбъектовПодписчиков.Скрытый, НЕОПРЕДЕЛЕНО) КАК Скрытый
	|ИЗ
	|	ТаблицаЗаменяемыхПодписчиков КАК ТаблицаЗаменяемыхПодписчиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОбъектовПодписчиков КАК ТаблицаОбъектовПодписчиков
	|		ПО ТаблицаЗаменяемыхПодписчиков.Подписчик = ТаблицаОбъектовПодписчиков.ЧтоИскать
	|ИТОГИ ПО
	|	ЧтоИскать";
#КонецОбласти
	
	ВыборкаПодписчик = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
		
	Пока ВыборкаПодписчик.Следующий() Цикл	
		УдалитьИзУчастники = Ложь;
		УдалитьИзПодготовленныеСообщенияПользователяПоКатегориям = Ложь;
	
		НачатьТранзакцию();
		Попытка
			ВыборкаТипОбъектов = ВыборкаПодписчик.Выбрать();
			Пока ВыборкаТипОбъектов.Следующий() Цикл
				Если ВыборкаТипОбъектов.ТипОбъекта = "РегистрСведений.Участники" Тогда		
					Запись = РегистрыСведений.Участники.СоздатьМенеджерЗаписи();
					Запись.Объект = ВыборкаТипОбъектов.Объект;
					Запись.Пользователь = ВыборкаТипОбъектов.НаЧтоЗаменять;
					Запись.Роль = Справочники.РолиУчастников.Наблюдатель;
					Запись.Комментарий = ВыборкаТипОбъектов.Комментарий;
					Запись.ПолучатьОповещения = ВыборкаТипОбъектов.ПолучатьОповещения;
					Запись.Скрытый = ВыборкаТипОбъектов.Скрытый;
					Запись.Автор = ВыборкаТипОбъектов.Автор;	
					Запись.ДатаДобавления = ВыборкаТипОбъектов.ДатаДобавления;
					Запись.Записать();
					УдалитьИзУчастники = Истина;
				ИначеЕсли ВыборкаТипОбъектов.ТипОбъекта = "РегистрСведений.ПодготовленныеСообщенияПользователяПоКатегориям" Тогда
					Запись = РегистрыСведений.ПодготовленныеСообщенияПользователяПоКатегориям.СоздатьМенеджерЗаписи();
					Запись.Объект = ВыборкаТипОбъектов.Объект; 
					Запись.Пользователь = ВыборкаТипОбъектов.НаЧтоЗаменять;
					Запись.ДатаОтправки = ВыборкаТипОбъектов.ДатаОтправки;
					Запись.ДатаСоздания = ВыборкаТипОбъектов.ДатаДобавления;
					Запись.ТекстСообщения = ВыборкаТипОбъектов.ТекстСообщения;
					Запись.Отправлено = ВыборкаТипОбъектов.Отправлено;
					Запись.ТипОповещения = ВыборкаТипОбъектов.ТипОповещения; 
					Запись.КатегорияСообщения = ВыборкаТипОбъектов.ТипСообщения; 
					Запись.Записать();
					УдалитьИзПодготовленныеСообщенияПользователяПоКатегориям = Истина;
				ИначеЕсли ВыборкаТипОбъектов.ТипОбъекта = "Справочник.НастройкиЭскалацииОшибок" Тогда
					НастройкиЭскалации = ВыборкаТипОбъектов.Объект.ПолучитьОбъект();
					
					ПараметрыОтбора = Новый Структура("Получатель", ВыборкаПодписчик.ЧтоИскать);
					ПолучателиОповещений = НастройкиЭскалации.ПолучателиОповещений.НайтиСтроки(ПараметрыОтбора);
					
					Если ПолучателиОповещений.Количество() > 0 Тогда
						Для Каждого Строка Из ПолучателиОповещений Цикл
							Строка.Получатель = ВыборкаТипОбъектов.НаЧтоЗаменять;
						КонецЦикла;
						
						НастройкиЭскалации.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если УдалитьИзУчастники Тогда
				НаборЗаписей = РегистрыСведений.Участники.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Пользователь.Установить(ВыборкаПодписчик.ЧтоИскать); 
				НаборЗаписей.Записать();
			КонецЕсли;
			
			Если УдалитьИзПодготовленныеСообщенияПользователяПоКатегориям Тогда
				НаборЗаписей = РегистрыСведений.ПодготовленныеСообщенияПользователяПоКатегориям.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Пользователь.Установить(ВыборкаПодписчик.ЧтоИскать); 
				НаборЗаписей.Записать();
			КонецЕсли;
			
			Подписчик = ВыборкаПодписчик.ЧтоИскать.ПолучитьОбъект();
			Подписчик.УстановитьПометкуУдаления(Истина, Ложь);
						
			ЗафиксироватьТранзакцию();		
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,
				СтрШаблон("Ошибка при конвертации подписчика ""%1"": %2", ВыборкаТипОбъектов.НаименованиеПодписчика, ОписаниеОшибки()));
		КонецПопытки;		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , , "Конвертация завершена.");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФОНОВЫЕ ЗАДАНИЯ

// Отменяет выполнение фонового задания по переданному идентификатору.
//
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания.
//
Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	Задание = НайтиЗаданиеПоИдентификатору(ИдентификаторЗадания);
	Если Задание = Неопределено
		ИЛИ Задание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		
		Возврат;
	КонецЕсли;
	
	Попытка
		Задание.Отменить();
	Исключение
		// Возможно задание как раз в этот момент закончилось и ошибки нет.
		ЗаписьЖурналаРегистрации("Длительные операции.Отмена выполнения фонового задания",
			УровеньЖурналаРегистрации.Предупреждение, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Отменяет фоновое задание, если это возможно, а именно, если оно выполняется на сервере, и активно.
//
// Параметры:
//  Идентификатор  - Строка уникального идентификатора ФоновогоЗадания.
//
Процедура ОтменитьФоновоеЗадание(Идентификатор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйУникальныйИдентификатор = Новый УникальныйИдентификатор(Идентификатор);
	Отбор = Новый Структура;
	Отбор.Вставить("УникальныйИдентификатор", НовыйУникальныйИдентификатор);
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если МассивФоновыхЗаданий.Количество() = 1 Тогда
		ФоновоеЗадание = МассивФоновыхЗаданий[0];
	Иначе
		ВызватьИсключение НСтр("ru = 'Фоновое задание не найдено на сервере.'");
	КонецЕсли;
	
	Если ФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		ВызватьИсключение НСтр("ru = 'Задание не выполняется, его нельзя отменить.'");
	КонецЕсли;
	
	ФоновоеЗадание.Отменить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАССЫЛКА ЭЛЕКТРОННЫХ ПИСЕМ

Процедура ОтправитьЭлектронныеПисьмаПоРасписанию() Экспорт
	
	ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаЭлектронныхПисем);
	
	РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОтправкаЭлектронныхПисем;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяМетода", РегламентноеЗадание.ИмяМетода);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	ФоновыеЗаданияОтправкаПисем = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если ФоновыеЗаданияОтправкаПисем.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ОтправкаЭлектронныхПисем();
	ПодготовкаЭлектронныхПисем();
	
КонецПроцедуры

Процедура ОтправкаЭлектронныхПисем() Экспорт
	
	ИмяСобытия = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ИмяСобытияДляЖурналаРегистрации();
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
		"Запуск процедуры ""Отправка электронных писем"".");
	
	РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.Отправить();
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , ,
		"Завершение процедуры ""Отправка электронных писем"".");
	
КонецПроцедуры

Процедура ОповещениеСотрудников() Экспорт
	
	ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОповещениеСотрудников);
	
	///////////////////////////////////////////////////////////////////
	// здесь будет список процедур которые будут оповещать кого либо //
	///////////////////////////////////////////////////////////////////
	
	// Проверим что в течении 4 месяцев не было изменения статуса задачи
	ОтправитьСообщенияПоЗадачамБезИзмененийБолееЧетырехМесяцев();
	
КонецПроцедуры

Процедура ПодготовитьНапоминанияОЗанесенииТрудозатрат() Экспорт
	
	ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.СозданиеНапоминанийОЗанесенииТрудозатрат);
	
	ИмяСобытия = "Регламентные и фоновые задания. Создание напоминаний о занесении трудозатрат";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , ,
		"Запуск процедуры ""Подготовить напоминания о занесении трудозатрат"".");

	#Область ТекстЗапроса

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремени.Дата КАК Дата,
	|	ТабельУчетаРабочегоВремени.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ТабельУчетаРабочегоВремени.ПриоритетДляТабеля) КАК ПриоритетДляТабеля
	|ПОМЕСТИТЬ ТабельСегодняПриоритет
	|ИЗ
	|	РегистрСведений.ТабельУчетаРабочегоВремени КАК ТабельУчетаРабочегоВремени
	|ГДЕ
	|	ТабельУчетаРабочегоВремени.Дата = &ДатаЗанесенияТрудозатрат
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабельУчетаРабочегоВремени.Дата,
	|	ТабельУчетаРабочегоВремени.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабельСегодняПриоритет.Сотрудник КАК Сотрудник,
	|	ТабельУчетаРабочегоВремени.ВидВремени КАК ВидВремени
	|ПОМЕСТИТЬ ТабельСегодня
	|ИЗ
	|	ТабельСегодняПриоритет КАК ТабельСегодняПриоритет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТабельУчетаРабочегоВремени КАК ТабельУчетаРабочегоВремени
	|		ПО (ТабельУчетаРабочегоВремени.Дата = ТабельСегодняПриоритет.Дата)
	|			И (ТабельУчетаРабочегоВремени.Сотрудник = ТабельСегодняПриоритет.Сотрудник)
	|			И (ТабельУчетаРабочегоВремени.ПриоритетДляТабеля = ТабельСегодняПриоритет.ПриоритетДляТабеля)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Филиалы.Ссылка КАК Филиал,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(НастройкиФилиаловСмещение.Значение, 0) КАК ЧИСЛО) КАК СмещениеВремениФилиал,
	|	РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ВЫРАЗИТЬ(ЕСТЬNULL(НастройкиПользователя.Значение, ЕСТЬNULL(НастройкиФилиаловВремя.Значение, ДАТАВРЕМЯ(1, 1, 1, 18, 45, 0))) КАК ДАТА), СЕКУНДА) КАК ВремяНапоминанияСекунды,
	|	ПроизводственныйКалендарь.КоличествоРабочихЧасов КАК КоличествоРабочихЧасов,
	|	Пользователи.Ссылка КАК Сотрудник
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиФилиалов КАК НастройкиФилиалов
	|		ПО Филиалы.Ссылка = НастройкиФилиалов.Филиал
	|			И (НастройкиФилиалов.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.УведомлятьОТрудозатратах))
	|			И (ВЫРАЗИТЬ(ЕСТЬNULL(НастройкиФилиалов.Значение, ЛОЖЬ) КАК БУЛЕВО))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|		ПО (ПроизводственныйКалендарь.ДатаКалендаря = &ДатаЗанесенияТрудозатрат)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО Филиалы.Ссылка = Пользователи.Филиал
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияДополнительныхРеквизитовОбъектов КАК ДатаПоследнейОтправкиОповещений
	|		ПО (ДатаПоследнейОтправкиОповещений.Объект = Пользователи.Ссылка)
	|			И (ДатаПоследнейОтправкиОповещений.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДополнительныхРеквизитов.ДатаПоследнейОтправкиОповещенийОЗанесенииТрудозатрат))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиФилиалов КАК НастройкиФилиаловСмещение
	|		ПО Филиалы.Ссылка = НастройкиФилиаловСмещение.Филиал
	|			И (НастройкиФилиаловСмещение.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.СмещениеЧасовогоПоясаОтносительноВладивостока))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиФилиалов КАК НастройкиФилиаловВремя
	|		ПО Филиалы.Ссылка = НастройкиФилиаловВремя.Филиал
	|			И (НастройкиФилиаловВремя.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.ВремяНапоминанияОТрудозатратах))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователя КАК НастройкиПользователя
	|		ПО (Пользователи.Ссылка = НастройкиПользователя.Пользователь)
	|			И (НастройкиПользователя.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ВремяНапоминанияОТрудозатратах))
	|ГДЕ
	|	НЕ Филиалы.ПометкаУдаления
	|	И ПроизводственныйКалендарь.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Выходной)
	|	И (ВЫРАЗИТЬ(ЕСТЬNULL(ДатаПоследнейОтправкиОповещений.Значение, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДАТА)) <> &ДатаЗанесенияТрудозатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Трудозатраты.Объект КАК Объект
	|ПОМЕСТИТЬ ОбъектыТрудозатрат
	|ИЗ
	|	Данные КАК Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК Трудозатраты
	|		ПО (Трудозатраты.Пользователь = Данные.Сотрудник)
	|			И (Трудозатраты.Период >= &ДатаЗанесенияТрудозатрат)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыТрудозатрат.Объект КАК Объект,
	|	ЗаявкаНаРазработку.ЮридическоеЛицо КАК ЮридическоеЛицо
	|ПОМЕСТИТЬ ОбъектыЮрЛица
	|ИЗ
	|	ОбъектыТрудозатрат КАК ОбъектыТрудозатрат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО ОбъектыТрудозатрат.Объект = ДокументЗадача.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО (ДокументЗадача.ОбъектОснование = ЗаявкаНаРазработку.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбъектыТрудозатрат.Объект,
	|	ЗаявкаНаРазработку.ЮридическоеЛицо
	|ИЗ
	|	ОбъектыТрудозатрат КАК ОбъектыТрудозатрат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО ОбъектыТрудозатрат.Объект = ЗаявкаНаРазработку.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбъектыТрудозатрат.Объект,
	|	ВнутреннееЗадание.ЮридическоеЛицо
	|ИЗ
	|	ОбъектыТрудозатрат КАК ОбъектыТрудозатрат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
	|		ПО ОбъектыТрудозатрат.Объект = ВнутреннееЗадание.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбъектыТрудозатрат.Объект,
	|	Проекты.ЮридическоеЛицо
	|ИЗ
	|	ОбъектыТрудозатрат КАК ОбъектыТрудозатрат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
	|		ПО ОбъектыТрудозатрат.Объект = Проекты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(&ДатаЗанесенияТрудозатрат, СЕКУНДА, Данные.ВремяНапоминанияСекунды), ЧАС, -(ВЫРАЗИТЬ(ЕСТЬNULL(СмещениеВремени.Значение, Данные.СмещениеВремениФилиал) КАК ЧИСЛО(2, 0)))) КАК ВремяНапоминанияПоСерверу,
	|	Пользователи.Почта КАК Почта,
	|	Пользователи.Ссылка КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА Мессенджеры.ИспользуетсяИдентификатор
	|			ТОГДА ЕСТЬNULL(АдресаПолучателей.Идентификатор, """")
	|		ИНАЧЕ ЕСТЬNULL(АдресаПолучателей.Адрес, """")
	|	КОНЕЦ КАК АдресМессенджер,
	|	Данные.КоличествоРабочихЧасов КАК ТрудозатратыПлан,
	|	СУММА(ЕСТЬNULL(Трудозатраты.Затрата, 0)) КАК ТрудозатратыФакт,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ЮридическиеЛица.Ссылка ЕСТЬ NULL
	|				ТОГДА ЕСТЬNULL(Трудозатраты.Затрата, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ТрудозатратыБизнес,
	|	МАКСИМУМ(ЕСТЬNULL(НастройкиПользователяСпособаОповещенияЧерезМессенджер.Значение, ЛОЖЬ)) КАК ОповещениеМессенджер,
	|	МАКСИМУМ(ЕСТЬNULL(НастройкиПользователяСпособаОповещенияЧерезSDMS.Значение, ЛОЖЬ)) КАК ОповещениеSDMS,
	|	МАКСИМУМ(ЕСТЬNULL(НастройкиПользователяСпособаОповещенияЧерезПочту.Значение, ЛОЖЬ)) КАК ОповещениеПочта
	|ПОМЕСТИТЬ ДанныеРассылки
	|ИЗ
	|	Данные КАК Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО Данные.Сотрудник = Пользователи.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.КоэффициентМинимальногоВремениТрудозатрат КАК КоэффициентМинимальногоВремениТрудозатрат
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК Трудозатраты
	|		ПО (Трудозатраты.Пользователь = Пользователи.Ссылка)
	|			И (Трудозатраты.Период >= &ДатаЗанесенияТрудозатрат)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыЮрЛица КАК ОбъектыЮрЛица
	|		ПО (Трудозатраты.Объект = ОбъектыЮрЛица.Объект)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЮридическиеЛица КАК ЮридическиеЛица
	|		ПО (ОбъектыЮрЛица.ЮридическоеЛицо = ЮридическиеЛица.Ссылка)
	|			И (НЕ ЮридическиеЛица.ЯвляетсяИТОрганизацией)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователя КАК НастройкиПользователяСпособаОповещенияЧерезМессенджер
	|		ПО (НастройкиПользователяСпособаОповещенияЧерезМессенджер.Пользователь = Пользователи.Ссылка)
	|			И (НастройкиПользователяСпособаОповещенияЧерезМессенджер.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ОповещениеМессенджер))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователя КАК НастройкиПользователяСпособаОповещенияЧерезSDMS
	|		ПО (НастройкиПользователяСпособаОповещенияЧерезSDMS.Пользователь = Пользователи.Ссылка)
	|			И (НастройкиПользователяСпособаОповещенияЧерезSDMS.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ОповещениеSDMS))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователя КАК НастройкиПользователяСпособаОповещенияЧерезПочту
	|		ПО (НастройкиПользователяСпособаОповещенияЧерезПочту.Пользователь = Пользователи.Ссылка)
	|			И (НастройкиПользователяСпособаОповещенияЧерезПочту.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ОповещениеПочта))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияДополнительныхРеквизитовОбъектов КАК СмещениеВремени
	|		ПО (СмещениеВремени.Объект = Пользователи.Ссылка)
	|			И (СмещениеВремени.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДополнительныхРеквизитов.СмещениеВремени))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтсутствияСотрудниковНаРабочемМесте КАК ОтсутствияСотрудниковНаРабочемМесте
	|		ПО (ОтсутствияСотрудниковНаРабочемМесте.ДатаОтсутствия = &ДатаЗанесенияТрудозатрат)
	|			И (ОтсутствияСотрудниковНаРабочемМесте.Сотрудник = Пользователи.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабельСегодня КАК ТабельСегодня
	|		ПО (ТабельСегодня.Сотрудник = Пользователи.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторИспользованияРабочегоВремени КАК КлассификаторИспользованияРабочегоВремени
	|		ПО (ТабельСегодня.ВидВремени = КлассификаторИспользованияРабочегоВремени.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресаПолучателей КАК АдресаПолучателей
	|		ПО (Пользователи.Ссылка = АдресаПолучателей.Получатель)
	|			И (АдресаПолучателей.Мессенджер = &ОсновнойМессенджер)
	|			И (АдресаПолучателей.Адрес <> """")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Мессенджеры КАК Мессенджеры
	|		ПО (Мессенджеры.Ссылка = АдресаПолучателей.Мессенджер)
	|ГДЕ
	|	НЕ Пользователи.Недействителен
	|	И НЕ Пользователи.ЭтоГруппа
	|	И НЕ Пользователи.Служебный
	|	И НЕ Пользователи.ПометкаУдаления
	|	И ОтсутствияСотрудниковНаРабочемМесте.ДатаОтсутствия ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(&ДатаЗанесенияТрудозатрат, СЕКУНДА, Данные.ВремяНапоминанияСекунды), ЧАС, -(ВЫРАЗИТЬ(ЕСТЬNULL(СмещениеВремени.Значение, Данные.СмещениеВремениФилиал) КАК ЧИСЛО(2, 0)))),
	|	Пользователи.Ссылка,
	|	КлассификаторИспользованияРабочегоВремени.РабочееВремя,
	|	ТабельСегодня.ВидВремени,
	|	Данные.КоличествоРабочихЧасов,
	|	КоэффициентМинимальногоВремениТрудозатрат.Значение,
	|	Пользователи.Почта,
	|	ВЫБОР
	|		КОГДА Мессенджеры.ИспользуетсяИдентификатор
	|			ТОГДА ЕСТЬNULL(АдресаПолучателей.Идентификатор, """")
	|		ИНАЧЕ ЕСТЬNULL(АдресаПолучателей.Адрес, """")
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КлассификаторИспользованияРабочегоВремени.РабочееВремя, ИСТИНА)
	|			ТОГДА Данные.КоличествоРабочихЧасов * КоэффициентМинимальногоВремениТрудозатрат.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ > СУММА(ЕСТЬNULL(Трудозатраты.Затрата, 0))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРассылки.ВремяНапоминанияПоСерверу КАК ВремяНапоминанияПоСерверу,
	|	ДанныеРассылки.Почта КАК Почта,
	|	ДанныеРассылки.Сотрудник КАК Сотрудник,
	|	ДанныеРассылки.АдресМессенджер КАК АдресМессенджер,
	|	ДанныеРассылки.ТрудозатратыПлан КАК ТрудозатратыПлан,
	|	ДанныеРассылки.ТрудозатратыФакт КАК ТрудозатратыФакт,
	|	ДанныеРассылки.ТрудозатратыБизнес КАК ТрудозатратыБизнес,
	|	ДанныеРассылки.ОповещениеМессенджер КАК ОповещениеЧерезМессенджер,
	|	ДанныеРассылки.ОповещениеSDMS КАК ОповещениеЧерезSDMS,
	|	ДанныеРассылки.ОповещениеПочта КАК ОповещениеЧерезПочту
	|ИЗ
	|	ДанныеРассылки КАК ДанныеРассылки
	|ГДЕ
	|	ДанныеРассылки.ВремяНапоминанияПоСерверу <= &ТекущаяДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРассылки.Сотрудник КАК Сотрудник
	|ИЗ
	|	ДанныеРассылки КАК ДанныеРассылки
	|ГДЕ
	|	ДанныеРассылки.ВремяНапоминанияПоСерверу <= &ТекущаяДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеРассылки.ВремяНапоминанияПоСерверу КАК Время
	|ИЗ
	|	ДанныеРассылки КАК ДанныеРассылки
	|ГДЕ
	|	ДанныеРассылки.ВремяНапоминанияПоСерверу > &ТекущаяДата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Время";

	#КонецОбласти

	// Для учёта времени оповещения филиалов, которые начинаются следующим днём
	// добавлен параметр ДатаЗанесенияТрудозатрат
	// ДатаЗанесенияТрудозатрат = ТекущаяДатаСеанса - Сутки, если текущее время < 5 утра
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ДатаЗанесенияТрудозатрат = НачалоДня(ТекущаяДата);
	
	Если ТекущаяДата - ДатаЗанесенияТрудозатрат <= 18000 Тогда
		ДатаЗанесенияТрудозатрат = ДатаЗанесенияТрудозатрат - 86400;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("ОсновнойМессенджер", Константы.ОсновнойМессенджер.Получить());
	Запрос.УстановитьПараметр("ДатаЗанесенияТрудозатрат", ДатаЗанесенияТрудозатрат);
	
	Пакеты = Запрос.ВыполнитьПакет();
	КоличествоПакетов = Пакеты.ВГраница();
	
	РезультатЗапроса = Пакеты.Получить(КоличествоПакетов - 2);
	РезультатФилиалыДляОповещения = Пакеты.Получить(КоличествоПакетов - 1);
	РезультатВремяЗапуска = Пакеты.Получить(КоличествоПакетов);
	
	// Определении времени следующего запуска
	Если НЕ РезультатВремяЗапуска.Пустой() Тогда
		ВыборкаВремяЗапуска = РезультатВремяЗапуска.Выбрать();
		ВыборкаВремяЗапуска.Следующий();
		ВремяЗапуска = ВыборкаВремяЗапуска.Время;
	Иначе
		ВремяЗапуска = ТекущаяДатаСеанса() + 3600;
	КонецЕсли;
	
	// Формирование списка филиалов для обновления даты последнего оповещения
	Если НЕ РезультатФилиалыДляОповещения.Пустой() Тогда
		ОповещенныеСотрудники = РезультатФилиалыДляОповещения.Выгрузить().ВыгрузитьКолонку("Сотрудник");
	Иначе
		ОповещенныеСотрудники = Новый Массив;
	КонецЕсли;

	// Отправка уведомлений
	Если РезультатЗапроса.Пустой() Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , ,
			"Завершение процедуры ""Подготовить напоминания о занесении трудозатрат"": Нет напоминаний о внесении трудозатрат.");
		
	Иначе
		
		РегистрОчередьОтправки = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем;
		
		ШаблоныПисьма = РегистрОчередьОтправки.ШаблоныЭлектронногоПисьма();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ТемаСообщения = "Занесение трудозатрат";
		
		ШаблонТрудозатрат = "Пожалуйста, проверьте трудозатраты<br><br>По календарю: %1 ч.<br>Внесено: %2 ч.<br>Бизнес: %3 ч.";
		ШаблонТела = СтрЗаменить(ШаблоныПисьма.БлокОсновногоТекста, "<!-- font_size -->", "16px");
		
		ПодвалСообщения = ШаблоныПисьма.РазделительнаяЛиния + ШаблоныПисьма.ПодвалПисьма;
		
		ШаблонСообщенияМессенджер =
		":alarm_clock: *Пожалуйста, проверьте трудозатраты*
		|_По календарю: *%1 ч.*_
		|_Внесено: *%2 ч.*_
		|_Бизнес: *%3 ч.*_
		|
		|[Перейти в SDMS](<!-- sdms_link_prefix -->#e1cib/app/Обработка.ЗанесениеТрудозатрат)";
		
		ШаблонСообщенияSDMS = 
		"Пожалуйста, проверьте трудозатраты
		|По календарю: %1 ч.
		|Внесено: %2 ч.
		|Бизнес: %3 ч.";
		
		НапоминаниеОТрудозатратах = Истина;		
		ОбработкаМессенджер = Справочники.Мессенджеры.ПолучитьОбработкуМессенджера();
		
		ТаблицаSDMS = Новый ТаблицаЗначений;
		ТаблицаSDMS.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
		ТаблицаSDMS.Колонки.Добавить("Текст", Новый ОписаниеТипов("Строка")); 
		ТаблицаSDMS.Колонки.Добавить("Данные", Новый ОписаниеТипов("Строка"));
		ТаблицаSDMS.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата")); 
		ТаблицаSDMS.Колонки.Добавить("КатегорияОповещения", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииСообщенийПользователя"));

		ТаблицаМессенджер = Новый ТаблицаЗначений;
		ТаблицаМессенджер.Колонки.Добавить("Получатель", ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(100));
		ТаблицаМессенджер.Колонки.Добавить("ТекстСообщения", ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(0));
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ОповещениеЧерезПочту Тогда
				ТелоСообщения = СтрШаблон(ШаблонТрудозатрат, Выборка.ТрудозатратыПлан, Выборка.ТрудозатратыФакт, Выборка.ТрудозатратыБизнес);
				ТелоСообщения = СтрЗаменить(ШаблонТела, "<!-- content -->", ТелоСообщения);
				ТекстСообщения = ТелоСообщения + ПодвалСообщения;
				РегистрОчередьОтправки.Добавить(Выборка.Почта, ТемаСообщения, ТекстСообщения);
			КонецЕсли;
			
			Если Выборка.ОповещениеЧерезSDMS Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщенияSDMS, Выборка.ТрудозатратыПлан, 
					Выборка.ТрудозатратыФакт, Выборка.ТрудозатратыБизнес);
					
				СтрокаТаблицы = ТаблицаSDMS.Добавить();   
				СтрокаТаблицы.Пользователь = Выборка.Сотрудник;
				СтрокаТаблицы.Текст = ТекстСообщения;		
			КонецЕсли;
			
			Если  ЗначениеЗаполнено(Выборка.АдресМессенджер) 
				И (Выборка.ОповещениеЧерезМессенджер ИЛИ НЕ (Выборка.ОповещениеЧерезSDMS ИЛИ Выборка.ОповещениеЧерезПочту)) Тогда
				
				ТекстСообщения = СтрШаблон(ШаблонСообщенияМессенджер, Выборка.ТрудозатратыПлан, 
					Выборка.ТрудозатратыФакт, Выборка.ТрудозатратыБизнес);
					
				СтрокаТаблицы = ТаблицаМессенджер.Добавить();
				СтрокаТаблицы.Получатель = Выборка.АдресМессенджер;
				СтрокаТаблицы.ТекстСообщения = ТекстСообщения;
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаSDMS.Количество() > 0 Тогда 
			Взаимодействие.ВыводСообщенияОВнесенииТрудозатрат(ТаблицаSDMS);
		КонецЕсли;
		
		Если ТаблицаМессенджер.Количество() > 0 Тогда 
			ОбработкаМессенджер.ОтправитьСообщенияПользователям(ТаблицаМессенджер);
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , ,
			"Завершение процедуры ""Подготовить напоминания о занесении трудозатрат"": Добавлено напоминаний о внесении трудозатрат: " + Выборка.Количество() + ".");
	КонецЕсли;
	
	// Обновление времени следующего запуска регламентного задания
	Регламентное = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.СозданиеНапоминанийОЗанесенииТрудозатрат);
	Регламентное.Расписание.ВремяНачала = ВремяЗапуска;
	Регламентное.Записать();
	
	// Обновление даты оповещения филиалов
	ТекущаяДата = ТекущаяДатаСеанса();
	Для Каждого Сотрудник Из ОповещенныеСотрудники Цикл
		РегистрыСведений.ЗначенияДополнительныхРеквизитовОбъектов.УстановитьЗначениеДополнительногоРеквизита(Сотрудник,
			ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.ДатаПоследнейОтправкиОповещенийОЗанесенииТрудозатрат, ДатаЗанесенияТрудозатрат);
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПодготовкаЭлектронныхПисем() Экспорт
	
	// 1. Получение данных
	
	Запрос = Новый Запрос;
	
	#Область ТекстЗапроса
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПодготовленныеСообщенияПользователяПоКатегориям.Объект КАК Объект,
		|	ПодготовленныеСообщенияПользователяПоКатегориям.Пользователь КАК Пользователь,
		|	ПодготовленныеСообщенияПользователяПоКатегориям.ДатаСоздания КАК ДатаСоздания,
		|	ПодготовленныеСообщенияПользователяПоКатегориям.ТекстСообщения КАК ТекстСообщения,
		|	ПодготовленныеСообщенияПользователяПоКатегориям.ДатаОтправки КАК ДатаОтправки,
		|	ПодготовленныеСообщенияПользователяПоКатегориям.КлючУникальности КАК КлючУникальности,
		|	ПодготовленныеСообщенияПользователяПоКатегориям.КатегорияСообщения КАК КатегорияСообщения,
		|	ПодготовленныеСообщенияПользователяПоКатегориям.Важность КАК Важность,
		|	ПодготовленныеСообщенияПользователяПоКатегориям.ГруппаСообщения КАК ГруппаСообщения,
		|	ПодготовленныеСообщенияПользователяПоКатегориям.ТипОповещения КАК ТипОповещения
		|ПОМЕСТИТЬ ВсеСообщенияПользователю
		|ИЗ
		|	РегистрСведений.ПодготовленныеСообщенияПользователяПоКатегориям КАК ПодготовленныеСообщенияПользователяПоКатегориям
		|ГДЕ
		|	ПодготовленныеСообщенияПользователяПоКатегориям.ТипОповещения = ЗНАЧЕНИЕ(Перечисление.ТипыОповещенийПользователя.ЭлектроннаяПочта)
		|	И НЕ ПодготовленныеСообщенияПользователяПоКатегориям.Отправлено
		|	И ПодготовленныеСообщенияПользователяПоКатегориям.ДатаОтправки <= &ТекущаяДата
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект,
		|	Пользователь,
		|	ДатаСоздания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СвязьОбъектовСЗаявкамиНаРазработку.Заявка КАК Заявка,
		|	ВсеСообщенияПользователю.Объект КАК Объект,
		|	ВсеСообщенияПользователю.Пользователь КАК Пользователь,
		|	ВсеСообщенияПользователю.ДатаОтправки КАК ДатаОтправки
		|ПОМЕСТИТЬ ЗаявкиДляЗадач
		|ИЗ
		|	ВсеСообщенияПользователю КАК ВсеСообщенияПользователю
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку КАК СвязьОбъектовСЗаявкамиНаРазработку
		|		ПО ((ВЫРАЗИТЬ(ВсеСообщенияПользователю.Объект КАК Документ.Задача)) = СвязьОбъектовСЗаявкамиНаРазработку.Объект)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаявкиДляЗадач.Заявка КАК Заявка,
		|	ЗаявкиДляЗадач.Объект КАК Объект,
		|	ЗаявкиДляЗадач.ДатаОтправки КАК ДатаОтправки,
		|	РолиПользователейПоНаправлениям.Роль КАК Роль,
		|	РолиПользователейПоНаправлениям.Пользователь КАК Пользователь
		|ПОМЕСТИТЬ РолиПользователейДляЗадач
		|ИЗ
		|	ЗаявкиДляЗадач КАК ЗаявкиДляЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РолиПользователейПоНаправлениям КАК РолиПользователейПоНаправлениям
		|		ПО ЗаявкиДляЗадач.Пользователь = РолиПользователейПоНаправлениям.Пользователь
		|			И ЗаявкиДляЗадач.Объект.Направление = РолиПользователейПоНаправлениям.НаправлениеРазработки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РолиПользователейДляЗадач.Роль = ЗНАЧЕНИЕ(Справочник.РолиПользователей.Заказчик)
		|			ТОГДА РолиПользователейДляЗадач.Заявка
		|		ИНАЧЕ ВсеСообщенияПользователю.Объект
		|	КОНЕЦ КАК ОбъектДляПредставления,
		|	ВсеСообщенияПользователю.Объект КАК Объект,
		|	ПРЕДСТАВЛЕНИЕ(ВсеСообщенияПользователю.Объект) КАК ПредставлениеОбъекта,
		|	ВсеСообщенияПользователю.Пользователь КАК Пользователь,
		|	ЕСТЬNULL(Пользователи.Почта, Подписчики.Наименование) КАК АдресПочты,
		|	ВсеСообщенияПользователю.ДатаОтправки КАК ДатаОтправки,
		|	ВсеСообщенияПользователю.ДатаСоздания КАК ДатаСоздания,
		|	ВсеСообщенияПользователю.КлючУникальности КАК КлючУникальности,
		|	ВсеСообщенияПользователю.ТекстСообщения КАК ТекстСообщения,
		|	ВсеСообщенияПользователю.КатегорияСообщения КАК КатегорияСообщения,
		|	ВсеСообщенияПользователю.Важность КАК Важность,
		|	ВсеСообщенияПользователю.ГруппаСообщения КАК ГруппаСообщения,
		|	ВсеСообщенияПользователю.ТипОповещения КАК ТипОповещения,
		|	ВЫБОР
		|		КОГДА ВсеСообщенияПользователю.КатегорияСообщения = ЗНАЧЕНИЕ(Перечисление.КатегорииСообщенийПользователя.Комментарии)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПриоритетКатегории
		|ПОМЕСТИТЬ ПредподготовленныеДанные
		|ИЗ
		|	ВсеСообщенияПользователю КАК ВсеСообщенияПользователю
		|		ЛЕВОЕ СОЕДИНЕНИЕ РолиПользователейДляЗадач КАК РолиПользователейДляЗадач
		|		ПО ВсеСообщенияПользователю.Объект = РолиПользователейДляЗадач.Объект
		|			И ВсеСообщенияПользователю.Пользователь = РолиПользователейДляЗадач.Пользователь
		|			И ВсеСообщенияПользователю.ДатаОтправки = РолиПользователейДляЗадач.ДатаОтправки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ((ВЫРАЗИТЬ(ВсеСообщенияПользователю.Пользователь КАК Справочник.Пользователи)) = Пользователи.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Подписчики КАК Подписчики
		|		ПО ((ВЫРАЗИТЬ(ВсеСообщенияПользователю.Пользователь КАК Справочник.Подписчики)) = Подписчики.Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПредподготовленныеДанные.ОбъектДляПредставления КАК ОбъектДляПредставления,
		|	ПРЕДСТАВЛЕНИЕ(ПредподготовленныеДанные.ОбъектДляПредставления) КАК ПредставлениеОбъектаДляПредставления,
		|	ПредподготовленныеДанные.Объект КАК Объект,
		|	ПредподготовленныеДанные.ПредставлениеОбъекта КАК ПредставлениеОбъекта,
		|	ПредподготовленныеДанные.Пользователь КАК Пользователь,
		|	ПредподготовленныеДанные.АдресПочты КАК АдресПочты,
		|	ПредподготовленныеДанные.ДатаОтправки КАК ДатаОтправки,
		|	ПредподготовленныеДанные.ДатаСоздания КАК ДатаСоздания,
		|	ПредподготовленныеДанные.КлючУникальности КАК КлючУникальности,
		|	ПредподготовленныеДанные.ТекстСообщения КАК ТекстСообщения,
		|	ПредподготовленныеДанные.КатегорияСообщения КАК КатегорияСообщения,
		|	ПредподготовленныеДанные.Важность КАК Важность,
		|	ПредподготовленныеДанные.ГруппаСообщения КАК ГруппаСообщения,
		|	ПредподготовленныеДанные.ТипОповещения КАК ТипОповещения,
		|	ПредподготовленныеДанные.ПриоритетКатегории КАК ПриоритетКатегории,
		|	Пользователи.ФИО КАК АвторОбъекта,
		|	Пользователи.Почта КАК ПочтаАвтораОбъекта,
		|	Проекты.Код КАК НомерОбъекта,
		|	Проекты.Наименование КАК НаименованиеОбъекта,
		|	"""" КАК НазначениеОбъекта,
		|	"""" КАК НомерЗадачи,
		|	"""" КАК НаименованиеЗадачи,
		|	"""" КАК НазначениеЗадачи,
		|	"""" КАК АвторЗадачи,
		|	"""" КАК ПочтаАвтораЗадачи
		|ПОМЕСТИТЬ ПредподготовленныеДанныеСРеквизитамиОбъектов
		|ИЗ
		|	ПредподготовленныеДанные КАК ПредподготовленныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|		ПО ((ВЫРАЗИТЬ(ПредподготовленныеДанные.ОбъектДляПредставления КАК Справочник.Проекты)) = Проекты.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО (Проекты.Автор = Пользователи.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПредподготовленныеДанные.ОбъектДляПредставления,
		|	ПРЕДСТАВЛЕНИЕ(ПредподготовленныеДанные.ОбъектДляПредставления),
		|	ПредподготовленныеДанные.Объект,
		|	ПредподготовленныеДанные.ПредставлениеОбъекта,
		|	ПредподготовленныеДанные.Пользователь,
		|	ПредподготовленныеДанные.АдресПочты,
		|	ПредподготовленныеДанные.ДатаОтправки,
		|	ПредподготовленныеДанные.ДатаСоздания,
		|	ПредподготовленныеДанные.КлючУникальности,
		|	ПредподготовленныеДанные.ТекстСообщения,
		|	ПредподготовленныеДанные.КатегорияСообщения,
		|	ПредподготовленныеДанные.Важность,
		|	ПредподготовленныеДанные.ГруппаСообщения,
		|	ПредподготовленныеДанные.ТипОповещения,
		|	ПредподготовленныеДанные.ПриоритетКатегории,
		|	Пользователи.ФИО,
		|	Пользователи.Почта,
		|	Задача.Номер,
		|	Задача.Наименование,
		|	ПРЕДСТАВЛЕНИЕ(Задача.Назначение),
		|	"""",
		|	"""",
		|	"""",
		|	"""",
		|	""""
		|ИЗ
		|	ПредподготовленныеДанные КАК ПредподготовленныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК Задача
		|		ПО ((ВЫРАЗИТЬ(ПредподготовленныеДанные.ОбъектДляПредставления КАК Документ.Задача)) = Задача.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО (Задача.Автор = Пользователи.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПредподготовленныеДанные.ОбъектДляПредставления,
		|	ПРЕДСТАВЛЕНИЕ(ПредподготовленныеДанные.ОбъектДляПредставления),
		|	ПредподготовленныеДанные.Объект,
		|	ПредподготовленныеДанные.ПредставлениеОбъекта,
		|	ПредподготовленныеДанные.Пользователь,
		|	ПредподготовленныеДанные.АдресПочты,
		|	ПредподготовленныеДанные.ДатаОтправки,
		|	ПредподготовленныеДанные.ДатаСоздания,
		|	ПредподготовленныеДанные.КлючУникальности,
		|	ПредподготовленныеДанные.ТекстСообщения,
		|	ПредподготовленныеДанные.КатегорияСообщения,
		|	ПредподготовленныеДанные.Важность,
		|	ПредподготовленныеДанные.ГруппаСообщения,
		|	ПредподготовленныеДанные.ТипОповещения,
		|	ПредподготовленныеДанные.ПриоритетКатегории,
		|	Пользователи.ФИО,
		|	Пользователи.Почта,
		|	ВнутреннееЗадание.Номер,
		|	ВнутреннееЗадание.Наименование,
		|	ПРЕДСТАВЛЕНИЕ(ВнутреннееЗадание.Назначение),
		|	"""",
		|	"""",
		|	"""",
		|	"""",
		|	""""
		|ИЗ
		|	ПредподготовленныеДанные КАК ПредподготовленныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
		|		ПО ((ВЫРАЗИТЬ(ПредподготовленныеДанные.ОбъектДляПредставления КАК Документ.ВнутреннееЗадание)) = ВнутреннееЗадание.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО (ВнутреннееЗадание.Автор = Пользователи.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПредподготовленныеДанные.ОбъектДляПредставления,
		|	ПРЕДСТАВЛЕНИЕ(ПредподготовленныеДанные.ОбъектДляПредставления),
		|	ПредподготовленныеДанные.Объект,
		|	ПредподготовленныеДанные.ПредставлениеОбъекта,
		|	ПредподготовленныеДанные.Пользователь,
		|	ПредподготовленныеДанные.АдресПочты,
		|	ПредподготовленныеДанные.ДатаОтправки,
		|	ПредподготовленныеДанные.ДатаСоздания,
		|	ПредподготовленныеДанные.КлючУникальности,
		|	ПредподготовленныеДанные.ТекстСообщения,
		|	ПредподготовленныеДанные.КатегорияСообщения,
		|	ПредподготовленныеДанные.Важность,
		|	ПредподготовленныеДанные.ГруппаСообщения,
		|	ПредподготовленныеДанные.ТипОповещения,
		|	ПредподготовленныеДанные.ПриоритетКатегории,
		|	Пользователи.ФИО,
		|	Пользователи.Почта,
		|	ЗаявкаНаРазработку.Номер,
		|	ЗаявкаНаРазработку.Наименование,
		|	ПРЕДСТАВЛЕНИЕ(ЗаявкаНаРазработку.Назначение),
		|	"""",
		|	"""",
		|	"""",
		|	"""",
		|	""""
		|ИЗ
		|	ПредподготовленныеДанные КАК ПредподготовленныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
		|		ПО ((ВЫРАЗИТЬ(ПредподготовленныеДанные.ОбъектДляПредставления КАК Документ.ЗаявкаНаРазработку)) = ЗаявкаНаРазработку.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО (ЗаявкаНаРазработку.Автор = Пользователи.Ссылка)
		|ГДЕ
		|	НЕ ПредподготовленныеДанные.Объект ССЫЛКА Документ.Задача
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПредподготовленныеДанные.ОбъектДляПредставления,
		|	ПРЕДСТАВЛЕНИЕ(ПредподготовленныеДанные.ОбъектДляПредставления),
		|	ПредподготовленныеДанные.Объект,
		|	ПредподготовленныеДанные.ПредставлениеОбъекта,
		|	ПредподготовленныеДанные.Пользователь,
		|	ПредподготовленныеДанные.АдресПочты,
		|	ПредподготовленныеДанные.ДатаОтправки,
		|	ПредподготовленныеДанные.ДатаСоздания,
		|	ПредподготовленныеДанные.КлючУникальности,
		|	ПредподготовленныеДанные.ТекстСообщения,
		|	ПредподготовленныеДанные.КатегорияСообщения,
		|	ПредподготовленныеДанные.Важность,
		|	ПредподготовленныеДанные.ГруппаСообщения,
		|	ПредподготовленныеДанные.ТипОповещения,
		|	ПредподготовленныеДанные.ПриоритетКатегории,
		|	Пользователи.ФИО,
		|	Пользователи.Почта,
		|	ЗаявкаНаРазработку.Номер,
		|	ЗаявкаНаРазработку.Наименование,
		|	ПРЕДСТАВЛЕНИЕ(ЗаявкаНаРазработку.Назначение),
		|	Задача.Номер,
		|	Задача.Наименование,
		|	ПРЕДСТАВЛЕНИЕ(Задача.Назначение),
		|	ПользователиЗадача.ФИО,
		|	ПользователиЗадача.Почта
		|ИЗ
		|	ПредподготовленныеДанные КАК ПредподготовленныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
		|		ПО ((ВЫРАЗИТЬ(ПредподготовленныеДанные.ОбъектДляПредставления КАК Документ.ЗаявкаНаРазработку)) = ЗаявкаНаРазработку.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО (ЗаявкаНаРазработку.Автор = Пользователи.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК Задача
		|		ПО ((ВЫРАЗИТЬ(ПредподготовленныеДанные.Объект КАК Документ.Задача)) = Задача.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК ПользователиЗадача
		|		ПО (Задача.Автор = ПользователиЗадача.Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПредподготовленныеДанные.ОбъектДляПредставления КАК ОбъектДляПредставления,
		|	ПРЕДСТАВЛЕНИЕ(ПредподготовленныеДанные.ОбъектДляПредставления) КАК ПредставлениеОбъектаДляПредставления,
		|	ПредподготовленныеДанные.Объект КАК Объект,
		|	ПредподготовленныеДанные.ПредставлениеОбъекта КАК ПредставлениеОбъекта,
		|	ПредподготовленныеДанные.Пользователь КАК Пользователь,
		|	ПредподготовленныеДанные.АдресПочты КАК АдресПочты,
		|	ПредподготовленныеДанные.ДатаОтправки КАК ДатаОтправки,
		|	ПредподготовленныеДанные.ДатаСоздания КАК ДатаСоздания,
		|	ПредподготовленныеДанные.КлючУникальности КАК КлючУникальности,
		|	ПредподготовленныеДанные.ТекстСообщения КАК ТекстСообщения,
		|	ПредподготовленныеДанные.КатегорияСообщения КАК КатегорияСообщения,
		|	ПредподготовленныеДанные.Важность КАК Важность,
		|	ПредподготовленныеДанные.ГруппаСообщения КАК ГруппаСообщения,
		|	ПредподготовленныеДанные.ТипОповещения КАК ТипОповещения,
		|	ПредподготовленныеДанные.НомерОбъекта КАК НомерОбъекта,
		|	ПредподготовленныеДанные.НаименованиеОбъекта КАК НаименованиеОбъекта,
		|	ПредподготовленныеДанные.НазначениеОбъекта КАК НазначениеОбъекта,
		|	ПредподготовленныеДанные.АвторОбъекта КАК АвторОбъекта,
		|	ПредподготовленныеДанные.ПочтаАвтораОбъекта КАК ПочтаАвтораОбъекта,
		|	ПредподготовленныеДанные.НомерЗадачи КАК НомерЗадачи,
		|	ПредподготовленныеДанные.НаименованиеЗадачи КАК НаименованиеЗадачи,
		|	ПредподготовленныеДанные.НазначениеЗадачи КАК НазначениеЗадачи,
		|	ПредподготовленныеДанные.АвторЗадачи КАК АвторЗадачи,
		|	ПредподготовленныеДанные.ПочтаАвтораЗадачи КАК ПочтаАвтораЗадачи
		|ИЗ
		|	ПредподготовленныеДанныеСРеквизитамиОбъектов КАК ПредподготовленныеДанные
		|ГДЕ
		|	ПредподготовленныеДанные.ГруппаСообщения <> """"
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСоздания,
		|	ПредподготовленныеДанные.ПриоритетКатегории
		|ИТОГИ
		|	МАКСИМУМ(Объект),
		|	МАКСИМУМ(АдресПочты),
		|	МАКСИМУМ(НомерОбъекта),
		|	МАКСИМУМ(НаименованиеОбъекта),
		|	МАКСИМУМ(НазначениеОбъекта),
		|	МАКСИМУМ(АвторОбъекта),
		|	МАКСИМУМ(ПочтаАвтораОбъекта),
		|	МАКСИМУМ(НомерЗадачи),
		|	МАКСИМУМ(НаименованиеЗадачи),
		|	МАКСИМУМ(НазначениеЗадачи),
		|	МАКСИМУМ(АвторЗадачи),
		|	МАКСИМУМ(ПочтаАвтораЗадачи)
		|ПО
		|	Пользователь,
		|	ГруппаСообщения,
		|	ОбъектДляПредставления,
		|	ДатаСоздания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПредподготовленныеДанные.ОбъектДляПредставления КАК ОбъектДляПредставления,
		|	ПРЕДСТАВЛЕНИЕ(ПредподготовленныеДанные.ОбъектДляПредставления) КАК ПредставлениеОбъектаДляПредставления,
		|	ПредподготовленныеДанные.Объект КАК Объект,
		|	ПредподготовленныеДанные.ПредставлениеОбъекта КАК ПредставлениеОбъекта,
		|	ПредподготовленныеДанные.Пользователь КАК Пользователь,
		|	ПредподготовленныеДанные.АдресПочты КАК АдресПочты,
		|	ПредподготовленныеДанные.ДатаОтправки КАК ДатаОтправки,
		|	ПредподготовленныеДанные.ДатаСоздания КАК ДатаСоздания,
		|	ПредподготовленныеДанные.КлючУникальности КАК КлючУникальности,
		|	ПредподготовленныеДанные.ТекстСообщения КАК ТекстСообщения,
		|	ПредподготовленныеДанные.КатегорияСообщения КАК КатегорияСообщения,
		|	ПредподготовленныеДанные.Важность КАК Важность,
		|	ПредподготовленныеДанные.ГруппаСообщения КАК ГруппаСообщения,
		|	ПредподготовленныеДанные.ТипОповещения КАК ТипОповещения,
		|	ПредподготовленныеДанные.НомерОбъекта КАК НомерОбъекта,
		|	ПредподготовленныеДанные.НаименованиеОбъекта КАК НаименованиеОбъекта,
		|	ПредподготовленныеДанные.НазначениеОбъекта КАК НазначениеОбъекта,
		|	ПредподготовленныеДанные.АвторОбъекта КАК АвторОбъекта,
		|	ПредподготовленныеДанные.ПочтаАвтораОбъекта КАК ПочтаАвтораОбъекта,
		|	ПредподготовленныеДанные.НомерЗадачи КАК НомерЗадачи,
		|	ПредподготовленныеДанные.НаименованиеЗадачи КАК НаименованиеЗадачи,
		|	ПредподготовленныеДанные.НазначениеЗадачи КАК НазначениеЗадачи,
		|	ПредподготовленныеДанные.АвторЗадачи КАК АвторЗадачи,
		|	ПредподготовленныеДанные.ПочтаАвтораЗадачи КАК ПочтаАвтораЗадачи
		|ИЗ
		|	ПредподготовленныеДанныеСРеквизитамиОбъектов КАК ПредподготовленныеДанные
		|ГДЕ
		|	ПредподготовленныеДанные.ГруппаСообщения = """"
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСоздания,
		|	ПредподготовленныеДанные.ПриоритетКатегории
		|ИТОГИ
		|	МАКСИМУМ(Объект),
		|	МАКСИМУМ(АдресПочты),
		|	МАКСИМУМ(НомерОбъекта),
		|	МАКСИМУМ(НаименованиеОбъекта),
		|	МАКСИМУМ(НазначениеОбъекта),
		|	МАКСИМУМ(АвторОбъекта),
		|	МАКСИМУМ(ПочтаАвтораОбъекта),
		|	МАКСИМУМ(НомерЗадачи),
		|	МАКСИМУМ(НаименованиеЗадачи),
		|	МАКСИМУМ(НазначениеЗадачи),
		|	МАКСИМУМ(АвторЗадачи),
		|	МАКСИМУМ(ПочтаАвтораЗадачи)
		|ПО
		|	ОбъектДляПредставления,
		|	Пользователь,
		|	ДатаСоздания";
	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Пакеты = Запрос.ВыполнитьПакет();
	СообщенияПоГруппам = Пакеты.Получить(5).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СообщенияБезГруппы = Пакеты.Получить(6).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаДляОтправки = Новый ТаблицаЗначений;
	ТаблицаДляОтправки.Колонки.Добавить("Адрес", ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(50));
	ТаблицаДляОтправки.Колонки.Добавить("Тема", ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(250));
	ТаблицаДляОтправки.Колонки.Добавить("Текст", ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(0));
	ТаблицаДляОтправки.Колонки.Добавить("Важность", Новый ОписаниеТипов("ПеречислениеСсылка.ВажностьСообщения"));
	ТаблицаДляОтправки.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	ТаблицаДляПеревода = Новый ТаблицаЗначений;
	ТаблицаДляПеревода.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи, СправочникСсылка.Подписчики"));
	ТаблицаДляПеревода.Колонки.Добавить("Объект", Новый ОписаниеТипов("ДокументСсылка.ВнутреннееЗадание, СправочникСсылка.Проекты, ДокументСсылка.Задача, ДокументСсылка.ЗаявкаНаРазработку"));
	ТаблицаДляПеревода.Колонки.Добавить("ТипОповещения", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОповещенийПользователя"));
	ТаблицаДляПеревода.Колонки.Добавить("ДатаОтправки", ОбщегоНазначенияКлиентСервер.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаДляПеревода.Колонки.Добавить("КлючУникальности", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаДляПеревода.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
	// 2. Подготовка данных для записи
	
	СформироватьСообщенияПоГруппам(СообщенияПоГруппам, ТаблицаДляПеревода, ТаблицаДляОтправки);
	СформироватьСообщенияБезГруппы(СообщенияБезГруппы, ТаблицаДляПеревода, ТаблицаДляОтправки);
	// 3. Запись подготовленных данных
	
	Для Каждого Строка Из ТаблицаДляОтправки Цикл
		// Поиск строк в таблице для перевода
		НайденныеСтроки = ТаблицаДляПеревода.НайтиСтроки(Новый Структура("Идентификатор", Строка.Идентификатор));
		
		// Добавление сообщения в очередь отправки
		Если ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Строка.Адрес) Тогда
			
			НачатьТранзакцию();
			Попытка
				РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.Добавить(Строка.Адрес, Строка.Тема, Строка.Текст, Строка.Важность);
				
				// Отметка записей регистра обработанными
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					РегистрыСведений.ПодготовленныеСообщенияПользователяПоКатегориям.ОтметитьОбработанным(НайденнаяСтрока);
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				
				ЗаписьЖурналаРегистрации("Подготовка электронных писем", УровеньЖурналаРегистрации.Ошибка, , ,
					СтрШаблон("Ошибка при подготовке электронных писем к отправке: %1.", ОписаниеОшибки()));
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет корректность заполнения услуги в трудозатратах. При обнаружении проблем
// отправляет уведомление в канал 1c-web-client-warnings.
//
Процедура ПроверкаКорректностиЗаполненияТрудозатрат() Экспорт
	
	ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаКорректностиЗаполненияТрудозатрат);
	
	ДатаЗапретаИзмененияДанных = Константы.ДатаЗапретаИзмененияДанных.Получить();	
	ДатаНачала = НачалоМесяца(ДобавитьМесяц(ДатаЗапретаИзмененияДанных, 1));	
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	#Область ТекстЗапроса		
	"ВЫБРАТЬ
	|	РегистрТрудозатраты.Регистратор КАК Регистратор,
	|	РегистрТрудозатраты.Период КАК Период,
	|	РегистрТрудозатраты.Пользователь КАК Пользователь,
	|	ДокументТрудозатраты.Направление КАК Направление,
	|	НаправленияРазработки.ОсновноеЮридическоеЛицо КАК ОсновноеЮридическоеЛицо
	|ПОМЕСТИТЬ ОтобранныеТрудозатраты
	|ИЗ
	|	РегистрСведений.Трудозатраты КАК РегистрТрудозатраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Трудозатраты КАК ДокументТрудозатраты
	|		ПО РегистрТрудозатраты.Регистратор = ДокументТрудозатраты.Ссылка
	|			И (ДокументТрудозатраты.ЮридическоеЛицо <> ЗНАЧЕНИЕ(Справочник.ЮридическиеЛица.ПустаяСсылка))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаправленияРазработки КАК НаправленияРазработки
	|		ПО (ДокументТрудозатраты.Направление = НаправленияРазработки.Ссылка)
	|ГДЕ
	|	РегистрТрудозатраты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И РегистрТрудозатраты.Услуга = ЗНАЧЕНИЕ(Справочник.Услуги.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеТрудозатраты.Пользователь КАК Пользователь,
	|	ОтобранныеТрудозатраты.Период КАК Период,
	|	МАКСИМУМ(ЛичныеДела.Период) КАК ДатаИзменения
	|ПОМЕСТИТЬ ДатыИзмененияПодразделенияСотрудника
	|ИЗ
	|	ОтобранныеТрудозатраты КАК ОтобранныеТрудозатраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела КАК ЛичныеДела
	|		ПО ОтобранныеТрудозатраты.Пользователь = ЛичныеДела.Сотрудник
	|			И (ЛичныеДела.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение))
	|			И ОтобранныеТрудозатраты.Период >= ЛичныеДела.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтобранныеТрудозатраты.Пользователь,
	|	ОтобранныеТрудозатраты.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыИзмененияПодразделенияСотрудника.Пользователь КАК Пользователь,
	|	ДатыИзмененияПодразделенияСотрудника.Период КАК Период,
	|	ВЫРАЗИТЬ(ЛичныеДела.Данные КАК Справочник.Филиалы) КАК Филиал
	|ПОМЕСТИТЬ ПодразделенияСотрудника
	|ИЗ
	|	ДатыИзмененияПодразделенияСотрудника КАК ДатыИзмененияПодразделенияСотрудника
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела КАК ЛичныеДела
	|		ПО ДатыИзмененияПодразделенияСотрудника.Пользователь = ЛичныеДела.Сотрудник
	|			И ДатыИзмененияПодразделенияСотрудника.ДатаИзменения = ЛичныеДела.Период
	|			И (ЛичныеДела.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеТрудозатраты.Пользователь КАК Пользователь,
	|	ОтобранныеТрудозатраты.Период КАК Период,
	|	МАКСИМУМ(ЛичныеДела.Период) КАК ДатаИзменения
	|ПОМЕСТИТЬ ДатыИзмененияДолжностиСотрудника
	|ИЗ
	|	ОтобранныеТрудозатраты КАК ОтобранныеТрудозатраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела КАК ЛичныеДела
	|		ПО ОтобранныеТрудозатраты.Пользователь = ЛичныеДела.Сотрудник
	|			И (ЛичныеДела.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПринятНаДолжность))
	|			И ОтобранныеТрудозатраты.Период >= ЛичныеДела.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтобранныеТрудозатраты.Пользователь,
	|	ОтобранныеТрудозатраты.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыИзмененияДолжностиСотрудника.Пользователь КАК Пользователь,
	|	ДатыИзмененияДолжностиСотрудника.Период КАК Период,
	|	ВЫРАЗИТЬ(ЛичныеДела.Данные КАК Справочник.Должности) КАК Должность
	|ПОМЕСТИТЬ ДолжностиСотрудника
	|ИЗ
	|	ДатыИзмененияДолжностиСотрудника КАК ДатыИзмененияДолжностиСотрудника
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела КАК ЛичныеДела
	|		ПО ДатыИзмененияДолжностиСотрудника.Пользователь = ЛичныеДела.Сотрудник
	|			И ДатыИзмененияДолжностиСотрудника.ДатаИзменения = ЛичныеДела.Период
	|			И (ЛичныеДела.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПринятНаДолжность))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеТрудозатраты.Регистратор КАК Регистратор,
	|	ОтобранныеТрудозатраты.Период КАК Период,
	|	ОтобранныеТрудозатраты.Пользователь КАК Пользователь,
	|	ВЫБОР
	|		КОГДА Услуги.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ Услуги.ФиксированныйТариф
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьУслугиДолжности,
	|	ВЫБОР
	|		КОГДА Услуги.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА Услуги.ФиксированныйТариф
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьФиксированныеУслугиДолжности,
	|	ВЫБОР
	|		КОГДА ВидыДеятельностиУслуг.Услуга ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьВидыДеятельностиУслуг,
	|	ЕСТЬNULL(ДоступныеУслугиФилиалов.Использование, ИСТИНА) КАК ЕстьДоступныеУслугиФилиала
	|ПОМЕСТИТЬ ДанныеПользователя
	|ИЗ
	|	ОтобранныеТрудозатраты КАК ОтобранныеТрудозатраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодразделенияСотрудника КАК ПодразделенияСотрудника
	|		ПО ОтобранныеТрудозатраты.Пользователь = ПодразделенияСотрудника.Пользователь
	|			И ОтобранныеТрудозатраты.Период = ПодразделенияСотрудника.Период
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЮридическиеЛица КАК ЮридическиеЛица
	|			ПО Филиалы.ЮридическоеЛицо = ЮридическиеЛица.Ссылка
	|				И (ЮридическиеЛица.ЯвляетсяИТОрганизацией)
	|		ПО (ПодразделенияСотрудника.Филиал = Филиалы.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДолжностиСотрудника КАК ДолжностиСотрудника
	|		ПО ОтобранныеТрудозатраты.Пользователь = ДолжностиСотрудника.Пользователь
	|			И ОтобранныеТрудозатраты.Период = ДолжностиСотрудника.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Услуги.Должности КАК УслугиДолжности
	|		ПО (ДолжностиСотрудника.Должность = УслугиДолжности.Должность)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Услуги КАК Услуги
	|		ПО (УслугиДолжности.Ссылка = Услуги.Ссылка)
	|			И (НЕ Услуги.ПометкаУдаления)
	|			И (Услуги.Используется)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДеятельностиУслуг КАК ВидыДеятельностиУслуг
	|		ПО (ВидыДеятельностиУслуг.Услуга = Услуги.Ссылка)
	|			И (НЕ ВидыДеятельностиУслуг.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеУслугиФилиалов КАК ДоступныеУслугиФилиалов
	|		ПО (ДоступныеУслугиФилиалов.Филиал = ПодразделенияСотрудника.Филиал)
	|			И (ВидыДеятельностиУслуг.Ссылка = ДоступныеУслугиФилиалов.ВидДеятельностиУслуги)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПользователя.Пользователь КАК Пользователь,
	|	ДанныеПользователя.Период КАК Период,
	|	МАКСИМУМ(ДанныеПользователя.ЕстьУслугиДолжности) КАК ЕстьУслугиДолжности,
	|	МАКСИМУМ(ДанныеПользователя.ЕстьФиксированныеУслугиДолжности) КАК ЕстьФиксированныеУслугиДолжности,
	|	МАКСИМУМ(ДанныеПользователя.ЕстьВидыДеятельностиУслуг) КАК ЕстьВидыДеятельностиУслуг,
	|	МАКСИМУМ(ДанныеПользователя.ЕстьДоступныеУслугиФилиала) КАК ЕстьДоступныеУслугиФилиала
	|ПОМЕСТИТЬ СводныеДанныеПользователей
	|ИЗ
	|	ДанныеПользователя КАК ДанныеПользователя
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПользователя.Пользователь,
	|	ДанныеПользователя.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеТрудозатраты.Регистратор КАК Регистратор,
	|	ОтобранныеТрудозатраты.Пользователь КАК Пользователь,
	|	ОтобранныеТрудозатраты.Направление КАК Направление,
	|	ОтобранныеТрудозатраты.ОсновноеЮридическоеЛицо КАК ОсновноеЮридическоеЛицо,
	|	СводныеДанныеПользователей.ЕстьУслугиДолжности КАК ЕстьУслугиДолжности,
	|	СводныеДанныеПользователей.ЕстьВидыДеятельностиУслуг КАК ЕстьВидыДеятельностиУслуг,
	|	СводныеДанныеПользователей.ЕстьДоступныеУслугиФилиала КАК ЕстьДоступныеУслугиФилиала
	|ИЗ
	|	ОтобранныеТрудозатраты КАК ОтобранныеТрудозатраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СводныеДанныеПользователей КАК СводныеДанныеПользователей
	|		ПО ОтобранныеТрудозатраты.Пользователь = СводныеДанныеПользователей.Пользователь
	|			И ОтобранныеТрудозатраты.Период = СводныеДанныеПользователей.Период
	|			И (НЕ СводныеДанныеПользователей.ЕстьФиксированныеУслугиДолжности)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивОшибок = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл				
		Если НЕ ЗначениеЗаполнено(Выборка.ОсновноеЮридическоеЛицо) Тогда
			ТекстОшибки = "у направления не установлено основное юридическое лицо";		
		ИначеЕсли НЕ Выборка.ЕстьУслугиДолжности Тогда
			 ТекстОшибки = "для должности пользователя нет услуг";	 
		ИначеЕсли НЕ Выборка.ЕстьВидыДеятельностиУслуг Тогда
			ТекстОшибки = "для должности нет видов деятельности услуг";	
		ИначеЕсли НЕ Выборка.ЕстьДоступныеУслугиФилиала Тогда
			ТекстОшибки = "для филиала пользователя нет доступных видов деятельности услуг";
		Иначе
			ТекстОшибки = "не удалось определить причину";
		КонецЕсли;
					
		ВнешняяСсылка = ОбщегоНазначения.ПолучитьHTTPСсылкуНаОбъект(Выборка.Регистратор);
		Наименование = Строка(Выборка.Регистратор);
		ТекстОшибки = СтрШаблон("[%1](%2) не заполнена услуга: %3", Наименование, ВнешняяСсылка, ТекстОшибки);
		
		МассивОшибок.Добавить(ТекстОшибки);
	КонецЦикла;			
	
	Если МассивОшибок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = 
	":warning: *Незаполненные услуги в трудозатратах*
	|
	|%1";
	
	ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрСоединить(МассивОшибок, Символы.ПС));	
	
	РегистрыСведений.БуферСообщений.Добавить(Перечисления.СпособыОтправкиСообщений.Мессенджер, 
		Перечисления.ТипыСлужебногоКанала.СообщениеОбОшибках, ТекстСообщения,,
		Перечисления.ТипыСообщенийМессенджера.НезаполненныеУслугиВТрудозатратах);
	
	КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТемуПисьмаПоГруппеСообщения(Знач ГруппаСообщения)
	
	Результат = "";
	
	Если НЕ ПустаяСтрока(ГруппаСообщения) Тогда
		// Группировка содержит ключ группировки, дату отправки и количество секунд, которое накапливались записи.
		// Если из даты отправки вычесть количество секунд, то получится дата начала сбора данных, которую можно
		// использовать при формировании темы отправляемого письма.
		
		ЧастиГруппы = СтрРазделить(ГруппаСообщения, "_", Истина);
		Группировка = ЧастиГруппы.Получить(0);
		ДатаОтправки = Дата(ЧастиГруппы.Получить(1));
		Смещение = ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный).ПривестиЗначение(ЧастиГруппы.Получить(2));
		ДатаНачала = ДатаОтправки - Смещение;
		
		// Группировка по заявке
		Если СтрНачинаетсяС(Группировка, "ЗР") Тогда
			Результат = "Изменения по заявке на разработку " + Группировка + " и подчиненным задачам";
			
			// Группировка по задаче
		ИначеЕсли СтрНачинаетсяС(Группировка, "З") Тогда
			Результат = "Изменения по задаче " + Группировка;
			
			// Группировка по проекту
		ИначеЕсли СтрНачинаетсяС(Группировка, "П") Тогда
			Результат = "Изменения по проекту " + Группировка;
			
		Иначе
			// Группировка по периоду
			Результат = "Изменения";
		КонецЕсли;
		
		Если ДатаНачала <> ДатаОтправки Тогда
			Результат = Результат + " за период с " + Формат(ДатаНачала, "ДФ='дд МММ гггг ЧЧ:мм'") + " по " + Формат(ДатаОтправки, "ДФ='дд МММ гггг ЧЧ:мм'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СформироватьСообщенияПоГруппам(ВыборкаПользователь, ТаблицаДляПеревода, ТаблицаДляОтправки)
	
	Если ВыборкаПользователь.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Регулярное выражение для поиска входжений.
	// Если при смене статуса был добавлен комментарий, и пользователь получает сообщения
	// по изменению статуса и комментариям, то нужно в сообщение добавить текст комментария
	// заменив в нем "Пользователь <имя_пользователя> добавил" на "и добавлен".
	ШаблонПоискаПользователей = "\d+.\d+.\d+ в \d+:\d+ <b>[\s\S]*?<\/b> добавил\(-а\) комментарий:";
	ШаблонПоискаКатегорий = "\{\~[\s\S]*?\~\}";
	
	ШаблоныПисьма = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма();
	
	Пока ВыборкаПользователь.Следующий() Цикл
		ВыборкаКатегорииСообщений = ВыборкаПользователь.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		// Перебор групп сообщений
		Пока ВыборкаКатегорииСообщений.Следующий() Цикл
			ТемаПисьма = ПолучитьТемуПисьмаПоГруппеСообщения(ВыборкаКатегорииСообщений.ГруппаСообщения);
			
			// Будет использован при транзакционной записи
			ИдентификаторПисьма = Новый УникальныйИдентификатор;
			
			// Параметры сообщения
			ТекстСообщения = "";
			ВажностьСообщения = Перечисления.ВажностьСообщения.Обычная;
			КатегорииИзменений = "";
			
			ВыборкаОбъекты = ВыборкаКатегорииСообщений.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			// Перебор объектов внутри одной группы
			Пока ВыборкаОбъекты.Следующий() Цикл
				
				ТипОбъекта = ТипЗнч(ВыборкаОбъекты.ОбъектДляПредставления);
				НавигационнаяСсылка = ОбщегоНазначения.ПолучитьШаблонНавигационнойСсылки(ВыборкаОбъекты.ОбъектДляПредставления);
				
				ТекстШаблона = СтрШаблон("<b>%1</b>", ВыборкаОбъекты.НаименованиеОбъекта);
				
				ШаблонЗаголовка = СтрЗаменить(ШаблоныПисьма.БлокОсновногоТекста, "<!-- content -->", ТекстШаблона);
				ШаблонЗаголовка = СтрЗаменить(ШаблонЗаголовка, "<!-- font_size -->", "20px");
				
				ШаблонПисьма = ШаблоныПисьма.БлокТриТаблицы;
				
				ПочтаАвтора = СтрЗаменить(ШаблоныПисьма.ЭлектронноеПисьмо, "<!-- email -->", ВыборкаОбъекты.ПочтаАвтораОбъекта);
				ПочтаАвтора = СтрЗаменить(ПочтаАвтора, "<!-- user_name -->", ВыборкаОбъекты.АвторОбъекта);
				ТекстШаблона = СтрШаблон("Автор: %1", ПочтаАвтора);
				ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- left_table -->", ТекстШаблона);
				
				СсылкаНаОбъект = СтрЗаменить(ШаблоныПисьма.АктивнаяСсылка, "<!-- link -->", НавигационнаяСсылка);
				СсылкаНаОбъект = СтрЗаменить(СсылкаНаОбъект, "<!-- title_link -->", ВыборкаОбъекты.НомерОбъекта);
				ТекстШаблона = СтрШаблон("%1 %2. %3", Строка(ТипОбъекта), СсылкаНаОбъект, ВыборкаОбъекты.НазначениеОбъекта);
				ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- center_table -->", ТекстШаблона);
				
				ТекстШаблона = СтрЗаменить(ШаблоныПисьма.АктивнаяСсылка, "<!-- link -->", 
					СформироватьСсылкуНаОтпискуОтОповещений(ВыборкаОбъекты.НомерОбъекта));
				ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- title_link -->", "Отписаться");
				ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- right_table -->", ТекстШаблона);
				
				ШаблонОбъекта = ШаблонЗаголовка + Символы.ПС + ШаблонПисьма;
				
				ПредыдущийОбъект = Неопределено;
				ПерваяЗадачаЗаявки = Истина;
				СообщениеОбъекта = "";
								
				// Перебор отправляемых сообщений
				Выборка = ВыборкаОбъекты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока Выборка.Следующий() Цикл
					ДанныеСобытия = "";
					
					// Если формируется письмо по изменениям задач, подчиненным заявке, то вставляем ссылки на задачи
					Если ТипЗнч(ВыборкаОбъекты.ОбъектДляПредставления) = Тип("ДокументСсылка.ЗаявкаНаРазработку") И Выборка.Количество() > 0
						И ТипЗнч(Выборка.Объект) = Тип("ДокументСсылка.Задача") И ПредыдущийОбъект <> Выборка.Объект Тогда
						ПредставлениеОбъекта = Выборка.ПредставлениеОбъекта;
						НавигационнаяСсылка = ОбщегоНазначения.ПолучитьШаблонНавигационнойСсылки(Выборка.Объект);
						
						Если ПерваяЗадачаЗаявки Тогда
							ТекстШаблона = "<b>Изменения в следующих подчиненных задачах:</b>";
							
							ШаблонПисьма = СтрЗаменить(ШаблоныПисьма.БлокОсновногоТекста, "<!-- content -->", ТекстШаблона);
							ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- font_size -->", "16px");
							
							ДанныеСобытия = ДанныеСобытия + ШаблонПисьма;
							ПерваяЗадачаЗаявки = Ложь;
						КонецЕсли;
						
						ТекстШаблона = СтрШаблон("<b>%1</b>", Выборка.НаименованиеЗадачи);
						
						ШаблонОбъектаПодчиненного = СтрЗаменить(ШаблоныПисьма.БлокОсновногоТекста, "<!-- content -->", ТекстШаблона);
						ШаблонОбъектаПодчиненного = СтрЗаменить(ШаблонОбъектаПодчиненного, "<!-- font_size -->", "16px");
						
						ШаблонОбъектаПодчиненного = ШаблонОбъектаПодчиненного + Символы.ПС + ШаблоныПисьма.БлокТриТаблицы;
						
						ПочтаАвтора = СтрЗаменить(ШаблоныПисьма.ЭлектронноеПисьмо, "<!-- email -->", Выборка.ПочтаАвтораЗадачи);
						ПочтаАвтора = СтрЗаменить(ПочтаАвтора, "<!-- user_name -->", Выборка.АвторЗадачи);
						ТекстШаблона = СтрШаблон("Автор: %1", ПочтаАвтора);
						ШаблонОбъектаПодчиненного = СтрЗаменить(ШаблонОбъектаПодчиненного, "<!-- left_table -->", ТекстШаблона);
						
						СсылкаНаОбъект = СтрЗаменить(ШаблоныПисьма.АктивнаяСсылка, "<!-- link -->", НавигационнаяСсылка);
						СсылкаНаОбъект = СтрЗаменить(СсылкаНаОбъект, "<!-- title_link -->", Выборка.НомерЗадачи);
						ТекстШаблона = СтрШаблон("Задача %1. %2", СсылкаНаОбъект, Выборка.НазначениеЗадачи);
						ШаблонОбъектаПодчиненного = СтрЗаменить(ШаблонОбъектаПодчиненного, "<!-- center_table -->", ТекстШаблона);
						
						ТекстШаблона = СтрЗаменить(ШаблоныПисьма.АктивнаяСсылка, "<!-- link -->", 
							СформироватьСсылкуНаОтпискуОтОповещений(Выборка.НомерЗадачи));
						ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- title_link -->", "Отписаться");
						ШаблонОбъектаПодчиненного = СтрЗаменить(ШаблонОбъектаПодчиненного, "<!-- right_table -->", ТекстШаблона);
						
						ДанныеСобытия = ДанныеСобытия + Символы.ПС + ШаблонОбъектаПодчиненного;
						
					КонецЕсли;
					
					ДетальныеЗаписи = Выборка.Выбрать();
					
					ПорядковыйНомер = 1;
					Пока ДетальныеЗаписи.Следующий() Цикл
						
						ПромежуточныйТекстСообщения = ДетальныеЗаписи.ТекстСообщения;
						
						Если ДетальныеЗаписи.КатегорияСообщения = Перечисления.КатегорииСообщенийПользователя.Комментарии Тогда
							// Если это не первое сообщение на одну и ту же секунду, и
							// это сообщения типа комментарий, то изменим его текст
							Если ПорядковыйНомер > 1 Тогда
								ПромежуточныйТекстСообщения = СтрЗаменитьПоРегулярномуВыражению(ПромежуточныйТекстСообщения, 
									ШаблонПоискаПользователей, "и добавлен комментарий:", Истина, Истина);
							КонецЕсли;
						КонецЕсли;
						
						ДанныеСобытия = ДанныеСобытия + Символы.ПС + ПромежуточныйТекстСообщения;
						
						Если ДетальныеЗаписи.Важность = Перечисления.ВажностьСообщения.Высокая Тогда
							ВажностьСообщения = Перечисления.ВажностьСообщения.Высокая;
						КонецЕсли;
						
						// Добавление строки в ТаблицаДляПеревода
						НоваяСтрока = ТаблицаДляПеревода.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ДетальныеЗаписи);
						НоваяСтрока.Идентификатор = ИдентификаторПисьма;
						
						ПорядковыйНомер = ПорядковыйНомер + 1;
					КонецЦикла;
					СообщениеОбъекта = СообщениеОбъекта + ДанныеСобытия;
					
					ПредыдущийОбъект = Выборка.Объект;
				КонецЦикла;
				
				СообщениеОбъекта = ШаблонОбъекта + СообщениеОбъекта;
				СообщениеОбъекта = СтрЗаменитьПоРегулярномуВыражению(СообщениеОбъекта, ШаблонПоискаКатегорий, "", Истина, Истина);
				
				ТекстСообщения = ТекстСообщения + Символы.ПС + СообщениеОбъекта + Символы.ПС + ШаблоныПисьма.РазделительнаяЛиния;
			КонецЦикла;
			
			ТекстСообщения = ТекстСообщения + Символы.ПС + ШаблоныПисьма.ПодвалПисьма;
			
			// Добавление строки в ТаблицаДляОтправки
			НоваяСтрока = ТаблицаДляОтправки.Добавить();
			НоваяСтрока.Адрес = ВыборкаПользователь.АдресПочты;
			НоваяСтрока.Тема = ТемаПисьма;
			НоваяСтрока.Текст = ТекстСообщения;
			НоваяСтрока.Важность = ВажностьСообщения;
			НоваяСтрока.Идентификатор = ИдентификаторПисьма;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьСообщенияБезГруппы(ВыборПоОбъекту, ТаблицаДляПеревода, ТаблицаДляОтправки)
	
	Если ВыборПоОбъекту.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Регулярное выражение для поиска входжений.
	// Если при смене статуса был добавлен комментарий, и пользователь получает сообщения
	// по изменению статуса и комментариям, то нужно в сообщение добавить текст комментария
	// заменив в нем "Пользователь <имя_пользователя> добавил" на "и добавлен"	
	ШаблонПоискаПользователей = "\d+.\d+.\d+ в \d+:\d+ <b>[\s\S]*?<\/b> добавил\(-а\) комментарий:";
	ШаблонПоискаКатегорий = "\{\~[\s\S]*?\~\}";
	
	ШаблоныПисьма = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма();
	
	Пока ВыборПоОбъекту.Следующий() Цикл
		ВыборПоПользователю = ВыборПоОбъекту.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ПредставлениеСсылки = ВыборПоОбъекту.ПредставлениеОбъектаДляПредставления;
		
		ТипОбъекта = ТипЗнч(ВыборПоОбъекту.ОбъектДляПредставления);
		
		Пока ВыборПоПользователю.Следующий() Цикл
			
			НавигационнаяСсылка = ОбщегоНазначения.ПолучитьШаблонНавигационнойСсылки(ВыборПоОбъекту.ОбъектДляПредставления);
			
			ТекстШаблона = СтрШаблон("<b>%1</b>", ВыборПоОбъекту.НаименованиеОбъекта);
			
			ШаблонЗаголовка = СтрЗаменить(ШаблоныПисьма.БлокОсновногоТекста, "<!-- content -->", ТекстШаблона);
			ШаблонЗаголовка = СтрЗаменить(ШаблонЗаголовка, "<!-- font_size -->", "20px");
			
			ШаблонПисьма = ШаблоныПисьма.БлокТриТаблицы;
			
			ПочтаАвтора = СтрЗаменить(ШаблоныПисьма.ЭлектронноеПисьмо, "<!-- email -->", ВыборПоОбъекту.ПочтаАвтораОбъекта);
			ПочтаАвтора = СтрЗаменить(ПочтаАвтора, "<!-- user_name -->", ВыборПоОбъекту.АвторОбъекта);
			ТекстШаблона = СтрШаблон("Автор: %1", ПочтаАвтора);
			ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- left_table -->", ТекстШаблона);
			
			СсылкаНаОбъект = СтрЗаменить(ШаблоныПисьма.АктивнаяСсылка, "<!-- link -->", НавигационнаяСсылка);
			СсылкаНаОбъект = СтрЗаменить(СсылкаНаОбъект, "<!-- title_link -->", ВыборПоОбъекту.НомерОбъекта);
			ТекстШаблона = СтрШаблон("%1 %2. %3", Строка(ТипОбъекта), СсылкаНаОбъект, ВыборПоОбъекту.НазначениеОбъекта);
			ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- center_table -->", ТекстШаблона);

			ТекстШаблона = СтрЗаменить(ШаблоныПисьма.АктивнаяСсылка, "<!-- link -->", 
				СформироватьСсылкуНаОтпискуОтОповещений(ВыборПоОбъекту.НомерОбъекта));
			ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- title_link -->", "Отписаться");
			ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- right_table -->", ТекстШаблона);
			
			ШаблонОбъекта = ШаблонЗаголовка + Символы.ПС + ШаблонПисьма;
			
			// Будет использован при транзакционной записи
			ИдентификаторПисьма = Новый УникальныйИдентификатор;
			
			ВыборДетальныеЗаписи = ВыборПоПользователю.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ТекстСообщения = "";
			ВажностьСообщения = Перечисления.ВажностьСообщения.Обычная;
			КатегорииИзменений = "";
			ПредыдущийОбъект = Неопределено;
			ПерваяЗадачаЗаявки = Истина;
			ТемаПисьма = ПредставлениеСсылки;
			ДанныеСобытия = "";
			
			Пока ВыборДетальныеЗаписи.Следующий() Цикл
				// Если формируется письмо по изменениям задач, подчиненным заявке, то вставляем ссылки на задачи
				Если ТипЗнч(ВыборПоОбъекту.ОбъектДляПредставления) = Тип("ДокументСсылка.ЗаявкаНаРазработку") И ВыборДетальныеЗаписи.Количество() > 0
					И ТипЗнч(ВыборДетальныеЗаписи.Объект) = Тип("ДокументСсылка.Задача") И ПредыдущийОбъект <> ВыборДетальныеЗаписи.Объект Тогда
					НавигационнаяСсылка = ОбщегоНазначения.ПолучитьШаблонНавигационнойСсылки(ВыборДетальныеЗаписи.Объект);
					
					Если ПерваяЗадачаЗаявки Тогда
						ТекстШаблона = "<b>Изменения в следующих подчиненных задачах:</b>";
						
						ШаблонПисьма = СтрЗаменить(ШаблоныПисьма.БлокОсновногоТекста, "<!-- content -->", ТекстШаблона);
						ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- font_size -->", "16px");
						
						ДанныеСобытия = ДанныеСобытия + ШаблонПисьма;
						ПерваяЗадачаЗаявки = Ложь;
					КонецЕсли;
					
					ТекстШаблона = СтрШаблон("<b>%1</b>", ВыборДетальныеЗаписи.НаименованиеЗадачи);
					
					ШаблонОбъектаПодчиненного = СтрЗаменить(ШаблоныПисьма.БлокОсновногоТекста, "<!-- content -->", ТекстШаблона);
					ШаблонОбъектаПодчиненного = СтрЗаменить(ШаблонОбъектаПодчиненного, "<!-- font_size -->", "16px");
					
					ШаблонОбъектаПодчиненного = ШаблонОбъектаПодчиненного + Символы.ПС + ШаблоныПисьма.БлокТриТаблицы;
					
					ПочтаАвтора = СтрЗаменить(ШаблоныПисьма.ЭлектронноеПисьмо, "<!-- email -->", ВыборДетальныеЗаписи.ПочтаАвтораЗадачи);
					ПочтаАвтора = СтрЗаменить(ПочтаАвтора, "<!-- user_name -->", ВыборДетальныеЗаписи.АвторЗадачи);
					ТекстШаблона = СтрШаблон("Автор: %1", ПочтаАвтора);
					ШаблонОбъектаПодчиненного = СтрЗаменить(ШаблонОбъектаПодчиненного, "<!-- left_table -->", ТекстШаблона);
					
					СсылкаНаОбъект = СтрЗаменить(ШаблоныПисьма.АктивнаяСсылка, "<!-- link -->", НавигационнаяСсылка);
					СсылкаНаОбъект = СтрЗаменить(СсылкаНаОбъект, "<!-- title_link -->", ВыборДетальныеЗаписи.НомерЗадачи);
					ТекстШаблона = СтрШаблон("Задача %1. %2", СсылкаНаОбъект, ВыборДетальныеЗаписи.НазначениеЗадачи);
					ШаблонОбъектаПодчиненного = СтрЗаменить(ШаблонОбъектаПодчиненного, "<!-- center_table -->", ТекстШаблона);
					
					ТекстШаблона = СтрЗаменить(ШаблоныПисьма.АктивнаяСсылка, "<!-- link -->", 
						СформироватьСсылкуНаОтпискуОтОповещений(ВыборДетальныеЗаписи.НомерЗадачи));
					ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- title_link -->", "Отписаться");
					ШаблонОбъектаПодчиненного = СтрЗаменить(ШаблонОбъектаПодчиненного, "<!-- right_table -->", ТекстШаблона);
					
					ДанныеСобытия = ДанныеСобытия + Символы.ПС + ШаблонОбъектаПодчиненного;
					
				КонецЕсли;
				
				Выборка = ВыборДетальныеЗаписи.Выбрать();
				
				ПорядковыйНомер = 1;
				Пока Выборка.Следующий() Цикл
					
					ПромежуточныйТекстСообщения = Выборка.ТекстСообщения;
					
					Если Выборка.КатегорияСообщения = Перечисления.КатегорииСообщенийПользователя.Комментарии Тогда
						// Если это не первое сообщение на одну и ту же секунду, и
						// это сообщения типа комментарий, то изменим его текст
						Если ПорядковыйНомер > 1 Тогда
							ПромежуточныйТекстСообщения = СтрЗаменитьПоРегулярномуВыражению(ПромежуточныйТекстСообщения,
								ШаблонПоискаПользователей, "и добавлен комментарий:", Истина, Истина);
						КонецЕсли;
					КонецЕсли;
					
					ДанныеСобытия = ДанныеСобытия + Символы.ПС + ПромежуточныйТекстСообщения;
					
					Если Выборка.Важность = Перечисления.ВажностьСообщения.Высокая Тогда
						ВажностьСообщения = Перечисления.ВажностьСообщения.Высокая;
					КонецЕсли;
					
					// Добавление строки в ТаблицаДляПеревода
					НоваяСтрока = ТаблицаДляПеревода.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					НоваяСтрока.Идентификатор = ИдентификаторПисьма;
					
					ПорядковыйНомер = ПорядковыйНомер + 1;
				КонецЦикла;
				
				ПредыдущийОбъект = ВыборДетальныеЗаписи.Объект;
			КонецЦикла;
			
			ТекстСообщения = ТекстСообщения + Символы.ПС + ШаблонОбъекта + Символы.ПС + ДанныеСобытия;
			
			КатегорииИзменений = "";
			
			МассивКатегорий = Новый Массив;
			Вхождения = СтрНайтиВсеПоРегулярномуВыражению(ТекстСообщения, ШаблонПоискаКатегорий);
			Для Каждого Вхождение Из Вхождения Цикл
				НайденнаяСтрока = Вхождение.Значение;
				ТекстСообщения = СтрЗаменить(ТекстСообщения, НайденнаяСтрока, "");
				
				НайденнаяСтрока = СтрЗаменить(НайденнаяСтрока, "{~", "");
				НайденнаяСтрока = СтрЗаменить(НайденнаяСтрока, "~}", "");
				
				КатегорииВхождения = СтрРазделить(НайденнаяСтрока, ",", Ложь);
				Для Каждого КатегорияВхождения Из КатегорииВхождения Цикл
					Если МассивКатегорий.Найти(КатегорияВхождения) = Неопределено Тогда
						МассивКатегорий.Добавить(КатегорияВхождения);
					КонецЕсли;
				КонецЦикла;		
			КонецЦикла;
			
			КатегорииИзменений = Строка(Перечисления.КатегорииСообщенийПользователя.СамаяПриоритетнаяКатегория(МассивКатегорий));
			
			Если КатегорииИзменений <> "" Тогда
				ДлинаТемы = СтрДлина(ТемаПисьма);
				ДлинаКатегорий = СтрДлина(КатегорииИзменений);
				ОбщаяДлинаТемы = ДлинаТемы + ДлинаКатегорий;
				
				Если ОбщаяДлинаТемы > 100 Тогда
					ТемаПисьма = Лев(ТемаПисьма, 97 - ДлинаКатегорий);
				КонецЕсли;
				
				ТемаПисьма = "[" + КатегорииИзменений + "] " + ТемаПисьма + "...";
			КонецЕсли;
			
			ТекстСообщения = ТекстСообщения + Символы.ПС + ШаблоныПисьма.РазделительнаяЛиния + Символы.ПС + ШаблоныПисьма.ПодвалПисьма;
			
			// Добавление строки в ТаблицаДляОтправки
			НоваяСтрока = ТаблицаДляОтправки.Добавить();
			НоваяСтрока.Адрес = ВыборПоПользователю.АдресПочты;
			НоваяСтрока.Тема = ТемаПисьма;
			НоваяСтрока.Текст = ТекстСообщения;
			НоваяСтрока.Важность = ВажностьСообщения;
			НоваяСтрока.Идентификатор = ИдентификаторПисьма;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьСсылкуНаОтпискуОтОповещений(Знач НомерОбъекта)
	
	АдресБазы = ПараметрыСеанса.АдресаWebОкружения.АдресПубликацииСервисаОтпискиОтОповещений;
	Ссылка = АдресБазы + "/hs/api/users/unsubscribe?ObjectNumber=" + НомерОбъекта;
	
	Возврат Ссылка;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОТПРАВКА ДАЙДЖЕСТА ПО ПРОЕКТАМ

Процедура ОтправитьДайджестПоПроектам() Экспорт
	
	ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.РассылкаДайджестовПоПроектам);
	
	ИмяСобытия = "ОтправкаДайджестаПоПроектам";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , "Запуск регламентного задания.");
	
	СекундВНеделе = 604800;
	
	ОтбираемыйПериод = Новый СтандартныйПериод;
	ОтбираемыйПериод.ДатаНачала = НачалоДня(ТекущаяДатаСеанса()) - СекундВНеделе;
	ОтбираемыйПериод.ДатаОкончания = НачалоДня(ТекущаяДатаСеанса());
	
	// Запрос возвращает 3 пакета:
	//  - планы проектов
	//  - опубликованные задачи
	//  - список пользователей и объектов
	Запрос = Новый Запрос;
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	Проекты.Ссылка КАК Проект
	|ПОМЕСТИТЬ ОтобранныеПроекты
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	НЕ Проекты.Статус В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Приостановлен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнутреннееЗадание.Ссылка КАК ВнутреннееЗадание
	|ПОМЕСТИТЬ ОтобранныеВнутренниеЗадания
	|ИЗ
	|	Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
	|ГДЕ
	|	НЕ ВнутреннееЗадание.Статус В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Приостановлен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтобранныеПроекты.Проект КАК Объект
	|ПОМЕСТИТЬ ИзмененПланПроектаПроект
	|ИЗ
	|	ОтобранныеПроекты КАК ОтобранныеПроекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланыВыполненияПроектов КАК ПланыПроектов
	|		ПО (ОтобранныеПроекты.Проект = (ВЫРАЗИТЬ(ПланыПроектов.Объект КАК Справочник.Проекты)))
	|			И (ПланыПроектов.ДатаРедактирования МЕЖДУ &НеделяНазад И &ТекущаяДата)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтобранныеВнутренниеЗадания.ВнутреннееЗадание КАК Объект
	|ПОМЕСТИТЬ ИзмененПланПроектаВнутреннееЗадание
	|ИЗ
	|	ОтобранныеВнутренниеЗадания КАК ОтобранныеВнутренниеЗадания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланыВыполненияПроектов КАК ПланыПроектов
	|		ПО (ОтобранныеВнутренниеЗадания.ВнутреннееЗадание = (ВЫРАЗИТЬ(ПланыПроектов.Объект КАК Документ.ВнутреннееЗадание)))
	|			И (ПланыПроектов.ДатаРедактирования МЕЖДУ &НеделяНазад И &ТекущаяДата)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиПользователя.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ КтоДолженПолучитьСегодня
	|ИЗ
	|	РегистрСведений.НастройкиПользователя КАК НастройкиПользователя
	|ГДЕ
	|	НастройкиПользователя.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ДеньОтправкиДайджестаПоПроектам)
	|	И НастройкиПользователя.Значение = ДЕНЬНЕДЕЛИ(&ТекущаяДата)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КтоДолженПолучитьСегодня.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ОтобранныеПользователи
	|ИЗ
	|	КтоДолженПолучитьСегодня КАК КтоДолженПолучитьСегодня
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователя КАК НастройкиПользователя
	|		ПО КтоДолженПолучитьСегодня.Пользователь = НастройкиПользователя.Пользователь
	|			И (НастройкиПользователя.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ОтправлятьДайджестПоПроектам))
	|			И (НастройкиПользователя.Значение = ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ДокументЗадача.Проект КАК Справочник.Проекты) КАК Проект,
	|	ПРЕДСТАВЛЕНИЕ(ВЫРАЗИТЬ(ДокументЗадача.Проект КАК Справочник.Проекты)) КАК ПроектПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ДокументЗадача.ОбъектОснование) КАК ОбъектОснование,
	|	ПРЕДСТАВЛЕНИЕ(ДокументЗадача.Ссылка) КАК Задача,
	|	ИсторияПубликацииЗадач.Период КАК ДатаПубликации,
	|	ПРЕДСТАВЛЕНИЕ(ВЫБОР
	|			КОГДА ЗаявкаНаРазработку.ФинальныйСтатус <> ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ПустаяСсылка)
	|				ТОГДА ЗаявкаНаРазработку.ФинальныйСтатус
	|			ИНАЧЕ МинимальныеСтатусыЗаявок.Статус
	|		КОНЕЦ) КАК Статус,
	|	ПРЕДСТАВЛЕНИЕ(ДокументЗадача.СистемаУчета) КАК Система
	|ПОМЕСТИТЬ ОпубликованныеЗадачи
	|ИЗ
	|	Документ.Задача КАК ДокументЗадача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПубликацииЗадач.СрезПоследних(&ТекущаяДата, ) КАК ИсторияПубликацииЗадач
	|		ПО ДокументЗадача.Ссылка = ИсторияПубликацииЗадач.Задача
	|			И (ИсторияПубликацииЗадач.Период МЕЖДУ &НеделяНазад И &ТекущаяДата)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО ((ВЫРАЗИТЬ(ДокументЗадача.ОбъектОснование КАК Документ.ЗаявкаНаРазработку)) = ЗаявкаНаРазработку.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
	|		ПО (ЗаявкаНаРазработку.Ссылка = МинимальныеСтатусыЗаявок.Заявка)
	|ГДЕ
	|	ДокументЗадача.Проект ССЫЛКА Справочник.Проекты
	|	И ДокументЗадача.Проект <> ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеПользователи.Пользователь КАК Пользователь,
	|	НастройкиПользователя.Настройка КАК Реквизит,
	|	НастройкиПользователя.Значение КАК Значение
	|ПОМЕСТИТЬ НастройкиОтправкиДайджеста
	|ИЗ
	|	ОтобранныеПользователи КАК ОтобранныеПользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователя КАК НастройкиПользователя
	|		ПО ОтобранныеПользователи.Пользователь = НастройкиПользователя.Пользователь
	|			И (НастройкиПользователя.Настройка В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ОтправкаДайджестаЗаинтересованный), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ОтправкаДайджестаЗаказчик), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ОтправкаДайджестаКУП), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ОтправкаДайджестаНаблюдатель), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ОтправкаДайджестаРуководитель)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОпубликованныеЗадачи.Проект КАК Объект,
	|	НастройкиОтправкиДайджеста.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ КомуЧтоОтправлять
	|ИЗ
	|	ОпубликованныеЗадачи КАК ОпубликованныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
	|		ПО ОпубликованныеЗадачи.Проект = Проекты.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиОтправкиДайджеста КАК НастройкиОтправкиДайджеста
	|		ПО (НастройкиОтправкиДайджеста.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ОтправкаДайджестаЗаказчик))
	|			И (НастройкиОтправкиДайджеста.Значение = ИСТИНА)
	|			И (Проекты.Заказчик = НастройкиОтправкиДайджеста.Пользователь)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОпубликованныеЗадачи.Проект,
	|	НастройкиОтправкиДайджеста.Пользователь
	|ИЗ
	|	ОпубликованныеЗадачи КАК ОпубликованныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
	|		ПО ОпубликованныеЗадачи.Проект = Проекты.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиОтправкиДайджеста КАК НастройкиОтправкиДайджеста
	|		ПО (НастройкиОтправкиДайджеста.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ОтправкаДайджестаРуководитель))
	|			И (НастройкиОтправкиДайджеста.Значение = ИСТИНА)
	|			И (Проекты.Руководитель = НастройкиОтправкиДайджеста.Пользователь)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОпубликованныеЗадачи.Проект,
	|	НастройкиОтправкиДайджеста.Пользователь
	|ИЗ
	|	ОпубликованныеЗадачи КАК ОпубликованныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Участники КАК Участники
	|		ПО (ОпубликованныеЗадачи.Проект = (ВЫРАЗИТЬ(Участники.Объект КАК Справочник.Проекты)))
	|			И (Участники.Роль = ЗНАЧЕНИЕ(Справочник.РолиУчастников.УчастникКомандыУправленияПроектом))
	|			И (Участники.ПолучатьОповещения)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиОтправкиДайджеста КАК НастройкиОтправкиДайджеста
	|		ПО (НастройкиОтправкиДайджеста.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ОтправкаДайджестаКУП))
	|			И (НастройкиОтправкиДайджеста.Значение = ИСТИНА)
	|			И (Участники.Пользователь = НастройкиОтправкиДайджеста.Пользователь)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОпубликованныеЗадачи.Проект,
	|	НастройкиОтправкиДайджеста.Пользователь
	|ИЗ
	|	ОпубликованныеЗадачи КАК ОпубликованныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Участники КАК Участники
	|		ПО (Участники.Роль В (ЗНАЧЕНИЕ(Справочник.РолиУчастников.Наблюдатель), ЗНАЧЕНИЕ(Справочник.РолиУчастников.УчастникКомандыУправленияПроектом)))
	|			И (ОпубликованныеЗадачи.Проект = (ВЫРАЗИТЬ(Участники.Объект КАК Справочник.Проекты)))
	|			И (Участники.ПолучатьОповещения)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиОтправкиДайджеста КАК НастройкиОтправкиДайджеста
	|		ПО (НастройкиОтправкиДайджеста.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ОтправкаДайджестаНаблюдатель))
	|			И (НастройкиОтправкиДайджеста.Значение = ИСТИНА)
	|			И ((ВЫРАЗИТЬ(Участники.Пользователь КАК Справочник.Пользователи)) = НастройкиОтправкиДайджеста.Пользователь)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОпубликованныеЗадачи.Проект,
	|	Участники.Пользователь
	|ИЗ
	|	ОпубликованныеЗадачи КАК ОпубликованныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Участники КАК Участники
	|		ПО (Участники.Роль = ЗНАЧЕНИЕ(Справочник.РолиУчастников.Подписчик))
	|			И (ОпубликованныеЗадачи.Проект = (ВЫРАЗИТЬ(Участники.Объект КАК Справочник.Проекты)))
	|			И (Участники.ПолучатьОповещения)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОпубликованныеЗадачи.Проект,
	|	НастройкиОтправкиДайджеста.Пользователь
	|ИЗ
	|	ОпубликованныеЗадачи КАК ОпубликованныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаинтересованныеЛица КАК ЗаинтересованныеЛица
	|		ПО (ОпубликованныеЗадачи.Проект = (ВЫРАЗИТЬ(ЗаинтересованныеЛица.Объект КАК Справочник.Проекты)))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиОтправкиДайджеста КАК НастройкиОтправкиДайджеста
	|		ПО (ЗаинтересованныеЛица.Пользователь = НастройкиОтправкиДайджеста.Пользователь)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИзмененПланПроектаПроект.Объект,
	|	НастройкиОтправкиДайджеста.Пользователь
	|ИЗ
	|	ИзмененПланПроектаПроект КАК ИзмененПланПроектаПроект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
	|		ПО ИзмененПланПроектаПроект.Объект = Проекты.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиОтправкиДайджеста КАК НастройкиОтправкиДайджеста
	|		ПО (НастройкиОтправкиДайджеста.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ОтправкаДайджестаЗаказчик))
	|			И (НастройкиОтправкиДайджеста.Значение = ИСТИНА)
	|			И (Проекты.Заказчик = НастройкиОтправкиДайджеста.Пользователь)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИзмененПланПроектаПроект.Объект,
	|	НастройкиОтправкиДайджеста.Пользователь
	|ИЗ
	|	ИзмененПланПроектаПроект КАК ИзмененПланПроектаПроект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
	|		ПО ИзмененПланПроектаПроект.Объект = Проекты.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиОтправкиДайджеста КАК НастройкиОтправкиДайджеста
	|		ПО (НастройкиОтправкиДайджеста.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ОтправкаДайджестаРуководитель))
	|			И (НастройкиОтправкиДайджеста.Значение = ИСТИНА)
	|			И (Проекты.Руководитель = НастройкиОтправкиДайджеста.Пользователь)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИзмененПланПроектаПроект.Объект,
	|	НастройкиОтправкиДайджеста.Пользователь
	|ИЗ
	|	ИзмененПланПроектаПроект КАК ИзмененПланПроектаПроект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Участники КАК Участники
	|		ПО (ИзмененПланПроектаПроект.Объект = (ВЫРАЗИТЬ(Участники.Объект КАК Справочник.Проекты)))
	|			И (Участники.Роль = ЗНАЧЕНИЕ(Справочник.РолиУчастников.УчастникКомандыУправленияПроектом))
	|			И (Участники.ПолучатьОповещения)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиОтправкиДайджеста КАК НастройкиОтправкиДайджеста
	|		ПО (НастройкиОтправкиДайджеста.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ОтправкаДайджестаКУП))
	|			И (НастройкиОтправкиДайджеста.Значение = ИСТИНА)
	|			И (Участники.Пользователь = НастройкиОтправкиДайджеста.Пользователь)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИзмененПланПроектаПроект.Объект,
	|	НастройкиОтправкиДайджеста.Пользователь
	|ИЗ
	|	ИзмененПланПроектаПроект КАК ИзмененПланПроектаПроект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Участники КАК Участники
	|		ПО (Участники.Роль В (ЗНАЧЕНИЕ(Справочник.РолиУчастников.Наблюдатель), ЗНАЧЕНИЕ(Справочник.РолиУчастников.УчастникКомандыУправленияПроектом)))
	|			И (ИзмененПланПроектаПроект.Объект = (ВЫРАЗИТЬ(Участники.Объект КАК Справочник.Проекты)))
	|			И (Участники.ПолучатьОповещения)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиОтправкиДайджеста КАК НастройкиОтправкиДайджеста
	|		ПО (НастройкиОтправкиДайджеста.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ОтправкаДайджестаНаблюдатель))
	|			И (НастройкиОтправкиДайджеста.Значение = ИСТИНА)
	|			И ((ВЫРАЗИТЬ(Участники.Пользователь КАК Справочник.Пользователи)) = НастройкиОтправкиДайджеста.Пользователь)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИзмененПланПроектаПроект.Объект,
	|	Участники.Пользователь
	|ИЗ
	|	ИзмененПланПроектаПроект КАК ИзмененПланПроектаПроект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Участники КАК Участники
	|		ПО (Участники.Роль = ЗНАЧЕНИЕ(Справочник.РолиУчастников.Подписчик))
	|			И (ИзмененПланПроектаПроект.Объект = (ВЫРАЗИТЬ(Участники.Объект КАК Справочник.Проекты)))
	|			И (Участники.ПолучатьОповещения)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИзмененПланПроектаПроект.Объект,
	|	НастройкиОтправкиДайджеста.Пользователь
	|ИЗ
	|	ИзмененПланПроектаПроект КАК ИзмененПланПроектаПроект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаинтересованныеЛица КАК ЗаинтересованныеЛица
	|		ПО (ИзмененПланПроектаПроект.Объект = (ВЫРАЗИТЬ(ЗаинтересованныеЛица.Объект КАК Справочник.Проекты)))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиОтправкиДайджеста КАК НастройкиОтправкиДайджеста
	|		ПО (ЗаинтересованныеЛица.Пользователь = НастройкиОтправкиДайджеста.Пользователь)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИзмененПланПроектаВнутреннееЗадание.Объект,
	|	НастройкиОтправкиДайджеста.Пользователь
	|ИЗ
	|	ИзмененПланПроектаВнутреннееЗадание КАК ИзмененПланПроектаВнутреннееЗадание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
	|		ПО ИзмененПланПроектаВнутреннееЗадание.Объект = ВнутреннееЗадание.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиОтправкиДайджеста КАК НастройкиОтправкиДайджеста
	|		ПО (НастройкиОтправкиДайджеста.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ОтправкаДайджестаЗаказчик))
	|			И (НастройкиОтправкиДайджеста.Значение = ИСТИНА)
	|			И (ВнутреннееЗадание.Заказчик = НастройкиОтправкиДайджеста.Пользователь)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИзмененПланПроектаВнутреннееЗадание.Объект,
	|	НастройкиОтправкиДайджеста.Пользователь
	|ИЗ
	|	ИзмененПланПроектаВнутреннееЗадание КАК ИзмененПланПроектаВнутреннееЗадание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Участники КАК Участники
	|		ПО (Участники.Роль В (ЗНАЧЕНИЕ(Справочник.РолиУчастников.Наблюдатель), ЗНАЧЕНИЕ(Справочник.РолиУчастников.УчастникКомандыУправленияПроектом)))
	|			И (ИзмененПланПроектаВнутреннееЗадание.Объект = (ВЫРАЗИТЬ(Участники.Объект КАК Документ.ВнутреннееЗадание)))
	|			И (Участники.ПолучатьОповещения)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиОтправкиДайджеста КАК НастройкиОтправкиДайджеста
	|		ПО (НастройкиОтправкиДайджеста.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекПользователя.ОтправкаДайджестаНаблюдатель))
	|			И (НастройкиОтправкиДайджеста.Значение = ИСТИНА)
	|			И ((ВЫРАЗИТЬ(Участники.Пользователь КАК Справочник.Пользователи)) = НастройкиОтправкиДайджеста.Пользователь)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИзмененПланПроектаВнутреннееЗадание.Объект,
	|	Участники.Пользователь
	|ИЗ
	|	ИзмененПланПроектаВнутреннееЗадание КАК ИзмененПланПроектаВнутреннееЗадание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Участники КАК Участники
	|		ПО (Участники.Роль = ЗНАЧЕНИЕ(Справочник.РолиУчастников.Подписчик))
	|			И (ИзмененПланПроектаВнутреннееЗадание.Объект = (ВЫРАЗИТЬ(Участники.Объект КАК Документ.ВнутреннееЗадание)))
	|			И (Участники.ПолучатьОповещения)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИзмененПланПроектаВнутреннееЗадание.Объект,
	|	НастройкиОтправкиДайджеста.Пользователь
	|ИЗ
	|	ИзмененПланПроектаВнутреннееЗадание КАК ИзмененПланПроектаВнутреннееЗадание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаинтересованныеЛица КАК ЗаинтересованныеЛица
	|		ПО (ИзмененПланПроектаВнутреннееЗадание.Объект = (ВЫРАЗИТЬ(ЗаинтересованныеЛица.Объект КАК Документ.ВнутреннееЗадание)))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиОтправкиДайджеста КАК НастройкиОтправкиДайджеста
	|		ПО (ЗаинтересованныеЛица.Пользователь = НастройкиОтправкиДайджеста.Пользователь)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыПроектов.Объект КАК Объект,
	|	ПланыПроектов.КлючСобытия КАК КлючСобытия,
	|	ПланыПроектов.ВладелецСобытия КАК ВладелецСобытия,
	|	ВЫРАЗИТЬ(ПланыПроектов.НазваниеСобытия КАК СТРОКА(500)) КАК НазваниеСобытия,
	|	ПланыПроектов.ДатаНачала_План КАК ДатаНачала_План,
	|	ПланыПроектов.ДатаОкончания_План КАК ДатаОкончания_План,
	|	ПланыПроектов.ДатаНачала_Факт КАК ДатаНачала_Факт,
	|	ПланыПроектов.ДатаОкончания_Факт КАК ДатаОкончания_Факт,
	|	ПланыПроектов.Статус КАК Статус,
	|	ПланыПроектов.ПроцентВыполнения КАК ПроцентВыполнения,
	|	ВЫРАЗИТЬ(ПланыПроектов.Комментарий КАК СТРОКА(500)) КАК Комментарий,
	|	ПланыПроектов.Порядок КАК Порядок
	|ИЗ
	|	КомуЧтоОтправлять КАК КомуЧтоОтправлять
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИзмененПланПроектаПроект КАК ИзмененПланПроектаПроект
	|		ПО КомуЧтоОтправлять.Объект = ИзмененПланПроектаПроект.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланыВыполненияПроектов КАК ПланыПроектов
	|		ПО (ИзмененПланПроектаПроект.Объект = (ВЫРАЗИТЬ(ПланыПроектов.Объект КАК Справочник.Проекты)))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПланыПроектов.Объект,
	|	ПланыПроектов.КлючСобытия,
	|	ПланыПроектов.ВладелецСобытия,
	|	ВЫРАЗИТЬ(ПланыПроектов.НазваниеСобытия КАК СТРОКА(500)),
	|	ПланыПроектов.ДатаНачала_План,
	|	ПланыПроектов.ДатаОкончания_План,
	|	ПланыПроектов.ДатаНачала_Факт,
	|	ПланыПроектов.ДатаОкончания_Факт,
	|	ПланыПроектов.Статус,
	|	ПланыПроектов.ПроцентВыполнения,
	|	ВЫРАЗИТЬ(ПланыПроектов.Комментарий КАК СТРОКА(500)),
	|	ПланыПроектов.Порядок
	|ИЗ
	|	КомуЧтоОтправлять КАК КомуЧтоОтправлять
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИзмененПланПроектаВнутреннееЗадание КАК ИзмененПланПроектаВнутреннееЗадание
	|		ПО КомуЧтоОтправлять.Объект = ИзмененПланПроектаВнутреннееЗадание.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланыВыполненияПроектов КАК ПланыПроектов
	|		ПО (ИзмененПланПроектаВнутреннееЗадание.Объект = (ВЫРАЗИТЬ(ПланыПроектов.Объект КАК Документ.ВнутреннееЗадание)))
	|ИТОГИ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОпубликованныеЗадачи.Проект КАК Проект,
	|	ОпубликованныеЗадачи.ПроектПредставление КАК ПроектПредставление,
	|	ОпубликованныеЗадачи.ОбъектОснование КАК ОбъектОснование,
	|	ОпубликованныеЗадачи.Задача КАК Задача,
	|	ОпубликованныеЗадачи.ДатаПубликации КАК ДатаПубликации,
	|	ОпубликованныеЗадачи.Статус КАК Статус,
	|	ОпубликованныеЗадачи.Система КАК Система
	|ИЗ
	|	ОпубликованныеЗадачи КАК ОпубликованныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КомуЧтоОтправлять КАК КомуЧтоОтправлять
	|		ПО ОпубликованныеЗадачи.Проект = КомуЧтоОтправлять.Объект
	|ИТОГИ
	|	МАКСИМУМ(Статус)
	|ПО
	|	Проект,
	|	ОбъектОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КомуЧтоОтправлять.Объект КАК Объект,
	|	ПРЕДСТАВЛЕНИЕ(КомуЧтоОтправлять.Объект) КАК ПредставлениеОбъекта,
	|	ЕСТЬNULL(Пользователи.Почта, КомуЧтоОтправлять.Пользователь) КАК Почта,
	|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(СправочникПроекты.Статус, ДокументВнутреннееЗадание.Статус)) КАК Статус,
	|	ЕСТЬNULL(СправочникПроекты.Код, ДокументВнутреннееЗадание.Номер) КАК Номер,
	|	ЕСТЬNULL(СтатусыОбъектов.ИмяКартинкиВБиблиотеке, """") КАК ИмяКартинкиВБиблиотеке,
	|	ЕСТЬNULL(ДокументВнутреннееЗадание.Наименование, СправочникПроекты.Наименование) КАК Наименование
	|ИЗ
	|	КомуЧтоОтправлять КАК КомуЧтоОтправлять
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО КомуЧтоОтправлять.Пользователь = Пользователи.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК СправочникПроекты
	|		ПО ((ВЫРАЗИТЬ(КомуЧтоОтправлять.Объект КАК Справочник.Проекты)) = СправочникПроекты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннееЗадание КАК ДокументВнутреннееЗадание
	|		ПО ((ВЫРАЗИТЬ(КомуЧтоОтправлять.Объект КАК Документ.ВнутреннееЗадание)) = ДокументВнутреннееЗадание.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (СтатусыОбъектов.Ссылка = ЕСТЬNULL(СправочникПроекты.Статус, ДокументВнутреннееЗадание.Статус))";	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("НеделяНазад", ОтбираемыйПериод.ДатаНачала);
	Запрос.УстановитьПараметр("ТекущаяДата", ОтбираемыйПериод.ДатаОкончания);
	
	Пакеты = Запрос.ВыполнитьПакет();
	КоличествоПакетов = Пакеты.ВГраница();
	
	ПланыПроектов = Пакеты.Получить(КоличествоПакетов - 2).Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ОпубликованныеЗадачи = Пакеты.Получить(КоличествоПакетов - 1).Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ПользователиПоОбъектам = Пакеты.Получить(КоличествоПакетов).Выгрузить();
	
	// Если нет пользователей для уведомления, то завершаем задание
	Если ПользователиПоОбъектам.Количество() = 0 Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , ,
			"Завершение регламентного задания по причине: отсутствуют пользователи для уведомления.");
		Возврат;
	КонецЕсли;
	
	// После получения данных требуется сперва подготовить данные для отправки, а затем приступить к отправке
	
	// Ключ - ссылка на проект, Значение - табличный документ дайджеста
	ДокументыПроектов = Новый Соответствие;
	
	Макет = ПолучитьОбщийМакет("ДайджестИзмененийПоПроектам");
	
	// Представления объектов
	ПредставленияОбъектов = Новый Соответствие;
	ТаблицаПредставлений = ПользователиПоОбъектам.Скопировать(, "Объект, ПредставлениеОбъекта, Статус, Номер, ИмяКартинкиВБиблиотеке, Наименование");
	ТаблицаПредставлений.Свернуть("Объект, ПредставлениеОбъекта, Статус, Номер, ИмяКартинкиВБиблиотеке, Наименование");
	
	Для Каждого СтрокаТаблицы Из ТаблицаПредставлений Цикл
		ПредставленияОбъектов.Вставить(СтрокаТаблицы.Объект, РаботаСФайламиКлиентСервер.УдалитьЗапрещенныеСимволыИмени(СтрокаТаблицы.ПредставлениеОбъекта));
		Документ = СоздатьДокументСШапкой(СтрокаТаблицы, Макет);
		ДокументыПроектов.Вставить(СтрокаТаблицы.Объект, Документ);
	КонецЦикла;
	
	// 1. Опубликованные задачи
	Для Каждого СтрокаПроекта Из ОпубликованныеЗадачи.Строки Цикл
		НайденныйДокумент = ДокументыПроектов.Получить(СтрокаПроекта.Проект);
		Если НайденныйДокумент = Неопределено Тогда
			НайденныйДокумент = Новый ТабличныйДокумент;
		КонецЕсли;
		
		ОбработатьОпубликованныеЗадачи(НайденныйДокумент, СтрокаПроекта, Макет, ОтбираемыйПериод);
		ДокументыПроектов.Вставить(СтрокаПроекта.Проект, НайденныйДокумент);
	КонецЦикла;
		
	// 2. Планы проектов
	Для Каждого СтрокаПроекта Из ПланыПроектов.Строки Цикл
		НайденныйДокумент = ДокументыПроектов.Получить(СтрокаПроекта.Объект);
		Если НайденныйДокумент = Неопределено Тогда
			НайденныйДокумент = Новый ТабличныйДокумент;
		КонецЕсли;
		
		ОбработатьПланыПроектов(НайденныйДокумент, СтрокаПроекта, Макет, ОтбираемыйПериод);
		ДокументыПроектов.Вставить(СтрокаПроекта.Объект, НайденныйДокумент);
	КонецЦикла;
	
	РегистрРассылок = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем;
	
	// 3. Запись
	ДиректорияФайлов = РегистрРассылок.ВыделитьДиректориюДляФайловРассылки();

	Для Каждого ЭлементСоответствия Из ДокументыПроектов Цикл
		ИмяВременногоФайла = ДиректорияФайлов + ПредставленияОбъектов.Получить(ЭлементСоответствия.Ключ) + "_"
			+ СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "") + ".xlsx";
		ЭлементСоответствия.Значение.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLSX);
		
		// Замена табличного документа на имя временного файла
		ДокументыПроектов[ЭлементСоответствия.Ключ] = ИмяВременногоФайла;
	КонецЦикла;
	
	// 4. Отправка сообщений
	ПочтовыеДанные = Справочники.УчетныеЗаписиЭлектроннойПочты.СвойстваСлужебногоЯщикаДляОтправкиПисем();
	
	Если ПочтовыеДанные.ПрофильЗаполнен Тогда
		Почта = Новый ИнтернетПочта;
		
		Подключено = Истина;
		Попытка
			Почта.Подключиться(ПочтовыеДанные.ПочтовыйПрофиль);
		Исключение
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,
				СтрШаблон("Не удалось подключиться к SMTP-серверу по причине: %1", ОписаниеОшибки()));
			
			Подключено = Ложь;
		КонецПопытки;
		
		Если Подключено Тогда
			ОтборОбъект = Новый Структура("Объект");
			
			ШаблоныПисьма = РегистрРассылок.ШаблоныЭлектронногоПисьма(ДиректорияФайлов);
			
			СтруктураПисьма = ШаблоныПисьма.СтруктураЭлектронногоПисьма;
			
			ФайлыКартинок = Новый Соответствие;
			
			Для Каждого ЭлементСоответствия Из ДокументыПроектов Цикл
				
				ЧастиСообщения = Новый Массив;
				
				Объект = ЭлементСоответствия.Ключ;
				ПредставлениеОбъекта = ПредставленияОбъектов.Получить(Объект);
				
				// Создаем почтовое сообщение
				Сообщение = Новый ИнтернетПочтовоеСообщение;
				Сообщение.ИмяОтправителя = ПочтовыеДанные.Отправитель.Имя;
				Сообщение.Отправитель = ПочтовыеДанные.Отправитель.Адрес;
				Сообщение.Тема = "Еженедельный дайджест. " + ПредставлениеОбъекта;
				
				// Формирование списка получателей
				ОтборОбъект.Объект = Объект;
				НайденныеСтроки = ПользователиПоОбъектам.НайтиСтроки(ОтборОбъект);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Сообщение.Получатели.Добавить(НайденнаяСтрока.Почта);
				КонецЦикла;
				
				// Добавление файла вложения
				Сообщение.Вложения.Добавить(Новый ДвоичныеДанные(ЭлементСоответствия.Значение), ПредставлениеОбъекта + ".xlsx");
				
				// Добавление текста сообщения
				ТипОбъекта = ?(ТипЗнч(Объект) = Тип("СправочникСсылка.Проекты"), "проекту", "внутреннему заданию");
				
				СтатусОбъекта = "";
				НайденнаяСтрока = ТаблицаПредставлений.Найти(Объект, "Объект");
				Если НайденнаяСтрока <> Неопределено Тогда
					СтатусОбъекта = НайденнаяСтрока.Статус;
				КонецЕсли;
				
				ШаблонПисьма = ШаблоныПисьма.БлокДвеТаблицы;
				
				ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- left_table_1 -->", "Задача:");
				
				СсылкаНаЗадачу = ОбщегоНазначения.ПолучитьШаблонНавигационнойСсылки(Объект);
				СсылкаНаЗадачу = СтрЗаменить(СсылкаНаЗадачу, "<!-- sdms_link_prefix -->",
					WebОкружениеВызовСервера.АдресПубликацииИнформационнойБазы());
				СсылкаНаЗадачу = СтрЗаменить(ШаблоныПисьма.АктивнаяСсылка, "<!-- link -->", СсылкаНаЗадачу);
				СсылкаНаЗадачу = СтрЗаменить(СсылкаНаЗадачу, "<!-- title_link -->", НайденнаяСтрока.Номер);
				ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- left_table_2 -->", СсылкаНаЗадачу + ".");
				
				Попытка
					ИмяФайлаКартинкаСтатуса = ФайлыКартинок.Получить(НайденнаяСтрока.ИмяКартинкиВБиблиотеке);
					
					Если ИмяФайлаКартинкаСтатуса = Неопределено Тогда
						ИмяФайлаКартинкаСтатуса = ДиректорияФайлов + РаботаСФайламиКлиентСервер.СоздатьУникальноеИмяФайла(".png");
						
						БиблиотекаКартинок["Статус" + НайденнаяСтрока.ИмяКартинкиВБиблиотеке].Записать(ИмяФайлаКартинкаСтатуса);
						
						ФайлыКартинок.Вставить(НайденнаяСтрока.ИмяКартинкиВБиблиотеке, ИмяФайлаКартинкаСтатуса);
					КонецЕсли;
				Исключение
					ИмяФайлаКартинкаСтатуса = "";
				КонецПопытки;
				КартинкаСтатуса = СтрЗаменить(ШаблоныПисьма.ПолеКартинки, "<!-- src_image -->", ИмяФайлаКартинкаСтатуса);
				ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- right_table_1 -->", КартинкаСтатуса);
				
				ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- right_table_2 -->", СтатусОбъекта);
				
				ЧастиСообщения.Добавить(ШаблонПисьма);
				
				ШаблонПисьма = ШаблоныПисьма.БлокОсновногоТекста;
				ОсновнойТекст = СтрШаблон("Дайджест по %1: %2", ТипОбъекта, НайденнаяСтрока.Наименование);
				
				ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- content -->", ОсновнойТекст);
				ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- font_size -->", "16px");
				
				ЧастиСообщения.Добавить(ШаблонПисьма);
				
				ЧастиСообщения.Добавить(ШаблоныПисьма.РазделительнаяЛиния);
				
				ЧастиСообщения.Добавить(ШаблоныПисьма.ПодвалПисьма);
				
				ТекстСообщения = СтрЗаменить(СтруктураПисьма, "<!-- content -->", СтрСоединить(ЧастиСообщения, Символы.ПС));
				Сообщение.Тексты.Добавить(ТекстСообщения, ТипТекстаПочтовогоСообщения.HTML);
				Сообщение.ОбработатьТексты();
				
				// Отправка сообщения
				Попытка
					Почта.Послать(Сообщение);
				Исключение
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,
						СтрШаблон("Не удалось отправить письмо пользователю по  причине: %1.", ОписаниеОшибки()));
				КонецПопытки;
				
				Сообщение.Вложения.Очистить();
				
			КонецЦикла;
			
			Почта.Отключиться();
		КонецЕсли;
	Иначе
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,
			"Не удалось выбрать профиль для отправки сообщения.");
	КонецЕсли;
	
	// 5. Удаление временных файлов
	РегистрРассылок.ОчиститьВыделеннуюДиректориюФайловПисьма(ДиректорияФайлов, ИмяСобытия);
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , ,
		"Завершение регламентного задания.");
	
КонецПроцедуры

Процедура ОбработатьОпубликованныеЗадачи(Документ, Знач СтрокаПроекта, Знач Макет, Знач Период)
	
	// Получение областей для вывода опубликованных задач
	ОбластьЗаголовок = Макет.ПолучитьОбласть("ОпубликованныеЗадачиЗаголовок");
	ОбластьСтрокаПроекта = Макет.ПолучитьОбласть("ОпубликованныеЗадачиПроект");
	ОбластьСтрокаЗаявки = Макет.ПолучитьОбласть("ОпубликованныеЗадачиСтрокаЗаявки");
	ОбластьСтрокаЗадачи = Макет.ПолучитьОбласть("ОпубликованныеЗадачиСтрокаЗадачи");
	ОбластьЗаявкиВТестировании = Макет.ПолучитьОбласть("ОпубликованныеЗадачиЗаявокВТестировании");
	ОбластьРазделитель = Макет.ПолучитьОбласть("Разделитель");
	
	// Заполнение и вывод шапки
	ОбластьЗаголовок.Параметры.ДатаНачала = Формат(Период.ДатаНачала, "ДФ=dd.MM.yyyy");
	ОбластьЗаголовок.Параметры.ДатаОкончания = Формат(Период.ДатаОкончания, "ДФ=dd.MM.yyyy");
	Документ.Вывести(ОбластьЗаголовок);
	
	// Заполнение и вывод строки проекта
	ОбластьСтрокаПроекта.Параметры.ПредставлениеПроекта = СтрокаПроекта.ПроектПредставление;
	Документ.Вывести(ОбластьСтрокаПроекта);
	
	ВТестировании = 0;
	
	// Перебор заявок
	Для Каждого СтрокаЗаявки Из СтрокаПроекта.Строки Цикл
		ОбластьСтрокаЗаявки.Параметры.ПредставлениеЗаявки = СтрокаЗаявки.ОбъектОснование;
		ОбластьСтрокаЗаявки.Параметры.СтатусЗаявки = СтрокаЗаявки.Статус;
		
		Если СтрокаЗаявки.Статус = "Тестирование" Тогда
			ВТестировании = ВТестировании + 1;
		КонецЕсли;
		
		Документ.Вывести(ОбластьСтрокаЗаявки);
		
		Для Каждого СтрокаЗадачи Из СтрокаЗаявки.Строки Цикл
			ОбластьСтрокаЗадачи.Параметры.ПредставлениеЗадачи = СтрокаЗадачи.Задача;
			ОбластьСтрокаЗадачи.Параметры.ДатаПубликацииЗадачи = "Опубликована " + Формат(СтрокаЗадачи.ДатаПубликации, "ДФ='dd.MM.yyyy ЧЧ:мм'");
			ОбластьСтрокаЗадачи.Параметры.СистемаПубликации = СтрокаЗадачи.Система;
			Документ.Вывести(ОбластьСтрокаЗадачи);
		КонецЦикла;
	КонецЦикла;
	
	Документ.Вывести(ОбластьРазделитель);
	ОбластьЗаявкиВТестировании.Параметры.КоличествоВТестировании = ВТестировании;
	ОбластьЗаявкиВТестировании.Параметры.ВсегоЗаявок = СтрокаПроекта.Строки.Количество();
	Документ.Вывести(ОбластьЗаявкиВТестировании);
	Документ.Вывести(Областьразделитель);
	
КонецПроцедуры

Процедура ОбработатьПланыПроектов(Документ, Знач СтрокаПроекта, Знач Макет, Знач ДатаОкончания)
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("ПланПроектаЗаголовок");
	НовыйМакет = Отчеты.ПроектыПоСпециалисту.ПолучитьМакет("МакетПланПроекта");
	ОбластьШапка = Макет.ПолучитьОбласть("ПланПроектаШапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("ПланПроектаСтрока");
	
	СтрокиДерева = СтрокаПроекта.Строки;
	СтрокиДерева.Сортировать("Порядок");
	
	ОбластьЗаголовок.Параметры.ДатаОкончания = ДатаОкончания;
	Документ.Вывести(ОбластьЗаголовок);
	Документ.Вывести(ОбластьШапка);
	
	СтрокиВерхнегоУровня = СтрокиДерева.НайтиСтроки(Новый Структура("ВладелецСобытия", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")));
	
	Для Каждого СтрокаВерхнегоУровня Из СтрокиВерхнегоУровня Цикл
		ВывестиПодчиненныеЭлементы(Документ, СтрокаВерхнегоУровня, СтрокиДерева, ОбластьСтрока);
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьДокументСШапкой(Знач СтрокаТаблицы, Знач Макет)
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьРазделитель = Макет.ПолучитьОбласть("Разделитель");
	
	Документ = Новый ТабличныйДокумент;
	
	ТипОбъекта = ?(ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.Проекты"), "проекту", "внутреннему заданию");
	
	ОбластьШапка.Параметры.ТипОбъекта = ТипОбъекта;
	ОбластьШапка.Параметры.ПредставлениеОбъекта = СтрокаТаблицы.ПредставлениеОбъекта;
	ОбластьШапка.Параметры.Статус = СтрокаТаблицы.Статус;
	
	Документ.Вывести(ОбластьШапка);
	Документ.Вывести(ОбластьРазделитель);
	
	Возврат Документ;
	
КонецФункции

Процедура ВывестиПодчиненныеЭлементы(Документ, Знач СтрокаВерхнегоУровня, СтрокиДерева, Знач ОбластьСтрокаПустая, Знач НомерРодителя = "")
	
	ОбластьСтрока = ОбластьСтрокаПустая.ПолучитьОбласть();
	
	ОбластьСтрока.Параметры.Номер = ?(ЗначениеЗаполнено(НомерРодителя), Строка(НомерРодителя) + ".", "") + СтрокаВерхнегоУровня.Порядок;
	ОбластьСтрока.Параметры.Наименование = СтрокаВерхнегоУровня.НазваниеСобытия;
	ОбластьСтрока.Параметры.ПлановоеНачало = СтрокаВерхнегоУровня.ДатаНачала_План;
	ОбластьСтрока.Параметры.ПлановоеОкончание = СтрокаВерхнегоУровня.ДатаОкончания_План;
	ОбластьСтрока.Параметры.ФактическоеНачало = СтрокаВерхнегоУровня.ДатаНачала_Факт;
	ОбластьСтрока.Параметры.ФактическоеОкончание = СтрокаВерхнегоУровня.ДатаОкончания_Факт;
	ОбластьСтрока.Параметры.Статус = СтрокаВерхнегоУровня.Статус;
	ОбластьСтрока.Параметры.ПроцентВыполнения = СтрокаВерхнегоУровня.ПроцентВыполнения;
	ОбластьСтрока.Параметры.Комментарий = СтрокаВерхнегоУровня.Комментарий;
	
	Если СтрокаВерхнегоУровня.Статус = Справочники.СтатусыОбъектов.Решен
		ИЛИ СтрокаВерхнегоУровня.Статус = Справочники.СтатусыОбъектов.Тестирование
		ИЛИ СтрокаВерхнегоУровня.Статус = Справочники.СтатусыОбъектов.Масштабирование Тогда
		
		ЦветФонаСтатуса = WebЦвета.НейтральноЗеленый;
		
	ИначеЕсли СтрокаВерхнегоУровня.Статус = Справочники.СтатусыОбъектов.Отклонен
		ИЛИ СтрокаВерхнегоУровня.Статус = Справочники.СтатусыОбъектов.Приостановлен Тогда
		
		ЦветФонаСтатуса = Новый Цвет(255, 192, 203);
		
	ИначеЕсли СтрокаВерхнегоУровня.Статус = Справочники.СтатусыОбъектов.Новый Тогда
		ЦветФонаСтатуса = Новый Цвет(229, 237, 249);
		
	Иначе
		ЦветФонаСтатуса = WebЦвета.Лимонный;
	КонецЕсли;
	
	ОбластьСтрока.Область(1, 8).ЦветФона = ЦветФонаСтатуса;
	
	Документ.Вывести(ОбластьСтрока);
	
	ПодчиненныеСтроки = СтрокиДерева.НайтиСтроки(Новый Структура("ВладелецСобытия", СтрокаВерхнегоУровня.КлючСобытия));
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		ВывестиПодчиненныеЭлементы(Документ, ПодчиненнаяСтрока, СтрокиДерева, ОбластьСтрокаПустая, ОбластьСтрока.Параметры.Номер);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РЕГЛАМЕНТНЫЕ ЗАДАНИЯ

Процедура АвтоматическоеЗакрытиеЗадач() Экспорт
	
	ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.АвтоматическоеЗакрытиеЗадач);
	
	Обработки.АвтоматическоеЗакрытиеЗадач.ВыполнитьАвтоматическоеЗакрытиеЗадач();
	
КонецПроцедуры

Процедура АктуализацияСроковОкончанийПроектов() Экспорт
	
	ПриНачалеВыполненияРегламентногоЗадания();
	
	ИмяСобытия = "Регламентные и фоновые задания. Актуализация сроков окончаний проектов";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , ,
		"Запуск процедуры ""Актуализация сроков окончаний проектов"".");
	
	Запрос = Новый Запрос;

#Область ТекстЗапроса

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланыВыполненияПроектов.Объект КАК Объект,
	|	МИНИМУМ(ПланыВыполненияПроектов.ДатаНачала_План) КАК ДатаНачала_План,
	|	МАКСИМУМ(ПланыВыполненияПроектов.ДатаОкончания_План) КАК ДатаОкончания_План,
	|	Проекты.ДатаПлановоеОкончание КАК ОбъектДатаПлановоеОкончание,
	|	Проекты.ДатаНачалаРазработки КАК ОбъектДатаНачалаРазработки,
	|	Проекты.Код КАК Номер
	|ИЗ
	|	РегистрСведений.ПланыВыполненияПроектов КАК ПланыВыполненияПроектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
	|		ПО ПланыВыполненияПроектов.Объект = Проекты.Ссылка
	|			И (ПланыВыполненияПроектов.Объект ССЫЛКА Справочник.Проекты)
	|			И (ПланыВыполненияПроектов.ДатаНачала_План <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|			И (ПланыВыполненияПроектов.ДатаОкончания_План <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|			И (Проекты.ДатаНачалаРазработки <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (Проекты.Статус = СтатусыОбъектов.Ссылка)
	|			И (СтатусыОбъектов.Порядок > 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланыВыполненияПроектов.Объект,
	|	Проекты.Статус,
	|	Проекты.ДатаПлановоеОкончание,
	|	СтатусыОбъектов.Порядок,
	|	Проекты.ДатаНачалаРазработки,
	|	Проекты.Код
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланыВыполненияПроектов.Объект,
	|	МИНИМУМ(ПланыВыполненияПроектов.ДатаНачала_План),
	|	МАКСИМУМ(ПланыВыполненияПроектов.ДатаОкончания_План),
	|	ВнутреннееЗадание.ИсполнитьДо,
	|	ВнутреннееЗадание.ДатаНачалаРазработки,
	|	ВнутреннееЗадание.Номер
	|ИЗ
	|	РегистрСведений.ПланыВыполненияПроектов КАК ПланыВыполненияПроектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
	|		ПО ПланыВыполненияПроектов.Объект = ВнутреннееЗадание.Ссылка
	|			И (ПланыВыполненияПроектов.Объект ССЫЛКА Документ.ВнутреннееЗадание)
	|			И (ПланыВыполненияПроектов.ДатаНачала_План <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|			И (ПланыВыполненияПроектов.ДатаОкончания_План <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|			И (ВнутреннееЗадание.ДатаНачалаРазработки <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (ВнутреннееЗадание.Статус = СтатусыОбъектов.Ссылка)
	|			И (СтатусыОбъектов.Порядок > 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланыВыполненияПроектов.Объект,
	|	ВнутреннееЗадание.Статус,
	|	ВнутреннееЗадание.ИсполнитьДо,
	|	СтатусыОбъектов.Порядок,
	|	ВнутреннееЗадание.ДатаНачалаРазработки,
	|	ВнутреннееЗадание.Номер";
	
#КонецОбласти
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Обработано = 0;
	НеОбработано = 0;
	Ошибки = Новый Массив;
	ШаблонОшибки =
	"Не удалось обработать объект с номером %1 по причине:
	|%2";
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Дельта = Выборка.ДатаОкончания_План - Выборка.ДатаНачала_План;
			РассчитаннаяПлановаяДата = Выборка.ОбъектДатаНачалаРазработки + Дельта;
			Если НачалоДня(Выборка.ОбъектДатаПлановоеОкончание) <> НачалоДня(РассчитаннаяПлановаяДата) Тогда
				ДокументОбъект = Выборка.Объект.ПолучитьОбъект();
				
				Если ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.Проекты") Тогда
					ИмяРеквизита = "ДатаПлановоеОкончание";
				Иначе
					ИмяРеквизита = "ИсполнитьДо";
				КонецЕсли;
				
				ДокументОбъект[ИмяРеквизита] = РассчитаннаяПлановаяДата;
				Попытка
					ДокументОбъект.Записать();
					Обработано = Обработано + 1;
				Исключение
					НеОбработано = НеОбработано + 1;
					ОписаниеОшибки = СтрШаблон(Выборка.Номер, ОписаниеОшибки());
					Ошибки.Добавить(ОписаниеОшибки);
				КонецПопытки;
			КонецЕсли;
			
			Если НеОбработано > 5 Тогда
				МассоваяОшибкаОбработки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Обработано = 0 И НеОбработано = 0 Тогда
		ТекстСообщения = "Завершение процедуры ""Актуализация сроков окончаний проектов"": Отсутствуют объекты для обработки.";
		Уровень = УровеньЖурналаРегистрации.Информация;
		
	ИначеЕсли Обработано > 0 И НеОбработано = 0 Тогда
		Шаблон = "Успешное завершение процедуры ""Актуализация сроков окончаний проектов"": Обработано объектов: %1";
		ТекстСообщения = СтрШаблон(Шаблон, Обработано);
		Уровень = УровеньЖурналаРегистрации.Информация;
		
	ИначеЕсли МассоваяОшибкаОбработки = Истина Тогда
		Шаблон =
		"Процедура ""Актуализация сроков окончаний проектов"" завершена с ошибками: Обработано объектов: %1, не обработано %2
		|%3";
		
		ПредставлениеОшибок = СтрСоединить(Ошибки, Символы.ПС);
		ТекстСообщения = СтрШаблон(Шаблон, Обработано, НеОбработано, ПредставлениеОшибок);
		Уровень = УровеньЖурналаРегистрации.Ошибка;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень, , , ТекстСообщения);
	
КонецПроцедуры

Процедура ЗаписьОповещенийОПубликацияхВБуферСообщений() Экспорт
	
	ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗаписьОповещенийОПубликацияхВБуферСообщений);
	
	ИмяСобытия = "Регламентные и фоновые задания. Сохранение оповещений о публикациях";
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ИсторияПубликацииЗадач.Период КАК Период,
	|	ИсторияПубликацииЗадач.Задача КАК Задача,
	|	ДокументЗадача.ОбъектОснование КАК ОбъектОснование,
	|	ДокументЗадача.Направление КАК НаправлениеРазработки,
	|	ДокументЗадача.СистемаУчета КАК СистемаУчета,
	|	ВЫБОР
	|		КОГДА ДокументЗадача.Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|			ТОГДА ДокументЗадача.Направление
	|		ИНАЧЕ ДокументЗадача.Проект
	|	КОНЕЦ КАК Проект,
	|	ДокументЗадача.Статус КАК СтатусЗадачи,
	|	ЗаявкаНаРазработкуСистемыРазработки.ГруппаЗаказчиков КАК ГруппаЗаказчиков,
	|	ДокументЗадача.Номер КАК Номер,
	|	""Статус"" + СтатусыОбъектов.ИмяКартинкиВБиблиотеке КАК ИмяКартинкиВБиблиотеке,
	|	ДокументЗадача.Наименование КАК Наименование
	|ПОМЕСТИТЬ СписокЗадачДляОтправки
	|ИЗ
	|	РегистрСведений.ИсторияПубликацииЗадач КАК ИсторияПубликацииЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО ИсторияПубликацииЗадач.Задача = ДокументЗадача.Ссылка
	|			И (ДокументЗадача.ОбъектОснование <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаРазработку.ПустаяСсылка))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (ДокументЗадача.Статус = СтатусыОбъектов.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ЗаявкаНаРазработкуСистемыРазработки
	|		ПО (ДокументЗадача.ОбъектОснование = ЗаявкаНаРазработкуСистемыРазработки.Ссылка)
	|			И (ДокументЗадача.СистемаУчета = ЗаявкаНаРазработкуСистемыРазработки.Система)
	|ГДЕ
	|	НЕ ИсторияПубликацииЗадач.УведомленияОтправлены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиУведомленийПользователей.Пользователь КАК Пользователь,
	|	СписокЗадачДляОтправки.Период КАК Период,
	|	СписокЗадачДляОтправки.Задача КАК Задача,
	|	СписокЗадачДляОтправки.Проект КАК Проект,
	|	СписокЗадачДляОтправки.СтатусЗадачи КАК СтатусЗадачи,
	|	СписокЗадачДляОтправки.ИмяКартинкиВБиблиотеке КАК ИмяКартинкиВБиблиотеке,
	|	СписокЗадачДляОтправки.Номер КАК Номер,
	|	СписокЗадачДляОтправки.Наименование КАК Наименование
	|ПОМЕСТИТЬ СписокПользователь_Задача
	|ИЗ
	|	СписокЗадачДляОтправки КАК СписокЗадачДляОтправки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУведомленийПользователей КАК НастройкиУведомленийПользователей
	|		ПО (НастройкиУведомленийПользователей.ВидУведомления = &ВидУведомления)
	|			И СписокЗадачДляОтправки.НаправлениеРазработки = НастройкиУведомленийПользователей.Направление
	|			И СписокЗадачДляОтправки.СистемаУчета = НастройкиУведомленийПользователей.Система
	|			И СписокЗадачДляОтправки.ГруппаЗаказчиков = НастройкиУведомленийПользователей.ГруппаЗаказчиков
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкаНаРазработку.Автор,
	|	СписокЗадачДляОтправки.Период,
	|	СписокЗадачДляОтправки.Задача,
	|	СписокЗадачДляОтправки.Проект,
	|	СписокЗадачДляОтправки.СтатусЗадачи,
	|	СписокЗадачДляОтправки.ИмяКартинкиВБиблиотеке,
	|	СписокЗадачДляОтправки.Номер,
	|	СписокЗадачДляОтправки.Наименование
	|ИЗ
	|	СписокЗадачДляОтправки КАК СписокЗадачДляОтправки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО СписокЗадачДляОтправки.ОбъектОснование = ЗаявкаНаРазработку.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Участники.Пользователь,
	|	СписокЗадачДляОтправки.Период,
	|	СписокЗадачДляОтправки.Задача,
	|	СписокЗадачДляОтправки.Проект,
	|	СписокЗадачДляОтправки.СтатусЗадачи,
	|	СписокЗадачДляОтправки.ИмяКартинкиВБиблиотеке,
	|	СписокЗадачДляОтправки.Номер,
	|	СписокЗадачДляОтправки.Наименование
	|ИЗ
	|	СписокЗадачДляОтправки КАК СписокЗадачДляОтправки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Участники КАК Участники
	|		ПО (Участники.Роль В (ЗНАЧЕНИЕ(Справочник.РолиУчастников.Наблюдатель), ЗНАЧЕНИЕ(Справочник.РолиУчастников.Подписчик), ЗНАЧЕНИЕ(Справочник.РолиУчастников.УчастникКомандыУправленияПроектом)))
	|			И (СписокЗадачДляОтправки.Проект = (ВЫРАЗИТЬ(Участники.Объект КАК Справочник.Проекты)))
	|			И (Участники.ПолучатьОповещения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокПользователь_Задача.Пользователь КАК Пользователь,
	|	ТИПЗНАЧЕНИЯ(СписокПользователь_Задача.Проект) = ТИП(Справочник.Проекты) КАК ПоПроектам,
	|	СписокПользователь_Задача.Проект КАК Проект_Направление,
	|	МИНИМУМ(СписокПользователь_Задача.Период) КАК Период,
	|	СписокПользователь_Задача.Задача КАК Задача,
	|	СписокПользователь_Задача.СтатусЗадачи КАК Статус,
	|	ВЫБОР
	|		КОГДА СписокПользователь_Задача.Пользователь ССЫЛКА Справочник.Пользователи
	|			ТОГДА Пользователи.Почта
	|		ИНАЧЕ Подписчики.Наименование
	|	КОНЕЦ КАК Почта,
	|	ПРЕДСТАВЛЕНИЕ(СписокПользователь_Задача.Проект) КАК НаименованиеПроект_Направление,
	|	СписокПользователь_Задача.ИмяКартинкиВБиблиотеке КАК ИмяКартинкиВБиблиотеке,
	|	СписокПользователь_Задача.Номер КАК Номер,
	|	СписокПользователь_Задача.Наименование КАК Наименование
	|ИЗ
	|	СписокПользователь_Задача КАК СписокПользователь_Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО СписокПользователь_Задача.Пользователь = Пользователи.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Подписчики КАК Подписчики
	|		ПО СписокПользователь_Задача.Пользователь = Подписчики.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокПользователь_Задача.Пользователь,
	|	СписокПользователь_Задача.Проект,
	|	СписокПользователь_Задача.Задача,
	|	СписокПользователь_Задача.СтатусЗадачи,
	|	ВЫБОР
	|		КОГДА СписокПользователь_Задача.Пользователь ССЫЛКА Справочник.Пользователи
	|			ТОГДА Пользователи.Почта
	|		ИНАЧЕ Подписчики.Наименование
	|	КОНЕЦ,
	|	СписокПользователь_Задача.ИмяКартинкиВБиблиотеке,
	|	СписокПользователь_Задача.Номер,
	|	СписокПользователь_Задача.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователь,
	|	ПоПроектам,
	|	Проект_Направление,
	|	Задача,
	|	Период
	|ИТОГИ
	|	МАКСИМУМ(Почта)
	|ПО
	|	Пользователь,
	|	ПоПроектам,
	|	Проект_Направление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокЗадачДляОтправки.Период КАК Период,
	|	СписокЗадачДляОтправки.Задача КАК Задача
	|ИЗ
	|	СписокЗадачДляОтправки КАК СписокЗадачДляОтправки";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ВидУведомления", Перечисления.ВидУведомления.ПубликацияЗадач);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаПользователь = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СписокИспользуемыхЗадач = РезультатЗапроса[3].Выбрать();
	
	ШаблоныПисьма = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма();
	
	Пока ВыборкаПользователь.Следующий() Цикл
		ВыборкаВидОповещения = ВыборкаПользователь.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидОповещения.Следующий() Цикл
			
			ЧастиСообщения = Новый Массив;
			
			ШаблонПисьма = СтрЗаменить(ШаблоныПисьма.БлокОсновногоТекста, "<!-- font_size -->", "18px");
			
			ТекстШаблона = "<b>Сегодня %1 были опубликованы следующие %2</b>";
			Если ВыборкаВидОповещения.ПоПроектам Тогда
				ТекстШаблона = СтрШаблон(ТекстШаблона, Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"), "изменения в проектах");
			Иначе
				ТекстШаблона = СтрШаблон(ТекстШаблона, Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"), "задачи");
			КонецЕсли;
			ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- content -->", ТекстШаблона);
			
			ЧастиСообщения.Добавить(ШаблонПисьма);
			
			ЧастиСообщения.Добавить(ШаблоныПисьма.РазделительнаяЛиния);
			
			ВыборкаНаправления = ВыборкаВидОповещения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаНаправления.Следующий() Цикл
				
				ШаблонПисьма = ШаблоныПисьма.ЦентральныйБлок;
				
				Если ВыборкаВидОповещения.ПоПроектам Тогда
					СсылкаНаПроект = ОбщегоНазначения.ПолучитьШаблонНавигационнойСсылки(ВыборкаВидОповещения.Проект_Направление);
					СсылкаНаПроект = СтрЗаменить(СсылкаНаПроект, "<!-- sdms_link_prefix -->",
						WebОкружениеВызовСервера.АдресПубликацииИнформационнойБазы());
					ТекстШаблона = СтрЗаменить(ШаблоныПисьма.АктивнаяСсылка, "<!-- link -->", СсылкаНаПроект);
					ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- title_link -->", СтрШаблон("<i>%1</i>", 
						ВыборкаВидОповещения.НаименованиеПроект_Направление));
				Иначе
					ТекстШаблона = СтрШаблон("<i>%1</i>", ВыборкаНаправления.НаименованиеПроект_Направление);
				КонецЕсли;
				ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- content -->", ТекстШаблона);
				ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- font_size -->", "16px");
				
				ЧастиСообщения.Добавить(ШаблонПисьма);
				
				ВыборкаЗадачи = ВыборкаНаправления.Выбрать();
				
				КоличествоЗадач = ВыборкаЗадачи.Количество();
				ЗадачВТестировании = 0;
				Пока ВыборкаЗадачи.Следующий() Цикл
					
					Если Строка(ВыборкаЗадачи.Статус) = "Тестирование" Тогда
						ЗадачВТестировании = ЗадачВТестировании + 1;
					КонецЕсли;
					
					ШаблонПисьма = ШаблоныПисьма.БлокОсновногоТекста;
					
					ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- content -->", СтрШаблон("<b>%1</b>", ВыборкаЗадачи.Наименование));
					ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- font_size -->", "18px");
					
					ЧастиСообщения.Добавить(ШаблонПисьма);
					
					ШаблонПисьма = ШаблоныПисьма.БлокДвеТаблицы;
					
					ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- left_table_1 -->", "Задача:");
					
					СсылкаНаЗадачу = ОбщегоНазначения.ПолучитьШаблонНавигационнойСсылки(ВыборкаЗадачи.Задача);
					СсылкаНаЗадачу = СтрЗаменить(СсылкаНаЗадачу, "<!-- sdms_link_prefix -->",
						WebОкружениеВызовСервера.АдресПубликацииИнформационнойБазы());
					СсылкаНаЗадачу = СтрЗаменить(ШаблоныПисьма.АктивнаяСсылка, "<!-- link -->", СсылкаНаЗадачу);
					СсылкаНаЗадачу = СтрЗаменить(СсылкаНаЗадачу, "<!-- title_link -->", ВыборкаЗадачи.Номер);
					ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- left_table_2 -->", СсылкаНаЗадачу + ".");
					
					ШаблонКартинкиСтатуса = СтрШаблон("<!-- img_name_%1 -->", ВыборкаЗадачи.ИмяКартинкиВБиблиотеке);
					КартинкаСтатуса = СтрЗаменить(ШаблоныПисьма.ПолеКартинки, "<!-- src_image -->", ШаблонКартинкиСтатуса);
					
					ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- right_table_1 -->", КартинкаСтатуса);
					
					ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- right_table_2 -->", ВыборкаЗадачи.Статус);
					
					ЧастиСообщения.Добавить(ШаблонПисьма);
					
					ЧастиСообщения.Добавить(ШаблоныПисьма.РазделительнаяЛиния);
					
				КонецЦикла;
				
				ШаблонПисьма = ШаблоныПисьма.БлокОсновногоТекста;
				
				ТекстШаблона = СтрШаблон("%1 задач из %2 в тестировании", ЗадачВТестировании, КоличествоЗадач);
				
				ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- content -->", ТекстШаблона);
				ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- font_size -->", "16px");
				
				ЧастиСообщения.Добавить(ШаблонПисьма);
				
			КонецЦикла;
			
			ЧастиСообщения.Добавить(ШаблоныПисьма.РазделительнаяЛиния);

			ЧастиСообщения.Добавить(ШаблоныПисьма.ПодвалПисьма);
			
			ШаблонПисьма = СтрСоединить(ЧастиСообщения, Символы.ПС);
			
			ТекстСообщения = СтрЗаменить(ШаблоныПисьма.СтруктураЭлектронногоПисьма, "<!-- content -->", ШаблонПисьма);
			
			Попытка
				РегистрыСведений.БуферСообщений.Добавить(Перечисления.СпособыОтправкиСообщений.ЭлектроннаяПочта, 
						ВыборкаПользователь.Почта, ТекстСообщения, "Оповещение о публикациях задач");
			Исключение
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,
					СтрШаблон("Ошибка записи письма в буфер сообщений по  причине: %1.", ОписаниеОшибки()));
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Пока СписокИспользуемыхЗадач.Следующий() Цикл
		РегистрыСведений.ИсторияПубликацииЗадач.УстановитьПризнакОтправкаУведомления(СписокИспользуемыхЗадач.Период,
			СписокИспользуемыхЗадач.Задача);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗавершениеНеактивныхСеансов() Экспорт
	
	ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗавершениеНеактивныхСеансов);
	
	АдминистрированиеИнформационнойБазы = Обработки.АдминистрированиеИнформационнойБазы.Создать();
	АдминистрированиеИнформационнойБазы.ЗавершитьНеактивныеСеансы();
	
КонецПроцедуры

Процедура ЗаполнениеСтатистикиСеансовПользователей() Экспорт
	
	ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗаполнениеСтатистикиСеансовПользователей);
	
	АдминистрированиеИнформационнойБазы = Обработки.АдминистрированиеИнформационнойБазы.Создать();
	АдминистрированиеИнформационнойБазы.ЗаполнитьСтатистикуСеансовПользователей();
		
КонецПроцедуры

Процедура ОчиститьРегистр(Знач ДатаОтсечки, Знач ИмяРегистра, Знач ИзмерениеПериод)
	
	ИмяСобытия = СтрШаблон("РегламентноеЗадание.ОчисткаРегистровСообщенийИСобытий.ОчиститьРегистр%1", ИмяРегистра);
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение,
		, , "Начало очистки регистра");
		
	ИзмеренияЗапроса = Новый Массив;
	Измерения = Метаданные.РегистрыСведений[ИмяРегистра].Измерения; 
	Периодичность = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений;
	
	Для Каждого Измерение Из Измерения Цикл
		ИзмеренияЗапроса.Добавить(СтрШаблон("ДанныеРегистра.%1", Измерение.Имя));
	КонецЦикла;
	
	Если Метаданные.РегистрыСведений[ИмяРегистра].ПериодичностьРегистраСведений <> Периодичность.Непериодический Тогда
		ИзмеренияЗапроса.Добавить(СтрШаблон("ДанныеРегистра.%1", "Период"));
	КонецЕсли;
	
	Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 25000
	|	%1
	|ИЗ
	|	РегистрСведений.%2 КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.%3 < &ДатаОтсечки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеРегистра.%3";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрШаблон(Текст, СтрСоединить(ИзмеренияЗапроса, ","), ИмяРегистра, ИзмерениеПериод);	
	Запрос.УстановитьПараметр("ДатаОтсечки", ДатаОтсечки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 
			
			Для Каждого Измерение Из Измерения Цикл
				НаборЗаписей.Отбор[Измерение.Имя].Установить(Выборка[Измерение.Имя]);
			КонецЦикла;
			
			НаборЗаписей.Записать();
		КонецЦикла;
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , ,
			"Удалено записей " + Выборка.Количество());
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение,
		, , "Завершение очистки регистра");
	
КонецПроцедуры

Процедура ОчиститьСлужебныйПочтовыйЯщик()
	
	ИмяСобытия = "Администрирование.Очистка служебного почтового ящика";
	
	ДанныеПочты = Справочники.УчетныеЗаписиЭлектроннойПочты.СвойстваСлужебногоЯщикаДляПолученияПисем();
	
	Если НЕ ДанныеПочты.ПрофильЗаполнен Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ,
			"В справочнике ""Учетные записи электронной почты"" не найдена учетная запись для получения электронной почты.");
		Возврат;
	КонецЕсли;
		
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , , 
		"Запуск процесса очистки почтового ящика " + ДанныеПочты.Отправитель.Адрес + ".");
		
	ИнтернетПочта = Новый ИнтернетПочта;
	
	Попытка
		// подключаемся к почтовому ящику и переходим в папку Удаленные
		ИнтернетПочта.Подключиться(ДанныеПочты.ПочтовыйПрофиль, ПротоколИнтернетПочты.IMAP);
		ИнтернетПочта.ТекущийПочтовыйЯщик = "Удаленные";
		
		КоличествоСообщений = ИнтернетПочта.ПолучитьКоличествоСообщений();
		
		Если КоличествоСообщений > 0 Тогда	
			МассивИдентификаторов = ИнтернетПочта.ПолучитьИдентификаторы(Новый Массив);
			
			// помечаем сообщения для удаления
			ИнтернетПочта.УдалитьСообщения(МассивИдентификаторов);
			
			// делаем паузу 10 сек, чтобы сообщения на сервере пометились на удаление
			ОбщегоНазначения.Пауза(10);
			
			// удаляем помеченные на удаление сообщения
			ИнтернетПочта.ОчиститьУдаленныеСообщения();	
		КонецЕсли;
		
		ИнтернетПочта.Отключиться();
		
		Если КоличествоСообщений = 0 Тогда
			ЧастьТекста = "Почтовый ящик пустой.";
		Иначе
			ЧастьТекста = "Удалено сообщений: " + Строка(КоличествоСообщений) + ".";
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, , , 
			"Завершение процесса очистки почтового ящика " + ДанныеПочты.Отправитель.Адрес 
			+ ". " + ЧастьТекста);
	Исключение
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , 
			"В процессе очистки почтового ящика " + ДанныеПочты.Отправитель.Адрес 
			+ " возникла ошибка: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьТекстыОбъектовДляСемантическогоАнализаБезСтопСлов(Знач ДатаОтсечки)
	
	ИмяСобытия = "РегламентноеЗадание.ОчисткаРегистровСообщенийИСобытий.УдалитьЗаписиТекстовОбъектовБезСтопСлов";
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение,
		, , "Начало очистки регистра");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 25000
	|	ТекстыОбъектовДляСемантическогоАнализа.Дата КАК Дата,
	|	ТекстыОбъектовДляСемантическогоАнализа.Объект КАК Объект,
	|	ТекстыОбъектовДляСемантическогоАнализа.ВидТекста КАК ВидТекста
	|ИЗ
	|	РегистрСведений.ТекстыОбъектовДляСемантическогоАнализа КАК ТекстыОбъектовДляСемантическогоАнализа
	|ГДЕ
	|	ТекстыОбъектовДляСемантическогоАнализа.Дата < &ДатаОтсечки
	|	И НЕ ТекстыОбъектовДляСемантическогоАнализа.НайденыСтопСлова
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТекстыОбъектовДляСемантическогоАнализа.Дата";
	Запрос.УстановитьПараметр("ДатаОтсечки", ДатаОтсечки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		НаборЗаписей = РегистрыСведений.ТекстыОбъектовДляСемантическогоАнализа.СоздатьНаборЗаписей();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 
			
			НаборЗаписей.Отбор.Дата.Установить(Выборка.Дата);
			НаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
			НаборЗаписей.Отбор.ВидТекста.Установить(Выборка.ВидТекста);
			
			НаборЗаписей.Записать();
		КонецЦикла;
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , ,
			"Удалено записей " + Выборка.Количество());
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение,
		, , "Завершение очистки регистра");
	
КонецПроцедуры

Процедура РассылкаСообщенийИзБуфера() Экспорт
	
	ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.РассылкаСообщенийИзБуфера);
	
	РегистрыСведений.БуферСообщений.ОтправитьУведомленияМессенджер();
	РегистрыСведений.БуферСообщений.ОтправитьЭлектронныеПисьма();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФОНОВЫЕ ЗАДАНИЯ

Функция НайтиЗаданиеПоИдентификатору(Знач ИдентификаторЗадания)
	
	Если ТипЗнч(ИдентификаторЗадания) = Тип("Строка") Тогда
		ИдентификаторЗадания = Новый УникальныйИдентификатор(ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Возврат Задание;
	
КонецФункции

Функция ОтменитьФоновоеЗаданиеПоКлючу(Ключ)
	
	Отбор = Новый Структура("Состояние, Ключ", СостояниеФоновогоЗадания.Активно, Ключ);
	Результат = Ложь;
	АктивныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Для Каждого Задание Из АктивныеФоновыеЗадания Цикл
		Задание.Отменить();
		Результат = Истина;
	КонецЦикла;  
	
	Возврат Результат;
	
КонецФункции

// Процедура ищет задачи, статусы которых не изменялись в течении 4-х месяцев
// и более. И информация по таким задачам отправляется руководителелям отделов
// на электронную почту.
//
Процедура ОтправитьСообщенияПоЗадачамБезИзмененийБолееЧетырехМесяцев()
	
	ИсключаемыеСтатусы = Новый СписокЗначений;
	ИсключаемыеСтатусы.Добавить(Справочники.СтатусыОбъектов.Приостановлен);
	ИсключаемыеСтатусы.Добавить(Справочники.СтатусыОбъектов.Решен);
	ИсключаемыеСтатусы.Добавить(Справочники.СтатусыОбъектов.Отклонен);
	
	Запрос = Новый Запрос;
	
	#Область ТекстЗапроса

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыОбъектов.Ссылка КАК Статус
	|ПОМЕСТИТЬ ПроверяемыеСтатусыОбъектов
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|ГДЕ
	|	НЕ СтатусыОбъектов.Ссылка В (&ИсключаемыеСтатусы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Статус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвойстваЗадачСрезПоследних.Объект КАК Задача,
	|	ДокументЗадача.Филиал КАК Филиал,
	|	ДокументЗадача.Номер КАК Номер,
	|	ДокументЗадача.Наименование КАК Наименование
	|ПОМЕСТИТЬ ЗадачиБезИзменений
	|ИЗ
	|	РегистрСведений.СвойстваЗадач.СрезПоследних КАК СвойстваЗадачСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПроверяемыеСтатусыОбъектов КАК ПроверяемыеСтатусыОбъектов
	|		ПО СвойстваЗадачСрезПоследних.Статус = ПроверяемыеСтатусыОбъектов.Статус
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО СвойстваЗадачСрезПоследних.Объект = ДокументЗадача.Ссылка
	|ГДЕ
	|	РАЗНОСТЬДАТ(СвойстваЗадачСрезПоследних.Период, &Дата, МЕСЯЦ) >= 4
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Филиал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗадачиБезИзменений.Филиал КАК Филиал,
	|	Пользователи.Почта КАК ЭлектроннаяПочта
	|ПОМЕСТИТЬ ЭлектронныеАдресаРуководителейФилиалов
	|ИЗ
	|	ЗадачиБезИзменений КАК ЗадачиБезИзменений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО ЗадачиБезИзменений.Филиал = Филиалы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (Филиалы.Руководитель = Пользователи.Ссылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Филиал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронныеАдресаРуководителейФилиалов.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
	|	ЗадачиБезИзменений.Задача КАК Задача,
	|	ЗадачиБезИзменений.Номер КАК Номер,
	|	ЗадачиБезИзменений.Наименование КАК Наименование
	|ИЗ
	|	ЗадачиБезИзменений КАК ЗадачиБезИзменений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭлектронныеАдресаРуководителейФилиалов КАК ЭлектронныеАдресаРуководителейФилиалов
	|		ПО ЗадачиБезИзменений.Филиал = ЭлектронныеАдресаРуководителейФилиалов.Филиал
	|ИТОГИ ПО
	|	ЭлектроннаяПочта";

	#КонецОбласти
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ИсключаемыеСтатусы", ИсключаемыеСтатусы);
	
	ШаблоныПисьма = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма();
	
	ПодвалПисьма = ШаблоныПисьма.РазделительнаяЛиния + ШаблоныПисьма.ПодвалПисьма;
	
	ШаблонПисьма = СтрЗаменить(ШаблоныПисьма.БлокОсновногоТекста, "<!-- font_size -->", "14px");
	
	ТекстЗаголовкаПисьма = "<b>Статус текущих задач не изменялся более 4-х месяцев:</b>";
	ЗаголовокТелаПисьма = СтрЗаменить(ШаблонПисьма, "<!-- content -->", ТекстЗаголовкаПисьма);
	
	ШаблонЗадач = "Задача %1. %2<br>";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		ЭлектроннаяПочта = Выборка.ЭлектроннаяПочта;
		
		ВыборкаЗадача = Выборка.Выбрать();
		ТелоПисьма = "";
		Пока ВыборкаЗадача.Следующий() Цикл
			ШаблонСсылки = ОбщегоНазначения.ПолучитьШаблонНавигационнойСсылки(ВыборкаЗадача.Задача);
			
			СсылкаНаОбъект = СтрЗаменить(ШаблоныПисьма.АктивнаяСсылка, "<!-- link -->", ШаблонСсылки);
			СсылкаНаОбъект = СтрЗаменить(СсылкаНаОбъект, "<!-- title_link -->", ВыборкаЗадача.Номер);
			
			ТекстТелаПисьма = СтрШаблон(ШаблонЗадач, СсылкаНаОбъект, ВыборкаЗадача.Наименование);
			
			ТелоПисьма = ТелоПисьма + СтрЗаменить(ШаблонПисьма, "<!-- content -->", ТекстТелаПисьма);
			
		КонецЦикла;
		
		Сообщение = ЗаголовокТелаПисьма + ТелоПисьма + ПодвалПисьма;
		
		РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.Добавить(ЭлектроннаяПочта,
			"Список задач без изменений статусов более 4-х месяцев", Сообщение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПризнакЗапретаИзмененияДокументовТрудозатрат()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Трудозатраты.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Трудозатраты КАК Трудозатраты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОказанныеУслуги КАК ОказанныеУслуги
		|		ПО (ОказанныеУслуги.Регистратор = Трудозатраты.Ссылка)
		|ГДЕ
		|	НЕ Трудозатраты.ИзменениеЗапрещено
		|	И Трудозатраты.Дата <= &ДатаЗапретаИзмененияДанных";
	
	ДатаЗапретаИзмененияДанных = Константы.ДатаЗапретаИзмененияДанных.Получить();
	Запрос.УстановитьПараметр("ДатаЗапретаИзмененияДанных", КонецМесяца(ДатаЗапретаИзмененияДанных));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ДокументыТрудозатраты = РезультатЗапроса.Выбрать();
		
		Пока ДокументыТрудозатраты.Следующий() Цикл
			ДокументОбъект = ДокументыТрудозатраты.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.ОтключитьПроверкуЗапретаИзменения = Истина;
			ДокументОбъект.ИзменениеЗапрещено = Истина;
			
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				Информация = ИнформацияОбОшибке();
				ПодробноеПредставление = ПодробноеПредставлениеОшибки(Информация);
				
				ШаблонОшибки = "При записи документа ""%1"" возникла ошибка по причине:%2";
				ТекстОшибки = СтрШаблон(ШаблонОшибки, ДокументыТрудозатраты.Ссылка, ПодробноеПредставление);
				
				ЗаписьЖурналаРегистрации("Документ_Трудозатраты.УстановкаПризнакаИзменениеЗапрещено",
					УровеньЖурналаРегистрации.Ошибка, , ДокументыТрудозатраты.Ссылка, ТекстОшибки);
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
