///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции для управления инструментами разработки
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает всех пользователей филиала текущего пользователя, кроме него самого.
// 
// Параметры:
//  ПолучатьСвязанные - Булево - если для инструмента нужно получать пользователей связанных филиалов
// 
// Возвращаемое значение:
//  СписокЗначений - список значений с элементами типа СправочникСсылка.Пользователи
Функция ПолучитьСписокПользователейДляНазначения(ПолучатьСвязанные = Ложь) Экспорт
	
	Результат = Новый СписокЗначений;
	
	Если ПолучатьСвязанные Тогда
		Филиалы = Новый Массив(ПараметрыСеанса.СвязанныеФилиалы);
	Иначе
		Филиалы = Новый Массив;
	КонецЕсли;
	
	Филиалы.Добавить(ПараметрыСеанса.Филиал);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛичныеДелаСрезПоследних.Сотрудник КАК Пользователь,
	|	Пользователи.ФИО КАК ФИО
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(&ТекущаяДата, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (Пользователи.Ссылка = ЛичныеДелаСрезПоследних.Сотрудник)
	|			И (НЕ Пользователи.Недействителен)
	|			И (НЕ Пользователи.Служебный)
	|			И (НЕ Пользователи.ПометкаУдаления)
	|ГДЕ
	|	ЛичныеДелаСрезПоследних.Сотрудник <> &Пользователь
	|	И (ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы)) В (&Филиалы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Филиалы", Филиалы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Пользователь, Выборка.ФИО);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет переданную таблицу данными пула на тестирование в инструментах разработки.
//
// Параметры:
//  Таблица - ТаблицаЗначений, ДанныеФормыКоллекция - таблица, в которой будет сохранен результат
//  Фильтры - Структура - сожержит значения отборов для ограничения выборки данных
//  ЗаполнитьДополнительно - Булево - указывает на необходимость заполнения дополнительных полей (СрокСдачи, Разработчик)
//
Процедура ЗаполнитьСписокПулНаТестирование(Таблица, Знач Фильтры, Знач ЗаполнитьДополнительно = Истина) Экспорт

	ПостроительЗапроса = Новый ПостроительЗапроса;
	#Область ТекстЗапроса
	ПостроительЗапроса.Текст =
	"ВЫБРАТЬ
	|	ДокументЗадача.Ссылка КАК Задача,
	|	ОчередьЗадачВТестировании.Порядок КАК Порядок,
	|	ОчередьЗадачВТестировании.Зафиксирован КАК Зафиксирован,
	|	ОчередьЗадачВТестировании.ДатаДобавления КАК ДатаДобавления
	|ПОМЕСТИТЬ ОтобранныеЗадачи
	|ИЗ
	|	РегистрСведений.ОчередьЗадач КАК ОчередьЗадачВТестировании
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО ОчередьЗадачВТестировании.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|			И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ОчередьВТестировании))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО (ДокументЗадача.Ссылка = ОчередьЗадачВТестировании.Задача)
	|ГДЕ
	|	НЕ ОчередьЗадачВТестировании.УбранИзОчереди
	|{ГДЕ
	|	ДокументЗадача.Статус КАК Статус}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеЗадачи.Задача КАК Задача,
	|	МАКСИМУМ(ДокументСпринт.ДатаОкончания) КАК ДатаОкончания
	|ПОМЕСТИТЬ МаксимальныеДатыОкончанияТекущихСпринтов
	|ИЗ
	|	ОтобранныеЗадачи КАК ОтобранныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ПО (СоставСпринтов.Объект = ОтобранныеЗадачи.Задача)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|		ПО (ДокументСпринт.Ссылка = СоставСпринтов.Спринт)
	|			И (&НачалоДняТекущаяДата МЕЖДУ ДокументСпринт.ДатаНачала И ДокументСпринт.ДатаОкончания)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтобранныеЗадачи.Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныеДатыОкончанияСпринтов.Задача КАК Задача,
	|	МАКСИМУМ(СоставСпринтов.Спринт) КАК Спринт
	|ПОМЕСТИТЬ ПоследнийСпринтЗадачи
	|ИЗ
	|	МаксимальныеДатыОкончанияТекущихСпринтов КАК МаксимальныеДатыОкончанияСпринтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ПО (СоставСпринтов.Объект = МаксимальныеДатыОкончанияСпринтов.Задача)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|		ПО (ДокументСпринт.ДатаОкончания = МаксимальныеДатыОкончанияСпринтов.ДатаОкончания)
	|			И (СоставСпринтов.Спринт = ДокументСпринт.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	МаксимальныеДатыОкончанияСпринтов.Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументЗадача.Ссылка КАК Задача,
	|	ДокументЗадача.Номер КАК Номер,
	|	ДокументЗадача.Филиал КАК Филиал,
	|	ДокументЗадача.Статус КАК Статус,
	|	ДокументЗадача.Наименование КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДокументЗадача.СистемаУчета) КАК Система,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДокументЗадача.Заказчик) КАК Заказчик,
	|	ЕСТЬNULL(СтатусыОбъектов.ИндексКартинки, 0) КАК ИндексКартинки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КОЛИЧЕСТВО(ТаблицаСистемыРазработки.Система), 0) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НесколькоСистем,
	|	МИНИМУМ(ЕСТЬNULL(ТекущаяСистемаРазработки.ГруппаЗаказчиков, ЗНАЧЕНИЕ(Справочник.ГруппыЗаказчиковНаправлений.ПустаяСсылка))) КАК ГруппаЗаказчиков,
	|	ДокументЗаявкаНаРазработку.Продукт КАК Продукт,
	|	ОтобранныеЗадачи.Порядок КАК Порядок,
	|	ЕСТЬNULL(ПоследнийСпринтЗадачи.Спринт, ЗНАЧЕНИЕ(Документ.Спринт.ПустаяСсылка)) КАК Спринт,
	|	ОтобранныеЗадачи.Зафиксирован КАК Зафиксирован,
	|	СтатусыОбъектов.Ссылка КАК СтатусДляСоединения,
	|	ОтобранныеЗадачи.ДатаДобавления КАК ДатаДобавления
	|ПОМЕСТИТЬ ПодготовленныеДанные
	|ИЗ
	|	ОтобранныеЗадачи КАК ОтобранныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО ОтобранныеЗадачи.Задача = ДокументЗадача.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ДокументЗаявкаНаРазработку
	|		ПО (ДокументЗадача.ОбъектОснование = ДокументЗаявкаНаРазработку.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (ДокументЗадача.Статус = СтатусыОбъектов.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ТекущаяСистемаРазработки
	|		ПО (ДокументЗаявкаНаРазработку.Ссылка = ТекущаяСистемаРазработки.Ссылка)
	|			И (ДокументЗадача.СистемаУчета = ТекущаяСистемаРазработки.Система)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ТаблицаСистемыРазработки
	|		ПО (ДокументЗадача.ОбъектОснование = ТаблицаСистемыРазработки.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследнийСпринтЗадачи КАК ПоследнийСпринтЗадачи
	|		ПО (ПоследнийСпринтЗадачи.Задача = ОтобранныеЗадачи.Задача)
	|		{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Продукты КАК Продукты
	|		ПО (ДокументЗаявкаНаРазработку.Продукт = Продукты.Ссылка)}
	|{ГДЕ
	|	ДокументЗадача.СистемаУчета КАК Система,
	|	ДокументЗадача.Филиал КАК Филиал,
	|	ДокументЗадача.Наименование КАК Наименование,
	|	ДокументЗадача.Направление КАК Направление,
	|	(ЕСТЬNULL(ПоследнийСпринтЗадачи.Спринт, ЗНАЧЕНИЕ(Документ.Спринт.ПустаяСсылка))) КАК Спринт,
	|	ДокументЗадача.Назначение КАК Назначение,
	|	ДокументЗадача.Проект КАК Проект,
	|	(ВЫБОР
	|			КОГДА НЕ Продукты.Ссылка ЕСТЬ NULL
	|				ТОГДА Продукты.Ссылка
	|			ИНАЧЕ ЕСТЬNULL(ТекущаяСистемаРазработки.ГруппаЗаказчиков, ЗНАЧЕНИЕ(Справочник.ГруппыЗаказчиковНаправлений.ПустаяСсылка))
	|		КОНЕЦ) КАК СписокПродуктГруппаЗаказчиков}
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументЗадача.Ссылка,
	|	ДокументЗадача.Филиал,
	|	ДокументЗадача.Номер,
	|	ЕСТЬNULL(ПоследнийСпринтЗадачи.Спринт, ЗНАЧЕНИЕ(Документ.Спринт.ПустаяСсылка)),
	|	ДокументЗаявкаНаРазработку.Продукт,
	|	ДокументЗадача.Статус,
	|	ДокументЗадача.Наименование,
	|	ЕСТЬNULL(СтатусыОбъектов.ИндексКартинки, 0),
	|	ОтобранныеЗадачи.Порядок,
	|	ОтобранныеЗадачи.Зафиксирован,
	|	СтатусыОбъектов.Ссылка,
	|	ОтобранныеЗадачи.ДатаДобавления,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДокументЗадача.СистемаУчета),
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДокументЗадача.Заказчик)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодготовленныеДанные.Задача КАК Задача,
	|	ПодготовленныеДанные.ДатаДобавления КАК МинимальнаяДата,
	|	&ТекущаяДата КАК МаксимальнаяДата
	|ПОМЕСТИТЬ ОграниченияДляКалендаря
	|ИЗ
	|	ПодготовленныеДанные КАК ПодготовленныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодготовленныеДанные.Задача КАК Задача,
	|	ПодготовленныеДанные.Продукт КАК Продукт,
	|	ПодготовленныеДанные.Филиал КАК Филиал,
	|	ПодготовленныеДанные.Номер КАК Номер,
	|	ПодготовленныеДанные.Наименование КАК Наименование,
	|	ПодготовленныеДанные.Система КАК Система,
	|	ПодготовленныеДанные.ГруппаЗаказчиков КАК ГруппаЗаказчиков,
	|	ПодготовленныеДанные.Заказчик КАК Заказчик,
	|	ПодготовленныеДанные.ИндексКартинки КАК ИндексКартинки,
	|	ПодготовленныеДанные.НесколькоСистем КАК НесколькоСистем,
	|	ВЫБОР
	|		КОГДА СтатистикаЗадач.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА СтатистикаЗадач.Время
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВремяОжиданияТестирования,
	|	ПодготовленныеДанные.Порядок КАК Порядок,
	|	ПодготовленныеДанные.Зафиксирован КАК Зафиксирован
	|ПОМЕСТИТЬ ПодготовленныеДанныеВремя
	|ИЗ
	|	ПодготовленныеДанные КАК ПодготовленныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатистикаСтатусовНеназначенныхЗадач КАК СтатистикаЗадач
	|		ПО ПодготовленныеДанные.Задача = СтатистикаЗадач.Задача
	|			И ПодготовленныеДанные.Статус = СтатистикаЗадач.Статус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроизводственныйКалендарь.ДатаКалендаря КАК Дата,
	|	ПроизводственныйКалендарь.ВидДня КАК ВидДня
	|ИЗ
	|	РегистрСведений.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
	|	ОграниченияДляКалендаря КАК ОграниченияДляКалендаря
	|ГДЕ
	|	ПроизводственныйКалендарь.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|	И НАЧАЛОПЕРИОДА(ПроизводственныйКалендарь.ДатаКалендаря, ДЕНЬ) >= НАЧАЛОПЕРИОДА(ОграниченияДляКалендаря.МинимальнаяДата, ДЕНЬ)
	|	И НАЧАЛОПЕРИОДА(ПроизводственныйКалендарь.ДатаКалендаря, ДЕНЬ) <= НАЧАЛОПЕРИОДА(ОграниченияДляКалендаря.МаксимальнаяДата, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПодготовленныеДанные.Задача КАК Задача,
	|	ЕСТЬNULL(ЛичныеДелаСрезПоследних.Сотрудник, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Исполнитель,
	|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ЛичныеДелаСрезПоследних.Сотрудник, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))) КАК ИсполнительПредставление
	|ПОМЕСТИТЬ ВсеИсполнителиЗадач
	|ИЗ
	|	ПодготовленныеДанные КАК ПодготовленныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗадач КАК СвойстваЗадач
	|		ПО ПодготовленныеДанные.Задача = СвойстваЗадач.Объект
	|			И (СвойстваЗадач.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ВРаботе))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (СвойстваЗадач.Исполнитель = Пользователи.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
	|		ПО (Пользователи.Должность = Должности.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела.СрезПоследних(&ТекущаяДата, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаСрезПоследних
	|		ПО (Пользователи.Ссылка = ЛичныеДелаСрезПоследних.Сотрудник)
	|			И (НЕ ЕСТЬNULL(Должности.РольВОтделеIT, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Справочник.РолиПользователей.Тестировщик))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеИсполнителиЗадач.Задача КАК Задача,
	|	ВсеИсполнителиЗадач.ИсполнительПредставление КАК Исполнитель
	|ПОМЕСТИТЬ ОтобранныеЗадачиПоИсполнителям
	|ИЗ
	|	ВсеИсполнителиЗадач КАК ВсеИсполнителиЗадач
	|{ГДЕ
	|	ВсеИсполнителиЗадач.Исполнитель КАК Исполнитель}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтобранныеЗадачиПоИсполнителям.Задача КАК Задача
	|ПОМЕСТИТЬ КонечныеЗадачиПула
	|ИЗ
	|	ОтобранныеЗадачиПоИсполнителям КАК ОтобранныеЗадачиПоИсполнителям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодготовленныеДанныеВремя.Задача КАК Задача,
	|	ПодготовленныеДанныеВремя.Номер КАК Номер,
	|	ПодготовленныеДанныеВремя.Филиал КАК Филиал,
	|	ПодготовленныеДанныеВремя.Наименование КАК Наименование,
	|	ПодготовленныеДанныеВремя.Система КАК Система,
	|	ПодготовленныеДанныеВремя.Продукт КАК Продукт,
	|	ПодготовленныеДанныеВремя.ГруппаЗаказчиков КАК ГруппаЗаказчиков,
	|	ПодготовленныеДанныеВремя.Заказчик КАК Заказчик,
	|	ПодготовленныеДанныеВремя.ИндексКартинки КАК ИндексКартинки,
	|	ПодготовленныеДанныеВремя.НесколькоСистем КАК НесколькоСистем,
	|	СУММА(ПодготовленныеДанныеВремя.ВремяОжиданияТестирования) КАК ВремяОжиданияТестирования,
	|	ПодготовленныеДанныеВремя.Порядок КАК Порядок,
	|	ПодготовленныеДанныеВремя.Зафиксирован КАК Зафиксирован,
	|	ЕСТЬNULL(ОграниченияДляКалендаря.МинимальнаяДата, &ТекущаяДата) КАК ДатаНачалаПоследнегоТестирования,
	|	ЕСТЬNULL(СрокиСдачиЗадач.СрокСдачи, ДАТАВРЕМЯ(1, 1, 1)) КАК СрокСдачи
	|ИЗ
	|	КонечныеЗадачиПула КАК КонечныеЗадачиПула
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодготовленныеДанныеВремя КАК ПодготовленныеДанныеВремя
	|		ПО КонечныеЗадачиПула.Задача = ПодготовленныеДанныеВремя.Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОграниченияДляКалендаря КАК ОграниченияДляКалендаря
	|		ПО (ПодготовленныеДанныеВремя.Задача = ОграниченияДляКалендаря.Задача)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиСдачиЗадач.СрезПоследних КАК СрокиСдачиЗадач
	|		ПО (СрокиСдачиЗадач.Задача = ПодготовленныеДанныеВремя.Задача)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПодготовленныеДанныеВремя.Задача,
	|	ПодготовленныеДанныеВремя.Филиал,
	|	ПодготовленныеДанныеВремя.Номер,
	|	ПодготовленныеДанныеВремя.Продукт,
	|	ПодготовленныеДанныеВремя.ГруппаЗаказчиков,
	|	ПодготовленныеДанныеВремя.Наименование,
	|	ПодготовленныеДанныеВремя.Система,
	|	ПодготовленныеДанныеВремя.Заказчик,
	|	ПодготовленныеДанныеВремя.ИндексКартинки,
	|	ПодготовленныеДанныеВремя.НесколькоСистем,
	|	ПодготовленныеДанныеВремя.Порядок,
	|	ПодготовленныеДанныеВремя.Зафиксирован,
	|	ОграниченияДляКалендаря.МинимальнаяДата,
	|	ЕСТЬNULL(СрокиСдачиЗадач.СрокСдачи, ДАТАВРЕМЯ(1, 1, 1))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонечныеЗадачиПула.Задача КАК Задача,
	|	ВсеИсполнителиЗадач.ИсполнительПредставление КАК Исполнитель
	|ИЗ
	|	КонечныеЗадачиПула КАК КонечныеЗадачиПула
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеИсполнителиЗадач КАК ВсеИсполнителиЗадач
	|		ПО КонечныеЗадачиПула.Задача = ВсеИсполнителиЗадач.Задача
	|ГДЕ
	|	ВсеИсполнителиЗадач.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";	
	#КонецОбласти
	
	ТипСтруктура = Тип("Структура");
	
	СписокПродуктГруппаЗаказчиков = Новый СписокЗначений;
	
	Для Каждого ЭлементНастроек Из Фильтры Цикл
		Если ТипЗнч(ЭлементНастроек.Значение) <> ТипСтруктура Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементНастроек.Ключ = "ГруппаЗаказчиков" 
			ИЛИ ЭлементНастроек.Ключ = "Продукт" Тогда
			
			Если ТипЗнч(ЭлементНастроек.Значение.ПравоеЗначение) = Тип("СписокЗначений") Тогда
				Для Каждого ЭлементСписка Из ЭлементНастроек.Значение.ПравоеЗначение Цикл
					СписокПродуктГруппаЗаказчиков.Добавить(ЭлементСписка.Значение);	
				КонецЦикла;
			Иначе
				СписокПродуктГруппаЗаказчиков.Добавить(ЭлементНастроек.Значение.ПравоеЗначение);	
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить(ЭлементНастроек.Ключ);
		ЭлементОтбора.ВидСравнения = ЭлементНастроек.Значение.ВидСравнения;
		ЭлементОтбора.Значение = ЭлементНастроек.Значение.ПравоеЗначение;
		ЭлементОтбора.Использование = ЭлементНастроек.Значение.Использование;
	КонецЦикла; 
	
	Если СписокПродуктГруппаЗаказчиков.Количество() > 0 Тогда 
		ОбщегоНазначения.ПостроительЗапросаУстановитьОтбор(ПостроительЗапроса, "СписокПродуктГруппаЗаказчиков", 
			ВидСравнения.ВСписке, СписокПродуктГруппаЗаказчиков);
	КонецЕсли; 
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Запрос = ПостроительЗапроса.ПолучитьЗапрос();
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("НачалоДняТекущаяДата", НачалоДня(ТекущаяДата));
	
	РезультатПакеты = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатПакеты.Количество();
	
	Выборка = РезультатПакеты[КоличествоПакетов - 2].Выбрать();
	ТаблицаПроизводственногоКалендаря = РезультатПакеты[6].Выгрузить();
	РазработчикиЗадач = РезультатПакеты[КоличествоПакетов - 1].Выгрузить();
	
	ПредставлениеПорядок = 1;
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);	
		НоваяСтрока.ЗадачаПредставление = СтрШаблон("[%1] %2", Выборка.Номер, Выборка.Наименование);
		
		ВремяПоследнееТестирование = ОбщегоНазначения.ПолучитьРабочееВремяДляРегистраСтатистики(Выборка.ДатаНачалаПоследнегоТестирования,
			ТекущаяДата, ТаблицаПроизводственногоКалендаря);
		
		ИдентификаторЗадачи = Строка(Выборка.Задача.УникальныйИдентификатор());
		
		НоваяСтрока.Время = ПеревестиВремя(Выборка.ВремяОжиданияТестирования + ВремяПоследнееТестирование);
		НоваяСтрока.UID = ОбщегоНазначенияВызовСервера.ХэшСумма(ИдентификаторЗадачи, Истина);
		НоваяСтрока.Заказчик = ОбщегоНазначенияКлиентСервер.ПолучитьФамилиюИнициалыПользователя(Выборка.Заказчик);
		НоваяСтрока.ПредставлениеПорядок = ПредставлениеПорядок;
		ПредставлениеПорядок = ПредставлениеПорядок + 1;
		
		Если Выборка.Зафиксирован Тогда
			НоваяСтрока.ЗафиксированКартинка = БиблиотекаКартинок.ФиксированиеЗадачи;
		КонецЕсли;
		
		Если ЗаполнитьДополнительно Тогда
			НоваяСтрока.СрокСдачи = Выборка.СрокСдачи;
			
			НайденныеРазработчикиЗадачи = РазработчикиЗадач.НайтиСтроки(Новый Структура("Задача", Выборка.Задача));
			Если НайденныеРазработчикиЗадачи.Количество() > 0 Тогда
				МассивРазработчиков = Новый Массив;
				
				Для Каждого Строка Из НайденныеРазработчикиЗадачи Цикл
					МассивРазработчиков.Добавить(ОбщегоНазначенияКлиентСервер.ПолучитьФамилиюИнициалыПользователя(Строка.Исполнитель));
				КонецЦикла;
				
				НоваяСтрока.Разработчик = СтрСоединить(МассивРазработчиков, ", ");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Переводит количество минут в читаемый формат (например 1дн:04ч) для отображения в списках инструментов разработки
//
// Параметры:
//  КоличествоМинут - Число - Количество минут 
// 
// Возвращаемое значение:
//  Строка - представление времени
//
Функция ПеревестиВремя(Знач КоличествоМинут) Экспорт
	
	СтрокаВремя = "";
	
	Если КоличествоМинут > 0 Тогда		
		Дни = Цел(КоличествоМинут / 480);
		ОстатокМинут = КоличествоМинут - (Дни * 480);
		Часы = Цел(ОстатокМинут / 60);
		ОстатокМинут = ОстатокМинут - (Часы * 60);
		
		Если Дни > 0 Тогда
			СтрокаВремя = СтрШаблон("%1дн:", Строка(Дни));
		Иначе
			СтрокаВремя = "";	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаВремя) Тогда
			Если Часы >= 10 Тогда
				ШаблонСтроки = "%1ч";
			Иначе
				ШаблонСтроки = "0%1ч";
			КонецЕсли;
			
			Если Часы > 0 Тогда
				СтрокаВремя = СтрокаВремя + СтрШаблон(ШаблонСтроки, Строка(Часы));
			Иначе
				СтрокаВремя = СтрокаВремя + "00ч";
			КонецЕсли;
		Иначе
			Если Часы > 0 Тогда
				СтрокаВремя = СтрШаблон("%1ч:", Строка(Часы));
			Иначе
				СтрокаВремя = "";
			КонецЕсли;
			
			СтрокаВремя = СтрокаВремя + СтрШаблон("%1 мин", ОстатокМинут);
		КонецЕсли;
	КонецЕсли;
		
	Возврат СтрокаВремя;
	
КонецФункции

// Обновляет количество фильтров в заголовке кнопки настройки и подсказку кнопки
//
// Параметры:
//  Элемент	 - КнопкаФормы - кнопка настроек 
//  Фильтры	 - Структура - структура наложенных фильтров
//
Процедура ОбновитьПредставлениеФильтров(Элемент, Фильтры) Экспорт
	
	ПредставленияФильтров = Новый Массив;
		
	Для Каждого Фильтр Из Фильтры Цикл
		Если ТипЗнч(Фильтр.Значение) = Тип("Структура") 
			И Фильтр.Значение.Использование Тогда
			
			Если ТипЗнч(Фильтр.Значение.ПравоеЗначение) = Тип("СписокЗначений") Тогда
				Список = Фильтр.Значение.ПравоеЗначение;
				Если Список.Количество() > 3 Тогда
					ПромежуточноеЗначение = Новый Массив;
					Для Номер = 0 По 2 Цикл
						ПромежуточноеЗначение.Добавить(Список[Номер].Значение);
					КонецЦикла;
					
					Значение = СтрСоединить(ПромежуточноеЗначение, ", ") + " и ещё " + (Список.Количество() - 3);
				Иначе
					Значение = СтрСоединить(Фильтр.Значение.ПравоеЗначение.ВыгрузитьЗначения(), ", ");
				КонецЕсли;
			Иначе
				Значение = Строка(Фильтр.Значение.ПравоеЗначение);
			КонецЕсли;
			
			Представление = Новый ФорматированнаяСтрока(Новый ФорматированнаяСтрока(Строка(Фильтр.Ключ), Новый Шрифт(, , Истина)), " ",
			Новый ФорматированнаяСтрока(НРег(Строка(Фильтр.Значение.ВидСравнения)), Новый Шрифт(, , , Истина)), " ", Значение, Символы.ПС);
			ПредставленияФильтров.Добавить(Представление);
		КонецЕсли;		
	КонецЦикла;

	Если ПредставленияФильтров.Количество() > 0 Тогда
		Элемент.Заголовок = "Настройки (" + ПредставленияФильтров.Количество() + ")";     
		
		Если ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда                    
			// Для кнопок другое не работает
			Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
		Иначе
			Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		КонецЕсли;
		
		Элемент.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ПредставленияФильтров);
	Иначе
		Элемент.Заголовок = "Настройки";
		Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дерево значений данными из выборки.
//
// Параметры:
//  Выборка				 - ВыборкаДанных - Выборка данных
//  Дерево				 - ДеревоЗначений	 - Дерево с данными
//  КэшСтрок			 - Соотвествие		 - кэшированное положение строк дерева
//  Родитель			 - СтрокаДереваЗначений	 - текущий родитель
//  Индекс				 - Число				 - уровень дерева
//  ДополнительныеДанные - Структура			 - дополнительные данные для работы
//
Процедура ОбработатьВыборку(Выборка, Дерево, КэшСтрок, Родитель, Индекс, ДополнительныеДанные) Экспорт
	
	Если ДополнительныеДанные.Измерения.Количество() - 1 < Индекс Тогда
		ВывестиВДеревоДетальныеЗаписи(Выборка, Родитель, Дерево, КэшСтрок, ДополнительныеДанные);    
	Иначе                      
		ТекущаяВыборка = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
		
		Если Индекс = 0 И ТекущаяВыборка.Количество() = 0 Тогда
			// Нет данных, нужно удалить из дерева и кэша     
			Найденное = Дерево.Строки.Найти(ДополнительныеДанные.Объект, ДополнительныеДанные.ПолеОбъекта, Истина);
			
			Если Найденное <> Неопределено Тогда   
				РодительUID = ?(Найденное.Родитель = Неопределено, Неопределено, Найденное.Родитель.UID);
				УдалитьСтрокуДерева(Найденное.UID, КэшСтрок, РодительUID, Дерево, ДополнительныеДанные);
			КонецЕсли;
		Иначе
			ИмяГруппировки = ДополнительныеДанные.Измерения[Индекс].Имя; 
	
			Пока ТекущаяВыборка.Следующий() Цикл				
				ТекущаяРодитель = ПолучитьТекущегоРодителяДерева(ТекущаяВыборка, Индекс, КэшСтрок, Родитель, ДополнительныеДанные); 
				
				Если ТекущаяРодитель <> Неопределено Тогда					
					ОбработатьВыборку(ТекущаяВыборка, Дерево, КэшСтрок, ТекущаяРодитель, Индекс + 1, ДополнительныеДанные); 
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Сортировка определенных строк дерева значений
//
// Параметры:
//  СтрокиКСортировке	 - Массив	 - Массив строк дерева, для которых нужна сортировка
//  Дерево				 - ДеревоЗначений	 - Дерево с данными
//  Порядок				 - Порядок			 - Порядок построителя запроса
//
Процедура ОтсортироватьДерево(СтрокиКСортировке, Дерево, Порядок) Экспорт
	
	Если СтрокиКСортировке.Количество() > 0 Тогда 
		МассивСортировка = Новый Массив;
		
		Для Каждого Сортировка Из Порядок Цикл  
			МассивСортировка.Добавить(Сортировка.ПутьКДанным + 
				?(Сортировка.Направление = НаправлениеСортировки.Убыв, " УБЫВ", ""));
		КонецЦикла;
		
		Для Каждого Строка Из СтрокиКСортировке Цикл
			Строка.Значение.Строки.Сортировать(СтрСоединить(МассивСортировка, ","));	
		КонецЦикла;  
	КонецЕсли;  
	
КонецПроцедуры

#КонецОбласти

#Область Служебные

Процедура ВывестиВДеревоДетальныеЗаписи(Выборка, Родитель, Дерево, КэшСтрок, ДополнительныеДанные)
	
	ВыборкаДетальныеЗаписи = Выборка.Выбрать();
		
	Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		// Нет данных, нужно удалить из дерева и кэша     
		Найденное = Дерево.Строки.Найти(ДополнительныеДанные.Объект, ДополнительныеДанные.ПолеОбъекта, Истина);
		
		Если Найденное <> Неопределено Тогда
			РодительUID = ?(Найденное.Родитель = Неопределено, Неопределено, Найденное.Родитель.UID);
			УдалитьСтрокуДерева(Найденное.UID, КэшСтрок, РодительUID, Дерево, ДополнительныеДанные);
		КонецЕсли;
	Иначе
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи[ДополнительныеДанные.ПолеОбъекта]) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаОбъекта = Неопределено;
			UID = Строка(ВыборкаДетальныеЗаписи[ДополнительныеДанные.ПолеОбъекта].УникальныйИдентификатор());
			UID = ОбщегоНазначенияВызовСервера.ХэшСумма(UID, Истина);
			РодительДерево = ТипЗнч(Родитель) = Тип("ДеревоЗначений");
		    ЕстьПересчетРодителя = ДополнительныеДанные.Свойство("ПересчетРодителя");
					
			Если ДополнительныеДанные.Перезаполнение Тогда    
				ДанныеКэша = Неопределено;
				КэшСтрок.Свойство("_" + UID, ДанныеКэша);
				
				НовыйРодительUID = ?(РодительДерево, Неопределено, Родитель.UID);
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("UID", НовыйРодительUID); 
				НовыйРодитель = Дерево.Строки.НайтиСтроки(СтруктураПоиска);
				
				Если Родитель.Строки.Количество() = 0 И НовыйРодитель.Количество() > 1 Тогда 
					Дерево.Строки.Удалить(НовыйРодитель[0]);
					Родитель = НовыйРодитель[1];
				КонецЕсли;
				
				// Если текущий родитель не совпадает с кэшированным, то нужно удалить запись
				// также проверить, что у родителя есть еще записи
				Если ДанныеКэша <> Неопределено Тогда 
					СтарыйРодительUID = ?(ДанныеКэша.Количество() > 0, ДанныеКэша[ДанныеКэша.ВГраница()], Неопределено);
					
					Если СтарыйРодительUID <> НовыйРодительUID Тогда
						Если НЕ ЕстьПересчетРодителя Тогда
							ДополнительныеДанные.Вставить("ПересчетРодителя", Истина);
						КонецЕсли;
						
						УдалитьСтрокуДерева(UID, КэшСтрок, СтарыйРодительUID, Дерево, ДополнительныеДанные); 
					Иначе
						НоваяСтрокаОбъекта = Родитель.Строки.Найти(UID, "UID");	
					КонецЕсли;
				Иначе    
					Если НЕ ЕстьПересчетРодителя Тогда
						ДополнительныеДанные.Вставить("ПересчетРодителя", Истина);
					КонецЕсли;
				КонецЕсли;				
			КонецЕсли;
			
			Если НоваяСтрокаОбъекта = Неопределено Тогда
				НоваяСтрокаОбъекта = Родитель.Строки.Добавить();
			КонецЕсли;			
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОбъекта, ВыборкаДетальныеЗаписи);
			НоваяСтрокаОбъекта.UID = UID;
			ДополнительнаяОбработкаСтрокиДерева(НоваяСтрокаОбъекта, ВыборкаДетальныеЗаписи, ДополнительныеДанные, "Детали");				
			
			МассивРодителей = Новый Массив;
			
			Если НЕ РодительДерево Тогда				
				КэшРодителя = Неопределено;  
				КэшСтрок.Свойство("_" + Родитель.UID, КэшРодителя);
				Для Каждого Элемент Из КэшРодителя Цикл
					МассивРодителей.Добавить(Элемент);
				КонецЦикла;   
				МассивРодителей.Добавить(Родитель.UID);		
			КонецЕсли;
			
			КэшСтрок.Вставить("_" + UID, МассивРодителей); 
			
			Если ДополнительныеДанные.Перезаполнение Тогда 
				
				РодительUID = ?(РодительДерево, "ДеревоЗначений", Родитель.UID);
				
				Если ДополнительныеДанные.СтрокиКСортировке.Получить(РодительUID) = Неопределено Тогда 
					ДополнительныеДанные.СтрокиКСортировке.Вставить(РодительUID, Родитель);	
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;   
	КонецЕсли;

КонецПроцедуры

Процедура УдалитьСтрокуДерева(UID, КэшСтрок, РодительUID, Дерево, ДополнительныеДанные)
	
	СтарыйРодитель = Дерево;
	
	Если РодительUID <> Неопределено Тогда
		Для каждого Элемент Из КэшСтрок["_" + РодительUID] Цикл 
			СтарыйРодитель = СтарыйРодитель.Строки.Найти(Элемент, "UID");	
		КонецЦикла;
		
		СтарыйРодитель = СтарыйРодитель.Строки.Найти(РодительUID, "UID");
	КонецЕсли;				
	
	СтараяСтрока = СтарыйРодитель.Строки.Найти(UID, "UID"); 
	КэшСтрок.Удалить("_" + UID); 	
	ОбработатьУдалениеСтроки(СтараяСтрока, ДополнительныеДанные);
	СтарыйРодитель.Строки.Удалить(СтараяСтрока);
	
	Если СтарыйРодитель.Строки.Количество() = 0 
		И ЗначениеЗаполнено(РодительUID) Тогда
		
		КэшСтрок.Удалить("_" + РодительUID);
		
		Если СтарыйРодитель.Родитель <> Неопределено Тогда
			СтарыйРодитель.Родитель.Строки.Удалить(СтарыйРодитель);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТекущегоРодителяДерева(ТекущаяВыборка, Индекс, КэшСтрок, Родитель, ДополнительныеДанные)
	
	ИмяГруппировки = ДополнительныеДанные.Измерения[Индекс].Имя;
	ТекущаяРодитель = Неопределено;
	
	Если ДополнительныеДанные.ВидДерева = "ОтслеживаемыеЗадачи" Тогда
		Представление = Строка(ТекущаяВыборка[ИмяГруппировки]);
		ИндексКартинки = ТекущаяВыборка.ИндексКартинки;
		ТекущаяРодитель = ВывестиВДеревоГруппу(Родитель, ТекущаяВыборка, Представление, ИндексКартинки,
			КэшСтрок, ИмяГруппировки, ДополнительныеДанные);
		
	ИначеЕсли ДополнительныеДанные.ВидДерева = "ЗадачиНаМне" Тогда 
		Если ИмяГруппировки = "Группа" Тогда
			Представление = Строка(ТекущаяВыборка[ИмяГруппировки]);
			ИндексКартинки = ДополнительныеДанные.ИндексКартинки_Группа;
			ТекущаяРодитель = ВывестиВДеревоГруппу(Родитель, ТекущаяВыборка, Представление,	ИндексКартинки,
				КэшСтрок, ИмяГруппировки, ДополнительныеДанные);
			
		Иначе
			Представление = Строка(ТекущаяВыборка[ИмяГруппировки]);
			
			Если ЗначениеЗаполнено(Представление) Тогда
				ИндексКартинки = ТекущаяВыборка.ИндексКартинки;
				ТекущаяРодитель = ВывестиВДеревоГруппу(Родитель, ТекущаяВыборка, Представление, ИндексКартинки,
					КэшСтрок, ИмяГруппировки, ДополнительныеДанные);
			Иначе
				ТекущаяРодитель = Родитель;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ДополнительныеДанные.ВидДерева = "УправлениеНагрузкой" Тогда
		
		Если ИмяГруппировки = "Сотрудник" Тогда 
			// Уволенных сотрудников без задач выводить не будем
			НетЗаявокИЗадач = (ТекущаяВыборка.КоличествоЗадач = 0 И ТекущаяВыборка.КоличествоЗаявок = 0
				И ТекущаяВыборка.КоличествоВнутреннихЗаданий = 0 И ТекущаяВыборка.КоличествоВнутреннихТрудозатрат = 0);
			
			Если ТекущаяВыборка.Уволен И НетЗаявокИЗадач Тогда
				ТекущаяРодитель = Неопределено;
			Иначе    
				Представление = Строка(ТекущаяВыборка[ИмяГруппировки]);			
				ИндексКартинки = ДополнительныеДанные.ИндексКартинки_Группа;
				ТекущаяРодитель = ВывестиВДеревоГруппу(Родитель, ТекущаяВыборка, Представление, ИндексКартинки, 
					КэшСтрок, ИмяГруппировки, ДополнительныеДанные);					
			КонецЕсли;
		Иначе                   
			Представление = Строка(ТекущаяВыборка[ИмяГруппировки]);
			ИндексКартинки = ТекущаяВыборка.ИндексКартинки;        
			ТекущаяРодитель = ВывестиВДеревоГруппу(Родитель, ТекущаяВыборка, Представление, ИндексКартинки, 
				КэшСтрок, ИмяГруппировки, ДополнительныеДанные);  
		КонецЕсли;
	Иначе
		Представление = Строка(ТекущаяВыборка[ИмяГруппировки]);
		ИндексКартинки = ДополнительныеДанные.ИндексКартинки_Группа;
		ТекущаяРодитель = ВывестиВДеревоГруппу(Родитель, ТекущаяВыборка, Представление, ИндексКартинки, 
			КэшСтрок, ИмяГруппировки, ДополнительныеДанные);  
	КонецЕсли;
	
	Возврат ТекущаяРодитель; 
	
КонецФункции

Процедура ДополнительнаяОбработкаСтрокиДерева(НоваяСтрока, ТекущаяВыборка, ДополнительныеДанные, Уровень)
	
	Если ДополнительныеДанные.ВидДерева = "ОтслеживаемыеЗадачи" Или ДополнительныеДанные.ВидДерева = "ЗадачиНаМне" Тогда		
		Если Уровень = "Детали" Тогда
			Если ЗначениеЗаполнено(ТекущаяВыборка.СрокРеализации) Тогда
				ПредставлениеСрока = Формат(ТекущаяВыборка.СрокРеализации, "ДФ=dd.MM.yy");
				НоваяСтрока[ДополнительныеДанные.ПолеПредставлениеОбъекта] = СтрШаблон("%1 (Срок: %2)",
					ТекущаяВыборка[ДополнительныеДанные.ПолеПредставлениеОбъекта], ПредставлениеСрока);
			КонецЕсли;
		ИначеЕсли Уровень = "Роль" Тогда
			НоваяСтрока.ИндексКартинки = Справочники.СтатусыОбъектов.ИндексКартинкиГруппа();
		КонецЕсли;  
	ИначеЕсли ДополнительныеДанные.ВидДерева = "УправлениеНагрузкой" Тогда   
		Обработки.УправлениеНагрузкой.ДополнительнаяОбработкаСтрокиДерева(НоваяСтрока, 
			ТекущаяВыборка, ДополнительныеДанные, Уровень); 
	ИначеЕсли ДополнительныеДанные.ВидДерева = "ТекущиеРазработкиПоЗаявкам" Тогда 
		Обработки.ТекущиеРаботыПоЗаявкам.ДополнительнаяОбработкаСтрокиДерева(НоваяСтрока, 
			ТекущаяВыборка, ДополнительныеДанные, Уровень);		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработатьУдалениеСтроки(Строка, ДополнительныеДанные) 
	
	Если ДополнительныеДанные.ВидДерева = "УправлениеНагрузкой" Тогда   
		Если Строка.Родитель <> Неопределено Тогда			
			Обработки.УправлениеНагрузкой.ПересчетДанныхРодителя(Строка.Родитель, Строка, -1, ДополнительныеДанные);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ВывестиВДеревоГруппу(Родитель, Выборка, Представление, ИндексКартинки, КэшСтрок, ИмяГруппировки, ДополнительныеДанные)
	
	РодительДерево = ТипЗнч(Родитель) = Тип("ДеревоЗначений"); 	
	РодительUID = ?(РодительДерево, "ДеревоЗначений", Родитель.UID); 
	UID = ОбщегоНазначенияВызовСервера.ХэшСумма(РодительUID + Представление, Истина);
	НоваяСтрокаГруппы = Неопределено;
	
	Если ДополнительныеДанные.Перезаполнение Тогда
		ДанныеКэша = Неопределено;
		КэшСтрок.Свойство("_" + UID, ДанныеКэша); 
		
		Если ДанныеКэша <> Неопределено Тогда
			НоваяСтрокаГруппы = Родитель.Строки.Найти(UID, "UID");	
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяСтрокаГруппы = Неопределено Тогда 
		КоллекцияЭлементов = Родитель.Строки; 				
		НоваяСтрокаГруппы = КоллекцияЭлементов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаГруппы, Выборка);
		НоваяСтрокаГруппы[ДополнительныеДанные.ПолеПредставлениеОбъекта] = Представление;
		НоваяСтрокаГруппы.ИндексКартинки = ИндексКартинки;
		НоваяСтрокаГруппы.UID = UID;
		НоваяСтрокаГруппы.ЭтоГруппа = Истина;   
		ДополнительнаяОбработкаСтрокиДерева(НоваяСтрокаГруппы, Выборка, ДополнительныеДанные, ИмяГруппировки);							

		МассивРодителей = Новый Массив;
		
		Если ДополнительныеДанные.Перезаполнение И ДополнительныеДанные.ВидДерева = "УправлениеНагрузкой" 
				И ИмяГруппировки = "Сотрудник" Тогда
			// При создании	новой строки родителя в рамках перезаполнения, в ней уже актуальные данные, перезаполнять их не надо
			ДополнительныеДанные.Вставить("ПересчетРодителя", Ложь);
		КонецЕсли;
		
		Если НЕ РодительДерево Тогда				
			КэшРодителя = Неопределено;  
			КэшСтрок.Свойство("_" + Родитель.UID, КэшРодителя);
			Для Каждого Элемент Из КэшРодителя Цикл
				МассивРодителей.Добавить(Элемент);
			КонецЦикла;   
			МассивРодителей.Добавить(Родитель.UID);		
		КонецЕсли;
		
		КэшСтрок.Вставить("_" + UID, МассивРодителей); 
		
		Если ДополнительныеДанные.Перезаполнение Тогда
			Если ДополнительныеДанные.СтрокиКСортировке.Получить(РодительUID) = Неопределено Тогда 
				ДополнительныеДанные.СтрокиКСортировке.Вставить(РодительUID, Родитель);	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;  
	
	Возврат НоваяСтрокаГруппы;
	
КонецФункции

#КонецОбласти
