///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции работы с трудозатратами и всем, что
// с ними связано.
//
// - Трудозатраты.
// - Документ "Фиксация трудозатрат".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Трудозатраты

// Выводит данные по трудозатратам на форму.
//
// Параметры:
//  ДанныеПоТрудозатратам	 - Структура
//  Форма					 - УправляемаяФорма - форма, вызвавшая процедуру. 
//  Подчиненные				 - Булево - получать затраты по всем объектам, подчиненным текущему.
//  ОбновитьОбщиеЗатраты	 - Булево - признак необходимости обновления общих трудозатрат.
//                         		Применимо по отношению к заявке.
//  ОбновитьСтоимость 	     - Булево - признак необходимости обновления стоимости заявки.//
Процедура ОбновитьДанныеПоТрудозатратамНаФорме(ДанныеПоТрудозатратам, Форма, Знач Подчиненные = Ложь, Знач ОбновитьСтоимость = Ложь)
	
	Форма["УправлениеТрудозатратами_HTMLПредставление"] = ДанныеПоТрудозатратам.ТабличныйДокумент;
	Форма.ФактическиеЗатратыВремени = ДанныеПоТрудозатратам.ТрудозатратыФактическиеВсе;
	Форма.ФактическиеТрудозатратыКоманд = ДанныеПоТрудозатратам.ТрудозатратыПоКомандам;
	
	Если ОбновитьСтоимость Тогда
		Форма.СтоимостьЗаявки = ДанныеПоТрудозатратам.Стоимость;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ФактическиеТрудозатратыОбщие") <> Неопределено Тогда
		Если ТипЗнч(Форма.Параметры.Ключ) = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
			ОбщиеТрудозатраты = ДанныеПоТрудозатратам.КоличествоЧасов + ДанныеПоТрудозатратам.ОбщиеТрудозатратыПоОбъекту;
		Иначе
			ОбщиеТрудозатраты = ДанныеПоТрудозатратам.КоличествоЧасов;
		КонецЕсли;
		
		Форма.ФактическиеТрудозатратыОбщие = ОбщиеТрудозатраты;
	КонецЕсли;
	
	ФильтрПоСтатусам = Форма.УправлениеТрудозатратами_ЗначенияФильтров;
	ФильтрПоСтатусам.Очистить();
	
	Для Каждого Элемент Из ДанныеПоТрудозатратам.ЗначенияФильтра Цикл
		ФильтрПоСтатусам.Добавить(Элемент.Значение, Элемент.Представление);
	КонецЦикла;
	
	Если ДанныеПоТрудозатратам.ЗначенияФильтра.НайтиПоЗначению(Форма.УправлениеТрудозатратами_ФильтрТрудозатрат) = Неопределено Тогда
		Форма.УправлениеТрудозатратами_ФильтрТрудозатрат = УчетТрудозатратКлиентСервер.ЗначенияФильтраТрудозатрат().Общие;
	КонецЕсли;
	
	Если Подчиненные = Истина Тогда
		Форма.ФактическиеТрудозатратыПоОбъекту = ДанныеПоТрудозатратам.ОбщиеТрудозатратыПоОбъекту;
	КонецЕсли; 

КонецПроцедуры

// Получает из информационной базы сумму затраченного времени и выводит данные на форму.
//
// Параметры:
//  Форма       - УправляемаяФорма - форма, вызвавшая процедуру.
//  Подчиненные - Булево - получать затраты по всем объектам, подчиненным текущему.
//  ОбновитьОбщиеЗатраты - Булево - признак необходимости обновления общих трудозатрат.
//                         Применимо по отношению к заявке.
//  ОбновитьСтоимость    - Булево - признак необходимости обновления стоимости заявки.
//
Процедура ОбновитьОбщиеФактическиеТрудозатраты(Форма, Знач Подчиненные = Ложь, Знач ОбновитьОбщиеЗатраты = Истина, Знач ОбновитьСтоимость = Ложь, Знач ИмяФормы = "") Экспорт
	
	ДанныеПоТрудозатратам = УчетТрудозатратВызовСервера.ПолучитьДанныеПоТрудозатратам(
		Форма.Параметры.Ключ, Подчиненные, Форма.УправлениеТрудозатратами_ФильтрТрудозатрат, ОбновитьСтоимость, ИмяФормы);
	
	ОбновитьДанныеПоТрудозатратамНаФорме(ДанныеПоТрудозатратам, Форма, Подчиненные, ОбновитьСтоимость);
	
КонецПроцедуры

Процедура ОбработатьВыборВидаДеятельности(Знач ВыбранноеЗначение, ВидДеятельности, Услуга, Знач ХэшВидДеятельностиУслуга) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ДанныеСтроки = ХэшВидДеятельностиУслуга.Получить(ВыбранноеЗначение);
		
		Если ДанныеСтроки <> Неопределено Тогда
			ВидДеятельности = ДанныеСтроки.ВидДеятельности;
			Услуга = ДанныеСтроки.Услуга;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
		
// Процедура-обработчик команд программно-генерируемой вкладки "Трудозатраты".
//
// Параметры:
//  Форма        - УправляемаяФорма - форма-источник команды.
//  ИмяКоманды   - Строка - имя выполняемой команды.
//  ДопПараметры - Произвольный - значение любого типа, которое содержим вспомогательные
//                 данные для выполнения команды.
//
Функция ОбработатьКомандуИнтерфейсаУправленияТрудозатратами(Форма, Знач ИмяКоманды, 
		ДопПараметры = Неопределено, Знач ОписаниеОповещения = Неопределено) Экспорт
	
	Результат = Истина;
	
	Если ДопПараметры = "По команде" Тогда
		ПоказатьПредупреждение(, "Этот пункт не предназначен для выбора. Требуется выбрать определенную команду из списка доступных");
		Результат = Ложь;
		
	ИначеЕсли ДопПараметры = "По сотруднику" Тогда
		ПоказатьПредупреждение(, "Этот пункт не предназначен для выбора. Требуется выбрать определенного сотрудника из списка доступных");
		Результат = Ложь;
		
	ИначеЕсли ДопПараметры <> Неопределено Тогда
		Форма.УправлениеТрудозатратами_ФильтрТрудозатрат = ДопПараметры;
	КонецЕсли;
	
	Если ИмяКоманды = "УправлениеТрудозатратами_Добавить" ИЛИ ИмяКоманды = "ДобавитьФактическиеТрудозатраты" Тогда
		ОткрытьОкноДобавленияТрудозатрат(Форма);
		
	ИначеЕсли ИмяКоманды = "УправлениеТрудозатратами_МассовоеЗанесениеТрудозатрат" Тогда 
		ОткрытьОкноМассовоеЗанесениеТрудозатрат(Форма, ОписаниеОповещения);
			
	ИначеЕсли ИмяКоманды = "УправлениеТрудозатратами_ОбновитьДанные" Тогда
		Если ДопПараметры = Неопределено Тогда
			ДопПараметры = Ложь;
		КонецЕсли;
		
		ОбновитьОбщиеФактическиеТрудозатраты(Форма, ДопПараметры);  
		
	ИначеЕсли ИмяКоманды = "УправлениеТрудозатратами_Сортировать" Тогда  	
		СортироватьПоВозрастанию = УчетТрудозатратВызовСервера.ИнвертироватьНастройкуСортировкиСпискаТрудозатрат();
		
	ИначеЕсли ИмяКоманды = "УправлениеТрудозатратами_ОткрытьОтчет" ИЛИ ИмяКоманды = "ОткрытьОтчетПоФактическимТрудозатратам" Тогда
		ПечатьОтчетаПоФактическимТрудозатратам(Форма);   
		
	ИначеЕсли ИмяКоманды = СобытияОповещенияКлиент.ИмяСобытияНажатиеСтоимостьЗаявки() Тогда
		ОткрытьОтчетСтоимостиОбъекта(Форма, "заявки"); 
		
	ИначеЕсли ИмяКоманды = СобытияОповещенияКлиент.ИмяСобытияНажатиеСтоимостьВнутреннегоЗадания() Тогда
		ОткрытьОтчетСтоимостиОбъекта(Форма, "внутреннего задания");   
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура - Открывает форму добавления трудозатрат через контекстное меню
//
// Параметры:
//  ТекущиеДанные - ДанныеФормыЭлементДерева - Текущие данные строки при вызове контекстного меню
//  УникальныйИдентификатор - УникальныйИдетификатор - Уникальный идетификтаор обработки 
//
Процедура ОткрытьФормуДобавленияТрудозатратВКонтекстномМеню(Знач ТекущиеДанные, Знач УникальныйИдентификатор) Экспорт
	
	Если ТекущиеДанные.Свойство("Ссылка") Тогда
		ОбъектСсылка = ТекущиеДанные.Ссылка;
	ИначеЕсли ТекущиеДанные.Свойство("Задача") Тогда
		ОбъектСсылка = ТекущиеДанные.Задача;
	Иначе
		ОбъектСсылка = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда	
		ПараметрыОткрытия = Новый Структура("Объект, СкрытьСлужебныеПоля", ОбъектСсылка, Истина);
		
		// Для внутренних трудозатрат необходимо получить Вид Деятельности
		ТипСсылки = ТипЗнч(ОбъектСсылка);
		Если ТипСсылки = Тип("ДокументСсылка.ВнутренниеТрудозатраты") Тогда
			ВидДеятельности = УчетТрудозатратВызовСервера.ПолучитьВидДеятельностиВнутреннихТрудозатрат(ОбъектСсылка);
			ПараметрыОткрытия.Вставить("ВидДеятельности", ВидДеятельности);
		КонецЕсли;
		
		ОткрытьФорму("Документ.Трудозатраты.ФормаОбъекта", ПараметрыОткрытия, ,
			УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

// Общий обработчик команды добавления трудозатрат.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из которой была вызвана данная процедура.
// 
Процедура ОткрытьОкноМассовоеЗанесениеТрудозатрат(Знач Форма, Знач ОписаниеОповещения) Экспорт
	
	Ссылка = Форма.Параметры.Ключ;
	Если Ссылка.Пустая() ИЛИ Форма.Модифицированность Тогда
		ПоказатьПредупреждение(, "Перед добавлением трудозатрат необходимо сохранить изменения.", , "Трудозатраты");
	Иначе                                  
		
		Сотрудники = Новый СписокЗначений;
		
		Для Каждого Строка Из Форма.Участники Цикл
			Сотрудники.Добавить(Строка.Пользователь, Строка.Пользователь, Строка.Активный);
		КонецЦикла; 
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Объект", Ссылка);
		ПараметрыОткрытия.Вставить("ВидДеятельности", Форма.Объект.ВидДеятельности);
		ПараметрыОткрытия.Вставить("Сотрудники", Сотрудники); 	
			
		ОткрытьФорму("Документ.Трудозатраты.Форма.МассовоеЗанесениеТрудозатрат", ПараметрыОткрытия, ЭтотОбъект, 
			Форма.УникальныйИдентификатор, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик поля HTML-документа с представлением трудозатрат объекта.
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - форма-источник события.
//  ДанныеСобытия		 - Произвольный		 - данные события из поля HTML-документа.
//  СтандартнаяОбработка - Булево			 - признак выполнения стандартной обработки.
//  ОписаниеОповещения	 - ОписаниеОповещения	 - описание оповещение на нажатие поля html					 -
//
Процедура ПриНажатииПоляHTMLУправленияТрудозатратами(Форма, ДанныеСобытия, СтандартнаяОбработка, ОписаниеОповещения = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда
		НачалоВхождения = СтрНайти(ДанныеСобытия.Href, "sdms_user_");
		
		Если НачалоВхождения > 0 Тогда
			Идентификатор = Сред(ДанныеСобытия.Href, НачалоВхождения + 10);
			ИдентификаторПользователя = Новый УникальныйИдентификатор(Идентификатор);
			
			ИнтерфейсПриложенияКлиент.ОткрытьИнформациюОПользователе(Форма, ИдентификаторПользователя, СтандартнаяОбработка);
		Иначе   
			Команда = ДанныеСобытия.Href;
			ОбработатьКомандуПоляHTMLТрудозатраты(Форма, Команда, СтандартнаяОбработка, ОписаниеОповещения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается программно при смене страницы панели, где существует страница
// управления трудозатратами. Если пользователь переключает страницу на
// "Трудозатраты", необходимо заполнить содержимое поля "HTMLТрудозатраты".
//
// Параметры:
//  Форма                  - УправляемаяФорма - форма, из которой была вызвана данная процедура.
//  ПанельСтраниц          - ГруппаФормы - панель страниц.
//  ДополнительныеСвойства - Структура - дополнительные свойства формы.
//  Подчиненные            - Булево - указывает на необходимость посчитать общие
//                           трудозатраты по текущему объекту и всем подчиненным.
//
Процедура ПриПереключенииСтраницПанели(Форма, ПанельСтраниц, ДополнительныеСвойства, Подчиненные = Ложь) Экспорт
	
	СтраницаТрудозатрат = Форма.Элементы["УправленияТрудозатратами_ОсновнаяСтраница"];
	Черновик = ДополнительныеСвойства.Свойство("Черновик") И ДополнительныеСвойства.Черновик = Истина;
	
	Если ПанельСтраниц.ТекущаяСтраница = СтраницаТрудозатрат Тогда
		Если НЕ Форма.Параметры.Ключ.Пустая() И НЕ Черновик Тогда
			ОбновитьОбщиеФактическиеТрудозатраты(Форма, Подчиненные, Ложь, , Форма.ИмяФормы);
			ДополнительныеСвойства.АктивнаяСтраницаПанели = СтраницаТрудозатрат;
		Иначе
			ЧастьПредупреждения = ?(Черновик, "перевести заявку из черновика", "сохранить данные");
			ПанельСтраниц.ТекущаяСтраница = ДополнительныеСвойства.АктивнаяСтраницаПанели;
			ПоказатьПредупреждение(, СтрШаблон("Перед добавлением информации о трудозатратах необходимо %1.", ЧастьПредупреждения), , "Трудозатраты");
		КонецЕсли;
	Иначе
		ДополнительныеСвойства.АктивнаяСтраницаПанели = ПанельСтраниц.ТекущаяСтраница;
	КонецЕсли;	
	
КонецПроцедуры

// Устанавливает активной вкладку трудозатрат
//
// Параметры:
//  СтандартнаяОбработка - Булево - флаг стандартной обработки
//  Форма				 - УправляемаяФорма - форма объекта 
//  ИмяЭлемента			 - Строка - Имя нажатого элемента 
//
Процедура ПереключитьНаВкладкуТрудозатрат(СтандартнаяОбработка, Форма, Знач ИмяЭлемента) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗначенияФильтра = УчетТрудозатратКлиентСервер.ЗначенияФильтраТрудозатрат();
	ВидТрудозатрат = ?(ИмяЭлемента = "ФактическиеТрудозатраты", ЗначенияФильтра.Общие, ЗначенияФильтра.ПоКомандам);
	
	Ссылка = Форма.Объект.Ссылка;
	ИмяСтраницы = "СтраницыДокумента"; 
		
	Форма.УправлениеТрудозатратами_ФильтрТрудозатрат = ВидТрудозатрат;	
	
	Элементы = Форма.Элементы;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда	
		ШаблонИмениКнопкиСтраницы = ПанельНавигацииКлиентСервер.ШаблонИмениКнопкиСтраницы();	
		ИмяКоманды = СтрШаблон(ШаблонИмениКнопкиСтраницы, Элементы["УправленияТрудозатратами_ОсновнаяСтраница"].Имя);
		ПанельНавигацииКлиент.НажатиеВнеПанели(Форма, ИмяКоманды);
	Иначе 
		Элементы[ИмяСтраницы].ТекущаяСтраница = Элементы.УправленияТрудозатратами_ОсновнаяСтраница;
		ПриПереключенииСтраницПанели(Форма, Элементы[ИмяСтраницы], Форма.ДополнительныеСвойства);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьЗаголовокТрудозатрат(ЭлементФормы) Экспорт
	
	// Обновление гиперссылки на отчет трудозатрат.
	Результат = УчетТрудозатратВызовСервера.ПолучитьЗаголовокГиперссылкиТрудозатрат();
	Если Результат.Заголовок = ЭлементФормы.Заголовок Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементФормы.Заголовок = Результат.Заголовок;
	Если Результат.Свойство("Цвет") Тогда  
		ЭлементФормы.ЦветТекста = Результат.Цвет;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Документ "Фиксация трудозатрат"

// Проверяет установленную в поле выбора даты записи трудозатрат дату,
// если дата не удовлетворяет условиям сбрасывает дату в текущую дату
// и выводит предупреждение.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из которой была вызвана данная процедура.
//  ПолеДата - ПолеФормы - поле формы в которой хранится значение даты записи трудозатрат.
//  РеквизитДата - Дата - реквизит формы, данные для поля формы.
//  РазрешенныйПериод - Структура - структура со свойствами.
//  	* НачалоПериода - Дата - минимальная разрешенная дата
//  	* КонецПериода - Дата - максимальная разрешенная дата
//  	* ТекущаяДатаСеанса - Дата - дата полученная методом ТекущаяДатаСеанса()
//
Процедура ПроверитьКорректностьДаты(Форма, ПолеДата, РеквизитДата, Знач РазрешенныйПериод) Экспорт
	
	УстановленнаяДата = НачалоДня(РеквизитДата);
	
	Если УстановленнаяДата > РазрешенныйПериод.КонецПериода 
		ИЛИ УстановленнаяДата < РазрешенныйПериод.НачалоПериода Тогда
			
		ТекстПредупреждения = УчетТрудозатратКлиентСервер.ТекстПредупрежденияОграниченияПериодаТрудозатрат(
			РазрешенныйПериод);
			
		ПоказатьПредупреждение(, ТекстПредупреждения, , "Ошибка");
		
		РеквизитДата = РазрешенныйПериод.ТекущаяДатаСеанса;
		Форма.ТекущийЭлемент = ПолеДата;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Внесение данных о трудозатратах в разрезе спринтов

// Открывает форму планового времени по спринтам
//
// Параметры:
//  Форма	 - УправляемаяФорма	 - форма объекта
//
Процедура ОткрытьФормуПлановогоВремениПоСпринтам(Знач Форма, Знач ТипТрудозатрат = Неопределено, 
			Знач ПлановыеТрудозатраты = Истина) Экспорт
			
	Если НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Внесение плана невозможно. Запишите документ.");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеПлановогоВремениПоСпринтам", Форма, ТипТрудозатрат); 
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Объект", Форма.Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ПолучитьПлановыеТрудозатраты", ПлановыеТрудозатраты);  
	
	Если ТипТрудозатрат <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("ТипТрудозатрат", ТипТрудозатрат);	
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.ПланируемыеТрудозатратыПоСпринтам.Форма.ФормаВнесенияТрудозатрат", ПараметрыОткрытия, Форма, 
		Форма.УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры 

// Открывает форму выбора спринтов
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - форма объекта
//  ПараметрыОткрытия	 - Структура		 - структура параметров открытия формы
//
Процедура ОткрытьФормуВыбораСпринта(Знач Форма, ПараметрыОткрытия) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выбор спринта невозможен. Запишите документ.");
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("Дата", ТекущаяДата());	
	ПараметрыОткрытия.Вставить("Объект", Форма.Объект.Ссылка); 
		
	Оповещение = Новый ОписаниеОповещения("СпринтОбработкаВыбора", Форма);
			
	ОткрытьФорму("Документ.Спринт.Форма.ФормаВыбораНесколькихСпринтов", ПараметрыОткрытия, Форма,
		,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры 
	
Процедура ОбработатьЗакрытиеПлановогоВремениПоСпринтам(Результат, ЭтотОбъект, ПланТрудозатрат) Экспорт   
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	ПланТрудозатрат = Результат.Трудозатраты;  
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Трудозатраты

// Общий обработчик расшифровки табличного документ с трудозатратами.
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - форма, из которой была вызвана данная процедура.
//  Команда				 - Произвольный		 - данные расшифровки.
//  СтандартнаяОбработка - Булево			 - Признак стандартной обработки
//
Процедура ОбработатьКомандуПоляHTMLТрудозатраты(Форма, Команда, СтандартнаяОбработка, ОписаниеОповещения = Неопределено) 
	
	НайденныйСимвол = СтрНайти(Команда, "#");
	ИмяКоманды = Неопределено;
	ЗначениеФильтра = Неопределено;
	
	Если НайденныйСимвол > 0 Тогда  
		
		КомандаHTML = Сред(Команда, НайденныйСимвол + 1, СтрДлина(Команда) - НайденныйСимвол);
			
		Если СтрНайти(КомандаHTML, "index_") > 0 Тогда                                       
			Индекс = Число(СтрЗаменить(КомандаHTML, "index_", ""));
			ЗначениеФильтра = Форма.УправлениеТрудозатратами_ЗначенияФильтров.Получить(Индекс).Значение;
			ИмяКоманды = "УправлениеТрудозатратами_ФильтрТрудозатрат";
		ИначеЕсли КомандаHTML = "new" Тогда
			ИмяКоманды = "УправлениеТрудозатратами_Добавить";
		ИначеЕсли КомандаHTML = "multi_new" Тогда
			ИмяКоманды = "УправлениеТрудозатратами_МассовоеЗанесениеТрудозатрат";
		ИначеЕсли КомандаHTML = "refresh" Тогда
			ИмяКоманды = "УправлениеТрудозатратами_ОбновитьДанные";
		ИначеЕсли КомандаHTML = "list" Тогда
			ИмяКоманды = "УправлениеТрудозатратами_ОткрытьОтчет";
		ИначеЕсли КомандаHTML = "sort" Тогда
			ИмяКоманды = "УправлениеТрудозатратами_Сортировать";
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяКоманды <> Неопределено Тогда 
		Результат = ОбработатьКомандуИнтерфейсаУправленияТрудозатратами(Форма, ИмяКоманды, ЗначениеФильтра, ОписаниеОповещения);
		
		Если НЕ Результат Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	Иначе
		УникальныйИдентификаторСсылки = Прав(Команда, 36);		
		ДокументСсылка = УчетТрудозатратВызовСервера.ПолучитьКлючЗаписи(УникальныйИдентификаторСсылки);
		
		Если СтрНайти(Команда, "#edit-") > 0 Тогда
			ПараметрыОткрытия = Новый Структура("Ключ, СкрытьСлужебныеПоля", ДокументСсылка, Истина);
			ОткрытьФорму("Документ.Трудозатраты.ФормаОбъекта", ПараметрыОткрытия, Форма, Форма.УникальныйИдентификатор);
			
		ИначеЕсли СтрНайти(Команда, "#delete-") > 0 Тогда
			ТекстВопроса = "Выбранная запись будет удалена без возможности восстановления.
				|Продолжить?";	
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветНаВопросУдаленияТрудозатрат", УчетТрудозатратКлиент,
				Новый Структура("Форма, КлючЗаписи", Форма, ДокументСсылка));			
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, 
				"Удаление трудозатрат");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик ответа на вопроса об удалении трудозатрат.
//
// Параметры:
//  Результат - Произвольный - результат выполнения процедуры ПоказатьВопрос().
//  Параметры - Произвольный - дополнительные параметры, которые были указаны
//              при создании объекта ОписаниеОповещения.
//
Процедура ОбработатьОтветНаВопросУдаленияТрудозатрат(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		// Удаление трудозатрат
		УчетТрудозатратВызовСервера.УдалитьТрудозатраты(Параметры.КлючЗаписи);
		
		// Обновление представления
		ОбновитьОбщиеФактическиеТрудозатраты(Параметры.Форма);
		
		// Отправка оповещения связанной форме
		Оповестить(СобытияОповещенияКлиент.ИмяСобытияДобавленияТрудозатрат(), Параметры.Форма.Параметры.Ключ, Параметры.КлючЗаписи);		
	КонецЕсли;		
	
КонецПроцедуры

// Общий обработчик команды добавления трудозатрат.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из которой была вызвана данная процедура.
// 
Процедура ОткрытьОкноДобавленияТрудозатрат(Знач Форма)
	
	Ссылка = Форма.Параметры.Ключ;
	Если Ссылка.Пустая() ИЛИ Форма.Модифицированность Тогда
		ПоказатьПредупреждение(, "Перед добавлением трудозатрат необходимо сохранить изменения.", , "Трудозатраты");
	Иначе
		ПараметрыОткрытия = Новый Структура("Объект, СкрытьСлужебныеПоля", Ссылка, Истина);
		
		// Для задачи и внутреннего задания необходимо передать роль пользователя,
		// чтобы руководитель ИТ мог самостоятельно заносить трудозатраты сотрудников.
		ТипСсылки = ТипЗнч(Ссылка);
		Если ТипСсылки = Тип("ДокументСсылка.ВнутреннееЗадание") ИЛИ ТипСсылки = Тип("ДокументСсылка.Задача") Тогда
			ПараметрыОткрытия.Вставить("РольПользователя", Форма.РольПользователя);
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВнутренниеТрудозатраты") Тогда
			ПараметрыОткрытия.Вставить("ВидДеятельности", Форма.Объект.ВидДеятельности);
		КонецЕсли;
		
		ОткрытьФорму("Документ.Трудозатраты.ФормаОбъекта", ПараметрыОткрытия, Форма,
			Форма.УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму отчета по стоимости объекта.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из которой была вызвана данная процедура.
//  КраткоеПредставлениеОбъектаМетаданных - Строка - Представление объекта метаданных в родительном падеже, отображаемое в предупреждении
//		об отсутствии фактических затрат. Например: "заявки", "внутреннего задания"
Процедура ОткрытьОтчетСтоимостиОбъекта(Знач Форма, КраткоеПредставлениеОбъектаМетаданных)
	
	ТекстПредупреждения = СтрШаблон("Нет фактических трудозатрат для расчета стоимости %1.", КраткоеПредставлениеОбъектаМетаданных);
	ЗаголовокПредупреждения = СтрШаблон("Отчет ""Стоимость %1""", КраткоеПредставлениеОбъектаМетаданных);
	
	СсылкаНаОбъект = Форма.Параметры.Ключ;
	
	ПоказатьПредупреждение = СсылкаНаОбъект.Пустая();
	
	Если НЕ СсылкаНаОбъект.Пустая() Тогда
		Результат = УчетТрудозатратВызовСервера.ПолучитьДанныеДляОтчетаСтоимостиОбъекта(СсылкаНаОбъект, КраткоеПредставлениеОбъектаМетаданных);
		ПоказатьПредупреждение = Результат.Пустой;
		
		Если НЕ Результат.Пустой Тогда
			ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", Результат, , Форма.УникальныйИдентификатор, , , ,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
	Если ПоказатьПредупреждение Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения, , ЗаголовокПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура печати отчета по трудозатратам.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, из которой была вызвана данная процедура.
//
Процедура ПечатьОтчетаПоФактическимТрудозатратам(Знач Форма)
	
	ТекстСообщения = "Нет данных о фактических трудозатратах.";
	Заголовок = "Печать отчета";
	СсылкаНаОбъект = Форма.Параметры.Ключ;
	
	ПоказатьПредупреждение = СсылкаНаОбъект.Пустая();
	
	Если НЕ СсылкаНаОбъект.Пустая() Тогда
		Результат = УчетТрудозатратВызовСервера.ПолучитьДанныеДляОтчета(СсылкаНаОбъект);
		ПоказатьПредупреждение = Результат.Пустой;
		
		Если НЕ Результат.Пустой Тогда
			ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", Результат, , Форма.УникальныйИдентификатор, , , ,
				РежимОткрытияОкнаФормы.Независимый);
		КонецЕсли;
	КонецЕсли;	
	
	Если ПоказатьПредупреждение Тогда
		ПоказатьПредупреждение(, ТекстСообщения, , Заголовок);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти
