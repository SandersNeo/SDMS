///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура ПриНачалеРаботыСистемы(Данные) Экспорт
	
	Если ОкноВнешнегоСайта.Доступно Тогда
		ПараметрыПриложения.Вставить("ДанныеДляВнешнегоСайта", Данные.ДанныеДляВнешнегоСайта);
		ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьМенюИнструментов", 0.1, Истина);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПолучениеСообщенияВнешнегоСайта", ЭтотОбъект);
		ОкноВнешнегоСайта.ПодключитьОбработчикСообщений(ОписаниеОповещения);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуАвтосохранений", АвтосохраненияДанныхКлиент);
		
		Если Данные.КоличествоАвтосохранений > 0 Тогда
			ТекстОповещения = "Найдены незаписанные описания объектов.";
			ПоказатьОповещениеПользователя("Сохраненные описания", ОписаниеОповещения, ТекстОповещения,
				БиблиотекаКартинок.Информация32, СтатусОповещенияПользователя.Важное);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии(Форма) Экспорт
	
	Если ОкноВнешнегоСайта.Доступно Тогда
		ОткрытыеИнструменты = ПараметрыПриложения.Получить("ОткрытыеИнструменты");
		ОткрытыеИнструменты.Вставить(Строка(Форма.УникальныйИдентификатор), Форма);
	Иначе
		Форма.ОбновитьДанныеИнструмента();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытии(ЗавершениеРаботы, УникальныйИдентификатор) Экспорт
	
	Если НЕ ЗавершениеРаботы И ОкноВнешнегоСайта.Доступно Тогда
		ОткрытыеИнструменты = ПараметрыПриложения.Получить("ОткрытыеИнструменты");
		ОткрытыеИнструменты.Удалить(Строка(УникальныйИдентификатор));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещения(Форма) Экспорт
	
	Если Форма.ВводДоступен() Тогда
		ОбновитьДанныеИнструмента(Форма, Форма[УправлениеИнструментамиРазработкиКлиентСервер.ИмяРеквизитаСтраницаИнструмента()]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакончитьОбновлениеИнструмента(Форма, ДополнительныеПараметры, УИДЗамера) Экспорт
	
	Если ОкноВнешнегоСайта.Доступно Тогда
		ДанныеДляВнешнегоСайта = Новый Структура;
		ДанныеДляВнешнегоСайта.Вставить("method", "endUpdateAnimation");
		ДанныеДляВнешнегоСайта.Вставить("id", Строка(Форма.УникальныйИдентификатор));
		ДанныеДляВнешнегоСайта.Вставить("tableName", ДополнительныеПараметры.ОбновляемаяТаблица);
		
		ОтправитьСообщениеСайту(ДанныеДляВнешнегоСайта);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Неопределено, ДополнительныеПараметры.АдресРезультата);
	
	УведомленияКлиента.ОтключитьОбработчик(ДополнительныеПараметры.Ключ);
	
	Если ДополнительныеПараметры.Свойство("ИмяЗапасногоМетода") Тогда
		Форма.ОтключитьОбработчикОжидания(ДополнительныеПараметры.ИмяЗапасногоМетода);
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеИнструмента(ДанныеФормы, Данные, МетодОбновления) Экспорт
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремениТехнологический(Ложь, МетодОбновления + ".ЗаполнениеТаблицы");
	ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(УИДЗамера, Строка(Данные.УИДЗамера));
	
	ТипДанных = ТипЗнч(ДанныеФормы);
	
	Если ТипДанных = Тип("ТабличныйДокумент") Тогда
		ДанныеФормы = Данные.ДанныеДерева;
	ИначеЕсли ТипДанных = Тип("Строка") Тогда
		ДанныеФормы = Данные.ДанныеДерева;
	Иначе
		ДанныеФормы.Очистить();
		ЗаполнитьДанныеИнструментаРекурсивно(ДанныеФормы, Данные.ДанныеДерева);
	КонецЕсли;
	
	Если Данные.Свойство("ДанныеСчетчика") Тогда
		ОбновитьЗначениеСчетчика(Данные.ДанныеСчетчика);
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
	
КонецПроцедуры

Процедура НачатьОбновлениеИнструмента(Форма, МетодОбновления, ПараметрыМетода, ОбновляемаяТаблица, ДополнительныеПараметры = Неопределено, ИмяЗапасногоМетода = "") Экспорт
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремениТехнологический(Ложь, МетодОбновления);
	УИДЗамераЗапуска = ОценкаПроизводительностиКлиент.НачатьЗамерВремениТехнологический(Ложь, МетодОбновления + ".ЗапускОбновления");
	КлючУведомления = СтрШаблон("%1.%2", Строка(Форма.УникальныйИдентификатор), МетодОбновления);
	
	ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(УИДЗамера, Строка(УИДЗамера));
	ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(УИДЗамераЗапуска, Строка(УИДЗамера));
	
	АдресРезультата = Форма[УправлениеИнструментамиРазработкиКлиентСервер.ИмяРеквизитаРезультат(ОбновляемаяТаблица)];
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("Ключ", КлючУведомления);
	ДополнительныеПараметры.Вставить("ОбновляемаяТаблица", ОбновляемаяТаблица);
	ДополнительныеПараметры.Вставить("АдресРезультата", АдресРезультата);
	ДополнительныеПараметры.Вставить("ИмяЗапасногоМетода", ИмяЗапасногоМетода);
	ДополнительныеПараметры.Вставить("МетодОбновления", МетодОбновления);
	
	ОбработчикОбновления = Новый ОписаниеОповещения("ОбработчикОбновленияИнструмента", Форма, ДополнительныеПараметры);
	УведомленияКлиента.ПодключитьОбработчик(КлючУведомления, ОбработчикОбновления);
	
	ПараметрыМетода.Добавить(АдресРезультата);
	ПараметрыМетода.Добавить(УИДЗамера);
	
	ЗаданиеЗапущено = ИнструментыВызовСервера.ЗапуститьФоновоеЗадание(МетодОбновления, ПараметрыМетода, КлючУведомления);
	
	Если ЗаданиеЗапущено Тогда
		ИдентификаторСтраницы = Форма[УправлениеИнструментамиРазработкиКлиентСервер.ИмяРеквизитаСтраницаИнструмента()];
		
		Если ОкноВнешнегоСайта.Доступно И ЗначениеЗаполнено(ИдентификаторСтраницы) Тогда
			ДанныеДляВнешнегоСайта = Новый Структура;
			ДанныеДляВнешнегоСайта.Вставить("method", "startUpdateAnimation");
			ДанныеДляВнешнегоСайта.Вставить("page", ИдентификаторСтраницы);
			ДанныеДляВнешнегоСайта.Вставить("tableName", ОбновляемаяТаблица);
			ДанныеДляВнешнегоСайта.Вставить("id", Строка(Форма.УникальныйИдентификатор));
			
			ОтправитьСообщениеСайту(ДанныеДляВнешнегоСайта);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяЗапасногоМетода) Тогда
			Форма.ПодключитьОбработчикОжидания(ИмяЗапасногоМетода, 2, Истина);
		КонецЕсли;
		
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамераЗапуска);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьЗначениеСчетчика(ДанныеСчетчика) Экспорт
	
	Если ОкноВнешнегоСайта.Доступно И ЗначениеЗаполнено(ДанныеСчетчика.id) Тогда
		ДанныеДляВнешнегоСайта = Новый Структура;
		ДанныеДляВнешнегоСайта.Вставить("method", "updateCounters");
		ДанныеДляВнешнегоСайта.Вставить("data", ДанныеСчетчика);
		
		ОтправитьСообщениеСайту(ДанныеДляВнешнегоСайта);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОтложенноеОбновлениеИнструмента(Форма, ОбновляемаяТаблица, МетодОбновления) Экспорт
	
	АдресРезультата = Форма[УправлениеИнструментамиРазработкиКлиентСервер.ИмяРеквизитаРезультат(ОбновляемаяТаблица)];
	Данные = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(Данные.УИДЗамера, МетодОбновления + ".ОтложенноеОбновление");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Ключ", СтрШаблон("%1.%2", Строка(Форма.УникальныйИдентификатор), МетодОбновления));
	ДополнительныеПараметры.Вставить("ОбновляемаяТаблица", ОбновляемаяТаблица);
	ДополнительныеПараметры.Вставить("АдресРезультата", АдресРезультата);
	ДополнительныеПараметры.Вставить("МетодОбновления", МетодОбновления);
	
	Форма.ОбработчикОбновленияИнструмента(Данные, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура УстановитьПризнакНеобходимостиОбновления(Форма) Экспорт
	
	Форма[УправлениеИнструментамиРазработкиКлиентСервер.ИмяРеквизитаТребуетсяОбновление()] = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаполнитьДанныеИнструментаРекурсивно(ЭлементыДерева, Данные)
	
	Для Каждого Строка Из Данные Цикл
		НоваяСтрока = ЭлементыДерева.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		Если Строка.Свойство("ПодчиненныеСтроки") Тогда
			ЗаполнитьДанныеИнструментаРекурсивно(НоваяСтрока.ПолучитьЭлементы(), Строка.ПодчиненныеСтроки)
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьМенюИнструментов() Экспорт
	
	ДанныеДляВнешнегоСайта = ПараметрыПриложения["ДанныеДляВнешнегоСайта"];
	
	АктивноеОкно = АктивноеОкно();
	
	Если АктивноеОкно.НачальнаяСтраница Тогда
		ИдентификаторАктивногоОкна = "HOME";
	ИначеЕсли АктивноеОкно.Содержимое.Количество() > 0 Тогда
		ИдентификаторАктивногоОкна = Строка(АктивноеОкно.Содержимое[0].УникальныйИдентификатор);
	Иначе
		ИдентификаторАктивногоОкна = "";
	КонецЕсли;
	
	ДанныеДляВнешнегоСайта.Вставить("activeTab", ИдентификаторАктивногоОкна);
	ДанныеДляВнешнегоСайта.Вставить("idNavLink", Новый Массив);
	
	ДанныеФормы = Новый Структура("id, navLink", "HOME", УправлениеИнструментамиРазработкиКлиентСервер.НавигационнаяСсылкаОткрытьНачальнуюСтраницу());
	ДанныеДляВнешнегоСайта.idNavLink.Добавить(ДанныеФормы);
	
	Для Каждого Окно Из ПолучитьОкна() Цикл
		Если Окно.Основное ИЛИ Окно.НачальнаяСтраница ИЛИ Окно.Содержимое.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторФормы = Строка(Окно.Содержимое[0].УникальныйИдентификатор);
		НавигационнаяСсылкаОкна = Окно.ПолучитьНавигационнуюСсылку();
		
		Если ЗначениеЗаполнено(НавигационнаяСсылкаОкна) Тогда
			ДанныеФормы = Новый Структура("id, navLink", ИдентификаторФормы, НавигационнаяСсылкаОкна);
			ДанныеДляВнешнегоСайта.idNavLink.Добавить(ДанныеФормы);
		КонецЕсли;
	КонецЦикла;
	
	ОтправитьСообщениеСайту(ДанныеДляВнешнегоСайта);
	ПараметрыПриложения.Удалить("ДанныеДляВнешнегоСайта");
	
КонецПроцедуры

Процедура ОбработатьПолучениеСообщенияВнешнегоСайта(Сообщение, ДополнительныеПараметры) Экспорт
	
	Данные = ПрочитатьЗначениеJSON(Сообщение.Данные);
	
	Если Данные.event = "getUnknownTools" Тогда
		Результат = Новый Массив;
		
		Для Каждого Окно Из ПолучитьОкна() Цикл
			Если Окно.Основное ИЛИ Окно.НачальнаяСтраница ИЛИ Окно.Содержимое.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			УникальныйИдентификатор = Строка(Окно.Содержимое[0].УникальныйИдентификатор);
			НавигационнаяСсылкаОкна = Окно.ПолучитьНавигационнуюСсылку();
			
			Если ЗначениеЗаполнено(НавигационнаяСсылкаОкна) И Данные.unknownTools.Найти(УникальныйИдентификатор) <> Неопределено Тогда
				ДанныеФормы = Новый Структура("id, navLink", УникальныйИдентификатор, НавигационнаяСсылкаОкна);
				Результат.Добавить(ДанныеФормы);
			КонецЕсли;
		КонецЦикла;
		
		Если Результат.Количество() > 0 Тогда
			Данные = Новый Структура("method, data", "setToolWindowID");
			Данные.data = Результат;
			
			ОтправитьСообщениеСайту(Данные);
		КонецЕсли;
			
	ИначеЕсли Данные.event = "updateToolData" Тогда
		ОткрытыеИнструменты = ПараметрыПриложения.Получить("ОткрытыеИнструменты");
		Форма = ОткрытыеИнструменты.Получить(Данные.formID);
		
		Если Форма <> Неопределено Тогда
			ОбновитьДанныеИнструмента(Форма, Данные.elementID);
			
		ИначеЕсли Данные.formID = "HOME" Тогда
			Для Каждого Окно Из ПолучитьОкна() Цикл
				Если Окно.НачальнаяСтраница И Окно.Содержимое.Количество() > 0 Тогда
					Форма = ОткрытыеИнструменты.Получить(Строка(Окно.Содержимое[0].УникальныйИдентификатор));
					
					Если Форма <> Неопределено Тогда
						ОткрытыеИнструменты.Вставить(Данные.formID, Форма);
						ОбновитьДанныеИнструмента(Форма, Данные.elementID);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Данные.event = "closeClient" Тогда
		ЗавершитьРаботуСистемы(Ложь, Ложь);
	Иначе
		ИнструментыВызовСервера.ОбработатьСообщениеСайта(Данные);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьСообщениеСайту(Данные) Экспорт
	
	ДанныеСообщения = ЗаписатьЗначениеJSON(Данные);
	СообщениеСайту = Новый СообщениеВнешнемуСайту(ДанныеСообщения);
	ОкноВнешнегоСайта.ОтправитьСообщение(СообщениеСайту);
	
КонецПроцедуры

Процедура ОбновлениеДанныхЗапущено(Форма) Экспорт
	
	Форма[УправлениеИнструментамиРазработкиКлиентСервер.ИмяРеквизитаТребуетсяОбновление()] = Ложь;
	Форма[УправлениеИнструментамиРазработкиКлиентСервер.ИмяРеквизитаДатаОбновления()] = ТекущаяДата();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьДанныеИнструмента(Форма, ИмяСтраницы)
	
	Форма[УправлениеИнструментамиРазработкиКлиентСервер.ИмяРеквизитаСтраницаИнструмента()] = ИмяСтраницы;
	
	Если ТребуетсяОбновитьДанныеИнструмента(Форма) Тогда
		Форма.ОбновитьДанныеИнструмента();
	КонецЕсли;
	
КонецПроцедуры

Функция ТребуетсяОбновитьДанныеИнструмента(Форма)
	
	Результат = Ложь;
	
	Если Форма[УправлениеИнструментамиРазработкиКлиентСервер.ИмяРеквизитаАвтообновление()] И
		(Форма[УправлениеИнструментамиРазработкиКлиентСервер.ИмяРеквизитаТребуетсяОбновление()]
		ИЛИ Форма[УправлениеИнструментамиРазработкиКлиентСервер.ИмяРеквизитаДатаОбновления()] + 180 < ТекущаяДата()) Тогда
		
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
