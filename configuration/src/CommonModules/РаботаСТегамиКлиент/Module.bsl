///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Добавляет тег
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Управляемая форма
//  ВыбранноеЗначение - СправочникСсылка.Теги, Строка - Ссылка на тег или строковое представление
//
Процедура Добавить(Форма, Знач ВыбранноеЗначение) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	// Очистим поле ввода тега для любого исхода
	Форма.Тег = Неопределено;

	СписокТегов = Форма.СписокТегов;
		
	ТегПредставление = Строка(ВыбранноеЗначение);
	КорректноеПредставление = НРег(СокрЛП(ТегПредставление));
	
	Для Каждого СтрокаТега Из СписокТегов Цикл
		Если ВыбранноеЗначение = СтрокаТега.Тег 
			ИЛИ КорректноеПредставление = СтрокаТега.ТегПредставление Тогда	
			
			Если СтрокаТега.Отвязать Тогда
				СтрокаТега.Отвязать = Ложь;
				ДобавитьВПолеHtml(СтрокаТега, Форма.ТегиHTML);
			КонецЕсли;

			Возврат;
		КонецЕсли;
	КонецЦикла;	
	
	МаксимальноеКоличествоТегов = 20;
	
	Если СписокТегов.Количество() >= МаксимальноеКоличествоТегов Тогда
		ШаблонСообщения = 
		"Превышен лимит привязываемых тегов (%1).
		|Для продолжения необходимо удалить один из ранее привязаных тегов и заново добавить желаемый";
		
		Cообщение = СтрШаблон(ШаблонСообщения, МаксимальноеКоличествоТегов); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Cообщение);
		Возврат;
	КонецЕсли;
			
	НоваяСтрока = СписокТегов.Добавить();
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Теги") Тогда
		НоваяСтрока.Тег = ВыбранноеЗначение;
	Иначе
		ТегВСправочнике = ИнтерфейсПриложенияВызовСервера.ПроверитьТегПоПредставлению(КорректноеПредставление);
		
		Если ТегВСправочнике.Есть Тогда
			НоваяСтрока.Тег = ТегВСправочнике.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрока.ТегПредставление = КорректноеПредставление;	
	НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
	
	ДобавитьВПолеHtml(НоваяСтрока, Форма.ТегиHTML);
				
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Обрабатывает нажатие на поле с тегами
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Управляемая форма
//  АдресПерехода - Строка - Адрес перехода элемента
//  ДобавлениеТегов - Булево - Истина, если нажатие из формы добавления тегов, иначе Ложь
//
Процедура ПриНажатии(Форма, АдресПерехода, ДобавлениеТегов = Ложь) Экспорт
	
	Если АдресПерехода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокТегов = Форма.СписокТегов;
		
	Если СтрЗаканчиваетсяНа(АдресПерехода, "add") Тогда
		// Добавление тегов
		Если Форма.Объект.Ссылка.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для добавления тегов необходимо сохранить документ");
			Возврат;
		КонецЕсли;

		ПараметрыОткрытия = Новый Структура("СписокТегов", СписокТегов);
		ОписаниеОповещения = Новый ОписаниеОповещения("ТегиHTMLПослеНажатия", Форма);	
			
		ОткрытьФорму("Справочник.Теги.Форма.ДобавлениеТегов", ПараметрыОткрытия, Форма, Форма.УникальныйИдентификатор, , , 
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	ИначеЕсли СтрНайти(АдресПерехода, "DeleteTag_") <> 0  Тогда
		// Удаление тега
		ИдентификаторТега = Сред(АдресПерехода, СтрНайти(АдресПерехода, "DeleteTag_") + 10, 36);
		
		СтрокаТега = НайтиСтрокуТега(АдресПерехода, СписокТегов, ИдентификаторТега);	
		
		ШаблонТега = РаботаСТегамиКлиентСервер.ШаблонТега(ДобавлениеТегов);
		УдаляемыйТекстТега = СтрШаблон(ШаблонТега, ИдентификаторТега, СтрокаТега.ТегПредставление);
		
		Форма.ТегиHTML = СтрЗаменить(Форма.ТегиHTML, УдаляемыйТекстТега, "");
		
		// Удаление еще не сохраненного тега
		Если СтрокаТега.Сохранен Тогда
			СтрокаТега.Отвязать = Истина;
		Иначе
			СписокТегов.Удалить(СтрокаТега);
		КонецЕсли;	
			
		Если НЕ ДобавлениеТегов Тогда
			РаботаСТегамиВызовСервера.Обработать(СписокТегов, Форма.Объект.Ссылка);
			КопироватьДанныеФормы(СписокТегов, Форма.СписокТегов);
		Иначе
			Форма.Модифицированность = Истина;
		КонецЕсли;
		
	ИначеЕсли СтрНайти(АдресПерехода, "Tag_") <> 0 Тогда
		// Поиск по тегу
		ИдентификаторТега = Сред(АдресПерехода, СтрНайти(АдресПерехода, "Tag_") + 4, 36);
		СтрокаТега = НайтиСтрокуТега(АдресПерехода, СписокТегов, ИдентификаторТега);
		
		Если ЗначениеЗаполнено(СтрокаТега.Тег) Тогда
			ЗначениеОтбора = Новый Структура("Тег", СтрокаТега.Тег);
			ПараметрыОткрытия =  Новый Структура("Отбор", ЗначениеОтбора);
			
			ОткрытьФорму("РегистрСведений.ТегиОбъектов.Форма.ФормаПоискаПоТегам", ПараметрыОткрытия, ЭтотОбъект, , , , , 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;			
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьВПолеHtml(Строка, ТегиHTML)
	
	ШаблонТега = РаботаСТегамиКлиентСервер.ШаблонТега(Истина);
	
	ТекстТега = СтрШаблон(ШаблонТега, Строка.Идентификатор, Строка.ТегПредставление);
	ТекстЗамены = СтрШаблон("%1</div></body>", ТекстТега);
	
	ТегиHTML = СтрЗаменить(ТегиHTML, "</div></body>", ТекстЗамены);

КонецПроцедуры

Функция НайтиСтрокуТега(Знач ДанныеСобытия, СписокТегов, Знач ИдентификаторТега)
	
	Отбор = Новый Структура("Идентификатор", ИдентификаторТега);
	НайденныеСтроки = СписокТегов.НайтиСтроки(Отбор);
	Строка = НайденныеСтроки[0];
	
	Возврат Строка;
	
КонецФункции

#КонецОбласти
