///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
//   
// Серверные процедуры и функции для работы системы безопасности:
// - для расчета прав пользователей;
// - для изменения интерфейсов после расчет интерактивных ролей;
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область РасчетПрав

Функция ПравоДелегированияЗаявки(Знач ЗаявкаСсылка) Экспорт
	
	ДанныеДляРасчета = ДанныеДляРасчетаПраваДелегирования(ЗаявкаСсылка); 		
	
	МожноДелегировать = (НЕ ЗаявкаСсылка.Пустая() И НЕ ДанныеДляРасчета.Черновик И НЕ ЗначениеЗаполнено(ДанныеДляРасчета.ФинальныйСтатус) 
		И (ДанныеДляРасчета.Автор = ПараметрыСеанса.ТекущийПользователь ИЛИ ДанныеДляРасчета.РуководительАвтораЗаявки = ПараметрыСеанса.ТекущийПользователь
		ИЛИ ДанныеДляРасчета.ТекущийПользовательОтветственный Или ПроверитьДоступностьРолиПолныеПрава()));
	Возврат МожноДелегировать; 
	
КонецФункции

Функция ПравоИзмененияНастроекФилиала(Знач ОбъектСсылка) Экспорт
	
	Результат = Истина;
	ЭтоРуководительНаправления = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("РуководительНаправления");
	
	Если НЕ ЭтоРуководительНаправления Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Филиалы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Филиалы КАК Филиалы
		|ГДЕ
		|	Филиалы.Родитель = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
		|	И (Филиалы.Руководитель = &Пользователь
		|			ИЛИ Филиалы.ЗаместительРуководителя = &Пользователь)";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		
		РезультатЗапроса = Запрос.Выполнить();
		Результат = НЕ РезультатЗапроса.Пустой();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Функция ПравоИспользованиеПрофиляРазработчика(Знач Ссылка) Экспорт
			
	РуководительГруппыРазработки = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("ИзменениеПрофилейРазработчиков");
	ПросмотрПрофилейРазработчиков = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("ПросмотрПрофилейРазработчиков");
	ПросмотрПрофилейРазработчиковПоФилиалу = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("ПросмотрПрофилейИЗнанийПоФилиалу");
	ИзменениеПрофилейРазработчиковУчеников = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("ИзменениеПрофилейРазработчиковУчеников");

	Возврат РуководительГруппыРазработки
		ИЛИ ПросмотрПрофилейРазработчиков
		ИЛИ ПросмотрПрофилейРазработчиковПоФилиалу
		ИЛИ ИзменениеПрофилейРазработчиковУчеников;
				
КонецФункции

Функция ПравоИспользованияГрупповогоВнесенияТрудозатрат() Экспорт
	
	МетаданныеОбъекта = "Обработка.ГрупповоеВнесениеТрудозатрат.Форма.Форма";
	ТаблицаПрав = Безопасность.ПолучитьБезопасностьОбъекта(МетаданныеОбъекта, Справочники.ПрограммныеРоли.Открытие);
	
	Если ТаблицаПрав.Количество() > 0 Тогда
		Результат = Истина;
		Для Каждого Строка Из ТаблицаПрав Цикл
			Результат = Результат И (Строка.ВидПраваДоступа = Перечисления.ВидыПравДоступа.Разрешено);
		КонецЦикла;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПравоНастройкаОграниченногоПросмотра(Знач ОбъектСсылка) Экспорт
	
	Результат = Истина;
	
	Если Не ПроверитьДоступностьРолиПолныеПрава() Тогда

		Автор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "Автор");
		Результат  = (Автор = ПараметрыСеанса.ТекущийПользователь);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПравоНастройкаПравОбъектов(Знач ОбъектСсылка) Экспорт
	
	РеквизитыЗадача = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектСсылка, "Автор, Филиал");
	РеквизитыФилиал = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыЗадача.Филиал, "ЗаместительРуководителя, Руководитель");
	
	// Кнопка настройки прав доступна только руководителю группы, заместителю и автору задачи.
	РазрешенаНастройкаПрав = ((РеквизитыЗадача.Автор = ПараметрыСеанса.ТекущийПользователь)
							ИЛИ (РеквизитыФилиал.Руководитель = ПараметрыСеанса.ТекущийПользователь)
	                        ИЛИ (РеквизитыФилиал.ЗаместительРуководителя = ПараметрыСеанса.ТекущийПользователь));						
							
	Возврат РазрешенаНастройкаПрав;
	
КонецФункции

Функция ПравоОтклоненияЗаявки(Знач ЗаявкаСсылка) Экспорт
	
 	// Отклонять заявки может автор, куратор и ответственный по направлению заявки
	// при этом финальный статус не может быть заполнен и заявка не должны быть в статусе Решен И в статусе отклонен.
	// Очень странно отклонять уже отклоненную заявку
	// Даже пользователоь с полными правами не имеет возмодности отклонить заявку если это запрещено статусами
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаРазработку.Ссылка КАК Ссылка,
	|	ЗаявкаНаРазработку.Автор КАК Автор,
	|	ЗаявкаНаРазработку.Направление КАК Направление
	|ПОМЕСТИТЬ ДанныеЗаявки
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|ГДЕ
	|	ЗаявкаНаРазработку.Ссылка = &Заявка
	|	И ЗаявкаНаРазработку.ФинальныйСтатус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЗаявки.Ссылка КАК Заявка
	|ПОМЕСТИТЬ ЗаявкиСПравомИзменятьСтатус
	|ИЗ
	|	ДанныеЗаявки КАК ДанныеЗаявки
	|ГДЕ
	|	ДанныеЗаявки.Автор = &ТекущийПользователь
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеЗаявки.Ссылка
	|ИЗ
	|	ДанныеЗаявки КАК ДанныеЗаявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияДополнительныхРеквизитовОбъектов КАК ЗначенияДополнительныхРеквизитовОбъектов
	|		ПО ДанныеЗаявки.Ссылка = ЗначенияДополнительныхРеквизитовОбъектов.Объект
	|			И (ЗначенияДополнительныхРеквизитовОбъектов.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДополнительныхРеквизитов.Куратор))
	|			И ((ВЫРАЗИТЬ(ЗначенияДополнительныхРеквизитовОбъектов.Значение КАК Справочник.Пользователи)) = &ТекущийПользователь)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеЗаявки.Ссылка
	|ИЗ
	|	ДанныеЗаявки КАК ДанныеЗаявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаправленияРазработки.Ответственные КАК НаправленияРазработкиОтветственные
	|		ПО ДанныеЗаявки.Направление = НаправленияРазработкиОтветственные.Ссылка
	|			И (НаправленияРазработкиОтветственные.Сотрудник = &ТекущийПользователь)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкиСПравомИзменятьСтатус.Заявка КАК Заявка
	|ИЗ
	|	ЗаявкиСПравомИзменятьСтатус КАК ЗаявкиСПравомИзменятьСтатус
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
	|		ПО ЗаявкиСПравомИзменятьСтатус.Заявка = МинимальныеСтатусыЗаявок.Заявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задача КАК Задача
	|		ПО ((ВЫРАЗИТЬ(Задача.ОбъектОснование КАК Документ.ЗаявкаНаРазработку)) = ЗаявкиСПравомИзменятьСтатус.Заявка)
	|ГДЕ
	|	Задача.Ссылка ЕСТЬ NULL
	|	И ЕСТЬNULL(МинимальныеСтатусыЗаявок.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый)) <> ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)
	|	И ЕСТЬNULL(МинимальныеСтатусыЗаявок.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый)) <> ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен)";
	
	Запрос.УстановитьПараметр("Заявка", ЗаявкаСсылка);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	РезультатЗапроса = Запрос.Выполнить();
	
	МожноОтклонять = НЕ РезультатЗапроса.Пустой();	
						
	Возврат МожноОтклонять;						
	
КонецФункции	

Функция ПравоПросмотраЗадачСОграниченнымДоступом(Знач ЗадачаСсылка) Экспорт
	
	Результат = Перечисления.ВидыПравДоступа.Разрешено;
	// Пользователь с полными правами имеет возможность просматривать задачи с ограниченным просмотром
	
	Если Не ПроверитьДоступностьРолиПолныеПрава() Тогда
	
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, "ОграниченныйПросмотр, Филиал, Автор");
		
		Если Реквизиты.ОграниченныйПросмотр Тогда
			Если Реквизиты.Филиал = ПараметрыСеанса.Филиал ИЛИ Реквизиты.Автор = ПараметрыСеанса.ТекущийПользователь Тогда
				Результат = Перечисления.ВидыПравДоступа.Разрешено;
			Иначе
				Результат = Перечисления.ВидыПравДоступа.Запрещено;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПравоРазрешитьОткрытиеОграниченныйПросмотр_Задача(Знач ОбъектСсылка) Экспорт
		
	ЗадачаРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектСсылка, "ОграниченныйПросмотр, Автор, Филиал");
	Если ОбъектСсылка.Пустая()
		ИЛИ НЕ ЗадачаРеквизиты.ОграниченныйПросмотр Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат (ПараметрыСеанса.Филиал = ЗадачаРеквизиты.Филиал ИЛИ ЗадачаРеквизиты.Автор = ПараметрыСеанса.ТекущийПользователь);
	
КонецФункции

Функция ПравоРазрешитьОткрытиеОграниченныйПросмотр_Заявка(Знач ОбъектСсылка) Экспорт
		
	ЗадачаРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектСсылка, "ОграниченныйПросмотр, Направление, Автор");
	Если ОбъектСсылка.Пустая()
		ИЛИ НЕ ЗадачаРеквизиты.ОграниченныйПросмотр Тогда
		Возврат Истина;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК Разрешен
	|ИЗ
	|	Документ.Задача КАК ДокументЗадача
	|ГДЕ
	|	(ВЫРАЗИТЬ(ДокументЗадача.ОбъектОснование КАК Документ.ЗаявкаНаРазработку)) = &Ссылка
	|	И ДокументЗадача.Филиал = &Филиал
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Справочник.НаправленияРазработки.Ответственные КАК НаправленияРазработкиОтветственные
	|ГДЕ
	|	НаправленияРазработкиОтветственные.Ссылка = &Направление
	|	И НаправленияРазработкиОтветственные.Сотрудник = &Пользователь
	|	И НаправленияРазработкиОтветственные.Руководитель = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(
	|			,
	|			Сотрудник = &Автор
	|				И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)
	|				И Данные <> ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК ЛичныеДелаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО ((ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы)) = Филиалы.Ссылка)
	|ГДЕ
	|	Филиалы.Руководитель = &Пользователь";

	Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Филиал", ПараметрыСеанса.Филиал);
	Запрос.УстановитьПараметр("Направление", ЗадачаРеквизиты.Направление);
	Запрос.УстановитьПараметр("Автор", ЗадачаРеквизиты.Автор);
 	
	Возврат (НЕ Запрос.Выполнить().Пустой() ИЛИ ЗадачаРеквизиты.Автор = ПараметрыСеанса.ТекущийПользователь);
	
КонецФункции

Функция ПравоСозданиеКастомнойКоманды(Знач ОбъектСсылка) Экспорт
	
	ИмеетДоступ = Безопасность.НаходитсяВГруппеДоступа(Справочники.ГруппыДоступа.СТОиРуководителиITНаправлений);
	Команды = Справочники.Филиалы.ПолучитьКастомныеКомандыРуководителя();
			
	Возврат ИмеетДоступ ИЛИ Команды.Количество() > 0; 
	
КонецФункции

Функция ПравоСозданияДокументаУслугиСтороннейОрганизации(Знач ДокументСсылка) Экспорт
	
	Результат = Истина;
	// Пользователь с полными правами имеет возможность просомтаривать шруппы заказчиков
	Если НЕ ПроверитьДоступностьРолиПолныеПрава() Тогда 
		Результат = НЕ ДокументСсылка.Пустая();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПравоУстановитьОграниченныйПросмотр(Знач ОбъектСсылка) Экспорт
		
	Если ОбъектСсылка.Пустая() Тогда
		Возврат Истина;
	КонецЕсли;

	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектСсылка, "Направление, Автор");

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК Разрешен
	|ИЗ
	|	Справочник.НаправленияРазработки.Ответственные КАК НаправленияРазработкиОтветственные
	|ГДЕ
	|	НаправленияРазработкиОтветственные.Ссылка = &Направление
	|	И НаправленияРазработкиОтветственные.Сотрудник = &Пользователь
	|	И НаправленияРазработкиОтветственные.Руководитель = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(
	|			,
	|			Сотрудник = &Автор
	|				И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)
	|				И Данные <> ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК ЛичныеДелаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО ((ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы)) = Филиалы.Ссылка)
	|ГДЕ
	|	Филиалы.Руководитель = &Пользователь";

	Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Направление", РеквизитыОбъекта.Направление);
	Запрос.УстановитьПараметр("Автор", РеквизитыОбъекта.Автор);
 	
	Возврат (НЕ Запрос.Выполнить().Пустой() ИЛИ РеквизитыОбъекта.Автор = ПараметрыСеанса.ТекущийПользователь);
	
КонецФункции

#КонецОбласти

#Область ПрименениеПрав

Процедура ПрименитьПравоДелегированияЗаявки(Форма, Знач Разрешено) Экспорт
	
	Форма.Элементы.Делегировать.Видимость = Разрешено;
	
КонецПроцедуры

Процедура ПрименитьПравоДобавленияТрудозатрат(Форма, Знач Разрешено) Экспорт
	
	Форма.Элементы.ДобавитьЗатратыВремени.Доступность = Разрешено;
	Форма.Элементы["ДобавитьТрудозатраты_" + СтрЗаменить(Форма.УникальныйИдентификатор, "-", "")].Доступность = Разрешено;
	
КонецПроцедуры

Процедура ПрименитьПравоИзмененияНастроекФилиала(Форма, Знач Разрешено) Экспорт
	
	Форма.Элементы.ОткрытьФормуИзмененияНаправления.Видимость = Разрешено;
	
КонецПроцедуры

Процедура ПрименитьПравоИзменятьДокументУслугиСтороннейОрганизации(Форма, Знач Разрешено) Экспорт
	
	Если ПроверитьДоступностьРолиПолныеПрава() Тогда
		Разрешено = Истина;
	КонецЕсли;
	
	Форма.ТолькоПросмотр = НЕ Разрешено;
	
КонецПроцедуры

Процедура ПрименитьПравоИзменятьНастройкиЭскалацииОшибок(Форма, Знач Разрешено) Экспорт
	
	Форма.ИзменениеНастроекРазрешено = Разрешено;
	
КонецПроцедуры

Процедура ПрименитьПравоИзменятьЮрЛицоЗаявки(Форма, Знач Разрешено) Экспорт
	
	Если ПроверитьДоступностьРолиПолныеПрава() ИЛИ РольДоступна("Администратор") Тогда
		Разрешено = Истина;
	КонецЕсли;
	
	Форма.Элементы.ЮридическоеЛицо.ТолькоПросмотр = НЕ Разрешено;
	
КонецПроцедуры

Процедура ПрименитьПравоИспользованиеПрофиляРазработчика(Форма, Знач Разрешено) Экспорт

	Форма.Элементы.ГруппаПрофилиРазработчиков.Видимость = Разрешено;
	
КонецПроцедуры

// Регулирует возможность изменения реквизита "Куратор" в документе "Заявка на разработку".
// Если право запрещено - отображаем реквизит в виде гиперссылки.
Процедура ПрименитьПравоНазначениеОтветственного(Форма, Знач Разрешено) Экспорт
	
	НайденныйЭлемент = Форма.Элементы.Найти("Куратор");
	
	Если НайденныйЭлемент <> Неопределено Тогда
		ЗаявкаСсылка = Форма.Объект.Ссылка;
		ЗаявкаНаправление = Форма.Объект.Направление;
		НаправлениеРозничныеПроцессы = XMLЗначение(Тип("СправочникСсылка.НаправленияРазработки"), "b31e1324-2aad-11ea-8386-00155d033631");
		РазрешеноРедактировать = (Разрешено И (ЗаявкаНаправление = НаправлениеРозничныеПроцессы));
		
		// Если куратор был выбран, но поменяли направление - необходимо очистить значение реквизита. 
		Если ЗначениеЗаполнено(Форма.Объект.Куратор)
			И ЗаявкаНаправление <> НаправлениеРозничныеПроцессы Тогда
			
			Форма.Объект.Куратор = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
	
		// Когда реквизит разрешено редактировать, устанавливаем вид - поле ввода.
		// В противном случае - гиперссылка, с просмотром информации о пользователе.
		// Если элемент запрещен для редактирования и куратор не заполнен - скрываем
		// его от пользователя.
		НайденныйЭлемент.ТолькоПросмотр = НЕ РазрешеноРедактировать;
		НайденныйЭлемент.Вид = ?(РазрешеноРедактировать, ВидПоляФормы.ПолеВвода, ВидПоляФормы.ПолеНадписи);
		НайденныйЭлемент.Видимость = ?(НЕ РазрешеноРедактировать И НЕ ЗначениеЗаполнено(Форма.Объект.Куратор), Ложь, Истина);
		
		// Для надписи установим вид гиперссылки.
		Если НайденныйЭлемент.Вид = ВидПоляФормы.ПолеНадписи Тогда 
			НайденныйЭлемент.Гиперссылка = Истина;
			НайденныйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_КураторНажатие");
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПрименитьПравоНастройкаОграниченногоПросмотра(Форма, Знач Разрешено) Экспорт
	
	СписокПрав = Форма["СписокПрав"];
	Если Разрешено Тогда
		СписокПрав.Добавить(Справочники.ПрограммныеРоли.ОграниченныйПросмотр);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПрименитьПравоНастройкаПравОбъектов(Форма, Знач Разрешено) Экспорт
	
	НайденныйЭлемент = Форма.Элементы.Найти("Подключаемый_ОткрытьНастройкуПравОбъекта");
	
	Если НайденныйЭлемент <> Неопределено Тогда
		НайденныйЭлемент.Видимость = Разрешено;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПрименитьПравоОтклоненияЗаявки(Форма, Знач Разрешено) Экспорт
	
	// Право может применяться не только в момент создания формы но и в результате работы пользователя
	// Поэтому тут есть как генерация кнопок с изменением статуса. так и удаление ранее сгенерированых кнопок
	
	Если Разрешено Тогда
		
		// Создадим команды и элементы формы
		ИмяПредопределенныхДанных = "Отклонен";
		
		// Запомним созданные статусы на форме
		Если НЕ СтрНайти(Форма.ХранилищеСтатусов, ИмяПредопределенныхДанных) = 0 Тогда
			Форма.ХранилищеСтатусов = Форма.ХранилищеСтатусов + ИмяПредопределенныхДанных + ",";
		КонецЕсли;
		
		Попытка
			Картинка = БиблиотекаКартинок["Статус" + ИмяПредопределенныхДанных];
		Исключение
			Картинка = Новый Картинка;
		КонецПопытки;
		
		ИмяКоманды = "УстановитьСтатус_" + ИмяПредопределенныхДанных;
		КомандаФормы = Форма.Команды.Найти(ИмяКоманды);
		Если КомандаФормы = Неопределено Тогда
			КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
			КомандаФормы.Действие = "УстановитьСтатусПоКнопке";
		КонецЕсли;
		
		ИмяКнопки = "КнопкаСтатуса_" + ИмяПредопределенныхДанных;
		НоваяКнопка = Форма.Элементы.Найти(ИмяКнопки);
		Если НоваяКнопка = Неопределено Тогда
			НоваяКнопка = Форма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), Форма.Элементы.ГруппаУправлениеСтатусом);
			НоваяКнопка.Заголовок   = ИмяПредопределенныхДанных;
			НоваяКнопка.ИмяКоманды  = КомандаФормы.Имя;
			НоваяКнопка.Картинка    = Картинка;
			НоваяКнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КонецЕсли;
		
		Форма.Элементы.ГруппаУправлениеСтатусом.Видимость = Истина;
	Иначе
		
		// Удалим команды и элементы формы созданые ранее
		ИмяПредопределенныхДанных = "Отклонен";
		
		ИмяКоманды = "УстановитьСтатус_" + ИмяПредопределенныхДанных;
		КомандаФормы = Форма.Команды.Найти(ИмяКоманды);
		Если Не КомандаФормы = Неопределено Тогда
			Форма.Команды.Удалить(КомандаФормы);
		КонецЕсли;
		
		ИмяКнопки = "КнопкаСтатуса_" + ИмяПредопределенныхДанных;
		НоваяКнопка = Форма.Элементы.Найти(ИмяКнопки);
		Если Не НоваяКнопка = Неопределено Тогда
			Форма.Элементы.Удалить(НоваяКнопка);
		КонецЕсли;
		
		Форма.Элементы.ГруппаУправлениеСтатусом.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрименитьПравоСозданиеКастомнойКоманды(Форма, Знач Разрешено) Экспорт
	
	Если Разрешено Тогда 
		
		НоваяКоманда = Форма.Команды.Добавить("ОткрытьКастомныеКоманды");
		НоваяКоманда.Заголовок = "Кастомные команды";
		НоваяКоманда.Действие = "Подключаемый_ОткрытьКастомныеКоманды"; 
		
		НовыйЭлемент = Форма.Элементы.Добавить("Подключаемый_ОткрытьКастомныеКоманды", Тип("КнопкаФормы"), 
			Форма.Элементы.Дополнительно);
		НовыйЭлемент.ИмяКоманды = "ОткрытьКастомныеКоманды";
		
	КонецЕсли;
	
КонецПроцедуры
 
Процедура ПрименитьПравоИспользованияГрупповогоВнесенияТрудозатрат(Форма, Знач Разрешено) Экспорт
	
	Форма.Элементы.Команда_ГрупповоеВнесениеТрудозатрат.Видимость = Разрешено;
	
КонецПроцедуры

Процедура ПрименитьПравоРедактированиеМотивационногоПрофиля(Форма, Знач Разрешено) Экспорт
	
	НайденныйЭлемент = Форма.Элементы.Найти("ГруппаМотивационныеПрофили");
	
	Если НайденныйЭлемент <> Неопределено Тогда
		НайденныйЭлемент.Видимость = Разрешено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрименитьПравоУстановкиОграниченногоПросмотра(Форма, Знач Разрешено) Экспорт
	
	Форма.Элементы.ОграниченныйПросмотр.Доступность = Разрешено;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает вспомогательные данные, что бы рассчитать право
// на делегирование заявки
//
// Параметры:
//  ЗаявкаСсылка - ДокументСсылка.Заявка - Ссылка на заявку, для которой рассчитывается право 
// 
// Возвращаемое значение:
// 	Структура. 
//
Функция ДанныеДляРасчетаПраваДелегирования(Знач ЗаявкаСсылка)
	
	ДанныеДляРасчета = Новый Структура;
	ДанныеДляРасчета.Вставить("Черновик", Ложь);
	ДанныеДляРасчета.Вставить("ФинальныйСтатус", Справочники.СтатусыОбъектов.ПустаяСсылка());
	ДанныеДляРасчета.Вставить("Автор", Справочники.Пользователи.ПустаяСсылка());
	ДанныеДляРасчета.Вставить("РуководительАвтораЗаявки", Справочники.Пользователи.ПустаяСсылка());
	ДанныеДляРасчета.Вставить("ТекущийПользовательОтветственный", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаРазработку.Черновик КАК Черновик,
	|	ЗаявкаНаРазработку.ФинальныйСтатус КАК ФинальныйСтатус,
	|	ЗаявкаНаРазработку.Автор КАК Автор,
	|	Филиалы.Руководитель КАК РуководительАвтораЗаявки,
	|	ВЫБОР
	|		КОГДА НаправленияРазработкиОтветственные.Сотрудник ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ТекущийПользовательОтветственный
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела.СрезПоследних(
	|				&ТекущаяДата,
	|				Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)
	|					И (ВЫРАЗИТЬ(Данные КАК Справочник.Филиалы)) <> ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК ЛичныеДелаСрезПоследних
	|		ПО ЗаявкаНаРазработку.Автор = ЛичныеДелаСрезПоследних.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО ((ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы)) = Филиалы.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияРазработки.Ответственные КАК НаправленияРазработкиОтветственные
	|		ПО ЗаявкаНаРазработку.Направление = НаправленияРазработкиОтветственные.Ссылка
	|			И (НаправленияРазработкиОтветственные.Сотрудник = &ТекущийПользователь)
	|ГДЕ
	|	ЗаявкаНаРазработку.Ссылка = &ЗаявкаСсылка";
	
	Запрос.УстановитьПараметр("ЗаявкаСсылка", ЗаявкаСсылка);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеДляРасчета, Выборка);
	КонецЕсли;
	
	Возврат ДанныеДляРасчета; 
	  
КонецФункции

Функция ПроверитьДоступностьРолиПолныеПрава()
	
	Возврат УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("ПолныеПрава");
	
КонецФункции

#КонецОбласти

#КонецЕсли
