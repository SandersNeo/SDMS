///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы
// Обработчики событий форм основных объектов, использовать для многостраничных форм.
// Размещать соответственно наименованиям методов.

// Перед записью
//
// Параметры:
//  Форма				- ФормаКлиентскогоПриложения - форма на которой размещен редактор описания.
//  ПараметрыЗаписи		- Структура - параметры записи объекта.
//  Отказ				- Булево - стандартный признак отказа от записи.
//  СтраницаОписание	- ГруппаФормы - страница на которой находится поле HTML документа.
//  ИмяРеквизита		- Строка - если это не основное описание, то передается для разделения реквизитов
//
Процедура ПередЗаписью(Форма, ПараметрыЗаписи, Отказ, СтраницаОписание, ИмяРеквизита = "") Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраница = Форма.Элементы.СтраницыДокумента.ТекущаяСтраница;
	ИмяРеквизитаИзмененоОписание = РедакторОписанияКлиентСервер.ИмяРеквизитаИзмененоОписание(ИмяРеквизита);
	ИзмененоОписание = Форма[ИмяРеквизитаИзмененоОписание];
	
	Если ИзмененоОписание И ТекущаяСтраница = СтраницаОписание Тогда
		Форма[РедакторОписанияКлиентСервер.ИмяРеквизитаАктуальноеОписание(ИмяРеквизита)] = 
			ПолучитьТекст(Форма, ТекущаяСтраница.Имя, ИмяРеквизита);
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить(ИмяРеквизитаИзмененоОписание, ИзмененоОписание);
	ПроверитьИзмененияОбъекта(Форма, Отказ);
	
КонецПроцедуры

// После записи
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма на которой размещен редактор описания.
//
Процедура ПослеЗаписи(Форма) Экспорт
	
	Форма.РазблокироватьДанныеФормыДляРедактирования();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Обработчик нажатия поля HTML документа. Вызывается из метода Подключаемый_ПриНажатииПоляHTMLДокумента.
// Этот метод должен быть добавлен в модуль формы объекта.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - форма на которой размещен редактор описания.
//  ДанныеСобытия			 - ФиксированнаяСтруктура - стандартный параметр метода элемента формы.
//  СтандартнаяОбработка	 - Булево - стандартный параметр метода элемента формы.
//  КэшДанных				 - Структура - кэш формы, заполнять если к форме подключено автосохранение данных.
//  ИмяРеквизита			 - Строка - если это не основное описание, то передается для разделения реквизитов
//
Процедура ПриНажатииПоляHTMLДокумента(Форма, ДанныеСобытия,
	СтандартнаяОбработка, КэшДанных = Неопределено, ИмяРеквизита = "") Экспорт
	
	Если ДанныеСобытия.Anchor <> Неопределено Тогда
		НавигационнаяСсылка = ДанныеСобытия.Href;
		СтандартнаяОбработка = Ложь;
		
		Если ДанныеСобытия.Anchor.id = "modificationEvent" Тогда
			
			Если ЗначениеЗаполнено(ИмяРеквизита) И ЗначениеЗаполнено(Форма[ИмяРеквизита]) Тогда
				СтараяВерсияДанных = Форма["ВерсииОписаний"].НайтиПоЗначению(Форма[ИмяРеквизита]);
				ВерсияДанных = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Форма[ИмяРеквизита], "ВерсияДанных");
				
				Если СтараяВерсияДанных.Представление <> ВерсияДанных Тогда   
					СтандартнаяОбработка = Ложь;                       
					
					Если ИмяРеквизита = "ПримечаниеТестировщиков" Тогда				
						Описание = "Примечание тестировщика";
					ИначеЕсли ИмяРеквизита = "ПримечаниеРазработчиков" Тогда					
						Описание = "Примечание разработчика";
					Иначе
						Описание = "Описание";
					КонецЕсли;
					
					ПредупреждениеАсинх(СтрШаблон("%1 было изменено. Данные перечитаны.", Описание),, "Актуализация данных");
					БылаМодифицированность = Форма.Модифицированность;
					Форма.Прочитать(); 
					Форма.Модифицированность = БылаМодифицированность;  					
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			Результат = ЗаблокироватьДанныеФормы(Форма, ИмяРеквизита); 
			Редактор = РедакторОписанияКлиентСервер.ИмяРеквизита(ИмяРеквизита);
			
			Если Результат.Успешно Тогда
				Форма[РедакторОписанияКлиентСервер.ИмяРеквизитаИзмененоОписание(ИмяРеквизита)] = Истина;
				АвтосохраненияДанныхКлиент.ИзменениеТекстаРедактирования(Форма, КэшДанных);  
			Иначе       
				Блокировка = РедакторОписанияКлиентСервер.ИмяНадписиБлокировкаОписания(ИмяРеквизита);
				Форма.Элементы["Группа" + Блокировка].Видимость = НЕ Результат.Успешно;
				Форма.Элементы[Блокировка].Заголовок = Результат.ТекстОшибки;
				
				Описание = Форма[РедакторОписанияКлиентСервер.ИмяРеквизитаАктуальноеОписание(ИмяРеквизита)];
				Форма[Редактор] = РедакторОписанияВызовСервера.ПолучитьРедактор(Описание,, Истина);	
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
			
		ИначеЕсли ДанныеСобытия.Anchor.isContentEditable = Ложь ИЛИ ДанныеСобытия.Anchor.target = "_blank" Тогда
			#Если ТонкийКлиент Тогда	
				Позиция = СтрНайти(НавигационнаяСсылка, "#e1cib");
				НавигационнаяСсылка = Сред(НавигационнаяСсылка, Позиция + 1);	
			#КонецЕсли
			
			Если ОбщегоНазначенияКлиент.ЭтоВебСсылка(НавигационнаяСсылка)
				ИЛИ ОбщегоНазначенияКлиент.ЭтоНавигационнаяСсылка(НавигационнаяСсылка) Тогда
				
				ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);
			КонецЕсли;
		КонецЕсли; // BSLLS:IfElseIfEndsWithElse-off
	КонецЕсли;
	
КонецПроцедуры

// При смене страницы. Использовать для многостраничных форм,
// т.к. при изменении страницы в каких-то случаях поле HTML документа становится недоступным.
//
// Параметры:
//  Форма				- ФормаКлиентскогоПриложения - форма на которой размещен редактор описания.
//  ТекущаяСтраница		- ГруппаФормы - страница с которой уходит пользователь.
//  СтраницаОписание	- ГруппаФормы - страница на которой находится поле HTML документа.
//  ИмяРеквизита		- Строка - если это не основное описание, то передается для разделения реквизитов
//
Процедура ПриСменеСтраницы(Форма, ТекущаяСтраница, СтраницаОписание, ИмяРеквизита = "") Экспорт
		
	ИзмененоОписание = Форма[РедакторОписанияКлиентСервер.ИмяРеквизитаИзмененоОписание(ИмяРеквизита)];
	ОткрытиеОписания = РедакторОписанияКлиентСервер.ИмяРеквизитаОткрытиеОписания(ИмяРеквизита);
	ОткрываемаяСтраница = Форма.Элементы.СтраницыДокумента.ТекущаяСтраница;
	
	Если ТекущаяСтраница = СтраницаОписание И ИзмененоОписание Тогда
		Форма[РедакторОписанияКлиентСервер.ИмяРеквизитаАктуальноеОписание(ИмяРеквизита)] = 
			ПолучитьТекст(Форма, ТекущаяСтраница.Имя, ИмяРеквизита);
	КонецЕсли;
	
	Если ОткрываемаяСтраница = СтраницаОписание И НЕ Форма[ОткрытиеОписания] Тогда
		Функциональность = РедакторОписанияКлиентСервер.ИмяСобытияОткрытияРедактора();
		ОбщегоНазначенияВызовСервера.ОтслеживаниеИспользованияФункциональностиНаСервере(Функциональность);
		
		Форма[ОткрытиеОписания] = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция ПолучитьВыделенныйТекст(Форма, ИмяРеквизита = "") Экспорт
	
	ВыделенныйТекст = "";
	
	Попытка
		ВыделенныйТекст = ОбъектРедактор(Форма, ИмяРеквизита).getSelectedText();
	Исключение
		// обработка не требуется
	КонецПопытки;
	
	Возврат ВыделенныйТекст;
	
КонецФункции

// Получает текущий текст из редактора.
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - форма на которой размещен редактор описания.
//  ИмяТекущейСтраницы	 - Строка - имя текущей страницы.
//  ИмяРеквизита			 - Строка - дополнительный параметр для использования нескольких редакторов на одной форме.
// 
// Возвращаемое значение:
//  Строка - текст формата html.
//
Функция ПолучитьТекст(Форма, Знач ИмяТекущейСтраницы = "", Знач ИмяРеквизита = "") Экспорт
	
	Попытка
		ТекстОписания = ОбъектРедактор(Форма, ИмяРеквизита).getData();
	Исключение
		ИмяСобытия = "CKEditor.Получение текста описания";
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СисИнфо = Новый СистемнаяИнформация;
		СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
		
		Комментарий = ПолучитьОписаниеОшибки(ОписаниеОшибки, СисИнфо.ВерсияОС, СисИнфо.ВерсияПриложения,
			СисИнфо.ИнформацияПрограммыПросмотра, СтрокаСоединения, ИмяТекущейСтраницы);
		
		ОбщегоНазначенияВызовСервера.ЗаписьЖурналаРегистрацииНаСервере(ИмяСобытия, Комментарий);
	КонецПопытки;
	
	Возврат ТекстОписания;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаблокироватьДанныеФормы(Форма, ИмяРеквизита) 
	
	Результат = Новый Структура("Успешно, ТекстОшибки", Истина, "");   
	Объект = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормы(Форма, "Объект");
	
	Если Объект = Неопределено ИЛИ ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда  
		
		Если НЕ Форма.Модифицированность 
				ИЛИ (ЗначениеЗаполнено(ИмяРеквизита) И Форма.ЗаблокированныеОписания.НайтиПоЗначению(ИмяРеквизита) = Неопределено) Тогда
			
			Попытка
				Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
					Результат = РедакторОписанияВызовСервера.ЗаблокироватьОписание(Форма.УникальныйИдентификатор, Форма[ИмяРеквизита]);
					
					Если НЕ Результат.Успешно Тогда
						Возврат Результат;
					КонецЕсли;  
					
					Если Форма.ЗаблокированныеОписания.НайтиПоЗначению(ИмяРеквизита) = Неопределено Тогда
						Форма.ЗаблокированныеОписания.Добавить(ИмяРеквизита);
					КонецЕсли;
				Иначе
					Форма.ЗаблокироватьДанныеФормыДляРедактирования();   
				КонецЕсли;    
				
				Форма.Модифицированность = Истина;                                                                           
			Исключение // BSLLS:MissingCodeTryCatchEx-off 
				// Обработка исключения не требуется
			КонецПопытки;
		КонецЕсли; 
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Асинх Процедура ЗадатьВопросОбИзмененииДанных(Форма)
	
	ТекстВопроса = "Данные были изменены другим пользователем. Обновить данные?";
	Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизитаАктуальноеОписание = РедакторОписанияКлиентСервер.ИмяРеквизитаАктуальноеОписание();
	
	Если Форма[РедакторОписанияКлиентСервер.ИмяРеквизитаИзмененоОписание()] Тогда  
		КэшОписания = Форма[ИмяРеквизитаАктуальноеОписание];
	КонецЕсли;
	
	Форма.Прочитать();
	
	Если КэшОписания <> Неопределено Тогда
		
		ОписаниеИзменений = ОбщегоНазначенияВызовСервера.СравнитьОписания(Форма.Объект.Ссылка, 
			Форма[ИмяРеквизитаАктуальноеОписание], КэшОписания, "Сохраненное описание", "Мое описание", Истина);
			
		ПараметрыОповещения = Новый Структура("Форма, КэшОписания", Форма, КэшОписания);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВосстановлениеОписания", ЭтотОбъект, ПараметрыОповещения);
		
		Если ЗначениеЗаполнено(ОписаниеИзменений) Тогда
			ПараметрыОткрытия = Новый Структура("ОписаниеИзменений", ОписаниеИзменений);
			ОткрытьФорму("РегистрСведений.ИсторияИзмененийОписанийОбъектов.Форма.ПросмотрИзмененияОписания", 
				ПараметрыОткрытия, Форма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
		Иначе
			ТекстВопроса = "Изменилось описание. Не удалось сравнить тексты описаний. Восстановить описание?";
			Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения метода ЗадатьВопросОбИзмененииДанных.
//
// Параметры:
//  Результат				 - Булево - ответ пользователя.
//  ДополнительныеПараметры	 - Структура - дополнительные параметры.
//
Процедура ОбработатьВосстановлениеОписания(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		Форма = ДополнительныеПараметры.Форма;
		КэшОписания = ДополнительныеПараметры.КэшОписания;
		
		Форма[РедакторОписанияКлиентСервер.ИмяРеквизитаАктуальноеОписание()] = КэшОписания;
		Форма[РедакторОписанияКлиентСервер.ИмяРеквизита()] = РедакторОписанияВызовСервера.ПолучитьРедактор(КэшОписания);
		Форма[РедакторОписанияКлиентСервер.ИмяРеквизитаИзмененоОписание()] = Истина;
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ОбъектРедактор(Форма, Знач ИмяРеквизита = "")
	
	Возврат Форма.Элементы[РедакторОписанияКлиентСервер.ИмяРеквизита(ИмяРеквизита)].Документ.defaultView;
	
КонецФункции

Функция ПолучитьОписаниеОшибки(ОписаниеОшибки, ВерсияОС, ВерсияПриложения, UserAgent, СтрокаСоединения, ИмяСтраницы)
	
	Ошибка = СтрШаблон(
		"Текст ошибки: %1
		|Версия ОС: %2
		|Информация программы просмотра: %3
		|Версия приложения: %4
		|Строка соединения: %5
		|Имя текущей страницы: %6",
		ОписаниеОшибки, ВерсияОС, UserAgent, ВерсияПриложения, СтрокаСоединения, ИмяСтраницы);
	
	Возврат Ошибка;
	
КонецФункции

Процедура ПроверитьИзмененияОбъекта(Форма, Отказ)
	
	Ссылка = Форма.Объект.Ссылка;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда	
		ВерсияДанных = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Ссылка, "ВерсияДанных"); 
		
		Если Форма.Объект.ВерсияДанных <> ВерсияДанных Тогда
			Отказ = Истина;
			ЗадатьВопросОбИзмененииДанных(Форма);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
