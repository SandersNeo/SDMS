///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура ВыделитьСсылкиКомментария(ТекстКомментария) Экспорт
	
	РегулярноеВыражение = "(https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[А-Яа-я-a-zA-Z0-9()@:%_\+.~#?&\/=]*))";
	ТекстКомментария = СтрЗаменитьПоРегулярномуВыражению(
		ТекстКомментария, РегулярноеВыражение, "<a href=$1>$1</a>", Истина, Истина);
		
КонецПроцедуры

// Возвращает ссылку на справочник СтатусыОбъектов
//
// Параметры:
//  Ссылка	 - СправочникСсылка.СтатусыОбъектов	 - ссылка на статус
// 
// Возвращаемое значение:
//  СправочникСсылка.СтатусыОбъектов - сслыка на справочник
//
Функция ПолучитьСсылкуНаСлужебныйСтатус(Знач Ссылка) Экспорт
	
	Возврат РаботаСПроцессами.ПолучитьСсылкуНаСлужебныйСтатус(Ссылка);
	
КонецФункции

// Возвращает ссылку на нового исполнителя для задачи
//
// Параметры:
//  Объект		 - ДокументОбъект.Задача, ДокументСсылка.Задача	 - ссылка на задачу, или сам объект
//  НовыйСтатус	 - СправочникСсылка.СтатусыОбъектов	 - ссылка на новый статус
//  Свойства	 - Структура	 - дополнительные данные, участвующие в определении назначенного
// 
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - ссылка на нового исполнителя
//
Функция ПолучитьНовогоИсполнителяЗадачи(Знач Объект, Знач НовыйСтатус, Знач Свойства = Неопределено) Экспорт
	
	ТипОбъекта = ТипЗнч(Объект);
	
	// Заполнение данных объекта
	Если ТипОбъекта = Тип("ДокументСсылка.Задача") Тогда
		НазванияРеквизитов = "Ссылка, Статус, Назначена, Заказчик, СистемаУчета, Филиал, Автор";
		ДанныеОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, НазванияРеквизитов);
	Иначе
		ДанныеОбъекта = Объект;
		ПредыдущийИсполнитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Назначена");
		
		// Если исполнитель был изменен на форме, оставляем установленного пользователем исполнителя
		Если ДанныеОбъекта.Назначена <> ПредыдущийИсполнитель Тогда
			Возврат ДанныеОбъекта.Назначена;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Филиал", ДанныеОбъекта.Филиал);
	СтруктураДанных.Вставить("СтарыйСтатус", ДанныеОбъекта.Статус);
	СтруктураДанных.Вставить("НовыйСтатус", НовыйСтатус);
	
	ТипОбъекта = Справочники.ТипыОбъектовВладельцев.НайтиСвязанныйЭлемент(Объект.Ссылка);
	
	ВидДействия = Перечисления.ВидыДействий.СменаИсполнителя;
	Действие = Справочники.Процессы.ПолучитьДействияСменыСтатуса(ТипОбъекта, СтруктураДанных, ВидДействия);
	Если Действие <> Неопределено Тогда
		Результат = ПолучитьНовогоИсполнителяПоДействию(ДанныеОбъекта, Действие, Свойства);
	Иначе
		Результат = ПолучитьНовогоИсполнителяБезДействия(ДанныеОбъекта, НовыйСтатус, Свойства);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция - Назначить задачу на пользователя
//
// Параметры:
//  Задача			 - ДокументСсылка.Задача - задача
//  Пользователь	 - СправочникСсылка.Пользователи - исполнитель
//  ПулНаРазработку	 - Булево - это пул на разработку
// 
// Возвращаемое значение:
//  Структура - успешность выполнения
//
Функция НазначитьЗадачуНаПользователя(Знач Задача, Знач Пользователь = Неопределено, Знач ПулНаРазработку = Ложь) Экспорт
	
	Результат = Новый Структура("Успешно, Сообщение", Истина, "");
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	Если ЗначениеЗаполнено(ЗадачаОбъект.Назначена) Тогда
		Результат.Успешно = Ложь;
		Результат.Сообщение = СтрШаблон("Задача уже назначена на %1", 
			ОбщегоНазначенияКлиентСервер.ПолучитьФамилиюИнициалыПользователя(Строка(Задача.Назначена)));
		Возврат Результат;
	КонецЕсли;
	
	ЗадачаОбъект.Назначена = Пользователь;
	Если ПулНаРазработку Тогда
		ЗадачаОбъект.Статус = Справочники.СтатусыОбъектов.ВРеализацию;
	КонецЕсли;
	
	Попытка
		ЗадачаОбъект.Записать();
	Исключение
		Результат.Успешно = Ложь;
		Результат.Сообщение = "Во время записи задачи возникла непредвиденная ситуация. =( " + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Обновить статус задачи
//
// Параметры:
//  Данные		 - Стурктура - Структура данных
//  	* Задача - ДокументСсылка.Задача
//  	* Статус - СправочникСсылка.СтатусыОбъектов
//  	* ЕстьНезакрытыйПериод - Булево
//  Результат	 - Структура - Результат закрытия формы изменения статуса
//
Процедура ОбновитьСтатусЗадачи(Знач Данные, Знач Результат) Экспорт 
	
	Объект = Данные.Задача.ПолучитьОбъект(); 
	НовыйСтатус = Данные.Статус;
	Объект.Статус = НовыйСтатус;
	Объект.Назначена = Результат.НазначитьНа;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Назначена", Результат.НазначитьНа);		
	ПараметрыЗаписи.Вставить("НовыйСтатус", НовыйСтатус);
	ПараметрыЗаписи.Вставить("ВидОперации", Неопределено);
	ПараметрыЗаписи.Вставить("Комментарий", Результат.Комментарий);
	ПараметрыЗаписи.Вставить("ЕстьНезакрытыйПериодПриостановки", Данные.ЕстьНезакрытыйПериод);
	ПараметрыЗаписи.Вставить("Трудозатраты", Результат.Трудозатраты);
	ПараметрыЗаписи.Вставить("ОбновитьДатыПоследнихИзменений");
	ПараметрыЗаписи.Вставить("ПроверкаОтсутствияНазначенного");
	
	Если Результат.Свойство("ПричинаИзмененияСтатуса") Тогда
		ПараметрыЗаписи.Вставить("ПричинаИзмененияСтатуса", Результат.ПричинаИзмененияСтатуса);
		ПараметрыЗаписи.Вставить("НеобходимоОтправитьУведомление", Результат.НеобходимоОтправитьУведомление);
	КонецЕсли;
	
	Если НовыйСтатус = Справочники.СтатусыОбъектов.Приостановлен Тогда
		ПараметрыЗаписи.ВидОперации = Справочники.СтатусыОбъектов.Приостановлен;
		
	ИначеЕсли НовыйСтатус = Справочники.СтатусыОбъектов.ВРаботе 
		И ТипЗнч(Объект.ОбъектОснование) = Тип("ДокументСсылка.ЗаявкаНаРазработку") 
		И ЗначениеЗаполнено(Объект.ОбъектОснование) Тогда
		ПараметрыЗаписи.ВидОперации = Справочники.СтатусыОбъектов.ВРаботе;			
	КонецЕсли;
	
	Объект.ДополнительныеСвойства.Вставить("ПроверкаИзмененияСтатусаПередЗаписью", ПараметрыЗаписи);
	
	Объект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаполнитьДополнительныеСвойства(Знач Ссылка, Знач Филиал) Экспорт
	
	ВидыНастроекФилиалов = ПланыВидовХарактеристик.ВидыНастроекФилиалов;
		
	Настройка = РегистрыСведений.НастройкиФилиалов.ЗначениеНастройки(
		Филиал, ВидыНастроекФилиалов.ИсполнителяCodeReviewНазначаетРуководитель);

	Свойства = Новый Структура;	
	Свойства.Вставить("ИсполнителяCodeReviewНазначаетРуководитель", Настройка);
	
	Реквизит = ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.РевьюерОбъекта;
	Ревьюер = РегистрыСведений.ЗначенияДополнительныхРеквизитовОбъектов.ЗначениеДополнительногоРеквизита(Ссылка, Реквизит);
	
	Свойства.Вставить("Ревьюер", Ревьюер);
	
	Возврат Свойства;
	
КонецФункции

Функция ПолучитьНовогоИсполнителяПоДействию(Знач ДанныеОбъекта, Знач Действие, Знач Свойства)
	
	// Заказчик
	Если Действие = Справочники.ДействияПриСменеСтатуса.СменаИсполнителяНаЗаказчика Тогда
		Результат = ДанныеОбъекта.Заказчик;
		
	// Последний разработчик
	ИначеЕсли Действие = Справочники.ДействияПриСменеСтатуса.СменаИсполнителяНаПоследнегоРазработчика Тогда
		Результат = ПолучитьПоследнегоРазработчикаЗадачи(ДанныеОбъекта.Ссылка);
		
	// Последний тестировщик
	ИначеЕсли Действие = Справочники.ДействияПриСменеСтатуса.СменаИсполнителяНаПоследнегоТестировщика Тогда
		Результат = ПолучитьПоследнегоТестировщикаЗадачи(ДанныеОбъекта.Ссылка);
		
	// Последний ревьюер
	ИначеЕсли Действие = Справочники.ДействияПриСменеСтатуса.СменаИсполнителяНаПоследнегоРевьюера Тогда
		Результат = ПолучитьПоследнегоРевьюераЗадачи(ДанныеОбъекта.Ссылка);
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Если Свойства = Неопределено Тогда
				Реквизит = ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.РевьюерОбъекта;
				Ревьюер = РегистрыСведений.ЗначенияДополнительныхРеквизитовОбъектов.ЗначениеДополнительногоРеквизита(
					ДанныеОбъекта.Ссылка, Реквизит);
			Иначе
				Ревьюер = Свойства.Ревьюер;
			КонецЕсли;
			
			Результат = ПолучитьРевьюера(ДанныеОбъекта.Назначена, Ревьюер);
		КонецЕсли;

	// Автор задачи
	ИначеЕсли Действие = Справочники.ДействияПриСменеСтатуса.СменаИсполнителяНаАвтораЗадачи Тогда
		Результат = ДанныеОбъекта.Автор;	

	// Текущий исполнитель
	ИначеЕсли Действие = Справочники.ДействияПриСменеСтатуса.ОставитьТекущегоИсполнителя Тогда
		Результат = ДанныеОбъекта.Назначена;			
		
	ИначеЕсли Действие = Справочники.ДействияПриСменеСтатуса.СменаИсполнителяНаПредыдущегоИсполнителя Тогда
		Результат = ПолучитьПредыдущегоИсполнителяЗадачи(ДанныеОбъекта.Ссылка);	
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	// Незаполненное значение
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНовогоИсполнителяБезДействия(Знач ДанныеОбъекта, Знач НовыйСтатус, Знач Свойства)
	
	Если Свойства = Неопределено Тогда
		Свойства = ЗаполнитьДополнительныеСвойства(ДанныеОбъекта.Ссылка, ДанныеОбъекта.Филиал);
	КонецЕсли;
	
	// Для статусов получаем ссылки на справочник СтатусыОбъектов
	НовыйСтатус = ПолучитьСсылкуНаСлужебныйСтатус(НовыйСтатус);
	СтарыйСтатус = ПолучитьСсылкуНаСлужебныйСтатус(ДанныеОбъекта.Статус);
	
	Если НовыйСтатус = Справочники.СтатусыОбъектов.Рассмотрение 
		И СтарыйСтатус = Справочники.СтатусыОбъектов.НаДоработку Тогда
		
		Результат = РегистрыСведений.СвойстваЗадач.ОтправительНаДоработку(ДанныеОбъекта.Ссылка);
		
	ИначеЕсли НовыйСтатус = Справочники.СтатусыОбъектов.НаДоработку Тогда
		
		Результат = ДанныеОбъекта.Автор;
		
	// При переводе задачи в тестирование по системе "WEB - база" получим последнего тестировщика
	// или оставим исполнителя пустым. В последнем случае, задача попадет в пул тестирования QA.
	ИначеЕсли НовыйСтатус = Справочники.СтатусыОбъектов.Тестирование
		И ДанныеОбъекта.СистемаУчета = Справочники.СистемыУчета.НайтиПоКоду("00008") Тогда
		
		Результат = ПолучитьПоследнегоТестировщикаЗадачи(ДанныеОбъекта.Ссылка);
		
	ИначеЕсли НовыйСтатус = Справочники.СтатусыОбъектов.CodeReview Тогда
		
		Ревьюер = ПолучитьРевьюера(ДанныеОбъекта.Назначена, Свойства.Ревьюер);
				
		// Если уже известен ревьюер для задачи или сотрудника, устанавливаем его
		Если ЗначениеЗаполнено(Ревьюер) Тогда
			Результат = Ревьюер;
						
		// Если руководитель самостоятельно назначает исполнителей для ревью,
		// получим последнего назначенного на ревью пользователя, или оставим поле пустым
		ИначеЕсли Свойства.ИсполнителяCodeReviewНазначаетРуководитель Тогда
			Результат = ПолучитьПоследнегоРевьюераЗадачи(ДанныеОбъекта.Ссылка);
			
		Иначе
			// Если ничего не подошло, оставляем текущего исполнителя
			Результат = ДанныеОбъекта.Назначена;
		КонецЕсли;
		
	ИначеЕсли СтарыйСтатус = Справочники.СтатусыОбъектов.Приостановлен Тогда
		Результат = ДанныеОбъекта.Назначена;
			
	ИначеЕсли ТипЗнч(ДанныеОбъекта.Ссылка) = Тип("ДокументСсылка.ВнутреннееЗадание") Тогда  
		Результат = Документы.ВнутреннееЗадание.ПолучитьНазначеного(НовыйСтатус, ДанныеОбъекта.Ссылка, 
			ДанныеОбъекта.Направление, ДанныеОбъекта.Заказчик, ДанныеОбъекта.Назначена);
		
	Иначе
		Результат = Документы.Задача.ОбновитьИсполнителя(ДанныеОбъекта.Ссылка,
			НовыйСтатус, ДанныеОбъекта.Заказчик, ДанныеОбъекта.Назначена);   
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьРевьюера(Назначенный, РевьюерЗадачи)
	
	// Если заполнен ревьюер для задачи
	Если ЗначениеЗаполнено(РевьюерЗадачи) Тогда
		Ревьюер = РевьюерЗадачи;
	Иначе
		// В противном случае, безе ревьюера для исполнителя, согласно настройкам филиала
		Ревьюер = ПолучитьРевьюераДляИсполнителя(Назначенный);
	КонецЕсли;
	
	Возврат Ревьюер;
	
КонецФункции

Функция ПолучитьРевьюераДляИсполнителя(Знач Исполнитель)
	
	Возврат РегистрыСведений.ЗначенияДополнительныхРеквизитовОбъектов.ЗначениеДополнительногоРеквизита(Исполнитель,
		ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.РевьюерОбъекта);
	
КонецФункции

Функция ПолучитьПоследнегоРазработчикаЗадачи(Знач Задача)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СвойстваЗадачСрезПоследних.Исполнитель КАК Исполнитель
	|ИЗ
	|	РегистрСведений.СвойстваЗадач.СрезПоследних(
	|			,
	|			Объект = &Объект
	|				И Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ВРаботе)) КАК СвойстваЗадачСрезПоследних";
	
	Запрос.УстановитьПараметр("Объект", Задача);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Результат = Справочники.Пользователи.ПустаяСсылка();
	Иначе
		Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Исполнитель").Получить(0);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПоследнегоРевьюераЗадачи(Знач Задача)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыОбъектов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|ГДЕ
	|	СтатусыОбъектов.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.CodeReview))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтатистикаСтатусовНазначенныхЗадач.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.СтатистикаСтатусовНазначенныхЗадач КАК СтатистикаСтатусовНазначенныхЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Статусы КАК Статусы
	|		ПО СтатистикаСтатусовНазначенныхЗадач.Статус = Статусы.Ссылка
	|ГДЕ
	|	СтатистикаСтатусовНазначенныхЗадач.Задача = &Задача
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатистикаСтатусовНазначенныхЗадач.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Задача", Задача);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Результат = Справочники.Пользователи.ПустаяСсылка();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Результат = Выборка.Пользователь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПоследнегоТестировщикаЗадачи(Знач Задача)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СвойстваЗадачСрезПоследних.Исполнитель КАК Исполнитель
	|ИЗ
	|	РегистрСведений.СвойстваЗадач.СрезПоследних(
	|			,
	|			Объект = &Объект
	|				И Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Тестирование)) КАК СвойстваЗадачСрезПоследних";
	
	Запрос.УстановитьПараметр("Объект", Задача);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Результат = Справочники.Пользователи.ПустаяСсылка();
	Иначе
		Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Исполнитель").Получить(0);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПредыдущегоИсполнителяЗадачи(Знач Задача) 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СвойстваЗадач.Исполнитель КАК Исполнитель
	|ИЗ
	|	РегистрСведений.СвойстваЗадач КАК СвойстваЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Участники КАК Участники
	|		ПО (Участники.Пользователь = СвойстваЗадач.Исполнитель)
	|			И СвойстваЗадач.Объект = Участники.Объект
	|ГДЕ
	|	Участники.Роль = ЗНАЧЕНИЕ(Справочник.РолиУчастников.Исполнитель)
	|	И СвойстваЗадач.Объект = &Объект
	|	И Участники.Скрытый
	|
	|УПОРЯДОЧИТЬ ПО
	|	СвойстваЗадач.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Объект", Задача);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Результат = Справочники.Пользователи.ПустаяСсылка();
	Иначе
		Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Исполнитель").Получить(0);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
