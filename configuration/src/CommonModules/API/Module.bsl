///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Модуль обработки входящих запрос в http-сервис API
//
// Для проверки заполнения тела запроса, корректности структуры json тела запроса
// и наличия параметров рекомендуется использовать метод ПолучитьПараметрыТелаЗапроса
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Автосохранение

Функция Автосохранение(Знач Запрос) Экспорт
	
	Результат = ПолучитьПараметрыТелаЗапроса(Запрос, "Автосохранение");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Параметры = Результат.Параметры;
	Объект = XMLЗначение(Тип(Параметры.Тип), Параметры.ИдентификаторОбъекта);
	
	РегистрыСведений.АвтосохраненныеОписания.СохранитьОписание(Параметры.Пользователь, Объект, Параметры.Описание);
	
	Возврат ПолучитьСтруктуруОтвета(0);
	
КонецФункции

#КонецОбласти

#Область Ассеты

Функция ЗафиксироватьОбновлениеАссетов(Знач Запрос) Экспорт

	ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
	
	РезультатОбработки = ОбработатьJSON(ТелоЗапроса);
	Если НЕ РезультатОбработки.Успешно Тогда
		Возврат ПолучитьСтруктуруОтвета(8, , РезультатОбработки.ОписаниеОшибки);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ВерсииАссетов.СоздатьНаборЗаписей();
	
	Для Каждого Элемент Из РезультатОбработки.Данные Цикл
		Дата = ПрочитатьДатуJSON(Элемент.Дата, ФорматДатыJSON.ISO);
		ТипАссетов = XMLЗначение(Тип("СправочникСсылка.ТипыАссетов"), Элемент.Тип);
		
		Запись = НаборЗаписей.Добавить();
		Запись.Период = Дата;
		Запись.ТипАссетов = ТипАссетов;
		Запись.Версия = Элемент.Версия;
		Запись.Обновлен = Истина;
	КонецЦикла;
	
	НаборЗаписей.Записать(РежимЗамещения.Обновление);
	
	Возврат ПолучитьСтруктуруОтвета(0);
	
КонецФункции

Функция ПолучитьАссетыДляОбновления(Знач ПараметрыЗапроса) Экспорт
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "Ассеты");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	НастрокиОбновленияАссетов = Справочники.ТипыАссетов.ПолучитьАссетыДляОбновления(Истина);
	
	Возврат ПолучитьСтруктуруОтвета(0, НастрокиОбновленияАссетов);
	
КонецФункции

#КонецОбласти

#Область ВнутренниеТрудозатраты

// Получить GUID внутренних трудозатрат по номеру
//
// Параметры:
//  ПараметрыЗапроса	 - Соответствие - Параметры запроса
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Массив - guid внутренних трудозатрат
//
Функция ПолучитьИдентификаторВнутреннихТрудозатрат(Знач ПараметрыЗапроса) Экспорт
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "ПолучитьИдентификаторВнутреннихТрудозатрат");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	GUID = Результат.Параметры.ВнутренниеТрудозатраты.УникальныйИдентификатор();
	СтрокаGUID = Строка(GUID);
	
	Возврат ПолучитьСтруктуруОтвета(0, СтрокаGUID);
	
КонецФункции

// Возвращает список внутренних трудозатрат
//
// Параметры:
//  ПараметрыЗапроса	 - Соответствие - Параметры запроса
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Массив - список внутренних трудозатрат
//
Функция ПолучитьСписокВнутреннихТрудозатрат(Знач ПараметрыЗапроса) Экспорт
	
	ЭтоСлужебныйПользователь = ЭтоСлужебныйПользователь();
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "СписокВнутреннихТрудозатрат", ЭтоСлужебныйПользователь);
	
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Данные = ПолучитьДанныеПоВнутреннимТрудозатратам(Результат.Параметры);
	
	Возврат ПолучитьСтруктуруОтвета(0, Данные);
	
КонецФункции

// Создает внутренние трудозатраты
//
// Параметры:
//  Запрос	 - HTTPЗапрос	 - Запрос, который пришел на http сервис.
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Структура - данные созданной заявки
//
Функция СоздатьВнутренниеТрудозатраты(Знач Запрос) Экспорт
	
	Если ЭтоСлужебныйПользователь() Тогда
		Возврат ПолучитьСтруктуруОтвета(18);
	КонецЕсли;
	
	Результат = ПолучитьПараметрыТелаЗапроса(Запрос, "СоздатьВнутренниеТрудозатраты");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	ДанныеЗаполнения = Результат.Параметры;
	ДанныеЗаполнения.Вставить("ИсточникДанных", "API");
	ДанныеЗаполнения.Вставить("Автор", ТекущийПользователь);
	
	Если ДанныеЗаполнения.Участники = Неопределено Тогда
		Участники = Новый ТаблицаЗначений;
		Участники.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
		Участники.Колонки.Добавить("Активный", Новый ОписаниеТипов("Булево"));
		
		НоваяСтрока = Участники.Добавить();
		НоваяСтрока.Пользователь = ТекущийПользователь;
		НоваяСтрока.Активный = Истина;
		
		ДанныеЗаполнения.Участники = Участники;
	КонецЕсли;
	
	ДокументОбъект = Документы.ВнутренниеТрудозатраты.СоздатьДокумент();
	ДокументОбъект.Заполнить(ДанныеЗаполнения);
	
	Успешно = Истина;
	
	Попытка
		ДокументОбъект.Записать();
	Исключение
		Успешно = Ложь;
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Если Успешно Тогда
		ДанныеВнутреннихТрудозатрат = СформироватьДанныеВнутреннихТрудозатрат(ДокументОбъект);
		СтруктураОтвета = ПолучитьСтруктуруОтвета(0, ДанныеВнутреннихТрудозатрат);
	Иначе
		СтруктураОтвета = ПолучитьСтруктуруОтвета(17, , ТекстОшибки);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

#КонецОбласти

#Область ГруппыЗаказчиков

// Возвращает список доступных групп заказчиков
//
// Параметры:
//  ПараметрыЗапроса	 - Соответствие - Параметры запроса
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Массив - список данных групп заказчиков
//
Функция ПолучитьГруппыЗаказчиков(Знач ПараметрыЗапроса) Экспорт
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "ГруппыЗаказчиков");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГруппыЗаказчиковНаправлений.Ссылка КАК Ссылка,
	|	ГруппыЗаказчиковНаправлений.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ГруппыЗаказчиковНаправлений КАК ГруппыЗаказчиковНаправлений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО ГруппыЗаказчиковНаправлений.Ссылка = КлючОчереди.ГруппаЗаказчиков
	|			И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистемаГруппаЗаказчиков))
	|			И (КлючОчереди.Направление = &Направление)
	|			И (КлючОчереди.Система = &Система)
	|			И (НЕ КлючОчереди.ПометкаУдаления)
	|			И (НЕ ГруппыЗаказчиковНаправлений.ПометкаУдаления)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ПО (КлючОчереди.Ссылка = ОчередиЗаявок.КлючОчередиОбъекта)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("Направление", Результат.Параметры.Направление);
	Запрос.УстановитьПараметр("Система", Результат.Параметры.Система);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокГруппЗаказчиков = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураГруппыЗаказчиков = Новый Структура;
		СтруктураГруппыЗаказчиков.Вставить("id", XMLСтрока(Выборка.Ссылка));
		СтруктураГруппыЗаказчиков.Вставить("name", Выборка.Наименование);
			
		СписокГруппЗаказчиков.Добавить(СтруктураГруппыЗаказчиков);
	КонецЦикла;

	Возврат ПолучитьСтруктуруОтвета(0, СписокГруппЗаказчиков);
	
КонецФункции

#КонецОбласти

#Область Задачи

// Создает задачу и основание заявку на разработку
//
// Параметры:
//  Запрос	 - HTTPЗапрос	 - Запрос, который пришел на http сервис.
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Структура - структура созданной задачи
//
Функция БыстроеСозданиеЗадачи(Знач Запрос) Экспорт
	
	Если ЭтоСлужебныйПользователь() Тогда
		Возврат ПолучитьСтруктуруОтвета(18);
	КонецЕсли;
	
	Результат = ПолучитьПараметрыТелаЗапроса(Запрос, "БыстроеСозданиеЗадачи");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
		
	ДанныеЗаполнения = Результат.Параметры;
	ДанныеЗаполнения.Вставить("Автор", ПараметрыСеанса.ТекущийПользователь);
	
	Результат = Документы.Задача.БыстроеСозданиеЗадачи(ДанныеЗаполнения);
	
	Если Результат.Успешно Тогда
		ДанныеЗадачи = СформироватьДанныеЗадачи(Результат.Задача);
		Возврат ПолучитьСтруктуруОтвета(0, ДанныеЗадачи);
	Иначе
		Возврат ПолучитьСтруктуруОтвета(17, , Результат.ТекстОшибки);
	КонецЕсли;
	
КонецФункции

// Добавление Story Point в задачу
//
// Параметры:
//	Идентификатор	 - Строка		 - идентификатор спринта.
//  Запрос			 - HTTPЗапрос	 - Запрос, который пришел на http сервис.
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Структура - Если заполнено - значит ошибка
//
Функция ЗаписатьStoryPoint(Знач НомерЗадачи, Знач Запрос) Экспорт
	
	Если ЭтоСлужебныйПользователь() Тогда
		Возврат ПолучитьСтруктуруОтвета(18);
	КонецЕсли;

	Результат = ПолучитьСсылкуПоНомеруЗадачи(НомерЗадачи);
	Если НЕ ЗначениеЗаполнено(Результат.Значение) Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
		
	Задача = Результат.Значение;
	
	ДанныеЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "Филиал");
	
	Результат = ПолучитьПараметрыТелаЗапроса(Запрос, "ДобавитьStoryPointВЗадачу");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	ОцениватьЗадачиВStoryPoint = РегистрыСведений.НастройкиФилиалов.ЗначениеНастройки(ДанныеЗадачи.Филиал,
		ПланыВидовХарактеристик.ВидыНастроекФилиалов.ОцениватьЗадачиВStoryPoint);

	Если НЕ ОцениватьЗадачиВStoryPoint Тогда
		Возврат ПолучитьСтруктуруОтвета(2, , "Для данной задачи нельзя установить Story Point");
	КонецЕсли;
	
	ЗадачаОбъект = Задача.ПолучитьОбъект();
    ЗадачаОбъект.ОценкаStoryPoint = Результат.Параметры.ПлановоеВремя;
	
	Попытка
		ЗадачаОбъект.Записать();
	Исключение
		Возврат ПолучитьСтруктуруОтвета(2, , ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ПолучитьСтруктуруОтвета(0);
	
КонецФункции

// Обновить результат последнего тестирования TeamCity по задаче
//
// Параметры:
//  Запрос	 - HTTPЗапрос	 - Запрос, который пришел на http сервис.
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//
Функция ОбновитьРезультатПоследнегоТестирования(Знач Запрос) Экспорт
	
	Если НЕ ИнтеграцияДополнительныхПодсистем.ПодсистемаСуществует("TeamCity") Тогда 
		Возврат ПолучитьСтруктуруОтвета(20,, "Данный метод недоступен, требуется подсистема ""TeamCity""");
	КонецЕсли;
	
	Результат = ПолучитьПараметрыТелаЗапроса(Запрос, "ОбновитьРезультатПоследнегоТестирования");
	
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Параметры = Результат.Параметры;
			
	НомерЗадачи = Параметры.task;
	РезультатТестирования = Параметры.testResult;
	
	НомерЗадачиСПрефиксом = Документы.Задача.ДополнитьНомерЗадачи(НомерЗадачи);
	ЗадачаСсылка = Документы.Задача.НайтиПоНомеру(НомерЗадачиСПрефиксом);
	
	Если НЕ ЗначениеЗаполнено(ЗадачаСсылка) Тогда
		Возврат ПолучитьСтруктуруОтвета(4);
	КонецЕсли;
	
	Результат = ИнтеграцияДополнительныхПодсистем.ОбновитьРезультатПоследнегоТестирования(ЗадачаСсылка, РезультатТестирования);
	
	Если НЕ Результат.Успешно Тогда
		Возврат ПолучитьСтруктуруОтвета(20, , Результат.ТекстОшибки);
	КонецЕсли;
		
	Возврат ПолучитьСтруктуруОтвета(0);
		
КонецФункции

// Возвращает данные задачи
//
// Параметры:
//  Идентификатор		 - Строка		 - GUID задачи или номер
//  ПараметрыЗапроса	 - Соответствие - Параметры запроса
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Массив - Описания трудозатрат по объекту
//
Функция ПолучитьДанныеЗадачи(Знач Идентификатор, Знач ПараметрыЗапроса) Экспорт

	Результат = ПолучитьСсылкуТипа(Идентификатор, Тип("ДокументСсылка.Задача"), "id");
	Если Результат.Значение = Неопределено Тогда
		Результат = ПолучитьСсылкуПоНомеруЗадачи(Идентификатор);
		
		Если Результат.Значение = Неопределено Тогда
			Возврат Результат.СтруктураОтвета;
		КонецЕсли;
	КонецЕсли;
	
	РезультатПараметры = ПолучитьПараметры(ПараметрыЗапроса, "ПолучитьДанныеЗадачи");
	Если РезультатПараметры.Параметры = Неопределено Тогда
		Возврат РезультатПараметры.СтруктураОтвета;
	КонецЕсли;
	
	#Область ТекстЗапроса
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Задача.Ссылка КАК Ссылка,
		|	Задача.Наименование КАК Наименование,
		|	Задача.Заказчик КАК Заказчик,
		|	ПРЕДСТАВЛЕНИЕ(Задача.Заказчик) КАК ЗаказчикФИО,
		|	Задача.Описание КАК Описание,
		|	ПРЕДСТАВЛЕНИЕ(Задача.Статус) КАК Статус,
		|	Задача.Дата КАК Дата,
		|	Задача.Назначена КАК Назначена,
		|	ПРЕДСТАВЛЕНИЕ(Задача.Назначена) КАК ПредставлениеНазначена
		|ИЗ
		|	Документ.Задача КАК Задача
		|ГДЕ
		|	Задача.Ссылка = &Ссылка";
	#КонецОбласти
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Результат.Значение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Данные = Новый Структура;
	
	Если ЗначениеЗаполнено(РезультатПараметры.Параметры.Включить) Тогда
		ДополнительныеСвойства = СтрРазделить(НРег(РезультатПараметры.Параметры.Включить), ", ", Ложь);
		
		Свойство = "subject";
		Если ДополнительныеСвойства.Найти(Свойство) <> Неопределено Тогда
			Данные.Вставить(Свойство, Выборка.Наименование);
		КонецЕсли;
		
		Свойство = "customer";
		Если ДополнительныеСвойства.Найти(Свойство) <> Неопределено Тогда			
			Данные.Вставить(Свойство, Новый Структура("id, name", XMLСтрока(Выборка.Заказчик), Выборка.ЗаказчикФИО));
		КонецЕсли;
		
		Свойство = "description";
		Если ДополнительныеСвойства.Найти(Свойство) <> Неопределено Тогда
			Данные.Вставить(Свойство, Выборка.Описание.Получить());
		КонецЕсли;
		
		Свойство = "create_date";
		Если ДополнительныеСвойства.Найти(Свойство) <> Неопределено Тогда
			Данные.Вставить(Свойство, Выборка.Дата);
		КонецЕсли;
		
		Свойство = "status";
		Если ДополнительныеСвойства.Найти(Свойство) <> Неопределено Тогда
			Данные.Вставить(Свойство, Выборка.Статус);
		КонецЕсли;
		
		Свойство = "guid";
		Если ДополнительныеСвойства.Найти(Свойство) <> Неопределено Тогда
			Данные.Вставить(Свойство, XMLСтрока(Выборка.Ссылка));
		КонецЕсли;
		
		Свойство = "weblink";
		Если ДополнительныеСвойства.Найти(Свойство) <> Неопределено Тогда
			Данные.Вставить(Свойство, ОбщегоНазначения.ПолучитьHTTPСсылкуНаОбъект(Выборка.Ссылка));
		КонецЕсли;
		
		Свойство = "performer";
		Если ДополнительныеСвойства.Найти(Свойство) <> Неопределено Тогда
			Данные.Вставить("performer", Новый Структура("id, name", XMLСтрока(Выборка.Назначена), Выборка.ПредставлениеНазначена));
		КонецЕсли;
	Иначе
		// все данные
		Данные.Вставить("subject", Выборка.Наименование);
		Данные.Вставить("customer", Новый Структура("id, name", XMLСтрока(Выборка.Заказчик), Выборка.ЗаказчикФИО));
		Данные.Вставить("description", Выборка.Описание.Получить());
		Данные.Вставить("create_date", Выборка.Дата);
		Данные.Вставить("status", Выборка.Статус);
		Данные.Вставить("guid", XMLСтрока(Выборка.Ссылка));
		Данные.Вставить("weblink", ОбщегоНазначения.ПолучитьHTTPСсылкуНаОбъект(Выборка.Ссылка));
		Данные.Вставить("performer", Новый Структура("id, name", XMLСтрока(Выборка.Назначена), Выборка.ПредставлениеНазначена));
	КонецЕсли;
	
	СтруктураОтвета = ПолучитьСтруктуруОтвета(0, Данные);
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получить GUID задачи по номеру
//
// Параметры:
//  ПараметрыЗапроса	 - Соответствие - Параметры запроса
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Массив - guid задачи
//
Функция ПолучитьИдентификаторЗадачи(Знач ПараметрыЗапроса) Экспорт
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "ПолучитьИдентификаторЗадачи");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	СтрокаGUID = XMLСтрока(Результат.Параметры.Задача);
	
	Возврат ПолучитьСтруктуруОтвета(0, СтрокаGUID);
	
КонецФункции

// Получить информацию по задачам
//
// Параметры:
//  Запрос	 - HTTPЗапрос	 - Запрос, который пришел на http сервис.
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Массив - массив структур задач
//
Функция ПолучитьИнформациюПоЗадачам(Знач Запрос) Экспорт
	
	ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
	Если НЕ ЗначениеЗаполнено(ТелоЗапроса) Тогда
		Возврат ПолучитьСтруктуруОтвета(7);
	КонецЕсли;
	
	РезультатОбработки = ОбработатьJSON(ТелоЗапроса);
	Если НЕ РезультатОбработки.Успешно Тогда
		Возврат ПолучитьСтруктуруОтвета(8, , РезультатОбработки.ОписаниеОшибки);
	КонецЕсли;
	
	Номера = РезультатОбработки.Данные;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Задача.Номер КАК Номер,
		|	Задача.Направление КАК Направление,
		|	Задача.Заказчик КАК Заказчик,
		|	Задача.Наименование КАК Наименование,
		|	Задача.Описание КАК Описание
		|ПОМЕСТИТЬ ДанныеОбъектов
		|ИЗ
		|	Документ.Задача КАК Задача
		|ГДЕ
		|	Задача.Номер В(&Номера)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаявкаНаРазработку.Номер,
		|	ЗаявкаНаРазработку.Направление,
		|	ЗаявкаНаРазработку.Автор,
		|	ЗаявкаНаРазработку.Наименование,
		|	ЗаявкаНаРазработку.Описание
		|ИЗ
		|	Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
		|ГДЕ
		|	ЗаявкаНаРазработку.Номер В(&Номера)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеОбъектов.Номер КАК Номер,
		|	ДанныеОбъектов.Направление КАК НаправлениеСсылка,
		|	ПРЕДСТАВЛЕНИЕ(ДанныеОбъектов.Направление) КАК НаправлениеНаименование,
		|	ДанныеОбъектов.Заказчик КАК ЗаказчикСсылка,
		|	Пользователи.Наименование КАК ЗаказчикНаименование,
		|	Пользователи.Почта КАК ЗаказчикПочта,
		|	ДанныеОбъектов.Наименование КАК Наименование,
		|	ДанныеОбъектов.Описание КАК Описание
		|ИЗ
		|	ДанныеОбъектов КАК ДанныеОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ДанныеОбъектов.Заказчик = Пользователи.Ссылка";
	
	ЗапросДанных = Новый Запрос(ТекстЗапроса);
	ЗапросДанных.УстановитьПараметр("Номера", Номера);
	
	Данные = Новый Массив;
	
	РезультатЗапроса = ЗапросДанных.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаправлениеGUID = XMLСтрока(Выборка.НаправлениеСсылка);
			ДанныеНаправления = Новый Структура("Ссылка, Наименование", НаправлениеGUID, Выборка.НаправлениеНаименование);
			
			ЗаказчикGUID = XMLСтрока(Выборка.ЗаказчикСсылка);
			ДанныеЗаказчик = Новый Структура;
			ДанныеЗаказчик.Вставить("Ссылка", ЗаказчикGUID);
			ДанныеЗаказчик.Вставить("Наименование", Выборка.ЗаказчикНаименование);
			ДанныеЗаказчик.Вставить("Почта", Выборка.ЗаказчикПочта);
			
			ДанныеЗаявки = Новый Структура;
			ДанныеЗаявки.Вставить("Номер", Выборка.Номер);
			ДанныеЗаявки.Вставить("Наименование", Выборка.Наименование);
			ДанныеЗаявки.Вставить("Направление", ДанныеНаправления);
			
			ПроверенноеОписание = ПреобразоватьОписаниеДляСкрытияДанных(Выборка.Описание);
			ДанныеЗаявки.Вставить("Описание", XMLСтрока(ПроверенноеОписание));
			
			ДанныеЗаявки.Вставить("Заказчик", ДанныеЗаказчик);
			Данные.Добавить(ДанныеЗаявки);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПолучитьСтруктуруОтвета(0, Данные);
	
КонецФункции

// Возвращает список активных задач пользователя
//
// Параметры:
//  ПараметрыЗапроса	 - Соответствие - Параметры запроса
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Массив - Описания задач пользователя
//
Функция ПолучитьСписокЗадач(Знач ПараметрыЗапроса) Экспорт
	
	ЭтоСлужебныйПользователь = ЭтоСлужебныйПользователь();
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "СписокЗадач", ЭтоСлужебныйПользователь);
	
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Результат.Параметры.Исполнитель)
		И НЕ ЗначениеЗаполнено(Результат.Параметры.Команда) Тогда

		Возврат ПолучитьСтруктуруОтвета(20, ,"Должен быть заполнен Исполнитель или Команда");
	КонецЕсли;
	
	Данные = ПолучитьДанныеПоЗадачам(Результат.Параметры);
		
	Возврат ПолучитьСтруктуруОтвета(0, Данные);
	
КонецФункции

#КонецОбласти

#Область ЗаявкиНаРазработку

// Делегирует заявку на указанного пользователя
//
// Параметры:
//  Идентификатор		 - Строка		 - GUID заявки.
//  ПараметрыЗапроса	 - Соответствие - параметры запроса
//
// Возвращаемое значение:
//  Структура - Структура ответа:
// * code - Число - код ответа
// * message - Строка - сообщение в случае возникновения ошибки
// * data - Структура - структура созданной задачи
//
Функция ДелегироватьЗаявку(Знач Идентификатор, Знач ПараметрыЗапроса) Экспорт
	
	Если ЭтоСлужебныйПользователь() Тогда
		Возврат ПолучитьСтруктуруОтвета(18);
	КонецЕсли;
	
	Результат = ПолучитьСсылкуТипа(Идентификатор, Тип("ДокументСсылка.ЗаявкаНаРазработку"), "id");
	Если Результат.Значение = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Заявка = Результат.Значение;
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "ДелегироватьЗаявку");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Если НЕ БезопасностьПереопределяемый.ПравоДелегированияЗаявки(Заявка) Тогда
		ТекстОшибки = "У пользователя нет прав на делегирование данной заявки";
		Возврат ПолучитьСтруктуруОтвета(20, , ТекстОшибки);
	КонецЕсли;
	
	Результат = Документы.ЗаявкаНаРазработку.ДелегироватьЗаявку(Заявка, Заявка.Автор, Результат.Параметры.НовыйАвтор);
	
	Если НЕ Результат.ЕстьОшибка Тогда
		Возврат ПолучитьСтруктуруОтвета(0);
	Иначе
		Возврат ПолучитьСтруктуруОтвета(17, , Результат.ТекстСообщения);
	КонецЕсли;
	
КонецФункции

// Получить задачи заявки
//
// Параметры:
//  Идентификатор		 - Строка - Идентификатор заявки
//  ПараметрыЗапроса	 - Соответствие - параметры запроса
// 
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Массив - массив задач
//
Функция ПолучитьЗадачиЗаявки(Знач Идентификатор, Знач ПараметрыЗапроса) Экспорт
	
	Если ЭтоСлужебныйПользователь() Тогда
		Возврат ПолучитьСтруктуруОтвета(18);
	КонецЕсли;
	
	ИмяПараметра = "id";
	
	Результат = ПолучитьСсылкуТипа(Идентификатор, Тип("ДокументСсылка.ЗаявкаНаРазработку"), ИмяПараметра);
	Если Результат.Значение = Неопределено Тогда
		Результат = ПолучитьСсылкуОбъектаПоНомеру(Документы.ЗаявкаНаРазработку, Идентификатор, ИмяПараметра);
		
		Если Результат.Значение = Неопределено Тогда
			Возврат Результат.СтруктураОтвета;
		КонецЕсли;
	КонецЕсли;
	
	Заявка = Результат.Значение;
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "ПолучитьЗадачиЗаявки");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Задача.Ссылка КАК Задача,
	|	Задача.Номер КАК Номер,
	|	Задача.Наименование КАК Наименование,
	|	Задача.СистемаУчета КАК Система,
	|	ПРЕДСТАВЛЕНИЕ(Задача.СистемаУчета) КАК СистемаПредставление
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	Задача.ОбъектОснование = &ОбъектОснование
	|{ГДЕ
	|	Задача.СистемаУчета КАК Система}";
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст = ТекстЗапроса;
	ПостроительЗапроса.Параметры.Вставить("ОбъектОснование", Заявка);
	
	Если ЗначениеЗаполнено(Результат.Параметры.СистемаУчета) Тогда
		ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ПостроительЗапроса,
			"Система", ВидСравнения.Равно, Результат.Параметры.СистемаУчета);
	КонецЕсли;
	
	ПостроительЗапроса.Выполнить();
	РезультатЗапроса = ПостроительЗапроса.Результат;
	
	Результат = Новый Массив;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеСистемы = Новый Структура("id, name", XMLСтрока(Выборка.Система), Выборка.СистемаПредставление);
			
			ДанныеЗадачи = Новый Структура;
			ДанныеЗадачи.Вставить("id", XMLСтрока(Выборка.Задача));
			ДанныеЗадачи.Вставить("number", Выборка.Номер);
			ДанныеЗадачи.Вставить("name", Выборка.Наименование);
			ДанныеЗадачи.Вставить("system", ДанныеСистемы);
			
			Результат.Добавить(ДанныеЗадачи);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПолучитьСтруктуруОтвета(0, Результат);
	
КонецФункции

// Получить GUID заявки по номеру
//
// Параметры:
//  ПараметрыЗапроса	 - Соответствие - Параметры запроса
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Массив - guid заявки
//
Функция ПолучитьИдентификаторЗаявки(Знач ПараметрыЗапроса) Экспорт
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "ПолучитьИдентификаторЗаявки");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	СтрокаGUID = XMLСтрока(Результат.Параметры.Заявка);
	
	Возврат ПолучитьСтруктуруОтвета(0, СтрокаGUID);
	
КонецФункции

// Возвращает данные заявки
//
// Параметры:
//  Идентификатор		 - Строка		 - GUID заявки или номер
//  ПараметрыЗапроса	 - Соответствие - Параметры запроса
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Массив - Описания деталей заявки 
//
Функция ПолучитьДанныеЗаявки(Знач Идентификатор, Знач ПараметрыЗапроса) Экспорт
	
	Результат = ПолучитьСсылкуПоНомеруЗаявки(Идентификатор);
	Если НЕ ЗначениеЗаполнено(Результат.Значение) Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	РезультатПараметры = ПолучитьПараметры(ПараметрыЗапроса, "ПолучитьДанныеЗаявки");
	Если РезультатПараметры.Параметры = Неопределено Тогда
		Возврат РезультатПараметры.СтруктураОтвета;
	КонецЕсли;
	
	#Область ТекстЗапроса
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗаявкаНаРазработку.Ссылка КАК Ссылка,
		|	ЗаявкаНаРазработку.Номер КАК Номер,
		|	ЗаявкаНаРазработку.Наименование КАК Наименование,
		|	ЗаявкаНаРазработку.ДатаСоздания КАК ДатаСоздания,
		|	ПРЕДСТАВЛЕНИЕ(ЗаявкаНаРазработку.Направление) КАК Направление,
		|	ПРЕДСТАВЛЕНИЕ(ЗаявкаНаРазработку.ВидПроцесса) КАК ВидПроцесса,
		|	ПРЕДСТАВЛЕНИЕ(ЗаявкаНаРазработку.ЮридическоеЛицо) КАК ЮридическоеЛицо,
		|	ЗаявкаНаРазработку.Описание КАК Описание,
		|	ПРЕДСТАВЛЕНИЕ(СтатусыЗаявокПоСистемам.Статус) КАК Статус,
		|	ПРЕДСТАВЛЕНИЕ(СтатусыЗаявокПоСистемам.Система) КАК Система
		|ИЗ
		|	Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
		|		ПО ЗаявкаНаРазработку.Ссылка = СтатусыЗаявокПоСистемам.Заявка
		|ГДЕ
		|	ЗаявкаНаРазработку.Ссылка = &Ссылка
		|ИТОГИ ПО
		|	Ссылка";
	#КонецОбласти
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Результат.Значение);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Выборка.Следующий();
	
	Данные = Новый Структура;
	
	СтатусыПоСистемам = Новый Массив;
	Детали = Выборка.Выбрать();
	
	Пока Детали.Следующий() Цикл
		СтатусыИСистемы = Новый Структура;
		
		СтатусыИСистемы.Вставить("system", Детали.Система);
		СтатусыИСистемы.Вставить("status", Детали.Статус);
		
		СтатусыПоСистемам.Добавить(СтатусыИСистемы);
	КонецЦикла;
		
	Если ЗначениеЗаполнено(РезультатПараметры.Параметры.Включить) Тогда
		ДополнительныеСвойства = СтрРазделить(НРег(РезультатПараметры.Параметры.Включить), ", ", Ложь);
		
		Свойство = "id";
		Если ДополнительныеСвойства.Найти(Свойство) <> Неопределено Тогда
			Данные.Вставить(Свойство, XMLСтрока(Выборка.Ссылка));
		КонецЕсли;
		
		Свойство = "number";
		Если ДополнительныеСвойства.Найти(Свойство) <> Неопределено Тогда
			Данные.Вставить(Свойство, Выборка.Номер);
		КонецЕсли;
		
		Свойство = "name";
		Если ДополнительныеСвойства.Найти(Свойство) <> Неопределено Тогда
			Данные.Вставить(Свойство, Выборка.Наименование);
		КонецЕсли;
		
		Свойство = "date";
		Если ДополнительныеСвойства.Найти(Свойство) <> Неопределено Тогда
			Данные.Вставить(Свойство, Выборка.ДатаСоздания);
		КонецЕсли; 
		
		Свойство = "description";
		Если ДополнительныеСвойства.Найти(Свойство) <> Неопределено Тогда
			Данные.Вставить(Свойство, Выборка.Описание.Получить());
		КонецЕсли;
		
		Свойство = "direction";
		Если ДополнительныеСвойства.Найти(Свойство) <> Неопределено Тогда
			Данные.Вставить(Свойство, Выборка.Направление);
		КонецЕсли;
		
		Свойство = "process";
		Если ДополнительныеСвойства.Найти(Свойство) <> Неопределено Тогда
			Данные.Вставить(Свойство, Выборка.ВидПроцесса);
		КонецЕсли;
		
		Свойство = "entity";
		Если ДополнительныеСвойства.Найти(Свойство) <> Неопределено Тогда
			Данные.Вставить(Свойство, Выборка.ЮридическоеЛицо);
		КонецЕсли;
		
		Свойство = "systems";
		Если ДополнительныеСвойства.Найти(Свойство) <> Неопределено Тогда
			Данные.Вставить(Свойство, СтатусыПоСистемам);
		КонецЕсли;
		
	Иначе
		// все данные
		Данные.Вставить("id", XMLСтрока(Выборка.Ссылка));
		Данные.Вставить("number", Выборка.Номер);
		Данные.Вставить("name", Выборка.Наименование);
		Данные.Вставить("date", Выборка.ДатаСоздания);
		Данные.Вставить("description", Выборка.Описание.Получить());
		Данные.Вставить("direction", Выборка.Направление);
		Данные.Вставить("process", Выборка.ВидПроцесса); 
		Данные.Вставить("entity", Выборка.ЮридическоеЛицо);
		Данные.Вставить("systems", СтатусыПоСистемам);
	КонецЕсли;
	
	СтруктураОтвета = ПолучитьСтруктуруОтвета(0, Данные);
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Возвращает список заявок на разработку
//
// Параметры:
//  ПараметрыЗапроса	 - Соответствие - Параметры запроса
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Массив - список заявок на разработку
//
Функция ПолучитьСписокЗаявок(Знач ПараметрыЗапроса) Экспорт
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "СписокЗаявок");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	СписокЗаявок = ПолучитьДанныеПоЗаявкам(Результат.Параметры);
	
	Возврат ПолучитьСтруктуруОтвета(0, СписокЗаявок);
	
КонецФункции

// Создает подчиненную задачу от заявки на разработку
//
// Параметры:
//  Идентификатор		 - Строка		 - идентификатор заявки.
//  ПараметрыЗапроса	 - Структура	 - параметры запроса.
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Структура - даные созданной задачи
//
Функция СоздатьЗадачуОтЗаявки(Знач Идентификатор, Знач ПараметрыЗапроса) Экспорт
	
	Если ЭтоСлужебныйПользователь() Тогда
		Возврат ПолучитьСтруктуруОтвета(18);
	КонецЕсли;
	
	Результат = ПолучитьСсылкуТипа(Идентификатор, Тип("ДокументСсылка.ЗаявкаНаРазработку"), "id");
	Если Результат.Значение = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Заявка = Результат.Значение;
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "СоздатьЗадачуОтЗаявки");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Результат = Документы.ЗаявкаНаРазработку.СоздатьЗадачуПоСистеме(Заявка, Результат.Параметры);
	
	Если Результат.Успешно Тогда
		ДанныеЗадачи = СформироватьДанныеЗадачи(Результат.Задача);
		Возврат ПолучитьСтруктуруОтвета(0, ДанныеЗадачи);
	Иначе
		Возврат ПолучитьСтруктуруОтвета(17, , Результат.ТекстОшибки);
	КонецЕсли;
	
КонецФункции

// Создает заявку
//
// Параметры:
//  Запрос	 - HTTPЗапрос	 - объект запрос.
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Структура - данные созданной заявки
//
Функция СоздатьЗаявку(Знач Запрос) Экспорт
	
	Если ЭтоСлужебныйПользователь() Тогда
		Возврат ПолучитьСтруктуруОтвета(18);
	КонецЕсли;
	
	Результат = ПолучитьПараметрыТелаЗапроса(Запрос, "СоздатьЗаявку");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	ДанныеЗаполнения = Результат.Параметры;
	ДанныеЗаполнения.Вставить("ИсточникДанных", "API");
	
	Результат = Документы.ЗаявкаНаРазработку.СозданиеЗаявки(ДанныеЗаполнения);
	
	Если Результат.Успешно Тогда
		ДанныеЗаявки = СформироватьДанныеЗаявки(Результат.ДокументОбъект);
		СтруктураОтвета = ПолучитьСтруктуруОтвета(0, ДанныеЗаявки);
	Иначе
		СтруктураОтвета = ПолучитьСтруктуруОтвета(17, , Результат.ТекстОшибки);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

#КонецОбласти

#Область Дайджест     

// Обозначить дайджест опубликованным
//
// Параметры:
//  Запрос	 - HTTPЗапрос	 - Запрос, который пришел на http сервис
// 
// Возвращаемое значение:
//  Структура - Структура ответа
//
Функция ОбозначитьДайджестОпубликованным(Знач Запрос) Экспорт
	
	Если НЕ ИнтеграцияДополнительныхПодсистем.ПодсистемаСуществует("ОбновлениеИнформационнойБазы") Тогда 
		Возврат ПолучитьСтруктуруОтвета(20,, "Данный метод недоступен, требуется подсистема ""ОбновлениеИнформационнойБазы""");
	КонецЕсли;

	Результат = ПолучитьПараметрыТелаЗапроса(Запрос, "ОбозначитьДайджестОпубликованным");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	РегистрыСведений.ОписаниеИзмененийКЗадачам.ОтметитьОпубликованым(Результат.Параметры.МассивЗадач);
	
	Возврат ПолучитьСтруктуруОтвета(0);
	
КонецФункции

// Получить внеплановый дайджест
//
// Параметры:
//  ПараметрыЗапроса	 - Соответствие - Параметры запроса
// 
// Возвращаемое значение:
//  Структура - Структура ответа
//
Функция ПолучитьВнеплановыйДайджест(Знач ПараметрыЗапроса) Экспорт
	
	Если НЕ ИнтеграцияДополнительныхПодсистем.ПодсистемаСуществует("ОбновлениеИнформационнойБазы") Тогда 
		Возврат ПолучитьСтруктуруОтвета(20,, "Данный метод недоступен, требуется подсистема ""ОбновлениеИнформационнойБазы""");
	КонецЕсли;
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "ПолучитьВнеплановыйДайджест");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Данные = Справочники.ОписанияИзмененийСистемы.ПолучитьТекстВнеплановогоДайджеста(Результат.Параметры.Системы);
	ДанныеЗадач = Новый Массив;
	
	Если Данные.Описание <> "" Тогда
		Данные.Описание = Справочники.ОписанияИзмененийСистемы.СоздатьHTMLДайджеста(Данные.Описание);
		
		Для Каждого Строка Из Данные.МассивЗадач Цикл
			Структура = Новый Структура;
			Структура.Вставить("Задача", XMLСтрока(Строка.Задача));
			Структура.Вставить("ДатаДобавления", Строка.ДатаДобавления);
			
			ДанныеЗадач.Добавить(Структура);
		КонецЦикла;
	КонецЕсли;
	
	Данные.Вставить("МассивЗадач", ДанныеЗадач);
	
	Возврат ПолучитьСтруктуруОтвета(0, Данные);
	
КонецФункции

#КонецОбласти

#Область Канбан

Функция ДобавитьКарточкуКанбана(Знач Запрос) Экспорт
	
	ЭтоСлужебныйПользователь = ЭтоСлужебныйПользователь();
	
	Результат = ПолучитьПараметры(Запрос.ПараметрыЗапроса, "Канбан", ЭтоСлужебныйПользователь);
	
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
		
	РезультатТело = ПолучитьПараметрыТелаЗапроса(Запрос, "КанбанДобавитьКарточку", ЭтоСлужебныйПользователь);
	
	Если РезультатТело.Параметры = Неопределено Тогда
		Возврат РезультатТело.СтруктураОтвета;
	КонецЕсли;
	
	Параметры = РезультатТело.Параметры;
	
	Если ЭтоСлужебныйПользователь Тогда
		ПараметрыСеанса.ТекущийПользователь = Результат.Параметры.Пользователь;
	КонецЕсли;
	
	КарточкаКанбана = Справочники.КарточкаКанбан.СоздатьЭлемент();
	
	КарточкаКанбана.Наименование = Параметры.Наименование;
	КарточкаКанбана.Описание = Параметры.Описание;
	КарточкаКанбана.СрокРеализации = Параметры.СрокРеализации;
	КарточкаКанбана.Владелец = Результат.Параметры.Филиал;
	
	Попытка
		КарточкаКанбана.Записать();
		Успешно = Истина;
	Исключение
		Успешно = Ложь;
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("API.Создание карточки канбана", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	КонецПопытки;
	
	Если Успешно Тогда
		РегистрыСведений.ОчередьКанбан.Добавить(КарточкаКанбана.Ссылка, 
			Перечисления.ВидыОчереди.Канбан, Параметры.Этап, Результат.Параметры.Филиал);

		СтруктураОтвета = ПолучитьСтруктуруОтвета(0, XMLСтрока(КарточкаКанбана.Ссылка));
	Иначе
		СтруктураОтвета = ПолучитьСтруктуруОтвета(2, , ТекстОшибки);
	КонецЕсли;
	
	Возврат СтруктураОтвета;	
	
КонецФункции

Функция ДобавитьКолонкуКанбана(Знач Запрос) Экспорт
	
	ЭтоСлужебныйПользователь = ЭтоСлужебныйПользователь();
	
	Результат = ПолучитьПараметры(Запрос.ПараметрыЗапроса, "Канбан", ЭтоСлужебныйПользователь);
	
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	РезультатТело = ПолучитьПараметрыТелаЗапроса(Запрос, "КанбанДобавитьКолонку", ЭтоСлужебныйПользователь);
	
	Если РезультатТело.Параметры = Неопределено Тогда
		Возврат РезультатТело.СтруктураОтвета;
	КонецЕсли;
	
	Параметры = РезультатТело.Параметры;
	
	Если ЭтоСлужебныйПользователь Тогда
		ПараметрыСеанса.ТекущийПользователь = Результат.Параметры.Пользователь;
	КонецЕсли;
	
	Колонка = ПолучитьКолонку(Параметры.Наименование, Результат.Параметры.Филиал);
	
	Если НЕ ЗначениеЗаполнено(Колонка.Ссылка) Тогда
		КолонкаКанбана = Справочники.ЭтапыКанбана.СоздатьЭлемент();

		КолонкаКанбана.Наименование = Параметры.Наименование;
		КолонкаКанбана.Владелец = Результат.Параметры.Филиал;
		КолонкаКанбана.ТипКанбана = Перечисления.ТипыКанбана.Кастомный;
		
	ИначеЕсли Колонка.ПометкаУдаления Тогда
		КолонкаКанбана = Колонка.Ссылка.ПолучитьОбъект();
		КолонкаКанбана.ПометкаУдаления = Ложь;
	Иначе
		Возврат ПолучитьСтруктуруОтвета(2, , "Колонка с таким именем уже существует");
	КонецЕсли;
	
	Попытка
		КолонкаКанбана.Записать();
		Успешно = Истина;
	Исключение
		Успешно = Ложь;
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("API.Создание колонки канбана", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	КонецПопытки;
	
	Если Успешно Тогда
		МассивДобавленных = Новый Массив;
		МассивДобавленных.Добавить(КолонкаКанбана.Ссылка);
		
		РегистрыСведений.ПорядокЭтаповКанбана.ДобавитьЭтапы(МассивДобавленных, 
			Перечисления.ТипыКанбана.Кастомный, , Результат.Параметры.Филиал);
		
		СтруктураОтвета = ПолучитьСтруктуруОтвета(0, XMLСтрока(КолонкаКанбана.Ссылка));
	Иначе
		СтруктураОтвета = ПолучитьСтруктуруОтвета(2, , ТекстОшибки);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ДобавитьФильтрКанбана(Знач Запрос) Экспорт
	
	ЭтоСлужебныйПользователь = ЭтоСлужебныйПользователь();
	
	Результат = ПолучитьПараметры(Запрос.ПараметрыЗапроса, "КанбанФильтры", ЭтоСлужебныйПользователь);
	
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	РезультатТело = ПолучитьПараметрыТелаЗапроса(Запрос, "КанбанДобавитьФильтр", ЭтоСлужебныйПользователь);
	
	Если РезультатТело.Параметры = Неопределено Тогда
		Возврат РезультатТело.СтруктураОтвета;
	КонецЕсли;
	
	Параметры = РезультатТело.Параметры;
	
	Если ЭтоСлужебныйПользователь Тогда
		ПараметрыСеанса.ТекущийПользователь = Результат.Параметры.Пользователь;
	КонецЕсли;
	
	ЗначенияОчереди = Новый Структура;
	
	Для Каждого Параметр Из Параметры Цикл
		Если ЗначениеЗаполнено(Параметр.Значение) Тогда
			ЗначенияОчереди.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;		
	КонецЦикла;
	
	КлючОчереди = Справочники.КлючОчереди.НайтиСоздатьКлючОчереди(Результат.Параметры.ВидОчереди, ЗначенияОчереди, Ложь);
		
	Если ЗначениеЗаполнено(КлючОчереди) Тогда
		НаборЗаписей = РегистрыСведений.ИзбранныеФильтрыКанбан.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Результат.Параметры.Пользователь);
		НаборЗаписей.Отбор.Фильтр.Установить(КлючОчереди);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Пользователь = Результат.Параметры.Пользователь;
		НоваяЗапись.Фильтр = КлючОчереди;
		
		НаборЗаписей.Записать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлючОчереди.Ссылка КАК КлючОчереди,
		|	КлючОчереди.Направление КАК Направление,
		|	ЕСТЬNULL(НаправленияРазработки.Наименование, """") КАК НаправлениеПредставление,
		|	КлючОчереди.Система КАК Система,
		|	ЕСТЬNULL(СистемыУчета.Наименование, """") КАК СистемаПредставление,
		|	КлючОчереди.ГруппаЗаказчиков КАК ГруппаЗаказчиков,
		|	ЕСТЬNULL(ГруппыЗаказчиковНаправлений.Наименование, """") КАК ГруппаЗаказчиковПредставление,
		|	КлючОчереди.Продукт КАК Продукт,
		|	ЕСТЬNULL(Продукты.Наименование, """") КАК ПродуктПредставление
		|ИЗ
		|	Справочник.КлючОчереди КАК КлючОчереди
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияРазработки КАК НаправленияРазработки
		|		ПО КлючОчереди.Направление = НаправленияРазработки.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СистемыУчета КАК СистемыУчета
		|		ПО КлючОчереди.Система = СистемыУчета.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыЗаказчиковНаправлений КАК ГруппыЗаказчиковНаправлений
		|		ПО КлючОчереди.ГруппаЗаказчиков = ГруппыЗаказчиковНаправлений.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Продукты КАК Продукты
		|		ПО КлючОчереди.Продукт = Продукты.Ссылка
		|ГДЕ
		|	КлючОчереди.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", КлючОчереди);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Строки = Новый Массив;
		
		Если ЗначениеЗаполнено(Выборка.НаправлениеПредставление) Тогда
			Строки.Добавить(Выборка.НаправлениеПредставление);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.СистемаПредставление) Тогда
			Строки.Добавить(Выборка.СистемаПредставление);
		КонецЕсли;

		Если ЗначениеЗаполнено(Выборка.ГруппаЗаказчиковПредставление) Тогда
			Строки.Добавить(Выборка.ГруппаЗаказчиковПредставление);
		КонецЕсли;

		Если ЗначениеЗаполнено(Выборка.ПродуктПредставление) Тогда
			Строки.Добавить(Выборка.ПродуктПредставление);
		КонецЕсли;	
		
		ИмяКлюча = СтрСоединить(Строки, "; ");
		
		Фильтр = Новый Структура;
		Фильтр.Вставить("key", XMLСтрока(Выборка.КлючОчереди));
		Фильтр.Вставить("key_name", ИмяКлюча);
		Фильтр.Вставить("direction", XMLСтрока(Выборка.Направление));
		Фильтр.Вставить("direction_name", Выборка.НаправлениеПредставление);
		Фильтр.Вставить("system", XMLСтрока(Выборка.Система));
		Фильтр.Вставить("system_name", Выборка.СистемаПредставление);
		Фильтр.Вставить("customer", XMLСтрока(Выборка.ГруппаЗаказчиков));
		Фильтр.Вставить("customer_name", Выборка.ГруппаЗаказчиковПредставление);
		Фильтр.Вставить("product", XMLСтрока(Выборка.Продукт));
		Фильтр.Вставить("product_name", Выборка.ПродуктПредставление);

		СтруктураОтвета = ПолучитьСтруктуруОтвета(0, Фильтр);
	Иначе
		ТекстОшибки = "Не найден ключ с заданными параметрами";
		СтруктураОтвета = ПолучитьСтруктуруОтвета(2, , ТекстОшибки);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ИзменитьКарточкуКанбана(Знач Запрос) Экспорт
	
	ЭтоСлужебныйПользователь = ЭтоСлужебныйПользователь();
	
	Результат = ПолучитьПараметры(Запрос.ПараметрыЗапроса, "Канбан", ЭтоСлужебныйПользователь);
	
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	РезультатТело = ПолучитьПараметрыТелаЗапроса(Запрос, "КанбанИзменитьКарточку", ЭтоСлужебныйПользователь);
	
	Если РезультатТело.Параметры = Неопределено Тогда
		Возврат РезультатТело.СтруктураОтвета;
	КонецЕсли;
	
	Параметры = РезультатТело.Параметры;

	Если ЭтоСлужебныйПользователь Тогда
		ПараметрыСеанса.ТекущийПользователь = Результат.Параметры.Пользователь;
	КонецЕсли;
	
	КарточкаОбъект = Параметры.КарточкаКанбан.ПолучитьОбъект();
	
	Параметры.Удалить("КарточкаКанбан");
	
	ЗаполнитьЗначенияСвойств(КарточкаОбъект, Параметры);
		
	Попытка
		КарточкаОбъект.Записать();
		Успешно = Истина;
	Исключение
		Успешно = Ложь;
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("API.Изменение карточки канбана", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	КонецПопытки;
	
	Если Успешно Тогда		
		СтруктураОтвета = ПолучитьСтруктуруОтвета(0);
	Иначе
		СтруктураОтвета = ПолучитьСтруктуруОтвета(2, , ТекстОшибки);
	КонецЕсли;
	
	Возврат СтруктураОтвета;	
	
КонецФункции

// Изменяет порядок этапов в регистре сведений ПорядокЭтаповКанбана
//
// Параметры:
//  Запрос -  HTTPЗапрос - Запрос, который пришел на http сервис
// 
// Возвращаемое значение:
//  Структура - Структура ответа
//
Функция ИзменитьПорядокЭтапов(Знач Запрос) Экспорт

	Результат = ПолучитьПараметры(Запрос.ПараметрыЗапроса, "Канбан", ЭтоСлужебныйПользователь());
	
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Если Результат.Параметры.Тип = Перечисления.ТипыКанбана.ЗадачаНовый
		ИЛИ Результат.Параметры.Тип = Перечисления.ТипыКанбана.Кастомный
		ИЛИ Результат.Параметры.Тип = Перечисления.ТипыКанбана.ВнутреннееЗаданиеНовый Тогда
		
		РезультатТело = ПолучитьПараметрыТелаЗапроса(Запрос, "КанбанИзменитьПорядокЭтапов");
		
		Если РезультатТело.Параметры = Неопределено Тогда
			Возврат РезультатТело.СтруктураОтвета;
		КонецЕсли;
		
		СтруктураОтвета = ИзменитьПорядокЭтаповКанбана(Результат.Параметры, РезультатТело.Параметры);
		
	Иначе
		СтруктураОтвета = API.ПолучитьСтруктуруОтвета(23);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Изменяет порядок задач для канбана в регистре сведений ОчередьКанбан
//
// Параметры:
//  Запрос -  HTTPЗапрос - Запрос, который пришел на http сервис
// 
// Возвращаемое значение:
//  Структура - Структура ответа
//
Функция ИзменитьПорядокЗадач(Знач Запрос) Экспорт
	
	Результат = ПолучитьПараметры(Запрос.ПараметрыЗапроса, "Канбан", ЭтоСлужебныйПользователь());
	ЭтоПулЗаявок = Ложь;
	
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Если Результат.Параметры.Тип = Перечисления.ТипыКанбана.ЗадачаНовый Тогда
		РезультатТело = ПолучитьПараметрыТелаЗапроса(Запрос, "КанбанИзменитьПорядокЗадач");
		
	ИначеЕсли Результат.Параметры.Тип = Перечисления.ТипыКанбана.Кастомный Тогда
		РезультатТело = ПолучитьПараметрыТелаЗапроса(Запрос, "КанбанИзменитьПорядокКарточек");

	ИначеЕсли Результат.Параметры.Тип = Перечисления.ТипыКанбана.ВнутреннееЗаданиеНовый Тогда
		РезультатТело = ПолучитьПараметрыТелаЗапроса(Запрос, "КанбанИзменитьПорядокВЗ");

	ИначеЕсли Результат.Параметры.Тип = Перечисления.ТипыКанбана.ПулЗаявокНовый Тогда
		РезультатТело = ПолучитьПараметрыТелаЗапроса(Запрос, "КанбанИзменитьПорядокЗаявокВОчереди");
		ЭтоПулЗаявок = Истина;
	Иначе
		Возврат API.ПолучитьСтруктуруОтвета(23);
	КонецЕсли;
	
	Если РезультатТело.Параметры = Неопределено Тогда
		Возврат РезультатТело.СтруктураОтвета;
	КонецЕсли;
	
	Если ЭтоПулЗаявок Тогда
		СтруктураОтвета = ИзменитьПорядокЗаявокВОчереди(Результат.Параметры, РезультатТело.Параметры);
	Иначе
		СтруктураОтвета = ИзменитьПорядокОбъектовКанбана(Результат.Параметры, РезультатТело.Параметры);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПереместитьКарточкуКанбан(Знач Запрос) Экспорт
	
	ЭтоСлужебныйПользователь = ЭтоСлужебныйПользователь();

	Результат = ПолучитьПараметры(Запрос.ПараметрыЗапроса, "Канбан", ЭтоСлужебныйПользователь);
	
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
		
	Если ЭтоСлужебныйПользователь Тогда
		ПараметрыСеанса.ТекущийПользователь = Результат.Параметры.Пользователь;
		ПараметрыСеанса.Филиал = Результат.Параметры.Пользователь.Филиал;
	КонецЕсли;
	
	Если Результат.Параметры.Тип = Перечисления.ТипыКанбана.ЗадачаНовый Тогда
		РезультатТело = ПолучитьПараметрыТелаЗапроса(Запрос, "ИзменитьСтатусЗадачиКанбан", ЭтоСлужебныйПользователь);
		ИзменитьСтатус = Истина;
		
	ИначеЕсли Результат.Параметры.Тип = Перечисления.ТипыКанбана.ВнутреннееЗаданиеНовый Тогда
		РезультатТело = ПолучитьПараметрыТелаЗапроса(Запрос, "ИзменитьСтатусВнутреннегоЗаданияКанбан", ЭтоСлужебныйПользователь);
		ИзменитьСтатус = Истина;
		
	ИначеЕсли Результат.Параметры.Тип = Перечисления.ТипыКанбана.Кастомный Тогда
		РезультатТело = ПолучитьПараметрыТелаЗапроса(Запрос, "КанбанИзменитьПорядокКарточек");
		ИзменитьСтатус = Ложь;		
	Иначе
		Возврат API.ПолучитьСтруктуруОтвета(23);
	КонецЕсли;
		
	Если РезультатТело.Параметры = Неопределено Тогда
		Возврат РезультатТело.СтруктураОтвета;
	КонецЕсли;	
	
	Если ИзменитьСтатус Тогда
		СтруктураОтвета = ИзменитьСтатусОбъектаКанбан(РезультатТело.Параметры);
	Иначе
		СтруктураОтвета = ПерместитьКарточкуВДругойЭтап(Результат.Параметры, РезультатТело.Параметры);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПолучитьДанныеДоски(Знач ПараметрыЗапроса) Экспорт
	
	СтруктураОтвета = Неопределено;
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "Канбан", ЭтоСлужебныйПользователь());
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Если Результат.Параметры.Тип = Перечисления.ТипыКанбана.ПулЗаявокНовый Тогда
		Если НЕ ЗначениеЗаполнено(Результат.Параметры.ВидОчереди) Тогда
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(20, , "Для данного типа обязательно заполнение Вида очереди");
			
		ИначеЕсли (Результат.Параметры.ВидОчереди = Перечисления.ВидыОчереди.НаправлениеСистема 
			ИЛИ Результат.Параметры.ВидОчереди = Перечисления.ВидыОчереди.НаправлениеСистемаГруппаЗаказчиков) 
			И (НЕ ЗначениеЗаполнено(Результат.Параметры.Направление) ИЛИ НЕ ЗначениеЗаполнено(Результат.Параметры.Система)) Тогда
			
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(20, , "Заполнены не все необходимые параметры");
			
		ИначеЕсли Результат.Параметры.ВидОчереди = Перечисления.ВидыОчереди.Продукт
			И НЕ ЗначениеЗаполнено(Результат.Параметры.Продукт) Тогда
			
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(20, , "Заполнены не все необходимые параметры");
			
		ИначеЕсли Результат.Параметры.ВидОчереди = Перечисления.ВидыОчереди.ПродуктСистема
			И (НЕ ЗначениеЗаполнено(Результат.Параметры.Продукт) ИЛИ НЕ ЗначениеЗаполнено(Результат.Параметры.Система))Тогда
			
			СтруктураОтвета = API.ПолучитьСтруктуруОтвета(20, , "Заполнены не все необходимые параметры");
		КонецЕсли;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Результат.Параметры.Филиал) Тогда
		СтруктураОтвета = API.ПолучитьСтруктуруОтвета(20, , "Для данного типа обязательно заполнение филиала");	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураОтвета) Тогда
		Данные = СформироватьДанныеДоски(Результат.Параметры);
		СтруктураОтвета = API.ПолучитьСтруктуруОтвета(0, Данные);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПолучитьДанныеКарточки(Знач ПараметрыЗапроса) Экспорт
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "КарточкаКанбан", ЭтоСлужебныйПользователь());
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Ссылка = Результат.Параметры.КарточкаКанбан;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КарточкаКанбан.Ссылка КАК Ссылка,
	|	КарточкаКанбан.Наименование КАК Наименование,
	|	КарточкаКанбан.Описание КАК Описание,
	|	ПРЕДСТАВЛЕНИЕ(КарточкаКанбан.Автор) КАК Автор,
	|	КарточкаКанбан.ДатаСоздания КАК ДатаСоздания,
	|	КарточкаКанбан.СрокРеализации КАК СрокРеализации
	|ИЗ
	|	Справочник.КарточкаКанбан КАК КарточкаКанбан
	|ГДЕ
	|	КарточкаКанбан.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
		
	Данные = Новый Структура;
	Данные.Вставить("id", XMLСтрока(Ссылка));
	Данные.Вставить("name", Выборка.Наименование);
	Данные.Вставить("description", Выборка.Описание);
	Данные.Вставить("author", Выборка.Автор);
	Данные.Вставить("create_date", ЗаписатьДатуJSON(Выборка.ДатаСоздания, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.ЛокальнаяДата));
	Данные.Вставить("dateEnd", ЗаписатьДатуJSON(Выборка.СрокРеализации, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.ЛокальнаяДата));
		
	Возврат API.ПолучитьСтруктуруОтвета(0, Данные);
	
КонецФункции

Функция ПолучитьКолонкиДоски(Знач ПараметрыЗапроса) Экспорт
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "Канбан", ЭтоСлужебныйПользователь());
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Пользователь = Результат.Параметры.Пользователь;
	Данные = СформироватьКолонкиДоски(Пользователь, Результат.Параметры);
	
	Возврат API.ПолучитьСтруктуруОтвета(0, Данные);
	
КонецФункции

Функция ПолучитьНовогоИсполнителя(Знач ПараметрыЗапроса) Экспорт
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "КанбанПолучитьНовогоИсполнителя");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Параметры = Результат.Параметры;
	
	Филиал = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ссылка, "Филиал");
	ДопРеквизиты = РаботаСПроцессамиВызовСервера.ЗаполнитьДополнительныеСвойства(Параметры.Ссылка, Филиал);
	
	НовыйИсполнитель = РаботаСПроцессамиВызовСервера.ПолучитьНовогоИсполнителяЗадачи(Параметры.Ссылка, Параметры.Статус, ДопРеквизиты);
	ДанныеИсполнителя = Новый Структура("ФИО, id", "", "");
	
	Если ЗначениеЗаполнено(НовыйИсполнитель) Тогда
		ДанныеИсполнителя.ФИО = Строка(НовыйИсполнитель);
		ДанныеИсполнителя.id = XMLСтрока(НовыйИсполнитель);
	КонецЕсли;
	
	Возврат API.ПолучитьСтруктуруОтвета(0, ДанныеИсполнителя);
	
КонецФункции

Функция ПолучитьПользователей() Экспорт
	
	Если НЕ ЭтоСлужебныйПользователь() Тогда
		Возврат ПолучитьСтруктуруОтвета(2, , "Метод доступен только служебному пользователю");
	КонецЕсли;
	
	Данные = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.Наименование КАК Наименование
	|ПОМЕСТИТЬ Пользователи
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.Служебный
	|	И НЕ Пользователи.ПометкаУдаления
	|	И НЕ Пользователи.Недействителен
	|	И НЕ Пользователи.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛичныеДелаСрезПоследних.Сотрудник КАК Сотрудник,
	|	ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы) КАК Филиал
	|ПОМЕСТИТЬ ФилиалыПользователей
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(
	|			&ТекущаяДата,
	|			Сотрудник В
	|					(ВЫБРАТЬ
	|						Пользователи.Ссылка
	|					ИЗ
	|						Пользователи КАК Пользователи)
	|				И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаСрезПоследних
	|ГДЕ
	|	(ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы)) <> ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛичныеДелаСрезПоследних.Сотрудник КАК Сотрудник,
	|	ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы) КАК Команда
	|ПОМЕСТИТЬ КомандыПользователей
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(
	|			&ТекущаяДата,
	|			Сотрудник В
	|					(ВЫБРАТЬ
	|						Пользователи.Ссылка
	|					ИЗ
	|						Пользователи КАК Пользователи)
	|				И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВКоманду)) КАК ЛичныеДелаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Филиалы.Наименование КАК Филиал,
	|	ЕСТЬNULL(Команды.Наименование, """") КАК Команда,
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.Наименование КАК ФИО
	|ИЗ
	|	Пользователи КАК Пользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФилиалыПользователей КАК ФилиалыПользователей
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|			ПО ФилиалыПользователей.Филиал = Филиалы.Ссылка
	|		ПО Пользователи.Ссылка = ФилиалыПользователей.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ КомандыПользователей КАК КомандыПользователей
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Команды
	|			ПО КомандыПользователей.Команда = Команды.Ссылка
	|		ПО Пользователи.Ссылка = КомандыПользователей.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Филиалы.Наименование,
	|	Команды.Наименование,
	|	ФИО
	|ИТОГИ ПО
	|	Филиал,
	|	Команда";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	ВыборкаФилиалов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаФилиалов.Следующий() Цикл
		ДанныеФилиала = Новый Структура("Филиал", ВыборкаФилиалов.Филиал);
		Команды = Новый Массив;
		Сотрудники = Новый Массив;
		
		ВыборкаКоманд = ВыборкаФилиалов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаКоманд.Следующий() Цикл
			Выборка = ВыборкаКоманд.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ДанныеСотрудника = Новый Структура("ФИО, id", Выборка.ФИО, XMLСтрока(Выборка.Пользователь));
				Сотрудники.Добавить(ДанныеСотрудника);
			КонецЦикла;
			
			Если ВыборкаКоманд.Количество() > 1 Тогда
				Если ЗначениеЗаполнено(ВыборкаКоманд.Команда) Тогда
					Команда = ВыборкаКоманд.Команда;
				Иначе
					Команда = "Без команды";
				КонецЕсли;
				
				ДанныеКоманды = Новый Структура("Команда, Сотрудники", Команда, Сотрудники);
				Команды.Добавить(ДанныеКоманды);
				
				Сотрудники = Новый Массив;
			КонецЕсли;
		КонецЦикла;
		
		Если Команды.Количество() = 0 Тогда
			ДанныеФилиала.Вставить("Сотрудники", Сотрудники);
		Иначе
			ДанныеФилиала.Вставить("Команды", Команды);
		КонецЕсли;
		
		Данные.Добавить(ДанныеФилиала);
	КонецЦикла;
	
	Возврат API.ПолучитьСтруктуруОтвета(0, Данные);
	
КонецФункции

Функция ПолучитьСписокФильтров(Знач ПараметрыЗапроса) Экспорт
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "КанбанФильтры", ЭтоСлужебныйПользователь());
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлючОчереди.Ссылка КАК КлючОчереди,
	|	КлючОчереди.Наименование КАК КлючПредставление,
	|	КлючОчереди.Направление КАК Направление,
	|	ЕСТЬNULL(НаправленияРазработки.Наименование, """") КАК НаправлениеПредставление,
	|	КлючОчереди.Система КАК Система,
	|	ЕСТЬNULL(СистемыУчета.Наименование, """") КАК СистемаПредставление,
	|	КлючОчереди.ГруппаЗаказчиков КАК ГруппаЗаказчиков,
	|	ЕСТЬNULL(ГруппыЗаказчиковНаправлений.Наименование, """") КАК ГруппаЗаказчиковПредставление,
	|	КлючОчереди.Продукт КАК Продукт,
	|	ЕСТЬNULL(Продукты.Наименование, """") КАК ПродуктПредставление
	|ИЗ
	|	РегистрСведений.ИзбранныеФильтрыКанбан КАК ИзбранныеФильтрыКанбан
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО ИзбранныеФильтрыКанбан.Фильтр = КлючОчереди.Ссылка
	|			И (КлючОчереди.ВидОчереди = &ВидОчереди)
	|			И (ИзбранныеФильтрыКанбан.Пользователь = &Пользователь)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияРазработки КАК НаправленияРазработки
	|		ПО (КлючОчереди.Направление = НаправленияРазработки.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СистемыУчета КАК СистемыУчета
	|		ПО (КлючОчереди.Система = СистемыУчета.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыЗаказчиковНаправлений КАК ГруппыЗаказчиковНаправлений
	|		ПО (КлючОчереди.ГруппаЗаказчиков = ГруппыЗаказчиковНаправлений.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Продукты КАК Продукты
	|		ПО (КлючОчереди.Продукт = Продукты.Ссылка)";
	
	Запрос.УстановитьПараметр("Пользователь", Результат.Параметры.Пользователь);
	Запрос.УстановитьПараметр("ВидОчереди", Результат.Параметры.ВидОчереди);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Данные = Новый Массив;
	
	Пока Выборка.Следующий() Цикл 	
		Строки = Новый Массив;
		
		Если ЗначениеЗаполнено(Выборка.НаправлениеПредставление) Тогда
			Строки.Добавить(Выборка.НаправлениеПредставление);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.СистемаПредставление) Тогда
			Строки.Добавить(Выборка.СистемаПредставление);
		КонецЕсли;

		Если ЗначениеЗаполнено(Выборка.ГруппаЗаказчиковПредставление) Тогда
			Строки.Добавить(Выборка.ГруппаЗаказчиковПредставление);
		КонецЕсли;

		Если ЗначениеЗаполнено(Выборка.ПродуктПредставление) Тогда
			Строки.Добавить(Выборка.ПродуктПредставление);
		КонецЕсли;	
		
		ИмяКлюча = СтрСоединить(Строки, "; ");
		
		Фильтр = Новый Структура;
		Фильтр.Вставить("key", XMLСтрока(Выборка.КлючОчереди));
		Фильтр.Вставить("key_name", ИмяКлюча);
		Фильтр.Вставить("direction", XMLСтрока(Выборка.Направление));
		Фильтр.Вставить("direction_name", Выборка.НаправлениеПредставление);
		Фильтр.Вставить("system", XMLСтрока(Выборка.Система));
		Фильтр.Вставить("system_name", Выборка.СистемаПредставление);
		Фильтр.Вставить("customer", XMLСтрока(Выборка.ГруппаЗаказчиков));
		Фильтр.Вставить("customer_name", Выборка.ГруппаЗаказчиковПредставление);
		Фильтр.Вставить("product", XMLСтрока(Выборка.Продукт));
		Фильтр.Вставить("product_name", Выборка.ПродуктПредставление);
		
		Данные.Добавить(Фильтр);
	КонецЦикла;
	
	Возврат API.ПолучитьСтруктуруОтвета(0, Данные);
	
КонецФункции

Функция УдалитьКарточкуКанбана(Знач Запрос) Экспорт
	
	ЭтоСлужебныйПользователь = ЭтоСлужебныйПользователь();
	
	Результат = ПолучитьПараметры(Запрос.ПараметрыЗапроса, "Канбан", ЭтоСлужебныйПользователь);
	
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	РезультатТело = ПолучитьПараметрыТелаЗапроса(Запрос, "КанбанУдалитьКарточку", ЭтоСлужебныйПользователь);
	
	Если РезультатТело.Параметры = Неопределено Тогда
		Возврат РезультатТело.СтруктураОтвета;
	КонецЕсли;
	
	Параметры = РезультатТело.Параметры;

	Если ЭтоСлужебныйПользователь Тогда
		ПараметрыСеанса.ТекущийПользователь = Результат.Параметры.Пользователь;
	КонецЕсли;
		
	КарточкаКанбана = Параметры.КарточкаКанбан.ПолучитьОбъект();
	КарточкаКанбана.ПометкаУдаления = Истина;
	
	Попытка
		КарточкаКанбана.Записать();
		Успешно = Истина;
	Исключение
		Успешно = Ложь;
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("API.Удаление карточки канбана", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	КонецПопытки;
	
	Если Успешно Тогда		
		СтруктураОтвета = ПолучитьСтруктуруОтвета(0);
	Иначе
		СтруктураОтвета = ПолучитьСтруктуруОтвета(2, , ТекстОшибки);
	КонецЕсли;
	
	Возврат СтруктураОтвета;	
	
КонецФункции

Функция УдалитьКолонкуКанбана(Знач Запрос) Экспорт
	
	Результат = ПолучитьПараметры(Запрос.ПараметрыЗапроса, "Канбан", ЭтоСлужебныйПользователь());
	
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	РезультатТело = ПолучитьПараметрыТелаЗапроса(Запрос, "КанбанУдалитьКолонку", ЭтоСлужебныйПользователь());
	
	Если РезультатТело.Параметры = Неопределено Тогда
		Возврат РезультатТело.СтруктураОтвета;
	КонецЕсли;
	
	ЭтапСсылка = РезультатТело.Параметры.Этап;
		
	КолонкаКанбана = ЭтапСсылка.ПолучитьОбъект();
	КолонкаКанбана.ПометкаУдаления = Истина;
	
	Попытка
		КолонкаКанбана.Записать();
		Успешно = Истина;
	Исключение
		Успешно = Ложь;
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("API.Удаление колонки канбана", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	КонецПопытки;
	
	Если Успешно Тогда
		Справочники.КарточкаКанбан.УдалитьПодчиненныеКарточкиКолонки(ЭтапСсылка);
		
		Удаленные = Новый Массив;
		Удаленные.Добавить(ЭтапСсылка);
		
		РегистрыСведений.ПорядокЭтаповКанбана.УдалитьЭтапы(Удаленные,
			Перечисления.ТипыКанбана.Кастомный, , Результат.Параметры.Филиал);
			
		СтруктураОтвета = ПолучитьСтруктуруОтвета(0);
	Иначе
		СтруктураОтвета = ПолучитьСтруктуруОтвета(2, , ТекстОшибки);
	КонецЕсли;
	
	Возврат СтруктураОтвета;	
	
КонецФункции

Функция УдалитьФильтрКанбана(Знач Запрос) Экспорт
	
	Результат = ПолучитьПараметры(Запрос.ПараметрыЗапроса, "КанбанФильтры", ЭтоСлужебныйПользователь());
	
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	РезультатТело = ПолучитьПараметрыТелаЗапроса(Запрос, "КанбанУдалитьФильтр", ЭтоСлужебныйПользователь());
	
	Если РезультатТело.Параметры = Неопределено Тогда
		Возврат РезультатТело.СтруктураОтвета;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ИзбранныеФильтрыКанбан.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Результат.Параметры.Пользователь);
	НаборЗаписей.Отбор.Фильтр.Установить(РезультатТело.Параметры.КлючОчереди);
			
	Попытка
		НаборЗаписей.Записать();
		Успешно = Истина;
	Исключение
		Успешно = Ложь;
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("API.Удаление фильтра канбана", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	КонецПопытки;
	
	Если Успешно Тогда			
		СтруктураОтвета = ПолучитьСтруктуруОтвета(0);
	Иначе
		СтруктураОтвета = ПолучитьСтруктуруОтвета(2, , ТекстОшибки);
	КонецЕсли;
	
	Возврат СтруктураОтвета;	
	
КонецФункции

#КонецОбласти

#Область Комментарии

// Добавление комментария к задаче
//
// Параметры:
//  Запрос	 - HTTPЗапрос	 - Запрос, который пришел на http сервис
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Структура - Если заполнено - значит ошибка
//
Функция ДобавитьКомментарийСтарый(Знач Запрос) Экспорт
	
	ЭтоСлужебныйПользователь = ЭтоСлужебныйПользователь();
	
	Результат = ПолучитьПараметрыТелаЗапроса(Запрос, "ДобавитьКомментарийСтарый", ЭтоСлужебныйПользователь);
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Задача = Результат.Параметры.Задача;
	Комментарий = Результат.Параметры.Комментарий;
	Пользователь = ?(ЭтоСлужебныйПользователь, Результат.Параметры.Автор, ПараметрыСеанса.ТекущийПользователь);
	
	Идентификатор = Новый УникальныйИдентификатор;

	ТекущаяДата = ТекущаяДатаСеанса();
	
	РезультатОперации = РегистрыСведений.Комментарии.Добавить(Задача, Идентификатор, Пользователь, Комментарий, , , , Комментарий);
	
	Если РезультатОперации.Успешно Тогда
		ЧастиСообщения = Новый Массив;
		
		ШаблоныПисьма = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма();
		
		ТекстСтатуса = СтрШаблон("Статус: <b>%1</b>", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Статус"));
		ШаблонСтатус = СтрЗаменить(ШаблоныПисьма.БлокОсновногоТекста, "<!-- content -->", ТекстСтатуса);
		ШаблонСтатус = СтрЗаменить(ШаблонСтатус, "<!-- font_size -->", "14px");
		
		ЧастиСообщения.Добавить(ШаблонСтатус); 

		ШаблонПисьма = ШаблоныПисьма.БлокОсновногоТекста;
		
		ТекстШаблона = СтрЗаменить(ШаблоныПисьма.ЗаголовокСобытия, "<!-- event_date -->", Формат(ТекущаяДата, ШаблоныПисьма.ФорматДаты));
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- user_name -->", Строка(Пользователь));
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- event -->", "добавил(-а) комментарий:");
		
		ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- content -->", ТекстШаблона);
		ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- font_size -->", "14px");
		
		ЧастиСообщения.Добавить(ШаблонПисьма);
		
		ШаблонПисьма = СтрЗаменить(ШаблоныПисьма.Комментарий, "<!-- content -->", Комментарий);
		
		ЧастиСообщения.Добавить(ШаблонПисьма);
		
		ТекстСообщения = СтрСоединить(ЧастиСообщения, Символы.ПС);
		
		РегистрыСведений.ОчередьСобытийНаОбработку.ОтправитьОповещение(Задача, ТекстСообщения, ТекущаяДата,
			Идентификатор, , Пользователь);
		
		ИнтеграцияДополнительныхПодсистем.ДобавитьЗаданиеОтправитьКомментарийВTrello(Задача, Комментарий);
	КонецЕсли;
	
	Возврат ПолучитьСтруктуруОтвета(0);
	
КонецФункции

// Добавление комментария к задаче
//
// Параметры:
//  Запрос	 - HTTPЗапрос	 - Запрос, который пришел на http сервис
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Структура - Если заполнено - значит ошибка
//
Функция ДобавитьКомментарий(Знач Запрос) Экспорт
	
	ЭтоСлужебныйПользователь = ЭтоСлужебныйПользователь();
	
	Результат = ПолучитьПараметры(Запрос.ПараметрыЗапроса, "Комментарии", ЭтоСлужебныйПользователь);
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	ОбъектСсылка = Результат.Параметры.Ссылка;
	Пользователь = Результат.Параметры.Пользователь;	
		
	// получение параметров тела запроса из form-data
	СтруктураСообщения =  ПрочитатьСообщение(Запрос.Заголовки, Запрос.ПолучитьТелоКакДвоичныеДанные());	
	
	РезультатТело = ПолучитьПараметры(СтруктураСообщения, "ДобавитьКомментарий", ЭтоСлужебныйПользователь);	
	Комментарий = РезультатТело.Параметры.Комментарий;
	ИдентификаторРодителя = СокрЛП(РезультатТело.Параметры.ИдентификаторРодителя);
	Общедоступный = РезультатТело.Параметры.Общедоступный;
	Важный = РезультатТело.Параметры.Важный;
	
	Идентификатор = Новый УникальныйИдентификатор;
	РезультатОбработки = РедакторОписания.ОбработатьОписание(Строка(Идентификатор), Комментарий, "Комментарии");
	
	Успешно = Истина;	
	
	НачатьТранзакцию();
	Попытка
		СохраненныеФайлы = СохранениеФайловКомментария(ОбъектСсылка, Идентификатор, СтруктураСообщения["ФайлыКомментария"]);
		Комментарий = РезультатОбработки.Описание + СохраненныеФайлы.Представление;

		РегистрыСведений.Комментарии.Добавить(ОбъектСсылка, Идентификатор, Пользователь, Комментарий,
			ИдентификаторРодителя, , Общедоступный, Комментарий, Важный);
			
		ЗафиксироватьТранзакцию();
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Успешно = Ложь;
		
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		// Если все пойдет не по плану запись в ЖР не помешает.
		ЗаписьЖурналаРегистрации("Комментарии.Добавление", УровеньЖурналаРегистрации.Ошибка, , ОбъектСсылка, 
			"Ошибка добавления комментария по причине: " + ТекстОшибки);
	КонецПопытки;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Если Успешно Тогда
		ДанныеКомментария = Новый Структура;
		ДанныеКомментария.Вставить("id", Строка(Идентификатор));
		ДанныеКомментария.Вставить("files", СохраненныеФайлы.Данные);
	
		ТекстСообщения = ПолучитьТекстСообщения(ОбъектСсылка, Пользователь, Комментарий);
		РегистрыСведений.ОчередьСобытийНаОбработку.ОтправитьОповещение(ОбъектСсылка, ТекстСообщения, ТекущаяДатаСеанса(),
			Идентификатор, РезультатТело.Параметры.Общедоступный, Пользователь);	

		ИнтеграцияДополнительныхПодсистем.ДобавитьЗаданиеОтправитьКомментарийВTrello(ОбъектСсылка, Комментарий);

		СтруктураОтвета = ПолучитьСтруктуруОтвета(0, ДанныеКомментария);
	Иначе
		СтруктураОтвета = ПолучитьСтруктуруОтвета(2, , ТекстОшибки);
	КонецЕсли;
	
	Возврат СтруктураОтвета;	
	
КонецФункции

// Изменение комментария по идентификатору
//
// Параметры:
//  Запрос	 - HTTPЗапрос	 - Запрос, который пришел на http сервис
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Структура - Если заполнено - значит ошибка
//
Функция ИзменитьКомментарий(Знач Запрос) Экспорт
	
	ЭтоСлужебныйПользователь = ЭтоСлужебныйПользователь();
	
	Результат = ПолучитьПараметры(Запрос.ПараметрыЗапроса, "Комментарии", ЭтоСлужебныйПользователь);
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	ОбъектСсылка = Результат.Параметры.Ссылка;
	Пользователь = Результат.Параметры.Пользователь;	
		
	// получение параметров тела запроса из form-data
	СтруктураСообщения =  ПрочитатьСообщение(Запрос.Заголовки, Запрос.ПолучитьТелоКакДвоичныеДанные());	
	
	РезультатТело = ПолучитьПараметры(СтруктураСообщения, "ИзменитьКомментарий", ЭтоСлужебныйПользователь);	
	Комментарий = РезультатТело.Параметры.Комментарий;
	Идентификатор = Новый УникальныйИдентификатор(СокрЛП(РезультатТело.Параметры.Идентификатор));
	
	РезультатОбработки = РедакторОписания.ОбработатьОписание(Строка(Идентификатор), Комментарий, "Комментарии");
	
	Успешно = Истина;
	ОставшиесяСсылки = "";
	ПрикрепленныеФайлы = Новый Массив;
	
	
	НачатьТранзакцию();
	Попытка		
		// Изменение состава уже прикрепленных файлов
		РезультатИзменения = ИзменитьФайлыКомментария(Строка(Идентификатор), РезультатТело.Параметры.ПрикрепленныеФайлы);
		ОставшиесяСсылки = РезультатИзменения.Представление;
			
		Для Каждого ФайлДанные Из РезультатИзменения.Данные Цикл		
			ПрикрепленныеФайлы.Добавить(ФайлДанные);
		КонецЦикла;
		
		// добавление новых файлов
		СохраненныеФайлы = СохранениеФайловКомментария(ОбъектСсылка, Идентификатор, СтруктураСообщения["ФайлыКомментария"]);		
		Для Каждого ФайлДанные Из СохраненныеФайлы.Данные Цикл		
			ПрикрепленныеФайлы.Добавить(ФайлДанные);
		КонецЦикла;
			
		Комментарий = РезультатОбработки.Описание + ОставшиесяСсылки + СохраненныеФайлы.Представление;

		РезультатЗаписи = РегистрыСведений.Комментарии.Изменить(ОбъектСсылка, Идентификатор, 
			Комментарий, РезультатТело.Параметры.Общедоступный, Комментарий);
						
		// Постановка в очередь события на удаление оповещения о комментарии
		РегистрыСведений.ОчередьСобытийНаОбработку.УдалитьОповещение(ОбъектСсылка, Идентификатор);
			
		ЗафиксироватьТранзакцию();
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Успешно = Ложь;
		
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		// Если все пойдет не по плану запись в ЖР не помешает.
		ЗаписьЖурналаРегистрации("Комментарии.Добавление", УровеньЖурналаРегистрации.Ошибка, , ОбъектСсылка, 
			"Ошибка добавления комментария по причине: " + ТекстОшибки);
	КонецПопытки;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Если Успешно Тогда
		ДанныеКомментария = Новый Структура;
		ДанныеКомментария.Вставить("id", Строка(Идентификатор));
		ДанныеКомментария.Вставить("files", ПрикрепленныеФайлы);
		
		ТекстСообщения = ПолучитьТекстСообщения(ОбъектСсылка, Пользователь, Комментарий, Истина);	
		РегистрыСведений.ОчередьСобытийНаОбработку.ОтправитьОповещение(ОбъектСсылка, ТекстСообщения, РезультатЗаписи.ДатаСозданияКомментария,
			Идентификатор, РезультатТело.Параметры.Общедоступный, Пользователь);
		
		ИнтеграцияДополнительныхПодсистем.ДобавитьЗаданиеОтправитьКомментарийВTrello(ОбъектСсылка, Комментарий);

		СтруктураОтвета = ПолучитьСтруктуруОтвета(0, ДанныеКомментария);
	Иначе
		СтруктураОтвета = ПолучитьСтруктуруОтвета(2, , ТекстОшибки);
	КонецЕсли;
	
	Возврат СтруктураОтвета;	
	
КонецФункции

// Отмечает все комментарии объекта или просмотренными
//
// Параметры:
//  Запрос	 - HTTPЗапрос	 - Запрос, который пришел на http сервис
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Структура - Если заполнено - значит ошибка
//
Функция ОтметитьПросмотренными(Знач Запрос) Экспорт

	Результат = ПолучитьПараметры(Запрос.ПараметрыЗапроса, "Комментарии", ЭтоСлужебныйПользователь());
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Параметры = Результат.Параметры;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвязьОбъектов.Заявка КАК Объект
	|ПОМЕСТИТЬ ОбъектыКомментирования
	|ИЗ
	|	РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку КАК СвязьОбъектов
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Источник) = ТИП(Документ.Задача)
	|	И СвязьОбъектов.Объект = &Источник
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СвязьОбъектовСЗаявкамиНаРазработку.Объект
	|ИЗ
	|	РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку КАК СвязьОбъектовСЗаявкамиНаРазработку
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Источник) = ТИП(Документ.Задача)
	|	И СвязьОбъектовСЗаявкамиНаРазработку.Объект = &Источник
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СвязьОбъектовСЗаявкамиНаРазработку.Заявка
	|ИЗ
	|	РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку КАК СвязьОбъектовСЗаявкамиНаРазработку
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Источник) = ТИП(Документ.ЗаявкаНаРазработку)
	|	И СвязьОбъектовСЗаявкамиНаРазработку.Заявка = &Источник
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СвязьОбъектовСЗаявкамиНаРазработку.Объект
	|ИЗ
	|	РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку КАК СвязьОбъектовСЗаявкамиНаРазработку
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Источник) = ТИП(Документ.ЗаявкаНаРазработку)
	|	И СвязьОбъектовСЗаявкамиНаРазработку.Заявка = &Источник
	|	И СвязьОбъектовСЗаявкамиНаРазработку.Объект ССЫЛКА Документ.Задача
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыВерхнегоУровняСтруктурыПодчиненности.ВысшийРодитель
	|ИЗ
	|	РегистрСведений.ОбъектыВерхнегоУровняСтруктурыПодчиненности КАК ОбъектыВерхнегоУровняСтруктурыПодчиненности
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Источник) = ТИП(Справочник.Проекты)
	|	И ОбъектыВерхнегоУровняСтруктурыПодчиненности.ВысшийРодитель = &Источник
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыВерхнегоУровняСтруктурыПодчиненности.Объект
	|ИЗ
	|	РегистрСведений.ОбъектыВерхнегоУровняСтруктурыПодчиненности КАК ОбъектыВерхнегоУровняСтруктурыПодчиненности
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Источник) = ТИП(Справочник.Проекты)
	|	И ОбъектыВерхнегоУровняСтруктурыПодчиненности.ВысшийРодитель = &Источник
	|	И ТИПЗНАЧЕНИЯ(ОбъектыВерхнегоУровняСтруктурыПодчиненности.Объект) <> ТИП(Документ.Задача)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////	
	|ВЫБРАТЬ
	|	Комментарии.Идентификатор КАК Идентификатор,
	|	Комментарии.Общедоступный КАК Общедоступный,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы), ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК Филиал
	|ПОМЕСТИТЬ Комментарии
	|ИЗ
	|	РегистрСведений.Комментарии КАК Комментарии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыКомментирования КАК ОбъектыКомментирования
	|		ПО Комментарии.Объект = ОбъектыКомментирования.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела.СрезПоследних(
	|				&ТекущаяДата,
	|				Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)
	|					И (ВЫРАЗИТЬ(Данные КАК Справочник.Филиалы)) <> ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК ЛичныеДелаСрезПоследних
	|		ПО Комментарии.Пользователь = ЛичныеДелаСрезПоследних.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Комментарии.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ДоступныеКомментарии
	|ИЗ
	|	Комментарии КАК Комментарии
	|ГДЕ
	|	Комментарии.Общедоступный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Комментарии.Идентификатор
	|ИЗ
	|	Комментарии КАК Комментарии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО Комментарии.Филиал = Филиалы.Ссылка
	|ГДЕ
	|	НЕ Комментарии.Общедоступный
	|	И &ПользовательИзITФилиала
	|	И Филиалы.ТипФилиала <> ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.НеIT)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Комментарии.Идентификатор
	|ИЗ
	|	Комментарии КАК Комментарии
	|ГДЕ
	|	НЕ Комментарии.Общедоступный
	|	И НЕ &ПользовательИзITФилиала
	|	И Комментарии.Филиал = &ФилиалПользователя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НепросмотренныеКомментарии.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.Комментарии КАК Комментарии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДоступныеКомментарии КАК ДоступныеКомментарии
	|		ПО Комментарии.Идентификатор = ДоступныеКомментарии.Идентификатор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НепросмотренныеКомментарии КАК НепросмотренныеКомментарии
	|		ПО Комментарии.Идентификатор = НепросмотренныеКомментарии.Идентификатор
	|			И (НепросмотренныеКомментарии.Пользователь = &Пользователь)";
	
	ФилиалПользователя = Параметры.Пользователь.Филиал;
	ТекущийПользователь = Параметры.Пользователь;
	
	Если ЗначениеЗаполнено(ФилиалПользователя) Тогда
		ТипФилиала = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФилиалПользователя, "ТипФилиала");
		ПользовательИзITФилиала = (ТипФилиала <> Перечисления.ТипыФилиалов.НеIT);
	Иначе
		ПользовательИзITФилиала = Ложь;
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ФилиалПользователя", ФилиалПользователя);
	Запрос.УстановитьПараметр("ПользовательИзITФилиала", ПользовательИзITФилиала);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		МассивКомментариев = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Идентификатор");
		РегистрыСведений.НепросмотренныеКомментарии.УдалитьПросмотренные(МассивКомментариев);
	КонецЕсли;
	
	Возврат ПолучитьСтруктуруОтвета(0);
	
КонецФункции

// Получить подчиненные комментарии в ветке
//
// Параметры:
//  ПараметрыЗапроса	 - Соответствие - Параметры запроса
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Структура - Если заполнено - значит ошибка
//
Функция ПолучитьКомментарииВетки(Знач ПараметрыЗапроса) Экспорт
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "ПолучитьКомментарииВетки");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
		
	КомментарииВетки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	Комментарии.Объект КАК Объект
	|ПОМЕСТИТЬ ОбъектКомментирования
	|ИЗ
	|	РегистрСведений.Комментарии КАК Комментарии
	|ГДЕ
	|	Комментарии.Идентификатор = &Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументЗадача.Ссылка КАК Объект,
	|	""Задача "" + ДокументЗадача.Номер КАК Номер
	|ПОМЕСТИТЬ НомераОбъектов
	|ИЗ
	|	Документ.Задача КАК ДокументЗадача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектКомментирования КАК ОбъектКомментирования
	|		ПО ДокументЗадача.Ссылка = ОбъектКомментирования.Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументЗаявкаНаРазработку.Ссылка,
	|	""Заявка на разработку "" + ДокументЗаявкаНаРазработку.Номер
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ДокументЗаявкаНаРазработку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектКомментирования КАК ОбъектКомментирования
	|		ПО ДокументЗаявкаНаРазработку.Ссылка = ОбъектКомментирования.Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументВнутреннееЗадание.Ссылка,
	|	""Внутреннее задание "" + ДокументВнутреннееЗадание.Номер
	|ИЗ
	|	Документ.ВнутреннееЗадание КАК ДокументВнутреннееЗадание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектКомментирования КАК ОбъектКомментирования
	|		ПО ДокументВнутреннееЗадание.Ссылка = ОбъектКомментирования.Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СправочникПроекты.Ссылка,
	|	""Проект "" + СправочникПроекты.Код
	|ИЗ
	|	Справочник.Проекты КАК СправочникПроекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектКомментирования КАК ОбъектКомментирования
	|		ПО СправочникПроекты.Ссылка = ОбъектКомментирования.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Комментарии.Идентификатор КАК Идентификатор,
	|	НомераОбъектов.Номер КАК НомерОбъекта,
	|	Комментарии.Общедоступный КАК Общедоступный,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы), ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК Филиал
	|ПОМЕСТИТЬ Комментарии
	|ИЗ
	|	РегистрСведений.Комментарии КАК Комментарии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НомераОбъектов КАК НомераОбъектов
	|		ПО Комментарии.Объект = НомераОбъектов.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела.СрезПоследних(
	|				&ТекущаяДата,
	|				Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)
	|					И (ВЫРАЗИТЬ(Данные КАК Справочник.Филиалы)) <> ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК ЛичныеДелаСрезПоследних
	|		ПО Комментарии.Пользователь = ЛичныеДелаСрезПоследних.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Комментарии.Идентификатор КАК Идентификатор,
	|	Комментарии.НомерОбъекта КАК НомерОбъекта
	|ПОМЕСТИТЬ ДоступныеКомментарии
	|ИЗ
	|	Комментарии КАК Комментарии
	|ГДЕ
	|	Комментарии.Общедоступный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Комментарии.Идентификатор,
	|	Комментарии.НомерОбъекта
	|ИЗ
	|	Комментарии КАК Комментарии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО Комментарии.Филиал = Филиалы.Ссылка
	|ГДЕ
	|	НЕ Комментарии.Общедоступный
	|	И &ПользовательИзITФилиала
	|	И Филиалы.ТипФилиала <> ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.НеIT)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Комментарии.Идентификатор,
	|	Комментарии.НомерОбъекта
	|ИЗ
	|	Комментарии КАК Комментарии
	|ГДЕ
	|	НЕ Комментарии.Общедоступный
	|	И НЕ &ПользовательИзITФилиала
	|	И Комментарии.Филиал = &ФилиалПользователя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Комментарии.Период КАК ДатаКомментария,
	|	ДОБАВИТЬКДАТЕ(Комментарии.Период, ЧАС, &Смещение) КАК ДатаСеанса,
	|	Комментарии.Идентификатор КАК Идентификатор,
	|	СвязиКомментариев.Родитель КАК Родитель,
	|	ПРЕДСТАВЛЕНИЕ(КомментарийРодитель.Пользователь) КАК КомуОтветили,
	|	КомментарийРодитель.Период КАК ДатаРодителя,
	|	Комментарии.Объект КАК Объект,
	|	ДоступныеКомментарии.НомерОбъекта КАК НомерОбъекта,
	|	ВЫБОР
	|		КОГДА Комментарии.Пользователь = &Пользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоАвторКомментария,
	|	Пользователи.Ссылка КАК Автор,
	|	Пользователи.Наименование КАК АвторФИО,
	|	Пользователи.Служебный КАК СлужебныйАвтор,
	|	ЕСТЬNULL(Файлы.Наименование, НЕОПРЕДЕЛЕНО) КАК Аватар,
	|	ЕСТЬNULL(Файлы.ПолучатьИзMinio, ЛОЖЬ) КАК ПолучатьИзMinio,
	|	ВЫБОР
	|		КОГДА Пользователи.Служебный
	|			ТОГДА Комментарии.ПочтаJira
	|		ИНАЧЕ Пользователи.Почта
	|	КОНЕЦ КАК ПочтаПользователя,
	|	Комментарии.Комментарий КАК Комментарий,
	|	Комментарии.Служебный КАК Служебный,
	|	Комментарии.Важный КАК Важный,
	|	ВЫБОР
	|		КОГДА НепросмотренныеКомментарии.Идентификатор ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Непросмотренный,
	|	Комментарии.ДатаИзменения КАК ДатаИзменения,
	|	Комментарии.Общедоступный КАК Общедоступный
	|ПОМЕСТИТЬ ДанныеКомментариев
	|ИЗ
	|	РегистрСведений.Комментарии КАК Комментарии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДоступныеКомментарии КАК ДоступныеКомментарии
	|		ПО Комментарии.Идентификатор = ДоступныеКомментарии.Идентификатор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКомментариев КАК СвязиКомментариев
	|		ПО Комментарии.Идентификатор = СвязиКомментариев.Подчиненный
	|			И (СвязиКомментариев.ВысшийРодитель = &Идентификатор)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Комментарии КАК КомментарийРодитель
	|		ПО (СвязиКомментариев.Родитель = КомментарийРодитель.Идентификатор)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО Комментарии.Пользователь = Пользователи.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ПО (Пользователи.Ссылка = ПрикрепленныеФайлы.Объект)
	|			И (ПрикрепленныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.ОбрезанныйАватарПользователя))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО (Файлы.Ссылка = ПрикрепленныеФайлы.Файл)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НепросмотренныеКомментарии КАК НепросмотренныеКомментарии
	|		ПО Комментарии.Идентификатор = НепросмотренныеКомментарии.Идентификатор
	|			И (НепросмотренныеКомментарии.Пользователь = &Пользователь)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКомментариев.Идентификатор КАК Родитель,
	|	КОЛИЧЕСТВО(СвязиКомментариев.Подчиненный) КАК Количество
	|ПОМЕСТИТЬ ЕстьПодчиненные
	|ИЗ
	|	ДанныеКомментариев КАК ДанныеКомментариев
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКомментариев КАК СвязиКомментариев
	|		ПО ДанныеКомментариев.Идентификатор = СвязиКомментариев.Родитель
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеКомментариев.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Файлы.Наименование КАК ИмяФайла,
	|	Файлы.Каталог КАК Каталог,
	|	Файлы.ПолучатьИзMinio КАК ПолучатьИзMinio
	|ИЗ
	|	РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектКомментирования КАК ОбъектКомментирования
	|		ПО ПрикрепленныеФайлы.Объект = ОбъектКомментирования.Объект
	|			И (ПрикрепленныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.ИзображениеКомментария))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО ПрикрепленныеФайлы.Файл = Файлы.Ссылка
	|			И (НЕ Файлы.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКомментариев.Идентификатор КАК Идентификатор,
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ПолучатьИзMinio КАК ПолучатьИзMinio,
	|	Файлы.Наименование КАК Наименование,
	|	Файлы.Каталог КАК Каталог,
	|	Файлы.Расширение КАК Расширение
	|ИЗ
	|	ДанныеКомментариев КАК ДанныеКомментариев
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ПО ДанныеКомментариев.Идентификатор = ПрикрепленныеФайлы.Объект
	|			И (ПрикрепленныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.ФайлыКомментария))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО (ПрикрепленныеФайлы.Файл = Файлы.Ссылка)
	|			И (НЕ Файлы.ПометкаУдаления)
	|ИТОГИ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКомментариев.ДатаКомментария КАК ДатаКомментария,
	|	ДанныеКомментариев.ДатаСеанса КАК ДатаСеанса,
	|	ДанныеКомментариев.Идентификатор КАК Идентификатор,
	|	ДанныеКомментариев.Родитель КАК Родитель,
	|	ДанныеКомментариев.КомуОтветили КАК КомуОтветили,
	|	ДанныеКомментариев.ДатаРодителя КАК ДатаРодителя,
	|	ДанныеКомментариев.Объект КАК Объект,
	|	ДанныеКомментариев.НомерОбъекта КАК НомерОбъекта,
	|	ДанныеКомментариев.Автор КАК Автор,
	|	ДанныеКомментариев.АвторФИО КАК АвторФИО,
	|	ДанныеКомментариев.Аватар КАК Аватар,
	|	ДанныеКомментариев.ПолучатьИзMinio КАК ПолучатьИзMinio,
	|	ДанныеКомментариев.ПочтаПользователя КАК ПочтаПользователя,
	|	ВЫБОР
	|		КОГДА ДанныеКомментариев.СлужебныйАвтор
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РазрешенОтвет,
	|	ВЫБОР
	|		КОГДА ДанныеКомментариев.ЭтоАвторКомментария
	|			ТОГДА ВЫБОР
	|					КОГДА РАЗНОСТЬДАТ(ДанныеКомментариев.ДатаКомментария, &ТекущаяДата, МИНУТА) > 30
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РазрешеноУдалениеИзменение,
	|	ДанныеКомментариев.Комментарий КАК Комментарий,
	|	ДанныеКомментариев.Служебный КАК Служебный,
	|	ДанныеКомментариев.Важный КАК Важный,
	|	ДанныеКомментариев.Непросмотренный КАК Непросмотренный,
	|	ДанныеКомментариев.ДатаИзменения КАК ДатаИзменения,
	|	ДанныеКомментариев.Общедоступный КАК Общедоступный,
	|	ЕСТЬNULL(ЕстьПодчиненные.Количество, 0) КАК КоличествоПодчиненных
	|ИЗ
	|	ДанныеКомментариев КАК ДанныеКомментариев
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЕстьПодчиненные КАК ЕстьПодчиненные
	|		ПО ДанныеКомментариев.Идентификатор = ЕстьПодчиненные.Родитель
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеКомментариев.ДатаКомментария";
	#КонецОбласти
	
	ФилиалПользователя = Результат.Параметры.Пользователь.Филиал;
	ТекущийПользователь = Результат.Параметры.Пользователь;
	
	Если ЗначениеЗаполнено(ФилиалПользователя) Тогда
		ТипФилиала = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФилиалПользователя, "ТипФилиала");
		ПользовательИзITФилиала = (ТипФилиала <> Перечисления.ТипыФилиалов.НеIT);
	Иначе
		ПользовательИзITФилиала = Ложь;
	КонецЕсли;
	
	Смещение = ПовторноеИспользованиеВызовСервера.ПолучитьСдвигЧасовогоПояса();

	Запрос.УстановитьПараметр("Идентификатор", Результат.Параметры.ИдентификаторРодителя);
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ФилиалПользователя", ФилиалПользователя);
	Запрос.УстановитьПараметр("ПользовательИзITФилиала", ПользовательИзITФилиала);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Смещение", Смещение);

	Пакеты = Запрос.ВыполнитьПакет();
	
	КоличествоПакетов = Пакеты.ВГраница();
	ИзображенияКомментариев = Пакеты[КоличествоПакетов - 2].Выбрать();
	ПрикрепленныеФайлы = Пакеты[КоличествоПакетов - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	Выборка = Пакеты[КоличествоПакетов].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДанныеКомментария = СформироватьДанныеКомментария(Выборка, ИзображенияКомментариев, ПрикрепленныеФайлы);
		КомментарииВетки.Добавить(ДанныеКомментария);
	КонецЦикла;
		
	Возврат ПолучитьСтруктуруОтвета(0, КомментарииВетки);
	
КонецФункции

// Получить комментарии объекта
//
// Параметры:
//  ПараметрыЗапроса	 - Соответствие - Параметры запроса
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Структура - Если заполнено - значит ошибка
//
Функция ПолучитьКомментарииОбъекта(Знач ПараметрыЗапроса) Экспорт
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "Комментарии");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
		
	КомментарииОбъекта = Новый Массив;	
	
	Запрос = ПолучитьЗапрос(Результат.Параметры);
	Пакеты = Запрос.ВыполнитьПакет();
	
	КоличествоПакетов = Пакеты.ВГраница();
	ИзображенияКомментариев = Пакеты[КоличествоПакетов - 2].Выбрать();
	ПрикрепленныеФайлы = Пакеты[КоличествоПакетов - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Выборка = Пакеты[КоличествоПакетов].Выбрать();
		
	КоличествоНаСтранице = 20; // пока считаем, что count = 20

	Индекс = 0;
	НомерСтраницы = Число(Результат.Параметры.НомерСтраницы);
	НачальныйИндекс = КоличествоНаСтранице * НомерСтраницы;
	КонечныйИндекс = КоличествоНаСтранице * (НомерСтраницы + 1) - 1;
	
	Пока Индекс < НачальныйИндекс Цикл
		Выборка.Следующий();
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Пока Выборка.Следующий() И Индекс <= КонечныйИндекс Цикл
		Индекс = Индекс + 1;
		ДанныеКомментария = СформироватьДанныеКомментария(Выборка, ИзображенияКомментариев, ПрикрепленныеФайлы, Истина);

		КомментарииОбъекта.Добавить(ДанныеКомментария);
	КонецЦикла;
	
	Возврат ПолучитьСтруктуруОтвета(0, КомментарииОбъекта);
	
КонецФункции

Функция ПолучитьКомментарииФильтра(Знач ПараметрыЗапроса) Экспорт
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "ПолучитьКомментарииФильтра");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
		
	КомментарииОбъекта = Новый Массив;
	
	Запрос = ПолучитьЗапрос(Результат.Параметры);
	Пакеты = Запрос.ВыполнитьПакет();
	
	КоличествоПакетов = Пакеты.ВГраница();
	ИзображенияКомментариев = Пакеты[КоличествоПакетов - 2].Выбрать();
	ПрикрепленныеФайлы = Пакеты[КоличествоПакетов - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Выборка = Пакеты[КоличествоПакетов].Выбрать();
			
	Пока Выборка.Следующий() Цикл
		ДанныеКомментария = СформироватьДанныеКомментария(Выборка, ИзображенияКомментариев, ПрикрепленныеФайлы, , Истина);
		КомментарииОбъекта.Добавить(ДанныеКомментария);
	КонецЦикла;

	Возврат ПолучитьСтруктуруОтвета(0, КомментарииОбъекта);
	
КонецФункции

// Получить общее количество комментариев по фильтрам
//
// Параметры:
//  ПараметрыЗапроса	 - Соответствие - Параметры запроса
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Структура - Если заполнено - значит ошибка
//
Функция ПолучитьКоличествоКомментариевПоФильтрам(Знач ПараметрыЗапроса) Экспорт
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "Комментарии", ЭтоСлужебныйПользователь());
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Параметры = Результат.Параметры;
	КоличествоКомментариев = Новый Структура("all, unread, important, system");

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвязьОбъектов.Заявка КАК Объект
	|ПОМЕСТИТЬ ОбъектыКомментирования
	|ИЗ
	|	РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку КАК СвязьОбъектов
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Источник) = ТИП(Документ.Задача)
	|	И СвязьОбъектов.Объект = &Источник
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СвязьОбъектовСЗаявкамиНаРазработку.Объект
	|ИЗ
	|	РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку КАК СвязьОбъектовСЗаявкамиНаРазработку
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Источник) = ТИП(Документ.Задача)
	|	И СвязьОбъектовСЗаявкамиНаРазработку.Объект = &Источник
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СвязьОбъектовСЗаявкамиНаРазработку.Заявка
	|ИЗ
	|	РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку КАК СвязьОбъектовСЗаявкамиНаРазработку
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Источник) = ТИП(Документ.ЗаявкаНаРазработку)
	|	И СвязьОбъектовСЗаявкамиНаРазработку.Заявка = &Источник
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СвязьОбъектовСЗаявкамиНаРазработку.Объект
	|ИЗ
	|	РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку КАК СвязьОбъектовСЗаявкамиНаРазработку
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Источник) = ТИП(Документ.ЗаявкаНаРазработку)
	|	И СвязьОбъектовСЗаявкамиНаРазработку.Заявка = &Источник
	|	И СвязьОбъектовСЗаявкамиНаРазработку.Объект ССЫЛКА Документ.Задача
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыВерхнегоУровняСтруктурыПодчиненности.ВысшийРодитель
	|ИЗ
	|	РегистрСведений.ОбъектыВерхнегоУровняСтруктурыПодчиненности КАК ОбъектыВерхнегоУровняСтруктурыПодчиненности
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Источник) = ТИП(Справочник.Проекты)
	|	И ОбъектыВерхнегоУровняСтруктурыПодчиненности.ВысшийРодитель = &Источник
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыВерхнегоУровняСтруктурыПодчиненности.Объект
	|ИЗ
	|	РегистрСведений.ОбъектыВерхнегоУровняСтруктурыПодчиненности КАК ОбъектыВерхнегоУровняСтруктурыПодчиненности
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Источник) = ТИП(Справочник.Проекты)
	|	И ОбъектыВерхнегоУровняСтруктурыПодчиненности.ВысшийРодитель = &Источник
	|	И ТИПЗНАЧЕНИЯ(ОбъектыВерхнегоУровняСтруктурыПодчиненности.Объект) <> ТИП(Документ.Задача)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////	
	|ВЫБРАТЬ
	|	Комментарии.Идентификатор КАК Идентификатор,
	|	Комментарии.Общедоступный КАК Общедоступный,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы), ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК Филиал
	|ПОМЕСТИТЬ Комментарии
	|ИЗ
	|	РегистрСведений.Комментарии КАК Комментарии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыКомментирования КАК ОбъектыКомментирования
	|		ПО Комментарии.Объект = ОбъектыКомментирования.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела.СрезПоследних(
	|				&ТекущаяДата,
	|				Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)
	|					И (ВЫРАЗИТЬ(Данные КАК Справочник.Филиалы)) <> ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК ЛичныеДелаСрезПоследних
	|		ПО Комментарии.Пользователь = ЛичныеДелаСрезПоследних.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Комментарии.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ДоступныеКомментарии
	|ИЗ
	|	Комментарии КАК Комментарии
	|ГДЕ
	|	Комментарии.Общедоступный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Комментарии.Идентификатор
	|ИЗ
	|	Комментарии КАК Комментарии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО Комментарии.Филиал = Филиалы.Ссылка
	|ГДЕ
	|	НЕ Комментарии.Общедоступный
	|	И &ПользовательИзITФилиала
	|	И Филиалы.ТипФилиала <> ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.НеIT)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Комментарии.Идентификатор
	|ИЗ
	|	Комментарии КАК Комментарии
	|ГДЕ
	|	НЕ Комментарии.Общедоступный
	|	И НЕ &ПользовательИзITФилиала
	|	И Комментарии.Филиал = &ФилиалПользователя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Комментарии.Идентификатор) КАК all,
	|	СУММА(ВЫБОР
	|			КОГДА Комментарии.Служебный
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК system,
	|	СУММА(ВЫБОР
	|			КОГДА Комментарии.Важный
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК important,
	|	СУММА(ВЫБОР
	|			КОГДА НепросмотренныеКомментарии.Идентификатор ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК unread
	|ИЗ
	|	РегистрСведений.Комментарии КАК Комментарии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДоступныеКомментарии КАК ДоступныеКомментарии
	|		ПО Комментарии.Идентификатор = ДоступныеКомментарии.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НепросмотренныеКомментарии КАК НепросмотренныеКомментарии
	|		ПО Комментарии.Идентификатор = НепросмотренныеКомментарии.Идентификатор
	|			И (НепросмотренныеКомментарии.Пользователь = &Пользователь)";
	
	ФилиалПользователя = Параметры.Пользователь.Филиал;
	ТекущийПользователь = Параметры.Пользователь;
	
	Если ЗначениеЗаполнено(ФилиалПользователя) Тогда
		ТипФилиала = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФилиалПользователя, "ТипФилиала");
		ПользовательИзITФилиала = (ТипФилиала <> Перечисления.ТипыФилиалов.НеIT);
	Иначе
		ПользовательИзITФилиала = Ложь;
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ФилиалПользователя", ФилиалПользователя);
	Запрос.УстановитьПараметр("ПользовательИзITФилиала", ПользовательИзITФилиала);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Источник", Параметры.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если Выборка.All > 0 Тогда 
		ЗаполнитьЗначенияСвойств(КоличествоКомментариев, Выборка);
	КонецЕсли;
	
	Возврат ПолучитьСтруктуруОтвета(0, КоличествоКомментариев);
	
КонецФункции

// Ставит или снимает пометку важного или просмотренного
//
// Параметры:
//  Запрос	 - HTTPЗапрос	 - Запрос, который пришел на http сервис
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Структура - Если заполнено - значит ошибка
//
Функция ПометкаКомментария(Знач Запрос) Экспорт
		
	Результат = ПолучитьПараметры(Запрос.ПараметрыЗапроса, "Комментарии", ЭтоСлужебныйПользователь());
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	РезультатТело = ПолучитьПараметрыТелаЗапроса(Запрос, "ПометкаКомментария");
	Если РезультатТело.Параметры = Неопределено Тогда
		Возврат РезультатТело.СтруктураОтвета;
	КонецЕсли;
	
	Если РезультатТело.Параметры.Метка = "important" Тогда
		РегистрыСведений.Комментарии.ИзменитьВажность(Результат.Параметры.Ссылка, РезультатТело.Параметры.Идентификатор);

	ИначеЕсли РезультатТело.Параметры.Метка = "read" Тогда
		НаборЗаписей = РегистрыСведений.НепросмотренныеКомментарии.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Результат.Параметры.Пользователь);
		НаборЗаписей.Отбор.Идентификатор.Установить(РезультатТело.Параметры.Идентификатор);
		
		НаборЗаписей.Записать();
	КонецЕсли;

	Возврат ПолучитьСтруктуруОтвета(0);
	
КонецФункции

// Удаляет комментарий
//
// Параметры:
//  Запрос	 - HTTPЗапрос	 - Запрос, который пришел на http сервис
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Структура - Если заполнено - значит ошибка
//
Функция УдалитьКомментарий(Знач Запрос) Экспорт
	
	ЭтоСлужебныйПользователь = ЭтоСлужебныйПользователь();
	
	Результат = ПолучитьПараметры(Запрос.ПараметрыЗапроса, "Комментарии", ЭтоСлужебныйПользователь);
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;

	РезультатТело = ПолучитьПараметрыТелаЗапроса(Запрос, "УдалитьКомментарий", ЭтоСлужебныйПользователь);
	
	Если РезультатТело.Параметры = Неопределено Тогда
		Возврат РезультатТело.СтруктураОтвета;
	КонецЕсли;	
	
	ОбъектСсылка = Результат.Параметры.Ссылка;
	Пользователь = Результат.Параметры.Пользователь;
	ИдентификаторКомментария = РезультатТело.Параметры.Идентификатор;
	
	РезультатУдаления = РегистрыСведений.Комментарии.Удалить(ОбъектСсылка, ИдентификаторКомментария, Пользователь);
	
	Если РезультатУдаления.Успешно Тогда
		// Получаем ленту и вырезаем из неё тело
		СтруктураОтвета = ПолучитьСтруктуруОтвета(0);
	Иначе
		// может вернуться сообщение, что на комментарий уже ответили, желательно его выводить пользователю
		СтруктураОтвета = ПолучитьСтруктуруОтвета(2, , РезультатУдаления.Сообщение);
	КонецЕсли;
	
	Возврат СтруктураОтвета;	
	
КонецФункции

#КонецОбласти

#Область Метаданные 

// Получает описание метаданных для Monaco
//
// Параметры:
//  ИмяМетаданных	 - Строка	 - Имя метаданных
// 
// Возвращаемое значение:
//  Структура - описание метаданных 
//
Функция ПолучитьМетаданные(ИмяМетаданных) Экспорт
	
	ЧастиЗапроса = СтрРазделить(ИмяМетаданных, ".", Ложь);   
	ИмяГруппы = Нрег(ЧастиЗапроса[0]);
	
	Если ЧастиЗапроса.Количество() = 1 Тогда
		Результат = ПолучитьСписокОбъектовМетаданных(ИмяГруппы);
	ИначеЕсли ЧастиЗапроса.Количество() = 2 Тогда 
		Результат = ПолучитьОписаниеОбъектаМетаданных(ИмяГруппы, ЧастиЗапроса[1]);
	Иначе                                                                         
		Результат = ПолучитьОписаниеОбъектаМетаданных(ИмяГруппы, ЧастиЗапроса[1], ЧастиЗапроса[2]);
	КонецЕсли; 
	
	МетаданныеРезультат = Новый Структура;
	МетаданныеРезультат.Вставить("meta", Результат.ОписаниеМетаданных);
	МетаданныеРезультат.Вставить("path", Результат.ПутьДляОбновленияBSL);
	
	Возврат МетаданныеРезультат;
	
КонецФункции

#КонецОбласти 

#Область Направления

// Возвращает данные юридических лиц направления разработки
//
// Параметры:
//  Идентификатор	 - Строка	 - GUID направления
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Массив - список данных направлений разработки
//
Функция ПолучитьЮридическиеЛицаНаправления(Знач Идентификатор) Экспорт
	
	Результат = ПолучитьСсылкуТипа(Идентификатор, Тип("СправочникСсылка.НаправленияРазработки"), "id");
	Если Результат.Значение = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Данные = Новый Массив;
	
	#Область ТекстЗапроса
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	НаправленияРазработкиЮридическиеЛица.ЮридическоеЛицо КАК Ссылка,
		|	ЮридическиеЛица.Наименование КАК Наименование
		|ИЗ
		|	Справочник.НаправленияРазработки.ЮридическиеЛица КАК НаправленияРазработкиЮридическиеЛица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЮридическиеЛица КАК ЮридическиеЛица
		|		ПО НаправленияРазработкиЮридическиеЛица.ЮридическоеЛицо = ЮридическиеЛица.Ссылка
		|			И (НЕ ЮридическиеЛица.ПометкаУдаления)
		|ГДЕ
		|	НаправленияРазработкиЮридическиеЛица.Ссылка = &Направление";
	#КонецОбласти
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Направление", Результат.Значение);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			GUID = XMLСтрока(Выборка.Ссылка);
			СтруктураЮрЛица = Новый Структура("id, name", GUID, Выборка.Наименование);
			Данные.Добавить(СтруктураЮрЛица);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПолучитьСтруктуруОтвета(0, Данные);
	
КонецФункции

// Возвращает направлений разработки
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Массив - список данных направлений разработки
//
Функция СписокНаправлений() Экспорт
	
	Данные = Новый Массив;
	
	#Область ТекстЗапроса
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	НаправленияРазработки.Ссылка КАК Ссылка,
		|	НаправленияРазработки.Наименование КАК Наименование
		|ИЗ
		|	Справочник.НаправленияРазработки КАК НаправленияРазработки
		|ГДЕ
		|	НЕ НаправленияРазработки.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	#КонецОбласти
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			GUID = XMLСтрока(Выборка.Ссылка);
			СтруктураНаправления = Новый Структура("id, name", GUID, Выборка.Наименование);
			Данные.Добавить(СтруктураНаправления);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПолучитьСтруктуруОтвета(0, Данные);
	
КонецФункции

#КонецОбласти

#Область ОтпискаОтОповещений

// Отписать пользователя от оповещений
//
// Параметры:
//  ПараметрыЗапроса	 - Соответствие - Параметры запроса
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Строка - Шаблон сообщения
//
Функция ОтписатьПользователяОтОповещений(Знач ПараметрыЗапроса) Экспорт
	
	Если ЭтоСлужебныйПользователь() Тогда
		Возврат ПолучитьСтруктуруОтвета(18);
	КонецЕсли;
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "ОтписатьПользователяОтОповещений");
	
	Если Результат.Параметры = Неопределено Тогда
		Ответ = СформироватьОтветОтпискиОтОповещений();
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Задача.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ СсылкаНаОбъект
			|ИЗ
			|	Документ.Задача КАК Задача
			|ГДЕ
			|	Задача.Номер = &Номер
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗаявкаНаРазработку.Ссылка
			|ИЗ
			|	Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
			|ГДЕ
			|	ЗаявкаНаРазработку.Номер = &Номер
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВнутреннееЗадание.Ссылка
			|ИЗ
			|	Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
			|ГДЕ
			|	ВнутреннееЗадание.Номер = &Номер
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Проекты.Ссылка
			|ИЗ
			|	Справочник.Проекты КАК Проекты
			|ГДЕ
			|	Проекты.Код = &Номер
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Участники.Объект КАК Объект,
			|	Участники.Пользователь КАК Пользователь,
			|	Участники.Роль КАК Роль,
			|	Участники.ПолучатьОповещения КАК ПолучатьОповещения
			|ИЗ
			|	РегистрСведений.Участники КАК Участники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СсылкаНаОбъект КАК СсылкаНаОбъект
			|		ПО Участники.Объект = СсылкаНаОбъект.Ссылка
			|ГДЕ
			|	Участники.Пользователь = &Пользователь
			|	И Участники.ПолучатьОповещения = ИСТИНА";
		
		Запрос.УстановитьПараметр("Номер", Результат.Параметры.НомерОбъекта);
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		
		РезультатЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		ПакетЗапросаСОбъектом = РезультатЗапроса[0];
		ПакетЗапросаСУчастником = РезультатЗапроса[1];
		
		Если ПакетЗапросаСОбъектом.Пустой() Тогда
			Ответ = СформироватьОтветОтпискиОтОповещений();
		Иначе
			ВыборкаСОбъектом = ПакетЗапросаСОбъектом.Выгрузить();
			ОбъектСсылка = ВыборкаСОбъектом[0].Ссылка;
			Если ПакетЗапросаСУчастником.Пустой() Тогда
				Ответ = СформироватьОтветОтпискиОтОповещений(ОбъектСсылка);
			Иначе
				ВыборкаСУчастником = ПакетЗапросаСУчастником.Выбрать();
				Пока ВыборкаСУчастником.Следующий() Цикл
					Если ВыборкаСУчастником.Роль = Справочники.РолиУчастников.Наблюдатель Тогда
						РегистрыСведений.Участники.Изменить(ВыборкаСУчастником.Объект, ВыборкаСУчастником.Пользователь,
							ВыборкаСУчастником.Роль, Ложь, Истина, , Истина);
					Иначе
						РегистрыСведений.Участники.Изменить(ВыборкаСУчастником.Объект, ВыборкаСУчастником.Пользователь,
							ВыборкаСУчастником.Роль, Ложь, Ложь);
					КонецЕсли;
					
					Ответ = СформироватьОтветОтпискиОтОповещений(ВыборкаСУчастником.Объект, Истина);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегистрыСведений.ОтслеживаниеИспользованияФункциональности.Добавить("Отписка от оповещения(HTTP)");
	
	Результат = Новый HTTPСервисОтвет(200);
	Результат.Заголовки.Вставить("Content-Type", "text/html");
	Результат.УстановитьТелоИзСтроки(Ответ, КодировкаТекста.UTF8);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Пользователи

// Возвращает данные пользователя по GUID или электронной почте
//
// Параметры:
//  Идентификатор	 - Строка	 - идентификатор пользователя.
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Структура - данные пользователя
//
Функция ПолучитьДанныеПользователя(Знач Идентификатор) Экспорт
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст =
		#Область ТекстЗапроса
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Ссылка,
		|	Пользователи.Наименование КАК Наименование,
		|	Пользователи.Почта КАК Почта,
		|	ЕСТЬNULL(ЛичныеДелаФилиал.Данные, ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК Филиал,
		|	ЕСТЬNULL(ЛичныеДелаКоманда.Данные, ЕСТЬNULL(ЛичныеДелаКастомнаяКоманда.Данные, ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка))) КАК Команда
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела.СрезПоследних(, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение) {(Сотрудник) КАК Пользователь}) КАК ЛичныеДелаФилиал
		|		ПО (ЛичныеДелаФилиал.Сотрудник = Пользователи.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела.СрезПоследних(, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВКоманду) {(Сотрудник) КАК Пользователь}) КАК ЛичныеДелаКоманда
		|		ПО (ЛичныеДелаКоманда.Сотрудник = Пользователи.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела.СрезПоследних(, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВКастомнуюКоманду) {(Сотрудник) КАК Пользователь}) КАК ЛичныеДелаКастомнаяКоманда
		|		ПО (ЛичныеДелаКастомнаяКоманда.Сотрудник = Пользователи.Ссылка)
		|ГДЕ
		|	НЕ Пользователи.ПометкаУдаления
		|{ГДЕ
		|	Пользователи.Ссылка КАК Пользователь,
		|	Пользователи.Почта КАК Почта}
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Данные.Ссылка КАК Ссылка,
		|	Данные.Наименование КАК Наименование,
		|	Данные.Почта КАК Почта,
		|	Данные.Филиал КАК Филиал,
		|	Данные.Команда КАК Команда,
		|	ЕСТЬNULL(Филиалы.Код, """") КАК КодФилиал,
		|	ЕСТЬNULL(Филиалы.Наименование, """") КАК НаименованиеФилиал,
		|	ЕСТЬNULL(ФилиалыКоманда.Код, """") КАК КодКоманда,
		|	ЕСТЬNULL(ФилиалыКоманда.Наименование, """") КАК НаименованиеКоманда
		|ИЗ
		|	Данные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
		|		ПО Данные.Филиал = Филиалы.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК ФилиалыКоманда
		|		ПО Данные.Команда = ФилиалыКоманда.Ссылка";
	#КонецОбласти
	
	Попытка
		Пользователь = XMLЗначение(Тип("СправочникСсылка.Пользователи"), Идентификатор);
		ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ПостроительЗапроса,
			"Пользователь", ВидСравнения.Равно, Пользователь);
	Исключение
		ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ПостроительЗапроса,
			"Почта", ВидСравнения.Равно, Идентификатор);
	КонецПопытки;
	
	ПостроительЗапроса.Выполнить();
	РезультатЗапроса = ПостроительЗапроса.Результат;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		GUID = XMLСтрока(Выборка.Ссылка);
		
		СтруктураПользователя = Новый Структура;
		СтруктураПользователя.Вставить("id", GUID);
		СтруктураПользователя.Вставить("name", Выборка.Наименование);
		СтруктураПользователя.Вставить("mail", Выборка.Почта);
		
		СтруктураФилиала = Новый Структура;
		СтруктураКоманды = Новый Структура;
		
		Если ЗначениеЗаполнено(Выборка.Филиал) Тогда
			СтруктураФилиала.Вставить("id", XMLСтрока(Выборка.Филиал));
			СтруктураФилиала.Вставить("code", Выборка.КодФилиал);
			СтруктураФилиала.Вставить("description", Выборка.НаименованиеФилиал);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Команда) Тогда
			СтруктураКоманды.Вставить("id", XMLСтрока(Выборка.Команда));
			СтруктураКоманды.Вставить("code", Выборка.КодКоманда);
			СтруктураКоманды.Вставить("description", Выборка.НаименованиеКоманда);
		КонецЕсли;
		
		СтруктураПользователя.Вставить("branch", СтруктураФилиала);
		СтруктураПользователя.Вставить("subbranch", СтруктураКоманды);
		
		СтруктураОтвета = ПолучитьСтруктуруОтвета(0, СтруктураПользователя);
	Иначе
		СтруктураОтвета = ПолучитьСтруктуруОтвета(3);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

#КонецОбласти

#Область Продукт

// Возвращает Продукты
//
// Параметры:
//  ПараметрыЗапроса	 - Соответствие - Параметры запроса
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Массив - список данных Продуктов
//
Функция СписокПродуктов(Знач ПараметрыЗапроса) Экспорт
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "СписокПродуктов", ЭтоСлужебныйПользователь());
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Запрос = Новый Запрос;	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Продукты.Ссылка КАК Ссылка,
	|	Продукты.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Продукты КАК Продукты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО (КлючОчереди.Продукт = Продукты.Ссылка)
	|ГДЕ
	|	НЕ Продукты.ПометкаУдаления
	|	И Продукты.ВидОчереди = &ВидОчереди
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("ВидОчереди", Результат.Параметры.ВидОчереди);
		
	Выборка = Запрос.Выполнить().Выбрать();
	СписокПродуктов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		СтруктураПродукта = Новый Структура;
		СтруктураПродукта.Вставить("id", XMLСтрока(Выборка.Ссылка));
		СтруктураПродукта.Вставить("name", Выборка.Наименование);
		
		СписокПродуктов.Добавить(СтруктураПродукта);
	КонецЦикла;

	Возврат ПолучитьСтруктуруОтвета(0, СписокПродуктов);
	
КонецФункции

#КонецОбласти

#Область Публикация

// Обновление даты публикаций задач
//
// Параметры:
//  Запрос			 - HTTPЗапрос	 - Запрос, который пришел на http сервис
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Массив - Список ошибок при обработке
//
Функция ОбновитьДатыПубликацииЗадач(Запрос) Экспорт
	
	ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
	Если ПустаяСтрока(ТелоЗапроса) Тогда
		Возврат ПолучитьСтруктуруОтвета(0);
	КонецЕсли;
	
	Результат = ПолучитьПараметрыТелаЗапроса(Запрос, "ОбновитьДатыПубликацииЗадач");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	ПубликуемыеЗадачи = Результат.Параметры.Задачи;
	НеобработанныеДанные = Новый Массив;
	
	ПараметрыОтбора = Новый Структура("Обработано", Ложь);
	НеобработанныеСтроки = ПубликуемыеЗадачи.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого Строка Из НеобработанныеСтроки Цикл
		ТекстОшибки = СтрШаблон("Не удалось найти задачу по идентификатору %1", Строка.Идентификатор);
		НеобработанныеДанные.Добавить(ТекстОшибки);
	КонецЦикла;
	
	Отправитель = НРег(Результат.Параметры.Отправитель);
	НеобработанныеЗадачи = ИзменитьДатыПубликацииЗадач(ПубликуемыеЗадачи, 
		Результат.Параметры.ДатаПубликации, Отправитель);
	
	Для Каждого ЭлементКоллекции Из НеобработанныеЗадачи Цикл
		НеобработанныеДанные.Добавить(ЭлементКоллекции);
	КонецЦикла;
	
	Если НеобработанныеДанные.Количество() > 0 Тогда
		ТекстОшибки = "Не удалось изменить даты публикации задач.";
		СтруктураОтвета = ПолучитьСтруктуруОтвета(2, НеобработанныеДанные, ТекстОшибки);
	Иначе
		СтруктураОтвета = ПолучитьСтруктуруОтвета(0);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

#КонецОбласти

#Область Системы

// Возвращает систем учета
//
// Параметры:
//  ПараметрыЗапроса	 - Соответствие - Параметры запроса
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Массив - список данных систем учета
//
Функция СписокСистем(Знач ПараметрыЗапроса) Экспорт
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "СписокСистем");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
		
	ПостроительЗапроса = Новый ПостроительЗапроса;	
	ПостроительЗапроса.Текст =
		#Область ТекстЗапроса
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КлючОчереди.Ссылка КАК Ссылка,
		|	КлючОчереди.Система КАК Система,
		|	КлючОчереди.Направление КАК Направление,
		|	КлючОчереди.Продукт КАК Продукт
		|ПОМЕСТИТЬ ОтобранныеКлючи
		|ИЗ
		|	Справочник.КлючОчереди КАК КлючОчереди
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
		|		ПО КлючОчереди.Ссылка = ОчередиЗаявок.КлючОчередиОбъекта
		|			И (КлючОчереди.ВидОчереди = &ВидОчереди)
		|			И (НЕ КлючОчереди.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СистемыУчета КАК СистемыУчета
		|		ПО КлючОчереди.Система = СистемыУчета.Ссылка
		|			И (СистемыУчета.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияРазработки КАК НаправленияРазработки
		|		ПО КлючОчереди.Направление = НаправленияРазработки.Ссылка
		|			И (НаправленияРазработки.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыЗаказчиковНаправлений КАК ГруппыЗаказчиковНаправлений
		|		ПО КлючОчереди.ГруппаЗаказчиков = ГруппыЗаказчиковНаправлений.Ссылка
		|			И (ГруппыЗаказчиковНаправлений.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Продукты КАК Продукты
		|		ПО КлючОчереди.Продукт = Продукты.Ссылка
		|			И (Продукты.ПометкаУдаления)
		|ГДЕ
		|	СистемыУчета.Ссылка ЕСТЬ NULL
		|	И НаправленияРазработки.Ссылка ЕСТЬ NULL
		|	И ГруппыЗаказчиковНаправлений.Ссылка ЕСТЬ NULL
		|	И Продукты.Ссылка ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СистемыУчета.Ссылка КАК Ссылка,
		|	СистемыУчета.Наименование КАК Наименование
		|ИЗ
		|	Справочник.СистемыУчета КАК СистемыУчета
		|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтобранныеКлючи КАК ОтобранныеКлючи
		|		ПО СистемыУчета.Ссылка = ОтобранныеКлючи.Система}
		|{ГДЕ
		|	ОтобранныеКлючи.Направление КАК Направление,
		|	ОтобранныеКлючи.Продукт КАК Продукт}
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	#КонецОбласти
	
	ПостроительЗапроса.Параметры.Вставить("ВидОчереди", Результат.Параметры.ВидОчереди);
	
	Если Результат.Параметры.Направление <> Неопределено Тогда
		ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ПостроительЗапроса,
			"Направление", ВидСравнения.Равно, Результат.Параметры.Направление);
	КонецЕсли;
	
	Если Результат.Параметры.Продукт <> Неопределено Тогда
		ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ПостроительЗапроса,
			"Продукт", ВидСравнения.Равно, Результат.Параметры.Продукт);
	КонецЕсли;
		
	СписокСистем = Новый Массив;
	ПостроительЗапроса.Выполнить();
	РезультатЗапроса = ПостроительЗапроса.Результат;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			GUID = XMLСтрока(Выборка.Ссылка);
			
			СтруктураСистемы = Новый Структура;
			СтруктураСистемы.Вставить("id", GUID);
			СтруктураСистемы.Вставить("name", Выборка.Наименование);
			
			СписокСистем.Добавить(СтруктураСистемы);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПолучитьСтруктуруОтвета(0, СписокСистем);
	
КонецФункции

#КонецОбласти

#Область Спринты

// Добавление задачу в спринт
//
// Параметры:
//	Идентификатор	 - Строка		 - идентификатор спринта.
//  Запрос			 - HTTPЗапрос	 - Запрос, который пришел на http сервис.
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Структура - Если заполнено - значит ошибка
//
Функция ДобавитьЗадачуВСпринт(Знач Идентификатор, Знач Запрос) Экспорт
	
	Если ЭтоСлужебныйПользователь() Тогда
		Возврат ПолучитьСтруктуруОтвета(18);
	КонецЕсли;
	
	РезультатСпринт = НайтиСпринт(Идентификатор);
	Если РезультатСпринт.Значение = Неопределено Тогда
		Возврат РезультатСпринт.СтруктураОтвета;
	КонецЕсли;
	
	Спринт = РезультатСпринт.Значение;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	ДанныеСпринта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Спринт, "ДокументОснование, ДатаОкончания, Филиал");
	Если ТекущаяДатаСеанса > КонецДня(ДанныеСпринта.ДатаОкончания) Тогда
		Возврат ПолучитьСтруктуруОтвета(2, , "Спринт не активен. Добавление невозможно.");
	КонецЕсли;
	
	Результат = ПолучитьПараметрыТелаЗапроса(Запрос, "ДобавитьЗадачуВСпринт");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Список = РегистрыСведений.СоставСпринтов.ПолучитьОбъектыСпринта(Спринт);
	
	Если Список.НайтиПоЗначению(Результат.Параметры.Задача) <> Неопределено Тогда
		Возврат ПолучитьСтруктуруОтвета(2, , "Задача уже в спринте");
	КонецЕсли;
	
	ОцениватьЗадачиВStoryPoint = РегистрыСведений.НастройкиФилиалов.ЗначениеНастройки(ДанныеСпринта.Филиал,
		ПланыВидовХарактеристик.ВидыНастроекФилиалов.ОцениватьЗадачиВStoryPoint);
	
	ПлановыеТрудозатраты = УчетТрудозатрат.ПолучитьПлановыеТрудозатраты(Результат.Параметры.Задача);
	
	// 0 нормальное значение для оценки в Story point. Если у задача плановое время уже есть, то ок.
	Если НЕ ОцениватьЗадачиВStoryPoint И Результат.Параметры.ПлановоеВремя = 0 И ПлановыеТрудозатраты = 0 Тогда
		Возврат ПолучитьСтруктуруОтвета(2, , "Плановое время задачи не заполнено.");
	КонецЕсли;
	
	// Делаю отдельную таблицу, что бы можно было использовать типовые методы занесения трудозатрат
	// это влияет на запись истории изменений
	ТаблицаТрудозатрат = Новый ТаблицаЗначений;
	ТаблицаТрудозатрат.Колонки.Добавить("Объект", Новый ОписаниеТипов("ДокументСсылка.Задача"));
	ТаблицаТрудозатрат.Колонки.Добавить("Трудозатраты", ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(15, 2));
	ТаблицаТрудозатрат.Колонки.Добавить("ТрудозатратыТестирования", ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(15, 2));	
	
	НоваяСтрока = ТаблицаТрудозатрат.Добавить();
	НоваяСтрока.Объект = Результат.Параметры.Задача;
	НоваяСтрока.Трудозатраты = Результат.Параметры.ПлановоеВремя;
	НоваяСтрока.ТрудозатратыТестирования = Результат.Параметры.ПлановоеВремяТестирования;
	
	НачатьТранзакцию();
	Попытка
		Если ОцениватьЗадачиВStoryPoint Тогда
			Для Каждого Строка Из ТаблицаТрудозатрат Цикл
				ЗадачаОбъект = Строка.Объект.ПолучитьОбъект();
				ЗадачаОбъект.ОценкаStoryPoint = Строка.Трудозатраты;
				ЗадачаОбъект.ОбменДанными.Загрузка = Истина;
				ЗадачаОбъект.Записать();
			КонецЦикла;
		Иначе
			УчетТрудозатрат.ЗаписатьНаборПлановыхТрудозатрат(ТаблицаТрудозатрат, Спринт);
		КонецЕсли;
		
		Список.Добавить(Результат.Параметры.Задача);
		
		РегистрыСведений.СоставСпринтов.Добавить(Спринт, Список);
		РегистрыСведений.ИсторияУчастияОбъектовВСпринтах.Добавить(Спринт, Список, ТекущаяДатаСеанса);
		
		Если ЗначениеЗаполнено(ДанныеСпринта.ДокументОснование) Тогда
			РегистрыСведений.ОчередьСобытийНаОбработку.ДобавитьЗаданиеОтправитьИзмененияПоСпринтам(Спринт, ТекущаяДатаСеанса);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Возврат ПолучитьСтруктуруОтвета(2, , ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ПолучитьСтруктуруОтвета(0);
	
КонецФункции

// Возвращает данные спринта по GUID
//
// Параметры:
//  Идентификатор	 - Строка	 - идентификатор спринта.
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Структура - данные пользователя
//
Функция ПолучитьДанныеСпринта(Знач Идентификатор) Экспорт
	
	РезультатСпринт = НайтиСпринт(Идентификатор);
	Если РезультатСпринт.Значение = Неопределено Тогда
		Возврат РезультатСпринт.СтруктураОтвета;
	КонецЕсли;
	
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	
	ТекстЗапроса =
		#Область ТекстЗапроса
		"ВЫБРАТЬ
		|	Спринт.Ссылка КАК Ссылка,
		|	Спринт.Наименование КАК Наименование,
		|	Спринт.ДатаНачала КАК ДатаНачала,
		|	Спринт.ДатаОкончания КАК ДатаОкончания,
		|	ВЫБОР
		|		КОГДА Спринт.ДатаОкончания >= &ТекущаяДата
		|				И Спринт.ДатаНачала <= &ТекущаяДата
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Активный
		|ИЗ
		|	Документ.Спринт КАК Спринт
		|ГДЕ
		|	Спринт.Ссылка = &Ссылка";
	#КонецОбласти
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("Ссылка", РезультатСпринт.Значение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		GUID = XMLСтрока(Выборка.Ссылка);
		
		СтруктураСпринта = Новый Структура;
		СтруктураСпринта.Вставить("id", GUID);
		СтруктураСпринта.Вставить("active", Выборка.Активный);
		СтруктураСпринта.Вставить("name", Выборка.Наименование);
		СтруктураСпринта.Вставить("date_start", Выборка.ДатаНачала);
		СтруктураСпринта.Вставить("date_end", Выборка.ДатаОкончания);
		
		Возврат ПолучитьСтруктуруОтвета(0, СтруктураСпринта);
	Иначе
		Возврат ПолучитьСтруктуруОтвета(2, , "Спринт не найден");
	КонецЕсли;
	
КонецФункции

// Возвращает объекты спринта по GUID
//
// Параметры:
//  Идентификатор	 - Строка	 - идентификатор спринта.
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Массив - Объекты спринта
//
Функция ПолучитьОбъектыСпринта(Знач Идентификатор) Экспорт
	
	РезультатСпринт = НайтиСпринт(Идентификатор);
	Если РезультатСпринт.Значение = Неопределено Тогда
		Возврат РезультатСпринт.СтруктураОтвета;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоставСпринтов.Объект КАК Объект,
	|	ЕСТЬNULL(ПланируемыеТрудозатратыРазработка.Трудозатраты, 0) КАК РазработкаПлан,
	|	ЕСТЬNULL(ПланируемыеТрудозатратыТестирование.Трудозатраты, 0) КАК ТестированиеПлан,
	|	ЕСТЬNULL(ИсторияУчастияОбъектовВСпринтахСрезПервых.Период, Спринты.Дата) КАК ДатаДобавления
	|ИЗ
	|	РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК Спринты
	|		ПО СоставСпринтов.Спринт = Спринты.Ссылка
	|			И (Спринты.Ссылка = &Спринт)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатратыПоСпринтам КАК ПланируемыеТрудозатратыРазработка
	|		ПО СоставСпринтов.Спринт = ПланируемыеТрудозатратыРазработка.Спринт
	|			И СоставСпринтов.Объект = ПланируемыеТрудозатратыРазработка.Объект
	|			И (ПланируемыеТрудозатратыРазработка.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатратыПоСпринтам КАК ПланируемыеТрудозатратыТестирование
	|		ПО СоставСпринтов.Спринт = ПланируемыеТрудозатратыТестирование.Спринт
	|			И СоставСпринтов.Объект = ПланируемыеТрудозатратыТестирование.Объект
	|			И (ПланируемыеТрудозатратыТестирование.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Тестирование))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияУчастияОбъектовВСпринтах.СрезПервых(, Спринт = &Спринт) КАК ИсторияУчастияОбъектовВСпринтахСрезПервых
	|		ПО СоставСпринтов.Объект = ИсторияУчастияОбъектовВСпринтахСрезПервых.Объект";
	
	Запрос.УстановитьПараметр("Спринт", РезультатСпринт.Значение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбъектыСпринта = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		ТипОбъекта = ТипЗнч(Выборка.Объект);
		СтруктураОбъекта = Новый Структура("name, id, type", Строка(Выборка.Объект), XMLСтрока(Выборка.Объект), Строка(ТипОбъекта));
		
		ДанныеОбъекта = Новый Структура;
		ДанныеОбъекта.Вставить("object", СтруктураОбъекта);
		ДанныеОбъекта.Вставить("dateAdd", Выборка.ДатаДобавления);
		ДанныеОбъекта.Вставить("planDev", Выборка.РазработкаПлан);
		ДанныеОбъекта.Вставить("planTest", Выборка.ТестированиеПлан);
		
		ОбъектыСпринта.Добавить(ДанныеОбъекта);
	КонецЦикла;
	
	Возврат ПолучитьСтруктуруОтвета(0, ОбъектыСпринта);
	
КонецФункции

// Удаление задачи из спринта
//
// Параметры:
//	Идентификатор	 - Строка		 - идентификатор спринта.
//  Запрос			 - HTTPЗапрос	 - Запрос, который пришел на http сервис
//
// Возвращаемое значение:
//  Структура - Структура ответа:
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Структура - Если заполнено - значит ошибка
//
Функция УдалитьЗадачуИзСпринта(Знач Идентификатор, Знач Запрос) Экспорт
	
	Если ЭтоСлужебныйПользователь() Тогда
		Возврат ПолучитьСтруктуруОтвета(18);
	КонецЕсли;
	
	РезультатСпринт = НайтиСпринт(Идентификатор);
	Если РезультатСпринт.Значение = Неопределено Тогда
		Возврат РезультатСпринт.СтруктураОтвета;
	КонецЕсли;
	
	Спринт = РезультатСпринт.Значение;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	ДанныеСпринта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Спринт, "ДокументОснование, ДатаОкончания, Филиал");
	
	Если ТекущаяДатаСеанса > КонецДня(ДанныеСпринта.ДатаОкончания) Тогда
		Возврат ПолучитьСтруктуруОтвета(2, , "Спринт не активен. Удаление невозможно.");
	КонецЕсли;
	
	Результат = ПолучитьПараметрыТелаЗапроса(Запрос, "УдалитьЗадачуИзСпринта");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Список = РегистрыСведений.СоставСпринтов.ПолучитьОбъектыСпринта(Спринт);
	НайденнаяЗадача = Список.НайтиПоЗначению(Результат.Параметры.Задача);
	
	Если НайденнаяЗадача = Неопределено Тогда
		Возврат ПолучитьСтруктуруОтвета(2, , "Задача не в спринте");
	КонецЕсли;
	
	Список.Удалить(НайденнаяЗадача);
	
	НачатьТранзакцию();
	Попытка
		РегистрыСведений.СоставСпринтов.Добавить(Спринт, Список);
		РегистрыСведений.ИсторияУчастияОбъектовВСпринтах.Добавить(Спринт, Список, ТекущаяДатаСеанса);
		
		Если ЗначениеЗаполнено(ДанныеСпринта.ДокументОснование) Тогда
			РегистрыСведений.ОчередьСобытийНаОбработку.ДобавитьЗаданиеОтправитьИзмененияПоСпринтам(Спринт, ТекущаяДатаСеанса);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Возврат ПолучитьСтруктуруОтвета(2, , ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ПолучитьСтруктуруОтвета(0);
	
КонецФункции

#КонецОбласти

#Область СчетчикиИнструментов

// Возвращает значения счетчиков инструментов
// 
// Параметры:
//  ПараметрыЗапроса - Соответствие - Параметры запроса
// 
// Возвращаемое значение:
//  Структура - Структура ответа:
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Структура - Если заполнено - значит ошибка
Функция ПолучитьСчетчикиИнструментов(ПараметрыЗапроса) Экспорт
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "СчетчикиИнструментов");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если Результат.Параметры.Инструмент <> Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИнструментыСистемы.Ссылка,
		|	ИнструментыСистемы.МетодРасчетаСчетчика,
		|	ИнструментыСистемы.ЕстьСчетчик
		|ИЗ
		|	Справочник.ИнструментыСистемы КАК ИнструментыСистемы
		|ГДЕ
		|	ИнструментыСистемы.Ссылка = &Инструмент";
		
		Запрос.УстановитьПараметр("Инструмент", Результат.Параметры.Инструмент);
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИнструментыСистемы.Ссылка,
		|	ИнструментыСистемы.МетодРасчетаСчетчика,
		|	ИнструментыСистемы.ЕстьСчетчик
		|ИЗ
		|	РегистрСведений.ИзбранныеИнструментыПользователей КАК ИзбранныеИнструментыПользователей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнструментыСистемы КАК ИнструментыСистемы
		|		ПО ИзбранныеИнструментыПользователей.Инструмент = ИнструментыСистемы.Ссылка
		|ГДЕ
		|	ИзбранныеИнструментыПользователей.Пользователь = &Пользователь
		|	И НЕ ИзбранныеИнструментыПользователей.ЭтоОтчет
		|	И ИнструментыСистемы.ЕстьСчетчик";
		
		Запрос.УстановитьПараметр("Пользователь", Результат.Параметры.Пользователь);
	КонецЕсли;
	
	Данные = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеИнструмента = Новый Структура("id, count", XMLСтрока(Выборка.Ссылка), 0);
		
		Если Выборка.ЕстьСчетчик И ЗначениеЗаполнено(Выборка.МетодРасчетаСчетчика) Тогда
			Попытка
				Выполнить(СтрШаблон("ДанныеИнструмента.count = %1(Результат.Параметры.Пользователь)", Выборка.МетодРасчетаСчетчика));
			Исключение
				ЗаписьЖурналаРегистрации("API.ПолучитьСчетчикиИнструментов", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
		Данные.Добавить(ДанныеИнструмента);
	КонецЦикла;
	
	Возврат ПолучитьСтруктуруОтвета(0, Данные);
	
КонецФункции

#КонецОбласти

#Область Трудозатраты

// Запись трудозатрат по переданным параметрам
//
// Параметры:
//  Запрос	 - HTTPЗапрос	 - Запрос, который пришел на http сервис
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//
Функция ЗаписатьТрудозатратыПоОбъекту(Знач Запрос) Экспорт
	
	ЭтоСлужебныйПользователь = ЭтоСлужебныйПользователь();
	
	РезультатТело = ПолучитьПараметрыТелаЗапроса(Запрос, "ДобавлениеТрудозатратТелоЗапроса");
	Если РезультатТело.Параметры = Неопределено Тогда
		Возврат РезультатТело.СтруктураОтвета;
	КонецЕсли;
	
	Результат = ПолучитьПараметры(Запрос.ПараметрыЗапроса, "ДобавлениеТрудозатрат", ЭтоСлужебныйПользователь);
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Если Окр(РезультатТело.Параметры.Длительность, 2) = 0 Тогда
		Возврат ПолучитьСтруктуруОтвета(15, , "duration");
	КонецЕсли;
	
	Пользователь = ?(ЭтоСлужебныйПользователь, Результат.Параметры.Исполнитель, ПараметрыСеанса.ТекущийПользователь);
	СтруктураОтвета = ДобавитьТрудозатраты(Результат.Параметры.Ссылка, Пользователь, РезультатТело.Параметры);
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Изменяет трудозатраты
//
// Параметры:
//  Запрос	 - HTTPЗапрос	 - Запрос, который пришел на http сервис
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//
Функция ИзменитьТрудозатратыПоОбъекту(Знач Запрос) Экспорт
	
	ЭтоСлужебныйПользователь = ЭтоСлужебныйПользователь();
	
	РезультатТело = ПолучитьПараметрыТелаЗапроса(Запрос, "ИзменениеТрудозатратТелоЗапроса");
	Если РезультатТело.Параметры = Неопределено Тогда
		Возврат РезультатТело.СтруктураОтвета;
	КонецЕсли;
	
	Результат = ПолучитьПараметры(Запрос.ПараметрыЗапроса, "ИзменениеТрудозатрат", ЭтоСлужебныйПользователь);
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Если Окр(РезультатТело.Параметры.Длительность, 2) = 0 Тогда
		Возврат ПолучитьСтруктуруОтвета(15, , "duration");
	КонецЕсли;
	
	Пользователь = ?(ЭтоСлужебныйПользователь, Результат.Параметры.Исполнитель, ПараметрыСеанса.ТекущийПользователь);
	
	СтруктураОтвета = ИзменитьТрудозатраты(Результат.Параметры, РезультатТело.Параметры, Пользователь);
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Возвращает доступные для внесения трудозатрат виды деятельности в зависимости от объекта и пользователя
//
// Параметры:
//  ПараметрыЗапроса	 - Соответствие - Параметры запроса
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Массив - Описания видов деятельности
//
Функция ПолучитьДоступныеВидыДеятельности(Знач ПараметрыЗапроса) Экспорт
	
	ЭтоСлужебныйПользователь = ЭтоСлужебныйПользователь();
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "ДоступныеВидыДеятельности", ЭтоСлужебныйПользователь);
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Если ТипЗнч(Результат.Параметры.Ссылка) <> Тип("ДокументСсылка.ВнутренниеТрудозатраты") Тогда
		Направление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.Параметры.Ссылка, "Направление");
		ДанныеВидовДеятельности = ПолучитьВидыДеятельности(Результат.Параметры.Исполнитель, Направление);
		Данные = ДанныеВидовДеятельности.СписокВыбора;
	Иначе
		Данные = ПолучитьВидыДеятельностиДляВнутреннихТрудозатрат();
	КонецЕсли;
	
	ВидыДеятельности = Новый Массив;
	Для Каждого ЭлементСписка Из Данные Цикл
		ВидДеятельности = Новый Структура("id, name", XMLСтрока(ЭлементСписка.Значение), ЭлементСписка.Представление);
		ВидыДеятельности.Добавить(ВидДеятельности);
	КонецЦикла;
	
	Возврат ПолучитьСтруктуруОтвета(0, ВидыДеятельности);
	
КонецФункции

// Возвращает трудозатраты за период с фильтром по пользователю если он передан в параметрах запроса
//
// Параметры:
//  ПараметрыЗапроса	 - Соответствие - Параметры запроса
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Массив - Описания трудозатрат по объекту
//
Функция ПолучитьТрудозатратыЗаПериод(Знач ПараметрыЗапроса) Экспорт
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "ТрудозатратыЗаПериод");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Данные = ПолучитьДанныеПоТрудозатратамЗаПериод(Результат.Параметры);
	
	Возврат ПолучитьСтруктуруОтвета(0, Данные);
	
КонецФункции

// Возвращает трудозатраты по объекту с фильтром по пользователю если он передан в параметрах запроса
//
// Параметры:
//  ПараметрыЗапроса	 - Соответствие - Параметры запроса
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Массив - Описания трудозатрат по объекту
//
Функция ПолучитьТрудозатратыОбъекта(Знач ПараметрыЗапроса) Экспорт
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "ТрудозатратыОбъекта");
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Данные = ПолучитьДанныеПоТрудозатратам(Результат.Параметры);
	
	Возврат ПолучитьСтруктуруОтвета(0, Данные);
	
КонецФункции

// Удалить трудозатраты по объекту
//
// Параметры:
//  ПараметрыЗапроса	 - Соответствие - Параметры запроса.
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Массив - Описания трудозатрат по объекту
//
Функция УдалитьТрудозатратыПоОбъекту(Знач ПараметрыЗапроса) Экспорт
	
	ЭтоСлужебныйПользователь = ЭтоСлужебныйПользователь();
	
	Результат = ПолучитьПараметры(ПараметрыЗапроса, "УдалениеТрудозатрат", ЭтоСлужебныйПользователь);
	Если Результат.Параметры = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Пользователь = ?(ЭтоСлужебныйПользователь, Результат.Параметры.Исполнитель, ПараметрыСеанса.ТекущийПользователь);
	
	СтруктураОтвета = УдалитьТрудозатраты(Результат.Параметры, Пользователь);
	
	Возврат СтруктураОтвета;
	
КонецФункции

#КонецОбласти

#Область Файлы

// Возвращает двоичные данные файла в base64
//
// Параметры:
//  Идентификатор - Строка - идентификатор файла.
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Массив - Описания трудозатрат по объекту
//
Функция ПолучитьФайл(Знач Идентификатор) Экспорт
	
	Результат = ПолучитьСсылкуТипа(Идентификатор, Тип("СправочникСсылка.Файлы"), "id");
	Если Результат.Значение = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.Наименование КАК ИмяФайлаНаСервере,
		|	Файлы.ОригинальноеИмя КАК ИмяФайлаНаКлиенте,
		|	Файлы.Каталог КАК КаталогХраненияФайла,
		|	Файлы.Расширение КАК Расширение
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	НЕ Файлы.ПометкаУдаления
		|	И Файлы.Ссылка = &Файл";
	
	Запрос.УстановитьПараметр("Файл", Результат.Значение);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЧастиИмениФайла = Новый Массив;
	ЧастиИмениФайла.Добавить(ПовторноеИспользованиеВызовСервера.КаталогХраненияФайловНаСервере());
	ЧастиИмениФайла.Добавить(РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(Выборка.КаталогХраненияФайла));
	ЧастиИмениФайла.Добавить(Выборка.ИмяФайлаНаСервере);
	
	ИмяФайлаИсточника = СтрСоединить(ЧастиИмениФайла);
	Файл = Новый Файл(ИмяФайлаИсточника);
	
	Если НЕ Файл.Существует() Тогда
		Возврат ПолучитьСтруктуруОтвета(6);
	КонецЕсли;
	
	Данные = Новый Структура;
	Данные.Вставить("file", Base64Строка(Новый ДвоичныеДанные(ИмяФайлаИсточника)));
	Данные.Вставить("name", Выборка.ИмяФайлаНаКлиенте);
	Данные.Вставить("extension", Выборка.Расширение);
	
	СтруктураОтвета = ПолучитьСтруктуруОтвета(0, Данные);
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Возвращает список файлов объекта
//
// Параметры:
//  Идентификатор		 - Строка		 - Идентификатор объекта
//  Тип					 - Строка		 - Тип объекта
//  ПараметрыЗапроса	 - Соответствие - Параметры запроса
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Массив - Описания трудозатрат по объекту
//
Функция ПолучитьФайлыОбъекта(Знач Идентификатор, Знач Тип, Знач ПараметрыЗапроса) Экспорт
	
	РезультатПараметры = ПолучитьПараметры(ПараметрыЗапроса, "ПолучитьФайлыОбъекта");
	
	Если РезультатПараметры.Параметры = Неопределено Тогда
		Возврат РезультатПараметры.СтруктураОтвета;
	КонецЕсли;
	
	Если Тип = "task" Тогда
		Результат = ПолучитьСсылкуТипа(Идентификатор, Тип("ДокументСсылка.Задача"), "id");
		Если Результат.Значение = Неопределено Тогда
			Результат = ПолучитьСсылкуПоНомеруЗадачи(Идентификатор);
		КонецЕсли;
	Иначе
		Результат = ПолучитьСсылкуТипа(Идентификатор, Тип("ДокументСсылка.ЗаявкаНаРазработку"), "id");
	КонецЕсли;
	
	Если Результат.Значение = Неопределено Тогда
		Возврат Результат.СтруктураОтвета;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Файлы.Наименование КАК Наименование,
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ДатаСоздания КАК ДатаСоздания,
	|	Файлы.Размер КАК Размер,
	|	Файлы.Расширение КАК Расширение,
	|	Файлы.Архивный КАК Архивный
	|ИЗ
	|	РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО ПрикрепленныеФайлы.Файл = Файлы.Ссылка
	|ГДЕ
	|	ПрикрепленныеФайлы.Объект = &Объект
	|	И ПрикрепленныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.Объект)
	|	И НЕ Файлы.ПометкаУдаления
	|{ГДЕ
	|	Файлы.Архивный КАК Архивный}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Файлы.Наименование,
	|	Файлы.Ссылка,
	|	Файлы.ДатаСоздания,
	|	Файлы.Размер,
	|	Файлы.Расширение,
	|	Файлы.Архивный
	|ИЗ
	|	РегистрСведений.Комментарии КАК Комментарии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ПО Комментарии.Идентификатор = ПрикрепленныеФайлы.Объект
	|			И (ПрикрепленныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.ФайлыКомментария))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО (ПрикрепленныеФайлы.Файл = Файлы.Ссылка)
	|			И (НЕ Файлы.ПометкаУдаления)
	|ГДЕ
	|	Комментарии.Объект = &Объект
	|{ГДЕ
	|	Файлы.Архивный КАК Архивный}";
	
	ПостроительЗапроса = Новый ПостроительЗапроса(ТекстЗапроса);
	ПостроительЗапроса.Параметры.Вставить("Объект", Результат.Значение);
	
	Если РезультатПараметры.Параметры.Архивный <> Неопределено Тогда
		Архивный = ?(ВРег(СокрЛП(РезультатПараметры.Параметры.Архивный)) = "TRUE", Истина, Ложь);
		ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ПостроительЗапроса,
			"Архивный", ВидСравнения.Равно, Архивный);
	КонецЕсли;
	
	ПостроительЗапроса.Выполнить();
	
	Данные = Новый Массив;
	
	Если НЕ ПостроительЗапроса.Результат.Пустой() Тогда
		Выборка = ПостроительЗапроса.Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДанныеСтроки = Новый Структура;
			ДанныеСтроки.Вставить("name", Выборка.Наименование);
			ДанныеСтроки.Вставить("size", Выборка.Размер);
			ДанныеСтроки.Вставить("date", Выборка.ДатаСоздания);
			ДанныеСтроки.Вставить("extension", Выборка.Расширение);
			ДанныеСтроки.Вставить("id", XMLСтрока(Выборка.Ссылка));
			ДанныеСтроки.Вставить("archive", Выборка.Архивный);
			
			Данные.Добавить(ДанныеСтроки);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураОтвета = ПолучитьСтруктуруОтвета(0, Данные);
	
	Возврат СтруктураОтвета;
	
КонецФункции

#КонецОбласти

#Область Филиалы

// Возвращает данные филиала по коду или GUID
//
// Параметры:
//  Идентификатор	 - Строка	 - идентификатор филиала.
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Структура - данные пользователя
//
Функция ПолучитьДанныеФилиала(Знач Идентификатор) Экспорт
	
	РезультатФилиал = НайтиФилиал(Идентификатор);
	Если РезультатФилиал.Значение = Неопределено Тогда
		Возврат РезультатФилиал.СтруктураОтвета;
	КонецЕсли;
	
	#Область ТекстЗапроса
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Филиалы.Ссылка КАК Команда,
		|	Филиалы.Наименование КАК КомандаНаименование
		|ИЗ
		|	Справочник.Филиалы КАК Филиалы
		|ГДЕ
		|	Филиалы.Родитель = &Филиал
		|	И НЕ Филиалы.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Пользователи.Ссылка, НЕОПРЕДЕЛЕНО) КАК Сотрудник,
		|	ЕСТЬNULL(Должности.Ссылка, НЕОПРЕДЕЛЕНО) КАК Должность,
		|	ЕСТЬNULL(Должности.Код, """") КАК ДолжностьКод,
		|	ЕСТЬNULL(Должности.Наименование, """") КАК ДолжностьНаименование,
		|	ЕСТЬNULL(Пользователи.Ссылка, НЕОПРЕДЕЛЕНО) КАК Пользователь,
		|	ЕСТЬNULL(Пользователи.Наименование, """") КАК ПользовательНаименование,
		|	ЕСТЬNULL(Пользователи.Почта, """") КАК Почта,
		|	Филиалы.Ссылка КАК Филиал,
		|	Филиалы.Код КАК ФилиалКод,
		|	Филиалы.Наименование КАК ФилиалНаименование
		|ИЗ
		|	Справочник.Филиалы КАК Филиалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО Филиалы.Ссылка = Пользователи.Филиал
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
		|		ПО (Пользователи.Должность = Должности.Ссылка)
		|ГДЕ
		|	Филиалы.Ссылка = &Филиал
		|ИТОГИ
		|	МАКСИМУМ(ФилиалКод),
		|	МАКСИМУМ(ФилиалНаименование)
		|ПО
		|	Филиал";
	#КонецОбласти
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Филиал", РезультатФилиал.Значение);
	Пакеты = Запрос.ВыполнитьПакет();
	
	Если Пакеты[1].Пустой() Тогда
		Возврат ПолучитьСтруктуруОтвета(2, , "Нет данных");
	КонецЕсли;
	
	Выборка = Пакеты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	Выборка.Следующий();
	
	Данные = Новый Структура;
	Данные.Вставить("id", XMLСтрока(Выборка.Филиал));
	Данные.Вставить("code", Выборка.ФилиалКод);
	Данные.Вставить("description", Выборка.ФилиалНаименование);
	
	Сотрудники = Новый Массив;
	Детали = Выборка.Выбрать();
	
	Пока Детали.Следующий() Цикл
		СтруктураСотрудник = Новый Структура;
		
		Если ЗначениеЗаполнено(Детали.Пользователь) Тогда
			СтруктураСотрудник.Вставить("id", XMLСтрока(Детали.Пользователь));
			СтруктураСотрудник.Вставить("name", Детали.ПользовательНаименование);
			СтруктураСотрудник.Вставить("mail", Детали.Почта);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Детали.Должность) Тогда
			СтруктураДолжность = Новый Структура;
			СтруктураДолжность.Вставить("id", XMLСтрока(Детали.Должность));
			СтруктураДолжность.Вставить("code", Детали.ДолжностьКод);
			СтруктураДолжность.Вставить("description", Детали.ДолжностьНаименование);
			СтруктураСотрудник.Вставить("position", СтруктураДолжность);
		КонецЕсли;
		
		Сотрудники.Добавить(СтруктураСотрудник);
	КонецЦикла; 
	
	Данные.Вставить("members", Сотрудники);
	
	Команды = Новый Массив;
	ВыборкаКоманды = Пакеты[0].Выбрать();

	Пока ВыборкаКоманды.Следующий() Цикл
		СтруктураКоманда = Новый Структура;
		СтруктураКоманда.Вставить("id", XMLСтрока(ВыборкаКоманды.Команда));
		СтруктураКоманда.Вставить("description", ВыборкаКоманды.КомандаНаименование);
		Команды.Добавить(СтруктураКоманда);
	КонецЦикла;
	
	Данные.Вставить("teams", Команды);
	
	Возврат ПолучитьСтруктуруОтвета(0, Данные);
	
КонецФункции

// Возвращает спринты филиала
//
// Параметры:
//  Идентификатор	 - Строка	 - идентификатор филиала.
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Структура - данные пользователя
//
Функция ПолучитьНезавершенныеСпринтыФилиала(Знач Идентификатор) Экспорт
	
	РезультатФилиал = НайтиФилиал(Идентификатор);
	Если РезультатФилиал.Значение = Неопределено Тогда
		Возврат РезультатФилиал.СтруктураОтвета;
	КонецЕсли;
	
	#Область ТекстЗапроса
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Спринт.Ссылка КАК Ссылка,
		|	Спринт.Номер КАК Номер,
		|	Спринт.ДатаНачала КАК ДатаНачала,
		|	Спринт.ДатаОкончания КАК ДатаОкончания,
		|	Спринт.Наименование КАК Наименование,
		|	ВЫБОР
		|		КОГДА Спринт.ДатаНачала <= &ТекущаяДата
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Активный
		|ИЗ
		|	Документ.Спринт КАК Спринт
		|ГДЕ
		|	Спринт.Филиал = &Филиал
		|	И Спринт.ДатаОкончания >= &ТекущаяДата
		|	И НЕ Спринт.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Спринт.Ссылка,
		|	Спринт.Номер,
		|	Спринт.ДатаНачала,
		|	Спринт.ДатаОкончания,
		|	Спринт.Наименование,
		|	ВЫБОР
		|		КОГДА Спринт.ДатаНачала <= &ТекущаяДата
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|ИЗ
		|	Документ.Спринт КАК Спринт
		|ГДЕ
		|	Спринт.Команда = &Филиал
		|	И Спринт.ДатаОкончания >= &ТекущаяДата
		|	И НЕ Спринт.ПометкаУдаления";
	#КонецОбласти
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Филиал", РезультатФилиал.Значение);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Массив = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Структура = Новый Структура;
		Структура.Вставить("id", XMLСтрока(Выборка.Ссылка));
		Структура.Вставить("name", Выборка.Наименование);
		Структура.Вставить("date_start", Выборка.ДатаНачала);
		Структура.Вставить("date_end", Выборка.ДатаОкончания);
		Структура.Вставить("active", Выборка.Активный);
		Структура.Вставить("number", Выборка.Номер);
		
		Массив.Добавить(Структура);
	КонецЦикла;
	
	Возврат ПолучитьСтруктуруОтвета(0, Массив);
	
КонецФункции

#КонецОбласти

#Область Хранилище

// Получить GUID заявки по номеру
//
// Возвращаемое значение:
//  Структура - Структура ответа
//  * code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Строка - Номер версии
//
Функция ПолучитьВерсиюКонфигурацииХранилища() Экспорт
	
	Если НЕ ИнтеграцияДополнительныхПодсистем.ПодсистемаСуществует("ОбновлениеИнформационнойБазы") Тогда 
		Возврат ПолучитьСтруктуруОтвета(20,, "Данный метод недоступен, требуется подсистема ""ОбновлениеИнформационнойБазы""");
	КонецЕсли;

	Попытка
		Версия = Константы.НомерПоследнейВерсииКонфигурацииХранилища.Получить();
	Исключение
		Возврат ПолучитьСтруктуруОтвета(20, , ОписаниеОшибки());
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Версия) Тогда
		Возврат ПолучитьСтруктуруОтвета(0, Формат(Версия, "ЧГ=0"));
	Иначе
		Возврат ПолучитьСтруктуруОтвета(0, "");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Производит чтение строки в формате JSON
//
// Параметры:
//  Строка					 - Строка	 - строка в формате JSON
//  ПрочитатьВСоответствие	 - Булево	 - Истина - чтение в соответствие, Ложь - чтение в структуру
//
// Возвращаемое значение:
//	Структура - Структура ответа
//	* code - Число - код ответа
//  * message - Строка - сообщение в случае возникновения ошибки
//  * data - Строка - Номер версии
Функция ОбработатьJSON(Знач Строка, Знач ПрочитатьВСоответствие = Ложь)
	
	Результат = Новый Структура("Успешно, ОписаниеОшибки, Данные", Истина, "", Неопределено);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строка);
	
	// Мы можем не прочитать JSON из-за ошибок структуры
	Попытка
		Результат.Данные = ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);
	Исключение
		Результат.Успешно = Ложь;
		Результат.ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Перед обработкой запроса
//
// Параметры:
//  Запрос					 - HTTPЗапрос - Запрос, который пришел на http сервис.
//  ПроверятьТокен		 - Булево - признак необходимости проверять jwt токен.
// 
// Возвращаемое значение:
//  Структура - результат проверки
//
Функция ПередОбработкойЗапроса(Запрос, Знач ПроверятьТокен = Истина) Экспорт
	
	КодОтвета = 200;
	
	РегистрыСведений.СтатистикаЗапросовAPI.Добавить(Запрос);
	Результат = ПроверитьДействительностьПользователя(КодОтвета);
	
	Если Результат.Успешно И ПроверятьТокен Тогда
		Результат = РегистрыСведений.ТокеныДоступаПользователей.ПроверитьСоединение(Запрос.Заголовки);
		Результат.Вставить("КодОтвета", КодОтвета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получить структуру ответа.
// 
// Параметры:
//  Код - Число - Код
//  Данные - Любой
//  ТекстОшибки - Строка - Текст ошибки
// 
// Возвращаемое значение:
//  Структура - Получить структуру ответа:
// * code - Число
// * message - Строка
// * data - Любой
Функция ПолучитьСтруктуруОтвета(Знач Код, Знач Данные = Неопределено, Знач ТекстОшибки = "") Экспорт

	// BSLLS:MagicNumber-off
	Если Код = 0 Тогда
		Сообщение = "";
	ИначеЕсли Код = 1 Тогда
		Сообщение = "Вызываемый метод не найден.";
	ИначеЕсли Код = 2 Тогда
		Сообщение = ТекстОшибки;
	ИначеЕсли Код = 3 Тогда
		Сообщение = "Пользователь не найден.";
	ИначеЕсли Код = 4 Тогда
		Сообщение = "Некорректный идентификатор объекта.";
	ИначеЕсли Код = 5 Тогда
		Сообщение = "Некорректный тип объекта.";
	ИначеЕсли Код = 6 Тогда
		Сообщение = "Объект не найден.";
	ИначеЕсли Код = 7 Тогда
		Сообщение = "Пустое тело запроса.";
	ИначеЕсли Код = 8 Тогда
		Сообщение = СтрШаблон("Не удалось прочитать JSON. %1", ТекстОшибки);
	ИначеЕсли Код = 9 Тогда
		Сообщение = "Неподходящий вид деятельности.";
	ИначеЕсли Код = 10 Тогда
		Сообщение = СтрШаблон("Не удалось записать трудозатраты по причине: %1", ТекстОшибки);
	ИначеЕсли Код = 11 Тогда
		Сообщение = "В теле запроса отсутствует идентификатор вида деятельности.";
	ИначеЕсли Код = 12 Тогда
		Сообщение = "В теле запроса отсутствует длительность.";
	ИначеЕсли Код = 13 Тогда
		Сообщение = СтрШаблон("Не удалось авторизоваться по причине: %1", ТекстОшибки);
	ИначеЕсли Код = 14 Тогда
		Сообщение = "Длительность трудозатраты должна быть больше нуля.";
	ИначеЕсли Код = 15 Тогда
		Сообщение = СтрШаблон("Некорректно заполнен параметр ""%1""", ТекстОшибки);
	ИначеЕсли Код = 16 Тогда
		Сообщение = СтрШаблон("Не заполнен обязательный параметр %1", ТекстОшибки);
	ИначеЕсли Код = 17 Тогда
		Сообщение = СтрШаблон("Не удалось создать объект по причине: %1", ТекстОшибки);
	ИначеЕсли Код = 18 Тогда
		Сообщение = "Метод недоступен служебному пользователю.";
	ИначеЕсли Код = 19 Тогда
		Сообщение = СтрШаблон("Не удалось удалить трудозатраты по причине: %1", ТекстОшибки);
	ИначеЕсли Код = 20 Тогда
		Сообщение = СтрШаблон("Не удалось выполнить операцию по причине: %1", ТекстОшибки);
	ИначеЕсли Код = 21 Тогда
		Сообщение = "Дата не должна быть пустой.";
	ИначеЕсли Код = 22 Тогда
		Сообщение = "Неверный формат даты.";
	ИначеЕсли Код = 23 Тогда
		Сообщение = "Тип канбана не поддерживается.";
	ИначеЕсли Код = 24 Тогда
		Сообщение = "Не удалось получить статус из этапа.";
	ИначеЕсли Код = 25 Тогда
		Сообщение = "Команда не найдена";
	Иначе
		Сообщение = "Неизвестная ошибка.";
	КонецЕсли;
	// BSLLS:MagicNumber-on

	СтруктураОтвета = Новый Структура("code, message", Код, Сообщение);
	
	Если Данные <> Неопределено Тогда
		СтруктураОтвета.Вставить("data", Данные);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Проверить действительность пользователя.
//
// Параметры:
//  КодОтвета	 - Число - код успешного ответа.
// 
// Возвращаемое значение:
//  Структура - возвращает действителен текущий пользователь, или нет.
//
Функция ПроверитьДействительностьПользователя(КодОтвета = 200) Экспорт
	
	Результат = Новый Структура("Успешно, КодОтвета, СтруктураОтвета", Истина, КодОтвета);
	
	Если ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ПараметрыСеанса.ТекущийПользователь, "Недействителен") Тогда
		Результат.Успешно = Ложь;
		Результат.КодОтвета = 403;
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(13, , "пользователь недействителен.");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьОтвет(СтруктураОтвета, Знач ЗаголовкиЗапроса, Знач КодСостояния = 200) Экспорт
	
	Ответ = Новый HTTPСервисОтвет(КодСостояния);
	
	Если ТипЗнч(СтруктураОтвета) = Тип("Строка") Тогда
		// Иногда ответ - это просто строка с шаблоном ответа, ее не нужно оборачивать в JSON,
		// иначе придется менять еще и обработку ответа.
		ТелоОтвета = СтруктураОтвета;
		
		ContentType = "text/plain; charset=utf-8";
	Иначе
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON);
		НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
		НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением;
		ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета, НастройкиСериализацииJSON);
		ТелоОтвета = ЗаписьJSON.Закрыть();
		
		ContentType = "application/json";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТелоОтвета) Тогда
		Ответ.УстановитьТелоИзСтроки(ТелоОтвета);
		Ответ.Заголовки.Вставить("Content-Type", ContentType);
	КонецЕсли;
	
	Origin = ЗаголовкиЗапроса.Получить("Origin");
	
	Если Origin <> Неопределено Тогда
		Ответ.Заголовки.Вставить("Access-Control-Allow-Origin", Origin);
		Ответ.Заголовки.Вставить("Access-Control-Allow-Credentials", "true");
		
		AccessControlRequestHeaders = ЗаголовкиЗапроса.Получить("Access-Control-Request-Headers");
		AccessControlRequestMethod = ЗаголовкиЗапроса.Получить("Access-Control-Request-Method");
		
		Если AccessControlRequestHeaders <> Неопределено Тогда
			Ответ.Заголовки.Вставить("Access-Control-Allow-Headers", AccessControlRequestHeaders);
		КонецЕсли;
		
		Если AccessControlRequestMethod <> Неопределено Тогда
			Ответ.Заголовки.Вставить("Access-Control-Allow-Method", AccessControlRequestMethod);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПараметрыЗапроса

Процедура ДобавитьПараметр(Параметры, Знач Имя, Знач Представление, Знач Метод = Неопределено,
	Знач Обязательный = Истина, Знач ЗначениеПоУмолчанию = Неопределено)
	
	ОписаниеПараметра = Новый Структура;
	ОписаниеПараметра.Вставить("Имя", Имя);
	ОписаниеПараметра.Вставить("Представление", Представление);
	ОписаниеПараметра.Вставить("Обязательный", Обязательный);
	ОписаниеПараметра.Вставить("Метод", Метод);
	ОписаниеПараметра.Вставить("ЗначениеПоУмолчанию", ЗначениеПоУмолчанию);
	
	Параметры.Добавить(ОписаниеПараметра);
	
КонецПроцедуры

Функция ПолучитьПроверяемыеПараметры(Знач Назначение, Знач ЭтоСлужебныйПользователь)

	// BSLLS:LineLength-off
	// BSLLS:DuplicateStringLiteral-off
	Параметры = Новый Массив;
	
	Если Назначение = "СчетчикиИнструментов" Тогда
		ДобавитьПараметр(Параметры, "tool", "Инструмент", "ПолучитьИнструмент", Ложь);
		ДобавитьПараметр(Параметры, "userID", "Пользователь", "ПолучитьПользователя", Истина);
		
	ИначеЕсли Назначение = "Канбан" Тогда
		ДобавитьПараметр(Параметры, "branch", "Филиал", "ПолучитьФилиал", Ложь);
		ДобавитьПараметр(Параметры, "type", "Тип", "ПолучитьТипКанбана");
		ДобавитьПараметр(Параметры, "user", "Пользователь", "НайтиПользователяПоПочте", ЭтоСлужебныйПользователь, ПараметрыСеанса.ТекущийПользователь);
		ДобавитьПараметр(Параметры, "variant", "ВидОчереди", "ПолучитьВидОчереди", Ложь);
		ДобавитьПараметр(Параметры, "direction", "Направление", "ПолучитьНаправление", Ложь);
		ДобавитьПараметр(Параметры, "system", "Система", "ПолучитьСистему", Ложь);
		ДобавитьПараметр(Параметры, "customerGroup", "ГруппаЗаказчиков", "ПолучитьГруппуЗаказчиков", Ложь);
		ДобавитьПараметр(Параметры, "product", "Продукт", "ПолучитьПродукт", Ложь);
		
	ИначеЕсли Назначение = "КарточкаКанбан" Тогда
		ДобавитьПараметр(Параметры, "card", "КарточкаКанбан", "ПолучитьКарточкуКанбана");
		
	ИначеЕсли Назначение = "КанбанДобавитьКарточку" Тогда
		ДобавитьПараметр(Параметры, "list", "Этап", "ПолучитьЭтапКанбана");
		ДобавитьПараметр(Параметры, "name", "Наименование");
		ДобавитьПараметр(Параметры, "description", "Описание");
		ДобавитьПараметр(Параметры, "dateEnd", "СрокРеализации", "ПрочитатьДату", Ложь);
		
	ИначеЕсли Назначение = "КанбанИзменитьКарточку" Тогда
		ДобавитьПараметр(Параметры, "card", "КарточкаКанбан", "ПолучитьКарточкуКанбана");
		ДобавитьПараметр(Параметры, "name", "Наименование");
		ДобавитьПараметр(Параметры, "description", "Описание", , Ложь);
		ДобавитьПараметр(Параметры, "dateEnd", "СрокРеализации", "ПрочитатьДату", Ложь);	
		
	ИначеЕсли Назначение = "КанбанУдалитьКарточку" Тогда
		ДобавитьПараметр(Параметры, "card", "КарточкаКанбан", "ПолучитьКарточкуКанбана");
		
	ИначеЕсли Назначение = "КанбанДобавитьКолонку" Тогда
		ДобавитьПараметр(Параметры, "name", "Наименование");
		
	ИначеЕсли Назначение = "КанбанУдалитьКолонку" Тогда
		ДобавитьПараметр(Параметры, "list", "Этап", "ПолучитьЭтапКанбана");
		
	ИначеЕсли Назначение = "КанбанДобавитьФильтр" Тогда
		ДобавитьПараметр(Параметры, "direction", "Направление", "ПолучитьНаправление", Ложь);
		ДобавитьПараметр(Параметры, "system", "Система", "ПолучитьСистему", Ложь);
		ДобавитьПараметр(Параметры, "customer", "ГруппаЗаказчиков", "ПолучитьГруппуЗаказчиков", Ложь);
		ДобавитьПараметр(Параметры, "product", "Продукт", "ПолучитьПродукт", Ложь);
				
	ИначеЕсли Назначение = "КанбанУдалитьФильтр" Тогда
		ДобавитьПараметр(Параметры, "key", "КлючОчереди", "ПолучитьКлючОчереди");
		
	ИначеЕсли Назначение = "КанбанПолучитьНовогоИсполнителя" Тогда
		ДобавитьПараметр(Параметры, "objectType", "Тип");
		ДобавитьПараметр(Параметры, "objectID", "Ссылка", "ПолучитьСсылкуНаОбъект");
		ДобавитьПараметр(Параметры, "status", "Статус", "ПолучитьСтатусИзЭтапа");
		
	ИначеЕсли Назначение = "КанбанИзменитьПорядокЭтапов" Тогда
		ДобавитьПараметр(Параметры, "start", "ПеремещаемыйЭтап", "ПолучитьЭтапКанбана");
		ДобавитьПараметр(Параметры, "end", "СмещаемыйЭтап", "ПолучитьЭтапКанбана");
		
	ИначеЕсли Назначение = "КанбанИзменитьПорядокЗадач" Тогда
		ДобавитьПараметр(Параметры, "list", "Этап", "ПолучитьЭтапКанбана");
		ДобавитьПараметр(Параметры, "card", "ПеремещаемыйОбъект", "ПолучитьЗадачу");
		ДобавитьПараметр(Параметры, "end", "СмещаемыйОбъект", "ПолучитьЗадачу");
		
	ИначеЕсли Назначение = "КанбанИзменитьПорядокВЗ" Тогда
		ДобавитьПараметр(Параметры, "list", "Этап", "ПолучитьЭтапКанбана");
		ДобавитьПараметр(Параметры, "card", "ПеремещаемыйОбъект", "ПолучитьВнутреннееЗадание");
		ДобавитьПараметр(Параметры, "end", "СмещаемыйОбъект", "ПолучитьВнутреннееЗадание");
		
	ИначеЕсли Назначение = "КанбанИзменитьПорядокКарточек" Тогда
		ДобавитьПараметр(Параметры, "list", "Этап", "ПолучитьЭтапКанбана");
		ДобавитьПараметр(Параметры, "card", "ПеремещаемыйОбъект", "ПолучитьКарточкуКанбана");
		ДобавитьПараметр(Параметры, "end", "СмещаемыйОбъект", "ПолучитьКарточкуКанбана", Ложь);
		
	ИначеЕсли Назначение = "КанбанИзменитьПорядокЗаявокВОчереди" Тогда
		ДобавитьПараметр(Параметры, "list", "Этап", "ПолучитьСтатус");
		ДобавитьПараметр(Параметры, "card", "ПеремещаемыйОбъект", "ПолучитьЗаявку");
		ДобавитьПараметр(Параметры, "end", "СмещаемыйОбъект", "ПолучитьЗаявку", Ложь);

	ИначеЕсли Назначение = "КанбанФильтры" Тогда
		ДобавитьПараметр(Параметры, "variant", "ВидОчереди", "ПолучитьВидОчереди");
		ДобавитьПараметр(Параметры, "user", "Пользователь", "НайтиПользователяПоПочте", 
			ЭтоСлужебныйПользователь, ПараметрыСеанса.ТекущийПользователь);

	ИначеЕсли Назначение = "Автосохранение" Тогда
		ДобавитьПараметр(Параметры, "objectType", "Тип");
		ДобавитьПараметр(Параметры, "objectID", "ИдентификаторОбъекта");
		ДобавитьПараметр(Параметры, "userID", "Пользователь", "ПолучитьПользователя");
		ДобавитьПараметр(Параметры, "description", "Описание", , Ложь, "");
		
	ИначеЕсли Назначение = "Ассеты" Тогда
		ДобавитьПараметр(Параметры, "type", "Типы", "ПолучитьТипыАссетов");
		
	ИначеЕсли Назначение = "ОтписатьПользователяОтОповещений" Тогда
		ДобавитьПараметр(Параметры, "ObjectNumber", "НомерОбъекта");
		
	ИначеЕсли Назначение = "ИзменитьСтатусЗадачиКанбан" Тогда
		ДобавитьПараметр(Параметры, "card", "Объект", "ПолучитьЗадачу");
		ДобавитьПараметр(Параметры, "end", "СмещаемыйОбъект", "ПолучитьЗадачу", Ложь, Документы.Задача.ПустаяСсылка());
		ДобавитьПараметр(Параметры, "performer", "Исполнитель", "ПолучитьПользователя", Ложь, Справочники.Пользователи.ПустаяСсылка());
		ДобавитьПараметр(Параметры, "list", "Этап", "ПолучитьЭтапКанбана");
		ДобавитьПараметр(Параметры, "statusComment", "КомментарийСтатуса", , Ложь, "");
		ДобавитьПараметр(Параметры, "publicComment", "ПубличныйКомментарий", , Ложь, Истина);
		ДобавитьПараметр(Параметры, "activityID", "ВидДеятельности", , Ложь);
		ДобавитьПараметр(Параметры, "duration", "Трудозатраты", , Ложь, 0);
		ДобавитьПараметр(Параметры, "comment", "Комментарий", , Ложь, "");
		ДобавитьПараметр(Параметры, "reason", "ПричинаИзмененияСтатуса", "ПолучитьПричинуИзмененияСтатуса", Ложь);

	ИначеЕсли Назначение = "ИзменитьСтатусВнутреннегоЗаданияКанбан" Тогда
		ДобавитьПараметр(Параметры, "card", "Объект", "ПолучитьВнутреннееЗадание");
		ДобавитьПараметр(Параметры, "end", "СмещаемыйОбъект", "ПолучитьВнутреннееЗадание", 
			Ложь, Документы.ВнутреннееЗадание.ПустаяСсылка());
			
		ДобавитьПараметр(Параметры, "performer", "Исполнитель", "ПолучитьПользователя", Ложь, Справочники.Пользователи.ПустаяСсылка());
		ДобавитьПараметр(Параметры, "list", "Этап", "ПолучитьЭтапКанбана");
		ДобавитьПараметр(Параметры, "statusComment", "КомментарийСтатуса", , Ложь, "");
		ДобавитьПараметр(Параметры, "publicComment", "ПубличныйКомментарий", , Ложь, Истина);
		ДобавитьПараметр(Параметры, "activityID", "ВидДеятельности", , Ложь);
		ДобавитьПараметр(Параметры, "duration", "Трудозатраты", , Ложь, 0);
		ДобавитьПараметр(Параметры, "comment", "Комментарий", , Ложь, "");
		ДобавитьПараметр(Параметры, "reason", "ПричинаИзмененияСтатуса", "ПолучитьПричинуИзмененияСтатуса", Ложь);
		
	ИначеЕсли Назначение = "СписокЗадач" Тогда
		ДобавитьПараметр(Параметры, "performer", "Исполнитель", "НайтиПользователяПоПочте", Ложь, Справочники.Пользователи.ПустаяСсылка());
		ДобавитьПараметр(Параметры, "include", "Включить", , Ложь);        
		ДобавитьПараметр(Параметры, "team", "Команда", "ПолучитьФилиал", Ложь, Справочники.Филиалы.ПустаяСсылка());
		
	ИначеЕсли Назначение = "СписокЗаявок" Тогда
		ДобавитьПараметр(Параметры, "limit", "Количество", "ПолучитьКоличество", Ложь, 100);
		ДобавитьПараметр(Параметры, "skip", "КоличествоПропустить", "ПолучитьКоличествоПропускаемых", Ложь, 0);
		ДобавитьПараметр(Параметры, "system", "Система", "ПолучитьСистему", Ложь);
		ДобавитьПараметр(Параметры, "filter", "Фильтр", "ПроверитьЗначенияФильтра", Ложь);
		ДобавитьПараметр(Параметры, "performer", "Исполнитель", "НайтиПользователяПоПочте", Ложь);
		ДобавитьПараметр(Параметры, "include", "Включить", , Ложь);
		ДобавитьПараметр(Параметры, "tag", "Теги", "ПолучитьТеги", Ложь, Новый СписокЗначений);
		
	ИначеЕсли Назначение = "СписокВнутреннихТрудозатрат" Тогда
		ДобавитьПараметр(Параметры, "participant", "Участник", "НайтиПользователяПоПочте", ЭтоСлужебныйПользователь, ПараметрыСеанса.ТекущийПользователь);
		ДобавитьПараметр(Параметры, "include", "Включить", , Ложь);
		
	ИначеЕсли Назначение = "ДоступныеВидыДеятельности" Тогда
		ДобавитьПараметр(Параметры, "performer", "Исполнитель", "НайтиПользователяПоПочте", ЭтоСлужебныйПользователь, ПараметрыСеанса.ТекущийПользователь);
		ДобавитьПараметр(Параметры, "objectType", "Тип");
		ДобавитьПараметр(Параметры, "objectID", "Ссылка", "ПолучитьСсылкуНаОбъект");
		
	ИначеЕсли Назначение = "ТрудозатратыОбъекта" Тогда
		ДобавитьПараметр(Параметры, "objectType", "Тип");
		ДобавитьПараметр(Параметры, "objectID", "Ссылка", "ПолучитьСсылкуНаОбъект");
		ДобавитьПараметр(Параметры, "performer", "Исполнитель", "НайтиПользователяПоПочте", Ложь);
		ДобавитьПараметр(Параметры, "dateStart", "ДатаНачала", "ПрочитатьДату", Ложь);
		ДобавитьПараметр(Параметры, "dateEnd", "ДатаОкончания", "ПрочитатьДату", Ложь);
		
	ИначеЕсли Назначение = "ОбозначитьДайджестОпубликованным" Тогда
		ДобавитьПараметр(Параметры, "tasks", "МассивЗадач", "ПолучитьМассивЗадачДляДайджеста", Истина);
		
	ИначеЕсли Назначение = "ПолучитьВнеплановыйДайджест" Тогда
		ДобавитьПараметр(Параметры, "guid", "Системы", "ПолучитьСистемыДляДайджеста");
		
	ИначеЕсли Назначение = "ТрудозатратыЗаПериод" Тогда
		ДобавитьПараметр(Параметры, "performer", "Исполнитель", "НайтиПользователяПоПочте", Ложь);
		ДобавитьПараметр(Параметры, "dateStart", "ДатаНачала", "ПрочитатьДату");
		ДобавитьПараметр(Параметры, "dateEnd", "ДатаОкончания", "ПрочитатьДату");
		
	ИначеЕсли Назначение = "ДобавлениеТрудозатрат" Тогда
		Если ЭтоСлужебныйПользователь Тогда
			ДобавитьПараметр(Параметры, "performer", "Исполнитель", "НайтиПользователяПоПочте");
		КонецЕсли;
		
		ДобавитьПараметр(Параметры, "objectType", "Тип");
		ДобавитьПараметр(Параметры, "objectID", "Ссылка", "ПолучитьСсылкуНаОбъект");
		
	ИначеЕсли Назначение = "ДобавлениеТрудозатратТелоЗапроса"
		ИЛИ Назначение = "ИзменениеТрудозатратТелоЗапроса" Тогда
		
		ДобавитьПараметр(Параметры, "activityID", "ВидДеятельности");
		ДобавитьПараметр(Параметры, "duration", "Длительность");
		ДобавитьПараметр(Параметры, "date", "Дата", "ПрочитатьДату", Ложь);
		ДобавитьПараметр(Параметры, "comment", "Комментарий", , Ложь);
		
	ИначеЕсли Назначение = "ИзменениеТрудозатрат" ИЛИ Назначение = "УдалениеТрудозатрат" Тогда
		Если ЭтоСлужебныйПользователь Тогда
			ДобавитьПараметр(Параметры, "performer", "Исполнитель", "НайтиПользователяПоПочте");
		КонецЕсли;
		
		ДобавитьПараметр(Параметры, "objectID", "Документ", "ПолучитьДокументТрудозатраты");
				
	ИначеЕсли Назначение = "БыстроеСозданиеЗадачи" Тогда
		ДобавитьПараметр(Параметры, "customer", "Заказчик", "НайтиПользователяПоПочте", Ложь, ПараметрыСеанса.ТекущийПользователь);
		ДобавитьПараметр(Параметры, "name", "Наименование");
		ДобавитьПараметр(Параметры, "description", "Описание");
		ДобавитьПараметр(Параметры, "direction", "Направление", "ПолучитьНаправление");
		ДобавитьПараметр(Параметры, "system", "СистемаУчета", "ПолучитьСистему");
		ДобавитьПараметр(Параметры, "performer", "Исполнитель", "НайтиПользователяПоПочте", Ложь);
		ДобавитьПараметр(Параметры, "due", "СрокСдачи", "ПрочитатьДату", Ложь);
		ДобавитьПараметр(Параметры, "entity", "ЮрЛицо", "ПолучитьЮридическоеЛицо", Ложь);
		ДобавитьПараметр(Параметры, "function", "Назначение", "ПолучитьНазначение", Ложь, Справочники.НазначенияЗадач.НоваяЗадача);
		ДобавитьПараметр(Параметры, "process", "ВидПроцесса", "ПолучитьВидПроцесса", Ложь);
		ДобавитьПараметр(Параметры, "status", "Статус", "ПолучитьСтатусДляБСЗ", Ложь, Справочники.СтатусыОбъектов.Новый);
		ДобавитьПараметр(Параметры, "plan", "ПлановоеВремя", , Ложь, 0);
		ДобавитьПараметр(Параметры, "branch", "Филиал", "ПолучитьФилиал", Ложь);

	ИначеЕсли Назначение = "ОбновитьРезультатПоследнегоТестирования" Тогда
		ДобавитьПараметр(Параметры, "task", "task", , Истина);
		ДобавитьПараметр(Параметры, "testResult", "testResult", , Истина);
		
	ИначеЕсли Назначение = "СоздатьЗаявку" Тогда
		ДобавитьПараметр(Параметры, "name", "Наименование");
		ДобавитьПараметр(Параметры, "description", "Описание");
		ДобавитьПараметр(Параметры, "direction", "Направление", "ПолучитьНаправление");
		ДобавитьПараметр(Параметры, "systems", "СистемыРазработки", "ПолучитьСистемыРазработки");
		ДобавитьПараметр(Параметры, "due", "СрокРеализации", "ПрочитатьДату", Ложь);
		ДобавитьПараметр(Параметры, "entity", "ЮридическоеЛицо", "ПолучитьЮридическоеЛицо", Ложь);
		ДобавитьПараметр(Параметры, "function", "Назначение", "ПолучитьНазначение", Ложь, Справочники.НазначенияЗадач.НоваяЗадача);
		ДобавитьПараметр(Параметры, "process", "ВидПроцесса", "ПолучитьВидПроцесса", Ложь);
		
	ИначеЕсли Назначение = "СоздатьЗадачуОтЗаявки" Тогда
		ДобавитьПараметр(Параметры, "system", "СистемаУчета", "ПолучитьСистему");
		ДобавитьПараметр(Параметры, "due", "СрокСдачи", "ПрочитатьДату", Ложь);
		ДобавитьПараметр(Параметры, "customer", "Заказчик", "ПолучитьПользователя", Ложь);
		
	ИначеЕсли Назначение = "СоздатьВнутренниеТрудозатраты" Тогда
		ДобавитьПараметр(Параметры, "name", "Наименование");
		ДобавитьПараметр(Параметры, "description", "Описание", , Ложь);
		ДобавитьПараметр(Параметры, "participants", "Участники", "ПолучитьСписокУчастников", Ложь);
		ДобавитьПараметр(Параметры, "autodeactivation", "АвтоСнятиеАктивности", , Ложь, Ложь);
		ДобавитьПараметр(Параметры, "activityID", "ВидДеятельности", "ПолучитьВидДеятельности");
		
	ИначеЕсли Назначение = "ПолучитьИдентификаторЗадачи" Тогда
		ДобавитьПараметр(Параметры, "number", "Задача", "ПолучитьЗадачуПоНомеру");
		
	ИначеЕсли Назначение = "ПолучитьИдентификаторЗаявки" Тогда
		ДобавитьПараметр(Параметры, "number", "Заявка", "ПолучитьЗаявкуПоНомеру");
		
	ИначеЕсли Назначение = "ПолучитьИдентификаторВнутреннихТрудозатрат" Тогда
		ДобавитьПараметр(Параметры, "number", "ВнутренниеТрудозатраты", "ПолучитьВнутренниеТрудозатратыПоНомеру");
		
	ИначеЕсли Назначение = "ПолучитьДанныеЗадачи" Тогда
		ДобавитьПараметр(Параметры, "include", "Включить", , Ложь);
		
	ИначеЕсли Назначение = "ПолучитьДанныеЗаявки" Тогда
		ДобавитьПараметр(Параметры, "include", "Включить", , Ложь);
		
	ИначеЕсли Назначение = "ПолучитьФайлыОбъекта" Тогда
		ДобавитьПараметр(Параметры, "archive", "Архивный", , Ложь);
		
	ИначеЕсли Назначение = "ДелегироватьЗаявку" Тогда
		ДобавитьПараметр(Параметры, "newAuthor", "НовыйАвтор", "ПолучитьПользователя");
		
	ИначеЕсли Назначение = "Комментарии" Тогда
		ДобавитьПараметр(Параметры, "user", "Пользователь", "ПолучитьПользователя", ЭтоСлужебныйПользователь, ПараметрыСеанса.ТекущийПользователь);
		ДобавитьПараметр(Параметры, "objectType", "Тип");
		ДобавитьПараметр(Параметры, "objectID", "Ссылка", "ПолучитьСсылкуНаОбъект");
		ДобавитьПараметр(Параметры, "page", "НомерСтраницы", , Ложь, 1);
	
	ИначеЕсли Назначение = "ПолучитьКомментарииФильтра" Тогда
		ДобавитьПараметр(Параметры, "user", "Пользователь", "ПолучитьПользователя", ЭтоСлужебныйПользователь, ПараметрыСеанса.ТекущийПользователь);
		ДобавитьПараметр(Параметры, "objectType", "Тип");
		ДобавитьПараметр(Параметры, "objectID", "Ссылка", "ПолучитьСсылкуНаОбъект");
		ДобавитьПараметр(Параметры, "filter", "Фильтр");

	ИначеЕсли Назначение = "ПолучитьКомментарииВетки" Тогда
		ДобавитьПараметр(Параметры, "user", "Пользователь", "ПолучитьПользователя", ЭтоСлужебныйПользователь, ПараметрыСеанса.ТекущийПользователь);
		ДобавитьПараметр(Параметры, "id", "ИдентификаторРодителя");

	ИначеЕсли Назначение = "ДобавитьКомментарийСтарый" Тогда
		ДобавитьПараметр(Параметры, "ad-user-guid", "Автор", "ПолучитьПользователяAD", ЭтоСлужебныйПользователь, ПараметрыСеанса.ТекущийПользователь);
		ДобавитьПараметр(Параметры, "task", "Задача", "ПолучитьЗадачуПоНомеру");
		ДобавитьПараметр(Параметры, "comment", "Комментарий");
		
	ИначеЕсли Назначение = "ДобавитьКомментарий" Тогда
		ДобавитьПараметр(Параметры, "comment", "Комментарий");
		ДобавитьПараметр(Параметры, "public", "Общедоступный", "ПреобразоватьБулево", Ложь, Истина);
		ДобавитьПараметр(Параметры, "important", "Важный", "ПреобразоватьБулево", Ложь, Ложь);
		ДобавитьПараметр(Параметры, "parent", "ИдентификаторРодителя", , Ложь);

	ИначеЕсли Назначение = "ИзменитьКомментарий" Тогда
		ДобавитьПараметр(Параметры, "id", "Идентификатор");
		ДобавитьПараметр(Параметры, "comment", "Комментарий");
		ДобавитьПараметр(Параметры, "fileId", "ПрикрепленныеФайлы", "ПолучитьСсылкиНафайлы", Ложь);
		ДобавитьПараметр(Параметры, "public", "Общедоступный", "ПреобразоватьБулево", Ложь, Истина);

	ИначеЕсли Назначение = "ПометкаКомментария" Тогда		
		ДобавитьПараметр(Параметры, "id", "Идентификатор");
		ДобавитьПараметр(Параметры, "type", "Метка");
		
	ИначеЕсли Назначение = "УдалитьКомментарий" Тогда		
		ДобавитьПараметр(Параметры, "id", "Идентификатор");
		
	ИначеЕсли Назначение = "ОбновитьДатыПубликацииЗадач" Тогда
		ДобавитьПараметр(Параметры, "publication_date", "ДатаПубликации", "ПрочитатьДату");
		ДобавитьПараметр(Параметры, "tasks", "Задачи", "ПолучитьЗадачиНаПубликацию");
		ДобавитьПараметр(Параметры, "sender", "Отправитель", , Ложь, "");
		
	ИначеЕсли Назначение = "ГруппыЗаказчиков" Тогда 	
		ДобавитьПараметр(Параметры, "direction", "Направление", "ПолучитьНаправление");
		ДобавитьПараметр(Параметры, "system", "Система", "ПолучитьСистему");
		
	ИначеЕсли Назначение = "СписокСистем" Тогда
		ДобавитьПараметр(Параметры, "direction", "Направление", "ПолучитьНаправление", Ложь);
		ДобавитьПараметр(Параметры, "product", "Продукт", "ПолучитьПродукт", Ложь);
		ДобавитьПараметр(Параметры, "variant", "ВидОчереди", "ПолучитьВидОчереди", Ложь, Перечисления.ВидыОчереди.ПустаяСсылка());
		
	ИначеЕсли Назначение = "СписокПродуктов" Тогда	
		ДобавитьПараметр(Параметры, "variant", "ВидОчереди", "ПолучитьВидОчереди");
		
	ИначеЕсли Назначение = "ДобавитьЗадачуВСпринт" Тогда
		ДобавитьПараметр(Параметры, "id", "Задача", "ПолучитьЗадачу");
		ДобавитьПараметр(Параметры, "plan", "ПлановоеВремя", , Ложь, 0);
		ДобавитьПараметр(Параметры, "plan_test", "ПлановоеВремяТестирования", , Ложь, 0);
		
	ИначеЕсли Назначение = "ДобавитьStoryPointВЗадачу" Тогда
		ДобавитьПараметр(Параметры, "plan", "ПлановоеВремя");
		
	ИначеЕсли Назначение = "УдалитьЗадачуИзСпринта" Тогда
		ДобавитьПараметр(Параметры, "id", "Задача", "ПолучитьЗадачу");
		
	ИначеЕсли Назначение = "ПолучитьЗадачиЗаявки" Тогда
		ДобавитьПараметр(Параметры, "system", "СистемаУчета", "ПолучитьСистему", Ложь);
	КонецЕсли; // BSLLS:IfElseIfEndsWithElse-off
	// BSLLS:LineLength-on
	// BSLLS:DuplicateStringLiteral-on
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьПараметры(Знач ПараметрыЗапроса, Знач Назначение, Знач ЭтоСлужебныйПользователь = Ложь)
	
	Результат = Новый Структура("Параметры, СтруктураОтвета");
	
	ПроверяемыеПараметры = ПолучитьПроверяемыеПараметры(Назначение, ЭтоСлужебныйПользователь);
	СтруктураПараметров = Новый Структура;
	ПромежуточныеПараметры = Новый Структура;
	
	ШаблонОбработкиПараметра = "РезультатВыполнения = %1(ПромежуточныеПараметры, Параметр.Представление, Параметр.Имя)";
	
	Для Каждого Параметр Из ПроверяемыеПараметры Цикл
		ЗначениеПараметра = ПараметрыЗапроса.Получить(Параметр.Имя);
		
		Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			Если Параметр.Обязательный Тогда
				Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(16, , Параметр.Имя);
				Возврат Результат;
			Иначе
				СтруктураПараметров.Вставить(Параметр.Представление, Параметр.ЗначениеПоУмолчанию);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ПромежуточныеПараметры.Вставить(Параметр.Представление, ЗначениеПараметра);
		
		Если ЗначениеЗаполнено(Параметр.Метод) Тогда
			РезультатВыполнения = Неопределено;
			ИсполняемыйКод = СтрШаблон(ШаблонОбработкиПараметра, Параметр.Метод);
			Выполнить(ИсполняемыйКод);
			
			Если РезультатВыполнения.Значение = Неопределено Тогда
				Результат.СтруктураОтвета = РезультатВыполнения.СтруктураОтвета;
				Возврат Результат;
			КонецЕсли;
			
			СтруктураПараметров.Вставить(Параметр.Представление, РезультатВыполнения.Значение);
		Иначе
			СтруктураПараметров.Вставить(Параметр.Представление, ЗначениеПараметра);
		КонецЕсли;
	КонецЦикла;

	Результат.Параметры = СтруктураПараметров;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПараметрыТелаЗапроса(Знач Запрос, Знач Метод, Знач ЭтоСлужебныйПользователь = Ложь)
	
	Результат = Новый Структура("Параметры, СтруктураОтвета");
	
	ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
	
	Если ЗначениеЗаполнено(ТелоЗапроса) Тогда
		РезультатОбработки = ОбработатьJSON(ТелоЗапроса, Истина);
		
		Если РезультатОбработки.Успешно Тогда
			Результат = ПолучитьПараметры(РезультатОбработки.Данные, Метод, ЭтоСлужебныйПользователь);
		Иначе
			Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(8, , РезультатОбработки.ОписаниеОшибки);
		КонецЕсли;
	Иначе
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(7);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка параметров

Функция НайтиПользователяПоПочте(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Результат = Новый Структура("Значение, СтруктураОтвета");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Почта = &ПочтаИсполнителя";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПочтаИсполнителя", Параметры[ПредставлениеПараметра]);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат.Значение = Выборка.Ссылка;
	Иначе
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(3);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Функция ПолучитьВидДеятельности(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Возврат ПолучитьСсылкуТипа(Параметры[ПредставлениеПараметра], Тип("СправочникСсылка.ВидыДеятельности"), ИмяПараметра);
	
КонецФункции

Функция ПолучитьВидОчереди(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Результат = Новый Структура("Значение, СтруктураОтвета");
	
	Попытка
		Результат.Значение = XMLЗначение(Тип("ПеречислениеСсылка.ВидыОчереди"), Параметры[ПредставлениеПараметра]);
	Исключение
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(15, , ИмяПараметра);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВидПроцесса(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Возврат ПолучитьСсылкуТипа(Параметры[ПредставлениеПараметра], Тип("ПеречислениеСсылка.ВидыПроцессов"), ИмяПараметра);
	
КонецФункции

Функция ПолучитьГруппуЗаказчиков(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Возврат ПолучитьСсылкуТипа(Параметры[ПредставлениеПараметра], Тип("СправочникСсылка.ГруппыЗаказчиковНаправлений"), ИмяПараметра);
	
КонецФункции

Функция ПолучитьДокументТрудозатраты(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Возврат ПолучитьСсылкуТипа(Параметры[ПредставлениеПараметра], Тип("ДокументСсылка.Трудозатраты"), ИмяПараметра);
	
КонецФункции

Функция ПолучитьВнутренниеТрудозатратыПоНомеру(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Возврат ПолучитьСсылкуОбъектаПоНомеру(Документы.ВнутренниеТрудозатраты, Параметры[ПредставлениеПараметра], ИмяПараметра);
	
КонецФункции

Функция ПолучитьВнутреннееЗадание(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Возврат ПолучитьСсылкуТипа(Параметры[ПредставлениеПараметра], Тип("ДокументСсылка.ВнутреннееЗадание"), ИмяПараметра);
	
КонецФункции

Функция ПолучитьЗадачиНаПубликацию(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Результат = Новый Структура("Значение, СтруктураОтвета");
	
	ОписаниеТипаДата = ОбщегоНазначенияКлиентСервер.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
	ОписаниеТипаСтрока = ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(0);
	
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("Задача", Новый ОписаниеТипов("ДокументСсылка.Задача"));
	Данные.Колонки.Добавить("ДатаИсторииХранилища", ОписаниеТипаДата);
	Данные.Колонки.Добавить("Идентификатор", ОписаниеТипаСтрока);
	Данные.Колонки.Добавить("Комментарий", ОписаниеТипаСтрока);
	Данные.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
	
	ПараметрОбработан = Ложь;
	
	Для Каждого ЭлементКоллекции Из Параметры[ПредставлениеПараметра] Цикл
		ИдентификаторЗадачи = ЭлементКоллекции.Получить("id");
		ДатаПубликации = ЭлементКоллекции.Получить("date");
		Комментарий = ЭлементКоллекции.Получить("comment");
		
		Результат = ПолучитьСсылкуТипа(ИдентификаторЗадачи, Тип("ДокументСсылка.Задача"), "id");
		Если Результат.Значение = Неопределено Тогда
			ПозицияРазделителя = СтрНайти(ИдентификаторЗадачи, ":") + 1;
			ИсходныйНомерЗадачи = Сред(ИдентификаторЗадачи, ПозицияРазделителя, СтрДлина(ИдентификаторЗадачи) - 1);
			
			Результат = ПолучитьСсылкуПоНомеруЗадачи(ИсходныйНомерЗадачи);
		КонецЕсли;
		
		НоваяСтрока = Данные.Добавить();
		
		Если Результат.Значение = Неопределено ИЛИ ДатаПубликации = Неопределено Тогда
			НоваяСтрока.Идентификатор = ИдентификаторЗадачи;
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока.Задача = Результат.Значение;
		НоваяСтрока.ДатаИсторииХранилища = XMLЗначение(Тип("Дата"), ДатаПубликации);
		НоваяСтрока.Комментарий = Комментарий;
		НоваяСтрока.Обработано = Истина;
		
		ПараметрОбработан = Истина;
	КонецЦикла;
	
	Если ПараметрОбработан Тогда
		Результат.Значение = Данные;
	Иначе
		ТекстСообщения = "Не удалось найти задачи по переданным идентификаторам.";
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(20, , ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗадачу(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Возврат ПолучитьСсылкуТипа(Параметры[ПредставлениеПараметра], Тип("ДокументСсылка.Задача"), ИмяПараметра);
	
КонецФункции

Функция ПолучитьЗадачуПоНомеру(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Возврат ПолучитьСсылкуОбъектаПоНомеру(Документы.Задача, Параметры[ПредставлениеПараметра], ИмяПараметра);
	
КонецФункции

Функция ПолучитьЗаявку(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Возврат ПолучитьСсылкуТипа(Параметры[ПредставлениеПараметра], Тип("ДокументСсылка.ЗаявкаНаРазработку"), ИмяПараметра);
	
КонецФункции

Функция ПолучитьЗаявкуПоНомеру(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Возврат ПолучитьСсылкуОбъектаПоНомеру(Документы.ЗаявкаНаРазработку, Параметры[ПредставлениеПараметра], ИмяПараметра);
	
КонецФункции

Функция ПолучитьИнструмент(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Возврат ПолучитьСсылкуТипа(Параметры[ПредставлениеПараметра], Тип("СправочникСсылка.ИнструментыСистемы"), ИмяПараметра);
	
КонецФункции

Функция ПолучитьКарточкуКанбана(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Возврат ПолучитьСсылкуТипа(Параметры[ПредставлениеПараметра], Тип("СправочникСсылка.КарточкаКанбан"), ИмяПараметра);
	
КонецФункции

Функция ПолучитьКлючОчереди(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Возврат ПолучитьСсылкуТипа(Параметры[ПредставлениеПараметра], Тип("СправочникСсылка.КлючОчереди"), ИмяПараметра);
	
КонецФункции

Функция ПолучитьКоличество(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Результат = ПривестиКЧислу(Параметры[ПредставлениеПараметра]);
	
	Если НЕ ЗначениеЗаполнено(Результат.Значение) Тогда
		Результат.Значение = Неопределено;
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(15, , ИмяПараметра);
	КонецЕсли;
	
	Если Результат.Значение > 1000 Тогда
		Результат.Значение = Неопределено;
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(2, , "Количество выгружаемых заявок не может превышать 1000.");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКоличествоПропускаемых(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Возврат ПривестиКЧислу(Параметры[ПредставлениеПараметра]);
	
КонецФункции

Функция ПолучитьМассивЗадачДляДайджеста(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
		
	Результат = Новый Структура("Значение, СтруктураОтвета");
	
	ПараметрЗадачи = Параметры[ПредставлениеПараметра];
	
	Если ТипЗнч(ПараметрЗадачи) = Тип("Массив") Тогда
		Данные = Новый Массив;
		ТипЗадача = Тип("ДокументСсылка.Задача");
		
		Для Каждого Строка Из ПараметрЗадачи Цикл
			РезультатСсылка = ПолучитьСсылкуТипа(Строка.Получить("Задача"), ТипЗадача, ИмяПараметра);
			
			Если РезультатСсылка.Значение = Неопределено Тогда
				Возврат РезультатСсылка;
			КонецЕсли;
			
			РезультатДата = ПрочитатьДату(Строка, "ДатаДобавления", ИмяПараметра);
			
			Если РезультатДата.Значение = Неопределено Тогда
				Возврат РезультатДата;
			КонецЕсли;
			
			ДанныеЗадачи = Новый Структура("Задача, ДатаДобавления", РезультатСсылка.Значение, РезультатДата.Значение);
			Данные.Добавить(ДанныеЗадачи);
		КонецЦикла;	
		
		Результат.Значение = Данные;
	Иначе
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(15, , ИмяПараметра);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНазначение(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Возврат ПолучитьСсылкуТипа(Параметры[ПредставлениеПараметра], Тип("СправочникСсылка.НазначенияЗадач"), ИмяПараметра);
	
КонецФункции

Функция ПолучитьНаправление(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Возврат ПолучитьСсылкуТипа(Параметры[ПредставлениеПараметра], Тип("СправочникСсылка.НаправленияРазработки"), ИмяПараметра);
	
КонецФункции

Функция ПолучитьПользователя(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Возврат ПолучитьСсылкуТипа(Параметры[ПредставлениеПараметра], Тип("СправочникСсылка.Пользователи"), ИмяПараметра);
	
КонецФункции

Функция ПолучитьПользователяAD(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Результат = Новый Структура("Значение, СтруктураОтвета");
	Пользователь = Справочники.Пользователи.НайтиПоИдентификаторуActiveDirectory(Параметры[ПредставлениеПараметра]);
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Результат.Значение = Пользователь;
	Иначе
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(15, , ИмяПараметра);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПричинуИзмененияСтатуса(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Возврат ПолучитьСсылкуТипа(Параметры[ПредставлениеПараметра], Тип("СправочникСсылка.ПричиныИзмененияСтатусов"), ИмяПараметра);
	
КонецФункции

Функция ПолучитьПродукт(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Возврат ПолучитьСсылкуТипа(Параметры[ПредставлениеПараметра], Тип("СправочникСсылка.Продукты"), ИмяПараметра);
	
КонецФункции

Функция ПолучитьСистему(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Возврат ПолучитьСсылкуТипа(Параметры[ПредставлениеПараметра], Тип("СправочникСсылка.СистемыУчета"), ИмяПараметра);
	
КонецФункции

Функция ПолучитьСистемыДляДайджеста(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Результат = Новый Структура("Значение, СтруктураОтвета");
	
	Данные = Новый Массив;
	ТипСистема = Тип("СправочникСсылка.СистемыУчета");
	
	ИдентификаторыСистем = СтрРазделить(Параметры[ПредставлениеПараметра], "; ", Ложь);
	Для Каждого Идентификатор Из ИдентификаторыСистем Цикл
		РезультатСистема = ПолучитьСсылкуТипа(Идентификатор, ТипСистема, ИмяПараметра);
		
		Если РезультатСистема.Значение = Неопределено Тогда
			Возврат РезультатСистема;
		КонецЕсли;
		
		Данные.Добавить(РезультатСистема.Значение);
	КонецЦикла;
	
	Результат.Значение = Данные;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСистемыРазработки(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Результат = Новый Структура("Значение, СтруктураОтвета");
	СистемыРазработки = Новый Массив;
	
	Для Каждого Система Из Параметры[ПредставлениеПараметра] Цикл
		ПромежуточныйРезультат = ПолучитьСсылкуТипа(Система, Тип("СправочникСсылка.СистемыУчета"), ИмяПараметра);
		
		Если ПромежуточныйРезультат.Значение <> Неопределено Тогда
			СистемыРазработки.Добавить(ПромежуточныйРезультат.Значение);
		Иначе
			Результат.СтруктураОтвета = ПромежуточныйРезультат.СтруктураОтвета;
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Значение = СистемыРазработки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСписокУчастников(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Результат = Новый Структура("Значение, СтруктураОтвета");
	
	ОписаниеУчастников = Параметры[ПредставлениеПараметра];
	
	Если ТипЗнч(ОписаниеУчастников) <> Тип("Массив") Тогда
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(15, , ИмяПараметра);
		Возврат Результат;
	КонецЕсли;
	
	Участники = Новый ТаблицаЗначений;
	Участники.Колонки.Добавить("ПочтаПользователя", ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(50));
	Участники.Колонки.Добавить("Активный", Новый ОписаниеТипов("Булево"));
	
	Для Каждого Строка Из ОписаниеУчастников Цикл
		ПочтаПользователя = Строка.Получить("user");
		
		Если НЕ ЗначениеЗаполнено(ПочтаПользователя) Тогда
			Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(15, , ИмяПараметра);
			Возврат Результат;
		КонецЕсли;
		
		НоваяСтрока = Участники.Добавить();
		НоваяСтрока.ПочтаПользователя = ПочтаПользователя;
		НоваяСтрока.Активный = Строка.Получить("active");
	КонецЦикла;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Участники.ПочтаПользователя КАК ПочтаПользователя,
		|	Участники.Активный КАК Активный
		|ПОМЕСТИТЬ Участники
		|ИЗ
		|	&Участники КАК Участники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь,
		|	Участники.Активный КАК Активный
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Участники КАК Участники
		|		ПО Пользователи.Почта = Участники.ПочтаПользователя";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Участники", Участники);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Результат.Значение = РезультатЗапроса.Выгрузить();
	Иначе
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(15, , ИмяПараметра);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСсылкиНафайлы(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Результат = Новый Структура("Значение, СтруктураОтвета");
	
	СтроковыеИдентификаторы = СтрРазделить(Параметры[ПредставлениеПараметра], ",", Ложь);
	
	СписокФайлов = Новый Массив;
	
	ТипОбъекта = Тип("СправочникСсылка.Файлы");
	Для Каждого Идентификатор Из СтроковыеИдентификаторы Цикл
		РезультатПолучениеСсылки = ПолучитьСсылкуТипа(СокрЛП(Идентификатор), ТипОбъекта, ИмяПараметра);
		
		Если ЗначениеЗаполнено(РезультатПолучениеСсылки.Значение) Тогда
			СписокФайлов.Добавить(РезультатПолучениеСсылки.Значение);
		Иначе
			Возврат РезультатПолучениеСсылки;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Значение = СписокФайлов;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСсылкуНаОбъект(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Результат = Новый Структура("Значение, СтруктураОтвета");
	
	ТипОбъекта = ПолучитьТипОбъекта(Параметры.Тип);
	
	Если ТипОбъекта = Неопределено Тогда
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(5);
		Возврат Результат;
	КонецЕсли;
	
	Возврат ПолучитьСсылкуТипа(Параметры[ПредставлениеПараметра], ТипОбъекта, ИмяПараметра);
	
КонецФункции

Функция ПолучитьСсылкуНаОбъектПоКоду(МенеджерОбъекта, Код, ИмяПараметра)
	
	Результат = Новый Структура("Значение, СтруктураОтвета");
	
	СсылкаНаОбъект = МенеджерОбъекта.НайтиПоКоду(Код);
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Результат.Значение = СсылкаНаОбъект;
	Иначе
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(15, , ИмяПараметра);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСсылкуОбъектаПоНомеру(МенеджерОбъекта, Номер, ИмяПараметра)
	
	Результат = Новый Структура("Значение, СтруктураОтвета");
	
	СсылкаНаОбъект = МенеджерОбъекта.НайтиПоНомеру(Номер);
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Результат.Значение = СсылкаНаОбъект;
	Иначе
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(15, , ИмяПараметра);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСсылкуТипа(Знач GUID, Знач ТипСсылки, Знач Поле)
	
	Результат = Новый Структура("Значение, СтруктураОтвета");
	
	Попытка
		Значение = XMLЗначение(ТипСсылки, GUID);
	Исключение
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(15, , Поле);
	КонецПопытки;
	
	Если Значение <> Неопределено Тогда
		Результат = ПроверитьСуществованиеСсылки(Значение, ТипСсылки, Поле);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтатус(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Возврат ПолучитьСсылкуТипа(Параметры[ПредставлениеПараметра], Тип("СправочникСсылка.СтатусыОбъектов"), ИмяПараметра);
	
КонецФункции

Функция ПолучитьСтатусИзЭтапа(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Этап = ПолучитьСсылкуТипа(Параметры[ПредставлениеПараметра], Тип("СправочникСсылка.ЭтапыКанбана"), ИмяПараметра);
	
	Если НЕ ЗначениеЗаполнено(Этап.Значение) Тогда
		Возврат Этап;
	КонецЕсли;
	
	Возврат СтатусЭтапа(Этап.Значение);	
	
КонецФункции

Функция ПолучитьСтатусДляБСЗ(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Результат = Новый Структура("Значение, СтруктураОтвета");
	
	Попытка
		Статус = Справочники.СтатусыОбъектов[Параметры[ПредставлениеПараметра]];
	Исключение
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(15, , ИмяПараметра);
		Возврат Результат;
	КонецПопытки;
	
	ДоступныеСтатусы = Новый СписокЗначений;
	РаботаСПроцессами.ЗаполнитьСтатусыДляФормыБыстрогоСозданияЗадачи(ДоступныеСтатусы);
	
	Если ДоступныеСтатусы.НайтиПоЗначению(Статус) <> Неопределено Тогда
		Результат.Значение = Статус;
	Иначе
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(17, , "для быстрого создания задачи этот статус недоступен.");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТеги(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Результат = Новый Структура("Значение, СтруктураОтвета");
	
	Теги = СтрРазделить(Параметры[ПредставлениеПараметра], ",", Ложь);
	Результат.Значение = Новый СписокЗначений;
	
	Для Каждого Тег Из Теги Цикл
		ТегСсылка = Справочники.Теги.НайтиПоНаименованию(СокрЛП(Тег), Истина);
		
		Если ЗначениеЗаполнено(ТегСсылка) Тогда
			Результат.Значение.Добавить(ТегСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Результат.Значение) Тогда
		Результат.Значение = Неопределено;
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(15, , "tag. Не удалось распознать теги.");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТипыАссетов(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	ЗначенияСтроки = СтрРазделить(Параметры[ПредставлениеПараметра], ", ", Ложь);
	ТипыАссетов = Новый Массив;

	Для Каждого Значение Из ЗначенияСтроки Цикл
		Попытка
			ТипАссетов = Справочники.ТипыАссетов[Значение];
		Исключение
			Продолжить;
		КонецПопытки;
		
		ТипыАссетов.Добавить(ТипАссетов);
	КонецЦикла;
	
	Возврат Новый Структура("Значение, СтруктураОтвета", ТипыАссетов);
	
КонецФункции

Функция ПолучитьТипОбъекта(Знач Тип)
	
	ТипОбъекта = Неопределено;
	
	Тип = НРег(Тип);
	
	Если Тип = "task" Тогда
		ТипОбъекта = Тип("ДокументСсылка.Задача");
	ИначеЕсли Тип = "devrequest" Тогда
		ТипОбъекта = Тип("ДокументСсылка.ЗаявкаНаРазработку");
	ИначеЕсли Тип = "internalworks" Тогда
		ТипОбъекта = Тип("ДокументСсылка.ВнутренниеТрудозатраты");
	ИначеЕсли Тип = "internaltask" Тогда
		ТипОбъекта = Тип("ДокументСсылка.ВнутреннееЗадание");
	ИначеЕсли Тип = "project" Тогда
		ТипОбъекта = Тип("СправочникСсылка.Проекты");
	КонецЕсли; // BSLLS:IfElseIfEndsWithElse-off
	
	Возврат ТипОбъекта;
	
КонецФункции

Функция ПолучитьТипКанбана(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Результат = Новый Структура("Значение, СтруктураОтвета");
	
	Попытка
		Результат.Значение = XMLЗначение(Тип("ПеречислениеСсылка.ТипыКанбана"), Параметры[ПредставлениеПараметра]);
	Исключение
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(15, , ИмяПараметра);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьФилиал(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Возврат ПолучитьСсылкуТипа(Параметры[ПредставлениеПараметра], Тип("СправочникСсылка.Филиалы"), ИмяПараметра);
	
КонецФункции

Функция ПолучитьЮридическоеЛицо(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Возврат ПолучитьСсылкуТипа(Параметры[ПредставлениеПараметра], Тип("СправочникСсылка.ЮридическиеЛица"), ИмяПараметра);
	
КонецФункции

Функция ПолучитьЭтапКанбана(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Возврат ПолучитьСсылкуТипа(Параметры[ПредставлениеПараметра], Тип("СправочникСсылка.ЭтапыКанбана"), ИмяПараметра);
	
КонецФункции

Функция ПреобразоватьБулево(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Результат = Новый Структура("Значение, СтруктураОтвета");
	
	Значение = СокрЛП(Параметры[ПредставлениеПараметра]);
	Если Значение = "true" Тогда
		Результат.Значение = Истина;
	ИначеЕсли Значение = "false" Тогда
		Результат.Значение = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат.Значение) Тогда
		Результат.Значение = Неопределено;
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(15, , СтрШаблон("%1. Не удалось получить булево.", ИмяПараметра));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПривестиКЧислу(Знач Значение)
	
	Результат = Новый Структура("Значение, СтруктураОтвета");
	
	ОписаниеТипаЧисло = ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(10);
	Результат.Значение = ОписаниеТипаЧисло.ПривестиЗначение(Значение);
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьЗначенияФильтра(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Результат = Новый Структура("Значение, СтруктураОтвета");
	Результат.Значение = НРег(Параметры[ПредставлениеПараметра]);
	
	ДоступныеЗначения = Новый Массив;
	ДоступныеЗначения.Добавить("open");
	ДоступныеЗначения.Добавить("closed");
	
	Если ДоступныеЗначения.Найти(Результат.Значение) = Неопределено Тогда
		Результат.Значение = Неопределено;
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(15, , "filter. Параметр может принимать значения open и closed");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьСуществованиеСсылки(Знач Значение, Знач ТипСсылки, Знач Поле) Экспорт
	
	Результат = Новый Структура("Значение, СтруктураОтвета", Значение);
	
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипСсылки);
	
	Если Метаданные.Перечисления.Содержит(МетаданныеОбъекта) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка,
		|	Таблица.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	&Таблица КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица", МетаданныеОбъекта.ПолноеИмя());
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Значение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если Выборка.ПометкаУдаления Тогда
			ТекстОшибки = СтрШаблон("Некорректно заполнен параметр ""%1"", объект помечен на удаление.", Поле);
			
			Результат.Значение = Неопределено;
			Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(2, , ТекстОшибки);
		КонецЕсли;
	Иначе
		ТекстОшибки = СтрШаблон("Некорректно заполнен параметр ""%1"", объект отсутствует в базе данных.", Поле);
		
		Результат.Значение = Неопределено;
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(2, , ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПрочитатьДату(Знач Параметры, Знач ПредставлениеПараметра, Знач ИмяПараметра)
	
	Результат = Новый Структура("Значение, СтруктураОтвета");
	
	Попытка
		Результат.Значение = ПрочитатьДатуJSON(Параметры[ПредставлениеПараметра], ФорматДатыJSON.ISO);
	Исключение
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(15, , ИмяПараметра);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ДобавитьТрудозатраты(Знач Ссылка, Знач Исполнитель, Знач ДанныеЗапроса)
	
	Если ТипЗнч(Ссылка) <> Тип("ДокументСсылка.ВнутренниеТрудозатраты") Тогда
		Направление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Направление");
		ДанныеВидовДеятельности = ПолучитьВидыДеятельности(Исполнитель, Направление, ДанныеЗапроса.ВидДеятельности);
		
		Если ДанныеВидовДеятельности.ДанныеВидаДеятельности = Неопределено Тогда
			Возврат ПолучитьСтруктуруОтвета(9);
		КонецЕсли;
		
		ВидДеятельности = ДанныеВидовДеятельности.ДанныеВидаДеятельности.ВидДеятельности;
		Услуга = ДанныеВидовДеятельности.ДанныеВидаДеятельности.Услуга;
	Иначе
		Результат = ПолучитьСсылкуТипа(ДанныеЗапроса.ВидДеятельности, Тип("СправочникСсылка.ВидыДеятельности"), "activityID");
		Если Результат.Значение = Неопределено Тогда
			Возврат Результат.СтруктураОтвета;
		КонецЕсли;
		
		ВидыДеятельности = ПолучитьВидыДеятельностиДляВнутреннихТрудозатрат();
		
		Если ВидыДеятельности.НайтиПоЗначению(Результат.Значение) = Неопределено Тогда
			Возврат ПолучитьСтруктуруОтвета(9);
		КонецЕсли;
		
		ВидДеятельности = Результат.Значение;
		Услуга = Неопределено;
	КонецЕсли;
	
	ДанныеЗаполнения = Документы.Трудозатраты.НовыеПараметрыЗаполненияТрудозатрат();
	ДанныеЗаполнения.Дата = ?(ЗначениеЗаполнено(ДанныеЗапроса.Дата), ДанныеЗапроса.Дата, ТекущаяДатаСеанса());
	ДанныеЗаполнения.Объект = Ссылка;
	ДанныеЗаполнения.Затрата = ДанныеЗапроса.Длительность;
	ДанныеЗаполнения.ВидДеятельности = ВидДеятельности;
	ДанныеЗаполнения.Услуга = Услуга;
	ДанныеЗаполнения.Пользователь = Исполнитель;
	ДанныеЗаполнения.Направление = Направление;
	ДанныеЗаполнения.Автор = ПараметрыСеанса.ТекущийПользователь;
	ДанныеЗаполнения.Комментарий = ДанныеЗапроса.Комментарий;
	
	Попытка
		Документы.Трудозатраты.ДобавитьТрудозатраты(ДанныеЗаполнения);
		СтруктураОтвета = ПолучитьСтруктуруОтвета(0);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Пока ИнформацияОбОшибке.Причина <> Неопределено Цикл
			ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
		КонецЦикла;
		
		ТекстОшибки = ИнформацияОбОшибке.Описание;
		
		СтруктураОтвета = ПолучитьСтруктуруОтвета(10, , ТекстОшибки);
	КонецПопытки;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ИзменитьДатыПубликацииЗадач(Знач ТаблицаЗадач, Знач ДатаПубликации, Знач Отправитель)
	
	Если Отправитель = "ad" Тогда
		Система = "База AD";
	Иначе
		Система = "";
	КонецЕсли;
	
	НеобработанныеЗадачи = Новый Массив;
	
	ОпубликованныеЗадачи = Новый ТаблицаЗначений;
	ОпубликованныеЗадачи.Колонки.Добавить("Ссылка");
	ОпубликованныеЗадачи.Колонки.Добавить("НомерЗадачи");
	ОпубликованныеЗадачи.Колонки.Добавить("НаименованиеЗадачи");
	
	ДатаСтрокой = Формат(ДатаПубликации, "ДФ=dd.MM.yyyy");		
	
	ИсключаемыеСтатусы = Новый СписокЗначений;
	ИсключаемыеСтатусы.Добавить(Справочники.СтатусыОбъектов.Отклонен);
	ИсключаемыеСтатусы.Добавить(Справочники.СтатусыОбъектов.Решен);
	ИсключаемыеСтатусы.Добавить(Справочники.СтатусыОбъектов.Протестирован);
	ИсключаемыеСтатусы.Добавить(Справочники.СтатусыОбъектов.Приостановлен);
	
	#Область ТекстЗапроса
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаВнешнихДанных.Задача КАК Задача,
	|	ТаблицаВнешнихДанных.ДатаИсторииХранилища КАК ДатаИсторииХранилища,
	|	ТаблицаВнешнихДанных.Комментарий КАК Комментарий
	|ПОМЕСТИТЬ ТаблицаВнешнихДанных
	|ИЗ
	|	&ТаблицаВнешнихДанных КАК ТаблицаВнешнихДанных
	|ГДЕ
	|	ТаблицаВнешнихДанных.Обработано
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаВнешнихДанных.Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияПубликацииЗадач.Задача КАК Задача,
	|	ИсторияПубликацииЗадач.Период КАК Период
	|ПОМЕСТИТЬ ИсторияПубликации
	|ИЗ
	|	РегистрСведений.ИсторияПубликацииЗадач.СрезПоследних(
	|			,
	|			Задача В
	|				(ВЫБРАТЬ
	|					ТаблицаВнешнихДанных.Задача КАК Задача
	|				ИЗ
	|					ТаблицаВнешнихДанных КАК ТаблицаВнешнихДанных)) КАК ИсторияПубликацииЗадач
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВнешнихДанных.Задача КАК Задача,
	|	ТаблицаВнешнихДанных.ДатаИсторииХранилища КАК ДатаИсторииХранилища,
	|	ТаблицаВнешнихДанных.Комментарий КАК Комментарий,
	|	ДокументЗадача.СистемаУчета КАК СистемаУчета,
	|	ДокументЗадача.Статус КАК Статус
	|ПОМЕСТИТЬ ТаблицаДанныхЗадач
	|ИЗ
	|	ТаблицаВнешнихДанных КАК ТаблицаВнешнихДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО ТаблицаВнешнихДанных.Задача = ДокументЗадача.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсторияПубликации КАК ИсторияПубликацииЗадач
	|		ПО ТаблицаВнешнихДанных.Задача = ИсторияПубликацииЗадач.Задача
	|ГДЕ
	|	НЕ ДокументЗадача.Статус В (&ИсключаемыеСтатусы)
	|	И ЕСТЬNULL(ИсторияПубликацииЗадач.Период, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) <> &ДатаПубликации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаВнешнихДанных.Задача,
	|	ТаблицаВнешнихДанных.ДатаИсторииХранилища
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаВнешнихДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанныхЗадач.Задача КАК Задача,
	|	ТаблицаДанныхЗадач.ДатаИсторииХранилища КАК ДатаИсторииХранилища,
	|	ТаблицаДанныхЗадач.Комментарий КАК Комментарий,
	|	ТаблицаДанныхЗадач.СистемаУчета КАК СистемаУчета,
	|	ТаблицаДанныхЗадач.Статус КАК Статус
	|ПОМЕСТИТЬ ТаблицаЗадачДляОбработки
	|ИЗ
	|	ТаблицаДанныхЗадач КАК ТаблицаДанныхЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПубликацииЗадач КАК ИсторияПубликацииЗадач
	|		ПО ТаблицаДанныхЗадач.Задача = ИсторияПубликацииЗадач.Задача
	|			И ТаблицаДанныхЗадач.ДатаИсторииХранилища = ИсторияПубликацииЗадач.ДатаИсторииХранилища
	|ГДЕ
	|	ИсторияПубликацииЗадач.Задача ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗадачДляОбработки.Задача КАК Задача,
	|	ТаблицаЗадачДляОбработки.ДатаИсторииХранилища КАК ДатаИсторииХранилища,
	|	ТаблицаЗадачДляОбработки.Комментарий КАК Комментарий,
	|	ТаблицаЗадачДляОбработки.СистемаУчета КАК СистемаУчета,
	|	ТаблицаЗадачДляОбработки.Статус КАК Статус,
	|	ЕСТЬNULL(ЗначенияДополнительныхРеквизитовОбъектов.Значение, 0) КАК АвтоматическоеИзменениеСтатуса
	|ИЗ
	|	ТаблицаЗадачДляОбработки КАК ТаблицаЗадачДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияДополнительныхРеквизитовОбъектов КАК ЗначенияДополнительныхРеквизитовОбъектов
	|		ПО ТаблицаЗадачДляОбработки.СистемаУчета = ЗначенияДополнительныхРеквизитовОбъектов.Объект
	|			И (ЗначенияДополнительныхРеквизитовОбъектов.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДополнительныхРеквизитов.АвтоматическоеИзменениеСтатусаПослеОбновления))";
	#КонецОбласти
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаВнешнихДанных", ТаблицаЗадач);
	Запрос.УстановитьПараметр("ДатаПубликации", ДатаПубликации);
	Запрос.УстановитьПараметр("ИсключаемыеСтатусы", ИсключаемыеСтатусы);
	
	РезультатыЗапроса = Запрос.Выполнить();
	Выборка = РезультатыЗапроса.Выбрать();
	
	СтатусПубликация = Справочники.СтатусыОбъектов.Публикация;
	СтатусТестирование = Справочники.СтатусыОбъектов.Тестирование;
	
	// Значение Выборка.АвтоматическоеИзменениеСтатуса - дополнительный реквизит справочника Системы учета.
	// Используется для автоматического перевода задач по системе в статус тестирование при обновлении ИБ
	// 1 - Переводить задачу в статус "Тестирование" только если текущий статус "Публикация"
	// 2 - Переводить задачу в статус "Тестирование" из любого статуса (исключая статусы "Протестирован", "Решен" и "Приостановлен")
	
	Пока Выборка.Следующий() Цикл
		ЗадачаОбъект = Выборка.Задача.ПолучитьОбъект();
		БылиИзменения = Ложь;
		
		ТекстСообщения = СтрШаблон("Задача опубликована %1 в рабочей системе", ДатаСтрокой);
		Если ЗначениеЗаполнено(Выборка.Комментарий) Тогда
			Комментарий = СтрЗаменить(Выборка.Комментарий, Символы.ПС, "<br>"); 
			
			ТекстСообщения = СтрШаблон(
			"%1 с комментарием:<br>
			|%2", ТекстСообщения, Комментарий);
		КонецЕсли;	
		
		Если Выборка.АвтоматическоеИзменениеСтатуса = 1 И Выборка.Статус = СтатусПубликация
			ИЛИ Выборка.АвтоматическоеИзменениеСтатуса = 2 Тогда

			НовыйИсполнитель = РаботаСПроцессамиВызовСервера.ПолучитьНовогоИсполнителяЗадачи(ЗадачаОбъект, СтатусТестирование);
			
			ЗадачаОбъект.Статус = СтатусТестирование;
			ЗадачаОбъект.ДатаПоследнегоТестирования = ТекущаяДатаСеанса();
			ЗадачаОбъект.Назначена = НовыйИсполнитель;
			БылиИзменения = Истина;
			
			ЗадачаОбъект.ДополнительныеСвойства.Вставить("АвтоматическоеИзменениеСтатуса", Истина);
			
			Если ЗначениеЗаполнено(Система) Тогда
				НоваяСтрока = ОпубликованныеЗадачи.Добавить();
				НоваяСтрока.Ссылка = ЗадачаОбъект.Ссылка;
				НоваяСтрока.НомерЗадачи = ЗадачаОбъект.Номер;
				НоваяСтрока.НаименованиеЗадачи = ЗадачаОбъект.Наименование;
			КонецЕсли;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			Если БылиИзменения Тогда
				УстановитьПривилегированныйРежим(Истина);
				ЗадачаОбъект.Записать();
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			
			РегистрыСведений.Комментарии.Добавить(ЗадачаОбъект.Ссылка, , , ТекстСообщения, , Истина);
			РегистрыСведений.ИсторияПубликацииЗадач.Добавить(ЗадачаОбъект.Ссылка, ДатаПубликации, Выборка.ДатаИсторииХранилища);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтрШаблон("При изменении даты публикации задачи %1 возникла ошибка: %2.",
					ЗадачаОбъект.Номер, ОписаниеОшибки());
			
			НеобработанныеЗадачи.Добавить(ТекстОшибки);
		КонецПопытки;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Система) Тогда
		ОтправитьУведомление(Система, ОпубликованныеЗадачи, ДатаПубликации);
	КонецЕсли;
	
	Возврат НеобработанныеЗадачи;
	
КонецФункции

Функция ИзменитьСтатусОбъектаКанбан(Параметры)
	
	Статус = СтатусЭтапа(Параметры.Этап);
	Если Статус.Значение = Неопределено Тогда
		Возврат Статус.СтруктураОтвета;
	КонецЕсли;
	
	ПричиныИзмененияСтатуса = ПовторноеИспользованиеВызовСервера.ПолучитьПричиныИзмененияСтатуса(Статус.Значение);
	
	Если ПричиныИзмененияСтатуса <> Неопределено Тогда
		СвойстваПричинИзмененияСтатуса = Новый Соответствие;
		
		Если Параметры.ПричинаИзмененияСтатуса <> Неопределено Тогда
			ДанныеПричины = ПричиныИзмененияСтатуса.Найти(Параметры.ПричинаИзмененияСтатуса, "Ссылка");
			
			Если ДанныеПричины <> Неопределено Тогда
				СвойстваПричины = Новый Структура("НеобходимоОтправитьУведомление", ДанныеПричины.НеобходимоОтправитьУведомление);
				СвойстваПричинИзмененияСтатуса.Вставить(Параметры.ПричинаИзмененияСтатуса, СвойстваПричины);
				
				Если ДанныеПричины.ОбязательноеЗаполнениеКомментария И НЕ ЗначениеЗаполнено(Параметры.КомментарийСтатуса) Тогда
					Возврат ПолучитьСтруктуруОтвета(15, , "statusComment");
				КонецЕсли;
				
			Иначе
				Возврат ПолучитьСтруктуруОтвета(15, , "reason");
			КонецЕсли;
		Иначе
			Возврат ПолучитьСтруктуруОтвета(16, , "reason");
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Объект, "Направление, Статус");
	
	Если ЗначениеЗаполнено(Параметры.ВидДеятельности) И ЗначениеЗаполнено(Параметры.Трудозатраты) Тогда
		ДанныеВидовДеятельности = ПолучитьВидыДеятельности(ПараметрыСеанса.ТекущийПользователь,
			ДанныеЗадачи.Направление, Параметры.ВидДеятельности);
		
		Если ДанныеВидовДеятельности.ДанныеВидаДеятельности = Неопределено Тогда
			Возврат ПолучитьСтруктуруОтвета(9);
		КонецЕсли;
		
		Затраты = Параметры.Трудозатраты;
		ВидДеятельности = ДанныеВидовДеятельности.ДанныеВидаДеятельности.ВидДеятельности;
		Услуга = ДанныеВидовДеятельности.ДанныеВидаДеятельности.Услуга;
		КомментарийТрудозатрат = Параметры.Комментарий;
	Иначе
		Затраты = 0;
		ВидДеятельности = Неопределено;
		Услуга = Неопределено;
		КомментарийТрудозатрат = "";
	КонецЕсли;
	
	Трудозатраты = Новый Структура;
	Трудозатраты.Вставить("ЗатратыВремени", Затраты);
	Трудозатраты.Вставить("ВидДеятельности", ВидДеятельности);
	Трудозатраты.Вставить("Услуга", Услуга);
	Трудозатраты.Вставить("Комментарий", КомментарийТрудозатрат);
	
	КонечныйПорядок = Неопределено;
	Если Статус.Значение <> Справочники.СтатусыОбъектов.Решен 
		И Статус.Значение <> Справочники.СтатусыОбъектов.Отклонен
		И ЗначениеЗаполнено(Параметры.СмещаемыйОбъект) Тогда
		
		Данные = ПолучитьДанныеСмещения(Параметры.СмещаемыйОбъект, Параметры.Этап);

		Если Данные.Количество() > 0 Тогда
			КонечныйПорядок = Данные[0].Порядок;
			КлючДобавления = Данные[0].Ключ;
		КонецЕсли;
	КонецЕсли;
		
	ДанныеКомментария = РаботаСПроцессамиКлиентСервер.ПодготовитьКомментарийСтатуса(Параметры.КомментарийСтатуса,
	Параметры.ПубличныйКомментарий, Параметры.ПричинаИзмененияСтатуса, Строка(ДанныеЗадачи.Статус), Строка(Статус.Значение));
	ДанныеПеревода = РаботаСПроцессамиКлиентСервер.ПодготовитьДанныеИзмененияСтатуса(Трудозатраты, Параметры.Исполнитель,
		Параметры.ПричинаИзмененияСтатуса, ДанныеКомментария, СвойстваПричинИзмененияСтатуса);
	
	// TODO: при переводе с рабочего стола ЕстьНезакрытыйПериод всегда неопределено, возможно нужно допилить
	Данные = Новый Структура("Задача, Статус, ЕстьНезакрытыйПериод", Параметры.Объект, Статус.Значение);
	
	Попытка
		РаботаСПроцессамиВызовСервера.ОбновитьСтатусЗадачи(Данные, ДанныеПеревода);
		Успешно = Истина;
	Исключение
		Успешно = Ложь;
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("API.Изменение статуса канбан", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	КонецПопытки;
	
	Если Успешно Тогда		
		Если ЗначениеЗаполнено(КонечныйПорядок) Тогда
			РегистрыСведений.ОчередьКанбан.ВставитьВОчередь(Параметры.Объект, КлючДобавления, КонечныйПорядок);
		Иначе
			РегистрыСведений.ОчередьКанбан.Добавить(Параметры.объект, Перечисления.ВидыОчереди.Канбан, Параметры.Этап);
		КонецЕсли;
		
		СтруктураОтвета = ПолучитьСтруктуруОтвета(0);
	Иначе
		СтруктураОтвета = ПолучитьСтруктуруОтвета(2, , ТекстОшибки);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ИзменитьТрудозатраты(Знач Параметры, Знач ДанныеЗапроса, Знач Пользователь)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Трудозатраты.Ссылка КАК Ссылка,
		|	Трудозатраты.ПометкаУдаления КАК ПометкаУдаления,
		|	Трудозатраты.Пользователь КАК Пользователь,
		|	Трудозатраты.Направление КАК Направление,
		|	Трудозатраты.Объект КАК Объект
		|ИЗ
		|	Документ.Трудозатраты КАК Трудозатраты
		|ГДЕ
		|	Трудозатраты.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Параметры.Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ПолучитьСтруктуруОтвета(6);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если Выборка.Пользователь <> Пользователь Тогда
		Возврат ПолучитьСтруктуруОтвета(10, , "нельзя изменять трудозатраты других пользователей.");
	КонецЕсли;
	
	Если Выборка.ПометкаУдаления Тогда
		Возврат ПолучитьСтруктуруОтвета(10, , "трудозатраты были удалены ранее.");
	КонецЕсли;
	
	Если ТипЗнч(Выборка.Объект) <> Тип("ДокументСсылка.ВнутренниеТрудозатраты") Тогда
		ДанныеВидовДеятельности = ПолучитьВидыДеятельности(Пользователь, Выборка.Направление, ДанныеЗапроса.ВидДеятельности);
		
		Если ДанныеВидовДеятельности.ДанныеВидаДеятельности = Неопределено Тогда
			Возврат ПолучитьСтруктуруОтвета(9);
		КонецЕсли;
		
		ВидДеятельности = ДанныеВидовДеятельности.ДанныеВидаДеятельности.ВидДеятельности;
		Услуга = ДанныеВидовДеятельности.ДанныеВидаДеятельности.Услуга;
	Иначе
		Результат = ПолучитьСсылкуТипа(ДанныеЗапроса.ВидДеятельности, Тип("СправочникСсылка.ВидыДеятельности"), "activityID");
		Если Результат.Значение = Неопределено Тогда
			Возврат Результат.СтруктураОтвета;
		КонецЕсли;
		
		ВидыДеятельности = ПолучитьВидыДеятельностиДляВнутреннихТрудозатрат();
		
		Если ВидыДеятельности.НайтиПоЗначению(Результат.Значение) = Неопределено Тогда
			Возврат ПолучитьСтруктуруОтвета(9);
		КонецЕсли;
		
		ВидДеятельности = Результат.Значение;
		Услуга = Неопределено;
	КонецЕсли;
	
	ТрудозатратыОбъект = Выборка.Ссылка.ПолучитьОбъект();
	ТрудозатратыОбъект.ВидДеятельности = ВидДеятельности;
	ТрудозатратыОбъект.Услуга = Услуга;
	ТрудозатратыОбъект.Затрата = ДанныеЗапроса.Длительность;
	ТрудозатратыОбъект.Дата = ?(ЗначениеЗаполнено(ДанныеЗапроса.Дата), ДанныеЗапроса.Дата, ТекущаяДатаСеанса());
	ТрудозатратыОбъект.Комментарий = ДанныеЗапроса.Комментарий;
	
	Попытка
		ТрудозатратыОбъект.Записать(РежимЗаписиДокумента.Проведение);
		СтруктураОтвета = ПолучитьСтруктуруОтвета(0);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Пока ИнформацияОбОшибке.Причина <> Неопределено Цикл
			ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
		КонецЦикла;
		
		ТекстОшибки = ИнформацияОбОшибке.Описание;
		
		СтруктураОтвета = ПолучитьСтруктуруОтвета(10, , ТекстОшибки);
	КонецПопытки;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ИзменитьПорядокЗаявокВОчереди(Знач Параметры, Знач ДанныеЗапроса) 
	
	//ДанныеОбъектов = ПолучитьПорядокЗаявок(ДанныеЗапроса.ПеремещаемыйОбъект, ДанныеЗапроса.СмещаемыйОбъект, ДанныеЗапроса.Этап);
	
	ВидОчереди = Параметры.ВидОчереди;
	
	Если ВидОчереди = Перечисления.ВидыОчереди.НаправлениеСистемаГруппаЗаказчиков Тогда
		Если Параметры.ГруппаЗаказчиков = Неопределено Тогда
			ГруппаЗаказчиков = Справочники.ГруппыЗаказчиковНаправлений.ПустаяСсылка();
		Иначе
			ГруппаЗаказчиков = Параметры.ГруппаЗаказчиков;
		КонецЕсли;
		
		ЗначенияОчереди = Новый Структура;
		ЗначенияОчереди.Вставить("Направление", Параметры.Направление);
		ЗначенияОчереди.Вставить("Система", Параметры.Система);
		ЗначенияОчереди.Вставить("ГруппаЗаказчиков", ГруппаЗаказчиков);
		
	ИначеЕсли ВидОчереди = Перечисления.ВидыОчереди.Продукт Тогда	
		ЗначенияОчереди = Новый Структура("Продукт", Параметры.Продукт);		
		
	ИначеЕсли ВидОчереди = Перечисления.ВидыОчереди.ПродуктСистема Тогда 
		ЗначенияОчереди = Новый Структура("Продукт, Система", Параметры.Продукт, Параметры.Система);		
					
	КонецЕсли; 
	
	КлючОчередиОбъекта = Справочники.КлючОчереди.НайтиСоздатьКлючОчереди(ВидОчереди, ЗначенияОчереди, Ложь);
	
	Если НЕ ЗначениеЗаполнено(КлючОчередиОбъекта) Тогда
		Возврат ПолучитьСтруктуруОтвета(20, , "Не удалось найти ключ очереди");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередиЗаявок.Заявка КАК Заявка,
	|	ОчередиЗаявок.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|ГДЕ
	|	ОчередиЗаявок.Заявка В(&ПеремещаемыйОбъект, &СмещаемыйОбъект)
	|	И ОчередиЗаявок.КлючОчередиОбъекта = &КлючОчередиОбъекта";
	
	Запрос.УстановитьПараметр("ПеремещаемыйОбъект", ДанныеЗапроса.ПеремещаемыйОбъект);
	Запрос.УстановитьПараметр("СмещаемыйОбъект", ДанныеЗапроса.СмещаемыйОбъект);
	Запрос.УстановитьПараметр("КлючОчередиОбъекта", КлючОчередиОбъекта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Заявка = ДанныеЗапроса.ПеремещаемыйОбъект Тогда
			СтарыйПорядок = Выборка.Порядок;
		Иначе
			НовыйПорядок = Выборка.Порядок;
		КонецЕсли;
	КонецЦикла;
	
	Результат = РегистрыСведений.ОчередиЗаявок.ИзменитьПорядок(ДанныеЗапроса.ПеремещаемыйОбъект, ВидОчереди, 
	ЗначенияОчереди, СтарыйПорядок, НовыйПорядок, , , КлючОчередиОбъекта);
	
	Если Результат.Успешно Тогда
		СтруктураОтвета = ПолучитьСтруктуруОтвета(0);
	Иначе 
		СтруктураОтвета = ПолучитьСтруктуруОтвета(20, , Результат.ТекстОшибки);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ИзменитьПорядокОбъектовКанбана(Знач Параметры, Знач ДанныеЗапроса)
		
	ДанныеОбъектов = ПолучитьДанныеОбъектов(ДанныеЗапроса.ПеремещаемыйОбъект, ДанныеЗапроса.СмещаемыйОбъект, ДанныеЗапроса.Этап);
	
	Если ДанныеОбъектов.Количество() < 2 Тогда
		Если Параметры.Тип = Перечисления.ТипыКанбана.Кастомный Тогда
			ТекстСообщения = "Карточка перемещена";
		Иначе
			ТесктСообщения = "Статус объекта не соответствует колонке";
		КонецЕсли;
		
		Возврат ПолучитьСтруктуруОтвета(20, , ТесктСообщения);
	КонецЕсли;
	
	Для Каждого Строка Из ДанныеОбъектов Цикл
		Если Строка.Объект = ДанныеЗапроса.ПеремещаемыйОбъект Тогда
			Ключ = Строка.Ключ;
			НачальныйПорядок = Строка.Порядок;
		Иначе
			КонечныйПорядок = Строка.Порядок;
		КонецЕсли;
		
		Если Строка.Порядок = 999 И (Параметры.Тип = Перечисления.ТипыКанбана.ЗадачаНовый
			ИЛИ Параметры.Тип = Перечисления.ТипыКанбана.ВнутреннееЗаданиеНовый) Тогда
			
			РегистрыСведений.ОчередьКанбан.ОбработатьОбъектВОчередиКанбана(Строка.Объект);
		КонецЕсли;
	КонецЦикла;
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст =
	"ВЫБРАТЬ
	|	ОчередьКанбан.Объект КАК Объект,
	|	ОчередьКанбан.КлючОчередиОбъекта КАК КлючОчередиОбъекта,
	|	ОчередьКанбан.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|ГДЕ
	|	ОчередьКанбан.КлючОчередиОбъекта = &Ключ
	|	И ОчередьКанбан.Порядок МЕЖДУ &НачальныйПорядок И &КонечныйПорядок
	|{УПОРЯДОЧИТЬ ПО
	|	Порядок}";

	ПостроительЗапроса.Параметры.Вставить("Ключ", Ключ);
		
	Если НачальныйПорядок < КонечныйПорядок Тогда
		ПостроительЗапроса.Параметры.Вставить("НачальныйПорядок", НачальныйПорядок);
		ПостроительЗапроса.Параметры.Вставить("КонечныйПорядок", КонечныйПорядок);
		
		ПостроительЗапроса.Порядок.Добавить("Порядок", , , НаправлениеСортировки.Убыв);
	Иначе
		ПостроительЗапроса.Параметры.Вставить("НачальныйПорядок", КонечныйПорядок);
		ПостроительЗапроса.Параметры.Вставить("КонечныйПорядок", НачальныйПорядок);
		
		ПостроительЗапроса.Порядок.Добавить("Порядок", , , НаправлениеСортировки.Возр);
	КонецЕсли;
	
	ПостроительЗапроса.Выполнить();	
	
	ТаблицаПорядка = ПостроительЗапроса.Результат.Выгрузить();
	
	МаксИндекс = ТаблицаПорядка.Количество() - 1;
	
	Если КонечныйПорядок = 999 Тогда
		КонечныйПорядок = ТаблицаПорядка[0].Порядок;
	КонецЕсли;
	
	// Проверим, что перемещаемый объект находится в изначальной позиции	
	СтрокаТаблицы = ТаблицаПорядка[МаксИндекс];
	НовыйПорядокСтроки = СтрокаТаблицы.Порядок;
	
	Если СтрокаТаблицы.Объект <> ДанныеЗапроса.ПеремещаемыйОбъект Тогда		
		Возврат ПолучитьСтруктуруОтвета(20, , "Порядок документа уже изменен");
	КонецЕсли;
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОчередьКанбан");
	ЭлементБлокировки.ИсточникДанных = ТаблицаПорядка;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Объект", "Объект");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КлючОчередиОбъекта", "КлючОчередиОбъекта");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НаборЗаписей = РегистрыСведений.ОчередьКанбан.СоздатьНаборЗаписей();
	ДатаИзменения = ТекущаяДатаСеанса();
	
	НачатьТранзакцию();		
	Попытка
		БлокировкаДанных.Заблокировать();
		
		// Сначала изменяем порядок у документов выше
		Для Индекс = 1 По МаксИндекс Цикл	
			ТекущийОбъект = ТаблицаПорядка[МаксИндекс - Индекс];												
			
			СтарыйПорядокСтроки = ТекущийОбъект.Порядок;			
			ТекущийОбъект.Порядок = НовыйПорядокСтроки;
			НовыйПорядокСтроки = СтарыйПорядокСтроки;
			
			НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(Ключ);
			НаборЗаписей.Отбор.Объект.Установить(ТекущийОбъект.Объект);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 1 Тогда
				НаборЗаписей[0].Порядок = ТекущийОбъект.Порядок;
				НаборЗаписей.Записать();
				НаборЗаписей.Очистить();
			КонецЕсли;	
		КонецЦикла;
		
		// Изменяем порядок самого документа
		НаборЗаписей.Отбор.КлючОчередиОбъекта.Установить(Ключ);
		НаборЗаписей.Отбор.Объект.Установить(ДанныеЗапроса.ПеремещаемыйОбъект);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 1 Тогда
			НаборЗаписей[0].Порядок = КонечныйПорядок;
			НаборЗаписей[0].Автор = Параметры.Пользователь; 
			НаборЗаписей[0].ДатаИзменения = ДатаИзменения;
			НаборЗаписей.Записать(); 	
		КонецЕсли;
			
		ЗафиксироватьТранзакцию();
		СтруктураОтвета = ПолучитьСтруктуруОтвета(0);
	Исключение
		ОтменитьТранзакцию();		
		СтруктураОтвета = ПолучитьСтруктуруОтвета(20, , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Возврат СтруктураОтвета;
	
КонецФункции

Функция ИзменитьПорядокЭтаповКанбана(Знач Параметры, Знач ДанныеЗапроса)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПорядокЭтаповКанбана.Этап КАК Этап,
	|	ПорядокЭтаповКанбана.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.ПорядокЭтаповКанбана КАК ПорядокЭтаповКанбана
	|ГДЕ
	|	ПорядокЭтаповКанбана.Филиал = &Филиал
	|	И ПорядокЭтаповКанбана.Этап = &ПеремещаемыйЭтап
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПорядокЭтаповКанбана.Этап,
	|	ПорядокЭтаповКанбана.Порядок
	|ИЗ
	|	РегистрСведений.ПорядокЭтаповКанбана КАК ПорядокЭтаповКанбана
	|ГДЕ
	|	ПорядокЭтаповКанбана.Филиал = &Филиал
	|	И ПорядокЭтаповКанбана.Этап = &СмещаемыйЭтап";
	
	Запрос.УстановитьПараметр("Филиал", Параметры.Филиал);
	Запрос.УстановитьПараметр("ПеремещаемыйЭтап", ДанныеЗапроса.ПеремещаемыйЭтап);
	Запрос.УстановитьПараметр("СмещаемыйЭтап", ДанныеЗапроса.СмещаемыйЭтап);
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Этап = ДанныеЗапроса.ПеремещаемыйЭтап Тогда
			НачальныйПорядок = Выборка.Порядок;
		Иначе
			КонечныйПорядок = Выборка.Порядок;
		КонецЕсли;	
	КонецЦикла;
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст =
	"ВЫБРАТЬ
	|	ПорядокЭтаповКанбана.Филиал КАК Филиал,
	|	ПорядокЭтаповКанбана.Этап КАК Этап,
	|	ПорядокЭтаповКанбана.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.ПорядокЭтаповКанбана КАК ПорядокЭтаповКанбана
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана КАК ЭтапыКанбана
	|		ПО (ПорядокЭтаповКанбана.Этап = ЭтапыКанбана.Ссылка)
	|			И (ЭтапыКанбана.ТипКанбана = &ТипКанбана)
	|ГДЕ
	|	ПорядокЭтаповКанбана.Филиал = &Филиал
	|	И ПорядокЭтаповКанбана.Порядок МЕЖДУ &НачальныйПорядок И &КонечныйПорядок
	|{УПОРЯДОЧИТЬ ПО
	|	Порядок}";
	
	ПостроительЗапроса.Параметры.Вставить("Филиал", Параметры.Филиал);
	ПостроительЗапроса.Параметры.Вставить("ТипКанбана", Параметры.Тип);
		
	Если НачальныйПорядок < КонечныйПорядок Тогда
		ПостроительЗапроса.Параметры.Вставить("НачальныйПорядок", НачальныйПорядок);
		ПостроительЗапроса.Параметры.Вставить("КонечныйПорядок", КонечныйПорядок);
		
		ПостроительЗапроса.Порядок.Добавить("Порядок", , , НаправлениеСортировки.Убыв);
	Иначе
		ПостроительЗапроса.Параметры.Вставить("НачальныйПорядок", КонечныйПорядок);
		ПостроительЗапроса.Параметры.Вставить("КонечныйПорядок", НачальныйПорядок);
		
		ПостроительЗапроса.Порядок.Добавить("Порядок", , , НаправлениеСортировки.Возр);
	КонецЕсли;
	
	ПостроительЗапроса.Выполнить();	

	ТаблицаПорядкаЭтапов = ПостроительЗапроса.Результат.Выгрузить();	
	МаксИндекс =  ТаблицаПорядкаЭтапов.Количество() - 1;
	
	// Проверим, что перемещаемый этап находится в изначальной позиции	
	СтрокаТаблицы = ТаблицаПорядкаЭтапов[МаксИндекс];
	НовыйПорядокСтроки = СтрокаТаблицы.Порядок;
	
	Если СтрокаТаблицы.Этап <> ДанныеЗапроса.ПеремещаемыйЭтап Тогда		
		Возврат ПолучитьСтруктуруОтвета(20, , "Порядок этапа уже изменен");
	КонецЕсли;
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ПорядокЭтаповКанбана");
	ЭлементБлокировки.ИсточникДанных = ТаблицаПорядкаЭтапов;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Этап", "Этап");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Филиал", "Филиал");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НаборЗаписей = РегистрыСведений.ПорядокЭтаповКанбана.СоздатьНаборЗаписей();
	ДатаИзменения = ТекущаяДатаСеанса();
	
	НачатьТранзакцию();		
	Попытка
		БлокировкаДанных.Заблокировать();
		
		// Сначала изменяем порядок у этапов выше
		Для Индекс = 1 По МаксИндекс Цикл	
			ТекущийЭтап = ТаблицаПорядкаЭтапов[МаксИндекс - Индекс];												
			
			СтарыйПорядокСтроки = ТекущийЭтап.Порядок;			
			ТекущийЭтап.Порядок = НовыйПорядокСтроки;
			НовыйПорядокСтроки = СтарыйПорядокСтроки;
			
			НаборЗаписей.Отбор.Филиал.Установить(Параметры.Филиал);
			НаборЗаписей.Отбор.Этап.Установить(ТекущийЭтап.Этап);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 1 Тогда
				НаборЗаписей[0].Порядок = ТекущийЭтап.Порядок;
				НаборЗаписей.Записать();
				НаборЗаписей.Очистить();
			КонецЕсли;			
		КонецЦикла;
		
		// Изменяем порядок самого этапа
		НаборЗаписей.Отбор.Филиал.Установить(Параметры.Филиал);
		НаборЗаписей.Отбор.Этап.Установить(ДанныеЗапроса.ПеремещаемыйЭтап);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 1 Тогда
			НаборЗаписей[0].Порядок = КонечныйПорядок;
			НаборЗаписей[0].Пользователь = Параметры.Пользователь; 
			НаборЗаписей[0].ДатаИзменения = ДатаИзменения;
			НаборЗаписей.Записать(); 
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		СтруктураОтвета = ПолучитьСтруктуруОтвета(0);
	Исключение
		ОтменитьТранзакцию();		
		СтруктураОтвета = ПолучитьСтруктуруОтвета(20, , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Возврат СтруктураОтвета;
	
КонецФункции

Функция НайтиСпринт(Знач Идентификатор)
	
	Поле = "sprint";
	Результат = ПолучитьСсылкуТипа(Идентификатор, Тип("ДокументСсылка.Спринт"), Поле);
	
	Если Результат.Значение = Неопределено Тогда
		ОписаниеТипаЧисло = ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(10);
		Номер = ОписаниеТипаЧисло.ПривестиЗначение(Идентификатор);
		Результат = ПолучитьСсылкуОбъектаПоНомеру(Документы.Спринт, Номер, Поле);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиФилиал(Идентификатор)
	
	Поле = "branch";
	Результат = ПолучитьСсылкуТипа(Идентификатор, Тип("СправочникСсылка.Филиалы"), Поле);
	
	Если Результат.Значение = Неопределено Тогда
		Результат = ПолучитьСсылкуНаОбъектПоКоду(Справочники.Филиалы, Идентификатор, Поле);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОтправитьУведомление(Знач Система, Знач ОпубликованныеЗадачи, Знач ДатаОбновленияКонфигурации)
	
	// Подготовка текста сообщения
	СоставСообщения = Новый Массив;
	
	ТекстСообщения = СтрШаблон(":alarm_clock: *%1 обновлен %2*",
			Формат(ДатаОбновленияКонфигурации, "ДФ='dd.MM.yyyy ''в'' HH:mm'"), Система);
	
	СоставСообщения.Добавить(ТекстСообщения);
	
	Если ОпубликованныеЗадачи.Количество() > 0 Тогда
		СоставСообщения.Добавить("");
		СоставСообщения.Добавить("Мы зарелизили и отдали на тестирование следующие задачи:");
		
		Для Каждого СтрокаТаблицы Из ОпубликованныеЗадачи Цикл
			ВнешняяСсылка = ОбщегоНазначения.ПолучитьHTTPСсылкуНаОбъект(СтрокаТаблицы.Ссылка);
			
			ТекстСообщения = СтрШаблон(":scroll: [%1. %2](%3)>",
				СтрокаТаблицы.НомерЗадачи, СтрокаТаблицы.НаименованиеЗадачи, ВнешняяСсылка);
			
			СоставСообщения.Добавить(ТекстСообщения);
		КонецЦикла;
	КонецЕсли;
	
	ТекстСообщения = СтрСоединить(СоставСообщения, Символы.ПС);
	РегистрыСведений.БуферСообщений.Добавить(Перечисления.СпособыОтправкиСообщений.Мессенджер,
		Перечисления.ТипыСлужебногоКанала.ТехническаяПроблема, ТекстСообщения,,
		Перечисления.ТипыСообщенийМессенджера.ОбновлениеСистемы);
	
КонецПроцедуры

Функция ПерместитьКарточкуВДругойЭтап(ПараметрыЗапроса, Параметры)
	
	Запрос  = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередьКанбан.Объект КАК Объект,
	|	ОчередьКанбан.КлючОчередиОбъекта КАК Ключ,
	|	ОчередьКанбан.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО ОчередьКанбан.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|			И (КлючОчереди.ЭтапКанбана = &Этап)
	|ГДЕ
	|	ОчередьКанбан.Объект = &СмещаемыйОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОчередьКанбан.КлючОчередиОбъекта КАК КлючОчереди
	|ИЗ
	|	РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|ГДЕ
	|	ОчередьКанбан.Объект = &ПеремещаемыйОбъект";
	
	Запрос.УстановитьПараметр("СмещаемыйОбъект", Параметры.СмещаемыйОбъект);
	Запрос.УстановитьПараметр("ПеремещаемыйОбъект", Параметры.ПеремещаемыйОбъект);
	Запрос.УстановитьПараметр("Этап", Параметры.Этап);
	
	Пакеты = Запрос.ВыполнитьПакет();
	
	Выборка = Пакеты[0].Выбрать();
	ВыборкаУдалить = Пакеты[1].Выбрать();
	ВыборкаУдалить.Следующий();
	
	Если Выборка.Следующий() Тогда
		РегистрыСведений.ОчередьКанбан.ВставитьВОчередь(Параметры.ПеремещаемыйОбъект, Выборка.Ключ, Выборка.Порядок);
	Иначе
		РегистрыСведений.ОчередьКанбан.Добавить(Параметры.ПеремещаемыйОбъект, 
			Перечисления.ВидыОчереди.Канбан, Параметры.Этап, ПараметрыЗапроса.Филиал);
	КонецЕсли;
		
	РегистрыСведений.ОчередьКанбан.УдалитьИзОчереди(Параметры.ПеремещаемыйОбъект, ВыборкаУдалить.КлючОчереди);
		
	Возврат ПолучитьСтруктуруОтвета(0);
		
КонецФункции

Функция ПолучитьВидыДеятельности(Знач Исполнитель, Знач Направление, Знач ИдентификаторВидаДеятельности = Неопределено)
	
	Данные = Новый Структура("СписокВыбора", Новый СписокЗначений);
	ХешВидДеятельностиУслуга = УчетТрудозатрат.ДополнитьВидыДеятельностиУслугами(Данные, Направление, Исполнитель);
	
	Если ИдентификаторВидаДеятельности <> Неопределено Тогда
		ДанныеВидаДеятельности = ХешВидДеятельностиУслуга.Получить(ИдентификаторВидаДеятельности);
		Данные.Вставить("ДанныеВидаДеятельности", ДанныеВидаДеятельности);
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ПолучитьВидыДеятельностиДляВнутреннихТрудозатрат()
	
	Данные = Новый СписокЗначений;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВидыДеятельности.Ссылка КАК Ссылка,
		|	ВидыДеятельности.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ВидыДеятельности КАК ВидыДеятельности
		|ГДЕ
		|	ВидыДеятельности.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияВидовДеятельности.ВнутренниеТрудозатраты)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Данные.Добавить(Выборка.Ссылка, Выборка.Наименование);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ПолучитьДанныеОбъектов(Знач ПеремещаемыйОбъект, Знач СмещаемыйОбъект, Знач Этап)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Задача.Ссылка КАК Ссылка,
	|	Задача.Филиал КАК Филиал
	|ПОМЕСТИТЬ Объекты
	|ИЗ
	|	Документ.Задача КАК Задача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана.ЭлементыЭтапа КАК ЭтапыКанбанаЭлементыЭтапа
	|		ПО Задача.Статус = ЭтапыКанбанаЭлементыЭтапа.Элемент
	|			И (ЭтапыКанбанаЭлементыЭтапа.Ссылка = &Этап)
	|ГДЕ
	|	Задача.Ссылка В (&ПеремещаемыйОбъект, &СмещаемыйОбъект)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КарточкаКанбан.Ссылка,
	|	КарточкаКанбан.Владелец
	|ИЗ
	|	Справочник.КарточкаКанбан КАК КарточкаКанбан
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|		ПО (КарточкаКанбан.Ссылка = (ВЫРАЗИТЬ(ОчередьКанбан.Объект КАК Справочник.КарточкаКанбан)))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО (КлючОчереди.Ссылка = ОчередьКанбан.КлючОчередиОбъекта)
	|			И (КлючОчереди.ЭтапКанбана = &Этап)
	|ГДЕ
	|	КарточкаКанбан.Ссылка В (&ПеремещаемыйОбъект, &СмещаемыйОбъект)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнутренееЗадание.Ссылка,
	|	ВнутренееЗадание.Филиал
	|ИЗ
	|	Документ.ВнутреннееЗадание КАК ВнутренееЗадание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана.ЭлементыЭтапа КАК ЭтапыКанбанаЭлементыЭтапа
	|		ПО ВнутренееЗадание.Статус = ЭтапыКанбанаЭлементыЭтапа.Элемент
	|			И (ЭтапыКанбанаЭлементыЭтапа.Ссылка = &Этап)
	|ГДЕ
	|	ВнутренееЗадание.Ссылка В (&ПеремещаемыйОбъект, &СмещаемыйОбъект)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Объекты.Ссылка КАК Объект,
	|	КлючОчереди.Ссылка КАК Ключ,
	|	ЕСТЬNULL(ОчередьКанбан.Порядок, 999) КАК Порядок
	|ИЗ
	|	Объекты КАК Объекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО (КлючОчереди.ЭтапКанбана = &Этап)
	|			И (КлючОчереди.Филиал = Объекты.Филиал)
	|			И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Канбан))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|		ПО (ОчередьКанбан.Объект = Объекты.Ссылка)
	|			И (ОчередьКанбан.КлючОчередиОбъекта = КлючОчереди.Ссылка)";

	Запрос.УстановитьПараметр("ПеремещаемыйОбъект", ПеремещаемыйОбъект);
	Запрос.УстановитьПараметр("СмещаемыйОбъект", СмещаемыйОбъект);
	Запрос.УстановитьПараметр("Этап", Этап);
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьДанныеПоВнутреннимТрудозатратам(Знач Параметры)
	
	БылУчастником = (СтрНайти(Параметры.Включить, "notActive") > 0);
	
	#Область ТекстЗапроса
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	УчастникиВнутреннихТрудозатрат.Объект КАК Объект
		|ПОМЕСТИТЬ ОтобранныеОбъекты
		|ИЗ
		|	РегистрСведений.УчастникиВнутреннихТрудозатрат КАК УчастникиВнутреннихТрудозатрат
		|ГДЕ
		|	УчастникиВнутреннихТрудозатрат.Пользователь = &Пользователь
		|	И УчастникиВнутреннихТрудозатрат.Активный
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УчастникиВнутреннихТрудозатрат.Объект
		|ИЗ
		|	РегистрСведений.УчастникиВнутреннихТрудозатрат КАК УчастникиВнутреннихТрудозатрат
		|ГДЕ
		|	УчастникиВнутреннихТрудозатрат.Пользователь = &Пользователь
		|	И НЕ УчастникиВнутреннихТрудозатрат.Активный
		|	И &БылУчастником
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВнутренниеТрудозатраты.Ссылка КАК Ссылка,
		|	ВнутренниеТрудозатраты.Наименование КАК Наименование,
		|	ВнутренниеТрудозатраты.КороткийНомер КАК КороткийНомер,
		|	ВнутренниеТрудозатраты.Номер КАК Номер,
		|	ВнутренниеТрудозатраты.Дата КАК Дата
		|ИЗ
		|	Документ.ВнутренниеТрудозатраты КАК ВнутренниеТрудозатраты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтобранныеОбъекты КАК ОтобранныеОбъекты
		|		ПО (ОтобранныеОбъекты.Объект = ВнутренниеТрудозатраты.Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	#КонецОбласти
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("БылУчастником", БылУчастником);
	Запрос.УстановитьПараметр("Пользователь", Параметры.Участник);
	
	РезультатЗапроса = Запрос.Выполнить();
	Данные = Новый Массив;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			GUID = XMLСтрока(Выборка.Ссылка);
			НавигационнаяСсылка = ОбщегоНазначения.ПолучитьHTTPСсылкуНаОбъект(Выборка.Ссылка);
			
			ДанныеДокумента = Новый Структура;
			ДанныеДокумента.Вставить("id", GUID);
			ДанныеДокумента.Вставить("name", Выборка.Наименование);
			ДанныеДокумента.Вставить("number", Выборка.КороткийНомер);
			ДанныеДокумента.Вставить("fullNumber", Выборка.Номер);
			ДанныеДокумента.Вставить("date", Выборка.Дата);
			ДанныеДокумента.Вставить("link", НавигационнаяСсылка);
			
			Данные.Добавить(ДанныеДокумента);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ПолучитьДанныеПоЗадачам(Знач Параметры)
	
	ВключитьТрудозатраты = (СтрНайти(Параметры.Включить, "elapsedTime") > 0);
	БылИсполнителем = (СтрНайти(Параметры.Включить, "wherePreviousPerformer") > 0);
	
	#Область ТекстЗапроса
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Задача.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ОтобранныеЗадачи
		|ИЗ
		|	Документ.Задача КАК Задача
		|ГДЕ
		|	НЕ Задача.Статус В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
		|{ГДЕ
		|	Задача.Назначена КАК Исполнитель,
		|	Задача.КомандаРазработчиков КАК Команда}
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СвойстваЗадач.Объект
		|ИЗ
		|	РегистрСведений.СвойстваЗадач КАК СвойстваЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК Задача
		|		ПО СвойстваЗадач.Объект = Задача.Ссылка
		|ГДЕ
		|	&БылИсполнителем
		|	И НЕ Задача.Статус В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
		|{ГДЕ
		|	СвойстваЗадач.Исполнитель КАК Исполнитель,
		|	Задача.КомандаРазработчиков КАК Команда}
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Задача.Ссылка КАК Ссылка,
		|	Задача.Наименование КАК Наименование,
		|	Задача.Номер КАК Номер,
		|	ЕСТЬNULL(Трудозатраты.Регистратор, НЕОПРЕДЕЛЕНО) КАК Регистратор,
		|	ЕСТЬNULL(Трудозатраты.Комментарий, """") КАК Комментарий,
		|	ЕСТЬNULL(Трудозатраты.Период, НЕОПРЕДЕЛЕНО) КАК Период,
		|	ЕСТЬNULL(Трудозатраты.Затрата, 0) КАК Затрата,
		|	ЕСТЬNULL(ВидыДеятельностиУслуг.Ссылка, Трудозатраты.ВидДеятельности) КАК ВидДеятельности,
		|	ЕСТЬNULL(ВидыДеятельностиУслуг.Наименование, ПРЕДСТАВЛЕНИЕ(Трудозатраты.ВидДеятельности)) КАК НаименованиеВидаДеятельности
		|ИЗ
		|	ОтобранныеЗадачи КАК ОтобранныеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК Задача
		|		ПО ОтобранныеЗадачи.Ссылка = Задача.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК Трудозатраты
		|		ПО (&ВключитьТрудозатраты)
		|			И (Задача.Ссылка = Трудозатраты.Объект)
		|			И (Задача.Назначена = Трудозатраты.Пользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДеятельностиУслуг КАК ВидыДеятельностиУслуг
		|		ПО (Трудозатраты.ВидДеятельности = ВидыДеятельностиУслуг.ВидДеятельности)
		|			И (Трудозатраты.Услуга = ВидыДеятельностиУслуг.Услуга)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номер
		|ИТОГИ
		|	МАКСИМУМ(Наименование),
		|	МАКСИМУМ(Номер)
		|ПО
		|	Ссылка";
	#КонецОбласти
	
	ПостроительЗапроса = Новый ПостроительЗапроса(ТекстЗапроса); 
	ПостроительЗапроса.Параметры.Вставить("БылИсполнителем", БылИсполнителем);
	ПостроительЗапроса.Параметры.Вставить("ВключитьТрудозатраты", ВключитьТрудозатраты);
	
	Если ЗначениеЗаполнено(Параметры.Исполнитель) Тогда
		ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ПостроительЗапроса,
			"Исполнитель", ВидСравнения.Равно, Параметры.Исполнитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Команда) Тогда
		ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ПостроительЗапроса,
			"Команда", ВидСравнения.Равно, Параметры.Команда);
	КонецЕсли;
	
	ПостроительЗапроса.Выполнить();
	РезультатЗапроса = ПостроительЗапроса.Результат;
	Данные = Новый Массив;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ОписаниеТипаЧисло = ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(10, 0);
		Префикс = Документы.Задача.ПолучитьПрефикс();
		
		ВыборкаЗадач = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаЗадач.Следующий() Цикл
			GUID = XMLСтрока(ВыборкаЗадач.Ссылка);
			НомерБезПрефикса = СтрЗаменить(ВыборкаЗадач.Номер, Префикс, "");
			КороткийНомер = ОписаниеТипаЧисло.ПривестиЗначение(НомерБезПрефикса);
			НавигационнаяСсылка = ОбщегоНазначения.ПолучитьHTTPСсылкуНаОбъект(ВыборкаЗадач.Ссылка);
			
			ДанныеЗадачи = Новый Структура;
			ДанныеЗадачи.Вставить("id", GUID);
			ДанныеЗадачи.Вставить("name", ВыборкаЗадач.Наименование);
			ДанныеЗадачи.Вставить("number", КороткийНомер);
			ДанныеЗадачи.Вставить("fullNumber", ВыборкаЗадач.Номер);
			ДанныеЗадачи.Вставить("link", НавигационнаяСсылка);
			
			Если ВключитьТрудозатраты Тогда
				ВыборкаТрудозатрат = ВыборкаЗадач.Выбрать();
				Трудозатраты = Новый Массив;
				
				Пока ВыборкаТрудозатрат.Следующий() И ЗначениеЗаполнено(ВыборкаТрудозатрат.Регистратор) Цикл
					ДанныеТрудозатрат = Новый Структура;
					ДанныеТрудозатрат.Вставить("activityID", XMLСтрока(ВыборкаТрудозатрат.ВидДеятельности));
					ДанныеТрудозатрат.Вставить("activityName", ВыборкаТрудозатрат.НаименованиеВидаДеятельности);
					ДанныеТрудозатрат.Вставить("comment", ВыборкаТрудозатрат.Комментарий);
					ДанныеТрудозатрат.Вставить("date", ВыборкаТрудозатрат.Период);
					ДанныеТрудозатрат.Вставить("duration", ВыборкаТрудозатрат.Затрата);
					ДанныеТрудозатрат.Вставить("id", XMLСтрока(ВыборкаТрудозатрат.Регистратор));
					
					Трудозатраты.Добавить(ДанныеТрудозатрат);
				КонецЦикла;
				
				ДанныеЗадачи.Вставить("elapsedTime", Трудозатраты);
			КонецЕсли;
			
			Данные.Добавить(ДанныеЗадачи);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ПолучитьДанныеПоЗаявкам(Знач Параметры)
	
	СписокЗаявок = Новый Массив;
	
	СвойстваЗаявки = Новый Массив;
	СвойстваЗаявки.Добавить("name");
	
	ДополнительныеСвойства = СтрРазделить(НРег(Параметры.Включить), ", ", Ложь);
	
	ВключитьТрудозатраты = (ДополнительныеСвойства.Найти("elapsedtime") <> Неопределено);
	
	Свойство = "date";
	Если ДополнительныеСвойства.Найти(Свойство) <> Неопределено Тогда
		СвойстваЗаявки.Добавить(Свойство);
	КонецЕсли;
	
	Свойство = "direction";
	Если ДополнительныеСвойства.Найти(Свойство) <> Неопределено Тогда
		СвойстваЗаявки.Добавить(Свойство);
	КонецЕсли;
	
	Свойство = "status";
	Если ДополнительныеСвойства.Найти(Свойство) <> Неопределено Тогда
		СвойстваЗаявки.Добавить(Свойство);
	КонецЕсли;
	
	Свойство = "laststatuschanged";
	Если ДополнительныеСвойства.Найти(Свойство) <> Неопределено Тогда
		СвойстваЗаявки.Добавить(Свойство);
	КонецЕсли;
	
	СвойстваЗаявки = СтрСоединить(СвойстваЗаявки, ",");
	
	ШаблонЗапроса =
		#Область ТекстЗапроса
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗаявкаНаРазработку.Ссылка КАК Ссылка,
		|	ЗаявкаНаРазработку.Номер КАК Номер
		|ПОМЕСТИТЬ ОтфильтрованныеЗаявки
		|ИЗ
		|	Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ЗаявкаНаРазработкуСистемыРазработки
		|		ПО ЗаявкаНаРазработку.Ссылка = ЗаявкаНаРазработкуСистемыРазработки.Ссылка
		|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
		|		ПО (СтатусыЗаявокПоСистемам.Заявка = ЗаявкаНаРазработку.Ссылка)
		|			И (СтатусыЗаявокПоСистемам.Система = ЗаявкаНаРазработкуСистемыРазработки.Система)}
		|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СистемыЗаявокНазначеныеПользователю КАК СистемыЗаявокНазначеныеПользователю
		|		ПО (СистемыЗаявокНазначеныеПользователю.Заявка = ЗаявкаНаРазработку.Ссылка)
		|			И (СистемыЗаявокНазначеныеПользователю.Система = ЗаявкаНаРазработкуСистемыРазработки.Система)}
		|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТегиОбъектов КАК ТегиОбъектов
		|		ПО ((ВЫРАЗИТЬ(ТегиОбъектов.Объект КАК Документ.ЗаявкаНаРазработку)) = ЗаявкаНаРазработку.Ссылка)}
		|{ГДЕ
		|	ЗаявкаНаРазработкуСистемыРазработки.Система КАК СистемаУчета,
		|	СтатусыЗаявокПоСистемам.Статус КАК Статус,
		|	СистемыЗаявокНазначеныеПользователю.ТекущийИсполнитель КАК ТекущийИсполнитель,
		|	ТегиОбъектов.Тег КАК Тег}
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ %1
		|	ОтобранныеЗаявки.Ссылка КАК Ссылка,
		|	ОтобранныеЗаявки.Номер КАК Номер
		|ПОМЕСТИТЬ ОтобранныеЗаявки
		|ИЗ
		|	ОтфильтрованныеЗаявки КАК ОтобранныеЗаявки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОтфильтрованныеЗаявки КАК ОтобранныеЗаявкиДубль
		|		ПО ОтобранныеЗаявки.Номер >= ОтобранныеЗаявкиДубль.Номер
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтобранныеЗаявки.Ссылка,
		|	ОтобранныеЗаявки.Номер
		|%2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	ОтобранныеЗаявки.Ссылка КАК Ссылка,
		|	ОтобранныеЗаявки.Номер КАК Номер 
		|ИЗ 
		|	ОтобранныеЗаявки КАК ОтобранныеЗаявки";
	#КонецОбласти
	
	Если Параметры.КоличествоПропустить > 0 Тогда
		ПредставлениеКоличествоПропустить = Формат(Параметры.КоличествоПропустить, "ЧГ=");
		ШаблонПропускаемых = СтрШаблон(
				"
				|ИМЕЮЩИЕ
				|	КОЛИЧЕСТВО(ОтобранныеЗаявки.Ссылка) > %1
				|
				|УПОРЯДОЧИТЬ ПО
				|	Номер", ПредставлениеКоличествоПропустить);
	Иначе
		ШаблонПропускаемых =
			"
			|УПОРЯДОЧИТЬ ПО
			|	Номер";
	КонецЕсли;
	
	// Построитель запроса используется для легкого добавления отборов
	// при добавлении новых параметров в http запрос и возможности оптимизации
	// (исключить на уровне платформы ненужные соединения)
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст = СтрШаблон(ШаблонЗапроса, Формат(Параметры.Количество, "ЧГ="), ШаблонПропускаемых);
	
	Если Параметры.Фильтр <> Неопределено Тогда
		ЗакрытыеСтатусы = Новый СписокЗначений;
		ЗакрытыеСтатусы.Добавить(Справочники.СтатусыОбъектов.Решен);
		ЗакрытыеСтатусы.Добавить(Справочники.СтатусыОбъектов.Отклонен);
		
		Если Параметры.Фильтр = "open" Тогда
			ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ПостроительЗапроса,
				"Статус", ВидСравнения.НеВСписке, ЗакрытыеСтатусы);
		Иначе
			ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ПостроительЗапроса,
				"Статус", ВидСравнения.ВСписке, ЗакрытыеСтатусы);
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Система <> Неопределено Тогда
		ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ПостроительЗапроса,
			"СистемаУчета", ВидСравнения.Равно, Параметры.Система);
	КонецЕсли;
	
	Если Параметры.Исполнитель <> Неопределено Тогда
		ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ПостроительЗапроса,
			"ТекущийИсполнитель", ВидСравнения.Равно, Параметры.Исполнитель);
	КонецЕсли;
	
	Теги = Параметры.Теги;
	ОтборПоТегам = Теги.Количество() > 0;
	
	Если ОтборПоТегам Тогда
		ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ПостроительЗапроса,
			"Тег", ВидСравнения.ВСписке, Теги);
	КонецЕсли;
	
	// По причине не поддержки Построителем запроса пакетов
	// поместим выборку заявок в менеджер временных таблиц
	// и подключив временную таблицу к новому запросу выполним
	// нужные нам несколько пакетов
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	ЗапросЗаявки = ПостроительЗапроса.ПолучитьЗапрос();
	ЗапросЗаявки.МенеджерВременныхТаблиц = МенеджерВТ;
	ЗапросЗаявки.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст =
		#Область ТекстЗапроса
		"ВЫБРАТЬ
		|	ОтобранныеЗаявки.Ссылка КАК Ссылка,
		|	ОтобранныеЗаявки.Номер КАК Номер
		|ПОМЕСТИТЬ ОтобранныеЗаявкиИзВТ
		|ИЗ
		|	ОтобранныеЗаявки КАК ОтобранныеЗаявки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтобранныеЗаявкиИзВТ.Ссылка КАК Ссылка,
		|	Трудозатраты.Регистратор КАК Регистратор,
		|	Трудозатраты.Комментарий КАК Комментарий,
		|	Трудозатраты.Период КАК Период,
		|	Трудозатраты.Затрата КАК Затрата,
		|	ЕСТЬNULL(ВидыДеятельностиУслуг.Ссылка, Трудозатраты.ВидДеятельности) КАК ВидДеятельности,
		|	ЕСТЬNULL(ВидыДеятельностиУслуг.Наименование, ПРЕДСТАВЛЕНИЕ(Трудозатраты.ВидДеятельности)) КАК НаименованиеВидаДеятельности
		|ИЗ
		|	ОтобранныеЗаявкиИзВТ КАК ОтобранныеЗаявкиИзВТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК Трудозатраты
		|		ПО (&ВключитьТрудозатраты)
		|			И ОтобранныеЗаявкиИзВТ.Ссылка = Трудозатраты.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДеятельностиУслуг КАК ВидыДеятельностиУслуг
		|		ПО (Трудозатраты.ВидДеятельности = ВидыДеятельностиУслуг.ВидДеятельности)
		|			И (Трудозатраты.Услуга = ВидыДеятельностиУслуг.Услуга)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявкаНаРазработку.Ссылка КАК Ссылка,
		|	ЗаявкаНаРазработку.Номер КАК Номер,
		|	ЗаявкаНаРазработку.Наименование КАК name,
		|	ЗаявкаНаРазработку.Дата КАК date,
		|	НаправленияРазработки.Наименование КАК direction,
		|	СтатусыОбъектов.Наименование КАК status,
		|	МинимальныеСтатусыЗаявок.ДатаИзменения КАК lastStatusChanged,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ТегиОбъектов.Тег), """") КАК Тег
		|ИЗ
		|	ОтобранныеЗаявкиИзВТ КАК ОтобранныеЗаявкиИзВТ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
		|		ПО ОтобранныеЗаявкиИзВТ.Ссылка = ЗаявкаНаРазработку.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
		|		ПО ОтобранныеЗаявкиИзВТ.Ссылка = МинимальныеСтатусыЗаявок.Заявка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
		|		ПО (МинимальныеСтатусыЗаявок.Статус = СтатусыОбъектов.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаправленияРазработки КАК НаправленияРазработки
		|		ПО (ЗаявкаНаРазработку.Направление = НаправленияРазработки.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТегиОбъектов КАК ТегиОбъектов
		|		ПО (ОтобранныеЗаявкиИзВТ.Ссылка = (ВЫРАЗИТЬ(ТегиОбъектов.Объект КАК Документ.ЗаявкаНаРазработку)))
		|			И (ВЫБОР
		|				КОГДА &ФильтрПоТегам
		|					ТОГДА ТегиОбъектов.Тег В (&Теги)
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)
		|ИТОГИ
		|	МАКСИМУМ(Номер),
		|	МАКСИМУМ(name),
		|	МАКСИМУМ(date),
		|	МАКСИМУМ(direction),
		|	МАКСИМУМ(status),
		|	МАКСИМУМ(lastStatusChanged)
		|ПО
		|	Ссылка";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ФильтрПоТегам", ОтборПоТегам);
	Запрос.УстановитьПараметр("Теги", Теги);
	Запрос.УстановитьПараметр("ВключитьТрудозатраты", ВключитьТрудозатраты);
	
	Пакеты = Запрос.ВыполнитьПакет();
	
	Трудозатраты = Пакеты[1];
	ТаблицаТрудозатраты = Трудозатраты.Выгрузить();
	
	ОсновныеДанные = Пакеты[2];
	
	Если НЕ ОсновныеДанные.Пустой() Тогда
		ОписаниеТипаЧисло = ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(10);
		Выборка = ОсновныеДанные.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			GUID = XMLСтрока(Выборка.Ссылка);
			НомерБезПрефикса = ОбщегоНазначения.ПолучитьНомерОбъектаБезПрефикса(Выборка.Ссылка, Выборка.Номер);
			КороткийНомер = ОписаниеТипаЧисло.ПривестиЗначение(НомерБезПрефикса);
			НавигационнаяСсылка = ОбщегоНазначения.ПолучитьHTTPСсылкуНаОбъект(Выборка.Ссылка);
			
			СтруктураЗаявки = Новый Структура(СвойстваЗаявки);
			ЗаполнитьЗначенияСвойств(СтруктураЗаявки, Выборка, СвойстваЗаявки);
			
			СтруктураЗаявки.Вставить("id", GUID);
			СтруктураЗаявки.Вставить("number", КороткийНомер);
			СтруктураЗаявки.Вставить("fullNumber", Выборка.Номер);
			СтруктураЗаявки.Вставить("link", НавигационнаяСсылка);
			
			Если ОтборПоТегам Тогда
				ВыборкаТегов = Выборка.Выбрать();
				Теги = Новый Массив;
				
				Пока ВыборкаТегов.Следующий() Цикл
					Теги.Добавить(ВыборкаТегов.Тег);
				КонецЦикла;
				
				СтруктураЗаявки.Вставить("tag", СтрСоединить(Теги, ", "));
			КонецЕсли;
			
			Если ВключитьТрудозатраты Тогда
				ТрудозатратыЗаявки = Новый Массив;
				ДокументыТрудозатрат = ТаблицаТрудозатраты.НайтиСтроки(Новый Структура("Ссылка", Выборка.Ссылка));
				
				Для Каждого Документ Из ДокументыТрудозатрат Цикл
					ДанныеТрудозатрат = Новый Структура;
					ДанныеТрудозатрат.Вставить("activityID", XMLСтрока(Документ.ВидДеятельности));
					ДанныеТрудозатрат.Вставить("activityName", Документ.НаименованиеВидаДеятельности);
					ДанныеТрудозатрат.Вставить("comment", Документ.Комментарий);
					ДанныеТрудозатрат.Вставить("date", Документ.Период);
					ДанныеТрудозатрат.Вставить("duration", Документ.Затрата);
					ДанныеТрудозатрат.Вставить("id", XMLСтрока(Документ.Регистратор));
					
					ТрудозатратыЗаявки.Добавить(ДанныеТрудозатрат);
				КонецЦикла;
				
				СтруктураЗаявки.Вставить("elapsedTime", ТрудозатратыЗаявки);
			КонецЕсли;
			
			СписокЗаявок.Добавить(СтруктураЗаявки);
		КонецЦикла;
	КонецЕсли;
	
	МенеджерВТ.Закрыть();
	
	Возврат СписокЗаявок;
	
КонецФункции

Функция ПолучитьДанныеПоТрудозатратам(Знач Параметры)
	
	Данные = Новый Массив;
	
	#Область ТекстЗапроса
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Трудозатраты.Ссылка КАК Ссылка,
	|	Трудозатраты.Комментарий КАК Комментарий,
	|	Трудозатраты.Дата КАК Дата,
	|	Трудозатраты.Затрата КАК Затрата,
	|	Пользователи.Почта КАК ПочтаИсполнителя,
	|	ЕСТЬNULL(ВидыДеятельностиУслуг.Ссылка, Трудозатраты.ВидДеятельности) КАК ВидДеятельности,
	|	ЕСТЬNULL(ВидыДеятельностиУслуг.Наименование, ПРЕДСТАВЛЕНИЕ(Трудозатраты.ВидДеятельности)) КАК НаименованиеВидаДеятельности
	|ИЗ
	|	Документ.Трудозатраты КАК Трудозатраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО Трудозатраты.Пользователь = Пользователи.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДеятельностиУслуг КАК ВидыДеятельностиУслуг
	|		ПО Трудозатраты.ВидДеятельности = ВидыДеятельностиУслуг.ВидДеятельности
	|			И Трудозатраты.Услуга = ВидыДеятельностиУслуг.Услуга
	|ГДЕ
	|	Трудозатраты.Проведен
	|	И Трудозатраты.Объект = &Объект
	|{ГДЕ
	|	Трудозатраты.Пользователь КАК Исполнитель,
	|	Трудозатраты.Дата КАК Дата}
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	#КонецОбласти
	
	ПостроительЗапроса = Новый ПостроительЗапроса(ТекстЗапроса);
	ПостроительЗапроса.Параметры.Вставить("Объект", Параметры.Ссылка);
	
	Если Параметры.Исполнитель <> Неопределено Тогда
		ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ПостроительЗапроса,
			"Исполнитель", ВидСравнения.Равно, Параметры.Исполнитель);
	КонецЕсли;
	
	Если Параметры.ДатаНачала <> Неопределено Тогда
		ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ПостроительЗапроса,
			"Дата", ВидСравнения.БольшеИлиРавно, Параметры.ДатаНачала);
	КонецЕсли;
	
	Если Параметры.ДатаОкончания <> Неопределено Тогда
		ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ПостроительЗапроса,
			"Дата", ВидСравнения.МеньшеИлиРавно, Параметры.ДатаОкончания);
	КонецЕсли;
	
	ПостроительЗапроса.Выполнить();
	Если НЕ ПостроительЗапроса.Результат.Пустой() Тогда
		Выборка = ПостроительЗапроса.Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДанныеСтроки = Новый Структура;
			ДанныеСтроки.Вставить("activityID", XMLСтрока(Выборка.ВидДеятельности));
			ДанныеСтроки.Вставить("activityName", Выборка.НаименованиеВидаДеятельности);
			ДанныеСтроки.Вставить("performer", Выборка.ПочтаИсполнителя);
			ДанныеСтроки.Вставить("comment", Выборка.Комментарий);
			ДанныеСтроки.Вставить("date", Выборка.Дата);
			ДанныеСтроки.Вставить("duration", Выборка.Затрата);
			ДанныеСтроки.Вставить("id", XMLСтрока(Выборка.Ссылка));
			
			Данные.Добавить(ДанныеСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ПолучитьДанныеПоТрудозатратамЗаПериод(Знач Параметры)
	
	Данные = Новый Массив;
	
	#Область ТекстЗапроса
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	СУММА(Трудозатраты.Затрата) КАК Затрата,
		|	Трудозатраты.Объект КАК Объект
		|ИЗ
		|	Документ.Трудозатраты КАК Трудозатраты
		|ГДЕ
		|	Трудозатраты.Проведен
		|	И Трудозатраты.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|{ГДЕ
		|	Трудозатраты.Пользователь КАК Исполнитель}
		|
		|СГРУППИРОВАТЬ ПО
		|	Трудозатраты.Объект";
	#КонецОбласти
	
	ПостроительЗапроса = Новый ПостроительЗапроса(ТекстЗапроса);
	ПостроительЗапроса.Параметры.Вставить("ДатаНачала", Параметры.ДатаНачала);
	ПостроительЗапроса.Параметры.Вставить("ДатаОкончания", КонецДня(Параметры.ДатаОкончания));
	
	Если ЗначениеЗаполнено(Параметры.Исполнитель) Тогда
		ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ПостроительЗапроса,
			"Исполнитель", ВидСравнения.Равно, Параметры.Исполнитель);
	КонецЕсли;
	
	ПостроительЗапроса.Выполнить();
	Если НЕ ПостроительЗапроса.Результат.Пустой() Тогда
		Выборка = ПостроительЗапроса.Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДанныеСтроки = Новый Структура;
			ДанныеСтроки.Вставить("duration", Выборка.Затрата);
			ДанныеСтроки.Вставить("id", XMLСтрока(Выборка.Объект));
			
			Данные.Добавить(ДанныеСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ПолучитьДанныеСмещения(Знач СмещаемыйОбъект, Знач Этап)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередьКанбан.Порядок КАК Порядок,
	|	ОчередьКанбан.КлючОчередиОбъекта КАК Ключ
	|ИЗ
	|	РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО ((ВЫРАЗИТЬ(ОчередьКанбан.Объект КАК Документ.Задача)) = ДокументЗадача.Ссылка)
	|			И (ДокументЗадача.Ссылка = &СмещаемыйОбъект)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО ОчередьКанбан.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|			И (КлючОчереди.ЭтапКанбана = &Этап)
	|			И (КлючОчереди.Филиал = ДокументЗадача.Филиал)
	|			И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Канбан))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОчередьКанбан.Порядок,
	|	ОчередьКанбан.КлючОчередиОбъекта
	|ИЗ
	|	РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееЗадание КАК ДокументВнутреннееЗадание
	|		ПО ((ВЫРАЗИТЬ(ОчередьКанбан.Объект КАК Документ.ВнутреннееЗадание)) = ДокументВнутреннееЗадание.Ссылка)
	|			И (ДокументВнутреннееЗадание.Ссылка = &СмещаемыйОбъект)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО ОчередьКанбан.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|			И (КлючОчереди.ЭтапКанбана = &Этап)
	|			И (КлючОчереди.Филиал = ДокументВнутреннееЗадание.Филиал)
	|			И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Канбан))";

	Запрос.УстановитьПараметр("Этап", Этап);
	Запрос.УстановитьПараметр("СмещаемыйОбъект", СмещаемыйОбъект);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьДоступныеФилиалыКанбан(Знач Пользователь)
	
	Результат = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Пользователи.Филиал КАК Филиал
	|ПОМЕСТИТЬ ФилиалыПользователя
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &Пользователь
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Филиалы.Ссылка
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|ГДЕ
	|	Филиалы.Руководитель = &Пользователь
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ФилиалыИерархияТерриторий.Ссылка
	|ИЗ
	|	Справочник.Территории КАК Территории
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы.ИерархияТерриторий КАК ФилиалыИерархияТерриторий
	|		ПО (ФилиалыИерархияТерриторий.Территория = Территории.Ссылка)
	|			И (Территории.Руководитель = &Пользователь)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвязанныеОбъекты.ПриемникСвязи КАК Филиал
	|ИЗ
	|	ФилиалыПользователя КАК ФилиалыПользователя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязанныеОбъекты КАК СвязанныеОбъекты
	|		ПО ФилиалыПользователя.Филиал = СвязанныеОбъекты.ИсточникСвязи
	|			И (СвязанныеОбъекты.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.СвязанаС))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ФилиалыПользователя.Филиал
	|ИЗ
	|	ФилиалыПользователя КАК ФилиалыПользователя";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Филиал);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКолонку(Знач Наименование, Знач Филиал)
		
	Результат = Новый Структура("Ссылка, ПометкаУдаления", Неопределено, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыКанбана.Ссылка КАК Ссылка,
	|	ЭтапыКанбана.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.ЭтапыКанбана КАК ЭтапыКанбана
	|ГДЕ
	|	ЭтапыКанбана.Владелец = &Владелец
	|	И ЭтапыКанбана.Наименование = &Наименование
	|	И ЭтапыКанбана.ТипКанбана = &ТипКанбана";
	
	Запрос.УстановитьПараметр("Владелец", Филиал);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("ТипКанбана", Перечисления.ТипыКанбана.Кастомный);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСсылкуПоНомеруЗадачи(Знач Номер)
	
	Результат = Новый Структура("Значение, СтруктураОтвета");
	
	Номер = Документы.Задача.ДополнитьНомерЗадачи(Номер);
	Ссылка = Документы.Задача.НайтиПоНомеру(Номер);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Результат.Значение = Ссылка;
	Иначе
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(4);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции   

Функция ПолучитьСсылкуПоНомеруЗаявки(Знач Номер)
	
	Результат = Новый Структура("Значение, СтруктураОтвета");
	
	Номер = Документы.ЗаявкаНаРазработку.ДополнитьНомерЗаявки(Номер);
	Ссылка = Документы.ЗаявкаНаРазработку.НайтиПоНомеру(Номер);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Результат.Значение = Ссылка;
	Иначе
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(4);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразоватьОписаниеДляСкрытияДанных(Знач Описание) Экспорт
	
	ОписаниеСоСкрытымТекстом = Описание;
	Если ЗначениеЗаполнено(ОписаниеСоСкрытымТекстом) Тогда
		ТекстДляВставки = "<span style=""margin: 5px;padding: 3px;border-left: 3px solid grey;color:
			|grey;font-family: sans-serif;font-size: 14px;""> Содержимое скрыто, так как содержит конфиденциальные данные </span>";
		НачатьПоиск = Истина;
		ДлинаТега = СтрДлина("</secureData>");
		Пока НачатьПоиск Цикл 
			НачалоПодстроки = СтрНайти(ОписаниеСоСкрытымТекстом, "<secureData>");
			КонецПодстроки = СтрНайти(ОписаниеСоСкрытымТекстом, "</secureData>");
			Если НачалоПодстроки > 0 И КонецПодстроки > 0 Тогда 
				КонецПодстроки = КонецПодстроки + ДлинаТега;	
				ДлинаПодстроки = КонецПодстроки - НачалоПодстроки;
				Подстрока = Сред(ОписаниеСоСкрытымТекстом, НачалоПодстроки, ДлинаПодстроки);
				ОписаниеСоСкрытымТекстом = СтрЗаменить(ОписаниеСоСкрытымТекстом, Подстрока, ТекстДляВставки);
			Иначе
				НачатьПоиск = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОписаниеСоСкрытымТекстом;
	
КонецФункции

Функция СтатусЭтапа(Этап)
	
	Результат = Новый Структура("Значение, СтруктураОтвета");
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыКанбанаЭлементыЭтапа.Элемент КАК Элемент
	|ИЗ
	|	Справочник.ЭтапыКанбана.ЭлементыЭтапа КАК ЭтапыКанбанаЭлементыЭтапа
	|ГДЕ
	|	ЭтапыКанбанаЭлементыЭтапа.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Этап);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Результат.Значение = Выборка.Элемент;
	Иначе
		Результат.СтруктураОтвета = ПолучитьСтруктуруОтвета(24);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция СформироватьДанныеВнутреннихТрудозатрат(Знач ДокументОбъект)
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("id", XMLСтрока(ДокументОбъект.Ссылка));
	ДанныеОбъекта.Вставить("name", ДокументОбъект.Наименование);
	ДанныеОбъекта.Вставить("number", ДокументОбъект.КороткийНомер);
	ДанныеОбъекта.Вставить("date", ДокументОбъект.Дата);
	ДанныеОбъекта.Вставить("author", Строка(ДокументОбъект.Автор));
	ДанныеОбъекта.Вставить("activity", Строка(ДокументОбъект.ВидДеятельности));
	ДанныеОбъекта.Вставить("autoDeactivation", ДокументОбъект.АвтоСнятиеАктивности);
	
	Возврат ДанныеОбъекта;
	
КонецФункции

#Область Комментирии

Функция ИзменитьФайлыКомментария(ИдентификаторКомментария, ПрикрепленныеФайлы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрикрепленныеФайлы.Объект КАК Объект,
	|	ПрикрепленныеФайлы.Файл КАК Файл,
	|	Файлы.ОригинальноеИмя КАК ОригинальноеИмя,
	|	Файлы.Наименование КАК Наименование,
	|	Файлы.Каталог КАК Каталог,
	|	Файлы.Расширение КАК Расширение,
	|	ВЫБОР
	|		КОГДА ПрикрепленныеФайлы.Файл В (&ПрикрепленныеФайлы)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Удалить
	|ИЗ
	|	РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО ПрикрепленныеФайлы.Файл = Файлы.Ссылка
	|ГДЕ
	|	ПрикрепленныеФайлы.Объект = &Объект
	|	И ПрикрепленныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.ФайлыКомментария)";
	
	Запрос.УстановитьПараметр("Объект", ИдентификаторКомментария);
	Запрос.УстановитьПараметр("ПрикрепленныеФайлы", ПрикрепленныеФайлы);
	
	НаборЗаписей = РегистрыСведений.ПрикрепленныеФайлы.СоздатьНаборЗаписей();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Файлы = Новый Массив;
	ИконокиФайлов = ПовторноеИспользованиеВызовСервера.ПолучитьРасширенияФайловСИконками();	
	
	// Присоединим ссылки на файлы к исходному тексту комментария
	// нужно пока будем использовать разный вид комментариев в разных объектах
	ШаблонСсылки = "<br><a href=""%1""><span class='saveFile'></span>%2</a>";
	МассивСсылок = Новый Массив;
	
	КаталогФайловНаСервере = ПовторноеИспользованиеВызовСервера.КаталогХраненияФайловНаСервере();
	КаталогСРазделителем = РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(КаталогФайловНаСервере);
	КорневойURL = Константы.КорневойURL.Получить();
	КаталогСлужебныхДанных = Константы.КаталогСлужебныхДанных.Получить();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Удалить Тогда
			НаборЗаписей.Отбор.Объект.Установить(ИдентификаторКомментария);
			НаборЗаписей.Отбор.Файл.Установить(Выборка.Файл);
			НаборЗаписей.Записать();
			
			НаборЗаписей.Очистить();
		Иначе
			ПолноеИмя = КаталогСРазделителем + РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(Выборка.Каталог)
				+ РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(Выборка.Наименование);
				
			Если ИконокиФайлов.Найти(Врег(Выборка.Расширение)) = Неопределено Тогда
				Иконка = "EMPTY.SVG";
			Иначе                  
				Иконка = Врег(Выборка.Расширение) + ".SVG";
			КонецЕсли;
			СсылкаНаИконку = СтрШаблон("%1/%2/css/files/%3", КорневойURL, КаталогСлужебныхДанных, Иконка);
			
			ДанныеФайла = Новый Структура;
			ДанныеФайла.Вставить("id",  XMLСтрока(Выборка.Файл));
			ДанныеФайла.Вставить("src", ПолноеИмя);
			ДанныеФайла.Вставить("icon", СсылкаНаИконку);
			
			Файлы.Добавить(ДанныеФайла);
			
			МассивСсылок.Добавить(СтрШаблон(ШаблонСсылки, ПолноеИмя, Выборка.ОригинальноеИмя));
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Данные", Файлы);
	Результат.Вставить("Представление", СтрСоединить(МассивСсылок));

	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗапрос(Параметры)
	
	ТекстЗапроса = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвязьОбъектов.Заявка КАК Объект
	|ПОМЕСТИТЬ ОбъектыКомментирования
	|ИЗ
	|	РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку КАК СвязьОбъектов
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Источник) = ТИП(Документ.Задача)
	|	И СвязьОбъектов.Объект = &Источник
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СвязьОбъектовСЗаявкамиНаРазработку.Объект
	|ИЗ
	|	РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку КАК СвязьОбъектовСЗаявкамиНаРазработку
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Источник) = ТИП(Документ.Задача)
	|	И СвязьОбъектовСЗаявкамиНаРазработку.Объект = &Источник
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СвязьОбъектовСЗаявкамиНаРазработку.Заявка
	|ИЗ
	|	РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку КАК СвязьОбъектовСЗаявкамиНаРазработку
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Источник) = ТИП(Документ.ЗаявкаНаРазработку)
	|	И СвязьОбъектовСЗаявкамиНаРазработку.Заявка = &Источник
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СвязьОбъектовСЗаявкамиНаРазработку.Объект
	|ИЗ
	|	РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку КАК СвязьОбъектовСЗаявкамиНаРазработку
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Источник) = ТИП(Документ.ЗаявкаНаРазработку)
	|	И СвязьОбъектовСЗаявкамиНаРазработку.Заявка = &Источник
	|	И СвязьОбъектовСЗаявкамиНаРазработку.Объект ССЫЛКА Документ.Задача
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыВерхнегоУровняСтруктурыПодчиненности.ВысшийРодитель
	|ИЗ
	|	РегистрСведений.ОбъектыВерхнегоУровняСтруктурыПодчиненности КАК ОбъектыВерхнегоУровняСтруктурыПодчиненности
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Источник) = ТИП(Справочник.Проекты)
	|	И ОбъектыВерхнегоУровняСтруктурыПодчиненности.ВысшийРодитель = &Источник
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыВерхнегоУровняСтруктурыПодчиненности.Объект
	|ИЗ
	|	РегистрСведений.ОбъектыВерхнегоУровняСтруктурыПодчиненности КАК ОбъектыВерхнегоУровняСтруктурыПодчиненности
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(&Источник) = ТИП(Справочник.Проекты)
	|	И ОбъектыВерхнегоУровняСтруктурыПодчиненности.ВысшийРодитель = &Источник
	|	И ТИПЗНАЧЕНИЯ(ОбъектыВерхнегоУровняСтруктурыПодчиненности.Объект) <> ТИП(Документ.Задача)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументЗадача.Ссылка КАК Объект,
	|	""Задача "" + ДокументЗадача.Номер КАК Номер
	|ПОМЕСТИТЬ НомераОбъектов
	|ИЗ
	|	Документ.Задача КАК ДокументЗадача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыКомментирования КАК ОбъектыКомментирования
	|		ПО ДокументЗадача.Ссылка = ОбъектыКомментирования.Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументЗаявкаНаРазработку.Ссылка,
	|	""Заявка на разработку "" + ДокументЗаявкаНаРазработку.Номер
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ДокументЗаявкаНаРазработку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыКомментирования КАК ОбъектыКомментирования
	|		ПО ДокументЗаявкаНаРазработку.Ссылка = ОбъектыКомментирования.Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументВнутреннееЗадание.Ссылка,
	|	""Внутреннее задание "" + ДокументВнутреннееЗадание.Номер
	|ИЗ
	|	Документ.ВнутреннееЗадание КАК ДокументВнутреннееЗадание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыКомментирования КАК ОбъектыКомментирования
	|		ПО ДокументВнутреннееЗадание.Ссылка = ОбъектыКомментирования.Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СправочникПроекты.Ссылка,
	|	""Проект "" + СправочникПроекты.Код
	|ИЗ
	|	Справочник.Проекты КАК СправочникПроекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыКомментирования КАК ОбъектыКомментирования
	|		ПО СправочникПроекты.Ссылка = ОбъектыКомментирования.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Комментарии.Идентификатор КАК Идентификатор,
	|	НомераОбъектов.Номер КАК НомерОбъекта,
	|	Комментарии.Общедоступный КАК Общедоступный,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы), ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК Филиал
	|ПОМЕСТИТЬ Комментарии
	|ИЗ
	|	РегистрСведений.Комментарии КАК Комментарии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НомераОбъектов КАК НомераОбъектов
	|		ПО Комментарии.Объект = НомераОбъектов.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела.СрезПоследних(
	|				&ТекущаяДата,
	|				Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)
	|					И (ВЫРАЗИТЬ(Данные КАК Справочник.Филиалы)) <> ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК ЛичныеДелаСрезПоследних
	|		ПО Комментарии.Пользователь = ЛичныеДелаСрезПоследних.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Комментарии.Идентификатор КАК Идентификатор,
	|	Комментарии.НомерОбъекта КАК НомерОбъекта
	|ПОМЕСТИТЬ ДоступныеКомментарии
	|ИЗ
	|	Комментарии КАК Комментарии
	|ГДЕ
	|	Комментарии.Общедоступный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Комментарии.Идентификатор,
	|	Комментарии.НомерОбъекта
	|ИЗ
	|	Комментарии КАК Комментарии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО Комментарии.Филиал = Филиалы.Ссылка
	|ГДЕ
	|	НЕ Комментарии.Общедоступный
	|	И &ПользовательИзITФилиала
	|	И Филиалы.ТипФилиала <> ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.НеIT)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Комментарии.Идентификатор,
	|	Комментарии.НомерОбъекта
	|ИЗ
	|	Комментарии КАК Комментарии
	|ГДЕ
	|	НЕ Комментарии.Общедоступный
	|	И НЕ &ПользовательИзITФилиала
	|	И Комментарии.Филиал = &ФилиалПользователя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Комментарии.Период КАК Дата,
	|	ДОБАВИТЬКДАТЕ(Комментарии.Период, ЧАС, &Смещение) КАК ДатаСеанса,
	|	Комментарии.Идентификатор КАК Идентификатор,
	|	Комментарии.Объект КАК Объект,
	|	ДоступныеКомментарии.НомерОбъекта КАК НомерОбъекта,
	|	ВЫБОР
	|		КОГДА Комментарии.Пользователь = &Пользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоАвторКомментария,
	|	Пользователи.Ссылка КАК Автор,
	|	Пользователи.Наименование КАК АвторФИО,
	|	Пользователи.Служебный КАК СлужебныйАвтор,
	|	ЕСТЬNULL(Файлы.Наименование, НЕОПРЕДЕЛЕНО) КАК Аватар,
	|	ЕСТЬNULL(Файлы.ПолучатьИзMinio, ЛОЖЬ) КАК ПолучатьИзMinio,
	|	ВЫБОР
	|		КОГДА Пользователи.Служебный
	|			ТОГДА Комментарии.ПочтаJira
	|		ИНАЧЕ Пользователи.Почта
	|	КОНЕЦ КАК ПочтаПользователя,
	|	Комментарии.Комментарий КАК Комментарий,
	|	Комментарии.Служебный КАК Служебный,
	|	Комментарии.Важный КАК Важный,
	|	ВЫБОР
	|		КОГДА НепросмотренныеКомментарии.Идентификатор ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Непросмотренный,
	|	ВЫБОР
	|		КОГДА СвязиКомментариев.Подчиненный ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВерхнийУровень,
	|	ЕСТЬNULL(СвязиКомментариев.ВысшийРодитель, НЕОПРЕДЕЛЕНО) КАК ВысшийРодитель,
	|	Комментарии.ДатаИзменения КАК ДатаИзменения,
	|	Комментарии.Общедоступный КАК Общедоступный
	|ПОМЕСТИТЬ ДанныеКомментариев
	|ИЗ
	|	РегистрСведений.Комментарии КАК Комментарии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДоступныеКомментарии КАК ДоступныеКомментарии
	|		ПО Комментарии.Идентификатор = ДоступныеКомментарии.Идентификатор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО Комментарии.Пользователь = Пользователи.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ПО (Пользователи.Ссылка = ПрикрепленныеФайлы.Объект)
	|			И (ПрикрепленныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.ОбрезанныйАватарПользователя))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО (Файлы.Ссылка = ПрикрепленныеФайлы.Файл)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НепросмотренныеКомментарии КАК НепросмотренныеКомментарии
	|		ПО Комментарии.Идентификатор = НепросмотренныеКомментарии.Идентификатор
	|			И (НепросмотренныеКомментарии.Пользователь = &Пользователь)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКомментариев КАК СвязиКомментариев
	|		ПО Комментарии.Идентификатор = СвязиКомментариев.Подчиненный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКомментариев.Идентификатор КАК Родитель,
	|	КОЛИЧЕСТВО(СвязиКомментариев.Подчиненный) КАК Количество
	|ПОМЕСТИТЬ ЕстьПодчиненные
	|ИЗ
	|	ДанныеКомментариев КАК ДанныеКомментариев
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКомментариев КАК СвязиКомментариев
	|		ПО ДанныеКомментариев.Идентификатор = СвязиКомментариев.ВысшийРодитель
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеКомментариев.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Файлы.Наименование КАК ИмяФайла,
	|	Файлы.Каталог КАК Каталог,
	|	Файлы.ПолучатьИзMinio КАК ПолучатьИзMinio
	|ИЗ
	|	РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыКомментирования КАК ОбъектыКомментирования
	|		ПО ПрикрепленныеФайлы.Объект = ОбъектыКомментирования.Объект
	|			И (ПрикрепленныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.ИзображениеКомментария))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО ПрикрепленныеФайлы.Файл = Файлы.Ссылка
	|			И (НЕ Файлы.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКомментариев.Идентификатор КАК Идентификатор,
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ПолучатьИзMinio КАК ПолучатьИзMinio,
	|	Файлы.Наименование КАК Наименование,
	|	Файлы.Каталог КАК Каталог,
	|	Файлы.Расширение КАК Расширение
	|ИЗ
	|	ДанныеКомментариев КАК ДанныеКомментариев
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ПО ДанныеКомментариев.Идентификатор = ПрикрепленныеФайлы.Объект
	|			И (ПрикрепленныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.ФайлыКомментария))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО (ПрикрепленныеФайлы.Файл = Файлы.Ссылка)
	|			И (НЕ Файлы.ПометкаУдаления)
	|ИТОГИ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКомментариев.Дата КАК ДатаКомментария,
	|	ДанныеКомментариев.ДатаСеанса КАК ДатаСеанса,
	|	ДанныеКомментариев.Идентификатор КАК Идентификатор,
	|	ДанныеКомментариев.Объект КАК Объект,
	|	ДанныеКомментариев.НомерОбъекта КАК НомерОбъекта,
	|	ДанныеКомментариев.Автор КАК Автор,
	|	ДанныеКомментариев.АвторФИО КАК АвторФИО,
	|	ДанныеКомментариев.Аватар КАК Аватар,
	|	ДанныеКомментариев.ПолучатьИзMinio КАК ПолучатьИзMinio,
	|	ДанныеКомментариев.ПочтаПользователя КАК ПочтаПользователя,
	|	ВЫБОР
	|		КОГДА ДанныеКомментариев.СлужебныйАвтор
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РазрешенОтвет,
	|	ВЫБОР
	|		КОГДА ДанныеКомментариев.ЭтоАвторКомментария
	|			ТОГДА ВЫБОР
	|					КОГДА РАЗНОСТЬДАТ(ДанныеКомментариев.Дата, &ТекущаяДата, МИНУТА) > 30
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РазрешеноУдалениеИзменение,
	|	ДанныеКомментариев.Комментарий КАК Комментарий,
	|	ДанныеКомментариев.Служебный КАК Служебный,
	|	ДанныеКомментариев.Важный КАК Важный,
	|	ДанныеКомментариев.Непросмотренный КАК Непросмотренный,
	|	ДанныеКомментариев.ДатаИзменения КАК ДатаИзменения,
	|	ДанныеКомментариев.Общедоступный КАК Общедоступный,
	|	ДанныеКомментариев.ВысшийРодитель КАК ВысшийРодитель,
	|	ЕСТЬNULL(ЕстьПодчиненные.Количество, 0) КАК КоличествоПодчиненных
	|ИЗ
	|	ДанныеКомментариев КАК ДанныеКомментариев
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЕстьПодчиненные КАК ЕстьПодчиненные
	|		ПО ДанныеКомментариев.Идентификатор = ЕстьПодчиненные.Родитель
	|{ГДЕ
	|	ДанныеКомментариев.ВерхнийУровень КАК ВерхнийУровень,
	|	ДанныеКомментариев.Важный КАК important,
	|	ДанныеКомментариев.Служебный КАК system,
	|	ДанныеКомментариев.Непросмотренный КАК unread}
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеКомментариев.Дата УБЫВ";
	#КонецОбласти
		
	ФилиалПользователя = Параметры.Пользователь.Филиал;
	ТекущийПользователь = Параметры.Пользователь;
	
	Если ЗначениеЗаполнено(ФилиалПользователя) Тогда
		ТипФилиала = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФилиалПользователя, "ТипФилиала");
		ПользовательИзITФилиала = (ТипФилиала <> Перечисления.ТипыФилиалов.НеIT);
	Иначе
		ПользовательИзITФилиала = Ложь;
	КонецЕсли;
	
	Смещение = ПовторноеИспользованиеВызовСервера.ПолучитьСдвигЧасовогоПояса();
	
	ПостроительЗапроса = Новый ПостроительЗапроса(ТекстЗапроса);

	ПостроительЗапроса.Параметры.Вставить("Пользователь", ТекущийПользователь);
	ПостроительЗапроса.Параметры.Вставить("ФилиалПользователя", ФилиалПользователя);
	ПостроительЗапроса.Параметры.Вставить("ПользовательИзITФилиала", ПользовательИзITФилиала);
	ПостроительЗапроса.Параметры.Вставить("ТекущаяДата", ТекущаяДатаСеанса());
	ПостроительЗапроса.Параметры.Вставить("Смещение", Смещение);
	ПостроительЗапроса.Параметры.Вставить("Источник", Параметры.Ссылка);
		
	Если Параметры.Свойство("Фильтр") Тогда
		ОбщегоНазначения.ПостроительЗапросаУстановитьОтбор(
			ПостроительЗапроса, Параметры.Фильтр, ВидСравнения.Равно, Истина);
	Иначе
		ОбщегоНазначения.ПостроительЗапросаУстановитьОтбор(
			ПостроительЗапроса, "ВерхнийУровень", ВидСравнения.Равно, Истина);	
	КонецЕсли;	
	
	Возврат ПостроительЗапроса.ПолучитьЗапрос();
	
КонецФункции

Функция ПолучитьТекстСообщения(ОбъектСсылка, Пользователь, Комментарий, Изменение = Ложь)
	
	ЧастиСообщения = Новый Массив;	
	ШаблоныПисьма = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма();
	
	Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.Задача") Тогда 
		ТекстСтатуса = СтрШаблон("Статус: <b>%1</b>", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "Статус"));
		ШаблонСтатус = СтрЗаменить(ШаблоныПисьма.БлокОсновногоТекста, "<!-- content -->", ТекстСтатуса);
		ШаблонСтатус = СтрЗаменить(ШаблонСтатус, "<!-- font_size -->", "14px");
		ЧастиСообщения.Добавить(ШаблонСтатус); 
	КонецЕсли;
	
	ШаблонПисьма = ШаблоныПисьма.БлокОсновногоТекста;
	
	ТекстШаблона = СтрЗаменить(ШаблоныПисьма.ЗаголовокСобытия, "<!-- event_date -->", Формат(ТекущаяДатаСеанса(), ШаблоныПисьма.ФорматДаты));
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- user_name -->", Строка(Пользователь));
	
	ОписаниеДействия = ?(Изменение, "изменил(-а) комментарий:", "добавил(-а) комментарий:");
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- event -->", ОписаниеДействия);
	
	ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- content -->", ТекстШаблона);
	ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- font_size -->", "14px");
	
	ЧастиСообщения.Добавить(ШаблонПисьма);
	
	ШаблонПисьма = СтрЗаменить(ШаблоныПисьма.Комментарий, "<!-- content -->", Комментарий);
	
	ЧастиСообщения.Добавить(ШаблонПисьма);
	
	Возврат СтрСоединить(ЧастиСообщения, Символы.ПС);

КонецФункции

Функция СформироватьДанныеКомментария(Выборка, ИзображенияКомментариев, ПрикрепленныеФайлы, ВерхнийУровень = Ложь, НуженРодитель = Ложь)
	
	АдресПубликацииФайлов = ОбщегоНазначенияКлиентСервер.ДобавитьСлэш(WebОкружениеВызовСервера.АдресПубликацииФайлов());
	КорневойURL = Константы.КорневойURL.Получить();
	КаталогХраненияАватаров = Константы.КаталогХраненияАватаровПользователей.Получить();
	КаталогПубликацииФайлов = Константы.КаталогПубликацииФайлов.Получить();
	КаталогСлужебныхДанных = Константы.КаталогСлужебныхДанных.Получить();
	
	ВнешнееХранилище = "";
	НастройкиПодключения = ИнтеграцияДополнительныхПодсистемПовтИсп.ПолучитьНастройкиПодключенияКMinio();
	Если НастройкиПодключения <> Неопределено Тогда
		ВнешнееХранилище = СтрШаблон("https://%1:%2/", НастройкиПодключения.Сервер, НастройкиПодключения.Порт);
	КонецЕсли;
	
	РегулярноеВыражение = "(<p><br><\/p>\n?)*(<br>)*<a href\=.*C:[\s\S]*?<span class='saveFile'>[\s\S]*?<\/a>";	
	
	Если ЗначениеЗаполнено(Выборка.Аватар) Тогда								
		Если Выборка.ПолучатьИзMinio Тогда
			Аватарка = СтрШаблон("%1%2/%3", ВнешнееХранилище, КаталогХраненияАватаров, Выборка.Аватар);
		Иначе
			КаталогВладельца = Строка(Выборка.Автор.УникальныйИдентификатор());
			Аватарка = СтрШаблон("%1/%2/%3/%4", КорневойURL, КаталогХраненияАватаров, КаталогВладельца, Выборка.Аватар);
		КонецЕсли;	
	Иначе
		Аватарка = "";
	КонецЕсли;
	
	АвторКомментария = Новый Структура("name, mail, image", Выборка.АвторФИО, Выборка.ПочтаПользователя, Аватарка);
	ОбъектКомментирования = Новый Структура("id, name, link", XMLСтрока(Выборка.Объект), Выборка.НомерОбъекта, ПолучитьНавигационнуюСсылку(Выборка.Объект));
	ДатаКомментария = ЗаписатьДатуJSON(Выборка.ДатаКомментария, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.ЛокальнаяДата);
	Комментарий = Выборка.Комментарий;
	
	// Пока в комметнарии нет нормальных ссылок на прикрепленные картинки, надо их заменять
	Пока ИзображенияКомментариев.Следующий() Цикл
		ИмяФайлаБезРасширения = РаботаСФайламиКлиентСервер.ИмяФайлаБезРасширения(ИзображенияКомментариев.ИмяФайла);
		
		Если СтрНайти(Комментарий, ИмяФайлаБезРасширения) <> 0 Тогда
			Если ИзображенияКомментариев.ПолучатьИзMinio Тогда
				ПолноеИмяФайла = СтрШаблон("%1%2/%3", ВнешнееХранилище, КаталогПубликацииФайлов, ИзображенияКомментариев.ИмяФайла);
			Иначе
				ПолноеИмяФайла = СтрШаблон("%1%2/%3", АдресПубликацииФайлов, 
					ИзображенияКомментариев.Каталог, ИзображенияКомментариев.ИмяФайла);
			КонецЕсли;
				
			Комментарий = СтрЗаменить(Комментарий, СтрШаблон("src=""%1""", ИмяФайлаБезРасширения), СтрШаблон("src=""%1""", ПолноеИмяФайла));
			Комментарий = СтрЗаменить(Комментарий, СтрШаблон("link=%1", ИмяФайлаБезРасширения), СтрШаблон("link=%1", ПолноеИмяФайла));
			Комментарий = СтрЗаменить(Комментарий, СтрШаблон("href='%1'", ИмяФайлаБезРасширения), СтрШаблон("href='%1'", ПолноеИмяФайла));
		КонецЕсли;			
	КонецЦикла;
	
	ИзображенияКомментариев.Сбросить();
	Файлы = Новый Массив;
	
	Если ПрикрепленныеФайлы.НайтиСледующий(Выборка.Идентификатор, "Идентификатор") Тогда
		// пока будем удалять ссылку из комментария на лету, потом нужно конвертировать тексты комментариев, и удалить лишнее
		Комментарий = СтрЗаменитьПоРегулярномуВыражению(Комментарий, РегулярноеВыражение, "");
		
		ВыборкаФайлы = ПрикрепленныеФайлы.Выбрать();
		ИконокиФайлов = ПовторноеИспользованиеВызовСервера.ПолучитьРасширенияФайловСИконками();
		
		Пока ВыборкаФайлы.Следующий() Цикл			
			Если ИзображенияКомментариев.ПолучатьИзMinio Тогда
				СсылкаНаФайл =  СтрШаблон("%1%2/%3", ВнешнееХранилище, КаталогПубликацииФайлов, ВыборкаФайлы.Наименование);
			Иначе
				СсылкаНаФайл = СтрШаблон("%1/%2/%3/%4", КорневойURL, КаталогПубликацииФайлов, ВыборкаФайлы.Каталог, ВыборкаФайлы.Наименование);
			КонецЕсли;
			
			Если ИконокиФайлов.Найти(Врег(ВыборкаФайлы.Расширение)) = Неопределено Тогда
				Иконка = "EMPTY.SVG";
			Иначе                  
				Иконка = Врег(ВыборкаФайлы.Расширение) + ".SVG";
			КонецЕсли;
			СсылкаНаИконку = СтрШаблон("%1/%2/css/files/%3", КорневойURL, КаталогСлужебныхДанных, Иконка);
			
			ДанныеФайла = Новый Структура;
			ДанныеФайла.Вставить("id", XMLСтрока(ВыборкаФайлы.Ссылка));
			ДанныеФайла.Вставить("src", СсылкаНаФайл);
			ДанныеФайла.Вставить("icon", СсылкаНаИконку);

			Файлы.Добавить(ДанныеФайла);
		КонецЦикла;
		
		ПрикрепленныеФайлы.Сбросить();
	КонецЕсли;
	
	РазрешеноУдалениеИзменение = Выборка.РазрешеноУдалениеИзменение И (Выборка.КоличествоПодчиненных = 0);
	
	ДанныеКомментария = Новый Структура;
	ДанныеКомментария.Вставить("id", Строка(Выборка.Идентификатор));
	ДанныеКомментария.Вставить("date", ДатаКомментария);
	ДанныеКомментария.Вставить("user", АвторКомментария);
	ДанныеКомментария.Вставить("comment", Комментарий);
	ДанныеКомментария.Вставить("public", Выборка.Общедоступный);
	ДанныеКомментария.Вставить("important", Выборка.Важный);
	ДанныеКомментария.Вставить("system", Выборка.Служебный);
	ДанныеКомментария.Вставить("unread", Выборка.Непросмотренный);
	ДанныеКомментария.Вставить("allowEdit", РазрешеноУдалениеИзменение);	
	ДанныеКомментария.Вставить("allowAnswer", Выборка.РазрешенОтвет);	
	
	ДанныеКомментария.Вставить("object", ОбъектКомментирования);
	ДанныеКомментария.Вставить("files", Файлы);
	
	Если НуженРодитель Тогда
		ДанныеКомментария.Вставить("upperParent", Выборка.ВысшийРодитель);
		
	ИначеЕсли ВерхнийУровень Тогда
		ДанныеКомментария.Вставить("nestedNumber", Выборка.КоличествоПодчиненных);
		
	Иначе
		СтруктураРодитель = Новый Структура;
		СтруктураРодитель.Вставить("id", Выборка.Родитель);
		СтруктураРодитель.Вставить("user", Выборка.КомуОтветили);
		СтруктураРодитель.Вставить("data", ЗаписатьДатуJSON(Выборка.ДатаРодителя, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.ЛокальнаяДата));
		
		ДанныеКомментария.Вставить("parent", СтруктураРодитель);	
	КонецЕсли;
	
	Возврат ДанныеКомментария;
	
КонецФункции

#КонецОбласти

#Область ЧтениеFormData

Функция ПрочитатьСообщение(заголовки, тело)
	
	Разделитель = ПолучитьРазделительСоставногоСообщения(заголовки);
	Маркеры = Новый Массив();
	Маркеры.Добавить("--" + Разделитель);
	Маркеры.Добавить("--" + Разделитель + Символы.ПС);
	Маркеры.Добавить("--" + Разделитель + Символы.ВК);
	Маркеры.Добавить("--" + Разделитель + Символы.ВК + Символы.ПС);
	Маркеры.Добавить("--" + Разделитель + "--");  
	
	ИндексКартинки = 1;
	ИндексФайла = 1;
	
	СтруктураСообщения = Новый Соответствие;
	ФайлыКомментария = Новый Соответствие;
	    
	ЧтениеДанных = Новый ЧтениеДанных(Тело);               
	// Переходим к началу первой части
	ЧтениеДанных.ПропуститьДо(Маркеры);
	// Далее в цикле читаем все части
	Пока Истина Цикл
		Часть = ЧтениеДанных.ПрочитатьДо(Маркеры);
		Если Не Часть.МаркерНайден Тогда
			// Неправильно сформированное сообщение
			Прервать;
		КонецЕсли;
		ЧтениеЧасти = Новый ЧтениеДанных(Часть.ОткрытьПотокДляЧтения());
		ЗаголовкиЧасти = ПрочитатьЗаголовки(ЧтениеЧасти);
		ПараметрЧасти = ПолучитьПараметр(ЗаголовкиЧасти);
		
		Если ПараметрЧасти.Свойство("ИмяФайла") Тогда	
			ФайлыКомментария.Вставить(ПараметрЧасти.ИмяФайла, ЧтениеЧасти.Прочитать().ПолучитьДвоичныеДанные());		
		Иначе
			//возможно добавить какое-то соответствие, для правильного названия параметра в структуре
			СтруктураСообщения.Вставить(ПараметрЧасти.Имя, ЧтениеЧасти.ПрочитатьСимволы());
		КонецЕсли;
			
		Если Часть.ИндексМаркера = 4 Тогда
			// Прочитали последнюю часть
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураСообщения.Вставить("ФайлыКомментария", ФайлыКомментария);
	
	Возврат СтруктураСообщения;
	
КонецФункции

Функция СохранениеФайловКомментария(ОбъектСсылка, ИдентификаторКомментария, ФайлыКомментария)
	
	ТаблицаОписанияФайлов = РаботаСФайламиСервер.ТаблицаОписанияФайлов();
	
	// Получим прочие данные, которые пригодятся при выгрузке данных
	КаталогФайловНаСервере = ПовторноеИспользованиеВызовСервера.КаталогХраненияФайловНаСервере();
	КаталогТекущихФайлов = Строка(ИдентификаторКомментария);
	КаталогФайловНаСервере = КаталогФайловНаСервере + РаботаСФайламиКлиентСервер.ДобавитьРазделительПути(КаталогТекущихФайлов);
	КорневойURL = Константы.КорневойURL.Получить();
	КаталогСлужебныхДанных = Константы.КаталогСлужебныхДанных.Получить();
	
	// Создадим каталог файлов. Даже если каталог уже существует, процедура не
	// вызовет ошибку.
	СоздатьКаталог(КаталогФайловНаСервере);
	
	Для Каждого Файл Из ФайлыКомментария Цикл		
		СсылкаНаНовыйФайл = Справочники.Файлы.ПолучитьСсылку();
		НовоеИмяФайла = РаботаСФайламиКлиентСервер.СоздатьУникальноеИмяФайла(Файл.Ключ, СсылкаНаНовыйФайл);
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Файл.Значение, ИдентификаторКомментария);
		
		// Поместим информацию о файле в таблицу
		НоваяСтрока = ТаблицаОписанияФайлов.Добавить();
		НоваяСтрока.Имя = НовоеИмяФайла;
		НоваяСтрока.ОригинальноеИмя = Файл.Ключ;
		НоваяСтрока.Назначение = Перечисления.НазначенияФайлов.ФайлыКомментария;
		НоваяСтрока.Описание = "Содержимое комментария";			
		НоваяСтрока.АдресВоВременномХранилище = АдресВоВременномХранилище;
		НоваяСтрока.Ссылка = СсылкаНаНовыйФайл;
		НоваяСтрока.НовыйФайл = Истина;
	КонецЦикла;		
	// Сохраним в базу информацию о текущих файлах
	ТаблицаОписанияФайлов.ЗаполнитьЗначения(КаталогТекущихФайлов, "Каталог");
	
	ПараметрыСохранения = Новый Структура;
	ИнтеграцияДополнительныхПодсистем.ДополнитьПараметрыДляСохраненияФайлов(ОбъектСсылка, ПараметрыСохранения);
	
	РаботаСФайламиСервер.СохранитьФайлыНаСервере(ОбъектСсылка, ТаблицаОписанияФайлов, ПараметрыСохранения, ИдентификаторКомментария);

	Файлы = Новый Массив;
	ИконокиФайлов = ПовторноеИспользованиеВызовСервера.ПолучитьРасширенияФайловСИконками();	
	
	// Присоединим ссылки на файлы к исходному тексту комментария
	// нужно пока будем использовать разный вид комментариев в разных объектах
	ШаблонСсылки = "<br><a href=""%1""><span class='saveFile'></span>%2</a>";
	МассивСсылок = Новый Массив;
	Для Каждого Файл Из ТаблицаОписанияФайлов Цикл
		МассивСсылок.Добавить(СтрШаблон(ШаблонСсылки, Файл.ПолноеИмя, Файл.ОригинальноеИмя));

		Расширение = РаботаСФайламиКлиентСервер.РасширениеИмениФайла(Файл.Имя, Истина);
		
		Если ИконокиФайлов.Найти(Врег(Расширение)) = Неопределено Тогда
			Иконка = "EMPTY.SVG";
		Иначе                  
			Иконка = Врег(Расширение) + ".SVG";
		КонецЕсли;
		СсылкаНаИконку = СтрШаблон("%1/%2/css/files/%3", КорневойURL, КаталогСлужебныхДанных, Иконка);
		
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("id",  XMLСтрока(Файл.Ссылка));
		ДанныеФайла.Вставить("src", Файл.ПолноеИмя);
		ДанныеФайла.Вставить("icon", СсылкаНаИконку);
		
		Файлы.Добавить(ДанныеФайла);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Данные", Файлы);
	Результат.Вставить("Представление", СтрСоединить(МассивСсылок));
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьРазделительСоставногоСообщения(Заголовки)
	
	ТипСодержимого = Заголовки.Получить("Content-Type");
	Свойства = СтрРазделить(ТипСодержимого, ";", Ложь);
	Граница = Неопределено;
	
	Для Каждого Свойство Из Свойства Цикл
		Части = СтрРазделить(Свойство, "=", Ложь);
		ИмяСвойства = СокрЛП(Части[0]);
		Если ИмяСвойства <> "boundary" Тогда
			Продолжить;
		КонецЕсли;
		
		Граница = СокрЛП(Части[1]);    
		Прервать;
	КонецЦикла;
	
	Возврат Граница;
	
КонецФункции									 

Функция ПрочитатьЗаголовки(Чтение)
	
	Заголовки = Новый Соответствие();
	
	Пока Истина Цикл
		Стр = Чтение.ПрочитатьСтроку();
		Если Стр = "" Тогда
			Прервать;
		КонецЕсли;
		
		Части = СтрРазделить(Стр, ":");
		ИмяЗаголовка = СокрЛП(Части[0]);
		Значение = СокрЛП(Части[1]);
		Заголовки.Вставить(ИмяЗаголовка, Значение);
	КонецЦикла;
	
	Возврат Заголовки;
	
КонецФункции

Функция ПолучитьПараметр(Заголовки)
	
	Описание = Заголовки.Получить("Content-Disposition");
	Свойства = СтрРазделить(Описание, ";", Ложь);
	
	Параметр = Новый Структура;
	Параметр.Вставить("Имя", Неопределено);
	
	Для Каждого Свойство Из Свойства Цикл
		Части = СтрРазделить(Свойство, "=", Ложь);
		ИмяСвойства = СокрЛП(Части[0]);
		
		Если ИмяСвойства = "filename" Тогда
			Параметр.Вставить("ИмяФайла", СтрЗаменить(СокрЛП(Части[1]), """", ""));
//			Параметр.Вставить("Расширение", СтрЗаменитьПоРегулярномуВыражению(Параметр.ИмяФайла, "[\s\S]*?\.", ""));
		КонецЕсли; 
		
		Если ИмяСвойства = "name" Тогда
			Параметр.Имя = СтрЗаменить(СокрЛП(Части[1]), """", "");
		КонецЕсли;     
		
//		Имя = СокрЛП(Части[1]);       
//		Прервать;		
	КонецЦикла;
	
	Возврат Параметр;
	
КонецФункции

#КонецОбласти

#Область ДанныеДоски

Функция СформироватьДанныеДоски(Знач Параметры)
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	КлючиНастроек = Обработки.Канбан.СвойстваСохраняемойНастройки();
	ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Пользователь, "ИдентификаторПользователяИБ");
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
	СохраненныеНастройки = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(
		КлючиНастроек.КлючОбъекта, КлючиНастроек.КлючНастроек, ПользовательИБ.Имя);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Параметры.Тип = Перечисления.ТипыКанбана.ЗадачаНовый Тогда
		Данные = СформироватьДанныеТипЗадачаНовый(СохраненныеНастройки, Параметры.Филиал);
		
	ИначеЕсли Параметры.Тип = Перечисления.ТипыКанбана.Кастомный Тогда
		Данные = СформироватьДанныеТипКастомный(Параметры.Филиал);	
		
	ИначеЕсли Параметры.Тип = Перечисления.ТипыКанбана.ВнутреннееЗаданиеНовый Тогда		
		Данные = СформироватьДанныеТипВнутреннееЗадание(СохраненныеНастройки, Параметры.Филиал);

	ИначеЕсли Параметры.Тип = Перечисления.ТипыКанбана.ЗаявкиМоегоФилиала Тогда				
		Данные = СформироватьДанныеТипЗаявкиМоегоФилиала(СохраненныеНастройки, Параметры.Филиал);
		
	ИначеЕсли Параметры.Тип = Перечисления.ТипыКанбана.ПулЗаявокНовый Тогда	
		Данные = СформироватьДанныеТипПулЗаявок(СохраненныеНастройки, Параметры);
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция СформироватьДанныеТипЗадачаНовый(Знач СохраненныеНастройки, Знач Филиал)
	
	Данные = Новый Массив;
	ТекущаяДата = ТекущаяДатаСеанса();
	
	НастройкиДоски = СохраненныеНастройки["НастройкиКанбанЗадача"];
	
	#Область ТекстЗапроса
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументЗадача.Ссылка КАК Ссылка,
	|	ОчередьКанбан.Порядок КАК Порядок,
	|	ДокументЗадача.СистемаУчета КАК СистемаУчета,
	|	СтатусыОбъектов.Ссылка КАК Статус,
	|	ДокументЗадача.Назначена КАК Назначена,
	|	ДокументЗадача.Назначение КАК Назначение,
	|	ДокументЗадача.ОбъектОснование КАК Заявка
	|ПОМЕСТИТЬ ЗавершенныеЗадачиФилиал
	|ИЗ
	|	Документ.Задача КАК ДокументЗадача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|		ПО (ДокументЗадача.Ссылка = (ВЫРАЗИТЬ(ОчередьКанбан.Объект КАК Документ.Задача)))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО (ОчередьКанбан.КлючОчередиОбъекта = КлючОчереди.Ссылка)
	|			И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Канбан))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана.ЭлементыЭтапа КАК ЭтапыКанбанаЭлементыЭтапа
	|		ПО (ЭтапыКанбанаЭлементыЭтапа.Ссылка = КлючОчереди.ЭтапКанбана)
	|			И (ЭтапыКанбанаЭлементыЭтапа.Элемент = ДокументЗадача.Статус)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ДокументЗадача.Статус = СтатусыОбъектов.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО (ЗаявкаНаРазработку.Ссылка = ДокументЗадача.ОбъектОснование)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (ЗаявкаНаРазработку.Автор = Пользователи.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО (Филиалы.Ссылка = &Филиал)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Филиалы.ТипФилиала <> ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.НеIT)
	|				ТОГДА ДокументЗадача.Филиал = &Филиал
	|			ИНАЧЕ Пользователи.Филиал = &Филиал
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА СтатусыОбъектов.Ссылка В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|					ИЛИ СтатусыОбъектов.Родитель В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|{ГДЕ
	|	ЗаявкаНаРазработку.Продукт КАК Продукт,
	|	ДокументЗадача.Назначена КАК Назначена,
	|	ДокументЗадача.Автор КАК Автор,
	|	ДокументЗадача.СистемаУчета КАК СистемаУчета,
	|	ДокументЗадача.КомандаРазработчиков КАК Команда,
	|	ДокументЗадача.Назначение КАК Назначение,
	|	ДокументЗадача.Направление КАК Направление,
	|	ДокументЗадача.Проект КАК Проект}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументЗадача.Ссылка КАК Ссылка,
	|	ОчередьКанбан.Порядок КАК Порядок,
	|	ДокументЗадача.СистемаУчета КАК СистемаУчета,
	|	СтатусыОбъектов.Ссылка КАК Статус,
	|	ДокументЗадача.Назначена КАК Назначена,
	|	ДокументЗадача.Назначение КАК Назначение,
	|	ДокументЗадача.ОбъектОснование КАК Заявка
	|ПОМЕСТИТЬ ЗавершенныеЗадачиКоманда
	|ИЗ
	|	Документ.Задача КАК ДокументЗадача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|		ПО (ДокументЗадача.Ссылка = (ВЫРАЗИТЬ(ОчередьКанбан.Объект КАК Документ.Задача)))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО (ОчередьКанбан.КлючОчередиОбъекта = КлючОчереди.Ссылка)
	|			И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Канбан))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана.ЭлементыЭтапа КАК ЭтапыКанбанаЭлементыЭтапа
	|		ПО (ЭтапыКанбанаЭлементыЭтапа.Ссылка = КлючОчереди.ЭтапКанбана)
	|			И (ЭтапыКанбанаЭлементыЭтапа.Элемент = ДокументЗадача.Статус)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ДокументЗадача.Статус = СтатусыОбъектов.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО (ЗаявкаНаРазработку.Ссылка = ДокументЗадача.ОбъектОснование)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (ЗаявкаНаРазработку.Автор = Пользователи.Ссылка)
	|ГДЕ
	|	ДокументЗадача.КомандаРазработчиков = &Филиал
	|	И ВЫБОР
	|			КОГДА СтатусыОбъектов.Ссылка В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|					ИЛИ СтатусыОбъектов.Родитель В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|{ГДЕ
	|	ЗаявкаНаРазработку.Продукт КАК Продукт,
	|	ДокументЗадача.Назначена КАК Назначена,
	|	ДокументЗадача.Автор КАК Автор,
	|	ДокументЗадача.СистемаУчета КАК СистемаУчета,
	|	ДокументЗадача.КомандаРазработчиков КАК Команда,
	|	ДокументЗадача.Назначение КАК Назначение,
	|	ДокументЗадача.Направление КАК Направление,
	|	ДокументЗадача.Проект КАК Проект}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОчередьКанбан.Объект КАК Задача,
	|	ОчередьКанбан.Порядок КАК Порядок,
	|	ЭтапыКанбанаЭлементыЭтапа.Элемент КАК Статус
	|ПОМЕСТИТЬ ПорядокЗадач
	|ИЗ
	|	РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО ОчередьКанбан.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|			И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Канбан))
	|			И (КлючОчереди.Филиал = &Филиал)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана.ЭлементыЭтапа КАК ЭтапыКанбанаЭлементыЭтапа
	|		ПО (КлючОчереди.ЭтапКанбана = ЭтапыКанбанаЭлементыЭтапа.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана КАК ЭтапыКанбана
	|		ПО (ЭтапыКанбана.Ссылка = ЭтапыКанбанаЭлементыЭтапа.Ссылка)
	|			И (ЭтапыКанбана.ТипКанбана = ЗНАЧЕНИЕ(Перечисление.ТипыКанбана.ЗадачаНовый))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументЗадача.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ПорядокЗадач.Порядок, 999) КАК Порядок,
	|	ДокументЗадача.СистемаУчета КАК СистемаУчета,
	|	СтатусыОбъектов.Ссылка КАК Статус,
	|	ДокументЗадача.Назначена КАК Назначена,
	|	ДокументЗадача.Назначение КАК Назначение,
	|	ДокументЗадача.ОбъектОснование КАК Заявка
	|ПОМЕСТИТЬ Объекты
	|ИЗ
	|	Документ.Задача КАК ДокументЗадача
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокЗадач КАК ПорядокЗадач
	|		ПО ДокументЗадача.Ссылка = ПорядокЗадач.Задача
	|			И ДокументЗадача.Статус = ПорядокЗадач.Статус
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ДокументЗадача.Статус = СтатусыОбъектов.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО (ЗаявкаНаРазработку.Ссылка = ДокументЗадача.ОбъектОснование)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (ЗаявкаНаРазработку.Автор = Пользователи.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО (Филиалы.Ссылка = &Филиал)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Филиалы.ТипФилиала <> ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.НеIT)
	|				ТОГДА ДокументЗадача.Филиал = &Филиал
	|			ИНАЧЕ Пользователи.Филиал = &Филиал
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА СтатусыОбъектов.Ссылка В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|					ИЛИ СтатусыОбъектов.Родитель В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|{ГДЕ
	|	ЗаявкаНаРазработку.Продукт КАК Продукт,
	|	ДокументЗадача.Назначена КАК Назначена,
	|	ДокументЗадача.Автор КАК Автор,
	|	ДокументЗадача.СистемаУчета КАК СистемаУчета,
	|	ДокументЗадача.КомандаРазработчиков КАК Команда,
	|	ДокументЗадача.Назначение КАК Назначение,
	|	ДокументЗадача.Направление КАК Направление,
	|	ДокументЗадача.Проект КАК Проект}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументЗадача.Ссылка,
	|	ЕСТЬNULL(ПорядокЗадач.Порядок, 999),
	|	ДокументЗадача.СистемаУчета,
	|	СтатусыОбъектов.Ссылка,
	|	ДокументЗадача.Назначена,
	|	ДокументЗадача.Назначение,
	|	ДокументЗадача.ОбъектОснование
	|ИЗ
	|	Документ.Задача КАК ДокументЗадача
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокЗадач КАК ПорядокЗадач
	|		ПО ДокументЗадача.Ссылка = ПорядокЗадач.Задача
	|			И ДокументЗадача.Статус = ПорядокЗадач.Статус
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ДокументЗадача.Статус = СтатусыОбъектов.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО (ЗаявкаНаРазработку.Ссылка = ДокументЗадача.ОбъектОснование)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (ЗаявкаНаРазработку.Автор = Пользователи.Ссылка)
	|ГДЕ
	|	ДокументЗадача.КомандаРазработчиков = &Филиал
	|	И ВЫБОР
	|			КОГДА СтатусыОбъектов.Ссылка В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|					ИЛИ СтатусыОбъектов.Родитель В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|{ГДЕ
	|	ЗаявкаНаРазработку.Продукт КАК Продукт,
	|	ДокументЗадача.Назначена КАК Назначена,
	|	ДокументЗадача.Автор КАК Автор,
	|	ДокументЗадача.СистемаУчета КАК СистемаУчета,
	|	ДокументЗадача.КомандаРазработчиков КАК Команда,
	|	ДокументЗадача.Назначение КАК Назначение,
	|	ДокументЗадача.Направление КАК Направление,
	|	ДокументЗадача.Проект КАК Проект}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗавершенныеЗадачиФилиал.Ссылка,
	|	ЗавершенныеЗадачиФилиал.Порядок,
	|	ЗавершенныеЗадачиФилиал.СистемаУчета,
	|	ЗавершенныеЗадачиФилиал.Статус,
	|	ЗавершенныеЗадачиФилиал.Назначена,
	|	ЗавершенныеЗадачиФилиал.Назначение,
	|	ЗавершенныеЗадачиФилиал.Заявка
	|ИЗ
	|	ЗавершенныеЗадачиФилиал КАК ЗавершенныеЗадачиФилиал
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗавершенныеЗадачиКоманда.Ссылка,
	|	ЗавершенныеЗадачиКоманда.Порядок,
	|	ЗавершенныеЗадачиКоманда.СистемаУчета,
	|	ЗавершенныеЗадачиКоманда.Статус,
	|	ЗавершенныеЗадачиКоманда.Назначена,
	|	ЗавершенныеЗадачиКоманда.Назначение,
	|	ЗавершенныеЗадачиКоманда.Заявка
	|ИЗ
	|	ЗавершенныеЗадачиКоманда КАК ЗавершенныеЗадачиКоманда
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Объекты.Статус КАК Статус,
	|	Объекты.Порядок КАК Порядок,
	|	Объекты.Ссылка КАК Ссылка,
	|	Объекты.СистемаУчета КАК СистемаУчета,
	|	Объекты.Назначена КАК Назначена,
	|	Объекты.Назначение КАК Назначение,
	|	Объекты.Заявка КАК Заявка
	|ПОМЕСТИТЬ ОбъектыКанбана
	|ИЗ
	|	Объекты КАК Объекты
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененийОбъектовПоСобытиям КАК ИсторияИзмененийОбъектовПоСобытиям
	|		ПО (Объекты.Ссылка = (ВЫРАЗИТЬ(ИсторияИзмененийОбъектовПоСобытиям.Объект КАК Документ.Задача)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Комментарии КАК Комментарии
	|		ПО (Объекты.Ссылка = (ВЫРАЗИТЬ(Комментарии.Объект КАК Документ.Задача)))}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТегиОбъектов КАК ТегиОбъектов
	|		ПО (Объекты.Ссылка = (ВЫРАЗИТЬ(ТегиОбъектов.Объект КАК Документ.Задача)))}
	|{ГДЕ
	|	(ЕСТЬNULL(ИсторияИзмененийОбъектовПоСобытиям.Период, ЕСТЬNULL(Комментарии.Период, ДАТАВРЕМЯ(1, 1, 1)))) КАК ДатаИзменения,
	|	ТегиОбъектов.Тег КАК Тег}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Объекты.Статус КАК Статус,
	|	Объекты.Порядок КАК ПорядокВОчереди,
	|	Задача.Ссылка КАК Объект,
	|	Задача.ОбъектОснование КАК Заявка,
	|	Задача.Номер КАК Номер,
	|	Задача.Дата КАК ДатаСоздания,
	|	Задача.Наименование КАК Наименование,
	|	Задача.Проект КАК Проект,
	|	Задача.Назначена КАК Назначенный,
	|	Задача.ОценкаStoryPoint КАК ОценкаStoryPoint,
	|	ЗаявкаНаРазработку.Назначение КАК Назначение,
	|	ЗаявкаНаРазработку.СерьезностьОшибки КАК СерьезностьОшибки,
	|	Задача.ДатаНачалаРазработки КАК ДатаНачалаРазработки,
	|	Объекты.СистемаУчета КАК СистемаУчета,
	|	ЕСТЬNULL(ЗаявкаНаРазработкуСистемыРазработки.ГруппаЗаказчиков, НЕОПРЕДЕЛЕНО) КАК ГруппаЗаказчиков
	|ПОМЕСТИТЬ ОтобранныеОбъектыДляВывода
	|ИЗ
	|	ОбъектыКанбана КАК Объекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК Задача
	|		ПО Объекты.Ссылка = Задача.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО (Задача.ОбъектОснование = ЗаявкаНаРазработку.Ссылка)
	|		{ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ЗаявкаНаРазработкуСистемыРазработки
	|		ПО (Задача.ОбъектОснование = ЗаявкаНаРазработкуСистемыРазработки.Ссылка)
	|			И (Задача.СистемаУчета = ЗаявкаНаРазработкуСистемыРазработки.Система)}
	|{ГДЕ
	|	ЗаявкаНаРазработкуСистемыРазработки.ГруппаЗаказчиков КАК ГруппаЗаказчиков}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеОбъектыДляВывода.Объект КАК Объект,
	|	Участники.Пользователь КАК Участник,
	|	ПРЕДСТАВЛЕНИЕ(Участники.Роль) КАК Роль,
	|	ВЫБОР
	|		КОГДА Участники.Роль = ЗНАЧЕНИЕ(Справочник.РолиУчастников.Заказчик)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПорядокРоли
	|ПОМЕСТИТЬ УчастникиЗадач
	|ИЗ
	|	ОтобранныеОбъектыДляВывода КАК ОтобранныеОбъектыДляВывода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Участники КАК Участники
	|		ПО ОтобранныеОбъектыДляВывода.Объект = Участники.Объект
	|ГДЕ
	|	Участники.Роль В (ЗНАЧЕНИЕ(Справочник.РолиУчастников.Автор), ЗНАЧЕНИЕ(Справочник.РолиУчастников.Заказчик))
	|	И НЕ Участники.Скрытый
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвойстваЗадачСрезПоследних.Объект,
	|	СвойстваЗадачСрезПоследних.Исполнитель,
	|	""Разработчик"",
	|	3
	|ИЗ
	|	РегистрСведений.СвойстваЗадач.СрезПоследних(
	|			&ТекущаяДата,
	|			Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ВРаботе)
	|				И Объект В
	|					(ВЫБРАТЬ
	|						ОтобранныеОбъектыДляВывода.Объект
	|					ИЗ
	|						ОтобранныеОбъектыДляВывода)) КАК СвойстваЗадачСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвойстваЗадачСрезПоследних.Объект,
	|	СвойстваЗадачСрезПоследних.Исполнитель,
	|	""Тестировщик"",
	|	4
	|ИЗ
	|	РегистрСведений.СвойстваЗадач.СрезПоследних(
	|			&ТекущаяДата,
	|			Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Тестирование)
	|				И Объект В
	|					(ВЫБРАТЬ
	|						ОтобранныеОбъектыДляВывода.Объект
	|					ИЗ
	|						ОтобранныеОбъектыДляВывода)) КАК СвойстваЗадачСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтобранныеОбъектыДляВывода.Объект,
	|	ОтобранныеОбъектыДляВывода.Назначенный,
	|	""Назначенный"",
	|	5
	|ИЗ
	|	ОтобранныеОбъектыДляВывода КАК ОтобранныеОбъектыДляВывода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеОбъектыДляВывода.Объект КАК Объект,
	|	СУММА(ПроизводственныйКалендарь.КоличествоРабочихЧасов) КАК КоличествоРабочихЧасов,
	|	СУММА(1) КАК КоличествоРабочихДней
	|ПОМЕСТИТЬ ЧасыРазработкиЗадач
	|ИЗ
	|	ОтобранныеОбъектыДляВывода КАК ОтобранныеОбъектыДляВывода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|		ПО (ПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ОтобранныеОбъектыДляВывода.ДатаНачалаРазработки И &КонецПредыдущегоДня)
	|ГДЕ
	|	ОтобранныеОбъектыДляВывода.ДатаНачалаРазработки > ДАТАВРЕМЯ(1, 1, 1)
	|	И ПроизводственныйКалендарь.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Выходной)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтобранныеОбъектыДляВывода.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеОбъектыДляВывода.Объект КАК Объект,
	|	СУММА(Трудозатраты.Затрата) КАК Затрата
	|ПОМЕСТИТЬ ТрудозатратыОбъектов
	|ИЗ
	|	ОтобранныеОбъектыДляВывода КАК ОтобранныеОбъектыДляВывода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК Трудозатраты
	|		ПО ОтобранныеОбъектыДляВывода.Объект = Трудозатраты.Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтобранныеОбъектыДляВывода.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеЗадачи.Объект КАК Объект,
	|	МАКСИМУМ(ДокументСпринт.ДатаОкончания) КАК ДатаОкончания
	|ПОМЕСТИТЬ МаксимальныеДатыОкончанияСпринтов
	|ИЗ
	|	ОтобранныеОбъектыДляВывода КАК ОтобранныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ПО (СоставСпринтов.Объект = ОтобранныеЗадачи.Объект)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|		ПО (ДокументСпринт.Ссылка = СоставСпринтов.Спринт)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтобранныеЗадачи.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныеДатыОкончанияСпринтов.Объект КАК Объект,
	|	МАКСИМУМ(СоставСпринтов.Спринт) КАК Спринт
	|ПОМЕСТИТЬ ПоследнийСпринтЗадачи
	|ИЗ
	|	МаксимальныеДатыОкончанияСпринтов КАК МаксимальныеДатыОкончанияСпринтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ПО (СоставСпринтов.Объект = МаксимальныеДатыОкончанияСпринтов.Объект)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|		ПО (ДокументСпринт.ДатаОкончания = МаксимальныеДатыОкончанияСпринтов.ДатаОкончания)
	|			И (СоставСпринтов.Спринт = ДокументСпринт.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	МаксимальныеДатыОкончанияСпринтов.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыКанбанаЭлементыЭтапа.Ссылка КАК Этап,
	|	ЭтапыКанбанаЭлементыЭтапа.Элемент КАК Статус,
	|	ПорядокЭтаповКанбана.Порядок КАК Порядок
	|ПОМЕСТИТЬ ПорядокЭтапа
	|ИЗ
	|	Справочник.ЭтапыКанбана.ЭлементыЭтапа КАК ЭтапыКанбанаЭлементыЭтапа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана КАК ЭтапыКанбана
	|		ПО ЭтапыКанбанаЭлементыЭтапа.Ссылка = ЭтапыКанбана.Ссылка
	|			И (ЭтапыКанбана.ТипКанбана = ЗНАЧЕНИЕ(Перечисление.ТипыКанбана.ЗадачаНовый))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокЭтаповКанбана КАК ПорядокЭтаповКанбана
	|		ПО (ПорядокЭтаповКанбана.Этап = ЭтапыКанбана.Ссылка)
	|			И (ПорядокЭтаповКанбана.Филиал = &Филиал)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтобранныеОбъектыДляВывода.Объект КАК Объект,
	|	ТегиОбъектов.Тег КАК Тег,
	|	Теги.Наименование КАК ТегПредставление
	|ИЗ
	|	ОтобранныеОбъектыДляВывода КАК ОтобранныеОбъектыДляВывода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТегиОбъектов КАК ТегиОбъектов
	|		ПО ОтобранныеОбъектыДляВывода.Объект = ТегиОбъектов.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Теги КАК Теги
	|		ПО (ТегиОбъектов.Тег = Теги.Ссылка)
	|ИТОГИ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчастникиЗадач.Объект КАК Объект,
	|	УчастникиЗадач.Участник КАК УчастникСсылка,
	|	УчастникиЗадач.Роль КАК Роль,
	|	УчастникиЗадач.ПорядокРоли КАК ПорядокРоли,
	|	Пользователи.ФИО КАК УчастникФИО,
	|	ЕСТЬNULL(Файлы.Наименование, НЕОПРЕДЕЛЕНО) КАК Аватар,
	|	ЕСТЬNULL(Файлы.ПолучатьИзMinio, ЛОЖЬ) КАК ПолучатьИзMinio
	|ИЗ
	|	УчастникиЗадач КАК УчастникиЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО УчастникиЗадач.Участник = Пользователи.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ПО УчастникиЗадач.Участник = ПрикрепленныеФайлы.Объект
	|			И (ПрикрепленныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.ОбрезанныйАватарПользователя))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО (Файлы.Ссылка = ПрикрепленныеФайлы.Файл)
	|
	|УПОРЯДОЧИТЬ ПО
	|	УчастникиЗадач.ПорядокРоли
	|ИТОГИ
	|	МИНИМУМ(ПорядокРоли),
	|	МАКСИМУМ(УчастникФИО),
	|	МАКСИМУМ(Аватар),
	|	МАКСИМУМ(ПолучатьИзMinio)
	|ПО
	|	Объект,
	|	УчастникСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПорядокЭтапа.Этап КАК Статус,
	|	ОтобранныеОбъектыДляВывода.Статус КАК СтатусОбъекта,
	|	ОтобранныеОбъектыДляВывода.Объект КАК Объект,
	|	ОтобранныеОбъектыДляВывода.ПорядокВОчереди КАК ПорядокВОчереди,
	|	ПорядокЭтапа.Порядок КАК Порядок,
	|	ВЫБОР
	|		КОГДА ОтобранныеОбъектыДляВывода.ДатаНачалаРазработки = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(ОтобранныеОбъектыДляВывода.ДатаНачалаРазработки, &ТекущаяДата, ДЕНЬ)
	|	КОНЕЦ КАК ДнейВРаботе,
	|	ОтобранныеОбъектыДляВывода.Номер КАК Номер,
	|	ОтобранныеОбъектыДляВывода.Наименование КАК Наименование,
	|	ЕСТЬNULL(ПланируемыеТрудозатраты.Трудозатраты, 0) КАК ПланТрудозатрат,
	|	ОтобранныеОбъектыДляВывода.ОценкаStoryPoint КАК ОценкаStoryPoint,
	|	ЕСТЬNULL(ТрудозатратыОбъектов.Затрата, 0) КАК Трудозатраты,
	|	ЕСТЬNULL(ПоследнийСпринтЗадачи.Спринт, ЗНАЧЕНИЕ(Документ.Спринт.ПустаяСсылка)) КАК Спринт,
	|	ЕСТЬNULL(ДокументСпринт.Номер, """") КАК НомерСпринт,
	|	ЕСТЬNULL(СерьезностьОшибок.ИмяКартинки, ЕСТЬNULL(НазначенияЗадач.ИмяКартинки, """")) КАК НазначениеИмяКартинки
	|ИЗ
	|	ОтобранныеОбъектыДляВывода КАК ОтобранныеОбъектыДляВывода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПорядокЭтапа КАК ПорядокЭтапа
	|		ПО ОтобранныеОбъектыДляВывода.Статус = ПорядокЭтапа.Статус
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТрудозатратыОбъектов КАК ТрудозатратыОбъектов
	|		ПО ОтобранныеОбъектыДляВывода.Объект = ТрудозатратыОбъектов.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЧасыРазработкиЗадач КАК ЧасыРазработкиЗадач
	|		ПО ОтобранныеОбъектыДляВывода.Объект = ЧасыРазработкиЗадач.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НазначенияЗадач КАК НазначенияЗадач
	|		ПО ОтобранныеОбъектыДляВывода.Назначение = НазначенияЗадач.Ссылка
	|			И (НазначенияЗадач.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерьезностьОшибок КАК СерьезностьОшибок
	|		ПО ОтобранныеОбъектыДляВывода.СерьезностьОшибки = СерьезностьОшибок.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
	|		ПО ОтобранныеОбъектыДляВывода.Объект = ПланируемыеТрудозатраты.Объект
	|			И (ПланируемыеТрудозатраты.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследнийСпринтЗадачи КАК ПоследнийСпринтЗадачи
	|		ПО ОтобранныеОбъектыДляВывода.Объект = ПоследнийСпринтЗадачи.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|		ПО (ДокументСпринт.Ссылка = ПоследнийСпринтЗадачи.Спринт)
	|{ГДЕ
	|	ПоследнийСпринтЗадачи.Спринт КАК Спринт}
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокЭтапа.Порядок,
	|	ПорядокВОчереди
	|ИТОГИ
	|	МАКСИМУМ(СтатусОбъекта)
	|ПО
	|	Статус";
	#КонецОбласти	
	
	ПостроительЗапроса = Новый ПостроительЗапроса(ТекстЗапроса);
	
	ПостроительЗапроса.Параметры.Вставить("Филиал", Филиал);
	ПостроительЗапроса.Параметры.Вставить("ТекущаяДата", ТекущаяДата);
	ПостроительЗапроса.Параметры.Вставить("КонецПредыдущегоДня", НачалоДня(ТекущаяДата) - 1);
	
	Если СохраненныеНастройки.Свойство("Канбан_Назначена") И ЗначениеЗаполнено(СохраненныеНастройки.Канбан_Назначена) Тогда
		НовыйОтбор = ПостроительЗапроса.Отбор.Добавить("Назначена");
		НовыйОтбор.ВидСравнения = ВидСравнения.Равно;
		НовыйОтбор.Значение = СохраненныеНастройки.Канбан_Назначена;
		НовыйОтбор.Использование = Истина;                             
	КонецЕсли;
	
	Если НастройкиДоски.Фильтр.Количество() > 0 Тогда
		Для Каждого Отбор Из НастройкиДоски.Фильтр Цикл  
			Если Отбор.Значение.Использование Тогда
				НовыйОтбор = ПостроительЗапроса.Отбор.Добавить(Отбор.Ключ);
				НовыйОтбор.ВидСравнения = Отбор.Значение.ВидСравнения;
				
				Если ТипЗнч(Отбор.Значение.ПравоеЗначение) = Тип("СтандартнаяДатаНачала") Тогда
					НовыйОтбор.Значение = Отбор.Значение.ПравоеЗначение.Дата;
				Иначе     
					НовыйОтбор.Значение = Отбор.Значение.ПравоеЗначение;
				КонецЕсли;            
				
				НовыйОтбор.Использование = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = ПостроительЗапроса.ПолучитьЗапрос();
	Пакеты = Запрос.ВыполнитьПакет();
	
	КоличествоПакетов = Пакеты.ВГраница();
	
	РезультатЗапроса = Пакеты[КоличествоПакетов];
	ВыборкаОбъекты = Пакеты[КоличествоПакетов - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОбъектыСТегами = Пакеты[КоличествоПакетов - 2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаСтатусов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		КаталогХраненияАватаров = Константы.КаталогХраненияАватаровПользователей.Получить();
		КорневойURL = Константы.КорневойURL.Получить();
		
		ВнешнееХранилище = "";
		НастройкиПодключения = ИнтеграцияДополнительныхПодсистемПовтИсп.ПолучитьНастройкиПодключенияКMinio();
		Если НастройкиПодключения <> Неопределено Тогда
			ВнешнееХранилище = СтрШаблон("https://%1:%2/%3/", НастройкиПодключения.Сервер, 
				НастройкиПодключения.Порт, КаталогХраненияАватаров);
		КонецЕсли;
		
		Пока ВыборкаСтатусов.Следующий() Цикл
			Карточки = Новый Массив;
			ПорядковыйНомерКарточки = 1;
			ОбратныйПорядок = Ложь;
			
			Выборка = ВыборкаСтатусов.Выбрать();
			
			Если ВыборкаСтатусов.СтатусОбъекта = Справочники.СтатусыОбъектов.Решен 
				ИЛИ ВыборкаСтатусов.СтатусОбъекта = Справочники.СтатусыОбъектов.Отклонен Тогда
				
				ПорядковыйНомерКарточки = Выборка.Количество();
				ОбратныйПорядок = Истина;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				
				ШаблонПорядковыйНомер = СтрШаблон("#%1", ПорядковыйНомерКарточки);
				НавигационнаяСсылкаОбъект = ПолучитьНавигационнуюСсылку(Выборка.Объект);
				НавигационнаяСсылкаСпринт = ПолучитьНавигационнуюСсылку(Выборка.Спринт);
				
				ШаблонЗатрат = "%1 ч.";
				ПлановыеТрудозатраты = СтрШаблон(ШаблонЗатрат, Формат(Выборка.ПланТрудозатрат, "ЧРД=.; ЧН="));
				ФактическиеТрудозатраты = СтрШаблон(ШаблонЗатрат, Формат(Выборка.Трудозатраты, "ЧРД=.; ЧН="));
				
				Если ЗначениеЗаполнено(Выборка.Спринт) Тогда 
					ПреобразованныйНомер = ОбщегоНазначенияКлиентСервер.ПривестиКЧислу(Выборка.НомерСпринт, 11);
					Спринт = СтрШаблон("#%1", Формат(ПреобразованныйНомер, "ЧГ=0")); 
				Иначе
					Спринт = "";
				КонецЕсли;
				
				Если Выборка.ДнейВРаботе = 0 Тогда
					ДнейВРаботе = "";
				Иначе
					ДнейВРаботе = ПолучитьСклоненияСтрокиПоЧислу("день", Выборка.ДнейВРаботе,,, "ПД=Именительный")[0];
				КонецЕсли;
				
				Участники = Новый Массив;
				
				Если ВыборкаОбъекты.НайтиСледующий(Выборка.Объект, "Объект") Тогда	
					ВыборкаУчастники = ВыборкаОбъекты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаУчастники.Следующий() Цикл
						СтруктураУчастника = Новый Структура;
						
						Если ЗначениеЗаполнено(ВыборкаУчастники.Аватар) Тогда								
							Если ВыборкаУчастники.ПолучатьИзMinio Тогда
								Аватарка = ВнешнееХранилище + ВыборкаУчастники.Аватар;
							Иначе
								КаталогВладельца = Строка(ВыборкаУчастники.УчастникСсылка.УникальныйИдентификатор());							
								Аватарка = СтрШаблон("%1/%2/%3/%4", КорневойURL, КаталогХраненияАватаров, 
									КаталогВладельца, ВыборкаУчастники.Аватар);
							КонецЕсли;
						Иначе
							Аватарка = "";
						КонецЕсли;
						
						ВыборкаРоли = ВыборкаУчастники.Выбрать();
						Роли = Новый Массив;
						Пока ВыборкаРоли.Следующий() Цикл
							Роли.Добавить(ВыборкаРоли.Роль);
						КонецЦикла;
						
						ФИ_Участника = СтрЗаменить(ВыборкаУчастники.УчастникФИО, " ", Символы.ПС);
						ФИ_Участника = Лев(СтрПолучитьСтроку(ФИ_Участника, 1), 1) + Лев(СтрПолучитьСтроку(ФИ_Участника, 2), 1);
						
						СтруктураУчастника.Вставить("УчастникID", XMLСтрока(ВыборкаУчастники.УчастникСсылка));						
						СтруктураУчастника.Вставить("УчастникФИО", ВыборкаУчастники.УчастникФИО);
						СтруктураУчастника.Вставить("ФИ_Участника", ФИ_Участника);
						СтруктураУчастника.Вставить("Аватарка", Аватарка);
						СтруктураУчастника.Вставить("Роли", Роли);
						
						Участники.Добавить(СтруктураУчастника);
					КонецЦикла;
					
					ВыборкаОбъекты.Сбросить();
				КонецЕсли;
				
				Теги = Новый Массив;
				
				Если ВыборкаОбъектыСТегами.НайтиСледующий(Выборка.Объект, "Объект") Тогда
					ВыборкаТеги = ВыборкаОбъектыСТегами.Выбрать();
					
					Пока ВыборкаТеги.Следующий() Цикл							
						СтруктураТега = Новый Структура();
						СтруктураТега.Вставить("ТегID", XMLСтрока(ВыборкаТеги.Тег));
						СтруктураТега.Вставить("Тег", ВыборкаТеги.ТегПредставление);
						
						Теги.Добавить(СтруктураТега);							
					КонецЦикла;
					
					ВыборкаОбъектыСТегами.Сбросить();
				КонецЕсли;
				
				КартинкаНазначение = СтрШаблон("%1/assets/icons/%2.png", Константы.КорневойURL.Получить(), Выборка.НазначениеИмяКартинки);
				
				СтруктураКарточки = Новый Структура;
				СтруктураКарточки.Вставить("id", XMLСтрока(Выборка.Объект));
				СтруктураКарточки.Вставить("ШаблонПорядковыйНомер", ШаблонПорядковыйНомер);
				СтруктураКарточки.Вставить("Номер", Выборка.Номер);
				СтруктураКарточки.Вставить("Наименование", Выборка.Наименование);
				СтруктураКарточки.Вставить("Участники", Участники);
				СтруктураКарточки.Вставить("Теги", Теги);
				СтруктураКарточки.Вставить("ОценкаStoryPoint", Выборка.ОценкаStoryPoint);
				СтруктураКарточки.Вставить("ПлановыеТрудозатраты", ПлановыеТрудозатраты);
				СтруктураКарточки.Вставить("ФактическиеТрудозатраты", ФактическиеТрудозатраты);
				СтруктураКарточки.Вставить("Спринт", Спринт);
				СтруктураКарточки.Вставить("НавигационнаяСсылкаСпринт", НавигационнаяСсылкаСпринт);
				СтруктураКарточки.Вставить("ДнейВРаботе", Выборка.ДнейВРаботе);
				СтруктураКарточки.Вставить("Картинка", КартинкаНазначение);
				
				СтруктураКарточки.Вставить("НавигационнаяСсылкаОбъект", НавигационнаяСсылкаОбъект);
				
				Если ОбратныйПорядок Тогда
					Карточки.Вставить(0, СтруктураКарточки);				
					ПорядковыйНомерКарточки = ПорядковыйНомерКарточки - 1;
				Иначе
					Карточки.Добавить(СтруктураКарточки);				
					ПорядковыйНомерКарточки = ПорядковыйНомерКарточки + 1;
				КонецЕсли;
			КонецЦикла;
			
			ДанныеСписка = Новый Структура("Этап, Количество, Внимание, Карточки", XMLСтрока(ВыборкаСтатусов.Статус), 0, "", Карточки);
			
			Данные.Добавить(ДанныеСписка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция СформироватьДанныеТипКастомный(Знач Филиал)
	
	Данные = Новый Массив;
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭтапыКанбана.Ссылка КАК Этап,
	|	ПорядокЭтаповКанбана.Порядок КАК ПорядокЭтапа,
	|	ЕСТЬNULL(КарточкаКанбан.Ссылка, """") КАК Карточка,
	|	ЕСТЬNULL(КарточкаКанбан.Наименование, """") КАК Наименование,
	|	ЕСТЬNULL(КарточкаКанбан.СрокРеализации, """") КАК СрокРеализации,
	|	ЕСТЬNULL(ОчередьКанбан.Порядок, 0) КАК Порядок,
	|	ЕСТЬNULL(КарточкаКанбан.Код, """") КАК Номер,
	|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(КарточкаКанбан.Автор), """") КАК Автор
	|ИЗ
	|	Справочник.ЭтапыКанбана КАК ЭтапыКанбана
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокЭтаповКанбана КАК ПорядокЭтаповКанбана
	|		ПО (ПорядокЭтаповКанбана.Этап = ЭтапыКанбана.Ссылка)
	|			И (ЭтапыКанбана.Владелец = &Филиал)
	|			И (ЭтапыКанбана.ТипКанбана = ЗНАЧЕНИЕ(Перечисление.ТипыКанбана.Кастомный))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО (КлючОчереди.ЭтапКанбана = ЭтапыКанбана.Ссылка)
	|			И (КлючОчереди.Филиал = &Филиал)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КарточкаКанбан КАК КарточкаКанбан
	|			ПО ОчередьКанбан.Объект = КарточкаКанбан.Ссылка
	|				И (КарточкаКанбан.Владелец = &Филиал)
	|				И (НЕ КарточкаКанбан.ПометкаУдаления)
	|		ПО (ОчередьКанбан.КлючОчередиОбъекта = КлючОчереди.Ссылка)
	|ГДЕ
	|	НЕ ЭтапыКанбана.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокЭтапа,
	|	Порядок
	|ИТОГИ ПО
	|	Этап";
	
	Запрос.УстановитьПараметр("Филиал", Филиал);
	
	ВыборкаЭтап = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЭтап.Следующий() Цикл
		Карточки = Новый Массив;
		ПорядковыйНомерКарточки = 1;
		
		Выборка = ВыборкаЭтап.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(Выборка.Карточка) Тогда
				Продолжить;
			КонецЕсли;
			
			ШаблонПорядковыйНомер = СтрШаблон("#%1", ПорядковыйНомерКарточки);
			
			СтруктураКарточки = Новый Структура;
			
			СтруктураКарточки.Вставить("id", XMLСтрока(Выборка.Карточка));
			СтруктураКарточки.Вставить("ШаблонПорядковыйНомер", ШаблонПорядковыйНомер);
			СтруктураКарточки.Вставить("Номер", Выборка.Номер);
			СтруктураКарточки.Вставить("Наименование", Выборка.Наименование);
			СтруктураКарточки.Вставить("Автор", Выборка.Автор);
			
			Если ЗначениеЗаполнено(Выборка.СрокРеализации) Тогда
				СрокРеализации = ЗаписатьДатуJSON(Выборка.СрокРеализации, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.ЛокальнаяДата);
			Иначе
				СрокРеализации = "";
			КонецЕсли;
			
			СтруктураКарточки.Вставить("СрокРеализации", СрокРеализации);
			
			Карточки.Добавить(СтруктураКарточки);
			ПорядковыйНомерКарточки = ПорядковыйНомерКарточки + 1;
		КонецЦикла;
		
		ДанныеСписка = Новый Структура("Этап, Количество, Внимание, Карточки", XMLСтрока(ВыборкаЭтап.Этап), 0, "", Карточки);		
		Данные.Добавить(ДанныеСписка);
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

Функция СформироватьДанныеТипВнутреннееЗадание(Знач СохраненныеНастройки, Знач Филиал)
	
	Данные = Новый Массив;
	ТекущаяДата = ТекущаяДатаСеанса();
	
	НастройкиДоски = Неопределено;
	
	Если СохраненныеНастройки.Свойство("НастройкиКанбанВнутреннееЗадание") Тогда
		НастройкиДоски = СохраненныеНастройки.НастройкиКанбанВнутреннееЗадание;
	КонецЕсли;
	
	#Область ТекстЗапроса
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументВнутреннееЗадание.Ссылка КАК Ссылка,
	|	ОчередьКанбан.Порядок КАК Порядок,
	|	ДокументВнутреннееЗадание.СистемаУчета КАК СистемаУчета,
	|	СтатусыОбъектов.Ссылка КАК Статус,
	|	ДокументВнутреннееЗадание.Назначена КАК Назначена,
	|	ДокументВнутреннееЗадание.Назначение КАК Назначение
	|ПОМЕСТИТЬ ЗавершенныеВнутренниеЗадания
	|ИЗ
	|	Документ.ВнутреннееЗадание КАК ДокументВнутреннееЗадание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|		ПО ДокументВнутреннееЗадание.Ссылка = ОчередьКанбан.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО (ОчередьКанбан.КлючОчередиОбъекта = КлючОчереди.Ссылка)
	|			И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Канбан))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана.ЭлементыЭтапа КАК ЭтапыКанбанаЭлементыЭтапа
	|		ПО (ЭтапыКанбанаЭлементыЭтапа.Ссылка = КлючОчереди.ЭтапКанбана)
	|			И (ЭтапыКанбанаЭлементыЭтапа.Элемент = ДокументВнутреннееЗадание.Статус)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ДокументВнутреннееЗадание.Статус = СтатусыОбъектов.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ДокументВнутреннееЗадание.Автор = Пользователи.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО (Филиалы.Ссылка = &Филиал)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Филиалы.ТипФилиала <> ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.НеIT)
	|				ТОГДА ДокументВнутреннееЗадание.Филиал = &Филиал
	|			ИНАЧЕ Пользователи.Филиал = &Филиал
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА СтатусыОбъектов.Ссылка В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|					ИЛИ СтатусыОбъектов.Родитель В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|{ГДЕ
	|	ДокументВнутреннееЗадание.Продукт КАК Продукт,
	|	ДокументВнутреннееЗадание.Назначена КАК Назначена,
	|	ДокументВнутреннееЗадание.Автор КАК Автор,
	|	ДокументВнутреннееЗадание.СистемаУчета КАК СистемаУчета,
	|	ДокументВнутреннееЗадание.Назначение КАК Назначение,
	|	ДокументВнутреннееЗадание.Направление КАК Направление,
	|	ДокументВнутреннееЗадание.Проект КАК Проект}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОчередьКанбан.Объект КАК ВнутреннееЗадание,
	|	ОчередьКанбан.Порядок КАК Порядок,
	|	ЭтапыКанбанаЭлементыЭтапа.Элемент КАК Статус
	|ПОМЕСТИТЬ ПорядокВнутреннихЗаданий
	|ИЗ
	|	РегистрСведений.ОчередьКанбан КАК ОчередьКанбан
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО ОчередьКанбан.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|			И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Канбан))
	|			И (КлючОчереди.Филиал = &Филиал)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана.ЭлементыЭтапа КАК ЭтапыКанбанаЭлементыЭтапа
	|		ПО (КлючОчереди.ЭтапКанбана = ЭтапыКанбанаЭлементыЭтапа.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана КАК ЭтапыКанбана
	|		ПО (ЭтапыКанбана.Ссылка = ЭтапыКанбанаЭлементыЭтапа.Ссылка)
	|			И (ЭтапыКанбана.ТипКанбана = ЗНАЧЕНИЕ(Перечисление.ТипыКанбана.ВнутреннееЗаданиеНовый))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументВнутреннееЗадание.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ПорядокВнутреннихЗаданий.Порядок, 999) КАК Порядок,
	|	ДокументВнутреннееЗадание.СистемаУчета КАК СистемаУчета,
	|	СтатусыОбъектов.Ссылка КАК Статус,
	|	ДокументВнутреннееЗадание.Назначена КАК Назначена,
	|	ДокументВнутреннееЗадание.Назначение КАК Назначение
	|ПОМЕСТИТЬ Объекты
	|ИЗ
	|	Документ.ВнутреннееЗадание КАК ДокументВнутреннееЗадание
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокВнутреннихЗаданий КАК ПорядокВнутреннихЗаданий
	|		ПО ДокументВнутреннееЗадание.Ссылка = ПорядокВнутреннихЗаданий.ВнутреннееЗадание
	|			И ДокументВнутреннееЗадание.Статус = ПорядокВнутреннихЗаданий.Статус
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ДокументВнутреннееЗадание.Статус = СтатусыОбъектов.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ДокументВнутреннееЗадание.Автор = Пользователи.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО (Филиалы.Ссылка = &Филиал)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Филиалы.ТипФилиала <> ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.НеIT)
	|				ТОГДА ДокументВнутреннееЗадание.Филиал = &Филиал
	|			ИНАЧЕ Пользователи.Филиал = &Филиал
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА СтатусыОбъектов.Ссылка В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|					ИЛИ СтатусыОбъектов.Родитель В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|{ГДЕ
	|	ДокументВнутреннееЗадание.Продукт КАК Продукт,
	|	ДокументВнутреннееЗадание.Назначена КАК Назначена,
	|	ДокументВнутреннееЗадание.Автор КАК Автор,
	|	ДокументВнутреннееЗадание.СистемаУчета КАК СистемаУчета,
	|	ДокументВнутреннееЗадание.Назначение КАК Назначение,
	|	ДокументВнутреннееЗадание.Направление КАК Направление,
	|	ДокументВнутреннееЗадание.Проект КАК Проект}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗавершенныеВнутренниеЗадания.Ссылка,
	|	ЗавершенныеВнутренниеЗадания.Порядок,
	|	ЗавершенныеВнутренниеЗадания.СистемаУчета,
	|	ЗавершенныеВнутренниеЗадания.Статус,
	|	ЗавершенныеВнутренниеЗадания.Назначена,
	|	ЗавершенныеВнутренниеЗадания.Назначение
	|ИЗ
	|	ЗавершенныеВнутренниеЗадания КАК ЗавершенныеВнутренниеЗадания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Объекты.Статус КАК Статус,
	|	Объекты.Порядок КАК Порядок,
	|	Объекты.Ссылка КАК Ссылка,
	|	Объекты.СистемаУчета КАК СистемаУчета,
	|	Объекты.Назначена КАК Назначена,
	|	Объекты.Назначение КАК Назначение
	|ПОМЕСТИТЬ ОбъектыКанбана
	|ИЗ
	|	Объекты КАК Объекты
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененийОбъектовПоСобытиям КАК ИсторияИзмененийОбъектовПоСобытиям
	|		ПО (Объекты.Ссылка = (ВЫРАЗИТЬ(ИсторияИзмененийОбъектовПоСобытиям.Объект КАК Документ.ВнутреннееЗадание)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Комментарии КАК Комментарии
	|		ПО (Объекты.Ссылка = (ВЫРАЗИТЬ(Комментарии.Объект КАК Документ.ВнутреннееЗадание)))}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТегиОбъектов КАК ТегиОбъектов
	|		ПО (Объекты.Ссылка = (ВЫРАЗИТЬ(ТегиОбъектов.Объект КАК Документ.ВнутреннееЗадание)))}
	|{ГДЕ
	|	(ЕСТЬNULL(ИсторияИзмененийОбъектовПоСобытиям.Период, ЕСТЬNULL(Комментарии.Период, ДАТАВРЕМЯ(1, 1, 1)))) КАК ДатаИзменения,
	|	ТегиОбъектов.Тег КАК Тег}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Объекты.Статус КАК Статус,
	|	Объекты.Порядок КАК ПорядокВОчереди,
	|	ВнутреннееЗадание.Ссылка КАК Объект,
	|	ВнутреннееЗадание.Номер КАК Номер,
	|	ВнутреннееЗадание.Дата КАК ДатаСоздания,
	|	ВнутреннееЗадание.Наименование КАК Наименование,
	|	ВнутреннееЗадание.Проект КАК Проект,
	|	ВнутреннееЗадание.Назначена КАК Назначенный,
	|	ВнутреннееЗадание.Назначение КАК Назначение,
	|	ВнутреннееЗадание.СерьезностьОшибки КАК СерьезностьОшибки,
	|	ВнутреннееЗадание.ДатаНачалаРазработки КАК ДатаНачалаРазработки,
	|	ВнутреннееЗадание.ПлановоеНачало КАК ПлановоеНачало,
	|	ВнутреннееЗадание.ИсполнитьДо КАК ПлановоеОкончание,
	|	Объекты.СистемаУчета КАК СистемаУчета
	|ПОМЕСТИТЬ ОтобранныеОбъектыДляВывода
	|ИЗ
	|	ОбъектыКанбана КАК Объекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
	|		ПО Объекты.Ссылка = ВнутреннееЗадание.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеОбъектыДляВывода.Объект КАК Объект,
	|	Участники.Пользователь КАК Участник,
	|	ПРЕДСТАВЛЕНИЕ(Участники.Роль) КАК Роль,
	|	ВЫБОР
	|		КОГДА Участники.Роль = ЗНАЧЕНИЕ(Справочник.РолиУчастников.Заказчик)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПорядокРоли
	|ПОМЕСТИТЬ УчастникиВЗ
	|ИЗ
	|	ОтобранныеОбъектыДляВывода КАК ОтобранныеОбъектыДляВывода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Участники КАК Участники
	|		ПО ОтобранныеОбъектыДляВывода.Объект = Участники.Объект
	|ГДЕ
	|	Участники.Роль В (ЗНАЧЕНИЕ(Справочник.РолиУчастников.Автор), ЗНАЧЕНИЕ(Справочник.РолиУчастников.Заказчик))
	|	И НЕ Участники.Скрытый
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвойстваВнутреннихЗаданийСрезПоследних.Объект,
	|	СвойстваВнутреннихЗаданийСрезПоследних.Исполнитель,
	|	""Исполнитель"",
	|	3
	|ИЗ
	|	РегистрСведений.СвойстваВнутреннихЗаданий.СрезПоследних(
	|			&ТекущаяДата,
	|			Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ВРаботе)
	|				И Объект В
	|					(ВЫБРАТЬ
	|						ОтобранныеОбъектыДляВывода.Объект
	|					ИЗ
	|						ОтобранныеОбъектыДляВывода)) КАК СвойстваВнутреннихЗаданийСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвойстваВнутреннихЗаданийСрезПоследних.Объект,
	|	СвойстваВнутреннихЗаданийСрезПоследних.Исполнитель,
	|	""Тестировщик"",
	|	4
	|ИЗ
	|	РегистрСведений.СвойстваВнутреннихЗаданий.СрезПоследних(
	|			&ТекущаяДата,
	|			Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Тестирование)
	|				И Объект В
	|					(ВЫБРАТЬ
	|						ОтобранныеОбъектыДляВывода.Объект
	|					ИЗ
	|						ОтобранныеОбъектыДляВывода)) КАК СвойстваВнутреннихЗаданийСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтобранныеОбъектыДляВывода.Объект,
	|	ОтобранныеОбъектыДляВывода.Назначенный,
	|	""Назначенный"",
	|	5
	|ИЗ
	|	ОтобранныеОбъектыДляВывода КАК ОтобранныеОбъектыДляВывода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеОбъектыДляВывода.Объект КАК Объект,
	|	СУММА(ПроизводственныйКалендарь.КоличествоРабочихЧасов) КАК КоличествоРабочихЧасов,
	|	СУММА(1) КАК КоличествоРабочихДней
	|ПОМЕСТИТЬ ЧасыРазработкиЗадач
	|ИЗ
	|	ОтобранныеОбъектыДляВывода КАК ОтобранныеОбъектыДляВывода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|		ПО (ПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ОтобранныеОбъектыДляВывода.ДатаНачалаРазработки И &КонецПредыдущегоДня)
	|ГДЕ
	|	ОтобранныеОбъектыДляВывода.ДатаНачалаРазработки > ДАТАВРЕМЯ(1, 1, 1)
	|	И ПроизводственныйКалендарь.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Выходной)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтобранныеОбъектыДляВывода.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеОбъектыДляВывода.Объект КАК Объект,
	|	СУММА(1) КАК КоличествоРабочихДней
	|ПОМЕСТИТЬ ДниПлановойРазработки
	|ИЗ
	|	ОтобранныеОбъектыДляВывода КАК ОтобранныеОбъектыДляВывода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|		ПО (ПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ОтобранныеОбъектыДляВывода.ПлановоеНачало И ОтобранныеОбъектыДляВывода.ПлановоеОкончание)
	|ГДЕ
	|	ОтобранныеОбъектыДляВывода.ПлановоеНачало > ДАТАВРЕМЯ(1, 1, 1)
	|	И ОтобранныеОбъектыДляВывода.ПлановоеОкончание > ДАТАВРЕМЯ(1, 1, 1)
	|	И ПроизводственныйКалендарь.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Выходной)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтобранныеОбъектыДляВывода.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыКанбанаЭлементыЭтапа.Ссылка КАК Этап,
	|	ЭтапыКанбанаЭлементыЭтапа.Элемент КАК Статус,
	|	ПорядокЭтаповКанбана.Порядок КАК Порядок
	|ПОМЕСТИТЬ ПорядокЭтапа
	|ИЗ
	|	Справочник.ЭтапыКанбана.ЭлементыЭтапа КАК ЭтапыКанбанаЭлементыЭтапа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана КАК ЭтапыКанбана
	|		ПО ЭтапыКанбанаЭлементыЭтапа.Ссылка = ЭтапыКанбана.Ссылка
	|			И (ЭтапыКанбана.ТипКанбана = ЗНАЧЕНИЕ(Перечисление.ТипыКанбана.ВнутреннееЗаданиеНовый))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокЭтаповКанбана КАК ПорядокЭтаповКанбана
	|		ПО (ПорядокЭтаповКанбана.Этап = ЭтапыКанбана.Ссылка)
	|			И (ПорядокЭтаповКанбана.Филиал = &Филиал)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтобранныеОбъектыДляВывода.Объект КАК Объект,
	|	ТегиОбъектов.Тег КАК Тег,
	|	Теги.Наименование КАК ТегПредставление
	|ИЗ
	|	ОтобранныеОбъектыДляВывода КАК ОтобранныеОбъектыДляВывода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТегиОбъектов КАК ТегиОбъектов
	|		ПО ОтобранныеОбъектыДляВывода.Объект = ТегиОбъектов.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Теги КАК Теги
	|		ПО (ТегиОбъектов.Тег = Теги.Ссылка)
	|ИТОГИ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчастникиВЗ.Объект КАК Объект,
	|	УчастникиВЗ.Участник КАК УчастникСсылка,
	|	УчастникиВЗ.Роль КАК Роль,
	|	Пользователи.ФИО КАК УчастникФИО,
	|	ЕСТЬNULL(Файлы.Наименование, НЕОПРЕДЕЛЕНО) КАК Аватар,
	|	ЕСТЬNULL(Файлы.ПолучатьИзMinio, ЛОЖЬ) КАК ПолучатьИзMinio
	|ИЗ
	|	УчастникиВЗ КАК УчастникиВЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО УчастникиВЗ.Участник = Пользователи.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ПО УчастникиВЗ.Участник = ПрикрепленныеФайлы.Объект
	|			И (ПрикрепленныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.ОбрезанныйАватарПользователя))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО (Файлы.Ссылка = ПрикрепленныеФайлы.Файл)
	|
	|УПОРЯДОЧИТЬ ПО
	|	УчастникиВЗ.ПорядокРоли
	|ИТОГИ
	|	МАКСИМУМ(УчастникФИО),
	|	МАКСИМУМ(Аватар),
	|	МАКСИМУМ(ПолучатьИзMinio)
	|ПО
	|	Объект,
	|	УчастникСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПорядокЭтапа.Этап КАК Статус,
	|	ОтобранныеОбъектыДляВывода.Статус КАК СтатусОбъекта,
	|	ОтобранныеОбъектыДляВывода.Объект КАК Объект,
	|	ОтобранныеОбъектыДляВывода.ПорядокВОчереди КАК ПорядокВОчереди,
	|	ПорядокЭтапа.Порядок КАК Порядок,
	|	ЕСТЬNULL(ЧасыРазработкиЗадач.КоличествоРабочихДней, 0) КАК КоличествоРабочихДней,
	|	ОтобранныеОбъектыДляВывода.Номер КАК Номер,
	|	ОтобранныеОбъектыДляВывода.Наименование КАК Наименование,
	|	ЕСТЬNULL(ДниПлановойРазработки.КоличествоРабочихДней, 0) КАК ПланТрудозатрат,
	|	ЕСТЬNULL(СерьезностьОшибок.ИмяКартинки, ЕСТЬNULL(НазначенияЗадач.ИмяКартинки, """")) КАК НазначениеИмяКартинки
	|ИЗ
	|	ОтобранныеОбъектыДляВывода КАК ОтобранныеОбъектыДляВывода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПорядокЭтапа КАК ПорядокЭтапа
	|		ПО ОтобранныеОбъектыДляВывода.Статус = ПорядокЭтапа.Статус
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЧасыРазработкиЗадач КАК ЧасыРазработкиЗадач
	|		ПО ОтобранныеОбъектыДляВывода.Объект = ЧасыРазработкиЗадач.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НазначенияЗадач КАК НазначенияЗадач
	|		ПО ОтобранныеОбъектыДляВывода.Назначение = НазначенияЗадач.Ссылка
	|			И (НазначенияЗадач.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерьезностьОшибок КАК СерьезностьОшибок
	|		ПО ОтобранныеОбъектыДляВывода.СерьезностьОшибки = СерьезностьОшибок.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДниПлановойРазработки КАК ДниПлановойРазработки
	|		ПО ОтобранныеОбъектыДляВывода.Объект = ДниПлановойРазработки.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокЭтапа.Порядок,
	|	ПорядокВОчереди
	|ИТОГИ ПО
	|	Статус";
	#КонецОбласти
	
	ПостроительЗапроса = Новый ПостроительЗапроса(ТекстЗапроса); 
	ПостроительЗапроса.Параметры.Вставить("Филиал", Филиал);
	ПостроительЗапроса.Параметры.Вставить("ТекущаяДата", ТекущаяДата);
	ПостроительЗапроса.Параметры.Вставить("КонецПредыдущегоДня", НачалоДня(ТекущаяДата) - 1);
	
	Если СохраненныеНастройки.Свойство("Канбан_Назначена") И ЗначениеЗаполнено(СохраненныеНастройки.Канбан_Назначена) Тогда
		НовыйОтбор = ПостроительЗапроса.Отбор.Добавить("Назначена");
		НовыйОтбор.ВидСравнения = ВидСравнения.Равно;
		НовыйОтбор.Значение = СохраненныеНастройки.Канбан_Назначена;
		НовыйОтбор.Использование = Истина;                             
	КонецЕсли;
	
	Если НастройкиДоски <> Неопределено И НастройкиДоски.Фильтр.Количество() > 0 Тогда
		Для Каждого Отбор Из НастройкиДоски.Фильтр Цикл  
			Если Отбор.Значение.Использование Тогда
				НовыйОтбор = ПостроительЗапроса.Отбор.Добавить(Отбор.Ключ);
				НовыйОтбор.ВидСравнения = Отбор.Значение.ВидСравнения;
				
				Если ТипЗнч(Отбор.Значение.ПравоеЗначение) = Тип("СтандартнаяДатаНачала") Тогда
					НовыйОтбор.Значение = Отбор.Значение.ПравоеЗначение.Дата;
				Иначе     
					НовыйОтбор.Значение = Отбор.Значение.ПравоеЗначение;
				КонецЕсли;            
				
				НовыйОтбор.Использование = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = ПостроительЗапроса.ПолучитьЗапрос();
	Пакеты = Запрос.ВыполнитьПакет();
	
	КоличествоПакетов = Пакеты.ВГраница();
	
	РезультатЗапроса = Пакеты[КоличествоПакетов];
	ВыборкаОбъекты = Пакеты[КоличествоПакетов - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОбъектыСТегами = Пакеты[КоличествоПакетов - 2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаСтатусов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		КаталогХраненияАватаров = Константы.КаталогХраненияАватаровПользователей.Получить();
		КорневойURL = Константы.КорневойURL.Получить();
		
		ВнешнееХранилище = "";
		НастройкиПодключения = ИнтеграцияДополнительныхПодсистемПовтИсп.ПолучитьНастройкиПодключенияКMinio();
		Если НастройкиПодключения <> Неопределено Тогда
			ВнешнееХранилище = СтрШаблон("https://%1:%2/%3/", НастройкиПодключения.Сервер, 
				НастройкиПодключения.Порт, КаталогХраненияАватаров);
		КонецЕсли;
		
		Пока ВыборкаСтатусов.Следующий() Цикл
			Карточки = Новый Массив;
			ПорядковыйНомерКарточки = 1;
			
			ОбратныйПорядок = Ложь;
			
			Выборка = ВыборкаСтатусов.Выбрать();
			
			Если ВыборкаСтатусов.СтатусОбъекта = Справочники.СтатусыОбъектов.Решен 
				ИЛИ ВыборкаСтатусов.СтатусОбъекта = Справочники.СтатусыОбъектов.Отклонен Тогда
				
				ПорядковыйНомерКарточки = Выборка.Количество();
				ОбратныйПорядок = Истина;
			КонецЕсли;		
			
			Пока Выборка.Следующий() Цикл
				ШаблонПорядковыйНомер = СтрШаблон("#%1", ПорядковыйНомерКарточки);
				НавигационнаяСсылкаОбъект = ПолучитьНавигационнуюСсылку(Выборка.Объект);
				
				ПлановыеТрудозатраты = СтрШаблон("%1 д.", Формат(Выборка.ПланТрудозатрат, "ЧРД=.; ЧН="));
				ФактическиеТрудозатраты = СтрШаблон("%1 д.", Формат(Выборка.КоличествоРабочихДней, "ЧРД=.; ЧН="));
				
				Участники = Новый Массив;
				
				Если ВыборкаОбъекты.НайтиСледующий(Выборка.Объект, "Объект") Тогда	
					ВыборкаУчастники = ВыборкаОбъекты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаУчастники.Следующий() Цикл
						СтруктураУчастника = Новый Структура;
						
						Если ЗначениеЗаполнено(ВыборкаУчастники.Аватар) Тогда														
							Если ВыборкаУчастники.ПолучатьИзMinio Тогда
								Аватарка = ВнешнееХранилище + ВыборкаУчастники.Аватар;
							Иначе
								КаталогВладельца = Строка(ВыборкаУчастники.УчастникСсылка.УникальныйИдентификатор());							
								Аватарка = СтрШаблон("%1/%2/%3/%4", КорневойURL, КаталогХраненияАватаров, 
									КаталогВладельца, ВыборкаУчастники.Аватар);
							КонецЕсли;
						Иначе
							Аватарка = "";
						КонецЕсли;					
						
						ВыборкаРоли = ВыборкаУчастники.Выбрать();
						Роли = Новый Массив;
						Пока ВыборкаРоли.Следующий() Цикл
							Роли.Добавить(ВыборкаРоли.Роль);
						КонецЦикла;
						
						ФИ_Участника = СтрЗаменить(ВыборкаУчастники.УчастникФИО, " ", Символы.ПС);
						ФИ_Участника = Лев(СтрПолучитьСтроку(ФИ_Участника, 1), 1) + Лев(СтрПолучитьСтроку(ФИ_Участника, 2), 1);
						
						СтруктураУчастника.Вставить("УчастникID", XMLСтрока(ВыборкаУчастники.УчастникСсылка));						
						СтруктураУчастника.Вставить("УчастникФИО", ВыборкаУчастники.УчастникФИО);
						СтруктураУчастника.Вставить("ФИ_Участника", ФИ_Участника);
						СтруктураУчастника.Вставить("Аватарка", Аватарка);
						СтруктураУчастника.Вставить("Роли", Роли);
						
						Участники.Добавить(СтруктураУчастника);
					КонецЦикла;
					
					ВыборкаОбъекты.Сбросить();
				КонецЕсли;
				
				Теги = Новый Массив;
				
				Если ВыборкаОбъектыСТегами.НайтиСледующий(Выборка.Объект, "Объект") Тогда
					ВыборкаТеги = ВыборкаОбъектыСТегами.Выбрать();
					
					Пока ВыборкаТеги.Следующий() Цикл							
						СтруктураТега = Новый Структура();
						СтруктураТега.Вставить("ТегID", XMLСтрока(ВыборкаТеги.Тег));
						СтруктураТега.Вставить("Тег", ВыборкаТеги.ТегПредставление);
						
						Теги.Добавить(СтруктураТега);							
					КонецЦикла;
					
					ВыборкаОбъектыСТегами.Сбросить();
				КонецЕсли;
				
				КартинкаНазначение = СтрШаблон("%1/assets/icons/%2.png", Константы.КорневойURL.Получить(), Выборка.НазначениеИмяКартинки);
				
				СтруктураКарточки = Новый Структура;
				СтруктураКарточки.Вставить("id", XMLСтрока(Выборка.Объект));
				СтруктураКарточки.Вставить("ШаблонПорядковыйНомер", ШаблонПорядковыйНомер);
				СтруктураКарточки.Вставить("Номер", Выборка.Номер);
				СтруктураКарточки.Вставить("Наименование", Выборка.Наименование);
				СтруктураКарточки.Вставить("Участники", Участники);
				СтруктураКарточки.Вставить("Теги", Теги);
				СтруктураКарточки.Вставить("ПлановыеТрудозатраты", ПлановыеТрудозатраты);
				СтруктураКарточки.Вставить("ФактическиеТрудозатраты", ФактическиеТрудозатраты);
				СтруктураКарточки.Вставить("Картинка", КартинкаНазначение);
				СтруктураКарточки.Вставить("НавигационнаяСсылкаОбъект", НавигационнаяСсылкаОбъект);
				
				Если ОбратныйПорядок Тогда
					Карточки.Вставить(0, СтруктураКарточки);				
					ПорядковыйНомерКарточки = ПорядковыйНомерКарточки - 1;
				Иначе
					Карточки.Добавить(СтруктураКарточки);				
					ПорядковыйНомерКарточки = ПорядковыйНомерКарточки + 1;
				КонецЕсли;
			КонецЦикла;
			
			ДанныеСписка = Новый Структура("Этап, Количество, Внимание, Карточки", XMLСтрока(ВыборкаСтатусов.Статус), 0, "", Карточки);
			
			Данные.Добавить(ДанныеСписка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Данные;

КонецФункции

Функция СформироватьДанныеТипЗаявкиМоегоФилиала(Знач СохраненныеНастройки, Знач Филиал)
	
	Данные = Новый Массив;
	ТекущаяДата = ТекущаяДатаСеанса();
	
	НастройкиДоски = Неопределено;
	
	Если СохраненныеНастройки.Свойство("НастройкиКанбанЗаявкиМоегоФилиала") Тогда
		НастройкиДоски = СохраненныеНастройки.НастройкиКанбанЗаявкиМоегоФилиала;
	КонецЕсли;
	
	#Область ТекстЗапроса	
	ТекстЗапроса =	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 20
	|	ЗаявкаНаРазработку.Ссылка КАК Ссылка,
	|	СтатусыОбъектов.Ссылка КАК Статус,
	|	СтатусыОбъектов.Порядок КАК ПорядокСтатуса,
	|	ЗаявкаНаРазработку.Автор КАК Автор,
	|	Пользователи.ФИО КАК АвторФИО,
	|	ЗаявкаНаРазработку.Назначение КАК Назначение,
	|	ЗаявкаНаРазработку.СерьезностьОшибки КАК СерьезностьОшибки,
	|	ЗаявкаНаРазработку.Наименование КАК Наименование,
	|	ЗаявкаНаРазработку.Номер КАК Номер,
	|	ЗаявкаНаРазработку.СрокРеализации КАК СрокРеализации
	|ПОМЕСТИТЬ ЗавершенныеЗаявки
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ЗаявкаСистемыРазработки
	|		ПО ЗаявкаНаРазработку.Ссылка = ЗаявкаСистемыРазработки.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (Пользователи.Ссылка = ЗаявкаНаРазработку.Автор)
	|			И (Пользователи.Филиал = &Филиал)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
	|		ПО ЗаявкаНаРазработку.Ссылка = МинимальныеСтатусыЗаявок.Заявка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (МинимальныеСтатусыЗаявок.Статус = СтатусыОбъектов.Ссылка)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА СтатусыОбъектов.Ссылка В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|					ИЛИ СтатусыОбъектов.Родитель В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|{ГДЕ
	|	ЗаявкаНаРазработку.Продукт КАК Продукт,
	|	ЗаявкаНаРазработку.Ссылка КАК Ссылка,
	|	ЗаявкаНаРазработку.ОбъектОснование КАК Проект,
	|	ЗаявкаСистемыРазработки.Система КАК СистемаУчета,
	|	ЗаявкаСистемыРазработки.ГруппаЗаказчиков КАК ГруппаЗаказчиков,
	|	ЗаявкаНаРазработку.Автор КАК Автор,
	|	ЗаявкаНаРазработку.Назначение КАК Назначение,
	|	ЗаявкаНаРазработку.Направление КАК Направление}
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаявкаНаРазработку.Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаНаРазработку.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(СтатусыЗаявокПоСистемамФилиалов.Статус, МинимальныеСтатусыЗаявок.Статус) КАК Статус,
	|	СтатусыОбъектов.Порядок КАК ПорядокСтатуса,
	|	ЗаявкаНаРазработку.Автор КАК Автор,
	|	Пользователи.ФИО КАК АвторФИО,
	|	ЗаявкаНаРазработку.Назначение КАК Назначение,
	|	ЗаявкаНаРазработку.СерьезностьОшибки КАК СерьезностьОшибки,
	|	ЗаявкаНаРазработку.Наименование КАК Наименование,
	|	ЗаявкаНаРазработку.Номер КАК Номер,
	|	ЗаявкаНаРазработку.СрокРеализации КАК СрокРеализации
	|ПОМЕСТИТЬ Объекты
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ЗаявкаСистемыРазработки
	|		ПО ЗаявкаНаРазработку.Ссылка = ЗаявкаСистемыРазработки.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (Пользователи.Ссылка = ЗаявкаНаРазработку.Автор)
	|			И (Пользователи.Филиал = &Филиал)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
	|		ПО ЗаявкаНаРазработку.Ссылка = МинимальныеСтатусыЗаявок.Заявка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (МинимальныеСтатусыЗаявок.Статус = СтатусыОбъектов.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияМинимальныхСтатусовЗаявок.СрезПервых(, Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ВРаботе)) КАК ИсторияМинимальныхСтатусовЗаявокСрезПервых
	|		ПО ЗаявкаНаРазработку.Ссылка = ИсторияМинимальныхСтатусовЗаявокСрезПервых.Заявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемамФилиалов КАК СтатусыЗаявокПоСистемамФилиалов
	|		ПО ЗаявкаНаРазработку.Ссылка = СтатусыЗаявокПоСистемамФилиалов.Заявка
	|			И (СтатусыЗаявокПоСистемамФилиалов.Филиал = &Филиал)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА СтатусыОбъектов.Ссылка В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|					ИЛИ СтатусыОбъектов.Родитель В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|{ГДЕ
	|	ЗаявкаНаРазработку.Продукт КАК Продукт,
	|	ЗаявкаНаРазработку.Ссылка КАК Ссылка,
	|	ЗаявкаНаРазработку.ОбъектОснование КАК Проект,
	|	ЗаявкаСистемыРазработки.Система КАК СистемаУчета,
	|	ЗаявкаСистемыРазработки.ГруппаЗаказчиков КАК ГруппаЗаказчиков,
	|	ЗаявкаНаРазработку.Автор КАК Автор,
	|	ЗаявкаНаРазработку.Назначение КАК Назначение,
	|	ЗаявкаНаРазработку.Направление КАК Направление}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗавершенныеЗаявки.Ссылка,
	|	ЗавершенныеЗаявки.Статус,
	|	ЗавершенныеЗаявки.ПорядокСтатуса,
	|	ЗавершенныеЗаявки.Автор,
	|	ЗавершенныеЗаявки.АвторФИО,
	|	ЗавершенныеЗаявки.Назначение,
	|	ЗавершенныеЗаявки.СерьезностьОшибки,
	|	ЗавершенныеЗаявки.Наименование,
	|	ЗавершенныеЗаявки.Номер,
	|	ЗавершенныеЗаявки.СрокРеализации
	|ИЗ
	|	ЗавершенныеЗаявки КАК ЗавершенныеЗаявки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Объекты.Статус КАК Статус,
	|	Объекты.ПорядокСтатуса КАК ПорядокСтатуса,
	|	Объекты.Автор КАК Автор,
	|	Объекты.АвторФИО КАК АвторФИО,
	|	Объекты.Ссылка КАК Ссылка,
	|	Объекты.Наименование КАК Наименование,
	|	Объекты.Номер КАК Номер,
	|	Объекты.Назначение КАК Назначение,
	|	Объекты.СерьезностьОшибки КАК СерьезностьОшибки,
	|	Объекты.СрокРеализации КАК СрокРеализации
	|ПОМЕСТИТЬ ОбъектыКанбана
	|ИЗ
	|	Объекты КАК Объекты
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененийОбъектовПоСобытиям КАК ИсторияИзмененийОбъектовПоСобытиям
	|		ПО (Объекты.Ссылка = (ВЫРАЗИТЬ(ИсторияИзмененийОбъектовПоСобытиям.Объект КАК Документ.ЗаявкаНаРазработку)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Комментарии КАК Комментарии
	|		ПО (Объекты.Ссылка = (ВЫРАЗИТЬ(Комментарии.Объект КАК Документ.ЗаявкаНаРазработку)))}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТегиОбъектов КАК ТегиОбъектов
	|		ПО (Объекты.Ссылка = (ВЫРАЗИТЬ(ТегиОбъектов.Объект КАК Документ.ЗаявкаНаРазработку)))}
	|{ГДЕ
	|	(ЕСТЬNULL(ИсторияИзмененийОбъектовПоСобытиям.Период, ЕСТЬNULL(Комментарии.Период, ДАТАВРЕМЯ(1, 1, 1)))) КАК ДатаИзменения,
	|	ТегиОбъектов.Тег КАК Тег}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыКанбана.Ссылка КАК Объект,
	|	МАКСИМУМ(ДокументСпринт.ДатаОкончания) КАК ДатаОкончания
	|ПОМЕСТИТЬ МаксимальныеДатыОкончанияСпринтов
	|ИЗ
	|	ОбъектыКанбана КАК ОбъектыКанбана
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ПО (СоставСпринтов.Объект = ОбъектыКанбана.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|		ПО (ДокументСпринт.Ссылка = СоставСпринтов.Спринт)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыКанбана.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныеДатыОкончанияСпринтов.Объект КАК Объект,
	|	МАКСИМУМ(СоставСпринтов.Спринт) КАК Спринт
	|ПОМЕСТИТЬ ПоследнийСпринтЗаявки
	|ИЗ
	|	МаксимальныеДатыОкончанияСпринтов КАК МаксимальныеДатыОкончанияСпринтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ПО (СоставСпринтов.Объект = МаксимальныеДатыОкончанияСпринтов.Объект)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|		ПО (ДокументСпринт.ДатаОкончания = МаксимальныеДатыОкончанияСпринтов.ДатаОкончания)
	|			И (СоставСпринтов.Спринт = ДокументСпринт.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	МаксимальныеДатыОкончанияСпринтов.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыКанбана.Ссылка КАК Объект,
	|	ТегиОбъектов.Тег КАК Тег,
	|	Теги.Наименование КАК ТегПредставление
	|ИЗ
	|	ОбъектыКанбана КАК ОбъектыКанбана
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТегиОбъектов КАК ТегиОбъектов
	|		ПО ОбъектыКанбана.Ссылка = ТегиОбъектов.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Теги КАК Теги
	|		ПО (ТегиОбъектов.Тег = Теги.Ссылка)
	|ИТОГИ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыКанбана.Статус КАК Статус,
	|	ОбъектыКанбана.Ссылка КАК Объект,
	|	ОбъектыКанбана.Номер КАК Номер,
	|	ОбъектыКанбана.Наименование КАК Наименование,
	|	ОбъектыКанбана.СерьезностьОшибки КАК СерьезностьОшибки,
	|	ОбъектыКанбана.Автор КАК Автор,
	|	ОбъектыКанбана.АвторФИО КАК АвторФИО,
	|	ОбъектыКанбана.СрокРеализации КАК СрокРеализации,
	|	ЕСТЬNULL(ЗначенияДополнительныхРеквизитовОбъектов.Значение, 0) КАК Трудозатраты,
	|	ЕСТЬNULL(ПланируемыеТрудозатраты.Трудозатраты, 0) КАК ПланТрудозатрат,
	|	ВЫБОР
	|		КОГДА ПоследнийСпринтЗаявки.Спринт ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ПоследнийСпринтЗаявки.Спринт)
	|	КОНЕЦ КАК ПредставлениеСпринта,
	|	ЕСТЬNULL(ПоследнийСпринтЗаявки.Спринт, ЗНАЧЕНИЕ(Документ.Спринт.ПустаяСсылка)) КАК Спринт,
	|	ЕСТЬNULL(ДокументСпринт.Номер, """") КАК НомерСпринт,
	|	ЕСТЬNULL(СерьезностьОшибок.ИмяКартинки, ЕСТЬNULL(НазначенияЗадач.ИмяКартинки, """")) КАК НазначениеИмяКартинки
	|ИЗ
	|	ОбъектыКанбана КАК ОбъектыКанбана
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияДополнительныхРеквизитовОбъектов КАК ЗначенияДополнительныхРеквизитовОбъектов
	|		ПО ОбъектыКанбана.Ссылка = ЗначенияДополнительныхРеквизитовОбъектов.Объект
	|			И (ЗначенияДополнительныхРеквизитовОбъектов.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДополнительныхРеквизитов.ФактическиеТрудозатратыЗадачи))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
	|		ПО ОбъектыКанбана.Ссылка = ПланируемыеТрудозатраты.Объект
	|			И (ПланируемыеТрудозатраты.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследнийСпринтЗаявки КАК ПоследнийСпринтЗаявки
	|		ПО ОбъектыКанбана.Ссылка = ПоследнийСпринтЗаявки.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|		ПО (ДокументСпринт.Ссылка = ПоследнийСпринтЗаявки.Спринт)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НазначенияЗадач КАК НазначенияЗадач
	|		ПО ОбъектыКанбана.Назначение = НазначенияЗадач.Ссылка
	|			И (НазначенияЗадач.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерьезностьОшибок КАК СерьезностьОшибок
	|		ПО ОбъектыКанбана.СерьезностьОшибки = СерьезностьОшибок.Ссылка
	|{ГДЕ
	|	ПоследнийСпринтЗаявки.Спринт КАК Спринт}
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектыКанбана.ПорядокСтатуса
	|ИТОГИ ПО
	|	Статус";
	#КонецОбласти
	
	ПостроительЗапроса = Новый ПостроительЗапроса(ТекстЗапроса); 
	ПостроительЗапроса.Параметры.Вставить("Филиал", Филиал);
	
	Если НастройкиДоски <> Неопределено И НастройкиДоски.Фильтр.Количество() > 0 Тогда
		Для Каждого Отбор Из НастройкиДоски.Фильтр Цикл  
			Если Отбор.Значение.Использование Тогда
				НовыйОтбор = ПостроительЗапроса.Отбор.Добавить(Отбор.Ключ);
				НовыйОтбор.ВидСравнения = Отбор.Значение.ВидСравнения;
				
				Если ТипЗнч(Отбор.Значение.ПравоеЗначение) = Тип("СтандартнаяДатаНачала") Тогда
					НовыйОтбор.Значение = Отбор.Значение.ПравоеЗначение.Дата;
				Иначе     
					НовыйОтбор.Значение = Отбор.Значение.ПравоеЗначение;
				КонецЕсли;            
				
				НовыйОтбор.Использование = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = ПостроительЗапроса.ПолучитьЗапрос();
	Пакеты = Запрос.ВыполнитьПакет();
	
	КоличествоПакетов = Пакеты.ВГраница();
	
	РезультатЗапроса = Пакеты[КоличествоПакетов];
	ВыборкаОбъектыСТегами = Пакеты[КоличествоПакетов - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаСтатусов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСтатусов.Следующий() Цикл
			Карточки = Новый Массив;
			ПорядковыйНомерКарточки = 1;
			
			Выборка = ВыборкаСтатусов.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ШаблонПорядковыйНомер = СтрШаблон("#%1", ПорядковыйНомерКарточки);
				НавигационнаяСсылкаОбъект = ПолучитьНавигационнуюСсылку(Выборка.Объект);
				НавигационнаяСсылкаСпринт = ПолучитьНавигационнуюСсылку(Выборка.Спринт);
				
				ШаблонЗатрат = "%1 ч.";
				ПлановыеТрудозатраты = СтрШаблон(ШаблонЗатрат, Формат(Выборка.ПланТрудозатрат, "ЧРД=.; ЧН="));
				ФактическиеТрудозатраты = СтрШаблон(ШаблонЗатрат, Формат(Выборка.Трудозатраты, "ЧРД=.; ЧН="));
				
				Если ЗначениеЗаполнено(Выборка.Спринт) Тогда 
					ПреобразованныйНомер = ОбщегоНазначенияКлиентСервер.ПривестиКЧислу(Выборка.НомерСпринт, 11);
					Спринт = СтрШаблон("#%1", Формат(ПреобразованныйНомер, "ЧГ=0")); 
				Иначе
					Спринт = "";
				КонецЕсли;
				
				Теги = Новый Массив;
				
				Если ВыборкаОбъектыСТегами.НайтиСледующий(Выборка.Объект, "Объект") Тогда
					ВыборкаТеги = ВыборкаОбъектыСТегами.Выбрать();
					
					Пока ВыборкаТеги.Следующий() Цикл							
						СтруктураТега = Новый Структура();
						СтруктураТега.Вставить("ТегID", XMLСтрока(ВыборкаТеги.Тег));
						СтруктураТега.Вставить("Тег", ВыборкаТеги.ТегПредставление);
						
						Теги.Добавить(СтруктураТега);							
					КонецЦикла;
					
					ВыборкаОбъектыСТегами.Сбросить();
				КонецЕсли;
				
				КартинкаНазначение = СтрШаблон("%1/assets/icons/%2.png", Константы.КорневойURL.Получить(), Выборка.НазначениеИмяКартинки);					
				
				СтруктураКарточки = Новый Структура;
				СтруктураКарточки.Вставить("id", XMLСтрока(Выборка.Объект));
				СтруктураКарточки.Вставить("ШаблонПорядковыйНомер", ШаблонПорядковыйНомер);
				СтруктураКарточки.Вставить("Номер", Выборка.Номер);
				СтруктураКарточки.Вставить("Наименование", Выборка.Наименование);
				СтруктураКарточки.Вставить("Автор", Выборка.АвторФИО);
				СтруктураКарточки.Вставить("Теги", Теги);
				СтруктураКарточки.Вставить("ПлановыеТрудозатраты", ПлановыеТрудозатраты);
				СтруктураКарточки.Вставить("ФактическиеТрудозатраты", ФактическиеТрудозатраты);
				СтруктураКарточки.Вставить("КоличествоДней", 0);
				СтруктураКарточки.Вставить("СрокСдачи", Выборка.СрокРеализации);
				СтруктураКарточки.Вставить("Спринт", Спринт);
				СтруктураКарточки.Вставить("НавигационнаяСсылкаСпринт", НавигационнаяСсылкаСпринт);
				СтруктураКарточки.Вставить("Картинка", КартинкаНазначение);
				СтруктураКарточки.Вставить("НавигационнаяСсылкаОбъект", НавигационнаяСсылкаОбъект);
				
				Карточки.Добавить(СтруктураКарточки);				
				ПорядковыйНомерКарточки = ПорядковыйНомерКарточки + 1;
			КонецЦикла;
			
			ДанныеСписка = Новый Структура("Этап, Количество, Внимание, Карточки", XMLСтрока(ВыборкаСтатусов.Статус), 0, "", Карточки);
			
			Данные.Добавить(ДанныеСписка);
		КонецЦикла;
	КонецЕсли;	
	
	Возврат Данные;
	
КонецФункции
	
Функция СформироватьДанныеТипПулЗаявок(Знач СохраненныеНастройки, Знач Параметры)
	
	Данные = Новый Массив;
	
	НастройкиДоски = Неопределено;
	Если СохраненныеНастройки.Свойство("НастройкиКанбанПулЗаявок") Тогда
		НастройкиДоски = СохраненныеНастройки.НастройкиКанбанПулЗаявок;
	КонецЕсли;
	
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 20
	|	ЗаявкаНаРазработку.Ссылка КАК Ссылка,
	|	ЗаявкаНаРазработкуСистемыРазработки.Система КАК СистемаУчета,
	|	СтатусыОбъектов.Ссылка КАК Статус,
	|	СтатусыОбъектов.Порядок КАК ПорядокСтатуса,
	|	ЗаявкаНаРазработку.Автор КАК Автор,
	|	Пользователи.ФИО КАК АвторФИО,
	|	ЕСТЬNULL(СистемыЗаявокНазначеныеПользователю.ТекущийИсполнитель, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Назначена
	|ПОМЕСТИТЬ ЗавершенныеПулЗаявок
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ЗаявкаНаРазработкуСистемыРазработки
	|		ПО ЗаявкаНаРазработку.Ссылка = ЗаявкаНаРазработкуСистемыРазработки.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|		ПО ЗаявкаНаРазработку.Ссылка = СтатусыЗаявокПоСистемам.Заявка
	|			И (СтатусыЗаявокПоСистемам.Система = ЗаявкаНаРазработкуСистемыРазработки.Система)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (СтатусыЗаявокПоСистемам.Статус = СтатусыОбъектов.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (Пользователи.Ссылка = ЗаявкаНаРазработку.Автор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СистемыЗаявокНазначеныеПользователю КАК СистемыЗаявокНазначеныеПользователю
	|		ПО (СистемыЗаявокНазначеныеПользователю.Заявка = ЗаявкаНаРазработку.Ссылка)
	|			И (СистемыЗаявокНазначеныеПользователю.Система = ЗаявкаНаРазработкуСистемыРазработки.Система)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Продукты КАК Продукты
	|		ПО ЗаявкаНаРазработку.Продукт = Продукты.Ссылка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА СтатусыОбъектов.Ссылка В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|					ИЛИ СтатусыОбъектов.Родитель В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистемаГруппаЗаказчиков)
	|				ТОГДА Продукты.Ссылка ЕСТЬ NULL
	|			КОГДА &ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистема)
	|				ТОГДА Продукты.Ссылка ЕСТЬ NULL
	|			ИНАЧЕ &ВидОчереди = Продукты.ВидОчереди
	|		КОНЕЦ
	|{ГДЕ
	|	ЗаявкаНаРазработку.Продукт КАК Продукт,
	|	ЗаявкаНаРазработку.Ссылка КАК Ссылка,
	|	ЗаявкаНаРазработку.Автор КАК Автор,
	|	ЗаявкаНаРазработку.ОбъектОснование КАК Проект,
	|	ЗаявкаНаРазработку.Назначение КАК Назначение,
	|	ЗаявкаНаРазработку.Направление КАК Направление,
	|	ЗаявкаНаРазработкуСистемыРазработки.Система КАК Система,
	|	ЗаявкаНаРазработкуСистемыРазработки.ГруппаЗаказчиков КАК ГруппаЗаказчиков,
	|	СистемыЗаявокНазначеныеПользователю.Филиал КАК Команда}
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаявкаНаРазработку.Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаНаРазработку.Ссылка КАК Ссылка,
	|	ЗаявкаНаРазработкуСистемыРазработки.Система КАК СистемаУчета,
	|	СтатусыОбъектов.Ссылка КАК Статус,
	|	СтатусыОбъектов.Порядок КАК ПорядокСтатуса,
	|	ЗаявкаНаРазработку.Автор КАК Автор,
	|	Пользователи.ФИО КАК АвторФИО,
	|	ЕСТЬNULL(СистемыЗаявокНазначеныеПользователю.ТекущийИсполнитель, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Назначена
	|ПОМЕСТИТЬ Объекты
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ЗаявкаНаРазработкуСистемыРазработки
	|		ПО ЗаявкаНаРазработку.Ссылка = ЗаявкаНаРазработкуСистемыРазработки.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|		ПО ЗаявкаНаРазработку.Ссылка = СтатусыЗаявокПоСистемам.Заявка
	|			И (СтатусыЗаявокПоСистемам.Система = ЗаявкаНаРазработкуСистемыРазработки.Система)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (СтатусыЗаявокПоСистемам.Статус = СтатусыОбъектов.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (Пользователи.Ссылка = ЗаявкаНаРазработку.Автор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СистемыЗаявокНазначеныеПользователю КАК СистемыЗаявокНазначеныеПользователю
	|		ПО (СистемыЗаявокНазначеныеПользователю.Заявка = ЗаявкаНаРазработку.Ссылка)
	|			И (СистемыЗаявокНазначеныеПользователю.Система = ЗаявкаНаРазработкуСистемыРазработки.Система)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Продукты КАК Продукты
	|		ПО ЗаявкаНаРазработку.Продукт = Продукты.Ссылка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА СтатусыОбъектов.Ссылка В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|					ИЛИ СтатусыОбъектов.Родитель В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистемаГруппаЗаказчиков)
	|				ТОГДА Продукты.Ссылка ЕСТЬ NULL
	|			КОГДА &ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистема)
	|				ТОГДА Продукты.Ссылка ЕСТЬ NULL
	|			ИНАЧЕ &ВидОчереди = Продукты.ВидОчереди
	|		КОНЕЦ
	|{ГДЕ
	|	ЗаявкаНаРазработку.Продукт КАК Продукт,
	|	ЗаявкаНаРазработку.Ссылка КАК Ссылка,
	|	ЗаявкаНаРазработку.Автор КАК Автор,
	|	ЗаявкаНаРазработку.ОбъектОснование КАК Проект,
	|	ЗаявкаНаРазработку.Назначение КАК Назначение,
	|	ЗаявкаНаРазработку.Направление КАК Направление,
	|	ЗаявкаНаРазработкуСистемыРазработки.Система КАК Система,
	|	ЗаявкаНаРазработкуСистемыРазработки.ГруппаЗаказчиков КАК ГруппаЗаказчиков,
	|	СистемыЗаявокНазначеныеПользователю.Филиал КАК Команда}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗавершенныеПулЗаявок.Ссылка,
	|	ЗавершенныеПулЗаявок.СистемаУчета,
	|	ЗавершенныеПулЗаявок.Статус,
	|	ЗавершенныеПулЗаявок.ПорядокСтатуса,
	|	ЗавершенныеПулЗаявок.Автор,
	|	ЗавершенныеПулЗаявок.АвторФИО,
	|	ЗавершенныеПулЗаявок.Назначена
	|ИЗ
	|	ЗавершенныеПулЗаявок КАК ЗавершенныеПулЗаявок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Объекты.Ссылка КАК Ссылка,
	|	МИНИМУМ(Объекты.ПорядокСтатуса) КАК ПорядокСтатуса
	|ПОМЕСТИТЬ МинимальныйСтатус
	|ИЗ
	|	Объекты КАК Объекты
	|
	|СГРУППИРОВАТЬ ПО
	|	Объекты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Объекты.Ссылка КАК Ссылка,
	|	Объекты.Статус КАК Статус,
	|	Объекты.ПорядокСтатуса КАК ПорядокСтатуса,
	|	Объекты.Автор КАК Автор,
	|	Объекты.АвторФИО КАК АвторФИО,
	|	Объекты.СистемаУчета КАК СистемаУчета,
	|	Объекты.Назначена КАК Назначена
	|ПОМЕСТИТЬ ОбъектыКанбана
	|ИЗ
	|	Объекты КАК Объекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальныйСтатус КАК МинимальныйСтатус
	|		ПО Объекты.Ссылка = МинимальныйСтатус.Ссылка
	|			И Объекты.ПорядокСтатуса = МинимальныйСтатус.ПорядокСтатуса
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИзмененийОбъектовПоСобытиям КАК ИсторияИзмененийОбъектовПоСобытиям
	|		ПО (Объекты.Ссылка = (ВЫРАЗИТЬ(ИсторияИзмененийОбъектовПоСобытиям.Объект КАК Документ.ЗаявкаНаРазработку)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Комментарии КАК Комментарии
	|		ПО (Объекты.Ссылка = (ВЫРАЗИТЬ(Комментарии.Объект КАК Документ.ЗаявкаНаРазработку)))}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТегиОбъектов КАК ТегиОбъектов
	|		ПО (Объекты.Ссылка = (ВЫРАЗИТЬ(ТегиОбъектов.Объект КАК Документ.ЗаявкаНаРазработку)))}
	|{ГДЕ
	|	(ЕСТЬNULL(ИсторияИзмененийОбъектовПоСобытиям.Период, ЕСТЬNULL(Комментарии.Период, ДАТАВРЕМЯ(1, 1, 1)))) КАК ДатаИзменения,
	|	ТегиОбъектов.Тег КАК Тег}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыКанбана.Ссылка КАК Объект,
	|	МАКСИМУМ(ДокументСпринт.ДатаОкончания) КАК ДатаОкончания
	|ПОМЕСТИТЬ МаксимальныеДатыОкончанияСпринтов
	|ИЗ
	|	ОбъектыКанбана КАК ОбъектыКанбана
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ПО (СоставСпринтов.Объект = ОбъектыКанбана.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|		ПО (ДокументСпринт.Ссылка = СоставСпринтов.Спринт)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыКанбана.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныеДатыОкончанияСпринтов.Объект КАК Объект,
	|	МАКСИМУМ(СоставСпринтов.Спринт) КАК Спринт
	|ПОМЕСТИТЬ ПоследнийСпринтЗаявки
	|ИЗ
	|	МаксимальныеДатыОкончанияСпринтов КАК МаксимальныеДатыОкончанияСпринтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ПО (СоставСпринтов.Объект = МаксимальныеДатыОкончанияСпринтов.Объект)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|		ПО (ДокументСпринт.ДатаОкончания = МаксимальныеДатыОкончанияСпринтов.ДатаОкончания)
	|			И (СоставСпринтов.Спринт = ДокументСпринт.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	МаксимальныеДатыОкончанияСпринтов.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыКанбана.Статус КАК Статус,
	|	ЗаявкаНаРазработку.Ссылка КАК Ссылка,
	|	ЗаявкаНаРазработку.Номер КАК Номер,
	|	ЗаявкаНаРазработку.Дата КАК ДатаСоздания,
	|	ЗаявкаНаРазработку.Наименование КАК Наименование,
	|	ВЫРАЗИТЬ(ЗаявкаНаРазработку.ОбъектОснование КАК Справочник.Проекты) КАК Проект,
	|	ОбъектыКанбана.Назначена КАК НазначенаСсылка,
	|	ОбъектыКанбана.Автор КАК Автор,
	|	ОбъектыКанбана.АвторФИО КАК АвторФИО,
	|	ОбъектыКанбана.ПорядокСтатуса КАК ПорядокСтатуса,
	|	ЗаявкаНаРазработку.СрокРеализации КАК СрокРеализации,
	|	ЗаявкаНаРазработку.Назначение КАК Назначение,
	|	ЗаявкаНаРазработку.СерьезностьОшибки КАК СерьезностьОшибки,
	|	ВЫБОР
	|		КОГДА &ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистемаГруппаЗаказчиков)
	|			ТОГДА ЕСТЬNULL(ОчередьЗаявокСистемаГруппаЗаказчиков.Зафиксирован, ЛОЖЬ)
	|		КОГДА &ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Продукт)
	|			ТОГДА ЕСТЬNULL(ОчередьЗаявокПродукт.Зафиксирован, ЛОЖЬ)
	|		КОГДА &ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ПродуктСистема)
	|			ТОГДА ЕСТЬNULL(ОчередьЗаявокПродуктСистема.Зафиксирован, ЛОЖЬ)
	|		КОГДА &ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистема)
	|			ТОГДА ЕСТЬNULL(ОчередьЗаявокСистема.Зафиксирован, ЛОЖЬ)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ ОчередьЗаявокПродуктСистема.Зафиксирован ЕСТЬ NULL
	|					ТОГДА ЕСТЬNULL(ОчередьЗаявокПродуктСистема.Зафиксирован, ЛОЖЬ)
	|				КОГДА НЕ ОчередьЗаявокПродукт.Зафиксирован ЕСТЬ NULL
	|					ТОГДА ЕСТЬNULL(ОчередьЗаявокПродукт.Зафиксирован, ЛОЖЬ)
	|				ИНАЧЕ ЕСТЬNULL(ОчередьЗаявокСистемаГруппаЗаказчиков.Зафиксирован, ЛОЖЬ)
	|			КОНЕЦ
	|	КОНЕЦ КАК Зафиксирован,
	|	ВЫБОР
	|		КОГДА &ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистемаГруппаЗаказчиков)
	|			ТОГДА ЕСТЬNULL(ОчередьЗаявокСистемаГруппаЗаказчиков.Порядок, 99999)
	|		КОГДА &ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Продукт)
	|			ТОГДА ЕСТЬNULL(ОчередьЗаявокПродукт.Порядок, 99999)
	|		КОГДА &ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ПродуктСистема)
	|			ТОГДА ЕСТЬNULL(ОчередьЗаявокПродуктСистема.Порядок, 99999)
	|		КОГДА &ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистема)
	|			ТОГДА ЕСТЬNULL(ОчередьЗаявокСистема.Порядок, 99999)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ ОчередьЗаявокПродуктСистема.Зафиксирован ЕСТЬ NULL
	|					ТОГДА ЕСТЬNULL(ОчередьЗаявокПродуктСистема.Порядок, 0)
	|				КОГДА НЕ ОчередьЗаявокПродукт.Зафиксирован ЕСТЬ NULL
	|					ТОГДА ЕСТЬNULL(ОчередьЗаявокПродукт.Порядок, 0)
	|				ИНАЧЕ ЕСТЬNULL(ОчередьЗаявокСистемаГруппаЗаказчиков.Порядок, 99999)
	|			КОНЕЦ
	|	КОНЕЦ КАК ПорядокВОчереди,
	|	ВЫБОР
	|		КОГДА &ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистемаГруппаЗаказчиков)
	|			ТОГДА ЕСТЬNULL(ОчередьЗаявокСистемаГруппаЗаказчиков.Порядок, 0)
	|		КОГДА &ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Продукт)
	|			ТОГДА ЕСТЬNULL(ОчередьЗаявокПродукт.Порядок, 0)
	|		КОГДА &ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ПродуктСистема)
	|			ТОГДА ЕСТЬNULL(ОчередьЗаявокПродуктСистема.Порядок, 0)
	|		КОГДА &ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистема)
	|			ТОГДА ЕСТЬNULL(ОчередьЗаявокСистема.Порядок, 0)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ ОчередьЗаявокПродуктСистема.Зафиксирован ЕСТЬ NULL
	|					ТОГДА ЕСТЬNULL(ОчередьЗаявокПродуктСистема.Порядок, 0)
	|				КОГДА НЕ ОчередьЗаявокПродукт.Зафиксирован ЕСТЬ NULL
	|					ТОГДА ЕСТЬNULL(ОчередьЗаявокПродукт.Порядок, 0)
	|				ИНАЧЕ ЕСТЬNULL(ОчередьЗаявокСистемаГруппаЗаказчиков.Порядок, 0)
	|			КОНЕЦ
	|	КОНЕЦ КАК Порядок,
	|	ОбъектыКанбана.СистемаУчета КАК СистемаУчета,
	|	ЕСТЬNULL(ЗаявкаНаРазработкуСистемыРазработки.ГруппаЗаказчиков, """") КАК ГруппаЗаказчиков,
	|	""Порядок в очереди"" КАК ПредставлениеПорядок
	|ПОМЕСТИТЬ ОтобранныеОбъектыДляВывода
	|ИЗ
	|	ОбъектыКанбана КАК ОбъектыКанбана
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО ОбъектыКанбана.Ссылка = ЗаявкаНаРазработку.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ЗаявкаНаРазработкуСистемыРазработки
	|		ПО (ЗаявкаНаРазработку.Ссылка = ЗаявкаНаРазработкуСистемыРазработки.Ссылка)
	|			И ОбъектыКанбана.СистемаУчета = ЗаявкаНаРазработкуСистемыРазработки.Система
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Продукты КАК Продукты
	|		ПО (Продукты.Ссылка = ЗаявкаНаРазработку.Продукт)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиЗаявок КАК ОчередьЗаявокСистема
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчередиСистема
	|			ПО (КлючОчередиСистема.Ссылка = ОчередьЗаявокСистема.КлючОчередиОбъекта)
	|				И (КлючОчередиСистема.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистема))
	|		ПО (ЗаявкаНаРазработку.Ссылка = ОчередьЗаявокСистема.Заявка)
	|			И (КлючОчередиСистема.Система = ЗаявкаНаРазработкуСистемыРазработки.Система)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиЗаявок КАК ОчередьЗаявокСистемаГруппаЗаказчиков
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|			ПО (КлючОчереди.Ссылка = ОчередьЗаявокСистемаГруппаЗаказчиков.КлючОчередиОбъекта)
	|				И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистемаГруппаЗаказчиков))
	|		ПО (ЗаявкаНаРазработку.Ссылка = ОчередьЗаявокСистемаГруппаЗаказчиков.Заявка)
	|			И (КлючОчереди.Система = ЗаявкаНаРазработкуСистемыРазработки.Система)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиЗаявок КАК ОчередьЗаявокПродукт
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчередиПродукт
	|			ПО (КлючОчередиПродукт.Ссылка = ОчередьЗаявокПродукт.КлючОчередиОбъекта)
	|				И (КлючОчередиПродукт.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Продукт))
	|		ПО (ЗаявкаНаРазработку.Ссылка = ОчередьЗаявокПродукт.Заявка)
	|			И (ЕСТЬNULL(Продукты.Ссылка, НЕОПРЕДЕЛЕНО) = КлючОчередиПродукт.Продукт)
	|			И (ЕСТЬNULL(Продукты.ВидОчереди, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Продукт))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиЗаявок КАК ОчередьЗаявокПродуктСистема
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчередиПродуктСистема
	|			ПО (КлючОчередиПродуктСистема.Ссылка = ОчередьЗаявокПродуктСистема.КлючОчередиОбъекта)
	|				И (КлючОчередиПродуктСистема.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ПродуктСистема))
	|		ПО (ЗаявкаНаРазработку.Ссылка = ОчередьЗаявокПродуктСистема.Заявка)
	|			И (ЕСТЬNULL(Продукты.ВидОчереди, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ПродуктСистема))
	|			И (КлючОчередиПродуктСистема.Система = ЗаявкаНаРазработкуСистемыРазработки.Система)
	|			И (ЕСТЬNULL(Продукты.Ссылка, НЕОПРЕДЕЛЕНО) = КлючОчередиПродуктСистема.Продукт)
	|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СистемыЗаявокНазначеныеПользователю КАК СистемыЗаявокНазначеныеПользователю
	|		ПО (ЗаявкаНаРазработку.Ссылка = СистемыЗаявокНазначеныеПользователю.Заявка)
	|			И (ЗаявкаНаРазработкуСистемыРазработки.Система = СистемыЗаявокНазначеныеПользователю.Система)}
	|{ГДЕ
	|	(НЕОПРЕДЕЛЕНО) КАК Назначена}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыКанбана.Ссылка КАК Объект,
	|	ТегиОбъектов.Тег КАК Тег,
	|	Теги.Наименование КАК ТегПредставление
	|ИЗ
	|	ОбъектыКанбана КАК ОбъектыКанбана
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТегиОбъектов КАК ТегиОбъектов
	|		ПО ОбъектыКанбана.Ссылка = ТегиОбъектов.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Теги КАК Теги
	|		ПО (ТегиОбъектов.Тег = Теги.Ссылка)
	|ИТОГИ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыКанбана.Статус КАК Статус,
	|	ОбъектыКанбана.Ссылка КАК Объект,
	|	ОбъектыКанбана.Номер КАК Номер,
	|	ОбъектыКанбана.Наименование КАК Наименование,
	|	ОбъектыКанбана.СерьезностьОшибки КАК СерьезностьОшибки,
	|	ОбъектыКанбана.Автор КАК Автор,
	|	ОбъектыКанбана.АвторФИО КАК АвторФИО,
	|	ОбъектыКанбана.СрокРеализации КАК СрокРеализации,
	|	ОбъектыКанбана.Зафиксирован КАК Зафиксирован,
	|	ОбъектыКанбана.ПорядокВОчереди КАК ПорядокВОчереди,
	|	ЕСТЬNULL(ЗначенияДополнительныхРеквизитовОбъектов.Значение, 0) КАК Трудозатраты,
	|	ЕСТЬNULL(ПланируемыеТрудозатраты.Трудозатраты, 0) КАК ПланТрудозатрат,
	|	ВЫБОР
	|		КОГДА ПоследнийСпринтЗаявки.Спринт ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ПоследнийСпринтЗаявки.Спринт)
	|	КОНЕЦ КАК ПредставлениеСпринта,
	|	ЕСТЬNULL(ПоследнийСпринтЗаявки.Спринт, ЗНАЧЕНИЕ(Документ.Спринт.ПустаяСсылка)) КАК Спринт,
	|	ЕСТЬNULL(ДокументСпринт.Номер, """") КАК НомерСпринт,
	|	ЕСТЬNULL(СерьезностьОшибок.ИмяКартинки, ЕСТЬNULL(НазначенияЗадач.ИмяКартинки, """")) КАК НазначениеИмяКартинки
	|ИЗ
	|	ОтобранныеОбъектыДляВывода КАК ОбъектыКанбана
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияДополнительныхРеквизитовОбъектов КАК ЗначенияДополнительныхРеквизитовОбъектов
	|		ПО ОбъектыКанбана.Ссылка = ЗначенияДополнительныхРеквизитовОбъектов.Объект
	|			И (ЗначенияДополнительныхРеквизитовОбъектов.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДополнительныхРеквизитов.ФактическиеТрудозатратыЗадачи))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
	|		ПО ОбъектыКанбана.Ссылка = ПланируемыеТрудозатраты.Объект
	|			И (ПланируемыеТрудозатраты.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследнийСпринтЗаявки КАК ПоследнийСпринтЗаявки
	|		ПО ОбъектыКанбана.Ссылка = ПоследнийСпринтЗаявки.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|		ПО (ДокументСпринт.Ссылка = ПоследнийСпринтЗаявки.Спринт)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НазначенияЗадач КАК НазначенияЗадач
	|		ПО ОбъектыКанбана.Назначение = НазначенияЗадач.Ссылка
	|			И (НазначенияЗадач.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерьезностьОшибок КАК СерьезностьОшибок
	|		ПО ОбъектыКанбана.СерьезностьОшибки = СерьезностьОшибок.Ссылка
	|{ГДЕ
	|	ПоследнийСпринтЗаявки.Спринт КАК Спринт}
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектыКанбана.ПорядокСтатуса,
	|	ПорядокВОчереди
	|ИТОГИ ПО
	|	Статус";
	#КонецОбласти
		
	ПостроительЗапроса = Новый ПостроительЗапроса(ТекстЗапроса); 
	ПостроительЗапроса.Параметры.Вставить("ВидОчереди", Параметры.ВидОчереди);
	
	ПараметрыДляОтборов = Новый Массив;
	ПараметрыДляОтборов.Добавить("Направление");
	ПараметрыДляОтборов.Добавить("Система");
	ПараметрыДляОтборов.Добавить("ГруппаЗаказчиков");
	ПараметрыДляОтборов.Добавить("Продукт");
	
	Для Каждого Название Из ПараметрыДляОтборов Цикл  			
		Если ЗначениеЗаполнено(Параметры[Название]) Тогда
			НовыйОтбор = ПостроительЗапроса.Отбор.Добавить(Название);
			НовыйОтбор.ВидСравнения = ВидСравнения.Равно;
			НовыйОтбор.Значение = Параметры[Название];
			НовыйОтбор.Использование = Истина;
		КонецЕсли;            
	КонецЦикла;
	
	Если НастройкиДоски <> Неопределено И НастройкиДоски.Фильтр.Количество() > 0 Тогда
		Для Каждого Отбор Из НастройкиДоски.Фильтр Цикл  
			Если Отбор.Значение.Использование Тогда
				НовыйОтбор = ПостроительЗапроса.Отбор.Добавить(Отбор.Ключ);
				НовыйОтбор.ВидСравнения = Отбор.Значение.ВидСравнения;
				
				Если ТипЗнч(Отбор.Значение.ПравоеЗначение) = Тип("СтандартнаяДатаНачала") Тогда
					НовыйОтбор.Значение = Отбор.Значение.ПравоеЗначение.Дата;
				Иначе     
					НовыйОтбор.Значение = Отбор.Значение.ПравоеЗначение;
				КонецЕсли;            
				
				НовыйОтбор.Использование = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = ПостроительЗапроса.ПолучитьЗапрос();
	Пакеты = Запрос.ВыполнитьПакет();
	
	КоличествоПакетов = Пакеты.ВГраница();
	
	РезультатЗапроса = Пакеты[КоличествоПакетов];
	ВыборкаОбъектыСТегами = Пакеты[КоличествоПакетов - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаСтатусов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСтатусов.Следующий() Цикл
			Карточки = Новый Массив;
			ПорядковыйНомерКарточки = 1;
			
			Выборка = ВыборкаСтатусов.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ШаблонПорядковыйНомер = СтрШаблон("#%1", ПорядковыйНомерКарточки);
				
				ПорядокВОчереди = 0;
				Если Выборка.ПорядокВОчереди < 99999 Тогда
					ПорядокВОчереди = Выборка.ПорядокВОчереди;
				КонецЕсли;
				
				НавигационнаяСсылкаОбъект = ПолучитьНавигационнуюСсылку(Выборка.Объект);
				НавигационнаяСсылкаСпринт = ПолучитьНавигационнуюСсылку(Выборка.Спринт);
				
				ШаблонЗатрат = "%1 ч.";
				ПлановыеТрудозатраты = СтрШаблон(ШаблонЗатрат, Формат(Выборка.ПланТрудозатрат, "ЧРД=.; ЧН="));
				ФактическиеТрудозатраты = СтрШаблон(ШаблонЗатрат, Формат(Выборка.Трудозатраты, "ЧРД=.; ЧН="));
				
				Если ЗначениеЗаполнено(Выборка.Спринт) Тогда 
					ПреобразованныйНомер = ОбщегоНазначенияКлиентСервер.ПривестиКЧислу(Выборка.НомерСпринт, 11);
					Спринт = СтрШаблон("#%1", Формат(ПреобразованныйНомер, "ЧГ=0")); 
				Иначе
					Спринт = "";
				КонецЕсли;
				
				Теги = Новый Массив;
				
				Если ВыборкаОбъектыСТегами.НайтиСледующий(Выборка.Объект, "Объект") Тогда
					ВыборкаТеги = ВыборкаОбъектыСТегами.Выбрать();
					
					Пока ВыборкаТеги.Следующий() Цикл							
						СтруктураТега = Новый Структура();
						СтруктураТега.Вставить("ТегID", XMLСтрока(ВыборкаТеги.Тег));
						СтруктураТега.Вставить("Тег", ВыборкаТеги.ТегПредставление);
						
						Теги.Добавить(СтруктураТега);							
					КонецЦикла;
					
					ВыборкаОбъектыСТегами.Сбросить();
				КонецЕсли;
				
				КартинкаНазначение = СтрШаблон("%1/assets/icons/%2.png", Константы.КорневойURL.Получить(), Выборка.НазначениеИмяКартинки);					
				
				СтруктураКарточки = Новый Структура;
				СтруктураКарточки.Вставить("id", XMLСтрока(Выборка.Объект));
				СтруктураКарточки.Вставить("ШаблонПорядковыйНомер", ШаблонПорядковыйНомер);
				СтруктураКарточки.Вставить("ПорядокВОчереди", ПорядокВОчереди);
				СтруктураКарточки.Вставить("ПорядокЗафиксирован", Выборка.Зафиксирован);
				СтруктураКарточки.Вставить("Номер", Выборка.Номер);
				СтруктураКарточки.Вставить("Наименование", Выборка.Наименование);
				СтруктураКарточки.Вставить("Автор", Выборка.АвторФИО);
				СтруктураКарточки.Вставить("Теги", Теги);
				СтруктураКарточки.Вставить("ПлановыеТрудозатраты", ПлановыеТрудозатраты);
				СтруктураКарточки.Вставить("ФактическиеТрудозатраты", ФактическиеТрудозатраты);
				СтруктураКарточки.Вставить("КоличествоДней", 0);
				СтруктураКарточки.Вставить("СрокСдачи", Выборка.СрокРеализации);
				СтруктураКарточки.Вставить("Спринт", Спринт);
				СтруктураКарточки.Вставить("НавигационнаяСсылкаСпринт", НавигационнаяСсылкаСпринт);
				СтруктураКарточки.Вставить("Картинка", КартинкаНазначение);
				СтруктураКарточки.Вставить("НавигационнаяСсылкаОбъект", НавигационнаяСсылкаОбъект);
				
				Карточки.Добавить(СтруктураКарточки);				
				ПорядковыйНомерКарточки = ПорядковыйНомерКарточки + 1;
			КонецЦикла;
			
			ДанныеСписка = Новый Структура("Этап, Количество, Внимание, Карточки", XMLСтрока(ВыборкаСтатусов.Статус), 0, "", Карточки);
			
			Данные.Добавить(ДанныеСписка);
		КонецЦикла;
	КонецЕсли;	
	
	Возврат Данные;
КонецФункции

#КонецОбласти

Функция СформироватьДанныеЗадачи(Знач Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		#Область ТекстЗапроса
		"ВЫБРАТЬ
		|	Задача.Ссылка КАК Ссылка,
		|	Задача.Номер КАК Номер,
		|	Задача.Дата КАК Дата,
		|	Задача.Автор КАК Автор,
		|	Задача.ВидПроцесса КАК ВидПроцесса,
		|	Задача.Заказчик КАК Заказчик,
		|	Задача.Наименование КАК Наименование,
		|	Задача.Направление КАК Направление,
		|	Задача.ОбъектОснование КАК ОбъектОснование,
		|	Задача.СистемаУчета КАК СистемаУчета,
		|	Задача.Статус КАК Статус,
		|	Задача.Филиал КАК Филиал
		|ИЗ
		|	Документ.Задача КАК Задача
		|ГДЕ
		|	Задача.Ссылка = &Ссылка";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ОписаниеТипаЧисло = ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(10);
	НомерБезПрефикса = ОбщегоНазначения.ПолучитьНомерОбъектаБезПрефикса(Ссылка, Выборка.Номер);
	КороткийНомер = ОписаниеТипаЧисло.ПривестиЗначение(НомерБезПрефикса);
	
	ДанныеЗадачи = Новый Структура;
	ДанныеЗадачи.Вставить("id", XMLСтрока(Ссылка));
	ДанныеЗадачи.Вставить("number", КороткийНомер);
	ДанныеЗадачи.Вставить("name", Выборка.Наименование);
	ДанныеЗадачи.Вставить("date", Выборка.Дата);
	ДанныеЗадачи.Вставить("status", Строка(Выборка.Статус));
	ДанныеЗадачи.Вставить("system", Строка(Выборка.СистемаУчета));
	ДанныеЗадачи.Вставить("base", Строка(Выборка.ОбъектОснование));
	ДанныеЗадачи.Вставить("customer", Строка(Выборка.Заказчик));
	ДанныеЗадачи.Вставить("direction", Строка(Выборка.Направление));
	ДанныеЗадачи.Вставить("process", Строка(Выборка.ВидПроцесса));
	ДанныеЗадачи.Вставить("author", Строка(Выборка.Автор));
	ДанныеЗадачи.Вставить("department", Строка(Выборка.Филиал));
	
	Возврат ДанныеЗадачи;
	
КонецФункции

Функция СформироватьДанныеЗаявки(Знач ЗаявкаОбъект)
	
	ОписаниеТипаЧисло = ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(10);
	НомерБезПрефикса = ОбщегоНазначения.ПолучитьНомерОбъектаБезПрефикса(ЗаявкаОбъект.Ссылка, ЗаявкаОбъект.Номер);
	КороткийНомер = ОписаниеТипаЧисло.ПривестиЗначение(НомерБезПрефикса);
	
	СистемыЗаявки = Новый Массив;
	Для Каждого Строка Из ЗаявкаОбъект.СистемыРазработки Цикл
		СистемыЗаявки.Добавить(Строка(Строка.Система));
	КонецЦикла;
	
	ДанныеЗаявки = Новый Структура;
	ДанныеЗаявки.Вставить("id", XMLСтрока(ЗаявкаОбъект.Ссылка));
	ДанныеЗаявки.Вставить("number", КороткийНомер);
	ДанныеЗаявки.Вставить("name", ЗаявкаОбъект.Наименование);
	ДанныеЗаявки.Вставить("date", ЗаявкаОбъект.Дата);
	ДанныеЗаявки.Вставить("author", Строка(ЗаявкаОбъект.Автор));
	ДанныеЗаявки.Вставить("direction", Строка(ЗаявкаОбъект.Направление));
	ДанныеЗаявки.Вставить("systems", СистемыЗаявки);
	ДанныеЗаявки.Вставить("entity", Строка(ЗаявкаОбъект.ЮридическоеЛицо));
	ДанныеЗаявки.Вставить("process", Строка(ЗаявкаОбъект.ВидПроцесса));
	
	Возврат ДанныеЗаявки;
	
КонецФункции

Функция СформироватьКолонкиДоски(Знач ТекущийПользователь, Знач Параметры)
	
	Данные = Новый Структура("Колонки, Переходы, Причины, ИзменениеПорядкаКолонок, ИзменениеПорядкаКарточек", 
		Новый Соответствие, Новый Соответствие, Новый Соответствие, Ложь, Ложь);
		
	ДоступныеФилиалы = ПолучитьДоступныеФилиалыКанбан(ТекущийПользователь);	
	
	Если Параметры.Тип = Перечисления.ТипыКанбана.ЗадачаНовый Тогда
		
	#Область ТипЗадача
		Настройка = ПланыВидовХарактеристик.ВидыНастроекФилиалов.ОцениватьЗадачиВStoryPoint;	
		ОтображатьПоинты = РегистрыСведений.НастройкиФилиалов.ЗначениеНастройки(Параметры.Филиал, Настройка);	
		Данные.Вставить("ОтображатьПоинты", ОтображатьПоинты);	
			
		Процесс = Справочники.Процессы.ИспользуемыйПроцессФилиала(Параметры.Филиал, Справочники.ТипыОбъектовВладельцев.Документ_Задача);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЭтапыКанбана.Ссылка КАК Ссылка,
		|	СтатусыОбъектов.Ссылка КАК ТекущийСтатус,
		|	ЕСТЬNULL(ЭтапыКанбанаПереходы.ЭлементПерехода, ЗНАЧЕНИЕ(Справочник.ЭтапыКанбана.ПустаяСсылка)) КАК ЭлементПерехода,
		|	СтатусыОбъектов.Наименование КАК Наименование,
		|	СтатусыОбъектов.ИмяКартинкиВБиблиотеке КАК ИмяКартинкиВБиблиотеке,
		|	ЕСТЬNULL(ПорядокЭтаповКанбана.Порядок, ЭтапыКанбана.ПорядокОтображения) КАК Порядок,
		|	ВЫБОР
		|		КОГДА СтатусыОбъектов.Ссылка = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)
		|				ИЛИ СтатусыОбъектов.Ссылка = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ФинальныйЭтап
		|ПОМЕСТИТЬ Переходы
		|ИЗ
		|	Справочник.ЭтапыКанбана КАК ЭтапыКанбана
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана.ЭлементыЭтапа КАК ЭтапыКанбанаЭлементыЭтапа
		|		ПО ЭтапыКанбана.Ссылка = ЭтапыКанбанаЭлементыЭтапа.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
		|		ПО (ЭтапыКанбанаЭлементыЭтапа.Элемент = СтатусыОбъектов.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана.Переходы КАК ЭтапыКанбанаПереходы
		|		ПО ЭтапыКанбана.Ссылка = ЭтапыКанбанаПереходы.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокЭтаповКанбана КАК ПорядокЭтаповКанбана
		|		ПО (ПорядокЭтаповКанбана.Этап = ЭтапыКанбана.Ссылка)
		|			И (ПорядокЭтаповКанбана.Филиал = &Филиал)
		|ГДЕ
		|	ЭтапыКанбана.Владелец = &Процесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Переходы.Ссылка КАК Этап,
		|	Переходы.Наименование КАК ТекущийСтатусНаименование,
		|	Переходы.ИмяКартинкиВБиблиотеке КАК ТекущийСтатусИмяКартинки,
		|	Переходы.ФинальныйЭтап КАК ФинальныйЭтап,
		|	Переходы.Порядок КАК Порядок
		|ИЗ
		|	Переходы КАК Переходы
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Переходы.Ссылка КАК Этап,
		|	Переходы.ЭлементПерехода КАК ЭтапПерехода
		|ИЗ
		|	Переходы КАК Переходы
		|ГДЕ
		|	Переходы.ЭлементПерехода <> ЗНАЧЕНИЕ(Справочник.ЭтапыКанбана.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Переходы.Порядок
		|ИТОГИ ПО
		|	Этап
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Переходы.Ссылка КАК Этап,
		|	Переходы.Порядок КАК Порядок,
		|	ПричиныИзмененияСтатусов.Ссылка КАК ПричинаСсылка,
		|	ПричиныИзмененияСтатусов.Наименование КАК Причина,
		|	ПричиныИзмененияСтатусов.ОбязательноеЗаполнениеКомментария КАК ОбязательныйКомментарий,
		|	СтатусыОбъектовПричиныИзмененияСтатуса.Порядок КАК ПорядокПричины
		|ИЗ
		|	Переходы КАК Переходы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов.ПричиныИзмененияСтатуса КАК СтатусыОбъектовПричиныИзмененияСтатуса
		|		ПО Переходы.ТекущийСтатус = СтатусыОбъектовПричиныИзмененияСтатуса.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПричиныИзмененияСтатусов КАК ПричиныИзмененияСтатусов
		|		ПО (СтатусыОбъектовПричиныИзмененияСтатуса.Причина = ПричиныИзмененияСтатусов.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПричиныИзмененияСтатусов.ОбластьИспользования КАК ТаблицаОбластьИспользования
		|		ПО (ПричиныИзмененияСтатусов.Ссылка = ТаблицаОбластьИспользования.Ссылка)
		|			И (ТаблицаОбластьИспользования.ТипОбъекта = ЗНАЧЕНИЕ(Справочник.ТипыОбъектовВладельцев.Документ_Задача))
		|ГДЕ
		|	НЕ ПричиныИзмененияСтатусов.ПометкаУдаления
		|	И НЕ ТаблицаОбластьИспользования.ТипОбъекта ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	ПорядокПричины
		|ИТОГИ ПО
		|	Этап";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Процесс", Процесс);
		Запрос.УстановитьПараметр("Филиал", Параметры.Филиал);
		
		Пакеты = Запрос.ВыполнитьПакет();
		
		Если Пакеты[1].Пустой() Тогда
			Возврат Данные;
		КонецЕсли;
		
		ВыборкаКолонок = Пакеты[1].Выбрать();
		Пока ВыборкаКолонок.Следующий() Цикл
			Иконка = СтрШаблон("%1/assets/status_ico/%2.png", Константы.КорневойURL.Получить(), ВыборкаКолонок.ТекущийСтатусИмяКартинки);
			
			ДанныеЭтапа = Новый Структура;
			ДанныеЭтапа.Вставить("Наименование", ВыборкаКолонок.ТекущийСтатусНаименование);
			ДанныеЭтапа.Вставить("Иконка", Иконка);
			ДанныеЭтапа.Вставить("Количество", 0);
			ДанныеЭтапа.Вставить("Внимание", "");
			ДанныеЭтапа.Вставить("Порядок", ВыборкаКолонок.Порядок);
			ДанныеЭтапа.Вставить("ФинальныйЭтап", ВыборкаКолонок.ФинальныйЭтап);
			ДанныеЭтапа.Вставить("ИзменениеПорядка", НЕ ВыборкаКолонок.ФинальныйЭтап);
			
			Данные.Колонки.Вставить(XMLСтрока(ВыборкаКолонок.Этап), ДанныеЭтапа);
		КонецЦикла;
		
		Если ДоступныеФилиалы.Найти(Параметры.Филиал) <> Неопределено Тогда
			Данные.ИзменениеПорядкаКолонок = Истина;
			Данные.ИзменениеПорядкаКарточек = Истина;
			
			ВыборкаПереходов = Пакеты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПереходов.Следующий() Цикл
				Выборка = ВыборкаПереходов.Выбрать();
				Переходы = Новый Массив;
				
				Пока Выборка.Следующий() Цикл
					Переходы.Добавить(XMLСтрока(Выборка.ЭтапПерехода));
				КонецЦикла;
				
				Данные.Переходы.Вставить(XMLСтрока(ВыборкаПереходов.Этап), Переходы);
			КонецЦикла;
			
			ВыборкаПричин = Пакеты[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПричин.Следующий() Цикл
				Выборка = ВыборкаПричин.Выбрать();
				Причины = Новый Массив;
				
				Пока Выборка.Следующий() Цикл
					ДанныеПричины = Новый Структура("Причина, ОбязательныйКомментарий");
					ЗаполнитьЗначенияСвойств(ДанныеПричины, Выборка);
					ДанныеПричины.Вставить("id", XMLСтрока(Выборка.ПричинаСсылка));
					Причины.Добавить(ДанныеПричины);
				КонецЦикла;
				
				Данные.Причины.Вставить(XMLСтрока(ВыборкаПричин.Этап), Причины);
			КонецЦикла;
		КонецЕсли;
	#КонецОбласти

	ИначеЕсли Параметры.Тип = Перечисления.ТипыКанбана.Кастомный Тогда
		
	#Область ТипКастомный		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапыКанбана.Ссылка КАК Этап,
		|	ЭтапыКанбана.Наименование КАК Наименование,
		|	ПорядокЭтаповКанбана.Порядок КАК Порядок
		|ИЗ
		|	Справочник.ЭтапыКанбана КАК ЭтапыКанбана
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокЭтаповКанбана КАК ПорядокЭтаповКанбана
		|		ПО (ПорядокЭтаповКанбана.Этап = ЭтапыКанбана.Ссылка)
		|ГДЕ
		|	ЭтапыКанбана.Владелец = &Филиал
		|	И ЭтапыКанбана.ТипКанбана = ЗНАЧЕНИЕ(Перечисление.ТипыКанбана.Кастомный)
		|	И НЕ ЭтапыКанбана.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Запрос.УстановитьПараметр("Филиал", Параметры.Филиал);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаКолонок = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаКолонок.Следующий() Цикл		
			ДанныеЭтапа = Новый Структура;
			ДанныеЭтапа.Вставить("Наименование", ВыборкаКолонок.Наименование);
			ДанныеЭтапа.Вставить("Количество", 0);
			ДанныеЭтапа.Вставить("Внимание", "");
			ДанныеЭтапа.Вставить("Порядок", ВыборкаКолонок.Порядок);
			ДанныеЭтапа.Вставить("ИзменениеПорядка", Истина);
			
			Данные.Колонки.Вставить(XMLСтрока(ВыборкаКолонок.Этап), ДанныеЭтапа);
		КонецЦикла;
		
		Если ДоступныеФилиалы.Найти(Параметры.Филиал) <> Неопределено Тогда
			Данные.ИзменениеПорядкаКолонок = Истина;
			Данные.ИзменениеПорядкаКарточек = Истина;
			
			ВыборкаКолонок.Сбросить();
			
			ВыборкаПереходов = РезультатЗапроса.Выбрать();
			Пока ВыборкаКолонок.Следующий() Цикл
				Переходы = Новый Массив;
				
				Пока ВыборкаПереходов.Следующий() Цикл
					Переходы.Добавить(XMLСтрока(ВыборкаПереходов.Этап));
				КонецЦикла;
				
				Данные.Переходы.Вставить(XMLСтрока(ВыборкаКолонок.Этап), Переходы);
				ВыборкаПереходов.Сбросить();
			КонецЦикла;
		КонецЕсли;
	#КонецОбласти

	ИначеЕсли Параметры.Тип = Перечисления.ТипыКанбана.ВнутреннееЗаданиеНовый Тогда

	#Область ТипВнутреннееЗадание		
		Процесс = Справочники.Процессы.ИспользуемыйПроцессФилиала(Параметры.Филиал, 
			Справочники.ТипыОбъектовВладельцев.Документ_ВнутреннееЗадание);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЭтапыКанбана.Ссылка КАК Ссылка,
		|	СтатусыОбъектов.Ссылка КАК ТекущийСтатус,
		|	ЕСТЬNULL(ЭтапыКанбанаПереходы.ЭлементПерехода, ЗНАЧЕНИЕ(Справочник.ЭтапыКанбана.ПустаяСсылка)) КАК ЭлементПерехода,
		|	СтатусыОбъектов.Наименование КАК Наименование,
		|	СтатусыОбъектов.ИмяКартинкиВБиблиотеке КАК ИмяКартинкиВБиблиотеке,
		|	ЕСТЬNULL(ПорядокЭтаповКанбана.Порядок, ЭтапыКанбана.ПорядокОтображения) КАК Порядок,
		|	ВЫБОР
		|		КОГДА СтатусыОбъектов.Ссылка = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)
		|				ИЛИ СтатусыОбъектов.Ссылка = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ФинальныйЭтап
		|ПОМЕСТИТЬ Переходы
		|ИЗ
		|	Справочник.ЭтапыКанбана КАК ЭтапыКанбана
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана.ЭлементыЭтапа КАК ЭтапыКанбанаЭлементыЭтапа
		|		ПО ЭтапыКанбана.Ссылка = ЭтапыКанбанаЭлементыЭтапа.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
		|		ПО (ЭтапыКанбанаЭлементыЭтапа.Элемент = СтатусыОбъектов.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыКанбана.Переходы КАК ЭтапыКанбанаПереходы
		|		ПО ЭтапыКанбана.Ссылка = ЭтапыКанбанаПереходы.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокЭтаповКанбана КАК ПорядокЭтаповКанбана
		|		ПО (ПорядокЭтаповКанбана.Этап = ЭтапыКанбана.Ссылка)
		|			И (ПорядокЭтаповКанбана.Филиал = &Филиал)
		|ГДЕ
		|	ЭтапыКанбана.Владелец = &Процесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Переходы.Ссылка КАК Этап,
		|	Переходы.Наименование КАК ТекущийСтатусНаименование,
		|	Переходы.ИмяКартинкиВБиблиотеке КАК ТекущийСтатусИмяКартинки,
		|	Переходы.ФинальныйЭтап КАК ФинальныйЭтап,
		|	Переходы.Порядок КАК Порядок
		|ИЗ
		|	Переходы КАК Переходы
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Переходы.Ссылка КАК Этап,
		|	Переходы.ЭлементПерехода КАК ЭтапПерехода
		|ИЗ
		|	Переходы КАК Переходы
		|ГДЕ
		|	Переходы.ЭлементПерехода <> ЗНАЧЕНИЕ(Справочник.ЭтапыКанбана.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Переходы.Порядок
		|ИТОГИ ПО
		|	Этап
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Переходы.Ссылка КАК Этап,
		|	Переходы.Порядок КАК Порядок,
		|	ПричиныИзмененияСтатусов.Ссылка КАК ПричинаСсылка,
		|	ПричиныИзмененияСтатусов.Наименование КАК Причина,
		|	ПричиныИзмененияСтатусов.ОбязательноеЗаполнениеКомментария КАК ОбязательныйКомментарий,
		|	СтатусыОбъектовПричиныИзмененияСтатуса.Порядок КАК ПорядокПричины
		|ИЗ
		|	Переходы КАК Переходы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов.ПричиныИзмененияСтатуса КАК СтатусыОбъектовПричиныИзмененияСтатуса
		|		ПО Переходы.ТекущийСтатус = СтатусыОбъектовПричиныИзмененияСтатуса.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПричиныИзмененияСтатусов КАК ПричиныИзмененияСтатусов
		|		ПО (СтатусыОбъектовПричиныИзмененияСтатуса.Причина = ПричиныИзмененияСтатусов.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПричиныИзмененияСтатусов.ОбластьИспользования КАК ТаблицаОбластьИспользования
		|		ПО (ПричиныИзмененияСтатусов.Ссылка = ТаблицаОбластьИспользования.Ссылка)
		|			И (ТаблицаОбластьИспользования.ТипОбъекта = ЗНАЧЕНИЕ(Справочник.ТипыОбъектовВладельцев.Документ_ВнутреннееЗадание))
		|ГДЕ
		|	НЕ ПричиныИзмененияСтатусов.ПометкаУдаления
		|	И НЕ ТаблицаОбластьИспользования.ТипОбъекта ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	ПорядокПричины
		|ИТОГИ ПО
		|	Этап";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Процесс", Процесс);
		Запрос.УстановитьПараметр("Филиал", Параметры.Филиал);
		
		Пакеты = Запрос.ВыполнитьПакет();
		
		Если Пакеты[1].Пустой() Тогда
			Возврат Данные;
		КонецЕсли;
		
		ВыборкаКолонок = Пакеты[1].Выбрать();
		Пока ВыборкаКолонок.Следующий() Цикл
			Иконка = СтрШаблон("%1/assets/status_ico/%2.png", Константы.КорневойURL.Получить(), ВыборкаКолонок.ТекущийСтатусИмяКартинки);
			
			ДанныеЭтапа = Новый Структура;
			ДанныеЭтапа.Вставить("Наименование", ВыборкаКолонок.ТекущийСтатусНаименование);
			ДанныеЭтапа.Вставить("Иконка", Иконка);
			ДанныеЭтапа.Вставить("Количество", 0);
			ДанныеЭтапа.Вставить("Внимание", "");
			ДанныеЭтапа.Вставить("Порядок", ВыборкаКолонок.Порядок);
			ДанныеЭтапа.Вставить("ФинальныйЭтап", ВыборкаКолонок.ФинальныйЭтап);
			ДанныеЭтапа.Вставить("ИзменениеПорядка", НЕ ВыборкаКолонок.ФинальныйЭтап);
			
			Данные.Колонки.Вставить(XMLСтрока(ВыборкаКолонок.Этап), ДанныеЭтапа);
		КонецЦикла;
		
		Если ДоступныеФилиалы.Найти(Параметры.Филиал) <> Неопределено Тогда
			Данные.ИзменениеПорядкаКолонок = Истина;
			Данные.ИзменениеПорядкаКарточек = Истина;
			
			ВыборкаПереходов = Пакеты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПереходов.Следующий() Цикл
				Выборка = ВыборкаПереходов.Выбрать();
				Переходы = Новый Массив;
				
				Пока Выборка.Следующий() Цикл
					Переходы.Добавить(XMLСтрока(Выборка.ЭтапПерехода));
				КонецЦикла;
				
				Данные.Переходы.Вставить(XMLСтрока(ВыборкаПереходов.Этап), Переходы);
			КонецЦикла;
			
			ВыборкаПричин = Пакеты[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПричин.Следующий() Цикл
				Выборка = ВыборкаПричин.Выбрать();
				Причины = Новый Массив;
				
				Пока Выборка.Следующий() Цикл
					ДанныеПричины = Новый Структура("Причина, ОбязательныйКомментарий");
					ЗаполнитьЗначенияСвойств(ДанныеПричины, Выборка);
					ДанныеПричины.Вставить("id", XMLСтрока(Выборка.ПричинаСсылка));
					Причины.Добавить(ДанныеПричины);
				КонецЦикла;
				
				Данные.Причины.Вставить(XMLСтрока(ВыборкаПричин.Этап), Причины);
			КонецЦикла;
		КонецЕсли;		
	#КонецОбласти

	ИначеЕсли Параметры.Тип = Перечисления.ТипыКанбана.ЗаявкиМоегоФилиала Тогда
		
	#Область ТипЗаявкиМоегоФилиала
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтатусыОбъектов.Ссылка КАК Этап,
		|	СтатусыОбъектов.ИмяКартинкиВБиблиотеке КАК ТекущийСтатусИмяКартинки,
		|	СтатусыОбъектов.Наименование КАК ТекущийСтатусНаименование,
		|	СтатусыОбъектов.Порядок КАК Порядок
		|ИЗ
		|	Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО (Пользователи.Ссылка = ЗаявкаНаРазработку.Автор)
		|			И (Пользователи.Филиал = &Филиал)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
		|		ПО ЗаявкаНаРазработку.Ссылка = МинимальныеСтатусыЗаявок.Заявка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
		|		ПО (МинимальныеСтатусыЗаявок.Статус = СтатусыОбъектов.Ссылка)
		|{ГДЕ
		|	ЗаявкаНаРазработку.Продукт КАК Продукт,
		|	ЗаявкаНаРазработку.Ссылка КАК Ссылка,
		|	ЗаявкаНаРазработку.Автор КАК Автор,
		|	ЗаявкаНаРазработку.Назначение КАК Назначение,
		|	ЗаявкаНаРазработку.Направление КАК Направление}";
		
		Запрос.УстановитьПараметр("Филиал", Параметры.Филиал);
		
		РезультатЗапроса = Запрос.Выполнить();		
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Данные;
		КонецЕсли;
		
		ВыборкаКолонок = РезультатЗапроса.Выбрать();
		Пока ВыборкаКолонок.Следующий() Цикл
			Иконка = СтрШаблон("%1/assets/status_ico/%2.png", Константы.КорневойURL.Получить(), ВыборкаКолонок.ТекущийСтатусИмяКартинки);
			
			ДанныеЭтапа = Новый Структура;
			ДанныеЭтапа.Вставить("Наименование", ВыборкаКолонок.ТекущийСтатусНаименование);
			ДанныеЭтапа.Вставить("Иконка", Иконка);
			ДанныеЭтапа.Вставить("Количество", 0);
			ДанныеЭтапа.Вставить("Внимание", "");
			ДанныеЭтапа.Вставить("Порядок", ВыборкаКолонок.Порядок);
			
			Данные.Колонки.Вставить(XMLСтрока(ВыборкаКолонок.Этап), ДанныеЭтапа);
		КонецЦикла;
	#КонецОбласти
	
	ИначеЕсли Параметры.Тип = Перечисления.ТипыКанбана.ПулЗаявокНовый Тогда
		
	#Область ТипПулЗаявокНовый
		ПорядокСтатусаВРеализацию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтатусыОбъектов.ВРеализацию, "Порядок");
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусыОбъектов.Ссылка КАК Этап,
		|	СтатусыОбъектов.ИмяКартинкиВБиблиотеке КАК ТекущийСтатусИмяКартинки,
		|	СтатусыОбъектов.Наименование КАК ТекущийСтатусНаименование,
		|	СтатусыОбъектов.Порядок КАК Порядок
		|ИЗ
		|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов
		|ГДЕ
		|	НЕ СтатусыОбъектов.ПометкаУдаления
		|	И СтатусыОбъектов.Предопределенный";
					
		ВыборкаКолонок = Запрос.Выполнить().Выбрать();
		Пока ВыборкаКолонок.Следующий() Цикл
			Иконка = СтрШаблон("%1/assets/status_ico/%2.png", Константы.КорневойURL.Получить(), ВыборкаКолонок.ТекущийСтатусИмяКартинки);
			
			ДанныеЭтапа = Новый Структура;
			ДанныеЭтапа.Вставить("Наименование", ВыборкаКолонок.ТекущийСтатусНаименование);
			ДанныеЭтапа.Вставить("Иконка", Иконка);
			ДанныеЭтапа.Вставить("Количество", 0);
			ДанныеЭтапа.Вставить("Внимание", "");
			ДанныеЭтапа.Вставить("Порядок", ВыборкаКолонок.Порядок);
			ДанныеЭтапа.Вставить("ИзменениеПорядка", ВыборкаКолонок.Порядок <= ПорядокСтатусаВРеализацию);
				
			Данные.Колонки.Вставить(XMLСтрока(ВыборкаКолонок.Этап), ДанныеЭтапа);
		КонецЦикла;
			
		Если Параметры.ВидОчереди = Перечисления.ВидыОчереди.НаправлениеСистемаГруппаЗаказчиков Тогда
			Если НЕ ЗначениеЗаполнено(Параметры.ГруппаЗаказчиков)
				ИЛИ Параметры.ГруппаЗаказчиков = Справочники.ГруппыЗаказчиковНаправлений.ПрочиеЗаказчики Тогда
				
				УстановитьПривилегированныйРежим(Истина);				
				ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Пользователь, "ИдентификаторПользователяИБ");
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
				ДоступноУправление = ПользовательИБ.Роли.Содержит(Метаданные.Роли.УправлениеПорядкомЗаявокНаРазработку);
				УстановитьПривилегированныйРежим(Ложь);
				
				НаправлениеДоступно = ПроверитьДоступностьНаправления(Параметры.Пользователь, Параметры.Направление);
				
				Если НаправлениеДоступно И ДоступноУправление Тогда				
					Данные.ИзменениеПорядкаКарточек = Истина;
				КонецЕсли;

			ИначеЕсли ЭтоЗаказчикГруппы(Параметры.Пользователь, Параметры.ГруппаЗаказчиков) Тогда
				Данные.ИзменениеПорядкаКарточек = Истина;
			КонецЕсли; 
		ИначеЕсли Параметры.ВидОчереди = Перечисления.ВидыОчереди.Продукт
			ИЛИ Параметры.ВидОчереди = Перечисления.ВидыОчереди.ПродуктСистема Тогда
			
			Данные.ИзменениеПорядкаКарточек = Истина;
		КонецЕсли;		

	#КонецОбласти
	
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ЭтоЗаказчикГруппы(Пользователь, ГруппаЗаказчиков)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыЗаказчиковНаправленийЗаказчики.Ссылка КАК Ссылка,
	|	ГруппыЗаказчиковНаправленийЗаказчики.Пользователь КАК Пользователь
	|ИЗ
	|	Справочник.ГруппыЗаказчиковНаправлений.Заказчики КАК ГруппыЗаказчиковНаправленийЗаказчики
	|ГДЕ
	|	ГруппыЗаказчиковНаправленийЗаказчики.Ссылка = &ГруппаЗаказчиков
	|	И ГруппыЗаказчиковНаправленийЗаказчики.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ГруппаЗаказчиков", ГруппаЗаказчиков);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

Функция ПроверитьДоступностьНаправления(Пользователь, Направление)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РолиПользователейПоНаправлениям.НаправлениеРазработки КАК Направление,
	|	РолиПользователейПоНаправлениям.Роль КАК РольПользователя
	|ИЗ
	|	РегистрСведений.РолиПользователейПоНаправлениям КАК РолиПользователейПоНаправлениям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаправленияРазработки КАК НаправленияРазработки
	|		ПО РолиПользователейПоНаправлениям.НаправлениеРазработки = НаправленияРазработки.Ссылка
	|			И (РолиПользователейПоНаправлениям.Пользователь = &Пользователь)
	|			И (НаправленияРазработки.Ссылка = &Направление)";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Направление", Направление);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

Функция СформироватьОтветОтпискиОтОповещений(Знач ОбъектСсылка = Неопределено, Знач ПолучатьОповещения = Ложь)
	
	ШаблонОтвета =
		"<!DOCTYPE html>
		|<html lang=""ru"">
		|
		|<head>
		|<title>Уведомления SDMS</title>
		|<meta charset=""utf-8"">
		|<style type=""text/css"">
		|			* { margin: 0; padding: 0; }
		|			body { min-height: 100vh; }
		|			a { color: #0e8588; text-decoration: none; }
		|			a:hover { text-decoration: underline; }
		|			img { margin-bottom: 15px; }
		|			.message { position: absolute; top: 50%%; left: 50%%; transform: translate(-50%%, -50%%); 
		|			font-family: sans-serif; font-size: 20px; }
		|</style>
		|</head>
		|
		|<body>
		|<div class=""message"">
		|<img src=""%1/assets/img/LogoSDMS.png""><br>
		|	%2
		|</div>
		|</body>
		|
		|</html>";
	
	НавигационнаяСсылка = ОбщегоНазначения.ПолучитьHTTPСсылкуНаОбъект(ОбъектСсылка);
	
	Если ОбъектСсылка <> Неопределено И ПолучатьОповещения Тогда
		ОтветССсылкой = СтрШаблон("Вы отписались от оповещений по объекту: <a href=""%1"">%2</a>",
				НавигационнаяСсылка, ОбъектСсылка);
	ИначеЕсли ОбъектСсылка <> Неопределено Тогда
		ОтветССсылкой = СтрШаблон("Вы уже отписаны от оповещений по объекту: <a href=""%1"">%2</a>",
				НавигационнаяСсылка, ОбъектСсылка);
	Иначе
		ОтветССсылкой = "Не удалось отписаться от оповещений.";
	КонецЕсли;
	
	ОтветДляШаблона = СтрШаблон(ШаблонОтвета, Константы.КорневойURL.Получить(), ОтветССсылкой);
	
	Возврат ОтветДляШаблона;
	
КонецФункции

Функция УдалитьТрудозатраты(Знач Параметры, Знач Пользователь)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Трудозатраты.Ссылка КАК Ссылка,
		|	Трудозатраты.Пользователь КАК Пользователь,
		|	Трудозатраты.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Документ.Трудозатраты КАК Трудозатраты
		|ГДЕ
		|	Трудозатраты.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Параметры.Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если Выборка.Пользователь <> Пользователь Тогда
			Возврат ПолучитьСтруктуруОтвета(19, , "нельзя удалять трудозатраты других пользователей.");
		КонецЕсли;
		
		Если Выборка.ПометкаУдаления Тогда
			Возврат ПолучитьСтруктуруОтвета(19, , "трудозатраты были удалены ранее.");
		КонецЕсли;
		
		ТрудозатратыОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			ТрудозатратыОбъект.УстановитьПометкуУдаления(Истина);
			СтруктураОтвета = ПолучитьСтруктуруОтвета(0);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			Пока ИнформацияОбОшибке.Причина <> Неопределено Цикл
				ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
			КонецЦикла;
			
			ТекстОшибки = ИнформацияОбОшибке.Описание;
			
			СтруктураОтвета = ПолучитьСтруктуруОтвета(19, , ТекстОшибки);
		КонецПопытки;
	Иначе
		СтруктураОтвета = ПолучитьСтруктуруОтвета(6);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ЭтоСлужебныйПользователь()
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСеанса.ТекущийПользователь, "Служебный");
	
КонецФункции

#Область Метаданные

Функция ПолучитьСписокОбъектовМетаданных(Знач ГруппаОбъектов)
	
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеМетаданных", Неопределено);
	Результат.Вставить("ПутьДляОбновленияBSL", "");
		
	ИмяГруппыКоллекции = ПолучитьИмяГруппыКоллекцииМетаданных(ГруппаОбъектов);
	
	Если ЗначениеЗаполнено(ИмяГруппыКоллекции) Тогда
		Коллекция = Метаданные[ИмяГруппыКоллекции];
		МассивОбъектов = ПолучитьСписокОбъектовМетаданныхИзКоллекции(Коллекция);
		
		Файл = Новый ЗаписьJSON();
		Файл.УстановитьСтроку();
		Попытка
			ЗаписатьJSON(Файл, МассивОбъектов);
		Исключение
			ВызватьИсключение("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		Результат.ОписаниеМетаданных = Файл.Закрыть();
		Результат.ПутьДляОбновленияBSL = ".items";		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИмяКоллекцииМетаданныхПоТипу(ТипОбъектов)
	
	СоответствиеИмен = Новый Соответствие();
	СоответствиеИмен.Вставить("справочники"                 , "catalogs");
	СоответствиеИмен.Вставить("catalogs"                    , "catalogs");
	СоответствиеИмен.Вставить("документы"                   , "documents");
	СоответствиеИмен.Вставить("documents"                   , "documents");
	СоответствиеИмен.Вставить("регистрысведений"            , "infoRegs");
	СоответствиеИмен.Вставить("informationregisters"        , "infoRegs");
	СоответствиеИмен.Вставить("регистрынакопления"          , "accumRegs");
	СоответствиеИмен.Вставить("accumulationregisters"       , "accumRegs");
	СоответствиеИмен.Вставить("регистрыбухгалтерии"         , "accountRegs");
	СоответствиеИмен.Вставить("accountingregisters"         , "accountRegs");
	СоответствиеИмен.Вставить("регистрырасчета"             , "calcRegs");
	СоответствиеИмен.Вставить("calculationregisters"        , "calcRegs");
	СоответствиеИмен.Вставить("обработки"                   , "dataProc");
	СоответствиеИмен.Вставить("dataprocessors"              , "dataProc");
	СоответствиеИмен.Вставить("отчеты"                      , "reports");
	СоответствиеИмен.Вставить("reports"                     , "reports");
	СоответствиеИмен.Вставить("перечисления"                , "enums");
	СоответствиеИмен.Вставить("enums"                       , "enums");
	СоответствиеИмен.Вставить("планысчетов"                 , "сhartsOfAccounts");
	СоответствиеИмен.Вставить("chartsofaccounts"            , "сhartsOfAccounts");
	СоответствиеИмен.Вставить("бизнеспроцессы"              , "businessProcesses");
	СоответствиеИмен.Вставить("businessprocesses"           , "businessProcesses");
	СоответствиеИмен.Вставить("задачи"                      , "tasks");
	СоответствиеИмен.Вставить("tasks"                       , "tasks");
	СоответствиеИмен.Вставить("планыобмена"                 , "exchangePlans");
	СоответствиеИмен.Вставить("exchangeplans"               , "exchangePlans");
	СоответствиеИмен.Вставить("планывидовхарактеристик"     , "chartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("chartsofcharacteristictypes" , "chartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("планывидоврасчета"           , "chartsOfCalculationTypes");
	СоответствиеИмен.Вставить("chartsofcalculationtypes"    , "chartsOfCalculationTypes");
	СоответствиеИмен.Вставить("константы"                   , "constants");
	СоответствиеИмен.Вставить("constants"                   , "constants");
	СоответствиеИмен.Вставить("внешниеисточникиданных"      , "externalDataSources");
	СоответствиеИмен.Вставить("externaldatasources"         , "externalDataSources");
	
	Возврат СоответствиеИмен[ТипОбъектов];
	
КонецФункции

Функция ПолучитьИмяГруппыКоллекцииМетаданных(Знач ИмяОбъекта)
	
	СоответствиеИмен = Новый Соответствие;
	СоответствиеИмен.Вставить(НРег("Справочник"), "Справочники");
	СоответствиеИмен.Вставить(НРег("Документ"), "Документы");
	СоответствиеИмен.Вставить(НРег("РегистрСведений"), "РегистрыСведений");
	СоответствиеИмен.Вставить(НРег("РегистрНакопления"), "РегистрыНакопления");
	СоответствиеИмен.Вставить(НРег("ПланВидовХарактеристик"), "ПланыВидовХарактеристик");
		
	Возврат СоответствиеИмен[ИмяОбъекта];
	
КонецФункции

Функция ПолучитьСписокОбъектовМетаданныхИзКоллекции(Коллекция)
	
	МассивМетаданных = Новый Массив;
	
	Для НомерОбъекта = 0 По Коллекция.Количество() - 1 Цикл
		ОбъектМетаданных = Коллекция.Получить(НомерОбъекта);
		МассивМетаданных.Добавить(Новый Структура("name, syn", ОбъектМетаданных.Имя, ОбъектМетаданных.Синоним));
	КонецЦикла;
	
	Возврат МассивМетаданных;
	
КонецФункции

Функция ПолучитьОписаниеОбъектаМетаданных(Знач ИмяГруппыОбъектов, Знач ИмяОбъекта, Знач ИмяТаблицы = "")
	
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеМетаданных", "");
	Результат.Вставить("ПутьДляОбновленияBSL", ""); 
	
	ИмяГруппыКоллекции = ПолучитьИмяГруппыКоллекцииМетаданных(ИмяГруппыОбъектов);
	
	Если ЗначениеЗаполнено(ИмяГруппыКоллекции) Тогда	
		ОбъектМетаданных = Метаданные[ИмяГруппыКоллекции][ИмяОбъекта]; 
		
		Если ЗначениеЗаполнено(ИмяТаблицы) Тогда 
			ОбъектМетаданных = ОбъектМетаданных.ТабличныеЧасти[ИмяТаблицы];	
		КонецЕсли;
		
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		
		СтруктураОбъекта = ПолучитьСтруктуруОбъектаМетаданных(ОбъектМетаданных, ПолноеИмя);
		
		Файл = Новый ЗаписьJSON();
		Файл.УстановитьСтроку();
		Попытка
			ЗаписатьJSON(Файл, СтруктураОбъекта);
		Исключение
			ВызватьИсключение("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		Результат.ПутьДляОбновленияBSL = ".items.";	
		Результат.ОписаниеМетаданных = Файл.Закрыть();	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИмяМетаданных(ПолноеИмя)
	
	Возврат СтрПолучитьСтроку(СтрЗаменить(ПолноеИмя, ".", Символы.ПС), 1);
	
КонецФункции

// Получение по конкретному объекту метаданных

Функция ПолучитьСтруктуруОбъектаМетаданных(Знач ОбъектМетаданных, Знач ПолноеИмя)
	
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("name", ОбъектМетаданных.Имя); 
	СтруктураОбъекта.Вставить("syn", ОбъектМетаданных.Синоним);
	
	Если ИмяМетаданных(ПолноеИмя) = "Перечисление" Тогда
		СтруктураОбъекта.Вставить("properties", ПолучитьОписаниеПоКоллекцииМетаданных(ОбъектМетаданных.ЗначенияПеречисления));
	ИначеЕсли ЭтоОбъектМетаданныхРегистр(ПолноеИмя) Тогда
		СтруктураОбъекта.Вставить("properties", ПолучитьОписаниеРеквизитов(ОбъектМетаданных, ПолноеИмя));
		СтруктураОбъекта.Вставить("type", ПолучитьТипРегистра(ОбъектМетаданных, ПолноеИмя));
		СтруктураОбъекта.Вставить("resources", ПолучитьОписаниеРесурсов(ОбъектМетаданных, ПолноеИмя));
	Иначе 
		МассивРеквизитов = ПолучитьОписаниеРеквизитов(ОбъектМетаданных, ПолноеИмя);    
		
		СтруктураОбъекта.Вставить("properties", МассивРеквизитов);
		СтруктураОбъекта.Вставить("predefined", ПолучитьОписаниеПредопределенныхЭлементов(ОбъектМетаданных, ПолноеИмя)); 
		СтруктураОбъекта.Вставить("tabulars", ПолучитьОписаниеТабличныхЧастей(ОбъектМетаданных, ПолноеИмя));
	КонецЕсли;
	
	Возврат СтруктураОбъекта;
	
КонецФункции

Функция ПолучитьОписаниеПоКоллекцииМетаданных(Знач КоллекцияМетаданных, Знач МассивМетаданных = Неопределено)

	Если МассивМетаданных = Неопределено Тогда
		МассивМетаданных = Новый Массив;
	КонецЕсли;
	
	Для Каждого ОбъектМетаданных Из КоллекцияМетаданных Цикл
		Синоним = ?(ОбъектМетаданных.Синоним = "", ОбъектМетаданных.Имя, ОбъектМетаданных.Синоним); 
		МассивМетаданных.Добавить(Новый Структура("name, syn", ОбъектМетаданных.Имя, Синоним));
	КонецЦикла;
	
	Возврат МассивМетаданных;
	
КонецФункции

Функция ПолучитьОписаниеРеквизитов(Знач ОбъектМетаданных, Знач ПолноеИмя) 
	
	МассивРеквизитов = ПолучитьОписаниеПоКоллекцииМетаданных(ОбъектМетаданных.СтандартныеРеквизиты);
	МассивРеквизитов = ПолучитьОписаниеПоКоллекцииМетаданных(ОбъектМетаданных.Реквизиты, МассивРеквизитов);  
		
	Если ЭтоОбъектМетаданныхРегистр(ПолноеИмя) Тогда	
		МассивРеквизитов = ПолучитьОписаниеПоКоллекцииМетаданных(ОбъектМетаданных.Измерения, МассивРеквизитов);
	КонецЕсли;
	
	Возврат МассивРеквизитов;
	
КонецФункции 

Функция ПолучитьОписаниеПредопределенныхЭлементов(Знач ОбъектМетаданных, Знач ПолноеИмя)
	
	ОписаниеПредопределенных = Новый Структура;
	
	Если ОбъектМетаданныхИмеетПредопределенные(ПолноеИмя) Тогда	
		КоллекцияПредопределенных = ОбъектМетаданных.ПолучитьИменаПредопределенных();
		
		Для Каждого ИмяПредопределенного Из КоллекцияПредопределенных Цикл
			ОписаниеПредопределенных.Вставить(ИмяПредопределенного, "");
		КонецЦикла;		
	КонецЕсли;
	
	Возврат ОписаниеПредопределенных;
	
КонецФункции

Функция ПолучитьОписаниеТабличныхЧастей(Знач ОбъектМетаданных, Знач ПолноеИмя)
	
	ОписаниеТабличныхЧастей = Новый Массив;
	
	Если НЕ ОбъектМетаданныхИмеетТЧ(ПолноеИмя) Тогда
		Возврат ОписаниеТабличныхЧастей;
	КонецЕсли;
				
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		ОписаниеТабличнойЧасти = Новый Массив;	
		Для Каждого РеквизитТЧ Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
			Синоним = ?(РеквизитТЧ.Синоним = "", РеквизитТЧ.Имя, РеквизитТЧ.Синоним); 
			ОписаниеТабличнойЧасти.Добавить(Новый Структура("name, syn", РеквизитТЧ.Имя, Синоним));
		КонецЦикла;
		
		Для Каждого РеквизитТЧ Из ТабличнаяЧасть.Реквизиты Цикл
			Синоним = ?(РеквизитТЧ.Синоним = "", РеквизитТЧ.Имя, РеквизитТЧ.Синоним);
			ОписаниеТабличнойЧасти.Добавить(Новый Структура("name, syn", РеквизитТЧ.Имя, Синоним));
		КонецЦикла;
		
		Если ОписаниеТабличнойЧасти.Количество() > 0 Тогда
			СинонимТабличнойЧасти = ?(ТабличнаяЧасть.Синоним = "", ТабличнаяЧасть.Имя, ТабличнаяЧасть.Синоним);
			ОписаниеТабличныхЧастей.Добавить(Новый Структура("name, syn, properties", ТабличнаяЧасть.Имя, 
				СинонимТабличнойЧасти, ОписаниеТабличнойЧасти));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОписаниеТабличныхЧастей;
	
КонецФункции

Функция ПолучитьОписаниеРесурсов(Знач ОбъектМетаданных, Знач ПолноеИмя)
	
	ОписаниеРесурсов = Новый Структура;
	
	Если ЭтоОбъектМетаданныхРегистр(ПолноеИмя) Тогда		
		ОписаниеРесурсов = ПолучитьОписаниеПоКоллекцииМетаданных(ОбъектМетаданных.Ресурсы);
	КонецЕсли;
	
	Возврат ОписаниеРесурсов;
	
КонецФункции

Функция ПолучитьТипРегистра(Знач ОбъектМетаданных, ПолноеИмя)
	
	Если ИмяМетаданных(ПолноеИмя) = "РегистрСведений" Тогда	
		Непериодический = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
		
		Если ОбъектМетаданных.ПериодичностьРегистраСведений = Непериодический Тогда
			ТипРегистра = "nonperiodical";
		Иначе
			ТипРегистра = "periodical";
		КонецЕсли;
		
	ИначеЕсли ИмяМетаданных(ПолноеИмя) = "РегистрНакопления" Тогда
		Если ОбъектМетаданных.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			ТипРегистра = "balance";
		Иначе
			ТипРегистра = "turnovers";
		КонецЕсли; 
	Иначе
		ТипРегистра = "";
	КонецЕсли;
	
	Возврат ТипРегистра;
	
КонецФункции

// Проверки на принадлежность метаданных

Функция ОбъектМетаданныхИмеетПредопределенные(Знач ПолноеИмя)
	
	Объекты = Новый Массив;
	Объекты.Добавить("Справочник");
	Объекты.Добавить("ПланСчетов");	
	Объекты.Добавить("ПланВидовХарактеристик");
	Объекты.Добавить("ПланВидовРасчета");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено
		И СтрНайти(Врег(ПолноеИмя), Врег(".ТабличнаяЧасть.")) = 0;
	
КонецФункции

Функция ОбъектМетаданныхИмеетТЧ(Знач ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("Справочник");
	Объекты.Добавить("Документ");
	Объекты.Добавить("Отчет");
	Объекты.Добавить("Обработка");
	Объекты.Добавить("БизнесПроцесс");
	Объекты.Добавить("Задача");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено
		И СтрНайти(Врег(ПолноеИмя), Врег(".ТабличнаяЧасть.")) = 0;
	
КонецФункции

Функция ЭтоОбъектМетаданныхРегистр(Знач ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("РегистрСведений");
	Объекты.Добавить("РегистрНакопления");
	Объекты.Добавить("РегистрБухгалтерии");
	Объекты.Добавить("РегистрРасчета");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти
