///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для НастройкиКолонок

//////////////////////////////////////////////////////////////////////////////// 
// Параметры:
// НастройкиПоУмолчанию - Структура - Хранит настройки по умолчанию
// Ключи                - Структура - Хранит ключи для получения настроек из хранилища
// Возвращаемое значение:
// СохраненныеНастройки - Структура - Хранит полученные настройки или настройки по умолчанию 
//
Функция ЗаполнитьПользовательскиеНастройки(Знач НастройкиПоУмолчанию, Знач Ключи) Экспорт
		
	// Получение настроек
	СохраненныеНастройки = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(Ключи.Объект, Ключи.Настройка);
			
	Возврат ЗаполнитьСохраненныеНастройки(СохраненныеНастройки, НастройкиПоУмолчанию);
	
КонецФункции

// Заполнить сохраненные настройки настройками по умолчанию
//
// Параметры:
//  СохраненныеНастройки - Структура - Сохраненные настройки
//  НастройкиПоУмолчанию - Структура - Настройки по умолчанию
// 
// Возвращаемое значение:
//  Структура - Заполненные сохраненные настройки
//
Функция ЗаполнитьСохраненныеНастройки(СохраненныеНастройки, НастройкиПоУмолчанию) Экспорт  
	
	// Проверка полученных настроек
	Если СохраненныеНастройки = Неопределено Тогда
		// Если настроек нет, то использовать настройки по умолчанию
		Возврат НастройкиПоУмолчанию;
	КонецЕсли;
	
	Если НЕ СохраненныеНастройки.Свойство("Состав") Тогда
		СохраненныеНастройки.Вставить("Состав", НастройкиПоУмолчанию.Состав);
	Иначе
		НовыйСохраненныйСостав = Новый СписокЗначений;
		
		Для Каждого ЭлементСписка Из НастройкиПоУмолчанию.Состав Цикл
			СохраненныйЭлемент = СохраненныеНастройки.Состав.НайтиПоЗначению(ЭлементСписка.Значение);
			
			Если СохраненныйЭлемент = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НовыйСохраненныйСостав.Добавить(), ЭлементСписка);
			Иначе
				ЗаполнитьЗначенияСвойств(НовыйСохраненныйСостав.Добавить(), СохраненныйЭлемент);
			КонецЕсли;
		КонецЦикла;
		
		СохраненныеНастройки.Вставить("Состав", НовыйСохраненныйСостав);
	КонецЕсли;
	
	Если НЕ СохраненныеНастройки.Свойство("Порядок") Тогда
		СохраненныеНастройки.Вставить("Порядок", НастройкиПоУмолчанию.Порядок);
	КонецЕсли;   
	
	Возврат СохраненныеНастройки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////

// Добавить задание по закрытию test rail
//
// Параметры:
//  Задача	 - ДокументСсылка.Задачи 	 - Документ задача 
//
Процедура ДобавитьЗаданиеПоЗакрытиюTestRail(Задача) Экспорт 
	
	ИнтеграцияДополнительныхПодсистем.ДобавитьЗакрытиеПрогоновTestRail(Задача);
	
КонецПроцедуры

// Проверяет есть ли Тег в Справочнике Теги и возвращает данные по Тегу
//
// Параметры:
//  ВыбранноеЗначение - Булево - Флаг стандартной обработки
// Возвращает:
//  ТегВСправочнике - Структура - Есть ли Элемент в справочнике Теги, его Ссылку и Наименование
//  
Функция ПроверитьТегПоПредставлению(КорректноеПредставление)Экспорт
	
	ТегВСправочнике = Новый Структура("Есть, Ссылка", Ложь, Справочники.Теги.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Теги.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Теги КАК Теги
	|ГДЕ
	|	Теги.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", КорректноеПредставление);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ТегВСправочнике.Есть = Истина;
			ТегВСправочнике.Ссылка = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТегВСправочнике;
	
КонецФункции

// Формирует заголовок гиперссылки открытия отчета Задачи на тестирование
//
// Параметры:
//  Элементы - ВсеЭлементыФормы	 - все элементы формы 
//
Процедура ЗаголовокЗадачиНаТестирование(Элементы) Экспорт
	
	Если Элементы.Найти("Отчет_ЗадачиНаТестирование_Форма") <> Неопределено Тогда 
		Элементы.Отчет_ЗадачиНаТестирование_Форма.Заголовок = ИнтерфейсПриложения.ЗаголовокЗадачиНаТестирование();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти
