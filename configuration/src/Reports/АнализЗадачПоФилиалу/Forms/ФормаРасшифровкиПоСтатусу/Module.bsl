///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	День = Параметры.День;
	Статус = Справочники.СтатусыОбъектов[Параметры.Статус];
	ДатаНачала = Параметры.ДатаНачала;
	Филиал = Параметры.Филиал;

	ЗагрузитьПользовательскиеНастройки();
	
	СформироватьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Отчет.АнализЗадачПоФилиалу.ФормаНастроек" Тогда
		ОтобразитьСостояниеОтчета(НСтр("ru = 'Настройки отчета изменены. Нажмите ""Сформировать"" для получения отчета.'"),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыРасшифровки = ОбщегоНазначенияВызовСервера.ПолучитьПараметрыРасшифровки(ДанныеРасшифровки, Расшифровка, Ложь);
	
	СсылкаРасшифровки = Неопределено;
	
	Если ПараметрыРасшифровки.Свойство("Задача") Тогда
		СсылкаРасшифровки = ПараметрыРасшифровки.Задача;
	КонецЕсли;  
	
	Если ЗначениеЗаполнено(СсылкаРасшифровки) Тогда
		ПоказатьЗначение( , СсылкаРасшифровки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
	
	СформироватьНаСервере();
	ОтобразитьСостояниеОтчета();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗагрузитьПользовательскиеНастройки()
	
	КлючНастроек = ПолучитьКлючНастроек();
	СохраненныеНастройки = ОбщегоНазначенияВызовСервера.ЗагрузитьСистемнуюНастройку(КлючНастроек, );
	
	Если СохраненныеНастройки <> Неопределено Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(СохраненныеНастройки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСостояниеОтчета(Знач ТекстСостояния = "", Знач КартинкаСостояния = Неопределено)
	
	ОтображатьСостояние = НЕ ПустаяСтрока(ТекстСостояния);
	Если КартинкаСостояния = Неопределено 
		ИЛИ НЕ ОтображатьСостояние Тогда 

		КартинкаСостояния = Новый Картинка;
	КонецЕсли;
	
	ОтображениеСостояния = Элементы.Результат.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = ОтображатьСостояние;
	ОтображениеСостояния.Картинка = КартинкаСостояния;
	ОтображениеСостояния.Текст = ТекстСостояния;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ?(ОтображатьСостояние, ДополнительныйРежимОтображения.Неактуальность, 
		ДополнительныйРежимОтображения.НеИспользовать);
	
	Элементы.Результат.ТолькоПросмотр = (ОтображатьСостояние 
		ИЛИ (Элементы.Результат.Вывод = ИспользованиеВывода.Запретить));
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлючНастроек()
	
	Возврат "Отчет.АнализЗадачПоФилиалу/ЗадачиНаДень/ТекущиеПользовательскиеНастройки";
	
КонецФункции

&НаСервере
Процедура СохранитьПользовательскиеНастройки()
			
	ПользовательскиеНастройки = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	КлючНастроек = ПолучитьКлючНастроек();
	ОбщегоНазначенияВызовСервера.СохранитьСистемнуюНастройку(КлючНастроек,, ПользовательскиеНастройки);	
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНаСервере()
	
	Результат.Очистить();
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	СхемаКомпоновкиДанных = ОтчетОбъект.СхемаКомпоновкиДанных;
	
	Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
				
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаРасшифровки"), День);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Статус"), Статус);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаНачала"), ДатаНачала);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Филиал"), Филиал);

    ДанныеРасшифровкиОтчета = Новый ДанныеРасшифровкиКомпоновкиДанных;
    
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровкиОтчета);
 
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровкиОтчета);
    
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(Результат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

    ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровкиОтчета, УникальныйИдентификатор);
	
	// Сохранение настроек отчета
	СохранитьПользовательскиеНастройки();
	
КонецПроцедуры

#КонецОбласти
