///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем НастройкиОтчета;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СобытиеСеансаКлиентскогоПриложения.ДобавлениеТрудозатрат" Тогда 
		СформироватьОтчетЧерезСКД(НастройкиОтчета, МассивРасшифровки.ВыгрузитьЗначения());	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Периодичность = "ДЕНЬ"; 
	
	Если Параметры.Свойство("ПостроитьОтчетЗаТекущийДень") Тогда
		ЗагружатьНастройки = Ложь;
	Иначе
		ЗагружатьНастройки = Истина;
	КонецЕсли;
	
	Если ЗагружатьНастройки Тогда
		Настройки = ПолучитьНастройкиОтчета();
		
		Если Настройки = Неопределено Тогда
			Настройки = ПолучитьСтандартныеНастройкиНаСервере();
		КонецЕсли;
		
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Настройки, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Перем Пользователь;
	
	Если ЗначениеЗаполнено(АдресВоВременномХранилище) Тогда
		ТекущиеНастройки = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	Иначе
		ТекущиеНастройки = ПолучитьСтандартныеНастройкиНаСервере();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НастройкиОтчета, ТекущиеНастройки); 
	
	Период = НастройкиОтчета.Период;
	ГруппировкаОтчета = НастройкиОтчета.Переключатель;
	
	Если ТекущиеНастройки.Свойство("Пользователь", Пользователь) Тогда
		ТипЗначения = ТипЗнч(ТекущиеНастройки.Пользователь);
		
		Если ТипЗначения = Тип("СправочникСсылка.Пользователи") Тогда	
			МассивПользователи = Новый Массив;
			МассивПользователи.Добавить(ТекущиеНастройки.Пользователь);
			НастройкиОтчета.Пользователь = МассивПользователи;
		ИначеЕсли ТипЗначения = Тип("Массив") Тогда
			НастройкиОтчета.Пользователь = ТекущиеНастройки.Пользователь;
		КонецЕсли;
	КонецЕсли;
	
	// Нужно для определения даты по дате пользователя, а не сервера
	НастройкиОтчета.Вставить("ДатаНачала", Период.ДатаНачала);
	НастройкиОтчета.Вставить("ДатаОкончания", Период.ДатаОкончания);
	
	СформироватьОтчетЧерезСКД(НастройкиОтчета);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы  

&НаКлиенте
Процедура ГруппировкаОтчетаПриИзменении(Элемент)
	
	// Нужно для определения даты по дате пользователя, а не сервера
	НастройкиОтчета.Вставить("ДатаНачала", Период.ДатаНачала);
	НастройкиОтчета.Вставить("ДатаОкончания", Период.ДатаОкончания);
	НастройкиОтчета.Переключатель = ГруппировкаОтчета;
	
	СформироватьОтчетЧерезСКД(НастройкиОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	НастройкиОтчета.Период = Период;
	
	// Ошибка в веб клиенте - возвращается неделя начиная с текущей секунды
	Если НастройкиОтчета.Период.Вариант = ВариантСтандартногоПериода.ЭтаНеделя  Тогда
		НастройкиОтчета.Период.Вариант = ВариантСтандартногоПериода.ЭтаНеделя;
		НастройкиОтчета.Период.ДатаНачала = НачалоДня(НастройкиОтчета.Период.ДатаНачала);
		НастройкиОтчета.Период.ДатаОкончания = НастройкиОтчета.Период.ДатаНачала + 60*60*24*7-1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	
	Результат = ОбработатьПолучениеРасшифровки(Расшифровка, ДанныеРасшифровкиАдресВХранилище, ТабличныйДокумент);
	
	Если Результат.Свойство("Ссылка") И Результат.Свойство("Период") Тогда
		Если Результат.Период <= Результат.ДатаЗапретаИзмененияДанных Тогда
			Сообщить("Ввод трудозатрат в закрытом периоде запрещен");  
		ИначеЕсли Результат.Период > ТекущаяДата() Тогда
			Сообщить("Ввод трудозатрат в будущем периоде запрещен"); 
		Иначе	 	
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Дата", Результат.Период);
			ПараметрыФормы.Вставить("Объект", Результат.Ссылка);
			ПараметрыФормы.Вставить("ПоказатьОбъект", Истина);
			ПараметрыФормы.Вставить("СкрытьСлужебныеПоля", Истина);	
			
			ОткрытьФорму("Документ.Трудозатраты.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект); 
		КонецЕсли;	
	ИначеЕсли Результат.Свойство("Ссылка") Тогда 
		ПоказатьЗначение(, Результат.Ссылка);
	КонецЕсли;          
			
КонецПроцедуры 

#КонецОбласти
                                                  
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОткрытьФормуНастроек(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборНастроек", ЭтотОбъект);
	
	НастройкиОтчета.Периодичность = Периодичность;
	НастройкиОтчета.Период = Период;
	
	ОткрытьФорму("Отчет.Трудозатраты.Форма.ФормаНастроек", НастройкиОтчета, ЭтотОбъект, УникальныйИдентификатор,,, 
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура КомандаСформироватьОтчет(Команда)
		
	// Нужно для определения даты по дате пользователя, а не сервера
	НастройкиОтчета.Вставить("ДатаНачала", Период.ДатаНачала);
	НастройкиОтчета.Вставить("ДатаОкончания", Период.ДатаОкончания);
	
	СформироватьОтчетЧерезСКД(НастройкиОтчета);
		
КонецПроцедуры

&НаКлиенте
Процедура СдвигПериодаВперед(Команда)
	
	Период = ОбщегоНазначенияКлиент.СдвигПериода(Команда.Имя, Период);
	НастройкиОтчета.Период = Период;
	
КонецПроцедуры

&НаКлиенте
Процедура СдвигПериодаНазад(Команда)
	
	Период = ОбщегоНазначенияКлиент.СдвигПериода(Команда.Имя, Период);
	НастройкиОтчета.Период = Период;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУстановкуПериода(Команда)
	
	Если СтрЗаканчиваетсяНа(Команда.Имя, "Вчера") Тогда
		НастройкиОтчета.Период.Вариант = ВариантСтандартногоПериода.Вчера;
	ИначеЕсли СтрЗаканчиваетсяНа(Команда.Имя, "Сегодня") Тогда
		НастройкиОтчета.Период.Вариант = ВариантСтандартногоПериода.Сегодня;
	ИначеЕсли СтрЗаканчиваетсяНа(Команда.Имя, "Неделя") Тогда
		// Дату окончания требуется сдвинуть на конец дня через 7 дней,
		// поэтому сдвигаем от даты начала на 6 дней, 23 часа 59 минут и 59 секунд.
		СдвигДаты = 604799;
		
		НастройкиОтчета.Период.Вариант = ВариантСтандартногоПериода.ЭтаНеделя;
		НастройкиОтчета.Период.ДатаНачала = НачалоДня(НастройкиОтчета.Период.ДатаНачала);
		НастройкиОтчета.Период.ДатаОкончания = НастройкиОтчета.Период.ДатаНачала + СдвигДаты;
	ИначеЕсли СтрЗаканчиваетсяНа(Команда.Имя, "Месяц")  Тогда
		НастройкиОтчета.Период.Вариант = ВариантСтандартногоПериода.ЭтотМесяц;
	КонецЕсли;
	
	Период = НастройкиОтчета.Период;
	
	// Нужно для определения даты по дате пользователя, а не сервера
	НастройкиОтчета.Вставить("ДатаНачала", Период.ДатаНачала);
	НастройкиОтчета.Вставить("ДатаОкончания", Период.ДатаОкончания);
	
	СформироватьОтчетЧерезСКД(НастройкиОтчета);
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

&НаСервере
Процедура ДополнительноОбработатьТабличныйДокумент(ТабличныйДокумент) 
	
	// Сворачиваем группировки строк.
	Уровень = 2;
	Пока Уровень >= 0 Цикл
		ТабличныйДокумент.ПоказатьУровеньГруппировокСтрок(Уровень);
		Уровень = Уровень - 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДополнительныеНастройкиСКД(СхемаКомпоновкиДанных, НастройкиСКД, Знач НастройкиОтчета)
	
	СоответствиеИмяГруппировкиМакет = Новый Соответствие;
	
	// TODO: Если необходимо будет добавить/удалить колонки или
	// каким-то образом доработать макет, то необходимо изменить формирование
	// отчета на несколько вариантов(в СКД). Текущий механизм замены
	// макетов сложен для понимания:)
			
	// Далее идет заполнение соответствия для сопоставления макетов.
	// В зависимости от значения "ТолькоФакт", нужно выбрать соответствующие макеты. 
	// В схеме компоновки созданы имена группировок, по которым ищем совпадения 
	// и для нее указываем используемый макет. 
	Если НастройкиОтчета.Свойство("ПоказыватьПлан") И НЕ НастройкиОтчета.ПоказыватьПлан Тогда
		СоответствиеИмяГруппировкиМакет.Вставить("ПользовательВсе", "Макет12");
		СоответствиеИмяГруппировкиМакет.Вставить("ЗадачаВсе", "Макет13");
		СоответствиеИмяГруппировкиМакет.Вставить("ВидДеятельностиВсе", "Макет14");
		СоответствиеИмяГруппировкиМакет.Вставить("ПериодФакт", "Макет11");
		СоответствиеИмяГруппировкиМакет.Вставить("ИтогПериодФакт", "Макет15");
		
		// Макеты для отображения итога.
		СоответствиеИмяГруппировкиМакет.Вставить("ПользовательИтогВсе", "Макет24");
		СоответствиеИмяГруппировкиМакет.Вставить("ЗадачаИтогВсе", "Макет25");
		СоответствиеИмяГруппировкиМакет.Вставить("ВидДеятельностиИтогВсе", "Макет26");
		СоответствиеИмяГруппировкиМакет.Вставить("ОбщийИтогВсе", "Макет28");
		
		// Отключаем "Использование" для поля "План за период", "ЗатратыВремениПлан".
		КоллекцияВыбранныхПолей = НастройкиСКД.Структура[0].Колонки[0].Выбор.Элементы;
		КоллекцияВыбранныхПолей[1].Элементы[0].Использование = Ложь;
		КоллекцияВыбранныхПолей[1].Элементы[1].Элементы[0].Использование = Ложь;
		
		// Удалим рассчет общего итога по полю "ЗатратыВремениПлан".
		ПолеИтогаЗатратыПлан = СхемаКомпоновкиДанных.ПоляИтога[3];
		СхемаКомпоновкиДанных.ПоляИтога.Удалить(ПолеИтогаЗатратыПлан);
		
		// Удалим рассчет общего итога по полю "План за период".
		ПолеИтогаПланЗаПериод = СхемаКомпоновкиДанных.ПоляИтога[5];
		СхемаКомпоновкиДанных.ПоляИтога.Удалить(ПолеИтогаПланЗаПериод);
	Иначе		
		СоответствиеИмяГруппировкиМакет.Вставить("ПользовательФакт", "Макет6");
		СоответствиеИмяГруппировкиМакет.Вставить("ЗадачаФакт", "Макет8");
		СоответствиеИмяГруппировкиМакет.Вставить("ВидДеятельностиФакт", "Макет9");
		СоответствиеИмяГруппировкиМакет.Вставить("ПериодВсе", "Макет7");
		СоответствиеИмяГруппировкиМакет.Вставить("ИтогПериодВсе", "Макет10");
		
		// Макеты для отображения итога.
		СоответствиеИмяГруппировкиМакет.Вставить("ПользовательИтогФакт", "Макет23");
		СоответствиеИмяГруппировкиМакет.Вставить("ЗадачаИтогФакт", "Макет27");
		СоответствиеИмяГруппировкиМакет.Вставить("ВидДеятельностиИтогФакт", "Макет22");
		СоответствиеИмяГруппировкиМакет.Вставить("ОбщийИтогФакт", "Макет17");
	КонецЕсли;
			
	// Переключаем "Использование" для отбора "ОтображатьТолькоПодсвеченныеТрудозатраты".
	НастройкиСКД.Структура[0].Колонки[0].Отбор.Элементы[0].Использование = НастройкиОтчета.ОтображатьТолькоПодсвеченныеТрудозатраты;
	
	// Замена макетов для ресурсов.
	Для Каждого МакетКомпоновки Из СхемаКомпоновкиДанных.МакетыПолейИтога Цикл
		ИмяГруппировки = МакетКомпоновки.ИмяГруппировки1;
		НовыйМакет = СоответствиеИмяГруппировкиМакет.Получить(ИмяГруппировки);
		Если НовыйМакет <> Неопределено Тогда
			МакетКомпоновки.Макет = НовыйМакет;	
			МакетКомпоновки.ИмяГруппировки1 = "";
		КонецЕсли;
	КонецЦикла;
	
	// Замена макетов для группировок.
	Для Каждого МакетКомпоновки Из СхемаКомпоновкиДанных.МакетыГруппировок Цикл
		ИмяГруппировки = МакетКомпоновки.ИмяГруппировки;
		НовыйМакет = СоответствиеИмяГруппировкиМакет.Получить(ИмяГруппировки);
		Если НовыйМакет <> Неопределено Тогда
			МакетКомпоновки.Макет = НовыйМакет;	
			МакетКомпоновки.ИмяГруппировки = "";
		КонецЕсли;
	КонецЦикла;
	
	// Добавим параметры запроса.
	СписокПериодичность = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Периодичность"));	
	СписокПериодичность.Значение = НастройкиОтчета.Периодичность;
	
	ПараметрДатаНачала = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));	
	ПараметрДатаНачала.Значение = НастройкиОтчета.ДатаНачала;
	
	ПараметрДатаКонец = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));	
	ПараметрДатаКонец.Значение = НастройкиОтчета.ДатаОкончания;
	
	ПараметрТекущаяДата = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТекущаяДата"));
	ПараметрТекущаяДата.Значение = НачалоДня(ОбщегоНазначения.ТекущаяДатаСоСдвигом());
	
	ПараметрОтображатьВыходные = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ОтображатьВыходные"));
	ПараметрОтображатьВыходные.Значение = НастройкиОтчета.ОтображатьВыходные;
	
	// Добавление/отключение комментариев
	ПараметрОтображатьКомментарий = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ОтображатьКомментарий"));
	ПараметрОтображатьКомментарий.Значение = НастройкиОтчета.ОтображатьКомментарии;

	// Фильтр отображать документы ВнутренниеТрудозатраты
	ПараметрОтображатьВнутренниеТрудозатраты = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных("ОтображатьВнутренниеТрудозатраты"));
	ПараметрОтображатьВнутренниеТрудозатраты.Значение = НастройкиОтчета.ОтображатьВнутренниеТрудозатраты;
	
	// Фильтр по видам деятельности
	ВыбранныеВидыДеятельности = НастройкиОтчета.ВыбранныеВидыДеятельности;

	ПараметрОграничитьВидыДеятельности = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных("ОграничитьВидыДеятельности"));
	ПараметрОграничитьВидыДеятельности.Значение = ВыбранныеВидыДеятельности.Количество() > 0;
	
	ПараметрСписокВидыДеятельности = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных("СписокВидыДеятельности"));
	ПараметрСписокВидыДеятельности.Значение = ВыбранныеВидыДеятельности;

	ВыбранныеВидыДеятельностиВТ = НастройкиОтчета.ВыбранныеВидыДеятельностиВТ;

	ПараметрОграничитьВидыДеятельностиВТ = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных("ОграничитьВидыДеятельностиВТ"));
	ПараметрОграничитьВидыДеятельностиВТ.Значение = ВыбранныеВидыДеятельностиВТ.Количество() > 0;
	
	ПараметрСписокВидыДеятельностиВТ = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных("СписокВидыДеятельностиВТ"));
	ПараметрСписокВидыДеятельностиВТ.Значение = ВыбранныеВидыДеятельностиВТ;
	
	Пользователь = НастройкиОтчета.Пользователь;
	Филиалы = НастройкиОтчета.ВыбранныеФилиалы;
	// Отбор по пользователю и филиалу.
	// Если заполнены оба фильтра, учитываются оба.
	Если Пользователь.Количество() <> 0 Тогда	
		ОбщегоНазначения.ДобавитьЭлементОтбораКомпоновкиДанных(НастройкиСКД, "ПользовательСсылка", 
			ВидСравненияКомпоновкиДанных.ВСписке, Пользователь);
	КонецЕсли;
	Если ЗначениеЗаполнено(Филиалы) Тогда
		ОбщегоНазначения.ДобавитьЭлементОтбораКомпоновкиДанных(НастройкиСКД, "ПользовательФилиал", 
			ВидСравненияКомпоновкиДанных.ВСписке, Филиалы);
	КонецЕсли;
	
	// Отбор по статусам.
	ВыбранныеСтатусы = НастройкиОтчета.ВыбранныеСтатусы;
	Если ВыбранныеСтатусы.Количество() > 0 Тогда
		ОбщегоНазначения.ДобавитьЭлементОтбораКомпоновкиДанных(НастройкиСКД, "Статус", 
			ВидСравненияКомпоновкиДанных.ВСписке, ВыбранныеСтатусы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючиНастроек()
	
	Результат = Новый Структура;
	Результат.Вставить("Объект", "Отчет.Трудозатраты.Форма.ФормаОтчета");
	Результат.Вставить("Настройка", "НастройкаОтчета");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыборНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НастройкиОтчета, Результат);
	НастройкиОтчета.НастройкиЗаполнены = Истина;
		
	Периодичность = Результат.Периодичность;
	Период = Результат.Период;
	
	// Нужно для определения даты по дате пользователя, а не сервера
	НастройкиОтчета.Вставить("ДатаНачала", Период.ДатаНачала);
	НастройкиОтчета.Вставить("ДатаОкончания", Период.ДатаОкончания);
	
	СформироватьОтчетЧерезСКД(НастройкиОтчета);
	
КонецПроцедуры  

&НаСервере
Функция ОбработатьПолучениеРасшифровки(Знач Расшифровка, Знач АдресДанныеРасшифровки, Знач ТабличныйДокумент)
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныеРасшифровки);
	
	ГруппировкаРодители = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьРодителей();	
	Если ГруппировкаРодители.Количество() <> 0 Тогда  
		
		ГруппировкаПоля = ГруппировкаРодители[0].ПолучитьПоля();
		ПоляРасшифровкиВремяФакт = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля();
		
		ПолеЗадача = ГруппировкаПоля.Найти("Задача");
		ПолеПериод = ПоляРасшифровкиВремяФакт.Найти("Период");
		
		СтруктураСсылкаПериодПользователь = Новый Структура;
		
		Если ПолеПериод <> Неопределено Тогда	
			СтруктураСсылкаПериодПользователь.Вставить("Период", ПолеПериод.Значение);
		КонецЕсли;
		
		Если ПолеЗадача <> Неопределено Тогда
			СтруктураСсылкаПериодПользователь.Вставить("Ссылка", ПолеЗадача.Значение);
		КонецЕсли;
		
	КонецЕсли;  
	
	МассивРасшифровкиПользователей = Новый Массив;
	
	Для НомерСтроки = 1 По ТабличныйДокумент.ВысотаТаблицы Цикл
		ОбластьЯчеек = ТабличныйДокумент.Область(СтрШаблон("R%1C2", Строка(Формат(НомерСтроки, "ЧГ=0")))); 
		
		Если ОбластьЯчеек.Расшифровка <> Неопределено И ОбластьЯчеек.Видимость Тогда		
			Расшифровка = ОбластьЯчеек.Расшифровка;
			
			РасшифровкаПользователь = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля();
			ПолеПользователь = РасшифровкаПользователь.Найти("Пользователь");
			
			Если ПолеПользователь <> Неопределено 
				И МассивРасшифровкиПользователей.Найти(ПолеПользователь.Значение) = Неопределено Тогда 
				
				МассивРасшифровкиПользователей.Добавить(ПолеПользователь.Значение); 	
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	МассивРасшифровки.ЗагрузитьЗначения(МассивРасшифровкиПользователей);
	
	СтруктураСсылкаПериодПользователь.Вставить("ДатаЗапретаИзмененияДанных", Константы.ДатаЗапретаИзмененияДанных.Получить()); 
	
	Возврат СтруктураСсылкаПериодПользователь;
	
КонецФункции 

&НаСервере
Функция ПолучитьНастройкиОтчета()
	
	Ключи = КлючиНастроек();
	
	Возврат ХранилищеПользовательскихНастроекОтчетов.Загрузить(Ключи.Объект, Ключи.Настройка);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтандартныеНастройкиНаСервере()
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	СтандартныеНастройки = Новый Структура;
	СтандартныеНастройки.Вставить("Период", Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня)); 
	СтандартныеНастройки.Вставить("ПоказыватьПлан", Ложь);
	СтандартныеНастройки.Вставить("ОтображатьКомментарии", Ложь);
	СтандартныеНастройки.Вставить("ОтображатьВыходные", Истина);
	СтандартныеНастройки.Вставить("ОтображатьВнутренниеТрудозатраты", Истина);
	СтандартныеНастройки.Вставить("ОтображатьТолькоПодсвеченныеТрудозатраты", Ложь);
	СтандартныеНастройки.Вставить("Переключатель", 0);
	
	МассивФилиалов = Новый Массив;
	ТекущийФилиал = ПараметрыСеанса.Филиал;

	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	РуководительФилиала = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийФилиал, "Руководитель");

	Если ТекущийПользователь = РуководительФилиала Тогда
		МассивФилиалов.Добавить(ТекущийФилиал);
		СтандартныеНастройки.Вставить("ВыбранныеФилиалы", МассивФилиалов);
	Иначе
		МассивПользователей = Новый Массив;
		МассивПользователей.Добавить(ТекущийПользователь);
		СтандартныеНастройки.Вставить("Пользователь", МассивПользователей);
	КонецЕсли;
	
	Возврат СтандартныеНастройки;
			
КонецФункции

&НаСервереБезКонтекста
Процедура РаскрытьГруппировкиОтчета(ТабличныйДокумент, Знач МассивРасшифровкиПользователей, Знач АдресДанныеРасшифровки)

	Для НомерСтроки = 1 По ТабличныйДокумент.ВысотаТаблицы Цикл 
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныеРасшифровки); 
		
		ОбластьПервойКолонки = ТабличныйДокумент.Область(СтрШаблон("R%1C2", Строка(Формат(НомерСтроки, "ЧГ=0")))); 
		ОбластьЯчеек = ТабличныйДокумент.Область("R" + Формат(НомерСтроки, "ЧГ=0") + ":R" + Формат(НомерСтроки + 1, "ЧГ=0")); 
		
		Расшифровка = ОбластьПервойКолонки.Расшифровка;
	
		Если ОбластьПервойКолонки.Расшифровка <> Неопределено Тогда		
			РасшифровкаПользователь = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля();
			ПолеПользователь = РасшифровкаПользователь.Найти("Пользователь"); 
		Иначе
			ПолеПользователь = Неопределено;
		КонецЕсли;
			
		Если ПолеПользователь <> Неопределено 
			И МассивРасшифровкиПользователей.Найти(ПолеПользователь.Значение) <> Неопределено Тогда 
			
			ОбластьЯчеек.Видимость = Истина; 
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиОтчета(Знач Настройки)
	
	Ключи = КлючиНастроек();
	
	ХранилищеПользовательскихНастроекОтчетов.Сохранить(Ключи.Объект, Ключи.Настройка, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетЧерезСКД(Знач НастройкиОтчета, Знач МассивРасшифровкиПользователей = Неопределено)

	//Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	ОбъектОтчет = РеквизитФормыВЗначение("Отчет");
	СхемаКомпоновкиДанных = ОбъектОтчет.ПолучитьМакет("СхемаКомпоновкиДанных");
	
	// Дополнительно подготовим настройки схемы компоновки.	
	Если ГруппировкаОтчета = 0 Тогда
		Настройки = СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки;
		ИнициализироватьДополнительныеНастройкиСКД(СхемаКомпоновкиДанных, Настройки, НастройкиОтчета);
	ИначеЕсли ГруппировкаОтчета = 1 Тогда
		Настройки = СхемаКомпоновкиДанных.ВариантыНастроек.ФилиалЗаказчик.Настройки;
		ДополнительныеНастройки(СхемаКомпоновкиДанных, Настройки, НастройкиОтчета);		
	Иначе
		Настройки = СхемаКомпоновкиДанных.ВариантыНастроек.Основание.Настройки;
		ДополнительныеНастройки(СхемаКомпоновкиДанных, Настройки, НастройкиОтчета);
	КонецЕсли;
		
	//Передаем в макет компоновки схему, настройки и данные расшифровки	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки, Истина);
	
	ТабличныйДокумент.Очистить();
	
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ДанныеРасшифровкиАдресВХранилище = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
	ДополнительноОбработатьТабличныйДокумент(ТабличныйДокумент);
	ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область("R1C4");
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;

	Если ЗагружатьНастройки Тогда
		СохранитьНастройкиОтчета(НастройкиОтчета);
	КонецЕсли;   
	
	Если МассивРасшифровкиПользователей <> Неопределено Тогда
		РаскрытьГруппировкиОтчета(ТабличныйДокумент, МассивРасшифровкиПользователей, ДанныеРасшифровкиАдресВХранилище);	
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ДополнительныеНастройки(СхемаКомпоновкиДанных, НастройкиСКД, Знач НастройкиОтчета)
	
	ПараметрДатаНачала = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ПараметрДатаНачала.Значение = НачалоМесяца(НастройкиОтчета.ДатаНачала);
	
	ПараметрДатаКонец = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	ПараметрДатаКонец.Значение = КонецМесяца(НастройкиОтчета.ДатаОкончания);
	
	ПараметрТекущаяДата = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТекущаяДата"));
	ПараметрТекущаяДата.Значение = НачалоДня(ОбщегоНазначения.ТекущаяДатаСоСдвигом());
		
	Филиалы = НастройкиОтчета.ВыбранныеФилиалы;
	Если ЗначениеЗаполнено(Филиалы) Тогда
		ОбщегоНазначения.ДобавитьЭлементОтбораКомпоновкиДанных(НастройкиСКД, "ПользовательФилиал", 
			ВидСравненияКомпоновкиДанных.ВСписке, Филиалы);
	Иначе
		ОбщегоНазначения.ДобавитьЭлементОтбораКомпоновкиДанных(НастройкиСКД, "ПользовательФилиал", 
			ВидСравненияКомпоновкиДанных.Равно, ПараметрыСеанса.Филиал);
	КонецЕсли;
	
	// для применения стилей к итогам в дополнительных отчетах
	МакетПоля = СхемаКомпоновкиДанных.МакетыПолей.Найти("ЗатратыВремениФакт");
	МакетПоля.Макет = "Макет36";

КонецПроцедуры

#КонецОбласти

#Область ИнициализацияПеременных

#Если ТонкийКлиент ИЛИ ВебКлиент Тогда

НастройкиОтчета = Новый Структура;
НастройкиОтчета.Вставить("ВыбранныеВидыДеятельности", Новый Массив);
НастройкиОтчета.Вставить("ВыбранныеСтатусы", Новый Массив);
НастройкиОтчета.Вставить("ВыбранныеФилиалы", Новый Массив);
НастройкиОтчета.Вставить("НастройкиЗаполнены", Ложь);
НастройкиОтчета.Вставить("ОтображатьВнутренниеТрудозатраты", Истина);
НастройкиОтчета.Вставить("ВыбранныеВидыДеятельностиВТ", Новый Массив);
НастройкиОтчета.Вставить("ОтображатьКомментарии", Ложь);
НастройкиОтчета.Вставить("ОтображатьВыходные", Истина);
НастройкиОтчета.Вставить("Период", Неопределено);
НастройкиОтчета.Вставить("Периодичность", "ДЕНЬ");
НастройкиОтчета.Вставить("Переключатель", 0);
НастройкиОтчета.Вставить("Пользователь", Новый Массив);
НастройкиОтчета.Вставить("СохранятьПериод", Истина);
НастройкиОтчета.Вставить("ПоказыватьПлан", Ложь);
НастройкиОтчета.Вставить("ОтображатьТолькоПодсвеченныеТрудозатраты", Ложь);

#КонецЕсли

#КонецОбласти
