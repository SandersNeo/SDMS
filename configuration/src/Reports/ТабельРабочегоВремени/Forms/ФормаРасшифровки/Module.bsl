///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РегистрыСведений.ОтслеживаниеИспользованияФункциональности.ОткрытиеФормы(ЭтотОбъект.ИмяФормы);
	
	Филиалы = Параметры.Филиалы;
		
	ДатаНачала = Параметры.ДатаНачала;
	ДатаОкончания = КонецМесяца(ДатаНачала);
	
	СформироватьЗаголовок(ДатаНачала);	
	СформироватьОтчетНаСервере(ДатаНачала, ДатаОкончания);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура РезультатОтчетаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;		
	
	ПолноеНаименование = ПолучитьБуквенныйКодСобытия(АдресДанныеРасшифровки, Расшифровка);
	Если ЗначениеЗаполнено(ПолноеНаименование) Тогда
		ПоказатьПредупреждение(, ПолноеНаименование);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьБуквенныйКодСобытия(Знач АдресДанныеРасшифровки, Знач ИдентификаторРасшифровки)
	
	ПолноеНаименование = "";
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныеРасшифровки);
	СтрокаРасшифровки = ДанныеРасшифровки.Элементы[ИдентификаторРасшифровки];
	КоллекцияПолейРасшифровки = СтрокаРасшифровки.ПолучитьПоля();
	Если КоллекцияПолейРасшифровки.Количество() <> 0 Тогда
		ТекущееПоле = КоллекцияПолейРасшифровки[0];
		ЗначениеПоля = ТекущееПоле.Значение;
		
		Если ТекущееПоле.Поле = "ВидВремениПредставление"
			И ТипЗнч(ЗначениеПоля) = Тип("Строка") Тогда
			
			Если ЗначениеПоля = "Б/О" Тогда
				ПолноеНаименование = "Отсутствие сотрудника зафиксировано в документе ""Отсутствия на рабочем месте""";
			Иначе
				ВидВремениСсылка = Справочники.КлассификаторИспользованияРабочегоВремени.ПолучитьЭлементПоБуквенномуКоду(ЗначениеПоля);
				ПолноеНаименование = ПолучитьПолноеНаименованиеВидаВремени(ВидВремениСсылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПолноеНаименование;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПолноеНаименованиеВидаВремени(Знач ВидВремениСсылка)
	
	ПолноеНаименование = "";
	
	Если ЗначениеЗаполнено(ВидВремениСсылка) Тогда
		СтруктураДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидВремениСсылка, "Наименование, ПолноеНаименование");
		Если ЗначениеЗаполнено(СтруктураДанные.ПолноеНаименование) Тогда
			ПолноеНаименование = СтруктураДанные.ПолноеНаименование;
		Иначе
			ПолноеНаименование = СтруктураДанные.Наименование;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПолноеНаименование;
		
КонецФункции

&НаСервере
Процедура СформироватьЗаголовок(Знач ДатаНачала)
	
	Заголовок = СтрШаблон(Заголовок, Строка(Филиалы), Формат(ДатаНачала, "ДФ='ММММ ггг'"));
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетНаСервере(Знач ДатаНачала, Знач ДатаОкончания)
	
	РезультатОтчета.Очистить();
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	
	СхемаКомпоновкиДанных = ОтчетОбъект.ПолучитьМакет("СхемаКомпоновкиДанныхРасшифровка");	
	НастройкиСКД = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
				
	// Параметры
	ПараметрДатаНачала = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаНачала"));	
	ПараметрДатаНачала.Значение = ДатаНачала;
	
	ПараметрДатаКонец = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаОкончания"));	
	ПараметрДатаКонец.Значение = ДатаОкончания;
	
	ПараметрФилиал = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Филиал"));
	ПараметрФилиал.Значение = Филиалы;
	
	ВидВремениЯвка = Справочники.КлассификаторИспользованияРабочегоВремени.ПолучитьЭлементПоБуквенномуКоду("Я");
	ПараметрВидВремени = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВидВремениЯвка"));	
	ПараметрВидВремени.Значение = ВидВремениЯвка;
	
	ДанныеРасшифровкиКомпоновкиДанных = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиСКД, ДанныеРасшифровкиКомпоновкиДанных);
	
	// ВнешниеНаборыДанных
	ТаблицаОтсутствий = Отчеты.ТабельРабочегоВремени.ПолучитьТаблицуОтсутствий(ДатаНачала);
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ДатыОтсутствияСотрудников", ТаблицаОтсутствий); 	
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, 
		ДанныеРасшифровкиКомпоновкиДанных, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(РезультатОтчета);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	// ДанныеРасшифровки
	АдресДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровкиКомпоновкиДанных, 
		ЭтотОбъект.УникальныйИдентификатор);
			
КонецПроцедуры

#КонецОбласти
