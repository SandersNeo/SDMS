///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.СтраницаОтчеты.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	Спринт = Параметры.Спринт;
	
	Если Параметры.Свойство("МассивОбъектов") Тогда
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Параметры.МассивОбъектов, УникальныйИдентификатор);
		ОбъектыСпринтаЗаполнены = Истина;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)
		
	Если ЗначениеЗаполнено(Спринт) Тогда  
		СформироватьДанныеФормы(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура КомандаРазработчиковПриИзменении(Элемент)
	
	СформироватьОтчетОбщий();
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура СпринтПриИзменении(Элемент)
	
	СформироватьДанныеФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	СформироватьДанныеФормы();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьМассивОбъектовТекущегоСпринта(Знач ДанныеСпринта)
	
	МассивОбъектов = Новый Массив;
	
	Запрос = Новый Запрос;
	ТекстыЗапросовПакета = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СоставСпринтов.Объект КАК Объект
	|ПОМЕСТИТЬ ТаблицаОбъектов
	|ИЗ
	|	РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|ГДЕ
	|	СоставСпринтов.Спринт = &Спринт";
	
	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
	ОцениватьВStoryPoint = РегистрыСведений.НастройкиФилиалов.ЗначениеНастройки(ДанныеСпринта.Филиал, 
		ПланыВидовХарактеристик.ВидыНастроекФилиалов.ОцениватьЗадачиВStoryPoint);
	
	Если ДанныеСпринта.ВидСпринта = Перечисления.ВидыСпринта.IT И ОцениватьВStoryPoint Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаОбъектов.Объект КАК Ссылка,
		|	ДокументЗадача.ОценкаStoryPoint * (1 - ДокументЗадача.ПроцентВыполнения / 100) КАК ОценкаТрудозатрат
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
		|		ПО ТаблицаОбъектов.Объект = ДокументЗадача.Ссылка";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаОбъектов.Объект КАК Объект,
		|	СУММА(Трудозатраты.Затрата) КАК Затрата
		|ПОМЕСТИТЬ ФактическиеТрудозатраты
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК Трудозатраты
		|		ПО ТаблицаОбъектов.Объект = Трудозатраты.Объект
		|			И (Трудозатраты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания)
		|			И (Трудозатраты.РольПользователя <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.Тестировщик))
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВидСпринта = ЗНАЧЕНИЕ(Перечисление.ВидыСпринта.IT)
		|				ТОГДА Трудозатраты.ITСтруктура
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОбъектов.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОбъектов.Объект КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПланируемыеТрудозатратыПоСпринтам.Трудозатраты, 0) > ЕСТЬNULL(ФактическиеТрудозатраты.Затрата, 0)
		|			ТОГДА ЕСТЬNULL(ПланируемыеТрудозатратыПоСпринтам.Трудозатраты, 0) - ЕСТЬNULL(ФактическиеТрудозатраты.Затрата, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОценкаТрудозатрат
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
		|		ПО ТаблицаОбъектов.Объект = ДокументЗадача.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатратыПоСпринтам КАК ПланируемыеТрудозатратыПоСпринтам
		|		ПО ТаблицаОбъектов.Объект = ПланируемыеТрудозатратыПоСпринтам.Объект
		|			И (ПланируемыеТрудозатратыПоСпринтам.Спринт = &Спринт)
		|			И (ПланируемыеТрудозатратыПоСпринтам.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
		|		ПО ТаблицаОбъектов.Объект = ФактическиеТрудозатраты.Объект";
	КонецЕсли;
	
	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);	
	
	Разделитель =
	"
	|;
	|/////////////////////////////////////////////////////////////
	|";
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросовПакета, Разделитель);
	Запрос.УстановитьПараметр("Спринт", Спринт);
	Запрос.УстановитьПараметр("ДатаНачала", ДанныеСпринта.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДанныеСпринта.ДатаОкончания));
	Запрос.УстановитьПараметр("ВидСпринта", ДанныеСпринта.ВидСпринта);
	
	Выборка = Запрос.Выполнить().Выбрать();	
	
	Пока Выборка.Следующий() Цикл          
		МассивОбъектов.Добавить(Новый Структура("Ссылка, ОценкаТрудозатрат", Выборка.Ссылка, Выборка.ОценкаТрудозатрат));
	КонецЦикла;
		
	Возврат МассивОбъектов;
	
КонецФункции

&НаСервере
Процедура СформироватьДанныеФормы(Регистрировать = Ложь)  
	
	Если НЕ ЗначениеЗаполнено(Спринт) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен спринт");
		Возврат;
	КонецЕсли;
	
	Элементы.КомандаРазработчиков.РежимВыбораИзСписка = Ложь;
	Элементы.КомандаРазработчиков.КнопкаВыпадающегоСписка = Ложь;
	Элементы.КомандаРазработчиков.Видимость = Ложь;

	Параметр = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Ссылка"); 
	Параметр.Значение = Спринт;
	Параметр.Использование = Истина; 
	
	ДанныеСпринта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Спринт, "Номер, ДатаНачала, ДатаОкончания, Филиал, Команда, ВидСпринта");
	
	ВидСпринта = ДанныеСпринта.ВидСпринта;
	
	ЭтотОбъект.Заголовок = СтрШаблон("Статистика спринта #%1", ДанныеСпринта.Номер);
	
	Если ВидСпринта = Перечисления.ВидыСпринта.Планирование Тогда
		Функциональность = "Планирование";  
		Элементы.СтраницаОтчеты.ТекущаяСтраница = Элементы.СтраницаПланирование;
		ЭтотОбъект.СкомпоноватьРезультат(РежимКомпоновкиРезультата.Непосредственно); 
		Результат.ФиксацияСлева = 1;
	Иначе
		Элементы.СтраницаОтчеты.ТекущаяСтраница = Элементы.СтраницаОбщая;
		
		Если НЕ ОбъектыСпринтаЗаполнены Тогда	
			МассивОбъектов = ПолучитьМассивОбъектовТекущегоСпринта(ДанныеСпринта);
			АдресВременногоХранилища = ПоместитьВоВременноеХранилище(МассивОбъектов, УникальныйИдентификатор);
		КонецЕсли;
		
		Филиал = ДанныеСпринта.Филиал; 
		ДатаОкончанияСпринта = КонецДня(ДанныеСпринта.ДатаОкончания);
		
		Если ВидСпринта = Перечисления.ВидыСпринта.ВнутреннееЗадание Тогда
			Функциональность = "Внутреннее задание";
			ДиаграммаКоличествоОбъектовВСтатусах.ОбластьЗаголовка.Текст = "Количество заданий спринта в статусах";
			ДиаграммаРешенные.ОбластьЗаголовка.Текст = "% решенных заданий";
		Иначе
			Функциональность = "IT";
			ДиаграммаКоличествоОбъектовВСтатусах.ОбластьЗаголовка.Текст = "Количество задач спринта в статусах";
			ДиаграммаРешенные.ОбластьЗаголовка.Текст = "% решенных задач";
			Элементы.КомандаРазработчиков.ТолькоПросмотр = ЗначениеЗаполнено(ДанныеСпринта.Команда);
			
			Если ЗначениеЗаполнено(ДанныеСпринта.Команда) Тогда
				КомандаРазработчиков = ДанныеСпринта.Команда;
				Элементы.КомандаРазработчиков.Видимость = Истина;
			Иначе
				Элементы.КомандаРазработчиков.СписокВыбора.Очистить();
				СписокКоманд = Справочники.Филиалы.ПолучитьКомандыРазработки(ДанныеСпринта.Филиал);
				
				Если СписокКоманд.Количество() = 0 Тогда
					КомандаРазработчиков = Справочники.Филиалы.ПустаяСсылка();
				Иначе
					Элементы.КомандаРазработчиков.РежимВыбораИзСписка = Истина;
					Элементы.КомандаРазработчиков.КнопкаВыпадающегоСписка = Истина;
					Элементы.КомандаРазработчиков.Видимость = Истина;
					
					СписокВыбораКоманд = Элементы.КомандаРазработчиков.СписокВыбора;
					СписокВыбораКоманд.Добавить(Справочники.Филиалы.ПустаяСсылка(), "Без команды");
					
					Для Каждого ЭлементКоманда Из СписокКоманд Цикл
						СписокВыбораКоманд.Добавить(ЭлементКоманда.Значение, ЭлементКоманда.Представление);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СформироватьОтчетОбщий();	
		ОбъектыСпринтаЗаполнены = Ложь;		
	КонецЕсли;
	
	РегистрыСведений.ОтслеживаниеИспользованияФункциональности.Добавить(Функциональность, ИмяФормы);		

КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетОбщий()
		
	ТаблицаКДиаграмме.Очистить();
	ДиаграммаКоличествоОбъектовВСтатусах.Очистить();
	ДиаграммаРешенные.Очистить();
	
	ОбъектыСпринта = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ВнутреннееЗадание"));
	МассивТипов.Добавить(Тип("ДокументСсылка.Задача"));

	ТаблицаОбъектов = Новый ТаблицаЗначений; 
	ТаблицаОбъектов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(МассивТипов));
	ТаблицаОбъектов.Колонки.Добавить("ОценкаТрудозатрат", ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(15, 2));
	
	Для Каждого ДанныеОбъекта Из ОбъектыСпринта Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаОбъектов.Добавить(), ДанныеОбъекта);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	ТекстыЗапросовПакета = Новый Массив;

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОбъектов.Ссылка КАК Ссылка,
	|	ТаблицаОбъектов.ОценкаТрудозатрат КАК ОценкаТрудозатрат
	|ПОМЕСТИТЬ ТаблицаОбъектов
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбъектов.Ссылка КАК Ссылка,
	|	ТаблицаОбъектов.ОценкаТрудозатрат КАК ОценкаТрудозатрат,
	|	ИсторияСоставаСпринтовСрезПоследних.Статус КАК Статус
	|ПОМЕСТИТЬ СтатусОбъектов
	|ИЗ
	|	ТаблицаОбъектов КАК ТаблицаОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСоставаСпринтов.СрезПоследних(&ДатаСреза, Спринт = &Спринт) КАК ИсторияСоставаСпринтовСрезПоследних
	|		ПО ТаблицаОбъектов.Ссылка = ИсторияСоставаСпринтовСрезПоследних.Объект";
	
	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
	
	Если ВидСпринта = Перечисления.ВидыСпринта.IT Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СтатусОбъектов.Ссылка КАК Ссылка,
		|	СтатусОбъектов.ОценкаТрудозатрат КАК ОценкаТрудозатрат,
		|	СвойстваЗадачСрезПоследних.Статус КАК Статус
		|ПОМЕСТИТЬ СтатусДляОбъектовБезСтатуса
		|ИЗ
		|	СтатусОбъектов КАК СтатусОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗадач.СрезПоследних(
		|				&ДатаСреза,
		|				Объект В
		|					(ВЫБРАТЬ
		|						СтатусОбъектов.Ссылка КАК Задача
		|					ИЗ
		|						СтатусОбъектов КАК СтатусОбъектов
		|					ГДЕ
		|						СтатусОбъектов.Статус ЕСТЬ NULL)) КАК СвойстваЗадачСрезПоследних
		|		ПО СтатусОбъектов.Ссылка = СвойстваЗадачСрезПоследних.Объект";
	Иначе
		// Перечисления.ВидыСпринта.ВнутреннееЗадание
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СтатусОбъектов.Ссылка КАК Ссылка,
		|	СтатусОбъектов.ОценкаТрудозатрат КАК ОценкаТрудозатрат,
		|	ДокументВнутреннееЗадание.Статус КАК Статус
		|ПОМЕСТИТЬ СтатусДляОбъектовБезСтатуса
		|ИЗ
		|	СтатусОбъектов КАК СтатусОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееЗадание КАК ДокументВнутреннееЗадание
		|		ПО СтатусОбъектов.Ссылка = ДокументВнутреннееЗадание.Ссылка";	
	КонецЕсли;
	
	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СтатусОбъектов.Ссылка КАК Ссылка,
	|	СтатусОбъектов.ОценкаТрудозатрат КАК ОценкаТрудозатрат,
	|	ЕСТЬNULL(СтатусОбъектов.Статус, ЕСТЬNULL(СтатусДляОбъектовБезСтатуса.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый))) КАК Статус
	|ПОМЕСТИТЬ ВсеОбъектыСоСтатусами
	|ИЗ
	|	СтатусОбъектов КАК СтатусОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусДляОбъектовБезСтатуса КАК СтатусДляОбъектовБезСтатуса
	|		ПО СтатусОбъектов.Ссылка = СтатусДляОбъектовБезСтатуса.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеОбъектыСоСтатусами.Ссылка КАК КоличествоЗадач,
	|	ВсеОбъектыСоСтатусами.ОценкаТрудозатрат КАК ОценкаТрудозатрат,
	|	ВсеОбъектыСоСтатусами.Статус КАК Статус,
	|	ВЫБОР
	|		КОГДА ВсеОбъектыСоСтатусами.Статус В (&СписокСтатусов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Решенные,
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексКартинки
	|ИЗ
	|	ВсеОбъектыСоСтатусами КАК ВсеОбъектыСоСтатусами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ВсеОбъектыСоСтатусами.Статус = СтатусыОбъектов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО ВсеОбъектыСоСтатусами.Ссылка = ДокументЗадача.Ссылка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтборПоКоманде
	|				ТОГДА ДокументЗадача.КомандаРазработчиков = &КомандаРазработчиков
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Решенные УБЫВ,
	|	СтатусыОбъектов.Порядок
	|ИТОГИ
	|	КОЛИЧЕСТВО(КоличествоЗадач),
	|	СУММА(ОценкаТрудозатрат),
	|	МАКСИМУМ(ИндексКартинки)
	|ПО
	|	Решенные,
	|	Статус";

	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Справочники.СтатусыОбъектов.Решен);
	СписокСтатусов.Добавить(Справочники.СтатусыОбъектов.Протестирован);
	СписокСтатусов.Добавить(Справочники.СтатусыОбъектов.Тестирование);
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Если ДатаОкончанияСпринта < ТекущаяДата Тогда
		ДатаСреза = ДатаОкончанияСпринта;
	Иначе
		ДатаСреза = ТекущаяДата;
	КонецЕсли;
	
	Разделитель =
	"
	|;
	|/////////////////////////////////////////////////////////////
	|";
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросовПакета, Разделитель);
	
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектов);
	Запрос.УстановитьПараметр("Спринт", Спринт); 
	Запрос.УстановитьПараметр("СписокСтатусов", СписокСтатусов); 
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Запрос.УстановитьПараметр("КомандаРазработчиков", КомандаРазработчиков);
	Запрос.УстановитьПараметр("ОтборПоКоманде", ЗначениеЗаполнено(КомандаРазработчиков));
	
	ТрудозатратыСпринта = 0;
	
	// Дополнительная информация о спринте
	ДиаграммаРешенные.Обновление = Ложь;
	ДиаграммаКоличествоОбъектовВСтатусах.Обновление = Ложь;
	
	// Построим диаграмму
	ТочкаДиаграммы = ДиаграммаКоличествоОбъектовВСтатусах.УстановитьТочку("1");
	ТочкаДиаграммы.Текст = "-";
	
	ТочкаДиаграммыВнутренняя = ДиаграммаРешенные.УстановитьТочку("1");
	ТочкаДиаграммыВнутренняя.Текст = "-";
	
	ТочкаДиаграммыНаружная = ДиаграммаРешенные.УстановитьТочку("2");
	ТочкаДиаграммыНаружная.Текст = "-";
		
	ВыборкаГруппировок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	Пока ВыборкаГруппировок.Следующий() Цикл
		ВыборкаСтатусы = ВыборкаГруппировок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если ВыборкаГруппировок.Решенные Тогда
			ГрадиентЦветов = ПолучитьГрадиент(Новый Цвет(45, 135, 204), Новый Цвет(108, 163, 204), ВыборкаСтатусы.Количество() + 1);
			
			СерияРешенные = ДиаграммаРешенные.УстановитьСерию("Решенные");
			СерияРешенные.Текст = "Решенные";
			СерияРешенные.Цвет = ГрадиентЦветов[0]; 
			ДиаграммаРешенные.УстановитьЗначение(ТочкаДиаграммыВнутренняя, СерияРешенные, ВыборкаГруппировок.КоличествоЗадач);
		Иначе
			ГрадиентЦветов = ПолучитьГрадиент(Новый Цвет(205, 92, 92), Новый Цвет(255, 228, 225), ВыборкаСтатусы.Количество() + 1);
			
			СерияРешенные = ДиаграммаРешенные.УстановитьСерию("Остальные");
			СерияРешенные.Текст = "Остальные";	
			СерияРешенные.Цвет = ГрадиентЦветов[0]; 
			ДиаграммаРешенные.УстановитьЗначение(ТочкаДиаграммыВнутренняя, СерияРешенные, ВыборкаГруппировок.КоличествоЗадач);
		КонецЕсли;
		
		ТрудозатратыСпринта = ТрудозатратыСпринта + ВыборкаГруппировок.ОценкаТрудозатрат;
		
		ИндексСтатуса = 1;
		
		Пока ВыборкаСтатусы.Следующий() Цикл
			СтрокаТаблицы = ТаблицаКДиаграмме.Добавить();
			СтрокаТаблицы.Статус = ВыборкаСтатусы.Статус;
			СтрокаТаблицы.ИндексКартинки = ВыборкаСтатусы.ИндексКартинки;
			СтрокаТаблицы.ОценкаТрудозатрат = ВыборкаСтатусы.ОценкаТрудозатрат;
			СтрокаТаблицы.Количество = ВыборкаСтатусы.КоличествоЗадач;
			
			ЦветСтатуса = ГрадиентЦветов[ИндексСтатуса];
			
			Серия = ДиаграммаКоличествоОбъектовВСтатусах.УстановитьСерию(ВыборкаСтатусы.Статус);
			Серия.Текст = ВыборкаСтатусы.Статус;
			ДиаграммаКоличествоОбъектовВСтатусах.УстановитьЗначение(ТочкаДиаграммы, Серия, ВыборкаСтатусы.КоличествоЗадач);
			
			Серия = ДиаграммаРешенные.УстановитьСерию(ВыборкаСтатусы.Статус);
			Серия.Текст = ВыборкаСтатусы.Статус;
			Серия.Цвет = ЦветСтатуса;
			ДиаграммаРешенные.УстановитьЗначение(ТочкаДиаграммыНаружная, Серия, ВыборкаСтатусы.КоличествоЗадач);
			
			ИндексСтатуса = ИндексСтатуса + 1;
		КонецЦикла;
	КонецЦикла;
	
	ДиаграммаРешенные.Обновление = Истина;
	ДиаграммаКоличествоОбъектовВСтатусах.Обновление = Истина;

КонецПроцедуры

// Возвращает массив цветов, представляющих собой градиент - переход от начального цвета к конечному. 
// Возвращаемый массив начинается с начального и заканчивается конечным цветом.
// Автор: https://infostart.ru/public/978835/
//
//Параметры:
//		НачальныйЦвет - Цвет - начальный цвет градиента
//		КонечныйЦвет - Цвет - конечный цвет градиента
//		КоличествоГрадаций - Число - общее число цветов в возвращаемом массиве (включает начальный и конечный цвета), должно быть больше 2. По умолчанию 5.
//
//Возвращаемое значение:
//		Массив,Неопределено - массив с элементами типа Цвет или Неопределено (если градаций меньше 3 либо начальный и конечный цвета
//								заданы не абсолютными цветами
//
Функция ПолучитьГрадиент(Знач НачальныйЦвет, Знач КонечныйЦвет, Знач КоличествоГрадаций = 5) Экспорт
	
	МассивЦветов = Новый Массив;
	МассивЦветов.Добавить(НачальныйЦвет);
	
	Если КоличествоГрадаций > 2 Тогда
		ШагКрасного = (КонечныйЦвет.Красный - НачальныйЦвет.Красный) / КоличествоГрадаций;
		ШагЗеленого = (КонечныйЦвет.Зеленый - НачальныйЦвет.Зеленый) / КоличествоГрадаций;
		ШагСинего   = (КонечныйЦвет.Синий - НачальныйЦвет.Синий) / КоличествоГрадаций;
		
		ТекКрасный  = НачальныйЦвет.Красный;
		ТекЗеленый  = НачальныйЦвет.Зеленый;
		ТекСиний    = НачальныйЦвет.Синий;
		
		Для Сч = 2 По КоличествоГрадаций - 1 Цикл
			ТекКрасный  = ТекКрасный + ШагКрасного;
			ТекЗеленый  = ТекЗеленый + ШагЗеленого;
			ТекСиний    = ТекСиний + ШагСинего;
			
			МассивЦветов.Добавить(Новый Цвет(Окр(ТекКрасный,0), Окр(ТекЗеленый,0), Окр(ТекСиний,0)));
		КонецЦикла;
	КонецЕсли;
	
	МассивЦветов.Добавить(КонечныйЦвет);
	
	Возврат МассивЦветов;
	
КонецФункции

#КонецОбласти
