///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаСервере
Перем ТабличныйДокумент;

&НаСервере
Перем Секция;

// Хранит признак сформированности запроса для функции ПолучитьПодчиненные(),
&НаСервере
Перем ЗапросПодчиненныеСформирован;

// Хранит объект запрос и его параметры, что бы не инициализировать его каждый раз в цикле
&НаСервере
Перем ЗапросНаПодчиненные;

// Хранит текст запроса, что бы не собирать его каждый раз в цикле
&НаСервере
Перем ТекстЗапросаПодчиненные;

&НаСервере
Перем СинийЦвет;

&НаСервере
Перем РозовыйЦвет;

&НаСервере
Перем ЦветПервойГруппировки;

&НаСервере
Перем ЦветВторойГруппировки;

&НаСервере
Перем Шрифт;

&НаСервере
Перем УвеличенныйШрифт;

&НаСервере
Перем Макет;

// Хранит отбор по видам заявок, используется в рекурсии
&НаСервере
Перем ВыбранныеНазначения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Принудительно установим вид отбора
	ВидОтбора = 1;
	
	// Заполним список статусов по умолчанию всем статусами
	ЗаполнитьСписокСтатусов();
	
	// Заполним отбор по виду заявок по умолчанию
	ЗаполнитьНазначения();
	
	// Установка периода отбора текущим годом
	УстановитьПериодОтбора();
	
	//Заполнение отбора колонок по умолчанию
	ЗаполнитьСписокКолонок();
	
	//Интеграция подсистемы "Приоритет проектов и внутренних заданий"
	Элементы.ДеревоОбъектовПолнотаДанных.Видимость = Элементы.ДеревоОбъектовПолнотаДанных.Видимость 
		И ИнтеграцияДополнительныхПодсистем.ПодсистемаСуществует("ПриоритетПроектовИВнутреннихЗаданий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьФормуОтбораПоКолонкам(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОтмеченныеЗначения", ОтборСписокКолонок); 
	ПараметрыОткрытия.Вставить("ВариантЗаполнения", 1);
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Истина);
	ПараметрыОткрытия.Вставить("ЗаголовокОкна", "Выбор колонок");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрименитьОтборПоКолонкам", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ПодборЗначений", ПараметрыОткрытия, ЭтотОбъект,,,, 
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОтчет(Команда)
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для формирования отчета необходимо заполнить период.");
		Возврат;
	КонецЕсли;
	
	Если ВидОтбора = 1 И НЕ ЗначениеЗаполнено(СсылкаНаПроект) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для формирования отчета необходимо заполнить одно из полей отбора.'"));
		Возврат;
	ИначеЕсли ВидОтбора = 2 И НЕ ЗначениеЗаполнено(СсылкаНаФилиал) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для формирования отчета необходимо заполнить одно из полей отбора.'"));
		Возврат;
	ИначеЕсли ВидОтбора = 3 И НЕ ЗначениеЗаполнено(СсылкаНаСотрудника) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для формирования отчета необходимо заполнить одно из полей отбора.'"));
		Возврат;
	КонецЕсли; 	
		
	Элементы.ЭкспортВExcel.Доступность = Истина;	
	ПолучитьОтчетНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьНастройки(Команда)
	
	ВидимостьНастроек = Элементы.ГруппаНастройки.Видимость;

	Элементы.ГруппаНастройки.Видимость = НЕ ВидимостьНастроек;
	
	Элементы.СвернутьНастройки.Заголовок = ?(НЕ ВидимостьНастроек, "Свернуть настройки", "Показать настройки");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура ВидОтбораПриИзменении(Элемент)
	
	Если ВидОтбора = 1 Тогда 
		Элементы.СсылкаНаПроект.Видимость = Истина;
		Элементы.СсылкаНаФилиал.Видимость = Ложь;
		Элементы.СсылкаНаСотрудника.Видимость = Ложь;
	ИначеЕсли ВидОтбора  = 2 Тогда	
		Элементы.СсылкаНаФилиал.Видимость = Истина;
		Элементы.СсылкаНаПроект.Видимость = Ложь;
		Элементы.СсылкаНаСотрудника.Видимость = Ложь;
	ИначеЕсли ВидОтбора = 3 Тогда 
		Элементы.СсылкаНаФилиал.Видимость = Ложь;
		Элементы.СсылкаНаПроект.Видимость = Ложь;
		Элементы.СсылкаНаСотрудника.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ПолноеИмяМетаданных = "Группа" Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ДеревоОбъектовПолнотаДанных" Тогда
		ОткрытьПоказателиПриоритета(ТекущиеДанные.Ссылка);
	Иначе
		ОткрытьОбъектПодКурсором();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначенияНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОтмеченныеЗначения", ОтборНазначения); 
	ПараметрыОткрытия.Вставить("ВариантЗаполнения", 1);
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Истина);
	ПараметрыОткрытия.Вставить("ЗаголовокОкна", "Выбор назначения");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрименитьОтборПоНазначению", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ПодборЗначений", ПараметрыОткрытия, ЭтотОбъект,,,, 
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура НазначенияОчистка(Элемент, СтандартнаяОбработка)
	
	Для Каждого Назначение Из ОтборНазначения Цикл
		Назначение.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСписокСтатусовНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОтмеченныеЗначения", ОтборСписокСтатусов); 
	ПараметрыОткрытия.Вставить("ВариантЗаполнения", 1);
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Истина);
	ПараметрыОткрытия.Вставить("ЗаголовокОкна", "Выбор статусов");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрименитьОтборПоСтатусам", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ПодборЗначений", ПараметрыОткрытия, ЭтотОбъект,,,, 
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусыОчистка(Элемент, СтандартнаяОбработка)
	
	Для Каждого Статус Из ОтборСписокСтатусов Цикл
		Статус.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТегиНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ТегиПослеВыбора", ЭтотОбъект);

	ПараметрыОткрытия = Новый Структура("СписокТегов", СписокТегов);
	ОткрытьФорму("Справочник.Теги.Форма.ДобавлениеТегов", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,
		, , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТегиОчистка(Элемент, СтандартнаяОбработка)
	
	СписокТегов.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

&НаСервере
Процедура ЗаписатьПодчиненныеЭлементы(Знач Объект, СтрокаДерева, МассивыОбъектов, УровеньВложенности = 0)
	
	ТипЗнчОбъект  = ТипЗнч(Объект);
	
	// Запись объекта в дерево
	НоваяСтрока = СтрокаДерева.Строки.Добавить();	
	НоваяСтрока.УровеньВложенности = НоваяСтрока.Уровень();
	
	Если ТипЗнчОбъект <> Тип("ДокументСсылка.ЗаявкаНаРазработку")  Тогда
		НоваяСтрока.Ссылка = Объект;
	КонецЕсли;
	
	// Запись данных в структуру массивов	
	Если ТипЗнчОбъект = Тип("ДокументСсылка.ВнутреннееЗадание") Тогда
		МассивыОбъектов.ВнутренниеЗадания.Добавить(Объект);
	ИначеЕсли ТипЗнчОбъект = Тип("ДокументСсылка.ЗаявкаНаРазработку") И НЕ Объект.Черновик Тогда
		НоваяСтрока.Ссылка = Объект;
		МассивыОбъектов.ЗаявкиНаРазработку.Добавить(Объект);
	ИначеЕсли ТипЗнчОбъект = Тип("СправочникСсылка.Проекты") Тогда
		МассивыОбъектов.Проекты.Добавить(Объект);
	КонецЕсли;
	
	// Получение подчиненных
	МассивПодчиненных = ПолучитьПодчиненные(Объект);
	
	// Перебор подчиненных и запись объектов, кроме задач
	Для Каждого Подчиненный Из МассивПодчиненных Цикл		
		Если ТипЗнч(Подчиненный) = Тип("ДокументСсылка.Задача") Тогда
			Строка = МассивыОбъектов.Задачи.Добавить();
			Строка.Объект = Подчиненный;
			Строка.ОбъектОснование = Объект;
			ЗаписатьПодчиненныеЗадачи(Подчиненный, МассивыОбъектов);
			Продолжить;
		КонецЕсли;
		
		ЗаписатьПодчиненныеЭлементы(Подчиненный, НоваяСтрока, МассивыОбъектов, УровеньВложенности);				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНазначения()

	ОтборНазначения.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	НазначенияЗадач.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(НазначенияЗадач.Ссылка) КАК Представление
	|ИЗ
	|	Справочник.НазначенияЗадач КАК НазначенияЗадач
	|ГДЕ
	|	НазначенияЗадач.ПометкаУдаления = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОтборНазначения.Добавить(Выборка.Ссылка, Выборка.Представление, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСтатусов()

	ОтборСписокСтатусов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	СтатусыОбъектов.Ссылка КАК Ссылка,
	|	СтатусыОбъектов.Наименование КАК Представление
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыОбъектов.Порядок";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОтборСписокСтатусов.Добавить(Выборка.Ссылка, Выборка.Представление, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокКолонок()
	
	Дерево = РеквизитФормыВЗначение("ДеревоОбъектов", Тип("ДеревоЗначений"));
	
	Для Каждого Колонка ИЗ Элементы.ДеревоОбъектов.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Колонка) = Тип("ГруппаФормы") Тогда
			Для Каждого ПодчиненнаяКолонка ИЗ Колонка.ПодчиненныеЭлементы Цикл
				ОтборСписокКолонок.Добавить(ПодчиненнаяКолонка.Имя, ПодчиненнаяКолонка.Заголовок, Истина);
			КонецЦикла;	
		Иначе
			Если Колонка.Имя = "ДеревоОбъектовПолнотаДанных" 
				И НЕ ИнтеграцияДополнительныхПодсистем.ПодсистемаСуществует("ПриоритетПроектовИВнутреннихЗаданий") Тогда
				Продолжить;
			КонецЕсли;
			ОтборСписокКолонок.Добавить(Колонка.Имя, Колонка.Заголовок, Истина);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСтруктуруПодчиненности(Строка, ТаблицаДанных, ТаблицаТрудозатрат)
	
	КоличествоРешенных = 0;	
	
	Если ТипЗнч(Строка) = Тип("СтрокаДереваЗначений") Тогда
		ТрудозатратыПоСтроке = Строка.Трудозатраты;
	Иначе
		ТрудозатратыПоСтроке = 0;
	КонецЕсли;	
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Для Каждого ПодчиненнаяСтрока Из Строка.Строки Цикл		
		НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Новый Структура("Ссылка", ПодчиненнаяСтрока.Ссылка));
		КоличествоСтрок = НайденныеСтроки.Количество();
		
		Если КоличествоСтрок > 0 Тогда
			Если КоличествоСтрок = 1 Тогда
				ЗаполнитьЗначенияСвойств(ПодчиненнаяСтрока, НайденныеСтроки[0]);	
			Иначе	
				Приоритеты = Новый Массив;
				Филиалы = Новый Массив;
				
				ПредыдущаяСтрокаПриоритета = 0; 
				ПредыдущаяСтрокаФилиала = Неопределено;
				
				Для Каждого СтрокаДанных Из НайденныеСтроки Цикл 
					
					Если НЕ СтрокаДанных.Филиал = ПредыдущаяСтрокаФилиала И СтрокаДанных.Филиал <> NULL Тогда
						Филиалы.Добавить(СтрокаДанных.Филиал);
					КонецЕсли;
					
					Если НЕ СтрокаДанных.Приоритет = ПредыдущаяСтрокаПриоритета И СтрокаДанных.Приоритет <> NULL Тогда 
						Приоритеты.Добавить(СтрокаДанных.Приоритет);
					КонецЕсли;
					
					ПредыдущаяСтрокаПриоритета = СтрокаДанных.Приоритет;
					ПредыдущаяСтрокаФилиала = СтрокаДанных.Филиал;
					
				КонецЦикла;	
				
				ЗаполнитьЗначенияСвойств(ПодчиненнаяСтрока, НайденныеСтроки[0], , "Приоритет");
				
				ПодчиненнаяСтрока.Приоритет = СтрСоединить(Приоритеты, ", ");	
				ПодчиненнаяСтрока.Филиал = СтрСоединить(Филиалы, ", ");
				
			КонецЕсли;
			
			КоличествоРешенных = КоличествоРешенных + НайденныеСтроки[0].Решен;		
		КонецЕсли;	

		
		// Расчет длительности
		Если ПодчиненнаяСтрока.ПолноеИмяМетаданных = "Документ.ЗаявкаНаРазработку" Тогда
			Если ЗначениеЗаполнено(ПодчиненнаяСтрока.ДатаНачала) Тогда
				Если ЗначениеЗаполнено(ПодчиненнаяСтрока.ДатаОкончания) Тогда
					ДатаОкончания = ПодчиненнаяСтрока.ДатаОкончания;
				Иначе
					ДатаОкончания = ТекущаяДата;
				КонецЕсли;
				ПодчиненнаяСтрока.Длительность = Цел((ДатаОкончания - ПодчиненнаяСтрока.ДатаНачала) / 86400);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ПодчиненнаяСтрока.ФактическоеНачало) Тогда
				Если ЗначениеЗаполнено(ПодчиненнаяСтрока.ФактическоеОкончание) Тогда
					ДатаОкончания = ПодчиненнаяСтрока.ФактическоеОкончание;
				Иначе
					ДатаОкончания = ТекущаяДата;
				КонецЕсли;
				ПодчиненнаяСтрока.Длительность = Цел((ДатаОкончания - ПодчиненнаяСтрока.ФактическоеНачало) / 86400);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПодчиненнаяСтрока.ПлановоеНачало) Тогда
				Если ЗначениеЗаполнено(ПодчиненнаяСтрока.ПлановоеОкончание) Тогда
					ДатаОкончания = ПодчиненнаяСтрока.ПлановоеОкончание;
				Иначе
					ДатаОкончания = ТекущаяДата;
				КонецЕсли;
				ПодчиненнаяСтрока.ДлительностьПлан = Цел((ДатаОкончания - ПодчиненнаяСтрока.ПлановоеНачало) / 86400);
			КонецЕсли;		
		КонецЕсли;
		
		// Расчет трудозатрат
		Трудозатраты = 0;
		РассчитатьТрудозатраты(ПодчиненнаяСтрока.Ссылка, ТаблицаТрудозатрат, Трудозатраты);
		ПодчиненнаяСтрока.Трудозатраты = Трудозатраты;
		ЗаполнитьСтруктуруПодчиненности(ПодчиненнаяСтрока, ТаблицаДанных, ТаблицаТрудозатрат);
		ТрудозатратыПоСтроке = ТрудозатратыПоСтроке + ПодчиненнаяСтрока.Трудозатраты;	
	КонецЦикла;
	
	Если ТипЗнч(Строка) = Тип("СтрокаДереваЗначений") Тогда
		Строка.Трудозатраты = ТрудозатратыПоСтроке;
		Если КоличествоРешенных > 0 И Строка.ПроцентВыполнения = 0 Тогда
			ПроцентВыполнения = (КоличествоРешенных / Строка.Строки.Количество()) * 100; 
			Строка.ПроцентВыполнения = СтрШаблон("%1 %%", Окр(ПроцентВыполнения, 2));
		Иначе
			Если ЗначениеЗаполнено(Строка.ПроцентВыполнения) И Строка.ПроцентВыполнения <> "0" Тогда
				Строка.ПроцентВыполнения = СтрШаблон("%1 %%", Окр(Строка.ПроцентВыполнения, 2));
			Иначе
				Строка.ПроцентВыполнения = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПодчиненныеЗадачи(Знач Объект, Массивы)
	
	Подчиненные = РегистрыСведений.СтруктураПодчиненности.ПолучитьПодчиненные(Объект);
	Для Каждого Подчиненный Из Подчиненные Цикл
		НоваяСтрока = Массивы.Задачи.Добавить();
		НоваяСтрока.Объект = Подчиненный;
		НоваяСтрока.ОбъектОснование = Объект;
		ЗаписатьПодчиненныеЗадачи(Подчиненный, Массивы)
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбъектПодКурсором()
	
	ТекущиеДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ПолноеИмяМетаданных = "Группа" Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(ТекущиеДанные.ПолноеИмяМетаданных + ".ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.Ссылка), , , , , , 
		РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПоказателиПриоритета(Знач Объект)
	
	Если НЕ ИнтеграцияДополнительныхПодсистемКлиент.ПодсистемаСуществует("ПриоритетПроектовИВнутреннихЗаданий") Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("СправочникСсылка.Проекты") ИЛИ ТипОбъекта = Тип("ДокументСсылка.ВнутреннееЗадание") Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Объект", Объект);
		
		Форма = "РегистрСведений.ЗначенияПоказателейПриоритетаПроектовИВнутреннихЗаданий.Форма.ПоказателиПриоритизации";
		
		ОткрытьФорму(Форма, ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодОтбора()
	
	ТекущаяДата = ТекущаяДата();
	Период.ДатаНачала = НачалоГода(ТекущаяДата);
	Период.ДатаОкончания = КонецГода(ТекущаяДата);
	
КонецПроцедуры 	

&НаСервереБезКонтекста
Функция ПолучитьВыбранныеСтатусы(Знач СписокСтатусов)
	
	// Формируем массив выбранных статусов.
	ВыбранныеСтатусы = Новый Массив;
	
	Для Каждого ЭлементСписка Из СписокСтатусов Цикл
		Если ЭлементСписка.Пометка Тогда
			ВыбранныеСтатусы.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВыбранныеСтатусы;
	
КонецФункции

&НаСервере
Процедура ПолучитьОтчетНаСервере()
	
	МассивПроектов = Новый Массив;
		
	Если ВидОтбора = 1 Тогда
		МассивПроектов = СсылкаНаПроект.ВыгрузитьЗначения();
		СформироватьСтруктуруПодчиненности(МассивПроектов);
	Иначе
		СформироватьОтчетДляФилиалаИлиСотрудников();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетДляФилиалаИлиСотрудников()
	
	ДеревоОбъектов.ПолучитьЭлементы().Очистить();
	
	// Для Проектов и Внутренних заданий принадлежащих Филиалам установленным в фильтре получим иерархию подчиненных объектов
	ТаблицаВсехОбъектов = ПолучитьТаблицуИерархииОбъектов();
	
	Если ТаблицаВсехОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Получим список задач и рассчитаем трудозатраты по заявкам для фильтра (по датам заявки фильтруются только, если по ним нет трудозатрат)
	ТаблицаЗадач = ПолучитьСписокЗадач(ТаблицаВсехОбъектов);
	ТаблицаТрудозатрат = РассчитатьТрудозатратыНаОснованииЗадач(ТаблицаЗадач);
	
	// Отфильтруем объекты в соответствии с установленными фильтрами
	ТаблицаВсехОбъектов = ОтфильтроватьТаблицуВсехОбъектов(ТаблицаВсехОбъектов, ТаблицаТрудозатрат);
	
	// Получим новый список задач и рассчитаем трудозатраты по заявкам после фильтра
	ТаблицаЗадач = ПолучитьСписокЗадач(ТаблицаВсехОбъектов);
	ТаблицаТрудозатрат = РассчитатьТрудозатратыНаОснованииЗадач(ТаблицаЗадач);
	
	// Уберем "Родителей" которые не подошли под фильтр и получим конечные данные 
	ИтоговаяТаблица = ЗаполнитьДаннымиТаблицуВсехОбъектов(ТаблицаВсехОбъектов, ТаблицаТрудозатрат);
	
	Если ИтоговаяТаблица <> Неопределено Тогда
		СформироватьИВывестиДерево(ИтоговаяТаблица);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьИВывестиДерево(ИтоговаяТаблицаОтчета) 
	
	ИтоговаяТаблицаОтчета.Индексы.Добавить("Родитель");	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	// Получим корневые (верхние) строки в иерархии
	СтруктураОтбора = Новый Структура("Родитель", Справочники.Проекты.ПустаяСсылка());
	МассивСтрок = ИтоговаяТаблицаОтчета.НайтиСтроки(СтруктураОтбора);

	// Создадим корневые (верхние) строки дерева
	КоллекцияСтрок = ДеревоОбъектов.ПолучитьЭлементы();
	Уровень = 0;
	
	Если МассивСтрок <> Неопределено И МассивСтрок.Количество() <> 0 Тогда
		Для Каждого Строка Из МассивСтрок Цикл
			СтрокаДерева = КоллекцияСтрок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева, Строка);
			ЗаполнитьДлительность(СтрокаДерева, ТекущаяДата);
			СтрокаДерева.УровеньВложенности = Уровень;
			Если Строка.ПроцентВыполнения = 0 Тогда
				СтрокаДерева.ПроцентВыполнения = "";	
			Иначе 
				СтрокаДерева.ПроцентВыполнения = СтрШаблон("%1 %%", Строка.ПроцентВыполнения);
			КонецЕсли;
			СформироватьВложенныеСтрокиДерева(ИтоговаяТаблицаОтчета, СтрокаДерева, Строка, ТекущаяДата, Уровень + 1); 
		КонецЦикла;
	КонецЕсли;
		
КонецФункции

&НаСервере
Процедура СформироватьВложенныеСтрокиДерева(Знач ИтоговаяТаблица, СтрокаДерева, ТекущаяСтрокаТаблицы, ТекущаяДата, Уровень)
	
	СтруктураОтбора = Новый Структура("Родитель", ТекущаяСтрокаТаблицы.Ссылка);	
	МассивСтрок = ИтоговаяТаблица.НайтиСтроки(СтруктураОтбора);

	// Создадим подчиненные строки дерева	
	КоллекцияСтрок = СтрокаДерева.ПолучитьЭлементы();
	
	Если МассивСтрок <> Неопределено И МассивСтрок.Количество() <> 0 Тогда
		Для Каждого Строка Из МассивСтрок Цикл

			СтрокаДерева = КоллекцияСтрок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева, Строка);

			ЗаполнитьДлительность(СтрокаДерева, ТекущаяДата);
			СтрокаДерева.УровеньВложенности = Уровень;
			Если Строка.ПроцентВыполнения = 0 Тогда
				СтрокаДерева.ПроцентВыполнения = "";	
			Иначе 
				СтрокаДерева.ПроцентВыполнения = СтрШаблон("%1 %%", Строка.ПроцентВыполнения);
			КонецЕсли;
			СформироватьВложенныеСтрокиДерева(ИтоговаяТаблица, СтрокаДерева, Строка, ТекущаяДата, Уровень + 1);  
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьТаблицуИерархииОбъектов()
	
	// Создадим таблицу, для хранения Иерархии - взаимосвязь Объект-Родитель	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ВнутреннееЗадание"));
	МассивТипов.Добавить(Тип("ДокументСсылка.Задача"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаявкаНаРазработку"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Проекты"));
	
	ТаблицаВсехОбъектов = Новый ТаблицаЗначений;
	ТаблицаВсехОбъектов.Колонки.Добавить("Объект", Новый ОписаниеТипов(МассивТипов));
	ТаблицаВсехОбъектов.Колонки.Добавить("Родитель", Новый ОписаниеТипов(МассивТипов));
	
	// Получим список Проектов и Внутренних заданий принадлежащих Филиалам установленным в фильтре
	Запрос = Новый Запрос;

	Если ВидОтбора = 2 Тогда  
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛичныеДелаСрезПоследних.Сотрудник КАК Пользователь
		|ПОМЕСТИТЬ ПользователиФилиала
		|ИЗ
		|	РегистрСведений.ЛичныеДела.СрезПоследних(&ТекущаяДата, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаСрезПоследних
		|ГДЕ
		|	ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы) В (&СписокФилиалов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Проекты.Ссылка КАК Объект,
		|	Проекты.ОбъектОснование КАК Родитель
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПользователиФилиала КАК ПользователиФилиала
		|		ПО Проекты.Руководитель = ПользователиФилиала.Пользователь
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВнутреннееЗадание.Ссылка,
		|	ВЫБОР
		|		КОГДА ВнутреннееЗадание.ОбъектОснование = ЗНАЧЕНИЕ(Документ.ВнутреннееЗадание.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
		|		КОГДА ВнутреннееЗадание.ОбъектОснование = НЕОПРЕДЕЛЕНО
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
		|		ИНАЧЕ ВнутреннееЗадание.ОбъектОснование
		|	КОНЕЦ
		|ИЗ
		|	Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПользователиФилиала КАК ПользователиФилиала
		|		ПО ВнутреннееЗадание.Назначена = ПользователиФилиала.Пользователь";
		
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("СписокФилиалов", СсылкаНаФилиал.ВыгрузитьЗначения());	
		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Проекты.Ссылка КАК Объект,
		|	Проекты.ОбъектОснование КАК Родитель
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.Руководитель В(&СписокПользователей)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВнутреннееЗадание.Ссылка,
		|	ВЫБОР
		|		КОГДА ВнутреннееЗадание.ОбъектОснование = ЗНАЧЕНИЕ(Документ.ВнутреннееЗадание.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
		|		КОГДА ВнутреннееЗадание.ОбъектОснование = НЕОПРЕДЕЛЕНО
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
		|		ИНАЧЕ ВнутреннееЗадание.ОбъектОснование
		|	КОНЕЦ
		|ИЗ
		|	Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
		|ГДЕ
		|	ВнутреннееЗадание.Назначена В(&СписокПользователей)";
		
		Запрос.УстановитьПараметр("СписокПользователей", СсылкаНаСотрудника.ВыгрузитьЗначения());
		
	КонецЕсли;
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаОбъектов = РезультатЗапроса.Выгрузить();
		
		Для Каждого Строка Из ТаблицаОбъектов Цикл
			НоваяСтрока = ТаблицаВсехОбъектов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		
		// Получим все подчиненные, в которых наши Объекты из Запроса являются "Родителями"
		ДобавитьВТаблицуПодчиненныеОбъекты(ТаблицаОбъектов, ТаблицаВсехОбъектов);
		
		// На данном этапе ТаблицаВсехОбъектов содержит повторы строк, удалим их, также уберем Задачи из таблицы, они не выводятся в отчет
		ТаблицаВсехОбъектов.Свернуть("Объект, Родитель");
	КонецЕсли;
	
	Возврат ТаблицаВсехОбъектов;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокЗадач(ТаблицаВсехОбъектов) 
	
	ТаблицаЗадач = Новый ТаблицаЗначений;
	ТаблицаЗадач.Колонки.Добавить("Объект", Новый ОписаниеТипов("ДокументСсылка.Задача"));

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаВсехОбъектов.Объект КАК Объект,
	|	ТаблицаВсехОбъектов.Родитель КАК Родитель
	|ПОМЕСТИТЬ ТаблицаВсехОбъектов
	|ИЗ
	|	&ТаблицаВсехОбъектов КАК ТаблицаВсехОбъектов
	|ГДЕ
	|	ТаблицаВсехОбъектов.Объект ССЫЛКА Документ.ЗаявкаНаРазработку
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаВсехОбъектов.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СвязьОбъектовСЗаявкамиНаРазработку.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку КАК СвязьОбъектовСЗаявкамиНаРазработку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВсехОбъектов КАК ТаблицаВсехОбъектов
	|		ПО СвязьОбъектовСЗаявкамиНаРазработку.Заявка_Новая = ТаблицаВсехОбъектов.Объект
	|ГДЕ
	|	СвязьОбъектовСЗаявкамиНаРазработку.Объект ССЫЛКА Документ.Задача";
	
	Запрос.УстановитьПараметр("ТаблицаВсехОбъектов", ТаблицаВсехОбъектов);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаЗадач = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Возврат ТаблицаЗадач;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДлительность(Строка, ТекущаяДата) 
	
	Если Строка.ПолноеИмяМетаданных = "Документ.ЗаявкаНаРазработку" Тогда
		Если ЗначениеЗаполнено(Строка.ДатаНачала) Тогда
			Если ЗначениеЗаполнено(Строка.ДатаОкончания) Тогда
				ДатаОкончания = Строка.ДатаОкончания;
			Иначе
				ДатаОкончания = ТекущаяДата;
			КонецЕсли;
			Строка.Длительность = Цел((ДатаОкончания - Строка.ДатаНачала) / 86400);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Строка.ФактическоеНачало) Тогда
			Если ЗначениеЗаполнено(Строка.ФактическоеОкончание) Тогда
				ДатаОкончания = Строка.ФактическоеОкончание;
			Иначе
				ДатаОкончания = ТекущаяДата;
			КонецЕсли;
			Строка.Длительность = Цел((ДатаОкончания - Строка.ФактическоеНачало) / 86400);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ПлановоеНачало) Тогда
			Если ЗначениеЗаполнено(Строка.ПлановоеОкончание) Тогда
				ДатаОкончания = Строка.ПлановоеОкончание;
			Иначе
				ДатаОкончания = ТекущаяДата;
			КонецЕсли;
			Строка.ДлительностьПлан = Цел((ДатаОкончания - Строка.ПлановоеНачало) / 86400);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДаннымиТаблицуВсехОбъектов(ТаблицаВсехОбъектов, Знач ТаблицаТрудозатрат) 
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ВнутреннееЗадание"));
	МассивТипов.Добавить(Тип("ДокументСсылка.Задача"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаявкаНаРазработку"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Проекты"));
	
	ИтоговаяТаблица = Новый ТаблицаЗначений;
	ИтоговаяТаблица.Колонки.Добавить("Объект", Новый ОписаниеТипов(МассивТипов));
	ИтоговаяТаблица.Колонки.Добавить("Родитель", Новый ОписаниеТипов(МассивТипов));
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ТаблицаВсехОбъектов.Объект КАК Объект,
	|	ТаблицаВсехОбъектов.Родитель КАК Родитель
	|ПОМЕСТИТЬ ТаблицаВсехОбъектов
	|ИЗ
	|	&ТаблицаВсехОбъектов КАК ТаблицаВсехОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТрудозатрат.Объект КАК Объект,
	|	ТаблицаТрудозатрат.Трудозатраты КАК Трудозатраты,
	|	ТаблицаТрудозатрат.КоличествоРешенных КАК КоличествоРешенных,
	|	ТаблицаТрудозатрат.КоличествоЗадач КАК КоличествоЗадач,
	|	ТаблицаТрудозатрат.Родитель КАК Родитель
	|ПОМЕСТИТЬ ТаблицаТрудозатрат
	|ИЗ
	|	&ТаблицаТрудозатрат КАК ТаблицаТрудозатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВсехОбъектов.Объект КАК Объект,
	|	ВЫБОР
	|		КОГДА ТаблицаВсехОбъектов.Объект ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаВсехОбъектов.Родитель
	|	КОНЕЦ КАК Родитель
	|ПОМЕСТИТЬ ВсеОбъектыБезНенужныхРодителей
	|ИЗ
	|	ТаблицаВсехОбъектов КАК ТаблицаВсехОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВсехОбъектов КАК ТаблицаВсехОбъектов1
	|		ПО ТаблицаВсехОбъектов.Родитель = ТаблицаВсехОбъектов1.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеОбъектыБезНенужныхРодителей.Объект КАК Объект,
	|	ВсеОбъектыБезНенужныхРодителей.Родитель КАК Родитель
	|ПОМЕСТИТЬ ОбъектыБезЗаявокБезРодителей
	|ИЗ
	|	ВсеОбъектыБезНенужныхРодителей КАК ВсеОбъектыБезНенужныхРодителей
	|ГДЕ
	|	НЕ ВсеОбъектыБезНенужныхРодителей.Объект ССЫЛКА Документ.ЗаявкаНаРазработку
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВсеОбъектыБезНенужныхРодителей.Объект,
	|	ВсеОбъектыБезНенужныхРодителей.Родитель
	|ИЗ
	|	ВсеОбъектыБезНенужныхРодителей КАК ВсеОбъектыБезНенужныхРодителей
	|ГДЕ
	|	ВсеОбъектыБезНенужныхРодителей.Объект ССЫЛКА Документ.ЗаявкаНаРазработку
	|	И ВсеОбъектыБезНенужныхРодителей.Родитель <> ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыБезЗаявокБезРодителей.Объект КАК Объект,
	|	ОбъектыБезЗаявокБезРодителей.Родитель КАК Родитель,
	|	ЕСТЬNULL(ТаблицаТрудозатрат.Трудозатраты, 0) КАК Трудозатраты,
	|	ЕСТЬNULL(ТаблицаТрудозатрат.КоличествоРешенных, 0) КАК КоличествоРешенных,
	|	ЕСТЬNULL(ТаблицаТрудозатрат.КоличествоЗадач, 0) КАК КоличествоЗадач
	|ПОМЕСТИТЬ ТаблицаИерархииСЗатратами
	|ИЗ
	|	ОбъектыБезЗаявокБезРодителей КАК ОбъектыБезЗаявокБезРодителей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТрудозатрат КАК ТаблицаТрудозатрат
	|		ПО ОбъектыБезЗаявокБезРодителей.Объект = ТаблицаТрудозатрат.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИерархииСЗатратами.Объект КАК Ссылка,
	|	ТаблицаИерархииСЗатратами.Родитель КАК Родитель,
	|	ТаблицаИерархииСЗатратами.Трудозатраты КАК Трудозатраты,
	|	ТаблицаИерархииСЗатратами.КоличествоРешенных КАК КоличествоРешенных,
	|	ТаблицаИерархииСЗатратами.КоличествоЗадач КАК КоличествоЗадач
	|ПОМЕСТИТЬ ОтобранныеЗаявки
	|ИЗ
	|	ТаблицаИерархииСЗатратами КАК ТаблицаИерархииСЗатратами
	|ГДЕ
	|	ТаблицаИерархииСЗатратами.Объект ССЫЛКА Документ.ЗаявкаНаРазработку
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияСтатусов.Заявка КАК Заявка,
	|	ИсторияСтатусов.Период КАК Период,
	|	ИсторияСтатусов.Статус КАК Статус
	|ПОМЕСТИТЬ ИсторияСтатусов
	|ИЗ
	|	ОтобранныеЗаявки КАК ОтобранныеЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияМинимальныхСтатусовЗаявок КАК ИсторияСтатусов
	|		ПО ОтобранныеЗаявки.Ссылка = ИсторияСтатусов.Заявка
	|			И (ИсторияСтатусов.Статус В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ВРаботе), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияСтатусов.Заявка КАК Заявка,
	|	МИНИМУМ(ИсторияСтатусов.Период) КАК ДатаСтатусаВРаботе,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаСтатусаРешен,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаСтатусаОтклонен
	|ПОМЕСТИТЬ ДатыСтатусовЗаявок
	|ИЗ
	|	ИсторияСтатусов КАК ИсторияСтатусов
	|ГДЕ
	|	ИсторияСтатусов.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ВРаботе)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияСтатусов.Заявка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсторияСтатусов.Заявка,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|	МИНИМУМ(ИсторияСтатусов.Период),
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|ИЗ
	|	ИсторияСтатусов КАК ИсторияСтатусов
	|ГДЕ
	|	ИсторияСтатусов.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияСтатусов.Заявка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсторияСтатусов.Заявка,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|	МИНИМУМ(ИсторияСтатусов.Период)
	|ИЗ
	|	ИсторияСтатусов КАК ИсторияСтатусов
	|ГДЕ
	|	ИсторияСтатусов.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияСтатусов.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыСтатусовЗаявок.Заявка КАК Заявка,
	|	МАКСИМУМ(ДатыСтатусовЗаявок.ДатаСтатусаВРаботе) КАК ВРаботе,
	|	МАКСИМУМ(ДатыСтатусовЗаявок.ДатаСтатусаРешен) КАК Решен,
	|	МАКСИМУМ(ДатыСтатусовЗаявок.ДатаСтатусаОтклонен) КАК Отклонен
	|ПОМЕСТИТЬ ДатыСтатусов
	|ИЗ
	|	ДатыСтатусовЗаявок КАК ДатыСтатусовЗаявок
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыСтатусовЗаявок.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеЗаявки.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ОчередьЗаявок.Порядок, 0) КАК Порядок,
	|	КлючОчереди.Система КАК Система
	|ПОМЕСТИТЬ ПриоритетыЗаявок
	|ИЗ
	|	ОтобранныеЗаявки КАК ОтобранныеЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиЗаявок КАК ОчередьЗаявок
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|			ПО (КлючОчереди.Ссылка = ОчередьЗаявок.КлючОчередиОбъекта)
	|				И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистемаГруппаЗаказчиков))
	|		ПО ОтобранныеЗаявки.Ссылка = ОчередьЗаявок.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаНаРазработку.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ЗаявкаНаРазработку.Ссылка) КАК Представление,
	|	ЗаявкаНаРазработку.Наименование КАК Наименование,
	|	ЕСТЬNULL(МинимальныеСтатусыЗаявок.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ПустаяСсылка)) КАК Статус,
	|	ЗаявкаНаРазработку.Дата КАК ДатаСоздания,
	|	ВЫБОР ОтобранныеЗаявки.КоличествоРешенных
	|		КОГДА 0
	|			ТОГДА 0
	|		ИНАЧЕ ОтобранныеЗаявки.КоличествоРешенных / ОтобранныеЗаявки.КоличествоЗадач * 100
	|	КОНЕЦ КАК ПроцентВыполнения,
	|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Назначена,
	|	ЗаявкаНаРазработку.Автор КАК Заказчик,
	|	ВЫБОР
	|		КОГДА ОтобранныеЗаявки.КоличествоЗадач = 0
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ЕСТЬNULL(ДатыСтатусов.ВРаботе, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР МинимальныеСтатусыЗаявок.Статус
	|		КОГДА ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)
	|			ТОГДА ЕСТЬNULL(ДатыСтатусов.Решен, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|		КОГДА ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен)
	|			ТОГДА ЕСТЬNULL(ДатыСтатусов.Отклонен, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ДатаОкончания,
	|	""Документ.ЗаявкаНаРазработку"" КАК ПолноеИмяМетаданных,
	|	ВЫБОР ЕСТЬNULL(МинимальныеСтатусыЗаявок.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ПустаяСсылка))
	|		КОГДА ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Решен,
	|	&ТекущаяДатаСеанса КАК ФактическоеНачало,
	|	&ТекущаяДатаСеанса КАК ФактическоеОкончание,
	|	0 КАК ПлановоеНачало,
	|	0 КАК ПлановоеОкончание,
	|	ПриоритетыЗаявок.Порядок КАК Приоритет,
	|	ЗаявкаНаРазработку.Назначение КАК Назначение,
	|	ЗаявкаНаРазработку.СерьезностьОшибки КАК СерьезностьОшибки,
	|	ОтобранныеЗаявки.Родитель КАК Родитель,
	|	ОтобранныеЗаявки.Трудозатраты КАК Трудозатраты,
	|	ЕСТЬNULL(ЗначенияРеквизитовКуратор.Значение, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Ответственный,
	|	СистемыЗаявокНазначеныеПользователю.Филиал КАК Филиал
	|ПОМЕСТИТЬ ОтобранныеПодготовленныеЗаявки
	|ИЗ
	|	ОтобранныеЗаявки КАК ОтобранныеЗаявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО ОтобранныеЗаявки.Ссылка = ЗаявкаНаРазработку.Ссылка
	|			И (НЕ ЗаявкаНаРазработку.Черновик)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СистемыЗаявокНазначеныеПользователю КАК СистемыЗаявокНазначеныеПользователю
	|		ПО (СистемыЗаявокНазначеныеПользователю.Заявка = ЗаявкаНаРазработку.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
	|		ПО ОтобранныеЗаявки.Ссылка = МинимальныеСтатусыЗаявок.Заявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыСтатусов КАК ДатыСтатусов
	|		ПО ОтобранныеЗаявки.Ссылка = ДатыСтатусов.Заявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПриоритетыЗаявок КАК ПриоритетыЗаявок
	|		ПО ОтобранныеЗаявки.Ссылка = ПриоритетыЗаявок.Ссылка
	|			И (СистемыЗаявокНазначеныеПользователю.Система = ПриоритетыЗаявок.Система)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияДополнительныхРеквизитовОбъектов КАК ЗначенияРеквизитовКуратор
	|		ПО (ЗначенияРеквизитовКуратор.Объект = ЗаявкаНаРазработку.Ссылка)
	|			И (ЗначенияРеквизитовКуратор.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДополнительныхРеквизитов.Куратор))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеПодготовленныеЗаявки.Ссылка КАК Ссылка,
	|	ОтобранныеПодготовленныеЗаявки.Представление КАК Представление,
	|	ОтобранныеПодготовленныеЗаявки.Наименование КАК Наименование,
	|	ОтобранныеПодготовленныеЗаявки.Статус КАК Статус,
	|	ОтобранныеПодготовленныеЗаявки.ДатаСоздания КАК ДатаСоздания,
	|	ОтобранныеПодготовленныеЗаявки.ПроцентВыполнения КАК ПроцентВыполнения,
	|	ОтобранныеПодготовленныеЗаявки.Назначена КАК Назначена,
	|	ОтобранныеПодготовленныеЗаявки.Заказчик КАК Заказчик,
	|	ОтобранныеПодготовленныеЗаявки.ДатаНачала КАК ДатаНачала,
	|	ОтобранныеПодготовленныеЗаявки.ДатаОкончания КАК ДатаОкончания,
	|	ОтобранныеПодготовленныеЗаявки.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных,
	|	ОтобранныеПодготовленныеЗаявки.Решен КАК Решен,
	|	ОтобранныеПодготовленныеЗаявки.ФактическоеНачало КАК ФактическоеНачало,
	|	ОтобранныеПодготовленныеЗаявки.ФактическоеОкончание КАК ФактическоеОкончание,
	|	ОтобранныеПодготовленныеЗаявки.ПлановоеНачало КАК ПлановоеНачало,
	|	ОтобранныеПодготовленныеЗаявки.ПлановоеОкончание КАК ПлановоеОкончание,
	|	ОтобранныеПодготовленныеЗаявки.Приоритет КАК Приоритет,
	|	ОтобранныеПодготовленныеЗаявки.Назначение КАК Назначение,
	|	ОтобранныеПодготовленныеЗаявки.СерьезностьОшибки КАК СерьезностьОшибки,
	|	ОтобранныеПодготовленныеЗаявки.Родитель КАК Родитель,
	|	ОтобранныеПодготовленныеЗаявки.Трудозатраты КАК Трудозатраты,
	|	ПРЕДСТАВЛЕНИЕ(ОтобранныеПодготовленныеЗаявки.Ответственный) КАК Ответственный,
	|	МАКСИМУМ(ЕСТЬNULL(ИсторияПубликацииЗадачСрезПоследних.ДатаИсторииХранилища, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК ДатаПубликации,
	|	ОтобранныеПодготовленныеЗаявки.Филиал КАК Филиал
	|ПОМЕСТИТЬ ПодготовленныеДанные
	|ИЗ
	|	ОтобранныеПодготовленныеЗаявки КАК ОтобранныеПодготовленныеЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураПодчиненности КАК СтруктураПодчиненности
	|		ПО ОтобранныеПодготовленныеЗаявки.Ссылка = СтруктураПодчиненности.Родитель
	|			И (СтруктураПодчиненности.Объект ССЫЛКА Документ.Задача)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПубликацииЗадач.СрезПоследних КАК ИсторияПубликацииЗадачСрезПоследних
	|		ПО (СтруктураПодчиненности.Объект = ИсторияПубликацииЗадачСрезПоследних.Задача)
	|			И (СтруктураПодчиненности.Объект ССЫЛКА Документ.Задача)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтобранныеПодготовленныеЗаявки.ФактическоеНачало,
	|	ОтобранныеПодготовленныеЗаявки.Родитель,
	|	ОтобранныеПодготовленныеЗаявки.Заказчик,
	|	ОтобранныеПодготовленныеЗаявки.ДатаНачала,
	|	ОтобранныеПодготовленныеЗаявки.Ответственный,
	|	ОтобранныеПодготовленныеЗаявки.Ссылка,
	|	ОтобранныеПодготовленныеЗаявки.ДатаСоздания,
	|	ОтобранныеПодготовленныеЗаявки.ФактическоеОкончание,
	|	ОтобранныеПодготовленныеЗаявки.ДатаОкончания,
	|	ОтобранныеПодготовленныеЗаявки.Наименование,
	|	ОтобранныеПодготовленныеЗаявки.Назначена,
	|	ОтобранныеПодготовленныеЗаявки.Статус,
	|	ОтобранныеПодготовленныеЗаявки.Назначение,
	|	ОтобранныеПодготовленныеЗаявки.СерьезностьОшибки,
	|	ОтобранныеПодготовленныеЗаявки.Представление,
	|	ОтобранныеПодготовленныеЗаявки.ПолноеИмяМетаданных,
	|	ОтобранныеПодготовленныеЗаявки.ПроцентВыполнения,
	|	ОтобранныеПодготовленныеЗаявки.ПлановоеНачало,
	|	ОтобранныеПодготовленныеЗаявки.Решен,
	|	ОтобранныеПодготовленныеЗаявки.Приоритет,
	|	ОтобранныеПодготовленныеЗаявки.ПлановоеОкончание,
	|	ОтобранныеПодготовленныеЗаявки.Трудозатраты,
	|	ОтобранныеПодготовленныеЗаявки.Филиал
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнутреннееЗадание.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ВнутреннееЗадание.Ссылка),
	|	ВнутреннееЗадание.Наименование,
	|	ВнутреннееЗадание.Статус,
	|	ВнутреннееЗадание.Дата,
	|	ВнутреннееЗадание.ПроцентВыполнения,
	|	ВнутреннееЗадание.Назначена,
	|	ВнутреннееЗадание.Заказчик,
	|	ВЫБОР ВнутреннееЗадание.ДатаНачалаРазработки
	|		КОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВнутреннееЗадание.ПлановоеНачало
	|		ИНАЧЕ ВнутреннееЗадание.ДатаНачалаРазработки
	|	КОНЕЦ,
	|	ВЫБОР ВнутреннееЗадание.ДатаЗакрытия
	|		КОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВнутреннееЗадание.ИсполнитьДо
	|		ИНАЧЕ ВнутреннееЗадание.ДатаЗакрытия
	|	КОНЕЦ,
	|	""Документ.ВнутреннееЗадание"",
	|	ВЫБОР ВнутреннееЗадание.Статус
	|		КОГДА ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВнутреннееЗадание.ДатаНачалаРазработки,
	|	ВнутреннееЗадание.ДатаЗакрытия,
	|	ВнутреннееЗадание.ПлановоеНачало,
	|	ВнутреннееЗадание.ИсполнитьДо,
	|	ВнутреннееЗадание.Приоритет,
	|	"""",
	|	ЗНАЧЕНИЕ(Справочник.СерьезностьОшибок.ПустаяСсылка),
	|	ТаблицаИерархииСЗатратами.Родитель,
	|	ТаблицаИерархииСЗатратами.Трудозатраты,
	|	"""",
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|	ВнутреннееЗадание.Филиал
	|ИЗ
	|	ТаблицаИерархииСЗатратами КАК ТаблицаИерархииСЗатратами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
	|		ПО (ВнутреннееЗадание.Ссылка = ТаблицаИерархииСЗатратами.Объект)
	|ГДЕ
	|	ТаблицаИерархииСЗатратами.Объект ССЫЛКА Документ.ВнутреннееЗадание
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Проекты.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(Проекты.Ссылка),
	|	Проекты.Наименование,
	|	Проекты.Статус,
	|	Проекты.Дата,
	|	Проекты.ПроцентВыполнения,
	|	Проекты.Руководитель,
	|	Проекты.Заказчик,
	|	ВЫБОР
	|		КОГДА Проекты.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый)
	|			ТОГДА Проекты.ДатаПлановоеНачало
	|		ИНАЧЕ Проекты.ДатаНачалаРазработки
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Проекты.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен)
	|				ИЛИ Проекты.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)
	|			ТОГДА Проекты.ДатаЗавершения
	|		ИНАЧЕ Проекты.ДатаПлановоеОкончание
	|	КОНЕЦ,
	|	""Справочник.Проекты"",
	|	ВЫБОР Проекты.Статус
	|		КОГДА ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	Проекты.ДатаНачалаРазработки,
	|	Проекты.ДатаЗавершения,
	|	Проекты.ДатаПлановоеНачало,
	|	Проекты.ДатаПлановоеОкончание,
	|	Проекты.Порядок,
	|	"""",
	|	ЗНАЧЕНИЕ(Справочник.СерьезностьОшибок.ПустаяСсылка),
	|	ТаблицаИерархииСЗатратами.Родитель,
	|	ТаблицаИерархииСЗатратами.Трудозатраты,
	|	"""",
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|	Проекты.Филиал
	|ИЗ
	|	ТаблицаИерархииСЗатратами КАК ТаблицаИерархииСЗатратами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
	|		ПО (Проекты.Ссылка = ТаблицаИерархииСЗатратами.Объект)
	|ГДЕ
	|	ТаблицаИерархииСЗатратами.Объект ССЫЛКА Справочник.Проекты";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ТаблицаВсехОбъектов", ТаблицаВсехОбъектов);
	Запрос.УстановитьПараметр("ТаблицаТрудозатрат", ТаблицаТрудозатрат);
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	
	Запрос.Выполнить();
	
	ИнтеграцияДополнительныхПодсистем.ДобавитьВРезультатЗапросаПоказательПриоритета(МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ПодготовленныеДанные.Ссылка КАК Ссылка,
	|	ПодготовленныеДанные.Представление КАК Представление,
	|	ПодготовленныеДанные.Наименование КАК Наименование,
	|	ПодготовленныеДанные.Статус КАК Статус,
	|	ПодготовленныеДанные.ДатаСоздания КАК ДатаСоздания,
	|	ПодготовленныеДанные.ПроцентВыполнения КАК ПроцентВыполнения,
	|	ПодготовленныеДанные.Назначена КАК Назначена,
	|	ПодготовленныеДанные.Заказчик КАК Заказчик,
	|	ПодготовленныеДанные.ДатаНачала КАК ДатаНачала,
	|	ПодготовленныеДанные.ДатаОкончания КАК ДатаОкончания,
	|	ПодготовленныеДанные.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных,
	|	ПодготовленныеДанные.Решен КАК Решен,
	|	ПодготовленныеДанные.ФактическоеНачало КАК ФактическоеНачало,
	|	ПодготовленныеДанные.ФактическоеОкончание КАК ФактическоеОкончание,
	|	ПодготовленныеДанные.ПлановоеНачало КАК ПлановоеНачало,
	|	ПодготовленныеДанные.ПлановоеОкончание КАК ПлановоеОкончание,
	|	ПодготовленныеДанные.Ответственный КАК Ответственный,
	|	ПодготовленныеДанные.ДатаПубликации КАК ДатаПубликации,
	|	ЕСТЬNULL(СтатусыОбъектов.ИндексКартинки, 0) КАК ИндексКартинки,
	|	ЕСТЬNULL(ПоказателиПриоритета.ПолнотаДанных, ЛОЖЬ) КАК ПолнотаДанных,
	|	ВЫБОР
	|		КОГДА ПодготовленныеДанные.Приоритет = 0
	|			ТОГДА """"
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ПодготовленныеДанные.Приоритет)
	|	КОНЕЦ КАК Приоритет,
	|	ВЫБОР
	|		КОГДА ПодготовленныеДанные.СерьезностьОшибки = ЗНАЧЕНИЕ(Справочник.СерьезностьОшибок.ПустаяСсылка)
	|			ТОГДА НазначенияЗадач.Наименование
	|		ИНАЧЕ НазначенияЗадач.Наименование + "": "" + СерьезностьОшибок.Наименование
	|	КОНЕЦ КАК Назначение,
	|	ПодготовленныеДанные.Родитель КАК Родитель,
	|	ПодготовленныеДанные.Трудозатраты КАК Трудозатраты,
	|	ВЫБОР
	|		КОГДА ПодготовленныеДанные.Ссылка ССЫЛКА Справочник.Проекты
	|			ТОГДА 1
	|		КОГДА ПодготовленныеДанные.Ссылка ССЫЛКА Документ.ВнутреннееЗадание
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК СвояСортировка,
	|	ПРЕДСТАВЛЕНИЕ(ПодготовленныеДанные.Филиал) КАК Филиал,
	|	ТегиОбъектов.Тег КАК Теги
	|ИЗ
	|	ПодготовленныеДанные КАК ПодготовленныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиПриоритета КАК ПоказателиПриоритета
	|		ПО ПодготовленныеДанные.Ссылка = ПоказателиПриоритета.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НазначенияЗадач КАК НазначенияЗадач
	|		ПО ПодготовленныеДанные.Назначение = НазначенияЗадач.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ПодготовленныеДанные.Статус = СтатусыОбъектов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерьезностьОшибок КАК СерьезностьОшибок
	|		ПО ПодготовленныеДанные.СерьезностьОшибки = СерьезностьОшибок.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТегиОбъектов КАК ТегиОбъектов
	|		ПО ПодготовленныеДанные.Ссылка = ТегиОбъектов.Объект
	|ГДЕ
	|	ПодготовленныеДанные.ДатаСоздания МЕЖДУ &ДатаНачало И &ДатаКонец
	|	И ВЫБОР
	|			КОГДА &ЕстьЗаполненныеТеги
	|				ТОГДА ТегиОбъектов.Тег В (&Теги)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	СвояСортировка,
	|	Представление
	|ИТОГИ ПО
	|	Ссылка";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ДатаНачало", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонец", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("ЕстьЗаполненныеТеги", ЗначениеЗаполнено(Теги));
	Запрос.УстановитьПараметр("Теги", Теги);

	РезультатЗапроса = Запрос.Выполнить();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	ТЗ = РезультатЗапроса.Выгрузить(); 
	ВыборкаОбъектов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ИтоговаяТаблица = ТЗ.СкопироватьКолонки();
	
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		НоваяСтрока = ИтоговаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаОбъектов);
		
		Выборка = ВыборкаОбъектов.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НайденныеСтроки = ТЗ.НайтиСтроки(Новый Структура("Представление", Строка(Выборка.Ссылка)));
			
			Приоритеты = Новый Массив;
			Филиалы = Новый Массив;
			
			ПредыдущаяСтрокаПриоритета = 0;
			
			Для Каждого СтрокаДанных Из НайденныеСтроки Цикл
				
				Филиалы.Добавить(СтрокаДанных.Филиал);
				
				Если НЕ СтрокаДанных.Приоритет = ПредыдущаяСтрокаПриоритета И СтрокаДанных.Приоритет <> NULL Тогда 
					Приоритеты.Добавить(СтрокаДанных.Приоритет);
				КонецЕсли;
				
				ПредыдущаяСтрокаПриоритета = СтрокаДанных.Приоритет;
				
			КонецЦикла; 
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныеСтроки[0], , "Приоритет"); 
			
			НоваяСтрока.Приоритет = СтрСоединить(Приоритеты, ", ");
			НоваяСтрока.Филиал = СтрСоединить(Филиалы, ", ");
		КонецЦикла;
	КонецЦикла;
	
	Возврат ИтоговаяТаблица;
	
КонецФункции

&НаСервере 
Функция ОтфильтроватьТаблицуВсехОбъектов(ТаблицаВсехОбъектов, Знач ТаблицаТрудозатрат)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаВсехОбъектов.Объект КАК Объект,
	|	ТаблицаВсехОбъектов.Родитель КАК Родитель
	|ПОМЕСТИТЬ ТаблицаВсехОбъектов
	|ИЗ
	|	&ТаблицаВсехОбъектов КАК ТаблицаВсехОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТрудозатрат.Объект КАК Объект,
	|	ТаблицаТрудозатрат.Трудозатраты КАК Трудозатраты,
	|	ТаблицаТрудозатрат.КоличествоРешенных КАК КоличествоРешенных,
	|	ТаблицаТрудозатрат.КоличествоЗадач КАК КоличествоЗадач,
	|	ТаблицаТрудозатрат.Родитель КАК Родитель
	|ПОМЕСТИТЬ ТаблицаТрудозатрат
	|ИЗ
	|	&ТаблицаТрудозатрат КАК ТаблицаТрудозатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВсехОбъектов.Объект КАК Заявка,
	|	ТаблицаВсехОбъектов.Родитель КАК Родитель,
	|	ЕСТЬNULL(ТаблицаТрудозатрат.Трудозатраты, 0) КАК Трудозатраты
	|ПОМЕСТИТЬ ЗаявкиДоФильтра
	|ИЗ
	|	ТаблицаВсехОбъектов КАК ТаблицаВсехОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТрудозатрат КАК ТаблицаТрудозатрат
	|		ПО ТаблицаВсехОбъектов.Объект = ТаблицаТрудозатрат.Объект
	|			И (ТаблицаТрудозатрат.Объект ССЫЛКА Документ.ЗаявкаНаРазработку)
	|ГДЕ
	|	ТаблицаВсехОбъектов.Объект ССЫЛКА Документ.ЗаявкаНаРазработку
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкиДоФильтра.Заявка КАК Заявка,
	|	ЗаявкиДоФильтра.Родитель КАК Родитель,
	|	ЗаявкиДоФильтра.Трудозатраты КАК Трудозатраты,
	|	ЗаявкаНаРазработку.ДатаСоздания КАК ДатаСоздания
	|ПОМЕСТИТЬ ЗаявкиНеЧерновики
	|ИЗ
	|	ЗаявкиДоФильтра КАК ЗаявкиДоФильтра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО ЗаявкиДоФильтра.Заявка = ЗаявкаНаРазработку.Ссылка
	|			И (ЗаявкаНаРазработку.Черновик = ЛОЖЬ)
	|			И (ЗаявкаНаРазработку.Назначение В (&Назначения))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкиНеЧерновики.Заявка КАК Заявка,
	|	ЗаявкиНеЧерновики.Родитель КАК Родитель,
	|	ЗаявкиНеЧерновики.Трудозатраты КАК Трудозатраты,
	|	ЗаявкиНеЧерновики.ДатаСоздания КАК ДатаСоздания
	|ПОМЕСТИТЬ ЗаявкиПоСтатусам
	|ИЗ
	|	РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаявкиНеЧерновики КАК ЗаявкиНеЧерновики
	|		ПО МинимальныеСтатусыЗаявок.Заявка = ЗаявкиНеЧерновики.Заявка
	|			И (МинимальныеСтатусыЗаявок.Статус В (&ВыбранныеСтатусы))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкиПоСтатусам.Заявка КАК Заявка,
	|	ИсторияМинимальныхСтатусовЗаявок.Период КАК Период,
	|	ИсторияМинимальныхСтатусовЗаявок.Статус КАК Статус
	|ПОМЕСТИТЬ ИсторияСтатусов
	|ИЗ
	|	ЗаявкиПоСтатусам КАК ЗаявкиПоСтатусам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияМинимальныхСтатусовЗаявок КАК ИсторияМинимальныхСтатусовЗаявок
	|		ПО ЗаявкиПоСтатусам.Заявка = ИсторияМинимальныхСтатусовЗаявок.Заявка
	|			И (ИсторияМинимальныхСтатусовЗаявок.Статус В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ВРаботе), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияСтатусов.Заявка КАК Заявка,
	|	МИНИМУМ(ИсторияСтатусов.Период) КАК ДатаСтатусаВРаботе,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаСтатусаРешен,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаСтатусаОтклонен
	|ПОМЕСТИТЬ ДатыСтатусовЗаявок
	|ИЗ
	|	ИсторияСтатусов КАК ИсторияСтатусов
	|ГДЕ
	|	ИсторияСтатусов.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ВРаботе)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияСтатусов.Заявка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсторияСтатусов.Заявка,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|	МИНИМУМ(ИсторияСтатусов.Период),
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|ИЗ
	|	ИсторияСтатусов КАК ИсторияСтатусов
	|ГДЕ
	|	ИсторияСтатусов.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияСтатусов.Заявка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсторияСтатусов.Заявка,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|	МИНИМУМ(ИсторияСтатусов.Период)
	|ИЗ
	|	ИсторияСтатусов КАК ИсторияСтатусов
	|ГДЕ
	|	ИсторияСтатусов.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияСтатусов.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыСтатусовЗаявок.Заявка КАК Заявка,
	|	МАКСИМУМ(ДатыСтатусовЗаявок.ДатаСтатусаВРаботе) КАК ДатаВРаботе,
	|	МАКСИМУМ(ДатыСтатусовЗаявок.ДатаСтатусаРешен) КАК ДатаРешен,
	|	МАКСИМУМ(ДатыСтатусовЗаявок.ДатаСтатусаОтклонен) КАК ДатаОтклонен
	|ПОМЕСТИТЬ ДатыСтатусов
	|ИЗ
	|	ДатыСтатусовЗаявок КАК ДатыСтатусовЗаявок
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыСтатусовЗаявок.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкиПоСтатусам.Заявка КАК Объект,
	|	ЗаявкиПоСтатусам.Родитель КАК Родитель,
	|	ЗаявкиПоСтатусам.Трудозатраты КАК Трудозатраты,
	|	ЗаявкиПоСтатусам.ДатаСоздания КАК ДатаСоздания,
	|	ЕСТЬNULL(ДатыСтатусов.ДатаВРаботе, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаВРаботе,
	|	ЕСТЬNULL(ДатыСтатусов.ДатаРешен, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаРешен,
	|	ЕСТЬNULL(ДатыСтатусов.ДатаОтклонен, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаОтклонен
	|ПОМЕСТИТЬ ТаблицаЗаявок
	|ИЗ
	|	ЗаявкиПоСтатусам КАК ЗаявкиПоСтатусам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыСтатусов КАК ДатыСтатусов
	|		ПО ЗаявкиПоСтатусам.Заявка = ДатыСтатусов.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаявок.Объект КАК Объект,
	|	ТаблицаЗаявок.Родитель КАК Родитель
	|ИЗ
	|	ТаблицаЗаявок КАК ТаблицаЗаявок
	|ГДЕ
	|	ТаблицаЗаявок.Трудозатраты > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗаявок.Объект,
	|	ТаблицаЗаявок.Родитель
	|ИЗ
	|	ТаблицаЗаявок КАК ТаблицаЗаявок
	|ГДЕ
	|	ТаблицаЗаявок.Трудозатраты = 0
	|	И ВЫБОР
	|			КОГДА ТаблицаЗаявок.ДатаСоздания < &ДатаНачала
	|				ТОГДА ТаблицаЗаявок.ДатаВРаботе МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			ИНАЧЕ ТаблицаЗаявок.ДатаСоздания МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА ТаблицаЗаявок.ДатаРешен <> """"
	|					И ТаблицаЗаявок.ДатаРешен <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ТаблицаЗаявок.ДатаРешен < &ДатаОкончания
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ТаблицаЗаявок.ДатаОтклонен <> """"
	|							И ТаблицаЗаявок.ДатаОтклонен <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА ТаблицаЗаявок.ДатаОтклонен < &ДатаОкончания
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаВсехОбъектов.Объект,
	|	ТаблицаВсехОбъектов.Родитель
	|ИЗ
	|	ТаблицаВсехОбъектов КАК ТаблицаВсехОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
	|		ПО ((ВЫРАЗИТЬ(ТаблицаВсехОбъектов.Объект КАК Справочник.Проекты)) = Проекты.Ссылка)
	|			И (Проекты.Статус В (&ВыбранныеСтатусы))
	|ГДЕ
	|	ТаблицаВсехОбъектов.Объект ССЫЛКА Справочник.Проекты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаВсехОбъектов.Объект,
	|	ТаблицаВсехОбъектов.Родитель
	|ИЗ
	|	ТаблицаВсехОбъектов КАК ТаблицаВсехОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
	|		ПО ((ВЫРАЗИТЬ(ТаблицаВсехОбъектов.Объект КАК Документ.ВнутреннееЗадание)) = ВнутреннееЗадание.Ссылка)
	|			И (ВнутреннееЗадание.Статус В (&ВыбранныеСтатусы))
	|ГДЕ
	|	ТаблицаВсехОбъектов.Объект ССЫЛКА Документ.ВнутреннееЗадание";
	
	ВыбранныеНазначения = ПолучитьВыбранныеНазначения(Назначения);
	Запрос.УстановитьПараметр("Назначения", ВыбранныеНазначения);
	ВыбранныеСтатусы = ПолучитьВыбранныеСтатусы(ОтборСписокСтатусов);
	Запрос.УстановитьПараметр("ЕстьЗаполненныеТеги", Теги <> Неопределено);
	Запрос.УстановитьПараметр("Теги", Теги);
	Запрос.УстановитьПараметр("ВыбранныеСтатусы", ВыбранныеСтатусы);
	Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("ТаблицаВсехОбъектов", ТаблицаВсехОбъектов);
	Запрос.УстановитьПараметр("ТаблицаТрудозатрат", ТаблицаТрудозатрат);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ТаблицаВсехОбъектов.Очистить();
	Иначе
		ТаблицаВсехОбъектов = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	Возврат ТаблицаВсехОбъектов;
		
КонецФункции

&НаСервере
Функция ПолучитьВыбранныеНазначения(СписокНазначений) 
	
	ВыбранныеНазначения = Новый Массив;
	
	Для Каждого ЭлементСписка Из СписокНазначений Цикл
		Если ЭлементСписка.Пометка Тогда
			ВыбранныеНазначения.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВыбранныеНазначения;
	
КонецФункции

&НаСервере
Функция РассчитатьТрудозатратыНаОснованииЗадач(Знач ТаблицаЗадач) 
		
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.Задача"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ВнутреннееЗадание"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаявкаНаРазработку"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Проекты"));
	
	ТаблицаТрудозатрат = Новый ТаблицаЗначений;
	ТаблицаТрудозатрат.Колонки.Добавить("Объект", Новый ОписаниеТипов(МассивТипов));
	ТаблицаТрудозатрат.Колонки.Добавить("Трудозатраты", Новый ОписаниеТипов("Число"));
	ТаблицаТрудозатрат.Колонки.Добавить("Родитель", Новый ОписаниеТипов(МассивТипов));
	ТаблицаТрудозатрат.Колонки.Добавить("КоличествоРешенных", Новый ОписаниеТипов("Число"));
	ТаблицаТрудозатрат.Колонки.Добавить("КоличествоЗадач", Новый ОписаниеТипов("Число"));
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗадач.Объект КАК Задача
	|ПОМЕСТИТЬ ТаблицаЗадач
	|ИЗ
	|	&ТаблицаЗадач КАК ТаблицаЗадач
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗадач.Задача КАК Задача,
	|	ВЫБОР ДокументЗадача.Статус
	|		КОГДА ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЗадачаРешена,
	|	1 КАК КоличествоЗадач
	|ПОМЕСТИТЬ ТаблицаЗадачИСтатусов
	|ИЗ
	|	ТаблицаЗадач КАК ТаблицаЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО ТаблицаЗадач.Задача = ДокументЗадача.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Трудозатраты.Объект КАК Задача,
	|	СУММА(Трудозатраты.Затрата) КАК Трудозатраты
	|ПОМЕСТИТЬ ЗатратыПоЗадачам
	|ИЗ
	|	РегистрСведений.Трудозатраты КАК Трудозатраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЗадач КАК ТаблицаЗадач
	|		ПО (ТаблицаЗадач.Задача = Трудозатраты.Объект)
	|			И (Трудозатраты.Период МЕЖДУ &НачалоПериода И &КонецПериода)
	|
	|СГРУППИРОВАТЬ ПО
	|	Трудозатраты.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураПодчиненности.Родитель КАК Объект,
	|	СУММА(ЕСТЬNULL(ЗатратыПоЗадачам.Трудозатраты, 0)) КАК Трудозатраты,
	|	СУММА(ТаблицаЗадачИСтатусов.ЗадачаРешена) КАК КоличествоРешенных,
	|	СУММА(ТаблицаЗадачИСтатусов.КоличествоЗадач) КАК КоличествоЗадач
	|ИЗ
	|	ТаблицаЗадачИСтатусов КАК ТаблицаЗадачИСтатусов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураПодчиненности КАК СтруктураПодчиненности
	|		ПО ТаблицаЗадачИСтатусов.Задача = СтруктураПодчиненности.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗатратыПоЗадачам КАК ЗатратыПоЗадачам
	|		ПО ТаблицаЗадачИСтатусов.Задача = ЗатратыПоЗадачам.Задача
	|
	|СГРУППИРОВАТЬ ПО
	|	СтруктураПодчиненности.Родитель";
	
	Запрос.УстановитьПараметр("НачалоПериода", Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("ТаблицаЗадач", ТаблицаЗадач);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		РассчитатьТрудозатратыРодителей(ТаблицаТрудозатрат, РезультатЗапроса.Выгрузить());
	КонецЕсли;
	
	// Так как на разных этапах мог быть один и тот же родитель, нужно сгруппировать по объектам и родителям кол-во затрат
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТрудозатрат.Объект КАК Объект,
	|	ТаблицаТрудозатрат.Трудозатраты КАК Трудозатраты,
	|	ТаблицаТрудозатрат.Родитель КАК Родитель,
	|	ТаблицаТрудозатрат.КоличествоРешенных КАК КоличествоРешенных,
	|	ТаблицаТрудозатрат.КоличествоЗадач КАК КоличествоЗадач
	|ПОМЕСТИТЬ ТаблицаТрудозатрат
	|ИЗ
	|	&ТаблицаТрудозатрат КАК ТаблицаТрудозатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТрудозатрат.Объект КАК Объект,
	|	СУММА(ТаблицаТрудозатрат.Трудозатраты) КАК Трудозатраты,
	|	СУММА(ТаблицаТрудозатрат.КоличествоРешенных) КАК КоличествоРешенных,
	|	СУММА(ТаблицаТрудозатрат.КоличествоЗадач) КАК КоличествоЗадач,
	|	ТаблицаТрудозатрат.Родитель КАК Родитель
	|ИЗ
	|	ТаблицаТрудозатрат КАК ТаблицаТрудозатрат
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТрудозатрат.Объект,
	|	ТаблицаТрудозатрат.Родитель";
	
	Запрос.УстановитьПараметр("ТаблицаТрудозатрат", ТаблицаТрудозатрат);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаТрудозатрат = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	Возврат ТаблицаТрудозатрат;
	
КонецФункции

// Рекурсия - рассчитывает трудозатраты от задач и до самых верхних родителей задач, суммируя на каждом уровне
&НаСервере
Процедура РассчитатьТрудозатратыРодителей(ТаблицаТрудозатрат, Знач ТаблицаРодителей)  
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРодителей.Объект КАК Объект,
	|	ТаблицаРодителей.Трудозатраты КАК Трудозатраты,
	|	ТаблицаРодителей.КоличествоРешенных КАК КоличествоРешенных,
	|	ТаблицаРодителей.КоличествоЗадач КАК КоличествоЗадач
	|ПОМЕСТИТЬ ТаблицаРодителей
	|ИЗ
	|	&ТаблицаРодителей КАК ТаблицаРодителей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРодителей.Объект КАК Объект,
	|	ТаблицаРодителей.Трудозатраты КАК Трудозатраты,
	|	ТаблицаРодителей.КоличествоРешенных КАК КоличествоРешенных,
	|	ТаблицаРодителей.КоличествоЗадач КАК КоличествоЗадач,
	|	СтруктураПодчиненности.Родитель КАК Родитель,
	|	ВЫБОР
	|		КОГДА СтруктураПодчиненности.Родитель ССЫЛКА Документ.ВнутреннееЗадание
	|			ТОГДА ИСТИНА
	|		КОГДА СтруктураПодчиненности.Родитель ССЫЛКА Справочник.Проекты
	|			ТОГДА ИСТИНА
	|		КОГДА СтруктураПодчиненности.Родитель ССЫЛКА Документ.ЗаявкаНаРазработку
	|			ТОГДА ИСТИНА
	|		КОГДА СтруктураПодчиненности.Родитель ССЫЛКА Документ.Задача
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьРодитель
	|ПОМЕСТИТЬ ЕстьЗаявкиБезРодителя
	|ИЗ
	|	ТаблицаРодителей КАК ТаблицаРодителей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураПодчиненности КАК СтруктураПодчиненности
	|		ПО ТаблицаРодителей.Объект = СтруктураПодчиненности.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕстьЗаявкиБезРодителя.Объект КАК Объект,
	|	ЕстьЗаявкиБезРодителя.Трудозатраты КАК Трудозатраты,
	|	ЕстьЗаявкиБезРодителя.Родитель КАК Родитель,
	|	ЕстьЗаявкиБезРодителя.КоличествоРешенных КАК КоличествоРешенных,
	|	ЕстьЗаявкиБезРодителя.КоличествоЗадач КАК КоличествоЗадач
	|ИЗ
	|	ЕстьЗаявкиБезРодителя КАК ЕстьЗаявкиБезРодителя
	|ГДЕ
	|	ЕстьЗаявкиБезРодителя.Объект ССЫЛКА Документ.ЗаявкаНаРазработку
	|	И ЕстьЗаявкиБезРодителя.ЕстьРодитель
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕстьЗаявкиБезРодителя.Объект,
	|	ЕстьЗаявкиБезРодителя.Трудозатраты,
	|	ЕстьЗаявкиБезРодителя.Родитель,
	|	ЕстьЗаявкиБезРодителя.КоличествоРешенных,
	|	ЕстьЗаявкиБезРодителя.КоличествоЗадач
	|ИЗ
	|	ЕстьЗаявкиБезРодителя КАК ЕстьЗаявкиБезРодителя
	|ГДЕ
	|	НЕ ЕстьЗаявкиБезРодителя.Объект ССЫЛКА Документ.ЗаявкаНаРазработку
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕстьЗаявкиБезРодителя.Родитель КАК Объект,
	|	СУММА(ЕстьЗаявкиБезРодителя.Трудозатраты) КАК Трудозатраты,
	|	СУММА(ЕстьЗаявкиБезРодителя.КоличествоРешенных) КАК КоличествоРешенных,
	|	СУММА(ЕстьЗаявкиБезРодителя.КоличествоЗадач) КАК КоличествоЗадач
	|ИЗ
	|	ЕстьЗаявкиБезРодителя КАК ЕстьЗаявкиБезРодителя
	|ГДЕ
	|	ЕстьЗаявкиБезРодителя.ЕстьРодитель
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕстьЗаявкиБезРодителя.Родитель";
	
	Запрос.УстановитьПараметр("ТаблицаРодителей", ТаблицаРодителей);
	
	РезультатПакеты = Запрос.ВыполнитьПакет();
	Выборка = РезультатПакеты[2].Выбрать();
		
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаТрудозатрат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	ТаблицаРодителей = РезультатПакеты[3].Выгрузить();
	Если ТаблицаРодителей.Количество() > 0 Тогда
		РассчитатьТрудозатратыРодителей(ТаблицаТрудозатрат, ТаблицаРодителей);
	КонецЕсли;

КонецПроцедуры

// Рекурсия - получает подчиненные Объекты по Списку Родителей из РС.СтруктураПодчиненности
&НаСервере
Процедура ДобавитьВТаблицуПодчиненныеОбъекты(Знач ТаблицаРодителей, ТаблицаВсехОбъектов) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаРодителей.Объект КАК Объект
	|ПОМЕСТИТЬ ТаблицаРодителей
	|ИЗ
	|	&ТаблицаРодителей КАК ТаблицаРодителей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураПодчиненности.Объект КАК Объект,
	|	СтруктураПодчиненности.Родитель КАК Родитель
	|ИЗ
	|	ТаблицаРодителей КАК ТаблицаРодителей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураПодчиненности КАК СтруктураПодчиненности
	|		ПО СтруктураПодчиненности.Родитель = ТаблицаРодителей.Объект
	|			И (НЕ СтруктураПодчиненности.Объект ССЫЛКА Документ.Задача)";
	
	Запрос.УстановитьПараметр("ТаблицаРодителей", ТаблицаРодителей);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаОбъектов = РезультатЗапроса.Выгрузить();

		Для Каждого Строка Из ТаблицаОбъектов Цикл
			НоваяСтрока = ТаблицаВсехОбъектов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		ДобавитьВТаблицуПодчиненныеОбъекты(ТаблицаОбъектов, ТаблицаВсехОбъектов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПоОбъектам(Знач МассивыОбъектов)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявкаНаРазработку.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОтобранныеЗаявки
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|ГДЕ
	|	ЗаявкаНаРазработку.Ссылка В(&МассивЗаявокНаРазработку)
	|	И ЗаявкаНаРазработку.Черновик = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияСтатусов.Заявка КАК Заявка,
	|	ИсторияСтатусов.Период КАК Период,
	|	ИсторияСтатусов.Статус КАК Статус
	|ПОМЕСТИТЬ ИсторияСтатусов
	|ИЗ
	|	ОтобранныеЗаявки КАК ОтобранныеЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияМинимальныхСтатусовЗаявок КАК ИсторияСтатусов
	|		ПО ОтобранныеЗаявки.Ссылка = ИсторияСтатусов.Заявка
	|			И (ИсторияСтатусов.Статус В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ВРаботе), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияСтатусов.Заявка КАК Заявка,
	|	МИНИМУМ(ИсторияСтатусов.Период) КАК ДатаСтатусаВРаботе,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаСтатусаРешен,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаСтатусаОтклонен
	|ПОМЕСТИТЬ ДатыСтатусовЗаявок
	|ИЗ
	|	ИсторияСтатусов КАК ИсторияСтатусов
	|ГДЕ
	|	ИсторияСтатусов.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ВРаботе)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияСтатусов.Заявка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсторияСтатусов.Заявка,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|	МИНИМУМ(ИсторияСтатусов.Период),
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|ИЗ
	|	ИсторияСтатусов КАК ИсторияСтатусов
	|ГДЕ
	|	ИсторияСтатусов.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияСтатусов.Заявка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсторияСтатусов.Заявка,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|	МИНИМУМ(ИсторияСтатусов.Период)
	|ИЗ
	|	ИсторияСтатусов КАК ИсторияСтатусов
	|ГДЕ
	|	ИсторияСтатусов.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияСтатусов.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыСтатусовЗаявок.Заявка КАК Заявка,
	|	МАКСИМУМ(ДатыСтатусовЗаявок.ДатаСтатусаВРаботе) КАК ВРаботе,
	|	МАКСИМУМ(ДатыСтатусовЗаявок.ДатаСтатусаРешен) КАК Решен,
	|	МАКСИМУМ(ДатыСтатусовЗаявок.ДатаСтатусаОтклонен) КАК Отклонен
	|ПОМЕСТИТЬ ДатыСтатусов
	|ИЗ
	|	ДатыСтатусовЗаявок КАК ДатыСтатусовЗаявок
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыСтатусовЗаявок.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеЗаявки.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(СУММА(ВЫБОР Задача.Статус
	|				КОГДА ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК РешенныеЗадачи
	|ПОМЕСТИТЬ РешенныеЗадачиЗаявок
	|ИЗ
	|	ОтобранныеЗаявки КАК ОтобранныеЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задача КАК Задача
	|		ПО (Задача.ОбъектОснование ССЫЛКА Документ.ЗаявкаНаРазработку)
	|			И ОтобранныеЗаявки.Ссылка = Задача.ОбъектОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтобранныеЗаявки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеЗаявки.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ОчередьЗаявок.Порядок, 0) КАК Порядок
	|ПОМЕСТИТЬ ПриоритетыЗаявок
	|ИЗ
	|	ОтобранныеЗаявки КАК ОтобранныеЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиЗаявок КАК ОчередьЗаявок
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|			ПО (КлючОчереди.Ссылка = ОчередьЗаявок.КлючОчередиОбъекта)
	|				И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистемаГруппаЗаказчиков))
	|		ПО ОтобранныеЗаявки.Ссылка = ОчередьЗаявок.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаНаРазработку.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ЗаявкаНаРазработку.Ссылка) КАК Представление,
	|	ЗаявкаНаРазработку.Наименование КАК Наименование,
	|	ЕСТЬNULL(МинимальныеСтатусыЗаявок.Статус, """") КАК Статус,
	|	ЗаявкаНаРазработку.Дата КАК ДатаСоздания,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КоличествоПодчиненныхЗадач.Значение, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(РешенныеЗадачиЗаявок.РешенныеЗадачи, 0) / (ВЫРАЗИТЬ(ЕСТЬNULL(КоличествоПодчиненныхЗадач.Значение, 1) КАК ЧИСЛО(15, 2))) * 100
	|	КОНЕЦ КАК ПроцентВыполнения,
	|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Назначена,
	|	ЗаявкаНаРазработку.Автор КАК Заказчик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КоличествоПодчиненныхЗадач.Значение, 0) = 0
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ЕСТЬNULL(ДатыСтатусов.ВРаботе, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР МинимальныеСтатусыЗаявок.Статус
	|		КОГДА ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)
	|			ТОГДА ЕСТЬNULL(ДатыСтатусов.Решен, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|		КОГДА ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен)
	|			ТОГДА ЕСТЬNULL(ДатыСтатусов.Отклонен, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ДатаОкончания,
	|	""Документ.ЗаявкаНаРазработку"" КАК ПолноеИмяМетаданных,
	|	ВЫБОР ЕСТЬNULL(МинимальныеСтатусыЗаявок.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ПустаяСсылка))
	|		КОГДА ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Решен,
	|	&ТекущаяДатаСеанса КАК ФактическоеНачало,
	|	&ТекущаяДатаСеанса КАК ФактическоеОкончание,
	|	0 КАК ПлановоеНачало,
	|	0 КАК ПлановоеОкончание,
	|	ПриоритетыЗаявок.Порядок КАК Приоритет,
	|	ЗаявкаНаРазработку.Назначение КАК Назначение,
	|	ЗаявкаНаРазработку.СерьезностьОшибки КАК СерьезностьОшибки,
	|	ЕСТЬNULL(ЗначенияРеквизитовКуратор.Значение, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Ответственный,
	|	СистемыЗаявокНазначеныеПользователю.Филиал КАК Филиал
	|ПОМЕСТИТЬ ОтобранныеПодготовленныеЗаявки
	|ИЗ
	|	ОтобранныеЗаявки КАК ОтобранныеЗаявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО ОтобранныеЗаявки.Ссылка = ЗаявкаНаРазработку.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СистемыЗаявокНазначеныеПользователю КАК СистемыЗаявокНазначеныеПользователю
	|		ПО (СистемыЗаявокНазначеныеПользователю.Заявка = ЗаявкаНаРазработку.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
	|		ПО ОтобранныеЗаявки.Ссылка = МинимальныеСтатусыЗаявок.Заявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыСтатусов КАК ДатыСтатусов
	|		ПО ОтобранныеЗаявки.Ссылка = ДатыСтатусов.Заявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РешенныеЗадачиЗаявок КАК РешенныеЗадачиЗаявок
	|		ПО ОтобранныеЗаявки.Ссылка = РешенныеЗадачиЗаявок.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПриоритетыЗаявок КАК ПриоритетыЗаявок
	|		ПО ОтобранныеЗаявки.Ссылка = ПриоритетыЗаявок.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияДополнительныхРеквизитовОбъектов КАК КоличествоПодчиненныхЗадач
	|		ПО (КоличествоПодчиненныхЗадач.Объект = ЗаявкаНаРазработку.Ссылка)
	|			И (КоличествоПодчиненныхЗадач.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДополнительныхРеквизитов.КоличествоПодчиненныхЗадач))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияДополнительныхРеквизитовОбъектов КАК ЗначенияРеквизитовКуратор
	|		ПО (ЗначенияРеквизитовКуратор.Объект = ЗаявкаНаРазработку.Ссылка)
	|			И (ЗначенияРеквизитовКуратор.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДополнительныхРеквизитов.Куратор))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеПодготовленныеЗаявки.Ссылка КАК Ссылка,
	|	ОтобранныеПодготовленныеЗаявки.Представление КАК Представление,
	|	ОтобранныеПодготовленныеЗаявки.Наименование КАК Наименование,
	|	ОтобранныеПодготовленныеЗаявки.Статус КАК Статус,
	|	ОтобранныеПодготовленныеЗаявки.ДатаСоздания КАК ДатаСоздания,
	|	ОтобранныеПодготовленныеЗаявки.ПроцентВыполнения КАК ПроцентВыполнения,
	|	ОтобранныеПодготовленныеЗаявки.Назначена КАК Назначена,
	|	ОтобранныеПодготовленныеЗаявки.Заказчик КАК Заказчик,
	|	ОтобранныеПодготовленныеЗаявки.ДатаНачала КАК ДатаНачала,
	|	ОтобранныеПодготовленныеЗаявки.ДатаОкончания КАК ДатаОкончания,
	|	ОтобранныеПодготовленныеЗаявки.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных,
	|	ОтобранныеПодготовленныеЗаявки.Решен КАК Решен,
	|	ОтобранныеПодготовленныеЗаявки.ФактическоеНачало КАК ФактическоеНачало,
	|	ОтобранныеПодготовленныеЗаявки.ФактическоеОкончание КАК ФактическоеОкончание,
	|	ОтобранныеПодготовленныеЗаявки.ПлановоеНачало КАК ПлановоеНачало,
	|	ОтобранныеПодготовленныеЗаявки.ПлановоеОкончание КАК ПлановоеОкончание,
	|	ОтобранныеПодготовленныеЗаявки.Приоритет КАК Приоритет,
	|	ОтобранныеПодготовленныеЗаявки.Назначение КАК Назначение,
	|	ОтобранныеПодготовленныеЗаявки.СерьезностьОшибки КАК СерьезностьОшибки,
	|	ПРЕДСТАВЛЕНИЕ(ОтобранныеПодготовленныеЗаявки.Ответственный) КАК Ответственный,
	|	МАКСИМУМ(ЕСТЬNULL(ИсторияПубликацииЗадачСрезПоследних.ДатаИсторииХранилища, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК ДатаПубликации,
	|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК ВладелецПродукта,
	|	ОтобранныеПодготовленныеЗаявки.Филиал КАК Филиал,
	|	ТегиОбъектов.Тег КАК Теги
	|ПОМЕСТИТЬ ПодготовленныеДанные
	|ИЗ
	|	ОтобранныеПодготовленныеЗаявки КАК ОтобранныеПодготовленныеЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураПодчиненности КАК СтруктураПодчиненности
	|		ПО ОтобранныеПодготовленныеЗаявки.Ссылка = СтруктураПодчиненности.Родитель
	|			И (СтруктураПодчиненности.Объект ССЫЛКА Документ.Задача)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПубликацииЗадач.СрезПоследних КАК ИсторияПубликацииЗадачСрезПоследних
	|		ПО (СтруктураПодчиненности.Объект = ИсторияПубликацииЗадачСрезПоследних.Задача)
	|			И (СтруктураПодчиненности.Объект ССЫЛКА Документ.Задача)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТегиОбъектов КАК ТегиОбъектов
	|		ПО ОтобранныеПодготовленныеЗаявки.Ссылка = ТегиОбъектов.Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтобранныеПодготовленныеЗаявки.Ссылка,
	|	ОтобранныеПодготовленныеЗаявки.Представление,
	|	ОтобранныеПодготовленныеЗаявки.Наименование,
	|	ОтобранныеПодготовленныеЗаявки.Статус,
	|	ОтобранныеПодготовленныеЗаявки.ДатаСоздания,
	|	ОтобранныеПодготовленныеЗаявки.ПроцентВыполнения,
	|	ОтобранныеПодготовленныеЗаявки.Назначена,
	|	ОтобранныеПодготовленныеЗаявки.Заказчик,
	|	ОтобранныеПодготовленныеЗаявки.ДатаНачала,
	|	ОтобранныеПодготовленныеЗаявки.ДатаОкончания,
	|	ОтобранныеПодготовленныеЗаявки.ПолноеИмяМетаданных,
	|	ОтобранныеПодготовленныеЗаявки.Решен,
	|	ОтобранныеПодготовленныеЗаявки.ФактическоеНачало,
	|	ОтобранныеПодготовленныеЗаявки.ФактическоеОкончание,
	|	ОтобранныеПодготовленныеЗаявки.ПлановоеНачало,
	|	ОтобранныеПодготовленныеЗаявки.ПлановоеОкончание,
	|	ОтобранныеПодготовленныеЗаявки.Приоритет,
	|	ОтобранныеПодготовленныеЗаявки.Назначение,
	|	ОтобранныеПодготовленныеЗаявки.СерьезностьОшибки,
	|	ОтобранныеПодготовленныеЗаявки.Ответственный,
	|	ОтобранныеПодготовленныеЗаявки.Филиал,
	|	ТегиОбъектов.Тег
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнутреннееЗадание.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ВнутреннееЗадание.Ссылка),
	|	ВнутреннееЗадание.Наименование,
	|	ВнутреннееЗадание.Статус,
	|	ВнутреннееЗадание.Дата,
	|	ВнутреннееЗадание.ПроцентВыполнения,
	|	ВнутреннееЗадание.Назначена,
	|	ВнутреннееЗадание.Заказчик,
	|	ВЫБОР ВнутреннееЗадание.ДатаНачалаРазработки
	|		КОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВнутреннееЗадание.ПлановоеНачало
	|		ИНАЧЕ ВнутреннееЗадание.ДатаНачалаРазработки
	|	КОНЕЦ,
	|	ВЫБОР ВнутреннееЗадание.ДатаЗакрытия
	|		КОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВнутреннееЗадание.ИсполнитьДо
	|		ИНАЧЕ ВнутреннееЗадание.ДатаЗакрытия
	|	КОНЕЦ,
	|	""Документ.ВнутреннееЗадание"",
	|	ВЫБОР ВнутреннееЗадание.Статус
	|		КОГДА ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВнутреннееЗадание.ДатаНачалаРазработки,
	|	ВнутреннееЗадание.ДатаЗакрытия,
	|	ВнутреннееЗадание.ПлановоеНачало,
	|	ВнутреннееЗадание.ИсполнитьДо,
	|	ВнутреннееЗадание.Приоритет,
	|	"""",
	|	ЗНАЧЕНИЕ(Справочник.СерьезностьОшибок.ПустаяСсылка),
	|	"""",
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|	Продукты.Ответственный,
	|	ВнутреннееЗадание.Филиал,
	|	ТегиОбъектов.Тег
	|ИЗ
	|	Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Продукты КАК Продукты
	|		ПО ВнутреннееЗадание.Продукт = Продукты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТегиОбъектов КАК ТегиОбъектов
	|		ПО ВнутреннееЗадание.Ссылка = ТегиОбъектов.Объект
	|ГДЕ
	|	ВнутреннееЗадание.Ссылка В(&МассивВнутреннихЗаданий)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Проекты.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(Проекты.Ссылка),
	|	Проекты.Наименование,
	|	Проекты.Статус,
	|	Проекты.Дата,
	|	Проекты.ПроцентВыполнения,
	|	Проекты.Руководитель,
	|	Проекты.Заказчик,
	|	ВЫБОР
	|		КОГДА Проекты.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый)
	|			ТОГДА Проекты.ДатаПлановоеНачало
	|		ИНАЧЕ Проекты.ДатаНачалаРазработки
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Проекты.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен)
	|				ИЛИ Проекты.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)
	|			ТОГДА Проекты.ДатаЗавершения
	|		ИНАЧЕ Проекты.ДатаПлановоеОкончание
	|	КОНЕЦ,
	|	""Справочник.Проекты"",
	|	ВЫБОР Проекты.Статус
	|		КОГДА ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	Проекты.ДатаНачалаРазработки,
	|	Проекты.ДатаЗавершения,
	|	Проекты.ДатаПлановоеНачало,
	|	Проекты.ДатаПлановоеОкончание,
	|	Проекты.Порядок,
	|	"""",
	|	ЗНАЧЕНИЕ(Справочник.СерьезностьОшибок.ПустаяСсылка),
	|	"""",
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|	Продукты.Ответственный,
	|	Проекты.Филиал,
	|	ТегиОбъектов.Тег
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Продукты КАК Продукты
	|		ПО Проекты.Продукт = Продукты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТегиОбъектов КАК ТегиОбъектов
	|		ПО Проекты.Ссылка = ТегиОбъектов.Объект
	|ГДЕ
	|	Проекты.Ссылка В(&МассивПроектов)";
	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("МассивЗаявокНаРазработку", МассивыОбъектов.ЗаявкиНаРазработку);
	Запрос.УстановитьПараметр("МассивВнутреннихЗаданий", МассивыОбъектов.ВнутренниеЗадания);
	Запрос.УстановитьПараметр("МассивПроектов", МассивыОбъектов.Проекты);
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	
	Запрос.Выполнить();
	
	ИнтеграцияДополнительныхПодсистем.ДобавитьВРезультатЗапросаПоказательПриоритета(МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Таблица.Объект КАК Ссылка,
	|	Таблица.ОбъектОснование КАК ОбъектОснование
	|ПОМЕСТИТЬ ОтобранныеЗадачи
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодготовленныеДанные.Ссылка КАК Ссылка,
	|	ПодготовленныеДанные.Представление КАК Представление,
	|	ПодготовленныеДанные.Наименование КАК Наименование,
	|	ПодготовленныеДанные.Статус КАК Статус,
	|	ПодготовленныеДанные.ДатаСоздания КАК ДатаСоздания,
	|	ПодготовленныеДанные.ПроцентВыполнения КАК ПроцентВыполнения,
	|	ПодготовленныеДанные.Назначена КАК Назначена,
	|	ПодготовленныеДанные.Заказчик КАК Заказчик,
	|	ПодготовленныеДанные.ДатаНачала КАК ДатаНачала,
	|	ПодготовленныеДанные.ДатаОкончания КАК ДатаОкончания,
	|	ПодготовленныеДанные.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных,
	|	ПодготовленныеДанные.Решен КАК Решен,
	|	ПодготовленныеДанные.ФактическоеНачало КАК ФактическоеНачало,
	|	ПодготовленныеДанные.ФактическоеОкончание КАК ФактическоеОкончание,
	|	ПодготовленныеДанные.ПлановоеНачало КАК ПлановоеНачало,
	|	ПодготовленныеДанные.ПлановоеОкончание КАК ПлановоеОкончание,
	|	ПодготовленныеДанные.Ответственный КАК Ответственный,
	|	ПодготовленныеДанные.ДатаПубликации КАК ДатаПубликации,
	|	ЕСТЬNULL(СтатусыОбъектов.ИндексКартинки, 0) КАК ИндексКартинки,
	|	ЕСТЬNULL(ПоказателиПриоритета.ПолнотаДанных, ЛОЖЬ) КАК ПолнотаДанных,
	|	ВЫБОР
	|		КОГДА ПодготовленныеДанные.Приоритет = 0
	|			ТОГДА """"
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ПодготовленныеДанные.Приоритет)
	|	КОНЕЦ КАК Приоритет,
	|	ВЫБОР
	|		КОГДА ПодготовленныеДанные.СерьезностьОшибки = ЗНАЧЕНИЕ(Справочник.СерьезностьОшибок.ПустаяСсылка)
	|			ТОГДА НазначенияЗадач.Наименование
	|		ИНАЧЕ НазначенияЗадач.Наименование + "": "" + СерьезностьОшибок.Наименование
	|	КОНЕЦ КАК Назначение,
	|	ПодготовленныеДанные.ВладелецПродукта КАК ВладелецПродукта,
	|	ПодготовленныеДанные.Филиал КАК Филиал,
	|	ТегиОбъектов.Тег КАК Теги
	|ИЗ
	|	ПодготовленныеДанные КАК ПодготовленныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиПриоритета КАК ПоказателиПриоритета
	|		ПО ПодготовленныеДанные.Ссылка = ПоказателиПриоритета.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ПодготовленныеДанные.Статус = СтатусыОбъектов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НазначенияЗадач КАК НазначенияЗадач
	|		ПО ПодготовленныеДанные.Назначение = НазначенияЗадач.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерьезностьОшибок КАК СерьезностьОшибок
	|		ПО ПодготовленныеДанные.СерьезностьОшибки = СерьезностьОшибок.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТегиОбъектов КАК ТегиОбъектов
	|		ПО ПодготовленныеДанные.Ссылка = ТегиОбъектов.Объект;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеЗадачи.ОбъектОснование КАК ОбъектОснование,
	|	ОтобранныеЗадачи.Ссылка КАК Ссылка,
	|	СУММА(ЕСТЬNULL(Трудозатраты.Затрата, 0)) КАК Затрата
	|ИЗ
	|	ОтобранныеЗадачи КАК ОтобранныеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК Трудозатраты
	|		ПО ОтобранныеЗадачи.Ссылка = Трудозатраты.Объект
	|			И (Трудозатраты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтобранныеЗадачи.Ссылка,
	|	ОтобранныеЗадачи.ОбъектОснование";
	#КонецОбласти

	Запрос.УстановитьПараметр("Таблица", МассивыОбъектов.Задачи);
	Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
	
	Пакеты = Запрос.ВыполнитьПакет();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	Трудозатраты = Пакеты.Получить(Пакеты.Количество() - 1).Выгрузить();
	Трудозатраты.Индексы.Добавить("ОбъектОснование");
	
	Данные = Пакеты.Получить(Пакеты.Количество() - 2).Выгрузить();
	Данные.Индексы.Добавить("Ссылка");
	
	Результат = Новый Структура("Данные, Трудозатраты", Данные, Трудозатраты);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПрименитьОтборПоНазначению(Результат, ДополнительныеПараметры) Экспорт
	
	// Если пользователь отказался от применения настроек.
	Если Результат = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Назначения.Очистить();
	
	Для Каждого ЭлементСписка Из ОтборНазначения Цикл
		ЭлементСписка.Пометка = (Результат.Найти(ЭлементСписка.Значение) <> Неопределено);
	КонецЦикла;
	
	Для Каждого Назначение Из Результат Цикл
		Назначения.Добавить(Назначение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьОтборПоСтатусам(Результат, ДополнительныеПараметры) Экспорт
	
	// Если пользователь отказался от применения настроек.
	Если Результат = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Статусы.Очистить();
	
	Для Каждого ЭлементСписка Из ОтборСписокСтатусов Цикл
		ЭлементСписка.Пометка = (Результат.Найти(ЭлементСписка.Значение) <> Неопределено);
	КонецЦикла;
	
	Для Каждого Статус Из Результат Цикл
		Статусы.Добавить(Статус);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьОтборПоКолонкам(Результат, ДополнительныеПараметры) Экспорт
	
	// Если пользователь отказался от применения настроек.
	Если Результат = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из ОтборСписокКолонок Цикл
		ЭлементСписка.Пометка = (Результат.Найти(ЭлементСписка.Значение) <> Неопределено);
	КонецЦикла;
	
	Для Каждого Колонка ИЗ Элементы.ДеревоОбъектов.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Колонка) = Тип("ГруппаФормы") Тогда
			Для Каждого ПодчиненнаяКолонка ИЗ Колонка.ПодчиненныеЭлементы Цикл
				Если Результат.Найти(ПодчиненнаяКолонка.Имя) = Неопределено Тогда
					ПодчиненнаяКолонка.Видимость = Ложь;
				Иначе 
					ПодчиненнаяКолонка.Видимость = Истина;
				КонецЕсли;				
			КонецЦикла;
		Иначе
			Если Результат.Найти(Колонка.Имя) = Неопределено Тогда
				Колонка.Видимость = Ложь;
			Иначе 
				Колонка.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры

&НаСервере
Процедура РассчитатьТрудозатраты(Знач Объект, Знач ТаблицаТрудозатрат, Трудозатраты)
	
	НайденныеСтроки = ТаблицаТрудозатрат.НайтиСтроки(Новый Структура("ОбъектОснование", Объект));
	Для Каждого Строка Из НайденныеСтроки Цикл
		Трудозатраты = Трудозатраты + Строка.Затрата;
		РассчитатьТрудозатраты(Строка.Ссылка, ТаблицаТрудозатрат, Трудозатраты);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруПодчиненности(Знач Проекты)
	
	Дерево = РеквизитФормыВЗначение("ДеревоОбъектов", Тип("ДеревоЗначений"));
	Дерево.Строки.Очистить();
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ВнутреннееЗадание"));
	МассивТипов.Добавить(Тип("ДокументСсылка.Задача"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаявкаНаРазработку"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Проекты"));
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("ОбъектОснование", Новый ОписаниеТипов(МассивТипов));
	ТаблицаЗначений.Колонки.Добавить("Объект", Новый ОписаниеТипов(МассивТипов));
	
	СтруктураМассивов = Новый Структура;
	СтруктураМассивов.Вставить("ЗаявкиНаРазработку", Новый Массив);
	СтруктураМассивов.Вставить("ВнутренниеЗадания", Новый Массив);
	СтруктураМассивов.Вставить("Проекты", Новый Массив);
	СтруктураМассивов.Вставить("Задачи", ТаблицаЗначений);
	
	ВыбранныеНазначения = Новый Массив;
	Для Каждого ЭлементСписка Из ОтборНазначения Цикл
		Если ЭлементСписка.Пометка Тогда
			ВыбранныеНазначения.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Проект Из Проекты Цикл
		ЗаписатьПодчиненныеЭлементы(Проект, Дерево, СтруктураМассивов, 0);
		НаивысшийПроект = Проект;
	КонецЦикла;
	
	Результат = ПолучитьДанныеПоОбъектам(СтруктураМассивов);
	
	ЗаполнитьСтруктуруПодчиненности(Дерево, Результат.Данные, Результат.Трудозатраты);
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоОбъектов");
	
КонецПроцедуры

&НаКлиенте
Процедура ТегиПослеВыбора(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") 
		ИЛИ НЕ Результат.Модифицированность Тогда
		
		Возврат;
	КонецЕсли;
	
	ТегиПослеВыбораНаСервере(Результат.СписокТегов);
	
КонецПроцедуры

&НаСервере
Процедура ТегиПослеВыбораНаСервере(Знач Список)
	
	НаборТегов = Новый СписокЗначений;
	
	Для Каждого Строка Из Список Цикл
		Если Строка.Тег.Пустая() Тогда 
			СсылкаНаТег = Справочники.Теги.Добавить(Строка.ТегПредставление);
			Строка.Тег = СсылкаНаТег;
		Иначе	
			СсылкаНаТег = Строка.Тег;
		КонецЕсли;
		
		НаборТегов.Добавить(СсылкаНаТег);
	КонецЦикла;
	
	Теги = НаборТегов;
	
	СписокТегов.Загрузить(Список.Выгрузить());	

КонецПроцедуры

// Возвращает массив ссылок на подчиненные объекты.

&НаСервере
Функция ПолучитьПодчиненные(Знач Родитель)
				
	// Формируем массив выбранных статусов.
	ВыбранныеСтатусы = ПолучитьВыбранныеСтатусы(ОтборСписокСтатусов);
	
	Если ЗапросПодчиненныеСформирован = Неопределено Тогда
		
		ЗапросНаПодчиненные = Новый ПостроительЗапроса;	
		
		ТекстЗапросаПодчиненные =
		"ВЫБРАТЬ
		|	ЗаявкаНаРазработку.Ссылка КАК Ссылка,
		|	ЗаявкаНаРазработку.ДатаСоздания КАК ДатаСоздания
		|ПОМЕСТИТЬ ЗаявкиНеЧерновики
		|ИЗ
		|	РегистрСведений.СтруктураПодчиненности КАК СтруктураПодчиненности
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
		|		ПО (СтруктураПодчиненности.Объект = ЗаявкаНаРазработку.Ссылка)
		|			И (ЗаявкаНаРазработку.Черновик = ЛОЖЬ)
		|			И (ЗаявкаНаРазработку.Назначение В (&Назначения))
		|ГДЕ
		|	СтруктураПодчиненности.Родитель = &Родитель
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявкиНеЧерновики.Ссылка КАК Ссылка,
		|	ЗаявкиНеЧерновики.ДатаСоздания КАК ДатаСоздания
		|ПОМЕСТИТЬ ЗаявкиПоСтатусам
		|ИЗ
		|	РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаявкиНеЧерновики КАК ЗаявкиНеЧерновики
		|		ПО МинимальныеСтатусыЗаявок.Заявка = ЗаявкиНеЧерновики.Ссылка
		|			И (МинимальныеСтатусыЗаявок.Статус В (&ВыбранныеСтатусы))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторияМинимальныхСтатусовЗаявок.Заявка КАК Заявка,
		|	ИсторияМинимальныхСтатусовЗаявок.Период КАК Период,
		|	ИсторияМинимальныхСтатусовЗаявок.Статус КАК Статус
		|ПОМЕСТИТЬ ИсторияСтатусов
		|ИЗ
		|	ЗаявкиПоСтатусам КАК ЗаявкиПоСтатусам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияМинимальныхСтатусовЗаявок КАК ИсторияМинимальныхСтатусовЗаявок
		|		ПО ЗаявкиПоСтатусам.Ссылка = ИсторияМинимальныхСтатусовЗаявок.Заявка
		|			И (ИсторияМинимальныхСтатусовЗаявок.Статус В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ВРаботе), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен)))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторияСтатусов.Заявка КАК Заявка,
		|	МИНИМУМ(ИсторияСтатусов.Период) КАК ДатаСтатусаВРаботе,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаСтатусаРешен,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаСтатусаОтклонен
		|ПОМЕСТИТЬ ДатыСтатусовЗаявок
		|ИЗ
		|	ИсторияСтатусов КАК ИсторияСтатусов
		|ГДЕ
		|	ИсторияСтатусов.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ВРаботе)
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияСтатусов.Заявка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИсторияСтатусов.Заявка,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
		|	МИНИМУМ(ИсторияСтатусов.Период),
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|ИЗ
		|	ИсторияСтатусов КАК ИсторияСтатусов
		|ГДЕ
		|	ИсторияСтатусов.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияСтатусов.Заявка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИсторияСтатусов.Заявка,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
		|	МИНИМУМ(ИсторияСтатусов.Период)
		|ИЗ
		|	ИсторияСтатусов КАК ИсторияСтатусов
		|ГДЕ
		|	ИсторияСтатусов.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен)
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияСтатусов.Заявка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыСтатусовЗаявок.Заявка КАК Заявка,
		|	МАКСИМУМ(ДатыСтатусовЗаявок.ДатаСтатусаВРаботе) КАК ДатаВРаботе,
		|	МАКСИМУМ(ДатыСтатусовЗаявок.ДатаСтатусаРешен) КАК ДатаРешен,
		|	МАКСИМУМ(ДатыСтатусовЗаявок.ДатаСтатусаОтклонен) КАК ДатаОтклонен
		|ПОМЕСТИТЬ ДатыСтатусов
		|ИЗ
		|	ДатыСтатусовЗаявок КАК ДатыСтатусовЗаявок
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыСтатусовЗаявок.Заявка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявкиПоСтатусам.Ссылка КАК Ссылка,
		|	ЗаявкиПоСтатусам.ДатаСоздания КАК ДатаСоздания,
		|	ЕСТЬNULL(ДатыСтатусов.ДатаВРаботе, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаВРаботе,
		|	ЕСТЬNULL(ДатыСтатусов.ДатаРешен, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаРешен,
		|	ЕСТЬNULL(ДатыСтатусов.ДатаОтклонен, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаОтклонен
		|ПОМЕСТИТЬ ТаблицаЗаявок
		|ИЗ
		|	ЗаявкиПоСтатусам КАК ЗаявкиПоСтатусам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыСтатусов КАК ДатыСтатусов
		|		ПО ЗаявкиПоСтатусам.Ссылка = ДатыСтатусов.Заявка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаявкиПоСтатусам.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ЗатратыЗаявок
		|ИЗ
		|	ЗаявкиПоСтатусам КАК ЗаявкиПоСтатусам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураПодчиненности КАК СтруктураПодчиненности
		|		ПО (ЗаявкиПоСтатусам.Ссылка = СтруктураПодчиненности.Родитель)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК Трудозатраты
		|		ПО ((ВЫРАЗИТЬ(СтруктураПодчиненности.Объект КАК Документ.Задача)) = ВЫРАЗИТЬ(Трудозатраты.Объект КАК Документ.Задача))
		|			И (НАЧАЛОПЕРИОДА(Трудозатраты.Период, МЕСЯЦ) = &ДатаНачала)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗаявок.Ссылка КАК Объект,
		|	1000 КАК Приоритет
		|ИЗ
		|	ТаблицаЗаявок КАК ТаблицаЗаявок
		|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТегиОбъектов КАК ТегиОбъектов
		|		ПО ТаблицаЗаявок.Ссылка = ТегиОбъектов.Объект}
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ТаблицаЗаявок.ДатаСоздания < &ДатаНачала
		|				ТОГДА ТаблицаЗаявок.ДатаВРаботе МЕЖДУ &ДатаНачала И &ДатаОкончания
		|			ИНАЧЕ ТаблицаЗаявок.ДатаСоздания МЕЖДУ &ДатаНачала И &ДатаОкончания
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА ТаблицаЗаявок.ДатаРешен <> """"
		|					И ТаблицаЗаявок.ДатаРешен <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА ТаблицаЗаявок.ДатаРешен < &ДатаОкончания
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ТаблицаЗаявок.ДатаОтклонен <> """"
		|							И ТаблицаЗаявок.ДатаОтклонен <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА ТаблицаЗаявок.ДатаОтклонен < &ДатаОкончания
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|		КОНЕЦ
		|{ГДЕ
		|	ТегиОбъектов.Тег КАК Теги}
		|
		|ОБЪЕДИНИТЬ 
		|
		|ВЫБРАТЬ
		|	ЗатратыЗаявок.Ссылка,
		|	1000
		|ИЗ
		|	ЗатратыЗаявок КАК ЗатратыЗаявок
		|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТегиОбъектов КАК ТегиОбъектов
		|		ПО ЗатратыЗаявок.Ссылка = ТегиОбъектов.Объект} 
		|{ГДЕ
		|	ТегиОбъектов.Тег КАК Теги}
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтруктураПодчиненности.Объект,
		|	ВЫБОР
		|		КОГДА Проекты.Порядок = 0
		|			ТОГДА 1000
		|		ИНАЧЕ Проекты.Порядок
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.СтруктураПодчиненности КАК СтруктураПодчиненности
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|		ПО ((ВЫРАЗИТЬ(СтруктураПодчиненности.Объект КАК Справочник.Проекты)) = Проекты.Ссылка)
		|			И (Проекты.Статус В (&ВыбранныеСтатусы)) %3
		|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТегиОбъектов КАК ТегиОбъектов
		|		ПО СтруктураПодчиненности.Объект = ТегиОбъектов.Объект}
		|ГДЕ
		|	СтруктураПодчиненности.Родитель = &Родитель
		|	И СтруктураПодчиненности.Объект ССЫЛКА Справочник.Проекты
		|{ГДЕ
		|	ТегиОбъектов.Тег КАК Теги}
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВнутреннееЗадание.Ссылка,
		|	ВЫБОР
		|		КОГДА ВнутреннееЗадание.Приоритет = 0
		|			ТОГДА 1000
		|		ИНАЧЕ ВнутреннееЗадание.Приоритет
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.СтруктураПодчиненности КАК СтруктураПодчиненности
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
		|		ПО ((ВЫРАЗИТЬ(СтруктураПодчиненности.Объект КАК Документ.ВнутреннееЗадание)) = ВнутреннееЗадание.Ссылка)
		|			И (ВнутреннееЗадание.Статус В (&ВыбранныеСтатусы)) %1
		|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТегиОбъектов КАК ТегиОбъектов
		|		ПО ВнутреннееЗадание.Ссылка = ТегиОбъектов.Объект}
		|ГДЕ
		|	СтруктураПодчиненности.Родитель = &Родитель
		|	И СтруктураПодчиненности.Объект ССЫЛКА Документ.ВнутреннееЗадание
		|{ГДЕ
		|	ТегиОбъектов.Тег КАК Теги}
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Задача.Ссылка,
		|	1000
		|ИЗ
		|	РегистрСведений.СтруктураПодчиненности КАК СтруктураПодчиненности
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК Задача
		|		ПО ((ВЫРАЗИТЬ(СтруктураПодчиненности.Объект КАК Документ.Задача)) = Задача.Ссылка)
		|			И (Задача.Статус В (&ВыбранныеСтатусы)) %2
		|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТегиОбъектов КАК ТегиОбъектов
		|		ПО Задача.Ссылка = ТегиОбъектов.Объект}
		|ГДЕ
		|	СтруктураПодчиненности.Родитель = &Родитель
		|	И СтруктураПодчиненности.Объект ССЫЛКА Документ.Задача
		|{ГДЕ
		|	ТегиОбъектов.Тег КАК Теги}
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
		ЗапросНаПодчиненные.Параметры.Вставить("ВыбранныеСтатусы", ВыбранныеСтатусы);
		ЗапросНаПодчиненные.Параметры.Вставить("ТекущаяДата", ТекущаяДатаСеанса());
		ЗапросНаПодчиненные.Параметры.Вставить("Назначения", ВыбранныеНазначения);
		ЗапросНаПодчиненные.Параметры.Вставить("ДатаНачала", Период.ДатаНачала);
		ЗапросНаПодчиненные.Параметры.Вставить("ДатаОкончания", КонецДня(Период.ДатаОкончания));
		
		Если ЗначениеЗаполнено(ОтборСпециалист) И ВидОтбора = 1 Тогда 
			ТекстЗапросаПодчиненные = СтрШаблон(ТекстЗапросаПодчиненные, "И (ВнутреннееЗадание.Назначена = &Руководитель)", "И (Задача.Назначена = &Руководитель)", "И (Проекты.Руководитель = &Руководитель)");
			ЗапросНаПодчиненные.Параметры.Вставить("Руководитель", ОтборСпециалист);
		ИначеЕсли ЗначениеЗаполнено(ОтборСпециалист) Тогда
			ТекстЗапросаПодчиненные = СтрШаблон(ТекстЗапросаПодчиненные, "И (ВнутреннееЗадание.Назначена = &Руководитель)", "", "");
			ЗапросНаПодчиненные.Параметры.Вставить("Руководитель", ОтборСпециалист); 
		Иначе	
			ТекстЗапросаПодчиненные = СтрШаблон(ТекстЗапросаПодчиненные, "", "", "");
		КонецЕсли;
		
		ЗапросНаПодчиненные.Текст = ТекстЗапросаПодчиненные;
		ЗапросПодчиненныеСформирован = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Теги) Тогда
		ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ЗапросНаПодчиненные,
			"Теги", ВидСравнения.ВСписке, Теги);
	КонецЕсли;
	
	ЗапросНаПодчиненные.Параметры.Вставить("Родитель", Родитель);	
	 
	ЗапросНаПодчиненные.Выполнить();
	РезультатЗапроса = ЗапросНаПодчиненные.Результат;
	
	Результат = Новый Массив;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 
			Результат.Добавить(Выборка.Объект);
		КонецЦикла;	 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	
	
#КонецОбласти

#Область ЭкспортВExcel

//  Рекурсивная функция, перебирает строки дерева значений и записывает их
//  в табличный документ
&НаСервере
Процедура ВыводДерева(СтрокаДерева, Уровень = 0, Знач Колонки)			
	
	Для Каждого СтрокаОтчета Из СтрокаДерева.Строки Цикл
		НомерКолонки = 0;
		Отступ = 0;
		
		Для Счетчик = 1 По Уровень Цикл   
			Отступ = Отступ + 4;
		КонецЦикла;
		
		Индекс = 1;
		Для Каждого КолонкаОтчета ИЗ ОтборСписокКолонок Цикл
			
			Если НЕ КолонкаОтчета.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			ПредставлениеОбласти = "СтрокаПараметр|" + КолонкаОтчета.Значение;
			ВыводимаяОбласть = Макет.ПолучитьОбласть(ПредставлениеОбласти);
			
			Если КолонкаОтчета.Значение <> "ДеревоОбъектовСсылка" Тогда
				Секция.Параметры[КолонкаОтчета.Значение] = СтрокаОтчета[Сред(КолонкаОтчета.Значение, 15)];
			Иначе
				Секция.Параметры[КолонкаОтчета.Значение] = ОбщегоНазначения.ПолучитьHTTPСсылкуНаОбъект(СтрокаОтчета.Ссылка);
			КонецЕсли;
			
			Если КолонкаОтчета.Значение = "ДеревоОбъектовПредставление" Тогда
				Секция.Область(1, Индекс).Отступ = Отступ;		
			КонецЕсли;
			
				
			Если СтрокаОтчета.УровеньВложенности = 0 Тогда
				 Секция.Область(1, Индекс).ЦветФона = ЦветПервойГруппировки;
				 Секция.Область(1, Индекс).Шрифт = УвеличенныйШрифт;
			 ИначеЕсли СтрокаОтчета.УровеньВложенности = 1 Тогда
				 Секция.Область(1, Индекс).ЦветФона = ЦветВторойГруппировки;
				 Секция.Область(1, Индекс).Шрифт = УвеличенныйШрифт;
			 Иначе
				 Секция.Область(1, Индекс).ЦветФона = СинийЦвет;
				 Секция.Область(1, Индекс).Шрифт = Шрифт;
			КонецЕсли; 
			
			// Закрашиваем статусы
			Если КолонкаОтчета.Значение = "ДеревоОбъектовСтатус" Тогда
				
				Если СтрНайти("РешенЗакрытоТестированиеМасштабирование", СтрокаОтчета.Статус) Тогда
					Секция.Область(1, Индекс).ЦветФона = WebЦвета.НейтральноЗеленый;
				ИначеЕсли СтрНайти("ОтклоненПриостановлен", СтрокаОтчета.Статус) Тогда
					Если РозовыйЦвет = Неопределено Тогда
						РозовыйЦвет = Новый Цвет(255, 192, 203);
					КонецЕсли;
					Секция.Область(1, Индекс).ЦветФона = РозовыйЦвет;
				ИначеЕсли СтрНайти("Новый", СтрокаОтчета.Статус) Тогда
					Секция.Область(1, Индекс).ЦветФона = СинийЦвет;
				Иначе
					Секция.Область(1, Индекс).ЦветФона = WebЦвета.Лимонный;
				КонецЕсли;
		
			КонецЕсли;
		Индекс = Индекс + 1;	
		КонецЦикла;	
		
		ТабличныйДокумент.Вывести(Секция, Уровень+1);
		ВыводДерева(СтрокаОтчета, Уровень+1 ,Колонки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере  
Функция ПоместитьExcelФайлВоВременноеХранилище()
	
	Результат = Новый Структура;
	
	// Формируем табличный документ, заполняем его
	Дерево = РеквизитФормыВЗначение("ДеревоОбъектов");
	ТабличныйДокумент = Новый ТабличныйДокумент;	
	Макет = Отчеты.ПланПроектов.ПолучитьМакет("Основной");
	
	
	ОбластиМакета = Макет.Области;
	ОтборСписокКолонок.Добавить("ДеревоОбъектовСсылка", "Ссылка", Истина);
	
	// Удаление областей макета в соответствии с фильтром
	Индекс = ОбластиМакета.Количество() - 1;
	Пока Индекс >= 0  Цикл 
		ОбластьМакета = ОбластиМакета.Получить(Индекс);
		
		Если ОбластьМакета.Имя = "СтрокаШапка" ИЛИ
			 	ОбластьМакета.Имя = "СтрокаПараметр" Тогда
				Индекс = Индекс - 1;
			 Продолжить;	
		КонецЕсли;	 	
		
		НайденныйЭлемент = ОтборСписокКолонок.НайтиПоЗначению(ОбластьМакета.Имя);
		Если НайденныйЭлемент = Неопределено ИЛИ НЕ НайденныйЭлемент.Пометка Тогда
			 Макет.УдалитьОбласть(ОбластьМакета, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;	
		
		Индекс = Индекс - 1;
	КонецЦикла;	
	
	ОбластьШапка = Макет.ПолучитьОбласть("СтрокаШапка");
	ТабличныйДокумент.Вывести(ОбластьШапка);
	Секция = Макет.ПолучитьОбласть("СтрокаПараметр");	
	
	Шрифт = Новый Шрифт("Arial", 8);
	УвеличенныйШрифт = Новый Шрифт("Arial", 9, Истина);
	ЦветПервойГруппировки = Новый Цвет(129, 190, 248);
	ЦветВторойГруппировки = Новый Цвет(169, 208, 245);
	СинийЦвет			  = Новый Цвет(229, 237, 249);
	
	// Выводим дерево в табличный документ рекурсивной функцией
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
	ВыводДерева(Дерево, , Дерево.Колонки);	
	ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
	
	ОтборСписокКолонок.Удалить(ОтборСписокКолонок.Количество() - 1);
	
	// Записываем табличный документ в Excel файл, помещаем во временный каталог 
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".XLSX"); 
	Попытка
		ТабличныйДокумент.Записать(ИмяВременногоФайла , ТипФайлаТабличногоДокумента.XLSX);
	Исключение
		Результат.Вставить("Ошибка", "Не удалось сформировать файл" + ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	ИмяФайла = "План проектов " + Формат(ТекущаяДатаСеанса(),"ДЛФ=Д") + ".xlsx"; 
	Результат.Вставить("ИмяФайла", ИмяФайла);
	
	// Помещаем Excel файл в двоичные данные, затем удаляем его из временного каталога.
	ДвоичныеДанныеВложения = Новый ДвоичныеДанные(ИмяВременногоФайла);
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанныеВложения);
	Результат.Вставить("АдресФайла", АдресХранилища);
	
	// Удаление Excel файла из временного каталога на сервере
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЭкспортВExcel(Команда)
	
	РезультатПомещенияExcelФайла = ПоместитьExcelФайлВоВременноеХранилище();
	
	Если РезультатПомещенияExcelФайла.Свойство("Ошибка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПомещенияExcelФайла.Ошибка);
	Иначе
		ПолучитьФайл(РезультатПомещенияExcelФайла.АдресФайла, РезультатПомещенияExcelФайла.ИмяФайла, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Настройки

&НаСервере
Процедура ПередЗагрузкойПользовательскихНастроекНаСервере(Настройки)
	
	СтруктураСохраненныхРеквизитов = Настройки.ДополнительныеСвойства;
	
	Если СтруктураСохраненныхРеквизитов.Количество() <> 0 Тогда 
		ВидОтбора = СтруктураСохраненныхРеквизитов.ВидОтбора;
		
		Если НЕ СтруктураСохраненныхРеквизитов.Свойство("СсылкаНаФилиал") Тогда
			СтруктураСохраненныхРеквизитов.Вставить("СсылкаНаФилиал", Новый СписокЗначений);
		КонецЕсли;
		
		СсылкаНаФилиал = СтруктураСохраненныхРеквизитов.СсылкаНаФилиал;
		СсылкаНаФилиал.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Филиалы");
		СсылкаНаПроект = СтруктураСохраненныхРеквизитов.СсылкаНаПроект;
		СсылкаНаПроект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Проекты");
		
		// Нужно, чтобы не загружались старые настройки статусов.
		Если ТипЗнч(СтруктураСохраненныхРеквизитов.ОтборСписокСтатусов) = Тип("Структура") Тогда
			ОтборСписокСтатусов = СтруктураСохраненныхРеквизитов.ОтборСписокСтатусов.Статусы;
		КонецЕсли;
		
		Если СтруктураСохраненныхРеквизитов.Свойство("СписокКолонок") Тогда	
			ОтборСписокКолонок.ЗаполнитьПометки(Ложь);			
			МассивКолонок =  СтруктураСохраненныхРеквизитов.СписокКолонок.Колонки;
		
			Для Каждого ОтборКолонка Из ОтборСписокКолонок Цикл		
				Если МассивКолонок.Найти(ОтборКолонка.Значение) <> Неопределено Тогда			
					ОтборКолонка.Пометка = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Колонка Из Элементы.ДеревоОбъектов.ПодчиненныеЭлементы Цикл
				Если ТипЗнч(Колонка) = Тип("ГруппаФормы") Тогда
					Для Каждого ПодчиненнаяКолонка Из Колонка.ПодчиненныеЭлементы Цикл
						Если МассивКолонок.Найти(ПодчиненнаяКолонка.Имя) = Неопределено Тогда
							ПодчиненнаяКолонка.Видимость = Ложь;
						Иначе 
							ПодчиненнаяКолонка.Видимость = Истина;
						КонецЕсли;				
					КонецЦикла;
				Иначе
					Если МассивКолонок.Найти(Колонка.Имя) = Неопределено Тогда
						Колонка.Видимость = Ложь;
					Иначе 
						Колонка.Видимость = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;		
		КонецЕсли;
		
		Если ВидОтбора = 1 Тогда 
			Элементы.СсылкаНаПроект.Видимость = Истина;
			Элементы.СсылкаНаФилиал.Видимость = Ложь;
		Иначе
			Элементы.СсылкаНаФилиал.Видимость = Истина;
			Элементы.СсылкаНаПроект.Видимость = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	Настройки.ДополнительныеСвойства.Вставить("ВидОтбора", ВидОтбора);
	Настройки.ДополнительныеСвойства.Вставить("СсылкаНаФилиал", СсылкаНаФилиал);
	Настройки.ДополнительныеСвойства.Вставить("СсылкаНаПроект", СсылкаНаПроект);
	Настройки.ДополнительныеСвойства.Вставить("ОтборСписокСтатусов", Новый Структура("Статусы", ОтборСписокСтатусов));
	
	СписокКолонок = Новый Массив;
	
	Для Каждого Колонка Из ОтборСписокКолонок Цикл
		Если Колонка.Пометка Тогда
			СписокКолонок.Добавить(Колонка.Значение);
		КонецЕсли;			
	КонецЦикла;	
	
	Настройки.ДополнительныеСвойства.Вставить("СписокКолонок", Новый Структура("Колонки", СписокКолонок));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтандартныеНастройки(Команда)
	
	УстановитьСтандартныеНастройкиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтандартныеНастройкиНаСервере()  
	
	ВидОтбора = 1;	
	Элементы.СсылкаНаПроект.Видимость = Истина;
	Элементы.СсылкаНаФилиал.Видимость = Ложь;	
	СсылкаНаПроект.Очистить();
	СсылкаНаФилиал.Очистить();
	
	// Заполним список статусов всеми статусами.
	ЗаполнитьСписокСтатусов();
	
	// Заполним отбор по виду заявок по умолчанию
	ЗаполнитьНазначения();
	
	// Установка периода отбора текущим годом
	УстановитьПериодОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаПроектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборОбъектов", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ВыбранныеОбъекты", СсылкаНаПроект.ВыгрузитьЗначения());
	
	ОткрытьФорму("Отчет.ПланПроектов.Форма.ФормаВыбораОбъектов", ПараметрыОткрытия, ЭтотОбъект,,,, 
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборОбъектов(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда	
		СсылкаНаПроект.ЗагрузитьЗначения(Результат);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
