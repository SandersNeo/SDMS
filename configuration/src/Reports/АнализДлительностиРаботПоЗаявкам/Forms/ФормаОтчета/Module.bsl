///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗагрузитьПользовательскиеНастройки();
	
	Если ФормироватьПриОткрытии И ЗначениеЗаполнено(Период) И 
		(Направления.Количество() > 0 ИЛИ Системы.Количество() > 0 
		ИЛИ ГруппыЗаказчиков.Количество() > 0 ИЛИ Продукты.Количество() > 0)Тогда
		
		СформироватьНаСервере();
	
		Элементы.ПоказатьНастройки.Пометка = НЕ СкрыватьНастройкиПослеФормированияОтчета;
		Элементы.НастройкиОтчета.Видимость = НЕ СкрыватьНастройкиПослеФормированияОтчета;
	КонецЕсли;
	
	ИсключаемыеСтатусы.Добавить(Справочники.СтатусыОбъектов.Решен);
	ИсключаемыеСтатусы.Добавить(Справочники.СтатусыОбъектов.Отклонен);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ПоказатьНасторойки(Команда)
	
	НастройкиОткрыты = Элементы.ПоказатьНастройки.Пометка;
	
	Элементы.ПоказатьНастройки.Пометка = НЕ НастройкиОткрыты;
	Элементы.НастройкиОтчета.Видимость = НЕ НастройкиОткрыты;
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	Ошибки = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Ошибки.Добавить("Не заполнен период");
	КонецЕсли;		
		
	Если Направления.Количество() = 0 И Системы.Количество() = 0 
		И ГруппыЗаказчиков.Количество() = 0 И Продукты.Количество() = 0 Тогда
		
		Ошибки.Добавить("Не установлено ни одного отбора");
	КонецЕсли;	
		
	Если Ошибки.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрСоединить(Ошибки, Символы.ПС));
		Возврат;
	КонецЕсли;
	
	СкрытьНеактуальностьОтчета();
	СформироватьНаСервере();
	
	Элементы.ПоказатьНастройки.Пометка = НЕ СкрыватьНастройкиПослеФормированияОтчета;
	Элементы.НастройкиОтчета.Видимость = НЕ СкрыватьНастройкиПослеФормированияОтчета;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ГруппыЗаказчиковПриИзменении(Элемент)
	ПоказатьНеактуальностьОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ГруппыЗаказчиковНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбора("ГруппыЗаказчиков");

КонецПроцедуры

&НаКлиенте
Процедура НаправленияПриИзменении(Элемент)
	ПоказатьНеактуальностьОтчета();
КонецПроцедуры

&НаКлиенте
Процедура НаправленияНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбора("Направления");
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	ПоказатьНеактуальностьОтчета();	
КонецПроцедуры

&НаКлиенте
Процедура ПродуктыПриИзменении(Элемент)
	ПоказатьНеактуальностьОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ПродуктыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбора("Продукты");
		
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
		
	ПараметрыРасшифровки = ОбщегоНазначенияВызовСервера.ПолучитьПараметрыРасшифровки(ДанныеРасшифровки, Расшифровка);
	
	Если ПараметрыРасшифровки.Свойство("Заявка") Тогда
		ПоказатьЗначение(, ПараметрыРасшифровки.Заявка);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СистемыПриИзменении(Элемент)
	ПоказатьНеактуальностьОтчета();
КонецПроцедуры

&НаКлиенте
Процедура СистемыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ОткрытьФормуВыбора("Системы");

КонецПроцедуры

&НаКлиенте
Процедура СтатусыПриИзменении(Элемент)
	ПоказатьНеактуальностьОтчета();
КонецПроцедуры

&НаКлиенте
Процедура СтатусыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ОткрытьФормуВыбора("Статусы");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗагрузитьПользовательскиеНастройки()
	
	Ключи = ПолучитьКлючиНастроек();	
	СохраненныеНастройки = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(Ключи.КлючОбъекта, 
		Ключи.КлючНастроек);
	
	Если СохраненныеНастройки <> Неопределено Тогда
		Для Каждого Настройка Из СохраненныеНастройки Цикл
			ЭтотОбъект[Настройка.Ключ] = Настройка.Значение;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДополнительныеНастройкиСКД(СхемаКомпоновкиДанных, НастройкиСКД)
	
	ПараметрПериод = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));	
	ПараметрПериод.Значение = Период;
	
	ПараметрТекущаяДата = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТекущаяДата"));	
	ПараметрТекущаяДата.Значение = ТекущаяДата();
	
	ПараметрВыходные = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("УчитыватьВыходныеДни"));	
	ПараметрВыходные.Значение = УчитыватьВыходныеДни;
	
	ПараметрСистемы = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Системы"));	
	ПараметрСистемы.Значение = Системы;
	ПараметрСистемы.Использование = Системы.Количество() > 0;

	ПараметрСтатусы = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Статусы"));	
	ПараметрСтатусы.Значение = Статусы;
	ПараметрСтатусы.Использование = Статусы.Количество() > 0;

	Если Направления.Количество() > 0 Тогда	
		ОбщегоНазначения.ДобавитьЭлементОтбораКомпоновкиДанных(НастройкиСКД, "Направление", 
			ВидСравненияКомпоновкиДанных.ВСписке, Направления);
	КонецЕсли;
		
	СписокПродуктГруппаЗаказчиков = Новый СписокЗначений;
	
	Для Каждого Группа Из ГруппыЗаказчиков Цикл
		СписокПродуктГруппаЗаказчиков.Добавить(Группа.Значение);
	КонецЦикла;
	
	Для Каждого Продукт Из Продукты Цикл
		СписокПродуктГруппаЗаказчиков.Добавить(Продукт.Значение);
	КонецЦикла;
			
	Если СписокПродуктГруппаЗаказчиков.Количество() > 0 Тогда 
		ОбщегоНазначения.ДобавитьЭлементОтбораКомпоновкиДанных(НастройкиСКД, "СписокПродуктГруппаЗаказчиков", 
			ВидСравненияКомпоновкиДанных.ВСписке, СписокПродуктГруппаЗаказчиков);
	КонецЕсли; 
		
	Если СкрыватьРешенные Тогда		
		ОбщегоНазначения.ДобавитьЭлементОтбораКомпоновкиДанных(НастройкиСКД, "Статус", 
			ВидСравненияКомпоновкиДанных.НеВСписке, ИсключаемыеСтатусы);	
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ВидСравнения) И КоличествоДней > 0 Тогда
		ЭлементОформления = НастройкиСКД.УсловноеОформление.Элементы.Получить(0);
		ЭлементОформления.Использование = Истина;
				
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Получить(0);
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[ВидСравнения];
		ЭлементОтбора.ПравоеЗначение = КоличествоДней * 86400;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ВидСравненияПереходы) И КоличествоПереходов > 0 Тогда
		ЭлементОформления = НастройкиСКД.УсловноеОформление.Элементы.Получить(1);
		ЭлементОформления.Использование = Истина;
				
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Получить(0);
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[ВидСравненияПереходы];
		ЭлементОтбора.ПравоеЗначение = КоличествоПереходов;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбора(ИмяРеквизита)
	
	ПараметрыОткрытия = ИнтерфейсПриложенияКлиент.СформироватьПараметрыОткрытия();
	ПараметрыОткрытия[ИмяРеквизита].Значение = ЭтотОбъект[ИмяРеквизита];
	ПараметрыОткрытия[ИмяРеквизита].Использование = Истина;

	Если ИмяРеквизита = "Статусы" Тогда
		ПараметрыОткрытия.Статусы.Вставить("ИсключаемыеСтатусы", ИсключаемыеСтатусы);
	КонецЕсли;
		
	ДополнительныеПараметры = Новый Структура("ИмяРеквизита, КлючСтруктуры", ИмяРеквизита, "Выбранные" + ИмяРеквизита);	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораНастройки", ЭтотОбъект, ДополнительныеПараметры); 
	
	ИнтерфейсПриложенияКлиент.ОткрытьФормуНастройкиИнструментов(ЭтотОбъект, ПараметрыОткрытия, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНеактуальностьОтчета(Знач ТекстСообщения = "")
	
	Если ПустаяСтрока(ТекстСообщения) Тогда
		ТекстСообщения = "Настройки отчета изменены. 
			|Требуется повторное формирование очета";
	КонецЕсли;
	
	СкрытьНеактуальностьОтчета();
	
	Элементы.Результат.ОтображениеСостояния.Видимость = Истина;
	Элементы.Результат.ОтображениеСостояния.Текст = ТекстСообщения;
	Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	Элементы.Результат.ОтображениеСостояния.Картинка = БиблиотекаКартинок.Информация32;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлючиНастроек()
	
	КлючиНастроек = Новый Структура("КлючОбъекта, КлючНастроек");
	КлючиНастроек.КлючОбъекта = "Отчет.АнализДлительностиРаботПоЗаявкам";
	КлючиНастроек.КлючНастроек = "НастройкиОтчета";
	
	Возврат КлючиНастроек;
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораНастройки(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект[ДополнительныеПараметры.ИмяРеквизита] = Результат[ДополнительныеПараметры.КлючСтруктуры];
	ПоказатьНеактуальностьОтчета();

КонецПроцедуры

&НаСервере
Процедура СкомпоноватьОтчет()
	
	Результат.Очистить();
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
	СхемаКомпоновкиДанных = ОтчетОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Настройки = СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки;
	ИнициализироватьДополнительныеНастройкиСКД(СхемаКомпоновкиДанных, Настройки);
	
	ДанныеРасшифровкиКомпоновкиДанных = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	ЕстьФильтрПоВремени = ФильтроватьПоВремени И ЗначениеЗаполнено(ВидСравнения) И КоличествоДней > 0;
	ЕстьФильтрПоПереходам = ФильтроватьПоПереходам И ЗначениеЗаполнено(ВидСравненияПереходы) И КоличествоПереходов > 0;
	
	// Получу ограничение на заявки                                                            
	// Идея в том, что если хотя бы одна запись заявки попадает под ограничения по времени/переходам, то нужно отражать все записи
	// Так как на форме выбирают вид сравнения, то нельзя так просто прописать фильтрацию в СКД, поэтому 
	// сначала получаю все заявки, которые подходят под ограничения, а потом подставляю их как отбор.
	Если ЕстьФильтрПоВремени ИЛИ ЕстьФильтрПоПереходам Тогда	
		
		Если ЕстьФильтрПоПереходам Тогда 
			ОтборПереходы = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборПереходы.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Количество");
			ОтборПереходы.ВидСравнения   = ВидСравненияКомпоновкиДанных[ВидСравненияПереходы];
			ОтборПереходы.ПравоеЗначение = КоличествоПереходов;
			ОтборПереходы.Использование = Истина;
		КонецЕсли;
		
		Если ЕстьФильтрПоВремени Тогда 
			ОтборВремя = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборВремя.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВремяЧислом");
			ОтборВремя.ВидСравнения   = ВидСравненияКомпоновкиДанных[ВидСравнения];
			ОтборВремя.ПравоеЗначение = КоличествоДней * 86400;
			ОтборВремя.Использование = Истина;
		КонецЕсли;

		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);
		Запрос = Новый Запрос;
		Запрос.Текст = МакетКомпоновки.НаборыДанных[0].Запрос;
		
		Для Каждого Параметр Из МакетКомпоновки.ЗначенияПараметров Цикл
			Запрос.УстановитьПараметр(Параметр.Имя, Параметр.Значение);
		КонецЦикла;                
		
		РезультатЗаявки = Запрос.Выполнить().Выгрузить();          
		Заявки = Новый СписокЗначений;
		Заявки.ЗагрузитьЗначения(РезультатЗаявки.ВыгрузитьКолонку("Заявка"));  	
		
		Если ЕстьФильтрПоВремени Тогда 
			Настройки.Отбор.Элементы.Удалить(ОтборВремя);
		КонецЕсли;

		Если ЕстьФильтрПоПереходам Тогда 
			Настройки.Отбор.Элементы.Удалить(ОтборПереходы);
		КонецЕсли;
		
		НовыйОтбор = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Заявка");
		НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НовыйОтбор.ПравоеЗначение = Заявки;
		НовыйОтбор.Использование = Истина;
	КонецЕсли;  
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровкиКомпоновкиДанных);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровкиКомпоновкиДанных, Истина);			
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровкиКомпоновкиДанных, 
		ЭтотОбъект.УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНеактуальностьОтчета()
	
	Элементы.Результат.ОтображениеСостояния.Видимость = Ложь;
	Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНаСервере()
	
	СкомпоноватьОтчет();
	СохранитьПользовательскиеНастройки();
		
КонецПроцедуры
	
&НаСервере
Процедура СохранитьПользовательскиеНастройки()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("Период", Период);
	СтруктураНастроек.Вставить("Направления", Направления);
	СтруктураНастроек.Вставить("Системы", Системы);
	СтруктураНастроек.Вставить("ГруппыЗаказчиков", ГруппыЗаказчиков);
	СтруктураНастроек.Вставить("Продукты", Продукты);
	СтруктураНастроек.Вставить("Статусы", Статусы);
	СтруктураНастроек.Вставить("СкрыватьРешенные", СкрыватьРешенные);
	СтруктураНастроек.Вставить("УчитыватьВыходныеДни", УчитыватьВыходныеДни);
	СтруктураНастроек.Вставить("СкрыватьНастройкиПослеФормированияОтчета", СкрыватьНастройкиПослеФормированияОтчета);
	СтруктураНастроек.Вставить("ФормироватьПриОткрытии", ФормироватьПриОткрытии);
	СтруктураНастроек.Вставить("ФильтроватьПоВремени", ФильтроватьПоВремени);
	СтруктураНастроек.Вставить("ВидСравнения", ВидСравнения);
	СтруктураНастроек.Вставить("КоличествоДней", КоличествоДней);
	СтруктураНастроек.Вставить("ФильтроватьПоПереходам", ФильтроватьПоПереходам);
	СтруктураНастроек.Вставить("ВидСравненияПереходы", ВидСравненияПереходы);
	СтруктураНастроек.Вставить("КоличествоПереходов", КоличествоПереходов);
	
	Ключи = ПолучитьКлючиНастроек();
	
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(Ключи.КлючОбъекта, Ключи.КлючНастроек, СтруктураНастроек);
	
КонецПроцедуры

#КонецОбласти
