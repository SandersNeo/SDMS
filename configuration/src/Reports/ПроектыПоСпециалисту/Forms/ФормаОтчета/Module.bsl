///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем СоответствиеСтрокИКлючей; // Нужно для сопоставления плана проекта диаграмме Ганта

&НаКлиенте
Перем НастройкиФормы; // Пользовательские настройки

&НаКлиенте
Перем СохранитьРазвернутые; // Хранит индикатор того, что нужно сохранить состояние табличных частей

&НаКлиенте
Перем РедактированиеСтроки; // Признак редактирования поля в строке, для разделения изменений при перемещении строк

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПериодТрудозатрат.Вариант = ВариантСтандартногоПериода.ЭтаНеделя;
	НастройкиФормы = ЗагрузитьНастройкиФормы();
	ПрименитьНастройкиФормы(НастройкиФормы);
	
	Таблицы = Новый Массив;
    Таблицы.Добавить("Проекты");
	Таблицы.Добавить("Задачи");
	Таблицы.Добавить("ПланПроекта");
	
	Для Каждого ИмяТаблицы Из Таблицы Цикл
		ПрименитьНастройкиКолонок(ИмяТаблицы, НастройкиФормы);
	КонецЦикла;
	
	Если Специалисты.Количество() > 0 Тогда
		ИдентификаторыРазвернутых = ЗаполнитьДеревоПроектовИЗаданий(НастройкиФормы);
	КонецЕсли;
	
	ДанныеДляКлиента = Новый Структура("ИдентификаторыРазвернутых, НастройкиФормы", ИдентификаторыРазвернутых, НастройкиФормы);
	АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеДляКлиента, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДанныеДляКлиента = ПолучитьИзВременногоХранилища(АдресХранилища);
	НастройкиФормы = ДанныеДляКлиента.НастройкиФормы;
	РазвернутьСтроки("Проекты", ДанныеДляКлиента.ИдентификаторыРазвернутых);
	УдалитьИзВременногоХранилища(АдресХранилища);
	
	ПодключитьОбработчикОжидания("ПроверитьНеобходимостьСохранитьРазвернутостьСтрок", 30);
	ПодключитьОбработчикОжидания("Подключаемый_АвтосохранениеПланаПроекта", 600);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьДиаграмму" Тогда
		Если ВыбранныйОбъект = Параметр Тогда
			СоответствиеСтрокИКлючей = ЗаполнитьДиаграммуГанта();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменениеЗаписи" Тогда
		Модифицированность = Истина;
		Если ТипЗнч(Параметр) = Тип("Число") И Параметр <> 0 Тогда
			ПересчитатьПривязанныеЗаписи(Источник.Порядок, Параметр);
			АктуализироватьДерево();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменениеСпискаЗаинтересованныхЛиц" Тогда
		КоличествоЗаинтересованныхЛиц = ТаблицаЗаинтересованных.Количество();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗавершениеРаботы Тогда 
		Если Модифицированность Тогда
			Отказ = Истина;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект);						
			ПоказатьВопрос(Оповещение, "План проекта был изменен. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
			
		ИначеЕсли МатрицаТребованийИзменена Тогда
			Отказ = Истина;						
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросСохраненияМатрицыТребований", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, "Матрица требований изменена. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ГиперссылкаНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	Если Специалисты.Количество() = 1 Тогда
		ПараметрыОткрытия.Вставить("Специалист", Специалисты[0].Значение);
	КонецЕсли;
	
	Если Элемент = Элементы.ДекорацияСоздатьПроект Тогда
		ОткрытьФорму("Справочник.Проекты.ФормаОбъекта", ПараметрыОткрытия);
	Иначе
		ОткрытьФорму("Документ.ВнутреннееЗадание.ФормаОбъекта", ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ЗначениеЗаполнено(ВыбранныйОбъект) Тогда
		Если ТекущаяСтраница = Элементы.СтраницаДиаграммаГанта Тогда
			ДиаграммаГанта.Очистить();
			
			Если ПланПроекта.ПолучитьЭлементы().Количество() > 0 Тогда
				СоответствиеСтрокИКлючей = ЗаполнитьДиаграммуГанта();
				ДиаграммаГанта.ПоказатьУровеньТочек();
			КонецЕсли;	
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЗаинтересованныеЛица Тогда
			ОбщегоНазначенияКлиент.ОбновитьТаблицуЗаинтересованныхЛиц(ВыбранныйОбъект, ТаблицаЗаинтересованных);
			КоличествоЗаинтересованныхЛиц = ТаблицаЗаинтересованных.Количество();
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.СтраницаМатрицаТребований Тогда
		Если НЕ МатрицаТребованийИзменена Тогда
			ОбновитьМатрицуТребований();
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаГантаВыбор(Элемент, Значения, СтандартнаяОбработка, Дата)
	
	Если ТипЗнч(Значения) = Тип("Массив") Тогда
		КлючСобытия = Значения[0].Точка.Значение;
	ИначеЕсли ТипЗнч(Значения) = Тип("ЗначениеДиаграммыГанта") Тогда
		КлючСобытия = Значения.Точка.Значение;
	ИначеЕсли ТипЗнч(Значения) = Тип("ТочкаДиаграммыГанта") Тогда
		КлючСобытия = Значения.Значение;
	КонецЕсли;
	
	ТекущиеДанные = ПланПроекта.НайтиПоИдентификатору(СоответствиеСтрокИКлючей.Получить(КлючСобытия));
	ПланПроектаКлиент.НачатьРедактированиеСтроки(ПланПроекта, ТекущиеДанные, ВыбранныйОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаГантаПриОкончанииРедактированияИнтервала(Элемент, Интервал, ОтменаРедактирования)
	
	ДвенадцатьЧасов = 43200;
	
	Если Интервал.Начало - НачалоДня(Интервал.Начало) < ДвенадцатьЧасов Тогда
		Интервал.Начало = НачалоДня(Интервал.Начало);
	Иначе
		Интервал.Начало = КонецДня(Интервал.Начало) + 1;
	КонецЕсли;
	
	Если Интервал.Конец - НачалоДня(Интервал.Конец) < ДвенадцатьЧасов Тогда
		Если НачалоДня(Интервал.Конец) - 1 > Интервал.Начало Тогда
			Интервал.Конец = НачалоДня(Интервал.Конец) - 1;
		Иначе
			Интервал.Конец = КонецДня(Интервал.Начало);
		КонецЕсли;
	Иначе
		Интервал.Конец = КонецДня(Интервал.Конец);
	КонецЕсли;
	
	КлючСобытия = Интервал.Значение.Точка.Значение;
	
	СтрокаПлана = ПланПроекта.НайтиПоИдентификатору(СоответствиеСтрокИКлючей.Получить(КлючСобытия));
	СтрокаПлана.ДатаНачала_Факт = Интервал.Начало;
	СтрокаПлана.ДатаОкончания_Факт = Интервал.Конец;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("КлючСобытия", КлючСобытия);
	ДанныеЗаполнения.Вставить("ДатаНачала_Факт", Интервал.Начало);
	ДанныеЗаполнения.Вставить("ДатаОкончания_Факт", Интервал.Конец);
	
	ИзменитьЗаписьПланаДляДиаграммыГанта(ДанныеЗаполнения, ВыбранныйОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьЗаписьПланаДляДиаграммыГанта(ДанныеЗаполнения, Знач Владелец)
	
	МенеджерЗаписи = РегистрыСведений.ПланыВыполненияПроектов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.КлючСобытия = ДанныеЗаполнения.КлючСобытия;
	МенеджерЗаписи.Объект = Владелец;
	МенеджерЗаписи.Прочитать();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеЗаполнения, , "КлючСобытия");	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыборОбъекта(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПриАктивизацииСтроки(Элемент)

	ПриАктивизацииСтроки(Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура ПериодТрудозатратПриИзменении(Элемент)
	
	Трудозатраты = ЗаполнитьТрудозатраты(ПериодТрудозатрат, Специалисты, ВыбранныйОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПроектаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Поле.Имя = "ПланПроектаНазваниеСобытия" 
		ИЛИ Поле.Имя = "ПланПроектаПорядок"
		ИЛИ Поле.Имя = "ПланПроектаДокументы" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПланПроектаКлиент.НачатьРедактированиеСтроки(ПланПроекта, Элемент.ТекущиеДанные, 
			ВыбранныйОбъект, , Поле.Имя = "ПланПроектаДокументы");
			
	ИначеЕсли Поле.Имя = "ПланПроектаПредставлениеСтатуса" 
		И Элемент.ТекущиеДанные <> Неопределено 
		И Элемент.ТекущиеДанные.СписокДокументов.Количество() <> 1 Тогда
			
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораСтатуса", ЭтотОбъект, Элемент.ТекущиеДанные);
		ОткрытьФорму("Справочник.СтатусыОбъектов.ФормаВыбора", , , , , , 
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		Элементы.ПланПроектаПроцентВыполнения.ТолькоПросмотр = Элемент.ТекущиеДанные.ЭтоГруппа;
		Элементы.ПланПроектаДатаНачала_План.ТолькоПросмотр = Элемент.ТекущиеДанные.ЭтоГруппа;
		Элементы.ПланПроектаПланируемыйСрок.ТолькоПросмотр = Элемент.ТекущиеДанные.КонтрольнаяТочка ИЛИ Элемент.ТекущиеДанные.ЭтоГруппа;
		Элементы.ПланПроектаДатаОкончания_План.ТолькоПросмотр = Элемент.ТекущиеДанные.КонтрольнаяТочка ИЛИ Элемент.ТекущиеДанные.ЭтоГруппа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПроектаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ДобавленнаяСтрока = Элемент.ТекущиеДанные;
	Если ДобавленнаяСтрока <> Неопределено И ДобавленнаяСтрока.НоваяСтрока Тогда		
		Если ЗначениеЗаполнено(ДобавленнаяСтрока.НазваниеСобытия) Тогда		
			ДобавленнаяСтрока.НоваяСтрока = Ложь;
			ПланПроектаКлиент.ПересчитатьРодительскиеЗаписи(ДобавленнаяСтрока);			
		Иначе
			ПланПроектаКлиент.УдалитьТекущуюСтрокуПланПроекта(ПланПроекта, ДобавленнаяСтрока);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для добавления строки необходимо заполнить наименование");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПроектаДатаНачала_ПланПриИзменении(Элемент)
	
	РассчитатьДатаОкончания_План();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПроектаДатаНачала_ФактПриИзменении(Элемент)
	
	ПересчитатьРодительскиеЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПроектаДатаОкончания_ПланПриИзменении(Элемент)

	РедактированиеСтроки = Истина;
	ТекущиеДанные = Элементы.ПланПроекта.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала_План) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ДатаНачала_План > ТекущиеДанные.ДатаОкончания_План Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Дата окончания не должна быть меньше даты начала");
		ТекущиеДанные.ДатаОкончания_План = ТекущиеДанные.ДатаНачала_План;
	КонецЕсли;
	
	ДлительностьДоСмещения = ТекущиеДанные.ПланируемыйСрок;
	
	ТекущиеДанные.ПланируемыйСрок = ПланПроектаКлиент.РассчитатьПланируемыйСрок(
		ТекущиеДанные.ДатаНачала_План, ТекущиеДанные.ДатаОкончания_План);
		
	Смещение = ТекущиеДанные.ПланируемыйСрок - ДлительностьДоСмещения;
		
	Если Смещение <> 0 Тогда // пересчитать даты в записях, для которых изменяемая запись является предшественником	
		ПересчитатьПривязанныеЗаписи(ТекущиеДанные.Порядок, Смещение);
	КонецЕсли;

	АктуализироватьДерево(ТекущиеДанные.КлючСобытия);
		
КонецПроцедуры

&НаКлиенте
Процедура ПланПроектаДатаОкончания_ФактПриИзменении(Элемент)
	
	ПересчитатьРодительскиеЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПроектаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Отказ = Истина;
	
	Уровень = Элементы.ПланПроекта.ТекущиеДанные;
	
	Если Уровень = Неопределено Тогда
		Если ПланПроекта.ПолучитьЭлементы().Количество() > 0 Тогда
			Порядок = ПланПроектаКлиент.ПолучитьПоследнийПорядок(ПланПроекта);
		Иначе
			Порядок = 0;
		КонецЕсли;
		Уровень = ПланПроекта;
		
	ИначеЕсли Уровень.КонтрольнаяТочка Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя добавить подчиненные строки для контрольной точки");
		Возврат;
		
	Иначе
		Порядок = Уровень.Порядок + Уровень.ПолучитьЭлементы().Количество();
		РедактированиеСтроки = Истина;
	КонецЕсли;
	
	ДобавитьНовуюСтроку(Уровень, Порядок);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПроектаПередРазворачиванием(Элемент, Строка, Отказ)
	
	СохранитьРазвернутые.ПланПроекта = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПроектаПередСворачиванием(Элемент, Строка, Отказ)
	
	СохранитьРазвернутые.ПланПроекта = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПроектаПередУдалением(Элемент, Отказ)

	// Удаляем самостоятельно, а не стандартной обработкой.
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ПланПроекта.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("ТекущиеДанные", ТекущиеДанные);
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда	
		ТекстВопроса = "Строка содержит подчиненные строки. Удалить строку?"; 
	Иначе
		ТекстВопроса = "Удалить строку?"; 
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодтвержденияУдаленияПланПроекта", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПроектаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПланПроектаКлиент.ПланПеретаскивание(ЭтотОбъект, Элемент, СтандартнаяОбработка, Строка);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПроектаПланируемыйСрокПриИзменении(Элемент)
	
	РассчитатьДатаОкончания_План();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПроектаПредшественникПриИзменении(Элемент)
		
	РедактированиеСтроки = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ПланПроектаПриИзменении(Элемент)
	
	Если (НЕ Элемент.ТекущиеДанные.НоваяСтрока И НЕ РедактированиеСтроки) 
		ИЛИ (Элемент.ТекущиеДанные.НоваяСтрока И РедактированиеСтроки) Тогда
		
		ИзмененныеНомера = Новый Соответствие;	
		ПланПроектаКлиент.ПересчитатьПорядок(ПланПроекта.ПолучитьЭлементы(), ИзмененныеНомера);
		
		ПланПроектаКлиент.ОбработатьИзменениеПорядковИВладельцев(ПланПроекта.ПолучитьЭлементы(), ИзмененныеНомера);
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.НоваяСтрока Тогда
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.НазваниеСобытия) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Наименование события заполнено автоматически");
			Элемент.ТекущиеДанные.НазваниеСобытия = "Пустое наименование";
		Иначе
			Элементы.ПланПроектаНазваниеСобытия.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если РедактированиеСтроки Тогда
		РедактированиеСтроки = Ложь;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланПроектаПроцентВыполненияПриИзменении(Элемент)
	
	ПересчитатьРодительскиеЗаписи();
		
КонецПроцедуры

&НаКлиенте
Процедура ПланПроектаСписокФайловОткрытиеМножественногоЗначения(Элемент, Идентификатор, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ПланПроекта.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйФайл = ТекущиеДанные.СписокФайлов[Идентификатор].Значение;
	Если НЕ ЗначениеЗаполнено(ВыбранныйФайл) Тогда
		Возврат;
	КонецЕсли;	
	
	Файлы = Новый Массив;
	Файлы.Добавить(ВыбранныйФайл);
	РаботаСФайламиКлиент.НачатьСкачиваниеФайлов(Проект, Файлы, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПорядокДо(ЭлементыПлана)
	
	Для Каждого Строка Из ЭлементыПлана Цикл
		Строка.ПорядокДо = Строка.Порядок;
		ОбновитьПорядокДо(Строка.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыборОбъекта(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектыПередРазворачиванием(Элемент, Строка, Отказ)
	
	СохранитьРазвернутые.Проекты = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектыПередСворачиванием(Элемент, Строка, Отказ)
	
	СохранитьРазвернутые.Проекты = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектыПриАктивизацииСтроки(Элемент)
		
	ПриАктивизацииСтроки(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ВнестиТрудозатраты(Команда)
	
	Если НЕ ЗначениеЗаполнено(ВыбранныйОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Объект", ВыбранныйОбъект);
	ПараметрыОткрытия.Вставить("СкрытьСлужебныеПоля", Истина);
	ПараметрыОткрытия.Вставить("ПоказатьОбъект");
	
	ОткрытьФорму("Документ.Трудозатраты.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВФайл(Команда)
	
	РезультатПомещенияExcelФайла = ВыгрузитьПланыПроектовВExcel();
	
	Если РезультатПомещенияExcelФайла.ЕстьОшибка Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПомещенияExcelФайла.Ошибка);
	Иначе
		ПолучитьФайл(РезультатПомещенияExcelФайла.АдресФайла, РезультатПомещенияExcelФайла.ИмяФайла, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаявкиВПланПроекта(Команда)
	
	// TODO: Проверить необходимость функционала, выпилить, если он больше не требуется
	Если ЭтотОбъект.ТекущийЭлемент = Элементы.Проекты Тогда
		ТекущиеДанные = Элементы.Проекты.ТекущиеДанные;
	ИначеЕсли ЭтотОбъект.ТекущийЭлемент = Элементы.Задачи Тогда
		ТекущиеДанные = Элементы.Задачи.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Неопределено;
	КонецЕсли;  
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Объект) <> Тип("ДокументСсылка.ВнутреннееЗадание") Тогда
		ПоказатьПредупреждение(, "Добавить элементы плана проекта можно только на основании документа ""Внутреннее задание""");
		Возврат;
	КонецЕсли;   
	
	КорневыеСтрокиПланПроекта = ПланПроекта.ПолучитьЭлементы();
	
	КоличествоСтрок = КорневыеСтрокиПланПроекта.Количество();
	ИндексПоследнейСтроки = КоличествоСтрок - 1;
	
	Если КоличествоСтрок = 0 Тогда
		ПорядокСледующего = 1;
	Иначе
	    ПорядокСледующего = КорневыеСтрокиПланПроекта[ИндексПоследнейСтроки].Порядок + 1;
	КонецЕсли;
	
	Результат = ДобавитьЗаявкиВПланПроектаНаСервере(ТекущиеДанные.Объект, ПорядокСледующего); 
		
	Если Результат.Успешно Тогда
		ЗаполнитьПланПроекта();	
	Иначе
		ПоказатьПредупреждение(, Результат.ТекстОшибки);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтрольнуюТочку(Команда)
	
	ТекущиеДанные = Элементы.ПланПроекта.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.КонтрольнаяТочка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Контрольная точка не может быть родителем");
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.КонтрольнаяТочка = Истина;
	
	ТекущиеДанные.ПланируемыйСрок = 0;
	ТекущиеДанные.ДатаОкончания_План = ТекущиеДанные.ДатаНачала_План;
	ТекущиеДанные.ДатаОкончания_Факт = ТекущиеДанные.ДатаНачала_Факт;

	Модифицированность = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	Если ПланПроекта.ПолучитьЭлементы().Количество() > 0 Тогда
		Последнийпорядок = ПланПроектаКлиент.ПолучитьПоследнийПорядок(ПланПроекта);
	Иначе
		Последнийпорядок = 0;
	КонецЕсли;
	
	ДобавитьНовуюСтроку(ПланПроекта, Последнийпорядок);
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗадач(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеНастроекТаблиц", ЭтотОбъект, "Задачи");
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("НастройкиКолонок", НастройкиФормы.НастройкиКолонокЗадачи);
	ПараметрыОткрытия.Вставить("Колонки", НастройкиФормы.КолонкиЗадачи);
	ПараметрыОткрытия.Вставить("ВыбранныеСтатусы", НастройкиФормы.ВыбранныеСтатусыЗадачи);
		
	ОткрытьФорму("Отчет.ПроектыПоСпециалисту.Форма.НастройкиТаблиц", ПараметрыОткрытия, 
		ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПланПроекта(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеНастроекТаблиц", ЭтотОбъект, "ПланПроекта");
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("НастройкиКолонок", НастройкиФормы.НастройкиКолонокПланПроекта);
	ПараметрыОткрытия.Вставить("Колонки", НастройкиФормы.КолонкиПланПроекта);
	
	ОткрытьФорму("Отчет.ПроектыПоСпециалисту.Форма.НастройкиТаблиц", ПараметрыОткрытия, 
		ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПроектов(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеНастроекТаблиц", ЭтотОбъект, "Проекты");
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("НастройкиКолонок", НастройкиФормы.НастройкиКолонокПроекты);
	ПараметрыОткрытия.Вставить("Колонки", НастройкиФормы.КолонкиПроекты);
	ПараметрыОткрытия.Вставить("ВыбранныеСтатусы", НастройкиФормы.ВыбранныеСтатусыПроекты);
	
	ОткрытьФорму("Отчет.ПроектыПоСпециалисту.Форма.НастройкиТаблиц", ПараметрыОткрытия, 
		ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеНастроекСписка", ЭтотОбъект);
	
	ОткрытьФорму("Отчет.ПроектыПоСпециалисту.Форма.НастройкиСписка", НастройкиФормы, 
		ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДатуПлановогоОкончания(Команда)
	
	Если НЕ ЗначениеЗаполнено(ВыбранныйОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ПланПроектаВызовСервера.ПолучитьПлановуюДатуОкончания(ВыбранныйОбъект);
	
	Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
		Сообщить(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ДатаОкончания = Результат.ДатаОкончания_План;
	ОбновитьДатуПлановогоОкончанияНаСервере(ВыбранныйОбъект, ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПланПроекта(Команда)
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриОбновлении", ЭтотОбъект);						
		ПоказатьВопрос(Оповещение, "План проекта был изменен. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ОбновитьПлан();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовыситьУровеньЗаписи(Команда)
	
	ИзменяемаяСтрока = Элементы.ПланПроекта.ТекущиеДанные;

	Если ИзменяемаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Родитель = ИзменяемаяСтрока.ПолучитьРодителя(); 	
	Если Родитель <> Неопределено Тогда
		ЭлементыПлана = Родитель.ПолучитьЭлементы();
	Иначе
		ЭлементыПлана = ПланПроекта.ПолучитьЭлементы();
	КонецЕсли;	
	
	ПоследнийИндекс = ЭлементыПлана.Количество() - 1;
	НачальныйИндекс = ЭлементыПлана.Индекс(ИзменяемаяСтрока) + 1;

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекущиеДанные");
	ДопПараметры.Вставить("СтрокаПриемник", ИзменяемаяСтрока);
	ДопПараметры.Вставить("ПланПроекта", ПланПроекта);
	
	Пока ЭлементыПлана.Количество() > НачальныйИндекс Цикл	
		Если ИзменяемаяСтрока.ВладелецСобытия = ЭлементыПлана[НачальныйИндекс].ВладелецСобытия Тогда
			ЭлементыПлана[НачальныйИндекс].ВладелецСобытия = ИзменяемаяСтрока.КлючСобытия;
			ДопПараметры.ТекущиеДанные = ЭлементыПлана[НачальныйИндекс];
			ПланПроектаКлиент.ОбработатьВопросПеремещения("ПовыситьУровень", ДопПараметры);
		КонецЕсли;	
	КонецЦикла;

	ПланПроектаКлиент.ПересчитатьРодительскиеЗаписи(ИзменяемаяСтрока, Ложь);
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПонизитьУровеньЗаписи(Команда)
	
	ИзменяемаяСтрока = Элементы.ПланПроекта.ТекущиеДанные;
	
	Если ИзменяемаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ИзменяемаяСтрока.ПолучитьРодителя();
	
	Если Родитель <> Неопределено Тогда
		ЭлементыПлана = Родитель.ПолучитьЭлементы();
		ПредыдущийВладелец = Родитель.КлючСобытия;
	Иначе
		ЭлементыПлана = ПланПроекта.ПолучитьЭлементы();
		ПредыдущийВладелец = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КонецЕсли;
		
	ИндексИзменяемого = ЭлементыПлана.Индекс(ИзменяемаяСтрока);
	Если ИндексИзменяемого > 0 Тогда
		НовыйВладелец = ЭлементыПлана.Получить(ИндексИзменяемого - 1);
	
		ИзменяемаяСтрока.ВладелецСобытия = НовыйВладелец.КлючСобытия;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ТекущиеДанные", ИзменяемаяСтрока);
		ДопПараметры.Вставить("СтрокаПриемник", НовыйВладелец);
		ДопПараметры.Вставить("ПланПроекта", ПланПроекта);
		
		ПланПроектаКлиент.ОбработатьВопросПеремещения("ПовыситьУровень", ДопПараметры);
		ПланПроектаКлиент.ПересчитатьРодительскиеЗаписи(НовыйВладелец, Ложь);
	Иначе
		ТекстСообщения = "Нельзя понизить уровень записи, если перед ней нет записей того же уровня";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьУровеньГруппировки(Команда)
	
	ПланПроектаКлиент.РазвернутьУровеньГруппировки(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСтроку(Команда)
	
	ПланПроектаКлиент.НачатьРедактированиеСтроки(ПланПроекта, Элементы.ПланПроекта.ТекущиеДанные, ВыбранныйОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СдвигПериодаВперед(Команда)
	
	ПериодТрудозатрат = ОбщегоНазначенияКлиент.СдвигПериода(Команда.Имя, ПериодТрудозатрат);
	Трудозатраты = ЗаполнитьТрудозатраты(ПериодТрудозатрат, Специалисты, ВыбранныйОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СдвигПериодаНазад(Команда)
	
	ПериодТрудозатрат = ОбщегоНазначенияКлиент.СдвигПериода(Команда.Имя, ПериодТрудозатрат);
	Трудозатраты = ЗаполнитьТрудозатраты(ПериодТрудозатрат, Специалисты, ВыбранныйОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьЗаданияПоВозрастанию(Команда)
	
	СтрокаСортировки = СтрЗаменить(Элементы.Задачи.ТекущийЭлемент.Имя, "Задачи", "") + " Возр";
	СортироватьДерево("Задачи", СтрокаСортировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьЗаданияПоУбыванию(Команда)
	
	СтрокаСортировки = СтрЗаменить(Элементы.Задачи.ТекущийЭлемент.Имя, "Задачи", "") + " Убыв";
	СортироватьДерево("Задачи", СтрокаСортировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПроектыПоВозрастанию(Команда)
	
	СтрокаСортировки = СтрЗаменить(Элементы.Проекты.ТекущийЭлемент.Имя, "Проекты", "") + " Возр";
	СортироватьДерево("Проекты", СтрокаСортировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПроектыПоУбыванию(Команда)
	
	СтрокаСортировки = СтрЗаменить(Элементы.Проекты.ТекущийЭлемент.Имя, "Проекты", "") + " Убыв";
	СортироватьДерево("Проекты", СтрокаСортировки);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)

	ЗаписатьПланПроекта();
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	Если Модифицированность Тогда
		ДополнительныеПараметры = Новый Структура("СформироватьОтчет", Истина);
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект, ДополнительныеПараметры);						
		ПоказатьВопрос(Оповещение, "План проекта был изменен. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		СформироватьОтчет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтандартныйПериод(Команда)
	
	ПериодТрудозатрат.Вариант = ВариантСтандартногоПериода[Команда.Имя];
	Трудозатраты = ЗаполнитьТрудозатраты(ПериодТрудозатрат, Специалисты, ВыбранныйОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура АктуализироватьДерево(КлючСобытия = Неопределено)
	
	РазвернутыеСтроки = Неопределено;
	РазвернутыеСтроки = ПолучитьРазвернутыеСтроки("ПланПроекта", "КлючСобытия");
	
	РазвернутьСтроки("ПланПроекта", ПолучитьИдентификаторыРазвернутых(Неопределено, Неопределено));
	
	Идентификатор = Неопределено;
	Для Каждого Строка Из ПланПроекта.ПолучитьЭлементы() Цикл
		ПланПроектаКлиент.ПересчитатьРодительскиеЗаписи(Строка, Ложь, Истина, КлючСобытия, Идентификатор);		
	КонецЦикла;
	
	Элементы.ПланПроекта.ТекущаяСтрока = Идентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборОбъекта(ЭлементФормы)
	
	ТекущиеДанные = ЭлементФормы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтерфейсПриложенияКлиент.ОткрытьОбъектОснованиеВНовомОкне(ТекущиеДанные.Объект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиПодчиненныеСтроки(ТабличныйДокумент, Знач КлючСобытия, Знач ПорядокВладельца,
	Знач ПодчиненныеСтроки, Знач ЦветаСтатусов, Знач ОбластьСтрока)
	
	ПодчиненныеВладельцу = ПодчиненныеСтроки.НайтиСтроки(Новый Структура("ВладелецСобытия", КлючСобытия));
	ПорядковыйНомер = 1;
	
	Если ПодчиненныеВладельцу.Количество() > 0 Тогда
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеВладельцу Цикл
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, ПодчиненнаяСтрока, , "Порядок");
			ЗаполнитьДокументыИСтатус(ОбластьСтрока, ПодчиненнаяСтрока.Строки, ЦветаСтатусов);
			
			Порядок = СтрШаблон("%1.%2", ПорядокВладельца, ПорядковыйНомер);
			ОбластьСтрока.Параметры.Порядок = Порядок;
			ПорядковыйНомер = ПорядковыйНомер + 1;
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			Если ПодчиненныеСтроки <> Неопределено Тогда
				ВывестиПодчиненныеСтроки(ТабличныйДокумент, ПодчиненнаяСтрока.КлючСобытия, 
					Порядок, ПодчиненныеСтроки, ЦветаСтатусов, ОбластьСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьПланыПроектовВExcel()
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибка", Ложь);
	Результат.Вставить("Ошибка", "");
	Результат.Вставить("ИмяФайла", "");
	Результат.Вставить("АдресФайла", "");
	
	Если Проекты.ПолучитьЭлементы().Количество() = 0 И Задачи.ПолучитьЭлементы().Количество() = 0 Тогда
		Результат.ЕстьОшибка = Истина;
		Результат.Ошибка = "Списки проектов и внутренних заданий пустые.";
		Возврат Результат;
	КонецЕсли;
	
	СписокОбъектов = Новый СписокЗначений;
	
	ЗаполнитьСписокОбъектов(СписокОбъектов, Проекты.ПолучитьЭлементы());
	ЗаполнитьСписокОбъектов(СписокОбъектов, Задачи.ПолучитьЭлементы());
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланыВыполненияПроектов.Объект КАК Объект,
	|	ПланыВыполненияПроектов.КлючСобытия КАК КлючСобытия,
	|	ПланыВыполненияПроектов.ВладелецСобытия КАК ВладелецСобытия,
	|	ПланыВыполненияПроектов.НазваниеСобытия КАК НазваниеСобытия,
	|	ПланыВыполненияПроектов.ДатаНачала_План КАК ДатаНачала_План,
	|	ПланыВыполненияПроектов.ДатаОкончания_План КАК ДатаОкончания_План,
	|	ПланыВыполненияПроектов.ДатаНачала_Факт КАК ДатаНачала_Факт,
	|	ПланыВыполненияПроектов.ДатаОкончания_Факт КАК ДатаОкончания_Факт,
	|	ПланыВыполненияПроектов.Комментарий КАК Комментарий,
	|	ПланыВыполненияПроектов.Порядок КАК Порядок
	|ПОМЕСТИТЬ ПланыПроектов
	|ИЗ
	|	РегистрСведений.ПланыВыполненияПроектов КАК ПланыВыполненияПроектов
	|ГДЕ
	|	ПланыВыполненияПроектов.Объект В(&СписокОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланыПроектов.КлючСобытия КАК КлючСобытия,
	|	ДокументыПланаПроекта.Документ КАК Документ,
	|	ЕСТЬNULL(МинимальныеСтатусыЗаявок.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый)) КАК Статус
	|ПОМЕСТИТЬ СобытияСДокументами
	|ИЗ
	|	ПланыПроектов КАК ПланыПроектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПланаПроекта КАК ДокументыПланаПроекта
	|		ПО ПланыПроектов.КлючСобытия = ДокументыПланаПроекта.КлючСобытия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО ((ВЫРАЗИТЬ(ДокументыПланаПроекта.Документ КАК Документ.ЗаявкаНаРазработку)) = ЗаявкаНаРазработку.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
	|		ПО (ЗаявкаНаРазработку.Ссылка = МинимальныеСтатусыЗаявок.Заявка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланыПроектов.КлючСобытия,
	|	ДокументыПланаПроекта.Документ,
	|	ВнутреннееЗадание.Статус
	|ИЗ
	|	ПланыПроектов КАК ПланыПроектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПланаПроекта КАК ДокументыПланаПроекта
	|		ПО ПланыПроектов.КлючСобытия = ДокументыПланаПроекта.КлючСобытия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
	|		ПО ((ВЫРАЗИТЬ(ДокументыПланаПроекта.Документ КАК Документ.ВнутреннееЗадание)) = ВнутреннееЗадание.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланыПроектов.КлючСобытия,
	|	ДокументыПланаПроекта.Документ,
	|	Проекты.Статус
	|ИЗ
	|	ПланыПроектов КАК ПланыПроектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПланаПроекта КАК ДокументыПланаПроекта
	|		ПО ПланыПроектов.КлючСобытия = ДокументыПланаПроекта.КлючСобытия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
	|		ПО ((ВЫРАЗИТЬ(ДокументыПланаПроекта.Документ КАК Справочник.Проекты)) = Проекты.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыПроектов.Объект КАК Объект,
	|	ПланыПроектов.КлючСобытия КАК КлючСобытия,
	|	ПланыПроектов.НазваниеСобытия КАК НазваниеСобытия,
	|	ПланыПроектов.ДатаНачала_План КАК ДатаНачала_План,
	|	ПланыПроектов.ДатаОкончания_План КАК ДатаОкончания_План,
	|	ПланыПроектов.ДатаНачала_Факт КАК ДатаНачала_Факт,
	|	ПланыПроектов.ДатаОкончания_Факт КАК ДатаОкончания_Факт,
	|	ЕСТЬNULL(СобытияСДокументами.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ПустаяСсылка)) КАК Статус,
	|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(СобытияСДокументами.Статус), """") КАК СтатусПредставление,
	|	ЕСТЬNULL(СобытияСДокументами.Документ, """") КАК Документ,
	|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(СобытияСДокументами.Документ), """") КАК ДокументПредставление,
	|	ПланыПроектов.Комментарий КАК Комментарий,
	|	ПланыПроектов.Порядок КАК Порядок
	|ИЗ
	|	ПланыПроектов КАК ПланыПроектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ СобытияСДокументами КАК СобытияСДокументами
	|		ПО ПланыПроектов.КлючСобытия = СобытияСДокументами.КлючСобытия
	|ГДЕ
	|	ПланыПроектов.ВладелецСобытия = &ПустойИдентификатор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|ИТОГИ
	|	МИНИМУМ(НазваниеСобытия),
	|	МИНИМУМ(ДатаНачала_План),
	|	МИНИМУМ(ДатаОкончания_План),
	|	МИНИМУМ(ДатаНачала_Факт),
	|	МИНИМУМ(ДатаОкончания_Факт),
	|	МИНИМУМ(Комментарий),
	|	МИНИМУМ(Порядок)
	|ПО
	|	Объект,
	|	КлючСобытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыПроектов.Объект КАК Объект,
	|	ПланыПроектов.КлючСобытия КАК КлючСобытия,
	|	ПланыПроектов.ВладелецСобытия КАК ВладелецСобытия,
	|	ПланыПроектов.НазваниеСобытия КАК НазваниеСобытия,
	|	ПланыПроектов.ДатаНачала_План КАК ДатаНачала_План,
	|	ПланыПроектов.ДатаОкончания_План КАК ДатаОкончания_План,
	|	ПланыПроектов.ДатаНачала_Факт КАК ДатаНачала_Факт,
	|	ПланыПроектов.ДатаОкончания_Факт КАК ДатаОкончания_Факт,
	|	ЕСТЬNULL(СобытияСДокументами.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ПустаяСсылка)) КАК Статус,
	|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(СобытияСДокументами.Статус), """") КАК СтатусПредставление,
	|	ЕСТЬNULL(СобытияСДокументами.Документ, """") КАК Документ,
	|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(СобытияСДокументами.Документ), """") КАК ДокументПредставление,
	|	ПланыПроектов.Комментарий КАК Комментарий,
	|	ПланыПроектов.Порядок КАК Порядок
	|ИЗ
	|	ПланыПроектов КАК ПланыПроектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ СобытияСДокументами КАК СобытияСДокументами
	|		ПО ПланыПроектов.КлючСобытия = СобытияСДокументами.КлючСобытия
	|ГДЕ
	|	ПланыПроектов.ВладелецСобытия <> &ПустойИдентификатор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|ИТОГИ
	|	МИНИМУМ(ВладелецСобытия),
	|	МИНИМУМ(НазваниеСобытия),
	|	МИНИМУМ(ДатаНачала_План),
	|	МИНИМУМ(ДатаОкончания_План),
	|	МИНИМУМ(ДатаНачала_Факт),
	|	МИНИМУМ(ДатаОкончания_Факт),
	|	МИНИМУМ(Комментарий),
	|	МИНИМУМ(Порядок)
	|ПО
	|	Объект,
	|	КлючСобытия";
	
	Запрос.УстановитьПараметр("СписокОбъектов", СписокОбъектов);
	Запрос.УстановитьПараметр("ПустойИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Если Пакет[2].Пустой() Тогда
		Результат.ЕстьОшибка = Истина;
		Результат.Ошибка = "У данных проектов не заполнены планы проектов.";
		Возврат Результат;
	КонецЕсли;
	
	ЦветаСтатусов = ПолучитьСоответствиеЦветаСтатусу();
	
	СтраницыДокумента = Новый ПакетОтображаемыхДокументов;
	
	Макет = Отчеты.ПроектыПоСпециалисту.ПолучитьМакет("МакетПланПроекта");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	ДеревоОбъектов = Пакет[2].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ДеревоПодчиненных = Пакет[3].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Для Каждого ОбъектСписка Из СписокОбъектов Цикл
		ТабличныйДокумент = Новый ТабличныйДокумент;
		
		СтрокаОбъекта = ДеревоОбъектов.Строки.Найти(ОбъектСписка.Значение, "Объект");
		Если СтрокаОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьШапка.Параметры.НаименованиеОбъекта = ОбъектСписка.Представление;
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		СтрокаВладелецПодчиненных = ДеревоПодчиненных.Строки.Найти(ОбъектСписка.Значение, "Объект");
		Если СтрокаВладелецПодчиненных <> Неопределено Тогда
			ПодчиненныеСтроки = СтрокаВладелецПодчиненных.Строки;
		Иначе
			ПодчиненныеСтроки = Неопределено;
		КонецЕсли;
		
		Порядок = 1;		
		Для Каждого ЭлементПлана Из СтрокаОбъекта.Строки Цикл
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, ЭлементПлана, , "Порядок");
			ОбластьСтрока.Параметры.Порядок = Порядок;
			ЗаполнитьДокументыИСтатус(ОбластьСтрока, ЭлементПлана.Строки, ЦветаСтатусов);
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			Если ПодчиненныеСтроки <> Неопределено Тогда
				ВывестиПодчиненныеСтроки(ТабличныйДокумент, ЭлементПлана.КлючСобытия, Порядок,
					ПодчиненныеСтроки, ЦветаСтатусов, ОбластьСтрока);
			КонецЕсли;
			Порядок = Порядок + 1;
		КонецЦикла;

		Страница = СтраницыДокумента.Состав.Добавить();
		Страница.Наименование = ОбъектСписка.Представление;
		Страница.Данные = ПоместитьВоВременноеХранилище(ТабличныйДокумент);
	КонецЦикла;
	
	// Записываем табличный документ в Excel файл, помещаем во временный каталог 
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".XLSX"); 
	Попытка
		СтраницыДокумента.Записать(ИмяВременногоФайла, ТипФайлаПакетаОтображаемыхДокументов.XLSX);// ТипФайлаТабличногоДокумента.XLSX);
	Исключение
		Результат.ЕстьОшибка = Истина;
		Результат.Ошибка = "Не удалось сформировать файл" + ОписаниеОшибки();
		Возврат Результат;
	КонецПопытки;
	
	ИмяФайла = "Планы проектов " + Строка(Специалисты) + " " + Формат(ТекущаяДатаСеанса(), "ДЛФ=Д") + ".xlsx"; 
	Результат.ИмяФайла = ИмяФайла;
	
	// Помещаем Excel файл в двоичные данные, затем удаляем его из временного каталога.
	ДвоичныеДанныеВложения = Новый ДвоичныеДанные(ИмяВременногоФайла);
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанныеВложения);
	УдалитьФайлы(ИмяВременногоФайла);
	Результат.АдресФайла = АдресХранилища;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДобавитьЗаявкиВПланПроектаНаСервере(Знач Объект, Знач Порядок)
	
	Возврат РегистрыСведений.ПланыВыполненияПроектов.СоздатьСтрокиНаОсновании(Объект, Порядок);	
	
КонецФункции

&НаКлиенте
Процедура ДобавитьНовуюСтроку(Уровень, Порядок)
	
	НоваяСтрока = Уровень.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Порядок = Порядок + 1;
	НоваяСтрока.ПорядокДо = НоваяСтрока.Порядок;
	НоваяСтрока.НоваяСтрока = Истина;
	НоваяСтрока.КлючСобытия = Новый УникальныйИдентификатор;
	НоваяСтрока.ПроцентВыполнения = 0;
	НоваяСтрока.ЭтоГруппа = Ложь;
	НоваяСтрока.Статус = ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Новый");
	НоваяСтрока.ПредставлениеСтатуса = "Новый";
	
	Если ТипЗнч(Уровень) = Тип("ДанныеФормыДерево") Тогда
		НоваяСтрока.ВладелецСобытия = Неопределено;
		НоваяСтрока.СтрокаПервогоУровня = Истина;
	Иначе
		НоваяСтрока.ВладелецСобытия = Уровень.КлючСобытия;
		НоваяСтрока.СтрокаПервогоУровня = Ложь;
	КонецЕсли;
	
	Элементы.ПланПроекта.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.ПланПроекта.ТекущийЭлемент = Элементы.ПланПроектаНазваниеСобытия;
	Элементы.ПланПроектаНазваниеСобытия.ТолькоПросмотр = Ложь;
	Элементы.ПланПроекта.ИзменитьСтроку();	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформлениеУчастия(НастройкиФормы)
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаИдентификаторов) Тогда
		ИдентификаторыУсловногоОформления = ПолучитьИзВременногоХранилища(АдресХранилищаИдентификаторов);
		
		Если ЗначениеЗаполнено(ИдентификаторыУсловногоОформления) Тогда
			Для Каждого Идентификатор Из ИдентификаторыУсловногоОформления Цикл
				Элемент = УсловноеОформление.ПолучитьОбъектПоИдентификатору(Идентификатор);
				УсловноеОформление.Элементы.Удалить(Элемент);
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторыУсловногоОформления = Новый Массив;
	ИсключающееУсловие = Новый Массив;
	
	Для Каждого Роль Из НастройкиФормы.НастройкиУчастия Цикл
		ЦветФона = НастройкиФормы.ПодсветкаРолей.Получить(Роль.Значение);
		
		Если ЦветФона = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		Идентификатор = ДобавитьЭлементУсловногоОформления(Роль, ЦветФона, "Проекты", ИсключающееУсловие);
		ИдентификаторыУсловногоОформления.Добавить(Идентификатор);
		
		Идентификатор = ДобавитьЭлементУсловногоОформления(Роль, ЦветФона, "Задачи", ИсключающееУсловие);
		ИдентификаторыУсловногоОформления.Добавить(Идентификатор);
		
		ИсключающееУсловие.Добавить(Роль.Представление);
	КонецЦикла;
	
	АдресХранилищаИдентификаторов = ПоместитьВоВременноеХранилище(ИдентификаторыУсловногоОформления, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ДобавитьЭлементУсловногоОформления(Роль, ЦветФона, Таблица, ИсключающееУсловие)
	
	ЭлементУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	
	ГруппаОтбора = ЭлементУсловноеОформление.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.Использование = Истина;
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ИмяПоля = СтрШаблон("%1.Участие", Таблица);
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбора.ПравоеЗначение = Роль.Представление;
	ЭлементОтбора.Использование = Истина;
	
	Для Каждого ИсключаемаяРоль Из ИсключающееУсловие Цикл
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит;
		ЭлементОтбора.ПравоеЗначение = ИсключаемаяРоль;
		ЭлементОтбора.Использование = Истина;
	КонецЦикла;
	
	Элемент = ЭлементУсловноеОформление.Поля.Элементы.Добавить();
	Элемент.Поле = Новый ПолеКомпоновкиДанных(Таблица);
	Элемент.Использование = Истина;
	
	ЭлементОформления = ЭлементУсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветФона"));
	ЭлементОформления.Значение = ЦветФона;
	ЭлементОформления.Использование = Истина;
	
	Возврат УсловноеОформление.ПолучитьИдентификаторПоОбъекту(ЭлементУсловноеОформление);
	
КонецФункции 

&НаСервере
Функция ЗагрузитьНастройкиФормы()
	
	Ключи = ПолучитьКлючиНастроек("НастройкиОтчета");
	СохраненныеНастройки = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(Ключи.КлючОбъекта, Ключи.КлючНастроек);
	
	Если СохраненныеНастройки <> Неопределено Тогда
		Если СохраненныеНастройки.Свойство("Специалисты") И СохраненныеНастройки.Специалисты <> Неопределено Тогда
			Специалисты = СохраненныеНастройки.Специалисты;
		КонецЕсли;
		СохраненныеНастройки.Свойство("Период", Период);
		СохраненныеНастройки.Свойство("Продукт", Продукт);
	Иначе
		СохраненныеНастройки = Новый Структура;
	КонецЕсли;
	
	Статусы = ЗаполнитьСписокСтатусов();  
	
	КолонкиПроекты = ПолучитьСоставКолонок(Элементы.Проекты, Истина); 
	СохраненныеНастройки.Вставить("КолонкиПроекты", КолонкиПроекты);
	
	КолонкиПланПроекта = ПолучитьСоставКолонок(Элементы.ПланПроекта);	
	СохраненныеНастройки.Вставить("КолонкиПланПроекта", КолонкиПланПроекта);
	
	КолонкиЗадачи = ПолучитьСоставКолонок(Элементы.Задачи);	
	СохраненныеНастройки.Вставить("КолонкиЗадачи", КолонкиЗадачи);
	
	Подсветка = Новый Соответствие;
	Подсветка.Вставить(Справочники.РолиУчастников.УчастникКомандыУправленияПроектом, ЦветаСтиля.ЦветГруппировочнойСтрокиТаблицы);
	Подсветка.Вставить(Справочники.РолиУчастников.Автор, WebЦвета.БледноЛиловый);
	Подсветка.Вставить(Справочники.РолиУчастников.Заказчик, WebЦвета.БледноЛиловый);
	Подсветка.Вставить(Справочники.РолиУчастников.Наблюдатель, WebЦвета.БледноЛиловый);
	Подсветка.Вставить(Справочники.РолиУчастников.РуководительПроекта, WebЦвета.Белый);
	Подсветка.Вставить(Справочники.РолиУчастников.Исполнитель, WebЦвета.Белый);
	Подсветка.Вставить(Справочники.РолиУчастников.ВладелецПродукта, WebЦвета.Белый);
	
	НастройкиУчастияПоУмолчанию = Новый СписокЗначений;
	НастройкиУчастияПоУмолчанию.Добавить(Справочники.РолиУчастников.РуководительПроекта, "Руководитель проекта", Истина);
	НастройкиУчастияПоУмолчанию.Добавить(Справочники.РолиУчастников.Исполнитель, "Исполнитель", Истина);
	НастройкиУчастияПоУмолчанию.Добавить(Справочники.РолиУчастников.УчастникКомандыУправленияПроектом,
		"Участник команды управления проектом", Истина);
	НастройкиУчастияПоУмолчанию.Добавить(Справочники.РолиУчастников.Заказчик, "Заказчик");
	НастройкиУчастияПоУмолчанию.Добавить(Справочники.РолиУчастников.Наблюдатель, "Наблюдатель");
	НастройкиУчастияПоУмолчанию.Добавить(Справочники.РолиУчастников.Автор, "Автор");
	НастройкиУчастияПоУмолчанию.Добавить(Справочники.РолиУчастников.ВладелецПродукта, "Владелец продукта");
	
	ПроверитьНастройку(СохраненныеНастройки, "Специалисты");
	ПроверитьНастройку(СохраненныеНастройки, "Период");
	ПроверитьНастройку(СохраненныеНастройки, "Продукт");
	ПроверитьНастройку(СохраненныеНастройки, "ВыбранныеСтатусыПроекты", Статусы);
	ПроверитьНастройку(СохраненныеНастройки, "ВыбранныеСтатусыЗадачи", Статусы);
	ПроверитьНастройку(СохраненныеНастройки, "НастройкиКолонокПроекты", КолонкиПроекты);
	ПроверитьНастройку(СохраненныеНастройки, "НастройкиКолонокПланПроекта", КолонкиПланПроекта);
	ПроверитьНастройку(СохраненныеНастройки, "НастройкиКолонокЗадачи", КолонкиЗадачи);
	ПроверитьНастройку(СохраненныеНастройки, "ПодсветкаРолей", Подсветка);
	ПроверитьНастройку(СохраненныеНастройки, "НастройкиУчастия", НастройкиУчастияПоУмолчанию);
	
	Возврат СохраненныеНастройки;
	
КонецФункции

&НаСервере
Процедура ЗаписатьПланПроекта(ПредыдущийОбъект = Неопределено)
	
	СохраняемыйОбъект = ?(ПредыдущийОбъект = Неопределено, ВыбранныйОбъект, ПредыдущийОбъект);
	
	Успешно = ПланПроектаСервер.ЗаписатьПланПроекта(ДанныеФормыВЗначение(ПланПроекта, Тип("ДеревоЗначений")), СохраняемыйОбъект);

	Если Успешно Тогда
		Модифицированность = Ложь;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать план проекта");
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЗадач(Знач Родитель, Знач ВыбранныеСтатусы)
	
	ПодчиненныеОбъекты = ПолучитьПодчиненныеОбъекты(Родитель, Специалисты, ВыбранныеСтатусы);	
	ЗначениеВРеквизитФормы(ПодчиненныеОбъекты, "Задачи");
		
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДеревоПроектовИЗаданий(Знач НастройкиФормы, Знач Развернутые = Неопределено)
	
	ИдентификаторыРазворачиваемыхСтрок = Неопределено;
	
	Проекты.ПолучитьЭлементы().Очистить();
	Задачи.ПолучитьЭлементы().Очистить();
	
	Если Специалисты.Количество() = 0 Тогда
		Возврат ИдентификаторыРазворачиваемыхСтрок;
	КонецЕсли; 
	
	РегистрыСведений.ОтслеживаниеИспользованияФункциональности.Добавить("ФормированиеОтчета", ИмяФормы);
	НастройкиУчастия = ПолучитьОтмеченныеРоли(НастройкиФормы.НастройкиУчастия);
	
	РолиВыбраны = ЗначениеЗаполнено(НастройкиУчастия);
	
	Если РолиВыбраны Тогда
		РолиПроекта = НастройкиУчастия;
		РолиЗадания = НастройкиУчастия;
	Иначе
		РолиПроекта = Новый Массив;
		РолиПроекта.Добавить(Справочники.РолиУчастников.РуководительПроекта);
		РолиПроекта.Добавить(Справочники.РолиУчастников.УчастникКомандыУправленияПроектом);
		
		РолиЗадания = Новый Массив;
		РолиЗадания.Добавить(Справочники.РолиУчастников.РуководительПроекта);
		РолиЗадания.Добавить(Справочники.РолиУчастников.Исполнитель);
	КонецЕсли; 

	Запрос = Новый Запрос;
	Запрос.Текст = 
	#Область ТекстЗапроса	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Проекты.Ссылка КАК Объект,
	|	Проекты.ОбъектОснование КАК ОбъектОснование,
	|	Проекты.Код КАК Код,
	|	Проекты.Наименование КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕ(Проекты.Статус) КАК Статус,
	|	Проекты.ПроцентВыполнения КАК ПроцентВыполнения,
	|	Проекты.Порядок КАК Порядок,
	|	ПРЕДСТАВЛЕНИЕ(Проекты.Руководитель) КАК Назначена,
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексСтатуса
	|ПОМЕСТИТЬ ПроектОснование
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Участники КАК Участники
	|		ПО (Проекты.Ссылка = (ВЫРАЗИТЬ(Участники.Объект КАК Справочник.Проекты)))
	|			И (НЕ Участники.Скрытый)
	|			И (Участники.Пользователь В (&Специалисты))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО Проекты.Статус = СтатусыОбъектов.Ссылка
	|ГДЕ
	|	Участники.Роль В(&РолиПроекта)
	|	И Проекты.Статус В(&СписокСтатусов)
	|	И ВЫБОР
	|			КОГДА &ПериодЗаполнен
	|				ТОГДА Проекты.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый)
	|						ИЛИ Проекты.ДатаНачалаРассмотрения < &ДатаОкончания
	|							И Проекты.ДатаЗавершения > &ДатаНачала
	|						ИЛИ НЕ Проекты.ДатаНачалаРассмотрения = ДАТАВРЕМЯ(1, 1, 1)
	|							И Проекты.ДатаНачалаРассмотрения < &ДатаОкончания
	|							И Проекты.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ПродуктЗаполнен
	|				ТОГДА Проекты.Продукт = &Продукт
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВнутреннееЗадание.Ссылка КАК Объект,
	|	ВнутреннееЗадание.ОбъектОснование КАК ОбъектОснование,
	|	ВнутреннееЗадание.Номер КАК Номер,
	|	ВнутреннееЗадание.Наименование КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕ(ВнутреннееЗадание.Статус) КАК Статус,
	|	ВнутреннееЗадание.ПроцентВыполнения КАК ПроцентВыполнения,
	|	ВнутреннееЗадание.Приоритет КАК Порядок,
	|	ПРЕДСТАВЛЕНИЕ(ВнутреннееЗадание.Назначена) КАК Назначена,
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексСтатуса
	|ПОМЕСТИТЬ ЗаданиеОснование
	|ИЗ
	|	Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Участники КАК Участники
	|		ПО (ВнутреннееЗадание.Ссылка = (ВЫРАЗИТЬ(Участники.Объект КАК Документ.ВнутреннееЗадание)))
	|			И (НЕ Участники.Скрытый)
	|			И (Участники.Пользователь В (&Специалисты))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ВнутреннееЗадание.Статус = СтатусыОбъектов.Ссылка
	|ГДЕ
	|	Участники.Роль В(&РолиЗадания)
	|	И ВнутреннееЗадание.Статус В(&СписокСтатусов)
	|	И ВЫБОР
	|			КОГДА &ПериодЗаполнен
	|				ТОГДА СтатусыОбъектов.Порядок <= &ПорядокСтатусаВРаботе
	|						ИЛИ ВнутреннееЗадание.ДатаНачалаРазработки < &ДатаОкончания
	|							И ВнутреннееЗадание.ДатаЗакрытия > &ДатаНачала
	|						ИЛИ НЕ ВнутреннееЗадание.ДатаНачалаРазработки = ДАТАВРЕМЯ(1, 1, 1)
	|							И ВнутреннееЗадание.ДатаНачалаРазработки < &ДатаОкончания
	|							И ВнутреннееЗадание.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ПродуктЗаполнен
	|				ТОГДА ВнутреннееЗадание.Продукт = &Продукт
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Проект.Объект КАК Объект,
	|	""["" + Проект.Код + ""] "" + Проект.Наименование КАК Наименование,
	|	Проект.Статус КАК Статус,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(ПланыВыполненияПроектов.Объект) > 0
	|			ТОГДА ВЫРАЗИТЬ(СУММА(ПланыВыполненияПроектов.ПроцентВыполнения) / КОЛИЧЕСТВО(ПланыВыполненияПроектов.Объект) КАК ЧИСЛО(3, 0))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПроцентВыполнения,
	|	Проект.Порядок КАК Порядок,
	|	Проект.Назначена КАК Назначена,
	|	Проект.ИндексСтатуса КАК ИндексСтатуса
	|ИЗ
	|	ПроектОснование КАК Проект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПроектОснование КАК Основание
	|		ПО Проект.ОбъектОснование = Основание.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланыВыполненияПроектов КАК ПланыВыполненияПроектов
	|		ПО Проект.Объект = ПланыВыполненияПроектов.Объект
	|			И (ПланыВыполненияПроектов.ВладелецСобытия = &ПустойИдентификатор)
	|ГДЕ
	|	Основание.Объект ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	Проект.Объект,
	|	""["" + Проект.Код + ""] "" + Проект.Наименование,
	|	Проект.Статус,
	|	Проект.Порядок,
	|	Проект.Назначена,
	|	Проект.ИндексСтатуса
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Задание.Объект,
	|	""["" + Задание.Номер + ""] "" + Задание.Наименование,
	|	Задание.Статус,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(ПланыВыполненияПроектов.Объект) > 0
	|			ТОГДА ВЫРАЗИТЬ(СУММА(ПланыВыполненияПроектов.ПроцентВыполнения) / КОЛИЧЕСТВО(ПланыВыполненияПроектов.Объект) КАК ЧИСЛО(3, 0))
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	Задание.Порядок,
	|	Задание.Назначена,
	|	Задание.ИндексСтатуса
	|ИЗ
	|	ЗаданиеОснование КАК Задание
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаданиеОснование КАК ЗаданиеОснование
	|		ПО Задание.ОбъектОснование = ЗаданиеОснование.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПроектОснование КАК ПроектОснование
	|		ПО Задание.ОбъектОснование = ПроектОснование.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланыВыполненияПроектов КАК ПланыВыполненияПроектов
	|		ПО Задание.Объект = ПланыВыполненияПроектов.Объект
	|			И (ПланыВыполненияПроектов.ВладелецСобытия = &ПустойИдентификатор)
	|ГДЕ
	|	ЗаданиеОснование.Объект ЕСТЬ NULL
	|	И ПроектОснование.Объект ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	Задание.Объект,
	|	""["" + Задание.Номер + ""] "" + Задание.Наименование,
	|	Задание.Статус,
	|	Задание.Порядок,
	|	Задание.Назначена,
	|	Задание.ИндексСтатуса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Проект.Объект КАК Объект,
	|	""["" + Проект.Код + ""] "" + Проект.Наименование КАК Наименование,
	|	Проект.Статус КАК Статус,
	|	Проект.ПроцентВыполнения КАК ПроцентВыполнения,
	|	Проект.Порядок КАК Порядок,
	|	Проект.Назначена КАК Назначена,
	|	Проект.ОбъектОснование КАК Владелец,
	|	Проект.ИндексСтатуса КАК ИндексСтатуса
	|ИЗ
	|	ПроектОснование КАК Проект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПроектОснование КАК Основание
	|		ПО Проект.ОбъектОснование = Основание.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроектОснование.Объект КАК Объект,
	|	Участники.Роль КАК Значение,
	|	ПРЕДСТАВЛЕНИЕ(Участники.Роль) КАК Представление
	|ИЗ
	|	ПроектОснование КАК ПроектОснование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Участники КАК Участники
	|		ПО (ПроектОснование.Объект = (ВЫРАЗИТЬ(Участники.Объект КАК Справочник.Проекты)))
	|			И (НЕ Участники.Скрытый)
	|			И (Участники.Пользователь В (&Специалисты))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаданиеОснование.Объект,
	|	Участники.Роль,
	|	ПРЕДСТАВЛЕНИЕ(Участники.Роль)
	|ИЗ
	|	ЗаданиеОснование КАК ЗаданиеОснование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Участники КАК Участники
	|		ПО (ЗаданиеОснование.Объект = (ВЫРАЗИТЬ(Участники.Объект КАК Документ.ВнутреннееЗадание)))
	|			И (НЕ Участники.Скрытый)
	|			И (Участники.Пользователь В (&Специалисты))";	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Специалисты", Специалисты);
	Запрос.УстановитьПараметр("СписокСтатусов", НастройкиФормы.ВыбранныеСтатусыПроекты);
	Запрос.УстановитьПараметр("ПериодЗаполнен", ЗначениеЗаполнено(Период.ДатаНачала) И ЗначениеЗаполнено(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("ПустойИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.УстановитьПараметр("РолиПроекта", РолиПроекта);
	Запрос.УстановитьПараметр("РолиЗадания", РолиЗадания);
	Запрос.УстановитьПараметр("ПродуктЗаполнен", ЗначениеЗаполнено(Продукт));
	Запрос.УстановитьПараметр("Продукт", Продукт);
	Запрос.УстановитьПараметр("ПорядокСтатусаВРаботе", 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтатусыОбъектов.ВРаботе, "Порядок"));
	
	Пакет = Запрос.ВыполнитьПакет();
	КоличествоПакетов = Пакет.ВГраница();
	ВыборкаРолей = Пакет[КоличествоПакетов].Выбрать();
	
	Если НЕ Пакет[КоличествоПакетов - 2].Пустой() Тогда
		Выборка = Пакет[КоличествоПакетов - 2].Выбрать();
		Если НЕ Пакет[КоличествоПакетов - 1].Пустой() Тогда
			ТаблицаПодчиненных = Пакет[КоличествоПакетов - 1].Выгрузить();
		Иначе
			ТаблицаПодчиненных = Неопределено;
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			Ветка = Проекты.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(Ветка, Выборка);
			
			ПланПроектаСервер.ЗаполнитьУчастников(Ветка, ВыборкаРолей);
			ПланПроектаСервер.ЗаполнитьВетвьДерева(Ветка, ТаблицаПодчиненных, "Владелец", "Объект", ВыборкаРолей);
		КонецЦикла;
	КонецЕсли;
		
	СортироватьДерево("Проекты", "Порядок ВОЗР");

	ИдентификаторыРазворачиваемыхСтрок = ОбработатьЗапоминаниеВосстановлениеРазвернутых(НастройкиФормы, Развернутые);
	СохранитьНастройкиФормы(НастройкиФормы, "НастройкиОтчета");
	
	Возврат ИдентификаторыРазворачиваемыхСтрок;
	
КонецФункции

&НаСервере
Функция ЗаполнитьДиаграммуГанта()
	
	ЦветаСтатусов = ПолучитьСоответствиеЦветаСтатусу();
	
	СоответствиеСтрокИКлючей = Новый Соответствие;
	
	ДиаграммаГанта.Очистить();
	Серия = ДиаграммаГанта.УстановитьСерию("Период");
	
		// ТЗ для связей
	Связи = Новый ТаблицаЗначений;
	Связи.Колонки.Добавить("ПредшественникНомер");
	Связи.Колонки.Добавить("Интервал");
	
	Интервалы = Новый Соответствие;
	
	ЗаполнитьСтрокиДиаграммы(ДиаграммаГанта, ПланПроекта.ПолучитьЭлементы(), Серия, 
		СоответствиеСтрокИКлючей, ЦветаСтатусов, Связи, Интервалы, ДанныеФормыВЗначение(ПланПроекта, Тип("ДеревоЗначений")));
	
	Возврат СоответствиеСтрокИКлючей;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьДокументыИСтатус(ОбластьСтрока, СтрокиДокументов, ЦветаСтатусов)
	
	Если СтрокиДокументов.Количество() = 1 Тогда		
		Если НЕ ЗначениеЗаполнено(СтрокиДокументов[0].Документ) Тогда
			ОбластьСтрока.Параметры.Статус = "";
			ОбластьСтрока.Параметры.СписокДокументов = "";
			Возврат;
		КонецЕсли;
		
		ОбластьСтрока.Параметры.Статус = СтрокиДокументов[0].СтатусПредставление;
		ОбластьСтрока.Параметры.СписокДокументов = СтрокиДокументов[0].ДокументПредставление;
		
		Цвет = ЦветаСтатусов.Получить(СтрокиДокументов[0].Статус);
		ОбластьПодсвечивания = ОбластьСтрока.Область(1, 7);
		Если Цвет <> Неопределено Тогда
			ОбластьПодсвечивания.ЦветФона = Цвет;
		Иначе
			ОбластьПодсвечивания.ЦветФона = Новый Цвет;
		КонецЕсли;
	Иначе
		НомерПП = 1;
		СтрокаДокументы = "";
		Для Каждого СтрокаДерева Из СтрокиДокументов Цикл
			Если НомерПП > 1 Тогда
				СтрокаДокументы = СтрокаДокументы + Символы.ПС;
			КонецЕсли;
			
			СтрокаДокументы = СтрШаблон("%1%2. %3;", СтрокаДокументы, НомерПП, СтрокаДерева.ДокументПредставление);
			НомерПП = НомерПП + 1;
		КонецЦикла;
		
		ОбластьСтрока.Параметры.СписокДокументов = СтрокаДокументы;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПланПроекта() 
	
	РазвернутыеСтроки = Неопределено;
	РазвернутыеСтроки = ПолучитьРазвернутыеСтроки("ПланПроекта", "КлючСобытия");
	
	ИдентификаторыРазвернутых = ЗаполнитьПланПроектаНаСервере(РазвернутыеСтроки, ВыбранныйОбъект);
	РазвернутьСтроки("ПланПроекта", ИдентификаторыРазвернутых);
	
	СвернутьРешенныеОбъектыПланаПроектов(ПланПроекта.ПолучитьЭлементы());
	СохранитьРазвернутые.ПланПроекта = Ложь;
			
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПланПроектаНаСервере(Развернутые = Неопределено, ПредыдущийОбъект = Неопределено)
	
	ПланПроектаСервер.ЗаполнитьПланПроектов(ЭтотОбъект, ВыбранныйОбъект, Истина);
	Трудозатраты = ЗаполнитьТрудозатраты(ПериодТрудозатрат, Специалисты, ВыбранныйОбъект);

	Модифицированность = Ложь;
	
	Возврат ПолучитьИдентификаторыРазвернутых(Развернутые, ПредыдущийОбъект);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокОбъектов(СписокОбъектов, Знач СтрокиДерева)
	
	Для Каждого Строка Из СтрокиДерева Цикл
		СписокОбъектов.Добавить(Строка.Объект, Строка.Наименование);
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			ЗаполнитьСписокОбъектов(СписокОбъектов, ПодчиненныеСтроки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСписокСтатусов()
	
	ВыбранныеСтатусы = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыОбъектов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВыбранныеСтатусы.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ВыбранныеСтатусы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокиДиаграммы(ДиаграммаГанта, Знач СтрокиПлана, Знач Серия, СоответствиеСтрокИКлючей,
	Знач ЦветаСтатусов, Связи, Интервалы, Знач Дерево, Знач ТочкаРодитель = Неопределено)
	
	Если СтрокиПлана.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
		
	Для Каждого Строка Из СтрокиПлана Цикл
		СоответствиеСтрокИКлючей.Вставить(Строка.КлючСобытия, Строка.ПолучитьИдентификатор());
		Точка = ДиаграммаГанта.УстановитьТочку(Строка.КлючСобытия, ТочкаРодитель);
		Точка.Текст = ?(ЗначениеЗаполнено(Строка.НазваниеСобытия), Строка.НазваниеСобытия, " ");
		
		Значение = ДиаграммаГанта.ПолучитьЗначение(Точка, Серия);
		Значение.Редактирование = Истина;
		Если ТочкаРодитель = Неопределено Тогда
			Значение.ЦветФона = Новый Цвет(220, 230, 241);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ДатаНачала_Факт) Тогда
			Интервал = Значение.Добавить();
			Интервал.Начало = НачалоДня(Строка.ДатаНачала_Факт);
			Если ЗначениеЗаполнено(Строка.ДатаОкончания_Факт) Тогда
				Интервал.Конец = КонецДня(Строка.ДатаОкончания_Факт);
			ИначеЕсли Строка.ДатаОкончания_План > Строка.ДатаНачала_Факт Тогда
				Интервал.Конец = КонецДня(Строка.ДатаОкончания_План);
			Иначе
				Интервал.Конец = КонецДня(Строка.ДатаНачала_Факт);
			КонецЕсли;
						
			// Создаем заранее сохраненную связь в ТЗ связи (ищем интервал предшесвенник в ТЗ)
			Если Строка.Предшественник <> 0 Тогда 
				Отбор = Новый Структура("ПредшественникНомер", Строка.Порядок);
				НайденныеСтроки = Связи.НайтиСтроки(Отбор);
				
				Для Каждого НайденненнаяСвязь Из НайденныеСтроки Цикл 
					НайденненнаяСвязь.Интервал.Добавить(Интервал);	
				КонецЦикла;
			КонецЕсли;		
			
			Интервалы.Вставить(Строка.Порядок, Интервал);

			// Если текущий интервал является предшественником для добавленных в будущем в цикле интервалов
			// тогда сохраняем связь в ТЗ связи
			Отбор = Новый Структура("Предшественник", Строка.Порядок);
			НайденныеСтроки = Дерево.Строки.НайтиСтроки(Отбор, Истина);
			
			Если НайденныеСтроки <> 0 Тогда 
				Для Каждого НайденненнаяСвязь Из НайденныеСтроки Цикл 
					НоваяСвязь = Связи.Добавить();
					НоваяСвязь.ПредшественникНомер = НайденненнаяСвязь.Порядок;
					НоваяСвязь.Интервал = Интервал;
					
					Если НайденненнаяСвязь.Порядок < Строка.Порядок Тогда
						Интервал.Добавить(Интервалы[НайденненнаяСвязь.Порядок]);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			//TO DO: Восстановить при использовании статусов, иначе удалить
			//Цвет = ЦветаСтатусов.Получить(Строка.Статус);
			//
			//Если Цвет = Неопределено Тогда
			//	Цвет = WebЦвета.Красный;
			//КонецЕсли;
			//
			//Интервал.Цвет = Цвет;
			//ЗаполненныйИнтервал = Интервал;
		КонецЕсли;
		
		Подстроки = Строка.ПолучитьЭлементы();
		ЗаполнитьСтрокиДиаграммы(ДиаграммаГанта, Подстроки, Серия, СоответствиеСтрокИКлючей, 
			ЦветаСтатусов, Связи, Интервалы, Дерево, Строка.КлючСобытия);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьТрудозатраты(Знач Период, Знач Специалисты, Знач Объект)
	
	Трудозатраты = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Трудозатраты.Период, ДЕНЬ) КАК Дата,
	|	Трудозатраты.Затрата КАК Затрата,
	|	Трудозатраты.ВидДеятельности КАК ВидДеятельности,
	|	Трудозатраты.Комментарий КАК Комментарий,
	|	Пользователи.ФИО КАК ФИО
	|ИЗ
	|	РегистрСведений.Трудозатраты КАК Трудозатраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО Трудозатраты.Пользователь = Пользователи.Ссылка
	|			И (Пользователи.Ссылка В (&Пользователи))
	|ГДЕ
	|	Трудозатраты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Трудозатраты.Объект = &Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Трудозатраты.Период
	|ИТОГИ ПО
	|	Дата";
	
	Запрос.УстановитьПараметр("Пользователи", Специалисты);
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Трудозатраты;
	КонецЕсли;
	
	Трудозатраты.ФиксацияСверху = 1;
	
	Макет = Отчеты.ПроектыПоСпециалисту.ПолучитьМакет("МакетТрудозатраты");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка|ОбластьМакета");
	ОбластьДанные = Макет.ПолучитьОбласть("Данные|ОбластьМакета");
	
	Трудозатраты.Вывести(ОбластьШапка);
	
	ВыборкаДат = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДат.Следующий() Цикл
		Выборка = ВыборкаДат.Выбрать();
		ТабличныйДокумент = Новый ТабличныйДокумент;
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ОбластьДанные.Параметры, Выборка);
			ТабличныйДокумент.Вывести(ОбластьДанные);
		КонецЦикла;
		
		КоличествоСтрок = Выборка.Количество();
		Если КоличествоСтрок > 1 Тогда
			ТабличныйДокумент.Область(1, 1, КоличествоСтрок, 1).Объединить();
		КонецЕсли;
		
		Трудозатраты.Вывести(ТабличныйДокумент);
	КонецЦикла;
	
	Возврат Трудозатраты;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьДатуПлановогоОкончанияНаСервере(Знач ВыбранныйОбъект, Знач ДатаОкончания)
	
	ОбъектПроект = ВыбранныйОбъект.ПолучитьОбъект();
	
	Если ТипЗнч(ВыбранныйОбъект) = Тип("СправочникСсылка.Проекты") Тогда
		ОбъектПроект.ДатаПлановоеОкончание = ДатаОкончания;
	Иначе
		ОбъектПроект.ИсполнитьДо = ДатаОкончания;
	КонецЕсли;
	
	ОбъектПроект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПлан(ПредыдущийОбъект = Неопределено)
	
	РазвернутыеСтроки = Неопределено;
	РазвернутыеСтроки = ПолучитьРазвернутыеСтроки("ПланПроекта", "КлючСобытия");
	
	ИдентификаторыРазвернутых = ЗаполнитьПланПроектаНаСервере(РазвернутыеСтроки, ПредыдущийОбъект);
	РазвернутьСтроки("ПланПроекта", ИдентификаторыРазвернутых);
	
	СвернутьРешенныеОбъектыПланаПроектов(ПланПроекта.ПолучитьЭлементы());	
	СохранитьРазвернутые.ПланПроекта = Ложь;
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросПеремещения(Результат, ДополнительныеПараметры) Экспорт
		
	ПеремещеннаяСтрока = ПланПроектаКлиент.ОбработатьВопросПеремещения(Результат, ДополнительныеПараметры);
	Если ПеремещеннаяСтрока <> Неопределено Тогда
		Элементы.ПланПроекта.ТекущаяСтрока = ПеремещеннаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборГруппы(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ПереносимаяСтрока = Элементы.ПланПроекта.ТекущиеДанные;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьЗапоминаниеВосстановлениеРазвернутых(НастройкиФормы, РазвернутыеСтрокиПроектов)
	
	ИдентификаторыРазворачиваемыхСтрок = Неопределено;
	
	Ключи = ПолучитьКлючиНастроек("РазвернутыеПроектыСпециалиста");
	РазвернутыеПроекты = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(Ключи.КлючОбъекта, Ключи.КлючНастроек);
	
	Если РазвернутыеПроекты = Неопределено Тогда
		РазвернутыеПроекты = Новый Соответствие;
	КонецЕсли;
	СтрокаСпециалисты = СтрСоединить(НастройкиФормы.Специалисты.ВыгрузитьЗначения(), ",");
	
	Если РазвернутыеСтрокиПроектов <> Неопределено Тогда
		Если ЗначениеЗаполнено(НастройкиФормы.Период.ДатаНачала) ИЛИ ЗначениеЗаполнено(НастройкиФормы.Период.ДатаОкончания) Тогда
			СохраненныеРазвернутыеСтроки = РазвернутыеПроекты.Получить(СтрокаСпециалисты);
			
			Если СохраненныеРазвернутыеСтроки <> Неопределено Тогда
				Для Каждого ЭлементСписка Из РазвернутыеСтрокиПроектов Цикл
					СохраненныйЭлемент = СохраненныеРазвернутыеСтроки.НайтиПоЗначению(ЭлементСписка.Значение);
					
					Если СохраненныйЭлемент = Неопределено Тогда
						ЗаполнитьЗначенияСвойств(СохраненныеРазвернутыеСтроки.Добавить(), ЭлементСписка);
					Иначе
						СохраненныйЭлемент.Пометка = ЭлементСписка.Пометка;
					КонецЕсли;
				КонецЦикла;
				
				РазвернутыеСтрокиПроектов = СохраненныеРазвернутыеСтроки;
			КонецЕсли;
		КонецЕсли; 
	
		РазвернутыеПроекты.Вставить(СтрокаСпециалисты, РазвернутыеСтрокиПроектов);
		ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(Ключи.КлючОбъекта, Ключи.КлючНастроек, РазвернутыеПроекты);
	КонецЕсли;
	
	РазворачиваемыеСтроки = РазвернутыеПроекты.Получить(СтрСоединить(Специалисты.ВыгрузитьЗначения(), ","));
	
	Если РазворачиваемыеСтроки <> Неопределено Тогда
		ИдентификаторыРазворачиваемыхСтрок = ПолучитьИдентификаторыРазворачиваемыхСтрок(Проекты, РазворачиваемыеСтроки, "Объект");
	КонецЕсли;
	
	Возврат ИдентификаторыРазворачиваемыхСтрок;
	
КонецФункции

&НаСервере
Процедура ПересчитатьДаты(Знач ДатаНачала_План, Знач ДатаОкончания_План, Знач ПланируемыйСрок, Знач Порядок)
	
	Дерево = ДанныеФормыВЗначение(ПланПроекта, Тип("ДеревоЗначений"));
	
	ПланПроектаВызовСервера.РассчитатьДатаОкончания_План(Дерево, ДатаНачала_План,
		ДатаОкончания_План, ПланируемыйСрок, Порядок);
	
	ЗначениеВДанныеФормы(Дерево, ПланПроекта);
		
КонецПроцедуры

&НаСервере
Процедура ПересчитатьПривязанныеЗаписи(Порядок, Смещение)
	
	Дерево = ДанныеФормыВЗначение(ПланПроекта, Тип("ДеревоЗначений"));
	
	ПланПроектаВызовСервера.ПересчитатьЗаписиСПредшественником(Дерево, Порядок, Смещение, Порядок);
	
	ЗначениеВДанныеФормы(Дерево, ПланПроекта);
		
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРодительскиеЗаписи()
	
	РедактированиеСтроки = Истина;
	ТекущиеДанные = Элементы.ПланПроекта.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	ПланПроектаКлиент.ПересчитатьРодительскиеЗаписи(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтосохранениеПланаПроекта()
	
	Если Модифицированность Тогда
		ЗаписатьПланПроекта();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИдентификаторыРазвернутых(Развернутые, ПредыдущийОбъект)
	
	Идентификаторы = Неопределено;
	
	Ключи = ПолучитьКлючиНастроек("РазвернутыеПланыПроектаСпециалиста");
	РазвернутыеПланыПроекта = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(Ключи.КлючОбъекта, Ключи.КлючНастроек);
	
	Если РазвернутыеПланыПроекта = Неопределено Тогда
		РазвернутыеПланыПроекта = Новый Соответствие;
	КонецЕсли;
	
	Если Развернутые <> Неопределено Тогда
		РазвернутыеПланыПроекта.Вставить(ПредыдущийОбъект, Развернутые);
		ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(Ключи.КлючОбъекта, Ключи.КлючНастроек, РазвернутыеПланыПроекта);
	КонецЕсли;
	
	РазворачиваемыеСтроки = РазвернутыеПланыПроекта.Получить(ВыбранныйОбъект);
	
	Если РазворачиваемыеСтроки <> Неопределено Тогда
		Идентификаторы = ПолучитьИдентификаторыРазворачиваемыхСтрок(ПланПроекта, РазворачиваемыеСтроки, "КлючСобытия");
	КонецЕсли;
	
	Возврат Идентификаторы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКлючиНастроек(Знач КлючНастроек)
	
	КлючиНастроек = Новый Структура("КлючОбъекта, КлючНастроек");
	КлючиНастроек.КлючОбъекта = "Отчет.ПроектыПоСпециалисту";
	КлючиНастроек.КлючНастроек = КлючНастроек;
	
	Возврат КлючиНастроек;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСоответствиеЦветаСтатусу()
	
	ЦветаСтатусов = Новый Соответствие;
	// 0 - Розовый
	ЦветаСтатусов.Вставить(Справочники.СтатусыОбъектов.Приостановлен, WebЦвета.Розовый);
	ЦветаСтатусов.Вставить(Справочники.СтатусыОбъектов.Отклонен, WebЦвета.Розовый);
	// 1 - Нейтрально-зеленый
	ЦветаСтатусов.Вставить(Справочники.СтатусыОбъектов.Масштабирование, WebЦвета.НейтральноЗеленый);
	ЦветаСтатусов.Вставить(Справочники.СтатусыОбъектов.Решен, WebЦвета.НейтральноЗеленый);
	ЦветаСтатусов.Вставить(Справочники.СтатусыОбъектов.Протестирован, WebЦвета.НейтральноЗеленый);
	// 2 - Лимонный
	ЦветаСтатусов.Вставить(Справочники.СтатусыОбъектов.Тестирование, WebЦвета.Лимонный);
	ЦветаСтатусов.Вставить(Справочники.СтатусыОбъектов.ВРаботе, WebЦвета.Лимонный);
	ЦветаСтатусов.Вставить(Справочники.СтатусыОбъектов.ВРеализацию, WebЦвета.Лимонный);
	ЦветаСтатусов.Вставить(Справочники.СтатусыОбъектов.Внедрение, WebЦвета.Лимонный);
	ЦветаСтатусов.Вставить(Справочники.СтатусыОбъектов.Рассмотрение, WebЦвета.Лимонный);
	// 3 - АкварельноСиний
	ЦветаСтатусов.Вставить(Справочники.СтатусыОбъектов.Новый, WebЦвета.АкварельноСиний);
	
	Возврат ЦветаСтатусов;
	
КонецФункции
	
&НаКлиенте
Процедура ПослеВыбораСтатуса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Статус = Результат;
	ДополнительныеПараметры.ПредставлениеСтатуса = Строка(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьПланПроекта();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
	КонецЕсли;
	
	Если Результат <> КодВозвратаДиалога.Отмена Тогда
		Если Параметры <> Неопределено И Параметры.СформироватьОтчет Тогда
			СформироватьОтчет();
		Иначе
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриОбновлении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьПланПроекта(Параметры);
	КонецЕсли;
	
	Если Результат <> КодВозвратаДиалога.Отмена Тогда
		ОбновитьПлан();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ПослеПодтвержденияУдаленияПланПроекта(Результат, ДопПараметры) Экспорт
		
	Если Результат = КодВозвратаДиалога.Да Тогда 		
		Родитель = ДопПараметры.ТекущиеДанные.ПолучитьРодителя();
		ПланПроектаКлиент.УдалитьТекущуюСтрокуПланПроекта(ПланПроекта, ДопПараметры.ТекущиеДанные);
		ПланПроектаКлиент.ПересчитатьРодительскиеЗаписи(Родитель, Ложь);
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриАктивизацииСтроки(ЭлементФормы)
	
	ТекущиеДанные = ЭлементФормы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Проект = "";
		ДатаСоздания = '00010101';
		ДатаНачала = '00010101';
		ДатаОкончания = '00010101';
		ВыбранныйОбъект = Неопределено;
		Элементы.ВнестиТрудозатраты.Доступность = Ложь;
		ПланПроекта.ПолучитьЭлементы().Очистить();
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Объект = ВыбранныйОбъект 
		ИЛИ (ТипЗнч(ТекущиеДанные.Объект) <> Тип("СправочникСсылка.Проекты") 
		И ТипЗнч(ТекущиеДанные.Объект) <> Тип("ДокументСсылка.ВнутреннееЗадание")) Тогда
		
		Возврат;
	КонецЕсли;
	
	Элементы.ВнестиТрудозатраты.Доступность = Истина;
	
	ПредыдущийВыбранныйОбъект = ВыбранныйОбъект;
	ВыбранныйОбъект = ТекущиеДанные.Объект;
	
	Если ЭлементФормы.Имя = "Проекты" Тогда
		ЗаполнитьДеревоЗадач(ВыбранныйОбъект, НастройкиФормы.ВыбранныеСтатусыЗадачи);
		РазвернутьСтроки("Задачи", Неопределено);
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаМатрицаТребований Тогда
		ОбновитьМатрицуТребований();
	Иначе
		ОбновитьЗаголовокМатрицыТребований();
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗаинтересованныеЛица Тогда
		ОбщегоНазначенияКлиент.ОбновитьТаблицуЗаинтересованныхЛиц(ВыбранныйОбъект, ТаблицаЗаинтересованных);
		КоличествоЗаинтересованныхЛиц = ТаблицаЗаинтересованных.Количество();
	Иначе
		КоличествоЗаинтересованныхЛиц = ОбщегоНазначенияВызовСервера.ПолучитьКоличествоЗаинтересованныхЛиц(ВыбранныйОбъект);
	КонецЕсли;
	
	// Если открыта диаграмма Ганта, то переключаем на страницу плана проекта
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДиаграммаГанта Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПланПроекта;
	КонецЕсли;

	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриОбновлении", ЭтотОбъект, ПредыдущийВыбранныйОбъект);						
		ПоказатьВопрос(Оповещение, "План проекта был изменен. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ОбновитьПлан(ПредыдущийВыбранныйОбъект);
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПодчиненныеОбъекты(Родитель, Знач Специалисты, ВыбранныеСтатусы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	Участники.Объект КАК Ссылка,
	|	СтруктураПодчиненности.Родитель КАК ОбъектОснование
	|ПОМЕСТИТЬ ПодчиненныеДокументы
	|ИЗ
	|	РегистрСведений.Участники КАК Участники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураПодчиненности КАК СтруктураПодчиненности
	|		ПО Участники.Объект = СтруктураПодчиненности.Объект
	|			И (НЕ СтруктураПодчиненности.Родитель = НЕОПРЕДЕЛЕНО)
	|ГДЕ
	|	Участники.Объект ССЫЛКА Документ.ВнутреннееЗадание
	|	И НЕ Участники.Скрытый
	|	И Участники.Пользователь В(&Специалисты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодчиненныеДокументы.ОбъектОснование КАК НачалоДуги,
	|	ПодчиненныеДокументы.Ссылка КАК КонецДуги
	|ПОМЕСТИТЬ ЗамыканияДлины1
	|ИЗ
	|	ПодчиненныеДокументы КАК ПодчиненныеДокументы
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПодчиненныеДокументы.Ссылка,
	|	ПодчиненныеДокументы.Ссылка
	|ИЗ
	|	ПодчиненныеДокументы КАК ПодчиненныеДокументы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПерваяДуга.НачалоДуги КАК НачалоДуги,
	|	ВтораяДуга.КонецДуги КАК КонецДуги
	|ПОМЕСТИТЬ ЗамыканияДлины2
	|ИЗ
	|	ЗамыканияДлины1 КАК ПерваяДуга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗамыканияДлины1 КАК ВтораяДуга
	|		ПО ПерваяДуга.КонецДуги = ВтораяДуга.НачалоДуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЗамыканияДлины1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПерваяДуга.НачалоДуги КАК НачалоДуги,
	|	ВтораяДуга.КонецДуги КАК КонецДуги
	|ПОМЕСТИТЬ ЗамыканияДлины4
	|ИЗ
	|	ЗамыканияДлины2 КАК ПерваяДуга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗамыканияДлины2 КАК ВтораяДуга
	|		ПО ПерваяДуга.КонецДуги = ВтораяДуга.НачалоДуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЗамыканияДлины2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПерваяДуга.НачалоДуги КАК НачалоДуги,
	|	ВтораяДуга.КонецДуги КАК КонецДуги
	|ПОМЕСТИТЬ ЗамыканияДлины8
	|ИЗ
	|	ЗамыканияДлины4 КАК ПерваяДуга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗамыканияДлины4 КАК ВтораяДуга
	|		ПО ПерваяДуга.КонецДуги = ВтораяДуга.НачалоДуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЗамыканияДлины4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПерваяДуга.НачалоДуги КАК НачалоДуги,
	|	ВтораяДуга.КонецДуги КАК КонецДуги
	|ПОМЕСТИТЬ ЗамыканияДлины16
	|ИЗ
	|	ЗамыканияДлины8 КАК ПерваяДуга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗамыканияДлины8 КАК ВтораяДуга
	|		ПО ПерваяДуга.КонецДуги = ВтораяДуга.НачалоДуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЗамыканияДлины8
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗамыканияДлины16.НачалоДуги КАК Предок,
	|	ЗамыканияДлины16.КонецДуги КАК Потомок
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	ЗамыканияДлины16 КАК ЗамыканияДлины16
	|ГДЕ
	|	ЗамыканияДлины16.НачалоДуги <> ЗамыканияДлины16.КонецДуги
	|	И ЗамыканияДлины16.НачалоДуги <> НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЗамыканияДлины16
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.Потомок КАК Объект
	|ПОМЕСТИТЬ ОтобранныеОбъекты
	|ИЗ
	|	Данные КАК Данные
	|ГДЕ
	|	Данные.Предок = &Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Предок КАК Родитель,
	|	Данные.Потомок КАК Объект
	|ПОМЕСТИТЬ ОтобранныеДанные
	|ИЗ
	|	Данные КАК Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтобранныеОбъекты КАК ОтобранныеОбъекты
	|		ПО Данные.Предок = ОтобранныеОбъекты.Объект
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Данные.Предок,
	|	Данные.Потомок
	|ИЗ
	|	Данные КАК Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтобранныеОбъекты КАК ОтобранныеОбъекты
	|		ПО Данные.Потомок = ОтобранныеОбъекты.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ОтобранныеДанные.Родитель) КАК Уровень,
	|	ОтобранныеДанные.Объект КАК Объект
	|ПОМЕСТИТЬ Уровни
	|ИЗ
	|	ОтобранныеДанные КАК ОтобранныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтобранныеДанные.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтобранныеДанные.Родитель КАК Родитель,
	|	ОтобранныеДанные.Объект КАК Объект
	|ПОМЕСТИТЬ ДанныеИерархия
	|ИЗ
	|	ОтобранныеДанные КАК ОтобранныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Уровни КАК УровниОбъекта
	|		ПО (УровниОбъекта.Объект = ОтобранныеДанные.Объект)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Уровни КАК УровниРодителя
	|		ПО (УровниРодителя.Объект = ОтобранныеДанные.Родитель)
	|ГДЕ
	|	ЕСТЬNULL(УровниОбъекта.Уровень, 0) - ЕСТЬNULL(УровниРодителя.Уровень, 0) = 1
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НЕОПРЕДЕЛЕНО,
	|	ОтобранныеДанные.Родитель
	|ИЗ
	|	ОтобранныеДанные КАК ОтобранныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Уровни КАК УровниОбъекта
	|		ПО (УровниОбъекта.Объект = ОтобранныеДанные.Родитель)
	|ГДЕ
	|	УровниОбъекта.Уровень ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО,
	|	&Родитель
	|ГДЕ
	|	НЕ 1 В
	|				(ВЫБРАТЬ
	|					1
	|				ИЗ
	|					ОтобранныеДанные
	|				ГДЕ
	|					ОтобранныеДанные.Объект = &Родитель)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеИерархия.Родитель КАК Родитель,
	|	ДанныеИерархия.Объект КАК Объект
	|ПОМЕСТИТЬ ДанныеИерархияЗаявки
	|ИЗ
	|	ДанныеИерархия КАК ДанныеИерархия
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДанныеИерархия.Объект,
	|	СтруктураПодчиненности.Объект
	|ИЗ
	|	ДанныеИерархия КАК ДанныеИерархия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураПодчиненности КАК СтруктураПодчиненности
	|		ПО (СтруктураПодчиненности.Родитель = ДанныеИерархия.Объект)
	|			И (СтруктураПодчиненности.Объект ССЫЛКА Документ.ЗаявкаНаРазработку)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеИерархия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеИерархияЗаявки.Родитель КАК Родитель,
	|	ДанныеИерархияЗаявки.Объект КАК Объект
	|ПОМЕСТИТЬ ДанныеИерархияЗаявкиЗадачи
	|ИЗ
	|	ДанныеИерархияЗаявки КАК ДанныеИерархияЗаявки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДанныеИерархияЗаявки.Объект,
	|	СтруктураПодчиненности.Объект
	|ИЗ
	|	ДанныеИерархияЗаявки КАК ДанныеИерархияЗаявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураПодчиненности КАК СтруктураПодчиненности
	|		ПО (СтруктураПодчиненности.Родитель = ДанныеИерархияЗаявки.Объект)
	|			И (СтруктураПодчиненности.Объект ССЫЛКА Документ.Задача)
	|			И (СтруктураПодчиненности.Родитель ССЫЛКА Документ.ЗаявкаНаРазработку)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеИерархияЗаявки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеИерархияЗаявкиЗадачи.Объект КАК Объект
	|ПОМЕСТИТЬ ВыбранныеОбъекты
	|ИЗ
	|	ДанныеИерархияЗаявкиЗадачи КАК ДанныеИерархияЗаявкиЗадачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументЗаявкаНаРазработку.Ссылка КАК Объект,
	|	ДокументЗаявкаНаРазработку.Номер КАК Номер,
	|	ДокументЗаявкаНаРазработку.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА ДокументЗаявкаНаРазработку.ФинальныйСтатус <> ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ПустаяСсылка)
	|			ТОГДА ДокументЗаявкаНаРазработку.ФинальныйСтатус
	|		ИНАЧЕ ЕСТЬNULL(МинимальныеСтатусыЗаявок.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый))
	|	КОНЕЦ КАК Статус,
	|	ДокументЗаявкаНаРазработку.Черновик КАК Черновик
	|ПОМЕСТИТЬ ВсеОбъекты
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ДокументЗаявкаНаРазработку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВыбранныеОбъекты КАК ВыбранныеОбъекты
	|		ПО (ВыбранныеОбъекты.Объект = ДокументЗаявкаНаРазработку.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
	|		ПО ДокументЗаявкаНаРазработку.Ссылка = МинимальныеСтатусыЗаявок.Заявка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ДокументЗаявкаНаРазработку.ФинальныйСтатус <> ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ПустаяСсылка)
	|				ТОГДА ДокументЗаявкаНаРазработку.ФинальныйСтатус
	|			ИНАЧЕ ЕСТЬNULL(МинимальныеСтатусыЗаявок.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый))
	|		КОНЕЦ В (&ВыбранныеСтатусы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументЗадача.Ссылка,
	|	ДокументЗадача.Номер,
	|	ДокументЗадача.Наименование,
	|	ДокументЗадача.Статус,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.Задача КАК ДокументЗадача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВыбранныеОбъекты КАК ВыбранныеОбъекты
	|		ПО (ВыбранныеОбъекты.Объект = ДокументЗадача.Ссылка)
	|			И (ДокументЗадача.Статус В (&ВыбранныеСтатусы))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнутреннееЗадание.Ссылка,
	|	ВнутреннееЗадание.Номер,
	|	ВнутреннееЗадание.Наименование,
	|	ВнутреннееЗадание.Статус,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВыбранныеОбъекты КАК ВыбранныеОбъекты
	|		ПО (ВыбранныеОбъекты.Объект = ВнутреннееЗадание.Ссылка)
	|			И (ВнутреннееЗадание.Статус В (&ВыбранныеСтатусы))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Проекты.Ссылка,
	|	Проекты.Код,
	|	Проекты.Наименование,
	|	Проекты.Статус,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВыбранныеОбъекты КАК ВыбранныеОбъекты
	|		ПО (ВыбранныеОбъекты.Объект = Проекты.Ссылка)
	|			И (Проекты.Статус В (&ВыбранныеСтатусы))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеОбъекты.Объект КАК Объект,
	|	ВсеОбъекты.Номер КАК Номер,
	|	ВсеОбъекты.Наименование КАК Наименование,
	|	ВсеОбъекты.Статус КАК Статус,
	|	ВЫБОР
	|		КОГДА ВсеОбъекты.Черновик
	|			ТОГДА &ИндексКартинкиЧерновик
	|		ИНАЧЕ СтатусыОбъектов.ИндексКартинки
	|	КОНЕЦ КАК ИндексСтатуса
	|ИЗ
	|	ВсеОбъекты КАК ВсеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ВсеОбъекты.Статус = СтатусыОбъектов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеИерархияЗаявкиЗадачи.Родитель КАК Родитель,
	|	ДанныеИерархияЗаявкиЗадачи.Объект КАК Объект
	|ИЗ
	|	ДанныеИерархияЗаявкиЗадачи КАК ДанныеИерархияЗаявкиЗадачи";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("Специалисты", Специалисты);
	Запрос.УстановитьПараметр("ВыбранныеСтатусы", ВыбранныеСтатусы);
	Запрос.УстановитьПараметр("ИндексКартинкиЧерновик", Справочники.СтатусыОбъектов.ИндексКартинкиЧерновик());
	
	Результат = Запрос.ВыполнитьПакет();
	Данные = Результат[Результат.ВГраница() - 1].Выгрузить();
	Иерархия = Результат[Результат.ВГраница()].Выгрузить();	
	
	СтандартнаяОбработка = Ложь;
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("Данные", Данные);	
	ВнешниеНаборыДанных.Вставить("Иерархия", Иерархия);
	
	СхемаКомпоновкиДанных = Отчеты.ПроектыПоСпециалисту.ПолучитьМакет("ФормированиеСтруктурыПодчиненных");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(),,, 
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);	
		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;	
	ДеревоЗначений = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);   	
	
	Возврат ДеревоЗначений;  
	
КонецФункции
	
&НаКлиенте
Процедура РассчитатьДатаОкончания_План()

	РедактированиеСтроки = Истина;
	ТекущиеДанные = Элементы.ПланПроекта.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала_План) Тогда
		Возврат;
	КонецЕсли;
		
	ПересчитатьДаты(ТекущиеДанные.ДатаНачала_План, ТекущиеДанные.ДатаОкончания_План, 
		ТекущиеДанные.ПланируемыйСрок, ТекущиеДанные.Порядок);
		
	АктуализироватьДерево(ТекущиеДанные.КлючСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРешенныеОбъектыПланаПроектов(КоллекцияЭлементов)
		
	Для Каждого СтрокаДерева Из КоллекцияЭлементов Цикл
		Если СтрокаДерева.Статус = ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Решен") Тогда
			ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
			Элементы.ПланПроекта.Свернуть(ИдентификаторСтроки);
		КонецЕсли;
		
		СвернутьРешенныеОбъектыПланаПроектов(СтрокаДерева.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПунктыНаСервере()
	
	ПланПроектаСервер.СоздатьПункты(ПланПроекта, ВыбранныйОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СортироватьДерево(Знач ИмяРеквизита, Знач СтрокаСортировки)
	
	Дерево = РеквизитФормыВЗначение(ИмяРеквизита, Тип("ДеревоЗначений"));
	Дерево.Строки.Сортировать(СтрокаСортировки, Истина);
	ЗначениеВРеквизитФормы(Дерево, ИмяРеквизита);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормы(Знач НастройкиФормы, КлючНастроек)
	
	Ключи = ПолучитьКлючиНастроек(КлючНастроек);
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(Ключи.КлючОбъекта, Ключи.КлючНастроек, НастройкиФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет()
		
	РазвернутыеСтроки = Неопределено;
	РазвернутыеСтроки = ПолучитьРазвернутыеСтроки("Проекты", "Объект");
	
	НастройкиФормы.Специалисты = Специалисты;
	НастройкиФормы.Период = Период;
	НастройкиФормы.Продукт = Продукт;
	
	ИдентификаторыРазвернутых = ЗаполнитьДеревоПроектовИЗаданий(НастройкиФормы, РазвернутыеСтроки);
	РазвернутьСтроки("Проекты", ИдентификаторыРазвернутых);
	СохранитьРазвернутые = Новый Структура("Проекты, ПланПроекта", Ложь, Ложь);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область МатрицаТребований

#Область МатрицаТребований_ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура МатрицаТребованийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "МатрицаТребованийНомерСтроки" 
		ИЛИ Поле.Имя = "МатрицаТребованийОписание" Тогда 
			
		ОтредактироватьЭлементТабличнойЧасти(Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатрицаТребованийКомментарийОбъектаПриИзменении(Элемент)
	
	ИзменитьМодифицированностьМатрицыТребований(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область МатрицаТребований_ОбработчикиКоманд

&НаКлиенте
Процедура МатрицаТребованийВыгрузитьВExcel(Команда)
	
	Если МатрицаТребованийИзменена Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сохраните матрицу требований перед выгрузкой");
		Возврат;
	КонецЕсли;
	
	РезультатПомещенияExcelФайла = ВыгрузитьМатрицуТребованийВExcel(ВыбранныйОбъект, МатрицаТребований, УникальныйИдентификатор);
	
	Если РезультатПомещенияExcelФайла.ЕстьОшибка Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПомещенияExcelФайла.Ошибка);
	Иначе
		ПолучитьФайл(РезультатПомещенияExcelФайла.АдресФайла, РезультатПомещенияExcelФайла.ИмяФайла, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатрицаТребованийДобавить(Команда)
	
	ОтредактироватьЭлементТабличнойЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура МатрицаТребованийЗагрузитьИзExcel(Команда)
	
	Если МатрицаТребованийИзменена Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сохраните матрицу требований перед загрузкой");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДиалогВыбораФайлаЗавершение", ЭтотОбъект);
	НачатьПомещениеФайла(ОписаниеОповещения, , , Истина, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура МатрицаТребованийЗаписать(Команда)
	
	ЗаписатьМатрицуТребованийНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура МатрицаТребованийИзменить(Команда)
	
	ТекущаяСтрока = Элементы.МатрицаТребований.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ОтредактироватьЭлементТабличнойЧасти(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатрицаТребованийОтменитьИзменения(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросОтменыИзмененийМатрицыТребований", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Отменить изменения внесенные в матрицу требований?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура МатрицаТребованийУдалить(Команда)
	
	ТекущаяСтрока = Элементы.МатрицаТребований.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		МатрицаТребований.Удалить(ТекущаяСтрока);
		
		ИзменитьМодифицированностьМатрицыТребований(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МатрицаТребований_СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ВыгрузитьМатрицуТребованийВExcel(Знач ВыбранныйОбъект, Знач Требования, Знач ИдентификаторФормы)
	
	Возврат Документы.МатрицаТребований.ВыгрузитьМатрицуТребованийВExcel(ВыбранныйОбъект, Требования, ИдентификаторФормы);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗагрузитьМатрицуТребованийИзExcel(Знач АдресХранилища, Знач ВыбранныйОбъект)
	
	Результат = Новый Структура("Успешно, Данные", Ложь, Новый Массив);
	
	РезультатЗагрузки = Документы.МатрицаТребований.ЗагрузитьМатрицуТребованийИзExcel(ВыбранныйОбъект, АдресХранилища);
	
	Если РезультатЗагрузки.Успешно Тогда
		Для Каждого Строка Из РезультатЗагрузки.Таблица Цикл
			СтруктураСтроки = Новый Структура("НомерСтроки, Описание, Инициатор, ДатаВыявления, КаналПоступления, Статус, Комментарий");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Результат.Данные.Добавить(СтруктураСтроки);
		КонецЦикла;
		
		Результат.Успешно = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаписатьМатрицуТребований(Знач ВыбранныйОбъект, Знач МатрицаТребований, Знач Комментарий)
	
	Результат = Истина;
	
	Таблица = ДанныеФормыВЗначение(МатрицаТребований, Тип("ТаблицаЗначений"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МатрицаТребований.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.МатрицаТребований КАК МатрицаТребований
	|ГДЕ
	|	МатрицаТребований.ОбъектОснование = &ОбъектОснование";
	
	Запрос.УстановитьПараметр("ОбъектОснование", ВыбранныйОбъект);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ДокументМатрицаТребований = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			ДокументМатрицаТребований.Заблокировать();
		Исключение
			Результат = Ложь;
			Сообщение = "Не удалось сохранить матрицу требований. Объект заблокирован другим пользователем.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
			ЗаписьЖурналаРегистрации("Отчет.ПроектыПоСпециалисту.БлокировкаМатрицыТребований", УровеньЖурналаРегистрации.Ошибка,
				ВыбранныйОбъект, ВыбранныйОбъект, ОписаниеОшибки());
		КонецПопытки;
	Иначе
		ДокументМатрицаТребований = Документы.МатрицаТребований.СоздатьДокумент();
		ДокументМатрицаТребований.Заполнить(ВыбранныйОбъект);
		ДокументМатрицаТребований.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Результат Тогда
		ДокументМатрицаТребований.Требования.Загрузить(Таблица);
		ДокументМатрицаТребований.Комментарий = Комментарий;
		
		Попытка
			ДокументМатрицаТребований.Записать();
		Исключение
			Результат = Ложь;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка записи матрицы требований.");
			ЗаписьЖурналаРегистрации("Отчет.ПроектыПоСпециалисту.ЗаписьМатрицыТребований", УровеньЖурналаРегистрации.Ошибка,
				ВыбранныйОбъект, ВыбранныйОбъект, ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьМатрицуТребованийНаКлиенте()
	
	Если ЗаписатьМатрицуТребований(ВыбранныйОбъект, МатрицаТребований, МатрицаТребованийКомментарий) Тогда
		ИзменитьМодифицированностьМатрицыТребований(Ложь);
		Оповестить(СобытияОповещенияКлиент.ИмяСобытияОбновленияКоличестваЭлементовМатрицыТребований());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатрицуТребованийИзДанных(Знач Данные)
	
	МатрицаТребований.Очистить();
	
	Для Каждого Строка Из Данные Цикл
		ЗаполнитьЗначенияСвойств(МатрицаТребований.Добавить(), Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогВыбораФайлаЗавершение(Результат, Адрес, ИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		РезультатЗагрузки = ЗагрузитьМатрицуТребованийИзExcel(Адрес, ВыбранныйОбъект);
		Если РезультатЗагрузки.Успешно Тогда
			ЗаполнитьМатрицуТребованийИзДанных(РезультатЗагрузки.Данные);
			ИзменитьМодифицированностьМатрицыТребований(Истина);
		КонецЕсли;
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьМодифицированностьМатрицыТребований(Знач Значение)
	
	// Установка модифицированности матрицы требований
	МатрицаТребованийИзменена = Значение;
	
	// Изменение видимости элементов подсказки изменения матрицы требований
	Элементы.КартинкаМатрицаТребованийИзменена.Видимость = МатрицаТребованийИзменена;
	Элементы.ДекорацияМатрицаТребованийИзменена.Видимость = МатрицаТребованийИзменена;
	Элементы.МатрицаТребованийОтменитьИзменения.Видимость = МатрицаТребованийИзменена;
	
	// Блокировка элементов управления
	Элементы.Задачи.Доступность = НЕ МатрицаТребованийИзменена;
	Элементы.ДекорацияСоздатьЗадание.Доступность = НЕ МатрицаТребованийИзменена;
	Элементы.СортироватьЗаданияПоВозрастанию.Доступность = НЕ МатрицаТребованийИзменена;
	Элементы.СортироватьЗаданияПоУбыванию.Доступность = НЕ МатрицаТребованийИзменена;
	
	Элементы.Проекты.Доступность = НЕ МатрицаТребованийИзменена;
	Элементы.ДекорацияСоздатьПроект.Доступность = НЕ МатрицаТребованийИзменена;
	Элементы.СортироватьПроектыПоУбыванию.Доступность = НЕ МатрицаТребованийИзменена;
	Элементы.СортироватьПроектыПоВозрастанию.Доступность = НЕ МатрицаТребованийИзменена;
		
	// Блокировка команд таблицы матрицы требований если объект не выбран
	ОбъектВыбран = ЗначениеЗаполнено(ВыбранныйОбъект);
	Элементы.МатрицаТребованийДобавить.Доступность = ОбъектВыбран;
	Элементы.МатрицаТребованийИзменить.Доступность = ОбъектВыбран;
	Элементы.МатрицаТребованийУдалить.Доступность = ОбъектВыбран;
	Элементы.МатрицаТребованийВыгрузитьВExcel.Доступность = ОбъектВыбран;
	Элементы.МатрицаТребованийЗагрузитьИзExcel.Доступность = ОбъектВыбран;
	Элементы.МатрицаТребованийЗаписать.Доступность = ОбъектВыбран И МатрицаТребованийИзменена;
	
	ОбновитьЗаголовокМатрицыТребований();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокМатрицыТребований()
	
	Если МатрицаТребованийИзменена ИЛИ Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаМатрицаТребований Тогда
		КоличествоЭлементовМатрицыТребований = МатрицаТребований.Количество();
	Иначе
		КоличествоЭлементовМатрицыТребований = ПолучитьКоличествоЭлементовМатрицыТребований(ВыбранныйОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьМатрицуТребованийНаСервере(Знач ВыбранныйОбъект)
	
	Результат = Новый Структура("Успешно, Данные, Комментарий", Ложь, Новый Массив, "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МатрицаТребованийТребования.НомерСтроки КАК НомерСтроки,
	|	МатрицаТребованийТребования.Описание КАК Описание,
	|	МатрицаТребованийТребования.Инициатор КАК Инициатор,
	|	МатрицаТребованийТребования.ДатаВыявления КАК ДатаВыявления,
	|	МатрицаТребованийТребования.КаналПоступления КАК КаналПоступления,
	|	МатрицаТребованийТребования.Статус КАК Статус,
	|	МатрицаТребованийТребования.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.МатрицаТребований.Требования КАК МатрицаТребованийТребования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МатрицаТребований КАК МатрицаТребований
	|		ПО МатрицаТребованийТребования.Ссылка = МатрицаТребований.Ссылка
	|ГДЕ
	|	МатрицаТребований.ОбъектОснование = &ОбъектОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатрицаТребований.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.МатрицаТребований КАК МатрицаТребований
	|ГДЕ
	|	МатрицаТребований.ОбъектОснование = &ОбъектОснование";
	
	Запрос.УстановитьПараметр("ОбъектОснование", ВыбранныйОбъект);
	
	Пакеты = Запрос.ВыполнитьПакет();
	
	РезультатЗапросаТребования = Пакеты.Получить(0);
	Если НЕ РезультатЗапросаТребования.Пустой() Тогда
		Выборка = РезультатЗапросаТребования.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураЗаписи = Новый Структура("НомерСтроки, Описание, Инициатор, ДатаВыявления, КаналПоступления, Статус, Комментарий ");
			ЗаполнитьЗначенияСвойств(СтруктураЗаписи, Выборка);
			Результат.Данные.Добавить(СтруктураЗаписи);
		КонецЦикла;
		
		Результат.Успешно = Истина;
	КонецЕсли;
	
	РезультатЗапросаКомментарий = Пакеты.Получить(1);
	Если НЕ РезультатЗапросаКомментарий.Пустой() Тогда
		Выборка = РезультатЗапросаКомментарий.Выбрать();
		Выборка.Следующий();
		Результат.Комментарий = Выборка.Комментарий;
		Результат.Успешно = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьМатрицуТребований()
	
	МатрицаТребований.Очистить();
	МатрицаТребованийКомментарий = "";
	
	РезультатОбновления = ОбновитьМатрицуТребованийНаСервере(ВыбранныйОбъект);
	Если РезультатОбновления.Успешно Тогда
		МатрицаТребованийКомментарий = РезультатОбновления.Комментарий;
		ЗаполнитьМатрицуТребованийИзДанных(РезультатОбновления.Данные);
	КонецЕсли;
	
	ИзменитьМодифицированностьМатрицыТребований(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДобавлениеЭлементаТабличнойЧасти(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда	
		Если ДополнительныеПараметры.Добавление Тогда		
			НоваяСтрока = МатрицаТребований.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
			НоваяСтрока.НомерСтроки = МатрицаТребований.Количество();
		Иначе
			Строка = МатрицаТребований.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
			ЗаполнитьЗначенияСвойств(Строка, Результат);
		КонецЕсли;
		
		ИзменитьМодифицированностьМатрицыТребований(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросСохраненияМатрицыТребований(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьМатрицуТребованийНаКлиенте();
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		МатрицаТребованийИзменена = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросОтменыИзмененийМатрицыТребований(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбновитьМатрицуТребований();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеНастроекСписка(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Для Каждого Элемент Из Результат Цикл
			НастройкиФормы.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла; 
		
		ПрименитьНастройкиФормы(НастройкиФормы);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеНастроекТаблиц(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из Результат Цикл
		КлючНастроек = СтрШаблон("%1%2", Элемент.Ключ, ДополнительныеПараметры);
		НастройкиФормы.Вставить(КлючНастроек, Элемент.Значение);
	КонецЦикла; 
	
	ПрименитьНастройкиКолонок(ДополнительныеПараметры, НастройкиФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтредактироватьЭлементТабличнойЧасти(ТекущаяСтрока = Неопределено)
	
	ДополнительныеПараметры = Новый Структура;
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("ДокументОснование", ВыбранныйОбъект);
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ПараметрыСтроки.Вставить("Автор", ТекущаяСтрока.Инициатор);
		ПараметрыСтроки.Вставить("Статус", ТекущаяСтрока.Статус);
		ПараметрыСтроки.Вставить("ДатаВыявления", ТекущаяСтрока.ДатаВыявления);
		ПараметрыСтроки.Вставить("КаналПоступления", ТекущаяСтрока.КаналПоступления);
		ПараметрыСтроки.Вставить("Описание", ТекущаяСтрока.Описание);
		ПараметрыСтроки.Вставить("Комментарий", ТекущаяСтрока.Комментарий);
		
		ДополнительныеПараметры.Вставить("Добавление", Ложь);
		ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ТекущаяСтрока.ПолучитьИдентификатор());	
	Иначе
		ДополнительныеПараметры.Вставить("Добавление", Истина);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьДобавлениеЭлементаТабличнойЧасти", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.МатрицаТребований.Форма.ЭлементМатрицы", ПараметрыСтроки, ЭтотОбъект, 
		КлючУникальности, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоЭлементовМатрицыТребований(Знач ВыбранныйОбъект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Документ.МатрицаТребований.Требования КАК МатрицаТребованийТребования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МатрицаТребований КАК МатрицаТребований
	|		ПО МатрицаТребованийТребования.Ссылка = МатрицаТребований.Ссылка
	|ГДЕ
	|	МатрицаТребований.ОбъектОснование = &Объект";
	
	Запрос.Параметры.Вставить("Объект", ВыбранныйОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

&НаКлиенте
Функция ПолучитьРазвернутыеСтроки(Таблица, КлючевоеПоле)
	
	СостояниеСтрок = Новый СписокЗначений;
	
	Для Каждого Строка Из ЭтотОбъект[Таблица].ПолучитьЭлементы() Цикл
		СтрокаРазвернута = ПроверитьПодчиненныеСтрокиНаРазвернутость(Таблица, СостояниеСтрок, Строка, КлючевоеПоле);
		СостояниеСтрок.Добавить(Строка[КлючевоеПоле], , СтрокаРазвернута);
	КонецЦикла;
	
	Возврат СостояниеСтрок;
	
КонецФункции

&НаСервере
Функция ПолучитьСоставКолонок(Знач ТаблицаФормы, Знач СкрытьПервую = Ложь)
	
	СоставКолонок = Новый СписокЗначений;
	
	Для Каждого Колонка Из ТаблицаФормы.ПодчиненныеЭлементы Цикл
		Если СкрытьПервую Тогда
			СкрытьПервую = Ложь;
			Продолжить;
		КонецЕсли;
		
		СоставКолонок.Добавить(Колонка.Имя, Колонка.Заголовок, Истина);
	КонецЦикла;
	
	Возврат СоставКолонок;
	
КонецФункции

&НаСервере
Функция ПолучитьИдентификаторыРазворачиваемыхСтрок(Таблица, Знач РазворачиваемыеСтроки, Знач КлючевоеПоле)
	
	Идентификаторы = Новый Массив;
	
	Для Каждого Строка Из Таблица.ПолучитьЭлементы() Цикл
		ЭлементСписка = РазворачиваемыеСтроки.НайтиПоЗначению(Строка[КлючевоеПоле]);
		
		Если ЭлементСписка <> Неопределено И ЭлементСписка.Пометка Тогда
			Идентификаторы.Добавить(Строка.ПолучитьИдентификатор());
		КонецЕсли;
		
		ПолучитьИдентификаторыПодчиненныхРазворачиваемыхСтрок(Идентификаторы, Строка, РазворачиваемыеСтроки, КлючевоеПоле);
	КонецЦикла;
	
	Возврат Идентификаторы;
	
КонецФункции

&НаСервере
Процедура ПолучитьИдентификаторыПодчиненныхРазворачиваемыхСтрок(Идентификаторы, Родитель, Разворачиваемые, КлючевоеПоле)
	
	Для Каждого Строка Из Родитель.ПолучитьЭлементы() Цикл
		ЭлементСписка = Разворачиваемые.НайтиПоЗначению(Строка[КлючевоеПоле]);
		
		Если ЭлементСписка <> Неопределено И ЭлементСписка.Пометка Тогда
			Идентификаторы.Добавить(Строка.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Функция ПолучитьОтмеченныеРоли(Знач НастройкиУчастия)
	
	ОтмеченныеРоли = Новый Массив;
	
	Для Каждого ЭлементСписка Из НастройкиУчастия Цикл
		Если ЭлементСписка.Пометка Тогда
			ОтмеченныеРоли.Добавить(ЭлементСписка.Значение);
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ОтмеченныеРоли;
	
КонецФункции

&НаСервере
Процедура ПрименитьНастройкиКолонок(ИмяТаблицы, Знач НастройкиФормы)
	
	ИмяНастройкиКолонок = СтрШаблон("НастройкиКолонок%1", ИмяТаблицы);

	ТаблицаФормы = Элементы[ИмяТаблицы];
	НастройкиКолонок =  НастройкиФормы[ИмяНастройкиКолонок];
	
	Для Каждого Колонка Из НастройкиКолонок Цикл
		ЭлементКолонка = Элементы.Найти(Колонка.Значение);
		
		Если ЭлементКолонка <> Неопределено Тогда
			Элементы.Переместить(ЭлементКолонка, ТаблицаФормы);
			ЭлементКолонка.Видимость = Колонка.Пометка;
		КонецЕсли;
	КонецЦикла;
	
	СохранитьНастройкиФормы(НастройкиФормы, "НастройкиОтчета");
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкиФормы(Знач НастройкиФормы)
	
	ДобавитьУсловноеОформлениеУчастия(НастройкиФормы);
	СохранитьНастройкиФормы(НастройкиФормы, "НастройкиОтчета");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьНастройку(Настройки, ИмяНастройки, Знач ЗначениеПоУмолчанию = Неопределено)
	
	Если НЕ Настройки.Свойство(ИмяНастройки) Тогда
		Настройки.Вставить(ИмяНастройки, ЗначениеПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьСохранитьРазвернутостьСтрок() Экспорт
	
	СохраняемыеДанные = Новый Структура();
	
	Если СохранитьРазвернутые.Проекты Тогда
		РазвернутыеПроекты = ПолучитьРазвернутыеСтроки("Проекты", "Объект");
		СохраняемыеДанные.Вставить("РазвернутыеПроектыСпециалиста", РазвернутыеПроекты);
	КонецЕсли;
	
	Если СохранитьРазвернутые.ПланПроекта Тогда
		РазвернутыеПланы = ПолучитьРазвернутыеСтроки("ПланПроекта", "КлючСобытия");
		СохраняемыеДанные.Вставить("РазвернутыеПланыПроектаСпециалиста", РазвернутыеПланы);
	КонецЕсли;
	
	Если СохраняемыеДанные.Количество() > 0 Тогда
		СохранитьРазвернутые(СохраняемыеДанные, НастройкиФормы, ВыбранныйОбъект);
	КонецЕсли;
	
	СохранитьРазвернутые = Новый Структура("Проекты, ПланПроекта", Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПодчиненныеСтрокиНаРазвернутость(Таблица, СостояниеСтрок, Строка, Знач КлючевоеПоле)
	
	ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
	
	Если ПодчиненныеСтроки.Количество() = 0 Тогда
		РодительРазвернут = Истина;
	Иначе
		РодительРазвернут = Элементы[Таблица].Развернут(Строка.ПолучитьИдентификатор());
		
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			СтрокаРазвернута = ПроверитьПодчиненныеСтрокиНаРазвернутость(Таблица, СостояниеСтрок, ПодчиненнаяСтрока, КлючевоеПоле);
			СостояниеСтрок.Добавить(ПодчиненнаяСтрока[КлючевоеПоле], , СтрокаРазвернута);
		КонецЦикла;
	КонецЕсли;
	
	Возврат РодительРазвернут;
	
КонецФункции 

&НаКлиенте
Процедура РазвернутьСтроки(ИмяТаблицы, ИдентификаторыРазвернутых)
	
	Если ИдентификаторыРазвернутых <> Неопределено Тогда
		Для Каждого Идентификатор Из ИдентификаторыРазвернутых Цикл
			Элементы[ИмяТаблицы].Развернуть(Идентификатор);
		КонецЦикла;
	Иначе
		Для Каждого Строка Из ЭтотОбъект[ИмяТаблицы].ПолучитьЭлементы() Цикл
			Идентификатор = Строка.ПолучитьИдентификатор();
			Элементы[ИмяТаблицы].Развернуть(Идентификатор, Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьРазвернутые(Знач СохраняемыеДанные, Знач НастройкиФормы, Знач ВыбранныйОбъект)
	
	РазвернутыеСтрокиПроектов = Неопределено;
	РазвернутыеСтрокиПлана = Неопределено;
	
	СтрокаСпециалисты = СтрСоединить(НастройкиФормы.Специалисты.ВыгрузитьЗначения(), ",");
	
	Если СохраняемыеДанные.Свойство("РазвернутыеПроектыСпециалиста", РазвернутыеСтрокиПроектов) Тогда
		Ключи = ПолучитьКлючиНастроек("РазвернутыеПроектыСпециалиста");
		РазвернутыеПроекты = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(Ключи.КлючОбъекта, Ключи.КлючНастроек);
		
		Если РазвернутыеПроекты = Неопределено Тогда
			РазвернутыеПроекты = Новый Соответствие;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НастройкиФормы.Период.ДатаНачала) ИЛИ ЗначениеЗаполнено(НастройкиФормы.Период.ДатаОкончания) Тогда
			СохраненныеРазвернутыеСтроки = РазвернутыеПроекты.Получить(СтрокаСпециалисты);
			
			Если СохраненныеРазвернутыеСтроки <> Неопределено Тогда
				Для Каждого ЭлементСписка Из РазвернутыеСтрокиПроектов Цикл
					СохраненныйЭлемент = СохраненныеРазвернутыеСтроки.НайтиПоЗначению(ЭлементСписка.Значение);
					
					Если СохраненныйЭлемент = Неопределено Тогда
						ЗаполнитьЗначенияСвойств(СохраненныеРазвернутыеСтроки.Добавить(), ЭлементСписка);
					Иначе
						СохраненныйЭлемент.Пометка = ЭлементСписка.Пометка;
					КонецЕсли;
				КонецЦикла;
				
				РазвернутыеСтрокиПроектов = СохраненныеРазвернутыеСтроки;
			КонецЕсли;
		КонецЕсли; 
		
		РазвернутыеПроекты.Вставить(СтрокаСпециалисты, РазвернутыеСтрокиПроектов);
		ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(Ключи.КлючОбъекта, Ключи.КлючНастроек, РазвернутыеПроекты);
	КонецЕсли;
	
	Если СохраняемыеДанные.Свойство("РазвернутыеПланыПроектаСпециалиста", РазвернутыеСтрокиПлана) Тогда
		Ключи = ПолучитьКлючиНастроек("РазвернутыеПланыПроектаСпециалиста");
		РазвернутыеПланыПроекта = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(Ключи.КлючОбъекта, Ключи.КлючНастроек);
		
		Если РазвернутыеПланыПроекта = Неопределено Тогда
			РазвернутыеПланыПроекта = Новый Соответствие;
		КонецЕсли;
		
		РазвернутыеПланыПроекта.Вставить(ВыбранныйОбъект, РазвернутыеСтрокиПлана);
		ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(Ключи.КлючОбъекта, Ключи.КлючНастроек, РазвернутыеПланыПроекта);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЗаинтересованныеЛица

&НаКлиенте
Процедура ТаблицаЗаинтересованныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
 
	ОбщегоНазначенияКлиент.ОткрытьФормуЗаписиЗаинтересованныеЛица(ЭтотОбъект, ТаблицаЗаинтересованных, КлючУникальности,
		ВыбранныйОбъект, ТекущиеДанные.Пользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаинтересованныеЛицаДобавить(Команда)
	
	Если НЕ ЗначениеЗаполнено(ВыбранныйОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.ОткрытьФормуЗаписиЗаинтересованныеЛица(ЭтотОбъект, ТаблицаЗаинтересованных,
		КлючУникальности, ВыбранныйОбъект);	
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаинтересованныеЛицаИзменить(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаЗаинтересованных.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.ОткрытьФормуЗаписиЗаинтересованныеЛица(ЭтотОбъект, ТаблицаЗаинтересованных,
		КлючУникальности, ВыбранныйОбъект, ТекущиеДанные.Пользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаинтересованныеЛицаУдалить(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаЗаинтересованных.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияВызовСервера.УдалитьЗаписьЗаинтересованныеЛица(ВыбранныйОбъект, ТекущиеДанные.Пользователь);
	ОбщегоНазначенияКлиент.ОбновитьТаблицуЗаинтересованныхЛиц(ВыбранныйОбъект, ТаблицаЗаинтересованных);	
	КоличествоЗаинтересованныхЛиц = ТаблицаЗаинтересованных.Количество();

КонецПроцедуры

#КонецОбласти  

#Область Инициализация

#Если Клиент Тогда
	СохранитьРазвернутые = Новый Структура("Проекты, ПланПроекта", Ложь, Ложь);
	РедактированиеСтроки = Ложь;
#КонецЕсли

#КонецОбласти
