///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

// НастройкиОтчета - Структура для настроек отчета
&НаКлиенте
Перем НастройкиОтчета;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастройкиИзХранилища = ПолучитьНастройкиОтчета();
	
	Если НастройкиИзХранилища <> Неопределено Тогда
		Если НастройкиИзХранилища.Свойство("Направление") Тогда
			Направление = НастройкиИзХранилища.Направление;
		КонецЕсли;
		Если НастройкиИзХранилища.Свойство("Автор") Тогда
			Автор = НастройкиИзХранилища.Автор;
		КонецЕсли;
		Если НастройкиИзХранилища.Свойство("Система") Тогда
			Система = НастройкиИзХранилища.Система;
		КонецЕсли;
		Если НастройкиИзХранилища.Свойство("ГруппаЗаказчиков") Тогда
			ГруппаЗаказчиков = НастройкиИзХранилища.ГруппаЗаказчиков;
		КонецЕсли;
		ДатаНачало = НастройкиИзХранилища.ДатаНачало;
		ДатаОкончание = НастройкиИзХранилища.ДатаОкончание;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыгрузитьВExcel(Команда)
	
	Если Результат.ВысотаТаблицы = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет данных для выгрузки");
		Возврат;
	КонецЕсли;
	
	РезультатВыгрузки = ВыгрузитьВExcelНаСервере();
	
	Если РезультатВыгрузки.ЕстьОшибка Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатВыгрузки.Ошибка);
	Иначе
		ПолучитьФайл(РезультатВыгрузки.АдресФайла, РезультатВыгрузки.ИмяФайла, Истина);
		ПоказатьОповещениеПользователя("Файл выгружен");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСформироватьОтчет(Команда)
	
	Если НЕ ПараметрыЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОтчета = Новый Структура;

	НастройкиОтчета.Вставить("ДатаНачало", ДатаНачало);
	НастройкиОтчета.Вставить("ДатаОкончание", ДатаОкончание);
	
	Если Направление.Количество() > 0 Тогда 
		НастройкиОтчета.Вставить("Направление", Направление);
	КонецЕсли;
	Если Автор.Количество() > 0 Тогда 
		НастройкиОтчета.Вставить("Автор", Автор);
	КонецЕсли;
	Если Система.Количество() > 0 Тогда 
		НастройкиОтчета.Вставить("Система", Система);
	КонецЕсли;
	Если ГруппаЗаказчиков.Количество() > 0 Тогда 
		НастройкиОтчета.Вставить("ГруппаЗаказчиков", ГруппаЗаказчиков);
	КонецЕсли;
	
	СформироватьОтчетЧерезСКД(НастройкиОтчета);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АвторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура("ВыбранныеПользователи", Автор);
	ОткрытьФорму("Справочник.Пользователи.Форма.МножественныйВыбор", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	Автор.ЗагрузитьЗначения(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаЗаказчиковНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = ИнтерфейсПриложенияКлиент.СформироватьПараметрыОткрытия();
	ПараметрыОткрытия.ГруппыЗаказчиков.Значение = ГруппаЗаказчиков.ВыгрузитьЗначения();
	ПараметрыОткрытия.ГруппыЗаказчиков.Использование = Истина;
	
	ДополнительныеПараметры = Новый Структура("ИмяРеквизита, КлючСтруктуры", "ГруппаЗаказчиков", "ВыбранныеГруппыЗаказчиков");
	
	ИнтерфейсПриложенияКлиент.ОткрытьФормуНастройкиИнструментов(ЭтотОбъект, ПараметрыОткрытия, , ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура НаправлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = ИнтерфейсПриложенияКлиент.СформироватьПараметрыОткрытия();
	ПараметрыОткрытия.Направления.Значение = Направление;
	ПараметрыОткрытия.Направления.Использование = Истина;

	ДополнительныеПараметры = Новый Структура("ИмяРеквизита, КлючСтруктуры", "Направление", "ВыбранныеНаправления");

	ИнтерфейсПриложенияКлиент.ОткрытьФормуНастройкиИнструментов(ЭтотОбъект, ПараметрыОткрытия, , ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыбор(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПараметрыЗаполнены() Тогда		
		ОткрытьФорму("Отчет.ЗаявкиЗаПериод.Форма.ФормаРасшифровки", НастройкиОтчета, ,
			Новый УникальныйИдентификатор);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СистемаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	ПараметрыОткрытия = ИнтерфейсПриложенияКлиент.СформироватьПараметрыОткрытия();
	ПараметрыОткрытия.Системы.Значение = Система;
	ПараметрыОткрытия.Системы.Использование = Истина;
	
	ДополнительныеПараметры = Новый Структура("ИмяРеквизита, КлючСтруктуры", "Система", "ВыбранныеСистемы");
	
	ИнтерфейсПриложенияКлиент.ОткрытьФормуНастройкиИнструментов(ЭтотОбъект, ПараметрыОткрытия, , ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ВыгрузитьВExcelНаСервере()
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ЕстьОшибка", Ложь);
	РезультатВыгрузки.Вставить("Ошибка", "");
	РезультатВыгрузки.Вставить("ИмяФайла", "");
	РезультатВыгрузки.Вставить("АдресФайла", "");
	
	Лист2 = СформироватьДокументРасшифровки();
	
	Листы = Новый СписокЗначений;
	Листы.Добавить(Результат, "Отчет");
	Листы.Добавить(Лист2, "Расшифровка");
	
	СписокФайлов = Новый СписокЗначений;

	Для Каждого Лист Из Листы Цикл
		ИмяСтраницы = Лист.Представление;
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xlsx");
		
		Попытка
			Лист.Значение.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLSX);
		Исключение
			РезультатВыгрузки.ЕстьОшибка = Истина;
			РезультатВыгрузки.Ошибка = СтрШаблон("Не удалось сформировать файл: %1 %2", ИмяСтраницы, ОписаниеОшибки()); 
			Возврат РезультатВыгрузки;
		КонецПопытки;
	
		СписокФайлов.Добавить(ИмяВременногоФайла, ИмяСтраницы);
	КонецЦикла;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".XLSX");

	ПриложениеExcel = ОбщегоНазначения.СоздатьОбъектExcelApplication();
	
	Если ПриложениеExcel = Неопределено Тогда
		РезультатВыгрузки.ЕстьОшибка = Истина;
		РезультатВыгрузки.Ошибка = "Не удалось запустить Excel: " + ОписаниеОшибки();
		Возврат РезультатВыгрузки;
	КонецЕсли;
			
	КнигаExcel = ПриложениеExcel.Workbooks.Add();
	КнигаExcel.SaveAs(ИмяВременногоФайла);
	
	Для Каждого ФайлЛиста Из СписокФайлов Цикл	
		Лист = ПриложениеExcel.Workbooks.Open(ФайлЛиста.Значение);
		Лист.Worksheets(1).Name = ФайлЛиста.Представление;
		Лист.Worksheets(1).Copy(, КнигаExcel.Worksheets(КнигаExcel.Sheets.Count));
		Лист.Close(0);
		Лист = Неопределено;
		УдалитьФайлы(ФайлЛиста.Значение);
	КонецЦикла;
	
	КнигаExcel.Worksheets(1).Delete();
	
	ОбщегоНазначения.УничтожитьОбъектExcelApplication(ПриложениеExcel, КнигаExcel, , Истина);
	
	ДвоичныеДанныеВложения = Новый ДвоичныеДанные(ИмяВременногоФайла);
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанныеВложения, УникальныйИдентификатор);
	УдалитьФайлы(ИмяВременногоФайла);
	
	ДатаВыгрузки = Формат(ТекущаяДатаСеанса(), "ДФ=yyyy-MM-dd_hh-mm-ss");
	РезультатВыгрузки.ИмяФайла = СтрШаблон("ЗаявкиЗаПериод %1.xlsx", ДатаВыгрузки);
	РезультатВыгрузки.АдресФайла = АдресХранилища;
	
	Возврат РезультатВыгрузки;	
		
КонецФункции

&НаСервере
Процедура ИнициализироватьДополнительныеНастройкиСКД(СхемаКомпоновкиДанных, НастройкиСКД)
	
	Если ЗначениеЗаполнено(ДатаНачало) Тогда 
		ПараметрДатаНачала = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных("ДатаНачало"));	
		ПараметрДатаНачала.Значение = НачалоМесяца(ДатаНачало);
		ПараметрДатаНачала.Использование = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОкончание) Тогда
		ПараметрДатаОкончания = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных("ДатаОкончание"));	
		ПараметрДатаОкончания.Значение = КонецМесяца(ДатаОкончание);
		ПараметрДатаОкончания.Использование = Истина;
	КонецЕсли;
	 		
	НайтиЗначениеПараметраСКД("Направление", Направление, НастройкиСКД);
	НайтиЗначениеПараметраСКД("Автор", Автор, НастройкиСКД);
	НайтиЗначениеПараметраСКД("Система", Система, НастройкиСКД);
	НайтиЗначениеПараметраСКД("ГруппаЗаказчиков", ГруппаЗаказчиков, НастройкиСКД);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КлючиНастроек()
	
	Результат = Новый Структура;
	Результат.Вставить("Объект", "Отчет.ЗаявкиЗаПериод.Форма.ФормаОтчета");
	Результат.Вставить("Настройка", "НастройкаОтчета");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура НайтиЗначениеПараметраСКД(Знач ИмяПараметра, Знач ЗначениеПараметра, Знач НастройкиСКД)
	
	Параметр = НастройкиСКД.ПараметрыДанных.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	
	Если ЗначениеПараметра.Количество() > 0 Тогда 		
		Параметр.Значение = ЗначениеПараметра;
		Параметр.Использование = Истина;
	Иначе
		Параметр.Использование = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиОтчета()
	
	Ключи = КлючиНастроек();
	
	Возврат ХранилищеПользовательскихНастроекОтчетов.Загрузить(Ключи.Объект, Ключи.Настройка);
	
КонецФункции

&НаКлиенте
Функция ПараметрыЗаполнены()
	
	Проверка = Ложь;
	
	Если ЗначениеЗаполнено(ДатаНачало) И ЗначениеЗаполнено(ДатаОкончание) Тогда
		Если Направление.Количество() > 0 ИЛИ Автор.Количество() > 0
			ИЛИ Система.Количество() > 0 Тогда
				Проверка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Проверка;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкиОтчета(Знач Настройки)
	
	Ключи = КлючиНастроек();
	
	ХранилищеПользовательскихНастроекОтчетов.Сохранить(Ключи.Объект, Ключи.Настройка, Настройки);
	
КонецПроцедуры

&НаСервере
Функция СформироватьДокументРасшифровки()
	
	ДокументРасшифровки = Новый ТабличныйДокумент;

	СхемаКомпоновкиДанных = РеквизитФормыВЗначение("Отчет").ПолучитьМакет("Расшифровка");	
	Настройки = СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки;	
	
	Если ЗначениеЗаполнено(ДатаНачало) Тогда
		ПараметрДатаНачала = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных("ДатаНачало"));	
		ПараметрДатаНачала.Значение = НачалоМесяца(ДатаНачало);
		ПараметрДатаНачала.Использование = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОкончание) Тогда
		ПараметрДатаОкончания = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных("ДатаОкончание"));	
		ПараметрДатаОкончания.Значение = КонецМесяца(ДатаОкончание);
		ПараметрДатаОкончания.Использование = Истина;
	КонецЕсли;
		
	НайтиЗначениеПараметраСКД("Направление", Направление, Настройки);
	НайтиЗначениеПараметраСКД("Автор", Автор, Настройки);
	НайтиЗначениеПараметраСКД("Система", Система, Настройки);
	НайтиЗначениеПараметраСКД("ГруппаЗаказчиков", ГруппаЗаказчиков, Настройки);
		
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);			
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРасшифровки);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	Возврат ДокументРасшифровки;
	
КонецФункции

&НаСервере
Процедура СформироватьОтчетЧерезСКД(Знач НастройкиОтчета)
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	СхемаКомпоновкиДанных = РеквизитФормыВЗначение("Отчет").ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Настройки = СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки;
	
	ИнициализироватьДополнительныеНастройкиСКД(СхемаКомпоновкиДанных, Настройки);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , , Истина);
	
	Результат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Элементы.Результат.ОтображениеСостояния.Видимость = Ложь;
	Элементы.Результат.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	
	СохранитьНастройкиОтчета(НастройкиОтчета);
	
КонецПроцедуры

#КонецОбласти
