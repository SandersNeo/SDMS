///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
			
	ЗаполнитьСписокВыбораВидСравнения(Элементы.ФильтрВидСравнения.СписокВыбора);   
	ЗаполнитьСписокВыбораВидСравнения(Элементы.ФильтрРолиВидСравнения.СписокВыбора);  
	ЗаполнитьСписокВыбораВидСравнения(Элементы.ФильтрНаправленияВидСравнения.СписокВыбора);
	
	Если Параметры.Свойство("ПараметрыОткрытия") Тогда 
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры.ПараметрыОткрытия);
	Иначе
		ЗагрузитьПользовательскиеНастройки();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		ЗаполнитьПериод();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФильтрВидСравнения) Тогда
		ФильтрВидСравнения = ВидСравнения.Равно;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ФильтрРолиВидСравнения) Тогда
		ФильтрРолиВидСравнения = ВидСравнения.Равно;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ФильтрНаправленияВидСравнения) Тогда
		ФильтрНаправленияВидСравнения = ВидСравнения.Равно;
	КонецЕсли;
	
	ИнструментыСервер.ПриСозданииНаСервере(ЭтотОбъект, Элементы.Результат.Имя, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)  
	
	ИнструментыКлиент.ПриОткрытии(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ИнструментыКлиент.ПриЗакрытии(ЗавершениеРаботы, УникальныйИдентификатор)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПроектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура("МножественныйВыбор", Ложь);
	ОткрытьФорму("Справочник.Проекты.ФормаВыбора", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ФильтрВидСравнения = ВидСравнения.Равно 
		ИЛИ ФильтрВидСравнения = ВидСравнения.НеРавно Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.Пользователи.Форма.ФормаВыбора", , Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)    
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		СтандартнаяОбработка = Ложь;
		Исполнители.Очистить();
		Исполнители.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаправленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ФильтрНаправленияВидСравнения = ВидСравнения.Равно 
		ИЛИ ФильтрНаправленияВидСравнения = ВидСравнения.НеРавно Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.НаправленияРазработки.Форма.ФормаВыбора", , Элемент);
	КонецЕсли;  
	
КонецПроцедуры 

&НаКлиенте
Процедура НаправленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НаправленияРазработки") Тогда
		СтандартнаяОбработка = Ложь;
		Направления.Очистить();
		Направления.Добавить(ВыбранноеЗначение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РолиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)   
	
	СтандартнаяОбработка = Ложь; 
	
	СписокРолей = Новый СписокЗначений();
	СписокРолей.Добавить("Разработчик", "Разработчик", Ложь);
	СписокРолей.Добавить("Аналитик", "Аналитик", Ложь);
	СписокРолей.Добавить("Тестировщик", "Тестировщик", Ложь);
	СписокРолей.Добавить("Остальные", "Остальные", Ложь);
	
	Для Каждого Роль Из Роли Цикл 
		СписокРолей.НайтиПоЗначению(Роль.Значение).Пометка = Истина;
	КонецЦикла;	

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВариантЗаполнения", 1);
	ПараметрыФормы.Вставить("ОтмеченныеЗначения", СписокРолей);
	
	Если ФильтрРолиВидСравнения = ВидСравнения.Равно 
		ИЛИ ФильтрРолиВидСравнения = ВидСравнения.НеРавно Тогда
	    	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	Иначе
        ПараметрыФормы.Вставить("МножественныйВыбор", Истина);    
	КонецЕсли; 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборРолей", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ПодборЗначений", ПараметрыФормы, Элемент, , , , ОписаниеОповещения);   
	
КонецПроцедуры   

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		ПоказатьЗначение(, Расшифровка); 
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ФильтрВидСравненияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрВидСравненияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрВидСравненияПриИзменении(Элемент)
	
	ОдиночныйВыбор = (ФильтрВидСравнения = ВидСравнения.Равно ИЛИ ФильтрВидСравнения = ВидСравнения.НеРавно);
		
	Если ОдиночныйВыбор И Исполнители.Количество() > 1 Тогда
		Исполнители.Очистить();
	КонецЕсли;
				
КонецПроцедуры 

&НаКлиенте
Процедура ФильтрНаправленияВидСравненияПриИзменении(Элемент)
	
	ОдиночныйВыбор = (ФильтрНаправленияВидСравнения = ВидСравнения.Равно ИЛИ ФильтрНаправленияВидСравнения = ВидСравнения.НеРавно);
		
	Если ОдиночныйВыбор И Направления.Количество() > 1 Тогда
		Направления.Очистить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФильтрНаправленияВидСравненияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;  
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрНаправленияВидСравненияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрРолиВидСравненияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрРолиВидСравненияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ФильтрРолиВидСравненияПриИзменении(Элемент)
	
	ОдиночныйВыбор = (ФильтрРолиВидСравнения = ВидСравнения.Равно ИЛИ ФильтрРолиВидСравнения = ВидСравнения.НеРавно);
		
	Если ОдиночныйВыбор И Роли.Количество() > 1 Тогда
		Роли.Очистить();
	КонецЕсли;
	
КонецПроцедуры  

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыборПериода(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборПериода", ЭтотОбъект);
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();                                 
	Диалог.Период = Период;
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	РезультатВыгрузки = ВыгрузитьВExcelНаСервере();
	
	Если РезультатВыгрузки.ЕстьОшибка Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатВыгрузки.Ошибка);
	Иначе
		ПолучитьФайл(РезультатВыгрузки.АдресФайла, РезультатВыгрузки.ИмяФайла, Истина);
		ПоказатьОповещениеПользователя("Файл выгружен");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	
	ВидимостьФильтров = Элементы.ГруппаФильтры.Видимость;
	
	Элементы.Настройки.Пометка = НЕ ВидимостьФильтров;	
	Элементы.ГруппаФильтры.Видимость = НЕ ВидимостьФильтров;
		
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	ОчиститьСообщения();	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(Проект) Тогда
		ТекстОшибки = "Для формирования отчета необходимо заполнить поле ""Проект"".";
	ИначеЕсли НЕ ЗначениеЗаполнено(Период) Тогда
		ТекстОшибки = "Для формирования отчета необходимо заполнить период.";
	ИначеЕсли ФильтрПоИсполнителям И Исполнители.Количество() = 0 Тогда
		ТекстОшибки = "Для формирования отчета необходимо выбрать исполнителей или отключить фильтр по исполнителям.";    
	ИначеЕсли ФильтрПоРоли И Роли.Количество() = 0 Тогда
		ТекстОшибки = "Для формирования отчета необходимо выбрать роли или отключить фильтр по роли.";  
	ИначеЕсли ФильтрПоНаправлениям И Направления.Количество() = 0 Тогда
		ТекстОшибки = "Для формирования отчета необходимо выбрать направления или отключить фильтр по направлениям.";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Элементы.Выгрузить.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.Сформировать.Доступность = Ложь;
	Элементы.Выгрузить.Доступность = Ложь; 
	
	Если СкрыватьНастройкиПослеФормированияОтчета Тогда
		Элементы.Настройки.Пометка = Ложь;	
		Элементы.ГруппаФильтры.Видимость = Ложь;
	КонецЕсли;
	
	ОбновитьДанныеИнструмента();
	
КонецПроцедуры                                   
                                                
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ВыгрузитьВExcelНаСервере()
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ЕстьОшибка", Ложь);
	РезультатВыгрузки.Вставить("Ошибка", "");
	РезультатВыгрузки.Вставить("ИмяФайла", "");
	РезультатВыгрузки.Вставить("АдресФайла", "");
	
	ПараметрыОтчета = ПараметрыОтчета(ЭтотОбъект);	
	ТабличныеДокументы = Отчеты.БюджетПроекта.СформироватьТабличныйДокумент(ПараметрыОтчета, Истина);
		
	СписокФайлов = Новый СписокЗначений;

	Для Каждого Документ Из ТабличныеДокументы Цикл
		ИмяСтраницы = Документ.Представление;
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xlsx");
		
		Попытка
			Документ.Значение.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLSX);
		Исключение
			РезультатВыгрузки.ЕстьОшибка = Истина;
			РезультатВыгрузки.Ошибка = СтрШаблон("Не удалось сформировать файл: %1 %2", ИмяСтраницы, ОписаниеОшибки());
			УдалитьФайлы(ИмяВременногоФайла);
			Возврат РезультатВыгрузки;
		КонецПопытки;
	
		СписокФайлов.Добавить(ИмяВременногоФайла, ИмяСтраницы);
	КонецЦикла;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".XLSX");

	Excel = ОбщегоНазначения.СоздатьОбъектExcelApplication();
	
	Если Excel = Неопределено Тогда
		РезультатВыгрузки.ЕстьОшибка = Истина;
		РезультатВыгрузки.Ошибка = "Не удалось запустить Excel: " + ОписаниеОшибки();
		Возврат РезультатВыгрузки;
	КонецЕсли;
			
	КнигаОбщаяExcel = Excel.Workbooks.Add();
	КнигаОбщаяExcel.SaveAs(ИмяВременногоФайла);
	
	Для Каждого ФайлЛиста Из СписокФайлов Цикл	
		КнигаExcel = Excel.Workbooks.Open(ФайлЛиста.Значение);
		Лист = КнигаExcel.Worksheets(1);
		Лист.Name = ФайлЛиста.Представление;
		
		Если ФайлЛиста.Представление = "Отчет" Тогда	
			// Колонка "Гиперссылка"
			КоличествоСтрок = ТабличныеДокументы[0].Значение.ВысотаТаблицы;
			НомерСтрокиПослеШапки = 3;
			НомерКолонкиСсылки = 12;
			
			Для НомерСтроки = НомерСтрокиПослеШапки По КоличествоСтрок Цикл
				ВнешняяСсылка = Excel.Cells(НомерСтроки, НомерКолонкиСсылки).Value;
				
				Если ЗначениеЗаполнено(ВнешняяСсылка) Тогда
					Лист.Hyperlinks.Add(Excel.Cells(НомерСтроки, НомерКолонкиСсылки), ВнешняяСсылка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Лист.Copy(, КнигаОбщаяExcel.Worksheets(КнигаОбщаяExcel.Sheets.Count));
	
		КнигаExcel.Close(0);
		КнигаExcel = Неопределено;
		УдалитьФайлы(ФайлЛиста.Значение);
	КонецЦикла;
	
	КнигаОбщаяExcel.Worksheets(1).Delete();
	КнигаОбщаяExcel.Worksheets(1).Activate();
	
	ОбщегоНазначения.УничтожитьОбъектExcelApplication(Excel, КнигаОбщаяExcel, , Истина);
	
	ДвоичныеДанныеВложения = Новый ДвоичныеДанные(ИмяВременногоФайла);
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанныеВложения, УникальныйИдентификатор);
	УдалитьФайлы(ИмяВременногоФайла);
		
	НомерПроекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "Код");
	ДатаВыгрузки = Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy");
	
	РезультатВыгрузки.ИмяФайла = СтрШаблон("Бюджет_проекта_%1_%2.xlsx", НомерПроекта, ДатаВыгрузки);
	РезультатВыгрузки.АдресФайла = АдресХранилища;
	
	Возврат РезультатВыгрузки;	
		
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьДанныеНаСервере(Знач АдресВременногоХранилища)
	
	ЕстьДанныеНаСервере = Ложь;
	
	ДанныеХранилища = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Если ТипЗнч(ДанныеХранилища) = Тип("ТабличныйДокумент") Тогда										
		ЕстьДанныеНаСервере = Истина;
	КонецЕсли;
	
	Возврат ЕстьДанныеНаСервере;
		
КонецФункции

&НаСервере
Процедура ЗаполнитьПериод()
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Период.ДатаНачала = НачалоГода(ТекущаяДата);
	Период.ДатаОкончания = КонецДня(ТекущаяДата);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораВидСравнения(СписокВыбора)

	СписокВыбора.Добавить(ВидСравнения.Равно);
	СписокВыбора.Добавить(ВидСравнения.НеРавно);
	СписокВыбора.Добавить(ВидСравнения.ВСписке);
	СписокВыбора.Добавить(ВидСравнения.НеВСписке);	

КонецПроцедуры
                       
&НаСервере
Процедура ЗаполнитьТабличныйДокументНаСервере()
	
	Результат = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеИнструмента() Экспорт
	
	МетодОбновления = "Отчеты.БюджетПроекта.СформироватьОтчет";
	
	ПараметрыОтчета = ПараметрыОтчета(ЭтотОбъект);
	
	ПараметрыФонового = Новый Массив;
	ПараметрыФонового.Добавить(ПараметрыОтчета);
	
	ИнструментыКлиент.НачатьОбновлениеИнструмента(ЭтотОбъект, МетодОбновления,
		ПараметрыФонового, Элементы.Результат.Имя, , "ОбработатьДанныеОтчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПериода(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Период.ДатаНачала = Результат.ДатаНачала;
		Период.ДатаОкончания = Результат.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборРолей(Результат, ДопПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Роли = Новый СписокЗначений;
  
		Для Каждого Значение Из Результат Цикл   
			Роли.Добавить(Значение, Значение);  
		КонецЦикла;		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеОтчета() Экспорт
	
	ИнструментыКлиент.ОбработатьОтложенноеОбновлениеИнструмента(ЭтотОбъект, Элементы.Результат.Имя, "Отчеты.БюджетПроекта.СформироватьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОбновленияИнструмента(Данные, ДополнительныеПараметры) Экспорт
	
	ИнструментыКлиент.ЗаполнитьДанныеИнструмента(Результат, Данные, ДополнительныеПараметры.МетодОбновления);
	
	Если Результат.ВысотаТаблицы = 0 Тогда
		Если ФильтрПоИсполнителям Тогда
			ОтобразитьСостояниеОтчета("Отчет не сформирован. Трудозатраты по выбранным исполнителям не найдены.");
		ИначеЕсли ФильтрПоНаправлениям Тогда
			ОтобразитьСостояниеОтчета("Отчет не сформирован. Трудозатраты по выбранным направлениям не найдены.");
		Иначе
			ОтобразитьСостояниеОтчета("Отчет не сформирован. Трудозатраты за выбранный период не найдены.");
		КонецЕсли;
	Иначе
		ОтобразитьСостояниеОтчета();
		Элементы.Выгрузить.Доступность = Истина;
	КонецЕсли;
	
	Элементы.Сформировать.Доступность = Истина;
	
	ИнструментыКлиент.ЗакончитьОбновлениеИнструмента(ЭтотОбъект, ДополнительныеПараметры, Данные.УИДЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСостояниеОтчета(Знач Текст = "", Знач ЭтоФормированиеОтчета = Ложь)
	
	ОтображениеСостояния = Элементы.Результат.ОтображениеСостояния;
	
	ОтображатьСостояние = ЗначениеЗаполнено(Текст);
	ОтображениеСостояния.Видимость = ОтображатьСостояние;
	
	Если ОтображатьСостояние Тогда	
		ОтображениеСостояния.Текст = Текст;
		
		Если ЭтоФормированиеОтчета Тогда
			ОтображениеСостояния.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
		Иначе
			ОтображениеСостояния.Картинка = БиблиотекаКартинок.Информация16;
		КонецЕсли;
		
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	Иначе	
		ОтображениеСостояния.Текст = "";
		ОтображениеСостояния.Картинка = Новый Картинка;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	КонецЕсли;
	
	Элементы.Результат.ТолькоПросмотр = (ОтображатьСостояние ИЛИ (Элементы.Результат.Вывод = ИспользованиеВывода.Запретить));
			
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДанныеВХранилище()
	
	ЕстьДанныеНаСервере = ЕстьДанныеНаСервере(АдресВременногоХранилища);
	
	Если ЕстьДанныеНаСервере Тогда
		ЗаполнитьТабличныйДокументНаСервере();

		ОтключитьОбработчикОжидания("ПроверитьДанныеВХранилище");
		
		Если Результат.ВысотаТаблицы = 0 Тогда
			Если ФильтрПоИсполнителям Тогда
				ОтобразитьСостояниеОтчета("Отчет не сформирован. Трудозатраты по выбранным исполнителям не найдены.");
			ИначеЕсли ФильтрПоНаправлениям Тогда
		     	ОтобразитьСостояниеОтчета("Отчет не сформирован. Трудозатраты по выбранным направлениям не найдены.");
			Иначе
				ОтобразитьСостояниеОтчета("Отчет не сформирован. Трудозатраты за выбранный период не найдены.");
			КонецЕсли; 	
		Иначе
			ОтобразитьСостояниеОтчета();
			Элементы.Выгрузить.Доступность = Истина;
		КонецЕсли;
		
		Элементы.Сформировать.Доступность = Истина;	
	КонецЕсли;	
				
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОтчета(Форма)

	ПараметрыОтчета = Новый Структура; 
	
	ПараметрыОтчета.Вставить("Проект", Форма.Проект);
	ПараметрыОтчета.Вставить("Период", Форма.Период);
	ПараметрыОтчета.Вставить("ФильтрПоИсполнителям", Форма.ФильтрПоИсполнителям);
	ПараметрыОтчета.Вставить("ФильтрВидСравнения", Форма.ФильтрВидСравнения);
	ПараметрыОтчета.Вставить("Исполнители", Форма.Исполнители);
	ПараметрыОтчета.Вставить("ФильтрПоРоли", Форма.ФильтрПоРоли);
	ПараметрыОтчета.Вставить("ФильтрРолиВидСравнения", Форма.ФильтрРолиВидСравнения);
	ПараметрыОтчета.Вставить("Роли", Форма.Роли);
	ПараметрыОтчета.Вставить("ФильтрПоНаправлениям", Форма.ФильтрПоНаправлениям);
    ПараметрыОтчета.Вставить("ФильтрНаправленияВидСравнения", Форма.ФильтрНаправленияВидСравнения);
	ПараметрыОтчета.Вставить("Направления", Форма.Направления);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Пользовательские настройки

&НаСервере
Процедура ЗагрузитьПользовательскиеНастройки()
		
	Ключи = КлючиНастроек();	
	СохраненныеНастройки = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(Ключи.Объект, Ключи.Настройка);
	
	Если СохраненныеНастройки <> Неопределено Тогда
		Проект = СохраненныеНастройки.Проект;
		Период = СохраненныеНастройки.Период;
		ФильтрПоИсполнителям = СохраненныеНастройки.ФильтрПоИсполнителям;
		ФильтрВидСравнения = СохраненныеНастройки.ФильтрВидСравнения;
		Исполнители = СохраненныеНастройки.Исполнители; 
		СохраненныеНастройки.Свойство("ФильтрПоРоли", ФильтрПоРоли);
		СохраненныеНастройки.Свойство("ФильтрРолиВидСравнения", ФильтрРолиВидСравнения);
		СохраненныеНастройки.Свойство("Роли", Роли); 
		СохраненныеНастройки.Свойство("ФильтрПоНаправлениям", ФильтрПоНаправлениям);
		СохраненныеНастройки.Свойство("ФильтрНаправленияВидСравнения", ФильтрНаправленияВидСравнения);	
		
		Если СохраненныеНастройки.Свойство("Направления") Тогда
			Направления = СохраненныеНастройки.Направления;	
		КонецЕсли;
				 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КлючиНастроек()
	
	Возврат Новый Структура("Объект, Настройка", "Отчет.БюджетПроекта", "ПользовательскиеНастройки");
	
КонецФункции

#КонецОбласти
