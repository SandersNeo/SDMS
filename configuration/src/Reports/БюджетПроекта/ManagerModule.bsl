///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция КлючиНастроек() Экспорт
	
	Возврат Новый Структура("Объект, Настройка", "Отчет.БюджетПроекта", "ПользовательскиеНастройки");
	
КонецФункции

// Формирует табличный документ и помещает его во временное хранилище
//
// Параметры:
//  АдресХранилища - Строка - Адрес временного хранилища
//  ПараметрыОтчета - Структура - Параметры построения отчета
// 	* Проект - СправочникСсылка.Проекты - элемент справочника.
// 	* Период - СтандартныйПериод - период построения отчета.
// 	* ФильтрПоИсполнителям - Булево - Истина, если есть фильтр по исполнителям.
// 	* ФильтрПоИсполнителямИсключение - Булево - Истина, если нужно исключить указанных исполнителей.
// 	* Исполнители - СписокЗначений - список элементов справочника Пользователи.
//
Процедура СформироватьОтчет(ПараметрыОтчета, АдресРезультата, УИДЗамера) Экспорт
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	СохранитьПользовательскиеНастройки(ПараметрыОтчета);
	
	ТабличныйДокумент = СформироватьТабличныйДокумент(ПараметрыОтчета);
	ИнструментыСервер.ОповеститьИнструментОбОбновлении(ТабличныйДокумент, АдресРезультата, УИДЗамера);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремениТехнологический("Отчеты.БюджетПроекта.СформироватьОтчет.ВыполнениеФонового", ВремяНачала, , Строка(УИДЗамера));
	
КонецПроцедуры

// Формирует табличный документ
//
// Параметры:
//  ПараметрыОтчета - Структура - Параметры построения отчета
// 	* Проект - СправочникСсылка.Проекты - элемент справочника.
// 	* Период - СтандартныйПериод - период построения отчета.
// 	* ФильтрПоИсполнителям - Булево - Истина, если есть фильтр по исполнителям.
// 	* ФильтрПоИсполнителямИсключение - Булево - Истина, если нужно исключить указанных исполнителей.
// 	* Исполнители - СписокЗначений - список элементов справочника Пользователи.
//  ЭтоВыгрузка - Булево - Истина, если нужно сформировать для выгрузки в Exel, иначе Ложь
// 
// Возвращаемое значение:
//   ТабличныйДокумент, СписокЗначений - табличный документ или список табличных документов 
//
Функция СформироватьТабличныйДокумент(Знач ПараметрыОтчета, Знач ЭтоВыгрузка = Ложь) Экспорт
	
	СтруктураПодчиненности = ПолучитьТаблицуПодчиненныхОбъектов(ПараметрыОтчета.Проект);	
	
	ДокументОтчет = СформироватьДокументОтчет(ПараметрыОтчета, СтруктураПодчиненности, ЭтоВыгрузка);
		
	Если ЭтоВыгрузка Тогда
		ДокументСырыеДанные = СформироватьДокументСырыеДанные(ПараметрыОтчета, СтруктураПодчиненности);
		
		ТабличныеДокументы = Новый СписокЗначений;
		ТабличныеДокументы.Добавить(ДокументОтчет, "Отчет");
		ТабличныеДокументы.Добавить(ДокументСырыеДанные, "Сырые данные");
		
		Возврат ТабличныеДокументы;
	Иначе
		Возврат ДокументОтчет;	
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВывестиСтрокиДерева(ТабличныйДокумент, Знач Строки, Знач Уровень, Знач Макет, Знач ВыводитьОбъектыБезТрудозатрат, Знач ЭтоВыгрузка, Знач Родитель = Неопределено)
	
	Если Уровень > 7 Тогда
		УровеньМакета = 7;
	Иначе
	    УровеньМакета = Уровень;
	КонецЕсли;
			
	Для Каждого Строка Из Строки Цикл
		ОбластьУровень = Макет.ПолучитьОбласть(СтрШаблон("Уровень%1", УровеньМакета));
		
		Если ЗначениеЗаполнено(Строка.Пользователь) ИЛИ ЗначениеЗаполнено(Строка.ВидДеятельности) Тогда
			ЗаполнитьЗначенияСвойств(ОбластьУровень.Параметры, Строка, , "Объект, ПланЗатрата, ДлительностьПлан, ДлительностьФакт");
		Иначе	
			Если Строка.Объект = Родитель И НЕ ЗначениеЗаполнено(Строка.Затрата) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ВыводитьОбъектыБезТрудозатрат И НЕ ЗначениеЗаполнено(Строка.Затрата) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ОбластьУровень.Параметры, Строка, , "ДлительностьПлан, ДлительностьФакт");
			
			Если ЗначениеЗаполнено(Строка.ДлительностьПлан) Тогда
				ОбластьУровень.Параметры.ДлительностьПлан = Строка.ДлительностьПлан;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ДлительностьФакт) Тогда
				ОбластьУровень.Параметры.ДлительностьФакт = Строка.ДлительностьФакт;
			КонецЕсли;
			
			Если ЭтоВыгрузка Тогда
				ОбластьУровень.Параметры.Ссылка = ОбщегоНазначения.ПолучитьHTTPСсылкуНаОбъект(Строка.Объект);	
			КонецЕсли;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьУровень, Уровень);
		
		ВывестиСтрокиДерева(ТабличныйДокумент, Строка.Строки, Уровень + 1, Макет, 
			ВыводитьОбъектыБезТрудозатрат, ЭтоВыгрузка, Строка.Объект);	
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьОтчет(Знач ДеревоРезультат, Знач ДанныеОбъектов, Знач ЭтоВыгрузка, Знач ФильтрПоИсполнителям, Знач ФильтрПоНаправлениям)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	КорневаяСтрока = ДеревоРезультат.Строки[0]; 
	
	Если НЕ ЗначениеЗаполнено(КорневаяСтрока.Затрата)
		И (КорневаяСтрока.Строки.Количество() = 1 ИЛИ ФильтрПоИсполнителям ИЛИ ФильтрПоНаправлениям) Тогда
		
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	ВыводитьОбъектыБезТрудозатрат = НЕ ЗначениеЗаполнено(КорневаяСтрока.Затрата);
	
	Если ЭтоВыгрузка Тогда
		Макет = ПолучитьМакет("ОтчетВыгрузка");
	Иначе
	    Макет = ПолучитьМакет("Отчет");
	КонецЕсли;
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ТабличныйДокумент.Вывести(ОбластьШапка);
	ТабличныйДокумент.ФиксацияСверху = 2;
	Уровень = 1;
	
	ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
				
	ВывестиСтрокиДерева(ТабличныйДокумент, ДеревоРезультат.Строки, Уровень, Макет, ВыводитьОбъектыБезТрудозатрат, ЭтоВыгрузка);

	ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();

	Возврат ТабличныйДокумент;

КонецФункции

Функция ЗаполнитьОтчетСырыеДанные(Знач ДанныеОбъектов)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
			
	Макет = Отчеты.БюджетПроекта.ПолучитьМакет("СырыеДанные");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ОбластьБелаяСтрока = Макет.ПолучитьОбласть("БелаяСтрока");
	ОбластьСераяСтрока = Макет.ПолучитьОбласть("СераяСтрока");

	Белый = Истина;
		
	Для Каждого Строка Из ДанныеОбъектов Цикл
		ОбластьСтрока = ?(Белый, ОбластьБелаяСтрока, ОбластьСераяСтрока);  
		ОбластьСтрока.Параметры.Заполнить(Строка);
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		Белый = НЕ Белый;
	КонецЦикла;
						
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ЗаполнитьСвойстваОбъектов(Знач Строки, Знач ДанныеОбъектов, Знач Родитель = Неопределено)
		
	Для Каждого Строка Из Строки Цикл
		Если ЗначениеЗаполнено(Строка.Пользователь) Тогда
			Наименование = Строка(Строка.Пользователь);
		ИначеЕсли ЗначениеЗаполнено(Строка.ВидДеятельности) Тогда
			Наименование = Строка(Строка.ВидДеятельности);	
		Иначе
			Если Строка.Объект = Родитель Тогда
				Если ТипЗнч(Строка.Объект) = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
					Наименование = "Трудозатраты вне задачи";
				Иначе
					Наименование = "Трудозатраты вне заявки";
				КонецЕсли;
			Иначе	
				Наименование = Строка(Строка.Объект);
			КонецЕсли;
			
			ДанныеОбъекта = ДанныеОбъектов.Найти(Строка.Объект, "Объект");
			
			ЗаполнитьЗначенияСвойств(Строка, ДанныеОбъекта, 
				"Статус, Направление, Назначение, Начало, ДатаПубликации, Окончание, ДлительностьФакт, ДлительностьПлан, Заказчик, ПланЗатрата");  	
		КонецЕсли;
		
		Строка.Наименование = Наименование;	
		ЗаполнитьСвойстваОбъектов(Строка.Строки, ДанныеОбъектов, Строка.Объект);	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруПодчиненности(СтруктураПодчиненности, Знач ДанныеПодчиненности, Знач Владелец)
	
	// Добавляем сам объект
	Объект = ДанныеПодчиненности.Ссылка;
	
	НоваяСтрока = СтруктураПодчиненности.Добавить();
	НоваяСтрока.Объект = Объект;
	НоваяСтрока.Владелец = Владелец;
	
	Для Каждого Строка Из ДанныеПодчиненности.Строки Цикл
		ЗаполнитьСтруктуруПодчиненности(СтруктураПодчиненности, Строка, Объект);	
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеОбъектов(Знач СтруктураПодчиненности, Знач ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	СтруктураПодчиненности.Объект КАК Объект,
	|	СтруктураПодчиненности.Владелец КАК Владелец
	|ПОМЕСТИТЬ СтруктураПодчиненности
	|ИЗ
	|	&СтруктураПодчиненности КАК СтруктураПодчиненности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураПодчиненностиЗаявки.Объект КАК Заявка,
	|	МАКСИМУМ(ИсторияПубликацииЗадач.ДатаДобавления) КАК ДатаПубликации
	|ПОМЕСТИТЬ ДатыПубликацииЗаявок
	|ИЗ
	|	СтруктураПодчиненности КАК СтруктураПодчиненностиЗаявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураПодчиненности КАК СтруктураПодчиненности
	|		ПО ВЫРАЗИТЬ(СтруктураПодчиненностиЗаявки.Объект КАК Документ.ЗаявкаНаРазработку) = СтруктураПодчиненности.Родитель
	|		И СтруктураПодчиненности.Объект ССЫЛКА Документ.Задача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПубликацииЗадач КАК ИсторияПубликацииЗадач
	|		ПО ВЫРАЗИТЬ(СтруктураПодчиненности.Объект КАК Документ.Задача) = ИсторияПубликацииЗадач.Задача
	|ГДЕ
	|	СтруктураПодчиненностиЗаявки.Объект ССЫЛКА Документ.ЗаявкаНаРазработку
	|СГРУППИРОВАТЬ ПО
	|	СтруктураПодчиненностиЗаявки.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураПодчиненности.Объект КАК Заявка,
	|	МИНИМУМ(ИсторияМинимальныхСтатусовЗаявок.Период) КАК Период
	|ПОМЕСТИТЬ ДатыНачалаРазработкиЗаявок
	|ИЗ
	|	СтруктураПодчиненности КАК СтруктураПодчиненности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияМинимальныхСтатусовЗаявок КАК ИсторияМинимальныхСтатусовЗаявок
	|		ПО ВЫРАЗИТЬ(СтруктураПодчиненности.Объект КАК Документ.ЗаявкаНаРазработку) = ИсторияМинимальныхСтатусовЗаявок.Заявка
	|		И ИсторияМинимальныхСтатусовЗаявок.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ВРаботе)
	|СГРУППИРОВАТЬ ПО
	|	СтруктураПодчиненности.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураПодчиненности.Объект КАК Задача,
	|	МАКСИМУМ(ИсторияПубликацииЗадач.Период) КАК Период
	|ПОМЕСТИТЬ ПоследниеЗаписиПубликацииЗадач
	|ИЗ
	|	СтруктураПодчиненности КАК СтруктураПодчиненности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПубликацииЗадач КАК ИсторияПубликацииЗадач
	|		ПО ВЫРАЗИТЬ(СтруктураПодчиненности.Объект КАК Документ.Задача) = ИсторияПубликацииЗадач.Задача
	|СГРУППИРОВАТЬ ПО
	|	СтруктураПодчиненности.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоследниеЗаписиПубликацииЗадач.Задача КАК Задача,
	|	ИсторияПубликацииЗадач.ДатаДобавления КАК ДатаИсторииХранилища
	|ПОМЕСТИТЬ ДатыПубликацииЗадач
	|ИЗ
	|	ПоследниеЗаписиПубликацииЗадач КАК ПоследниеЗаписиПубликацииЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПубликацииЗадач КАК ИсторияПубликацииЗадач
	|		ПО ПоследниеЗаписиПубликацииЗадач.Задача = ИсторияПубликацииЗадач.Задача
	|		И ПоследниеЗаписиПубликацииЗадач.Период = ИсторияПубликацииЗадач.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураПодчиненности.Объект КАК Объект,
	|	ФактТрудозатраты.ВидДеятельности КАК ВидДеятельности,
	|	ФактТрудозатраты.Пользователь КАК Пользователь,
	|	ФактТрудозатраты.Затрата КАК Затрата,
	|	ЕСТЬNULL(ОказанныеУслуги.Сумма, 0) КАК Стоимость,
	|	ВЫБОР
	|		КОГДА ФактТрудозатраты.ITСтруктура
	|			ТОГДА ВЫБОР
	|				КОГДА ФактТрудозатраты.РольПользователя = ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)
	|					ТОГДА ""Разработчик""
	|				КОГДА ФактТрудозатраты.РольПользователя = ЗНАЧЕНИЕ(Справочник.РолиПользователей.Тестировщик)
	|					ТОГДА ""Тестировщик""
	|				КОГДА ФактТрудозатраты.РольПользователя = ЗНАЧЕНИЕ(Справочник.РолиПользователей.Аналитик)
	|					ТОГДА ""Аналитик""
	|			КОНЕЦ
	|		ИНАЧЕ ""Остальные""
	|	КОНЕЦ КАК Роли
	|ПОМЕСТИТЬ ДанныеТрудозатратСРолями
	|ИЗ
	|	СтруктураПодчиненности КАК СтруктураПодчиненности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК ФактТрудозатраты
	|		ПО СтруктураПодчиненности.Объект = ФактТрудозатраты.Объект
	|		И ФактТрудозатраты.Активность
	|		И ФактТрудозатраты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОказанныеУслуги КАК ОказанныеУслуги
	|		ПО ФактТрудозатраты.Регистратор = ОказанныеУслуги.Регистратор
	|ГДЕ
	|	ВЫБОР
	|		КОГДА &ФильтрПоИсполнителям
	|			ТОГДА ВЫБОР
	|				КОГДА &ФильтрПоИсполнителямИсключение
	|					ТОГДА НЕ ФактТрудозатраты.Пользователь В (&Исполнители)
	|				ИНАЧЕ ФактТрудозатраты.Пользователь В (&Исполнители)
	|			КОНЕЦ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТрудозатратСРолями.Объект КАК Объект,
	|	ДанныеТрудозатратСРолями.ВидДеятельности КАК ВидДеятельности,
	|	ДанныеТрудозатратСРолями.Пользователь КАК Пользователь,
	|	СУММА(ДанныеТрудозатратСРолями.Затрата) КАК Затрата,
	|	СУММА(ДанныеТрудозатратСРолями.Стоимость) КАК Стоимость
	|ПОМЕСТИТЬ ДанныеТрудозатрат
	|ИЗ
	|	ДанныеТрудозатратСРолями КАК ДанныеТрудозатратСРолями
	|ГДЕ
	|	ВЫБОР
	|		КОГДА &ФильтрПоРоли
	|			ТОГДА ВЫБОР
	|				КОГДА &ФильтрПоРолиИсключение
	|					ТОГДА НЕ ДанныеТрудозатратСРолями.Роли В (&Роли)
	|				ИНАЧЕ ДанныеТрудозатратСРолями.Роли В (&Роли)
	|			КОНЕЦ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|СГРУППИРОВАТЬ ПО
	|	ДанныеТрудозатратСРолями.Объект,
	|	ДанныеТрудозатратСРолями.ВидДеятельности,
	|	ДанныеТрудозатратСРолями.Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураПодчиненности.Объект КАК Объект,
	|	Проекты.Статус КАК Статус,
	|	ЗНАЧЕНИЕ(Справочник.НазначенияЗадач.ПустаяСсылка) КАК Назначение,
	|	Проекты.ДатаНачалаРазработки КАК Начало,
	|	Проекты.ДатаЗавершения КАК Окончание,
	|	Проекты.Заказчик КАК Заказчик,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПубликации,
	|	0 КАК ПланЗатрата,
	|	Проекты.ДатаНачалаРазработки КАК ДлительностьФактНачало,
	|	ВЫБОР
	|		КОГДА Проекты.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ТекущаяДата
	|		ИНАЧЕ Проекты.ДатаЗавершения
	|	КОНЕЦ КАК ДлительностьФактОкончание,
	|	Проекты.ДатаПлановоеНачало КАК ДлительностьПланНачало,
	|	ВЫБОР
	|		КОГДА Проекты.ДатаПлановоеОкончание = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ТекущаяДата
	|		ИНАЧЕ Проекты.ДатаПлановоеОкончание
	|	КОНЕЦ КАК ДлительностьПланОкончание,
	|	ВЫБОР
	|		КОГДА &ФильтрПоНаправлениям
	|			ТОГДА ВЫБОР
	|				КОГДА &ФильтрПоНаправлениямИсключение
	|					ТОГДА НЕ Проекты.Направление В (&Направления)
	|				ИНАЧЕ Проекты.Направление В (&Направления)
	|			КОНЕЦ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОтборПоНаправлениям,
	|	Проекты.Направление КАК Направление
	|ПОМЕСТИТЬ ДанныеОбъектов
	|ИЗ
	|	СтруктураПодчиненности КАК СтруктураПодчиненности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
	|		ПО ВЫРАЗИТЬ(СтруктураПодчиненности.Объект КАК Справочник.Проекты) = Проекты.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтруктураПодчиненности.Объект,
	|	ВнутреннееЗадание.Статус,
	|	ВнутреннееЗадание.Назначение,
	|	ВнутреннееЗадание.ДатаНачалаРазработки,
	|	ВнутреннееЗадание.ДатаЗакрытия,
	|	ВнутреннееЗадание.Заказчик,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ЕСТЬNULL(ПланируемыеТрудозатраты.Трудозатраты, 0),
	|	ВнутреннееЗадание.ДатаНачалаРазработки,
	|	ВЫБОР
	|		КОГДА ВнутреннееЗадание.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ТекущаяДата
	|		ИНАЧЕ ВнутреннееЗадание.ДатаЗакрытия
	|	КОНЕЦ,
	|	ВнутреннееЗадание.ПлановоеНачало,
	|	ВЫБОР
	|		КОГДА ВнутреннееЗадание.ИсполнитьДо = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ТекущаяДата
	|		ИНАЧЕ ВнутреннееЗадание.ИсполнитьДо
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ФильтрПоНаправлениям
	|			ТОГДА ВЫБОР
	|				КОГДА &ФильтрПоНаправлениямИсключение
	|					ТОГДА НЕ ВнутреннееЗадание.Направление В (&Направления)
	|				ИНАЧЕ ВнутреннееЗадание.Направление В (&Направления)
	|			КОНЕЦ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВнутреннееЗадание.Направление
	|ИЗ
	|	СтруктураПодчиненности КАК СтруктураПодчиненности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
	|		ПО ВЫРАЗИТЬ(СтруктураПодчиненности.Объект КАК Документ.ВнутреннееЗадание) = ВнутреннееЗадание.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
	|		ПО СтруктураПодчиненности.Объект = ПланируемыеТрудозатраты.Объект
	|		И ПланируемыеТрудозатраты.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтруктураПодчиненности.Объект,
	|	ДокументЗадача.Статус,
	|	ДокументЗадача.Назначение,
	|	ДокументЗадача.ДатаНачалаРассмотрения,
	|	ДокументЗадача.ДатаЗакрытия,
	|	ДокументЗадача.Заказчик,
	|	ЕСТЬNULL(ДатыПубликацииЗадач.ДатаИсторииХранилища, ДАТАВРЕМЯ(1, 1, 1)),
	|	ЕСТЬNULL(ПланируемыеТрудозатраты.Трудозатраты, 0),
	|	ДокументЗадача.ДатаНачалаРассмотрения,
	|	ВЫБОР
	|		КОГДА ДокументЗадача.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ТекущаяДата
	|		ИНАЧЕ ДокументЗадача.ДатаЗакрытия
	|	КОНЕЦ,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ВЫБОР
	|		КОГДА &ФильтрПоНаправлениям
	|			ТОГДА ВЫБОР
	|				КОГДА &ФильтрПоНаправлениямИсключение
	|					ТОГДА НЕ ДокументЗадача.Направление В (&Направления)
	|				ИНАЧЕ ДокументЗадача.Направление В (&Направления)
	|			КОНЕЦ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ДокументЗадача.Направление
	|ИЗ
	|	СтруктураПодчиненности КАК СтруктураПодчиненности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО ВЫРАЗИТЬ(СтруктураПодчиненности.Объект КАК Документ.Задача) = ДокументЗадача.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыПубликацииЗадач КАК ДатыПубликацииЗадач
	|		ПО ДокументЗадача.Ссылка = ДатыПубликацииЗадач.Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
	|		ПО СтруктураПодчиненности.Объект = ПланируемыеТрудозатраты.Объект
	|		И ПланируемыеТрудозатраты.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтруктураПодчиненности.Объект,
	|	ЕСТЬNULL(МинимальныеСтатусыЗаявок.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый)),
	|	ЗаявкаНаРазработку.Назначение,
	|	ЗаявкаНаРазработку.ДатаСоздания,
	|	ВЫБОР
	|		КОГДА МинимальныеСтатусыЗаявок.Статус В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен),
	|			ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|			ТОГДА МинимальныеСтатусыЗаявок.ДатаИзменения
	|		ИНАЧЕ &ТекущаяДата
	|	КОНЕЦ,
	|	ЗаявкаНаРазработку.Автор,
	|	ЕСТЬNULL(ДатыПубликацииЗаявок.ДатаПубликации, ДАТАВРЕМЯ(1, 1, 1)),
	|	ЕСТЬNULL(ПланируемыеТрудозатраты.Трудозатраты, 0),
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КоличествоПодчиненныхЗадач.Значение, 0) = 0
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ЕСТЬNULL(ДатыНачалаРазработкиЗаявок.Период, ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА МинимальныеСтатусыЗаявок.Статус В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен),
	|			ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|			ТОГДА МинимальныеСтатусыЗаявок.ДатаИзменения
	|		ИНАЧЕ &ТекущаяДата
	|	КОНЕЦ,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ВЫБОР
	|		КОГДА &ФильтрПоНаправлениям
	|			ТОГДА ВЫБОР
	|				КОГДА &ФильтрПоНаправлениямИсключение
	|					ТОГДА НЕ ЗаявкаНаРазработку.Направление В (&Направления)
	|				ИНАЧЕ ЗаявкаНаРазработку.Направление В (&Направления)
	|			КОНЕЦ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ЗаявкаНаРазработку.Направление
	|ИЗ
	|	СтруктураПодчиненности КАК СтруктураПодчиненности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО ВЫРАЗИТЬ(СтруктураПодчиненности.Объект КАК Документ.ЗаявкаНаРазработку) = ЗаявкаНаРазработку.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияДополнительныхРеквизитовОбъектов КАК КоличествоПодчиненныхЗадач
	|		ПО КоличествоПодчиненныхЗадач.Объект = ЗаявкаНаРазработку.Ссылка
	|		И
	|			КоличествоПодчиненныхЗадач.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДополнительныхРеквизитов.КоличествоПодчиненныхЗадач)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
	|		ПО МинимальныеСтатусыЗаявок.Заявка = ЗаявкаНаРазработку.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыНачалаРазработкиЗаявок КАК ДатыНачалаРазработкиЗаявок
	|		ПО ДатыНачалаРазработкиЗаявок.Заявка = ЗаявкаНаРазработку.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыПубликацииЗаявок КАК ДатыПубликацииЗаявок
	|		ПО ДатыПубликацииЗаявок.Заявка = ЗаявкаНаРазработку.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
	|		ПО СтруктураПодчиненности.Объект = ПланируемыеТрудозатраты.Объект
	|		И ПланируемыеТрудозатраты.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОбъектов.Объект КАК Объект,
	|	ДанныеОбъектов.Статус КАК Статус,
	|	ДанныеОбъектов.Назначение КАК Назначение,
	|	ДанныеОбъектов.Начало КАК Начало,
	|	ДанныеОбъектов.Окончание КАК Окончание,
	|	ДанныеОбъектов.Заказчик КАК Заказчик,
	|	ДанныеОбъектов.ДатаПубликации КАК ДатаПубликации,
	|	ВЫБОР
	|		КОГДА ДанныеОбъектов.ДлительностьПланНачало = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(ДанныеОбъектов.ДлительностьПланНачало, ДанныеОбъектов.ДлительностьПланОкончание, ДЕНЬ)
	|	КОНЕЦ КАК ДлительностьПлан,
	|	ВЫБОР
	|		КОГДА ДанныеОбъектов.ДлительностьФактНачало = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(ДанныеОбъектов.ДлительностьФактНачало, ДанныеОбъектов.ДлительностьФактОкончание, ДЕНЬ)
	|	КОНЕЦ КАК ДлительностьФакт,
	|	ЕСТЬNULL(ДанныеТрудозатрат.ВидДеятельности, ЗНАЧЕНИЕ(Справочник.ВидыДеятельности.ПустаяСсылка)) КАК ВидДеятельности,
	|	ЕСТЬNULL(ДанныеТрудозатрат.Пользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Пользователь,
	|	ДанныеОбъектов.ПланЗатрата КАК ПланЗатрата,
	|	ЕСТЬNULL(ДанныеТрудозатрат.Затрата, 0) КАК Затрата,
	|	ЕСТЬNULL(ДанныеТрудозатрат.Стоимость, 0) КАК Стоимость,
	|	НаправленияРазработки.КраткоеНаименование КАК Направление
	|ИЗ
	|	ДанныеОбъектов КАК ДанныеОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаправленияРазработки КАК НаправленияРазработки
	|		ПО НаправленияРазработки.Ссылка = ДанныеОбъектов.Направление
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеТрудозатрат КАК ДанныеТрудозатрат
	|		ПО ДанныеТрудозатрат.Объект = ДанныеОбъектов.Объект
	|		И ДанныеОбъектов.ОтборПоНаправлениям"; 
	#КонецОбласти    
		
	Период = ПараметрыОтчета.Период;
	
	ФильтрПоИсполнителямИсключение = (ПараметрыОтчета.ФильтрВидСравнения = ВидСравнения.НеВСписке 
		ИЛИ ПараметрыОтчета.ФильтрВидСравнения = ВидСравнения.НеРавно);
	
	ФильтрПоРолиИсключение = (ПараметрыОтчета.ФильтрРолиВидСравнения = ВидСравнения.НеВСписке 
		ИЛИ ПараметрыОтчета.ФильтрРолиВидСравнения = ВидСравнения.НеРавно);
	
	ФильтрПоНаправлениямИсключение = (ПараметрыОтчета.ФильтрНаправленияВидСравнения = ВидСравнения.НеВСписке 
		ИЛИ ПараметрыОтчета.ФильтрНаправленияВидСравнения = ВидСравнения.НеРавно);
	
	Запрос.УстановитьПараметр("СтруктураПодчиненности", СтруктураПодчиненности);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("ФильтрПоИсполнителям", ПараметрыОтчета.ФильтрПоИсполнителям);
	Запрос.УстановитьПараметр("ФильтрПоИсполнителямИсключение", ФильтрПоИсполнителямИсключение);
	Запрос.УстановитьПараметр("Исполнители", ПараметрыОтчета.Исполнители);   
	Запрос.УстановитьПараметр("ФильтрПоРоли", ПараметрыОтчета.ФильтрПоРоли);
	Запрос.УстановитьПараметр("ФильтрПоРолиИсключение", ФильтрПоРолиИсключение);
	Запрос.УстановитьПараметр("Роли", ПараметрыОтчета.Роли);    
	Запрос.УстановитьПараметр("ФильтрПоНаправлениям", ПараметрыОтчета.ФильтрПоНаправлениям);
	Запрос.УстановитьПараметр("ФильтрПоНаправлениямИсключение", ФильтрПоНаправлениямИсключение);
	Запрос.УстановитьПараметр("Направления", ПараметрыОтчета.Направления);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьСырыеДанныеОбъектов(Знач СтруктураПодчиненности, Знач ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	СтруктураПодчиненности.Объект КАК Объект,
	|	СтруктураПодчиненности.Владелец КАК Владелец
	|ПОМЕСТИТЬ СтруктураПодчиненности
	|ИЗ
	|	&СтруктураПодчиненности КАК СтруктураПодчиненности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураПодчиненности.Объект КАК Объект,
	|	Трудозатраты.Период КАК Период,
	|	Трудозатраты.Затрата КАК Затрата,
	|	Трудозатраты.Пользователь КАК Пользователь,
	|	Трудозатраты.ВидДеятельности КАК ВидДеятельности,
	|	Трудозатраты.Комментарий КАК Комментарий,
	|	ЕСТЬNULL(ОказанныеУслуги.Сумма, 0) КАК Стоимость
	|ПОМЕСТИТЬ Трудозатраты
	|ИЗ
	|	СтруктураПодчиненности КАК СтруктураПодчиненности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК Трудозатраты
	|		ПО СтруктураПодчиненности.Объект = Трудозатраты.Объект
	|			И (Трудозатраты.Активность)
	|			И (Трудозатраты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОказанныеУслуги КАК ОказанныеУслуги
	|		ПО (ОказанныеУслуги.Регистратор = Трудозатраты.Регистратор)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ФильтрПоИсполнителям
	|				ТОГДА ВЫБОР
	|						КОГДА &ФильтрПоИсполнителямИсключение
	|							ТОГДА НЕ Трудозатраты.Пользователь В (&Исполнители)
	|						ИНАЧЕ Трудозатраты.Пользователь В (&Исполнители)
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ  
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Трудозатраты.Период КАК Период,
	|	Трудозатраты.Пользователь КАК Пользователь,
	|	МАКСИМУМ(ЛичныеДела.Период) КАК ДатаДолжности
	|ПОМЕСТИТЬ МаксимальныеДатыСрезов
	|ИЗ
	|	Трудозатраты КАК Трудозатраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела КАК ЛичныеДела
	|		ПО (ЛичныеДела.Сотрудник = Трудозатраты.Пользователь)
	|			И (ЛичныеДела.Период <= Трудозатраты.Период)
	|			И (ЛичныеДела.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПринятНаДолжность))
	|
	|СГРУППИРОВАТЬ ПО
	|	Трудозатраты.Период,
	|	Трудозатраты.Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныеДатыСрезов.Период КАК Период,
	|	МаксимальныеДатыСрезов.Пользователь КАК Пользователь,
	|	ВЫРАЗИТЬ(ЛичныеДела.Данные КАК Справочник.Должности) КАК Должность
	|ПОМЕСТИТЬ Должности
	|ИЗ
	|	МаксимальныеДатыСрезов КАК МаксимальныеДатыСрезов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела КАК ЛичныеДела
	|		ПО (ЛичныеДела.Сотрудник = МаксимальныеДатыСрезов.Пользователь)
	|			И (ЛичныеДела.Период = МаксимальныеДатыСрезов.ДатаДолжности)
	|			И (ЛичныеДела.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПринятНаДолжность))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(Трудозатраты.Объект) КАК Объект,
	|	&Проект КАК Проект,
	|	Трудозатраты.Период КАК Период,
	|	Трудозатраты.Затрата КАК Затрата,
	|	Трудозатраты.Стоимость КАК Стоимость,
	|	ПРЕДСТАВЛЕНИЕ(Трудозатраты.Пользователь) КАК Пользователь,
	|	ПРЕДСТАВЛЕНИЕ(Трудозатраты.ВидДеятельности) КАК ВидДеятельности,
	|	Трудозатраты.Комментарий КАК Комментарий,
	|	ПРЕДСТАВЛЕНИЕ(Должности.Должность) КАК Должность
	|ИЗ
	|	Трудозатраты КАК Трудозатраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Должности КАК Должности
	|		ПО (Должности.Период = Трудозатраты.Период)
	|			И (Должности.Пользователь = Трудозатраты.Пользователь)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	#КонецОбласти
		
	Период = ПараметрыОтчета.Период;
	
	ФильтрПоИсполнителямИсключение = (ПараметрыОтчета.ФильтрВидСравнения = ВидСравнения.НеВСписке 
		ИЛИ ПараметрыОтчета.ФильтрВидСравнения = ВидСравнения.НеРавно);
	
	ФильтрПоРолиИсключение = (ПараметрыОтчета.ФильтрРолиВидСравнения = ВидСравнения.НеВСписке 
		ИЛИ ПараметрыОтчета.ФильтрРолиВидСравнения = ВидСравнения.НеРавно);
	
	ФильтрПоНаправлениямИсключение = (ПараметрыОтчета.ФильтрНаправленияВидСравнения = ВидСравнения.НеВСписке 
		ИЛИ ПараметрыОтчета.ФильтрНаправленияВидСравнения = ВидСравнения.НеРавно);
	
	Запрос.УстановитьПараметр("СтруктураПодчиненности", СтруктураПодчиненности);
	Запрос.УстановитьПараметр("Проект", ПараметрыОтчета.Проект);	
	Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("ФильтрПоИсполнителям", ПараметрыОтчета.ФильтрПоИсполнителям);
	Запрос.УстановитьПараметр("ФильтрПоИсполнителямИсключение", ФильтрПоИсполнителямИсключение);
	Запрос.УстановитьПараметр("Исполнители", ПараметрыОтчета.Исполнители); 
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьТаблицуПодчиненныхОбъектов(Знач Проект)
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Проекты"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ВнутреннееЗадание"));
	МассивТипов.Добавить(Тип("ДокументСсылка.Задача"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаявкаНаРазработку"));
	
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		
	СтруктураПодчиненности = Новый ТаблицаЗначений;
	СтруктураПодчиненности.Колонки.Добавить("Объект", ОписаниеТипов);
	СтруктураПодчиненности.Колонки.Добавить("Владелец", ОписаниеТипов);
	
	Результат = РегистрыСведений.СтруктураПодчиненности.ПолучитьДанныеСтруктурыПодчиненности(Проект);
	
	Дерево = Результат.Дерево;
	
	ТекущийОбъект = Дерево.Строки.Найти(Истина, "ТекущийОбъект", Истина);
	Если ТекущийОбъект <> Неопределено Тогда
		ЗаполнитьСтруктуруПодчиненности(СтруктураПодчиненности, ТекущийОбъект,
			Справочники.Проекты.ПустаяСсылка());
	КонецЕсли;
	
	Возврат СтруктураПодчиненности;
	
КонецФункции

Процедура СохранитьПользовательскиеНастройки(Настройки)
	
	Ключи = КлючиНастроек();
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(Ключи.Объект, Ключи.Настройка, Настройки);
	
КонецПроцедуры

Функция СформироватьДокументОтчет(Знач ПараметрыОтчета, Знач СтруктураПодчиненности, Знач ЭтоВыгрузка)
		
	ДанныеОбъектов = ПолучитьДанныеОбъектов(СтруктураПодчиненности, ПараметрыОтчета);
		
	// Используя СКД сформируем иерархию документов 
	// и рассчитаем ресурсы (затраты, стоимость) по иерархии	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, , , 
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ВнешниеНаборы = Новый Структура("СтруктураПодчиненности, ДанныеОбъектов", СтруктураПодчиненности, ДанныеОбъектов);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных; 
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, ВнешниеНаборы);
	
	ДеревоРезультат = Новый ДеревоЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений; 
	ПроцессорВывода.УстановитьОбъект(ДеревоРезультат); 
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	// Добавим в дерево колонки для свойств объектов
	ОписаниеТипаСтрока50 = ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(50);
	ОписаниеТипаСтрока250 = ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(250);
	ОписаниеТипаДата = ОбщегоНазначенияКлиентСервер.ОписаниеТипаДата();
	
	ДеревоРезультат.Колонки.Добавить("Наименование", ОписаниеТипаСтрока250);
	ДеревоРезультат.Колонки.Добавить("Статус", ОписаниеТипаСтрока50);
	ДеревоРезультат.Колонки.Добавить("Назначение", ОписаниеТипаСтрока50);
	ДеревоРезультат.Колонки.Добавить("Начало", ОписаниеТипаДата);
	ДеревоРезультат.Колонки.Добавить("ДатаПубликации", ОписаниеТипаДата);
	ДеревоРезультат.Колонки.Добавить("Окончание", ОписаниеТипаДата);
	ДеревоРезультат.Колонки.Добавить("ПланЗатрата", ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(5));
	ДеревоРезультат.Колонки.Добавить("ДлительностьФакт", ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(5));
	ДеревоРезультат.Колонки.Добавить("ДлительностьПлан", ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(5));
	ДеревоРезультат.Колонки.Добавить("Заказчик", ОписаниеТипаСтрока250);  
	ДеревоРезультат.Колонки.Добавить("Направление", ОписаниеТипаСтрока250); 
	
	// Заполним добавленные колонки
	ЗаполнитьСвойстваОбъектов(ДеревоРезультат.Строки, ДанныеОбъектов);
	
	// Отсортируем дерево 
	// (цель сортировки вывести "свои" трудозатраты после трудозатрат подчиненных объектов)
	ДеревоРезультат.Строки.Сортировать("Наименование", Истина);
	
	ФильтрПоИсполнителямИсключение = (ПараметрыОтчета.ФильтрВидСравнения = ВидСравнения.НеВСписке 
		ИЛИ ПараметрыОтчета.ФильтрВидСравнения = ВидСравнения.НеРавно);
	
	ФильтрПоНаправлениямИсключение = (ПараметрыОтчета.ФильтрНаправленияВидСравнения = ВидСравнения.НеВСписке 
		ИЛИ ПараметрыОтчета.ФильтрНаправленияВидСравнения = ВидСравнения.НеРавно);
	
	// Выведем дерево	
	ТабличныйДокумент = ЗаполнитьОтчет(ДеревоРезультат, ДанныеОбъектов, ЭтоВыгрузка, 
		ПараметрыОтчета.ФильтрПоИсполнителям И НЕ ФильтрПоИсполнителямИсключение,
		ПараметрыОтчета.ФильтрПоНаправлениям И НЕ ФильтрПоНаправлениямИсключение);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьДокументСырыеДанные(Знач ПараметрыОтчета, Знач СтруктураПодчиненности)
					
	ДанныеОбъектов = ПолучитьСырыеДанныеОбъектов(СтруктураПодчиненности, ПараметрыОтчета);	
	ТабличныйДокумент = ЗаполнитьОтчетСырыеДанные(ДанныеОбъектов);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#КонецЕсли
