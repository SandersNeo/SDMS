///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

// Используется для хранения идентификаторов строк табличной части документа
&НаКлиенте
Перем ИдентификаторыЗаписейОбОтсутствии; 

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;
		Объект.Дата = НачалоМесяца(ТекущаяДатаСеанса());
		Объект.Филиал = ПараметрыСеанса.Филиал;
		
		Если УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("Администратор") Тогда
			
			Элементы.Филиал.Доступность = Истина;
			Элементы.Филиал.КнопкаВыпадающегоСписка = Истина;
			Элементы.Филиал.КнопкаВыбора = Истина;
			
		Иначе
			
			СписокГруппРуководителя = Справочники.Филиалы.ПолучитьВсеФилиалыРуководителя();
			Если СписокГруппРуководителя.Количество() > 1 тогда
				Элементы.Филиал.СписокВыбора.ЗагрузитьЗначения(СписокГруппРуководителя.ВыгрузитьЗначения());
				Элементы.Филиал.КнопкаВыпадающегоСписка = Истина;
				Элементы.Филиал.РежимВыбораИзСписка = Истина;
				Элементы.Филиал.Доступность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("Администратор") Тогда
			Элементы.Филиал.Доступность = Истина;
			Элементы.Филиал.КнопкаВыпадающегоСписка = Истина;
			Элементы.Филиал.КнопкаВыбора = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.Дата = НачалоМесяца(Объект.Дата);
	
	ЗаполнитьКалендарь(Истина, НЕ Параметры.Ключ.Пустая(), Объект.Ссылка);
	ЗаполнитьСписокМесяцев(Объект.Дата, Элементы.Дата.СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьИдентификаторыЗаписейОбОтсутствии();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДатыОтсутствияСотрудников.Сортировать("ДатаОтсутствия, Сотрудник");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаполнитьИдентификаторыЗаписейОбОтсутствии();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АвторНажатие(Элемент, СтандартнаяОбработка)
	
	ИнтерфейсПриложенияКлиент.ОткрытьИнформациюОПользователе(ЭтотОбъект, Объект.Автор, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикОтсутствияСотрудниковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ГрафикОтсутствияСотрудниковСотрудник" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ГрафикОтсутствияСотрудников.ТекущиеДанные;
	ИдентификаторСтрокиКалендаря = ТекущиеДанные.ПолучитьИдентификатор();
	
	День = Число(Прав(Поле.Имя, 2));
	ЭтоНоваяЗапись = НЕ ТекущиеДанные["День" + День];
	
	ИзменитьГрафикОтсутствия(ТекущиеДанные.Сотрудник, Дата(Год(Объект.Дата), Месяц(Объект.Дата), День), ЭтоНоваяЗапись, ИдентификаторСтрокиКалендаря);
	
КонецПроцедуры

&НаКлиенте
Процедура ФилиалПриИзменении(Элемент)
	
	ЗаполнитьКалендарь(Ложь);
	Объект.ДатыОтсутствияСотрудников.Очистить();
	ИдентификаторыЗаписейОбОтсутствии = Новый Соответствие;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ДатыОтсутствияСотрудников.Количество() > 0 Тогда
		ЗадатьВопросОбИзмененииДатыДокумента(ВыбранноеЗначение);
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеМесяца(ВыбранноеЗначение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ДобавитьИнтервалОтсутствия(Команда)
	
	СтрокаСотрудник = Элементы.ГрафикОтсутствияСотрудников.ТекущиеДанные;
	Если СтрокаСотрудник = Неопределено Тогда
		ПоказатьПредупреждение(,"Перед добавлением интервала отсутствия необходимо выбрать сотрудника");
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтрокиКалендаря = СтрокаСотрудник.ПолучитьИдентификатор();	
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИдентификаторСтрокиКалендаря", ИдентификаторСтрокиКалендаря);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Сотрудник", СтрокаСотрудник.Сотрудник);
	ПараметрыОткрытия.Вставить("ДатаОтсутствия", Объект.Дата);

	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеИнтервалаОтсутствия", ЭтотОбъект, ПараметрыОповещения);
	ОткрытьФорму("Документ.ОтсутствияНаРабочемМесте.Форма.ДобавлениеИнтервалаОтсутствия", ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры	

&НаКлиенте
Процедура УдалитьИнтервалОтсутствия(Команда)
	
	СтрокаСотрудник = Элементы.ГрафикОтсутствияСотрудников.ТекущиеДанные;
	Если СтрокаСотрудник = Неопределено Тогда
		ПоказатьПредупреждение(,"Перед добавлением интервала отсутствия необходимо выбрать сотрудника");
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИдентификаторСтрокиКалендаря", СтрокаСотрудник.ПолучитьИдентификатор());
	
	ПериодыОтсутствия = Новый Массив;
		
	ТекущийСотрудник = СтрокаСотрудник.Сотрудник;
	Для Каждого СтрокаОтсутствие Из Объект.ДатыОтсутствияСотрудников Цикл
		
		Если СтрокаОтсутствие.Сотрудник <> ТекущийСотрудник Тогда
			Продолжить;
		КонецЕсли;	
		
		ПараметрыОтсутствия = Новый Структура; 
		ПараметрыОтсутствия.Вставить("ДатаОтсутствия", СтрокаОтсутствие.ДатаОтсутствия);
		ПараметрыОтсутствия.Вставить("Комментарий", СтрокаОтсутствие.Комментарий);
		
	    ПериодыОтсутствия.Добавить(ПараметрыОтсутствия);
		
	КонецЦикла;	
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("НачалоПериода", НачалоМесяца(Объект.Дата));
	ПараметрыОткрытия.Вставить("КонецПериода", КонецМесяца(Объект.Дата));
	ПараметрыОткрытия.Вставить("Сотрудник", СтрокаСотрудник.Сотрудник);
	ПараметрыОткрытия.Вставить("ПериодыОтсутствия", ПериодыОтсутствия);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеИнтервалаОтсутствия", ЭтотОбъект, ПараметрыОповещения);
	ОткрытьФорму("Документ.ОтсутствияНаРабочемМесте.Форма.УдалениеИнтервалаОтсутствия", ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);

	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ДатаЗанята(Знач Дата, Знач Филиал, Знач Ссылка)
	
	Возврат Документы.ОтсутствияНаРабочемМесте.ДатаЗанята(Дата, Филиал, Ссылка);
	
КонецФункции

&НаКлиенте
Процедура ДобавитьУказатель(Знач Сотрудник, Знач ДатаОтсутствия, Знач Идентификатор)
	
	ЗаписиОбОтсутствииСотрудника = ИдентификаторыЗаписейОбОтсутствии.Получить(Сотрудник);
	
	Если ЗаписиОбОтсутствииСотрудника = Неопределено Тогда
		ЗаписиОбОтсутствииСотрудника = Новый Соответствие;
		ИдентификаторыЗаписейОбОтсутствии.Вставить(Сотрудник, ЗаписиОбОтсутствииСотрудника);
	КонецЕсли;
	
	ЗаписиОбОтсутствииСотрудника.Вставить(ДатаОтсутствия, Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОбИзмененииДатыДокумента(ВыбранноеЗначение)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросИзменениеМесяца", ЭтотОбъект, ВыбранноеЗначение);
	ТекстВопроса = "При изменении периода табличная часть будет очищена. Продолжить?";
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , "Изменение даты документа");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИдентификаторыЗаписейОбОтсутствии()
	
	ИдентификаторыЗаписейОбОтсутствии = Новый Соответствие;
	
	Если Объект.ДатыОтсутствияСотрудников.Количество() > 0 Тогда
		Для Каждого Строка Из Объект.ДатыОтсутствияСотрудников Цикл
			ДобавитьУказатель(Строка.Сотрудник, Строка.ДатаОтсутствия, Строка.ПолучитьИдентификатор())
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКалендарь(Знач ЗаполнитьДниКалендаря = Истина, Знач ОткрытиеСуществующегоДокумента = Ложь, Знач Ссылка = Неопределено)
	
	ЗаписьЗапрещена = ДатаЗанята(Объект.Дата, Объект.Филиал, Объект.Ссылка);
	
	Если ЗаписьЗапрещена Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ на выбранный период уже создан", , , "Объект.Дата");
	КонецЕсли;
	
	Элементы.Записать.Доступность = НЕ ЗаписьЗапрещена;
	
	Если Элементы.Найти("Провести") <> Неопределено Тогда
		Элементы.ПровестиЗакрыть.Доступность = НЕ ЗаписьЗапрещена;
		Элементы.Провести.Доступность = НЕ ЗаписьЗапрещена;
		Элементы.ОтменитьПроведение.Доступность = НЕ ЗаписьЗапрещена;
	КонецЕсли;
	
	ГрафикОтсутствияСотрудников.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Сотрудник,
	|	Пользователи.Наименование КАК Наименование
	|ПОМЕСТИТЬ Пользователи
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(&ТекущаяДата, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаФилиалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ЛичныеДелаФилиалы.Сотрудник = Пользователи.Ссылка
	|ГДЕ
	|	ЛичныеДелаФилиалы.Данные = &Филиал
	|	И НЕ Пользователи.Недействителен
	|	И НЕ Пользователи.Служебный
	|	И НЕ Пользователи.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Сотрудник КАК Сотрудник,
	|	Пользователи.Наименование КАК Наименование,
	|	ПроизводственныйКалендарь.ДатаКалендаря КАК Дата,
	|	ПроизводственныйКалендарь.ВидДня КАК ВидДня
	|ПОМЕСТИТЬ ПользователиИДатыКалендаря
	|ИЗ
	|	Пользователи КАК Пользователи,
	|	РегистрСведений.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ГДЕ
	|	ПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНачалаМесяца И &ДатаОкончанияМесяца
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПользователиИДатыКалендаря.Сотрудник КАК Сотрудник,
	|	ПользователиИДатыКалендаря.Наименование КАК Наименование,
	|	ПользователиИДатыКалендаря.Дата КАК Дата,
	|	ПользователиИДатыКалендаря.ВидДня КАК ВидДня,
	|	ВЫБОР
	|		КОГДА ОтсутствияНаРабочемМестеДатыОтсутствияСотрудников.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СотрудникОтсутствует
	|ИЗ
	|	ПользователиИДатыКалендаря КАК ПользователиИДатыКалендаря
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтсутствияНаРабочемМесте.ДатыОтсутствияСотрудников КАК ОтсутствияНаРабочемМестеДатыОтсутствияСотрудников
	|		ПО ПользователиИДатыКалендаря.Сотрудник = ОтсутствияНаРабочемМестеДатыОтсутствияСотрудников.Сотрудник
	|			И ПользователиИДатыКалендаря.Дата = ОтсутствияНаРабочемМестеДатыОтсутствияСотрудников.ДатаОтсутствия
	|			И (ОтсутствияНаРабочемМестеДатыОтсутствияСотрудников.Ссылка = &Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование,
	|	Дата
	|ИТОГИ ПО
	|	Сотрудник";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ДатаНачалаМесяца", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаОкончанияМесяца", КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("Филиал", Объект.Филиал);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДнейВМесяце = День(КонецМесяца(Объект.Дата));
	
	ВыборкаСотрудников = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЗаполнитьШапку = Истина;
	
	Пока ВыборкаСотрудников.Следующий() Цикл
		ВыборкаДат = ВыборкаСотрудников.Выбрать();
		НоваяСтрока = ГрафикОтсутствияСотрудников.Добавить();
		НоваяСтрока.Сотрудник = ВыборкаСотрудников.Сотрудник;
		
		Пока ВыборкаДат.Следующий() Цикл
			Если ЗаполнитьШапку Тогда
				Колонка = Элементы["ГрафикОтсутствияСотрудниковДень" + Формат(ВыборкаДат.Дата, "ДФ=dd")];
				Колонка.Заголовок = Формат(ВыборкаДат.Дата, "ДФ=d") + Символы.ПС + Формат(ВыборкаДат.Дата, "ДФ=ддд");
				
				Если ВыборкаДат.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Выходной Тогда
					Колонка.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветТекстаВыходнойДень;
					Колонка.ШрифтЗаголовка = ШрифтыСтиля.ШрифтТекстаВыходнойДень;
				Иначе
					Колонка.ЦветТекстаЗаголовка = Новый Цвет;
					Колонка.ШрифтЗаголовка = Новый Шрифт;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока["День" + Формат(ВыборкаДат.Дата, "ДФ=d")] = ВыборкаДат.СотрудникОтсутствует;
		КонецЦикла;
		
		ЗаполнитьШапку = Ложь;
	КонецЦикла;
	
	Для НомерКолонки = 28 По 31 Цикл
		Колонка = Элементы["ГрафикОтсутствияСотрудниковДень" + НомерКолонки];
		Если НомерКолонки > ДнейВМесяце Тогда
			Колонка.Видимость = Ложь;
		Иначе
			Колонка.Видимость = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокМесяцев(Знач Период, СписокЗначений)
	
	ГодПериода = Год(Период);
	
	СписокЗначений.Очистить();
	
	ПредыдущийГод = ГодПериода - 1;
	СписокЗначений.Добавить(Дата(ПредыдущийГод, 12, 1), "Предыдущий год (" + Формат(ПредыдущийГод, "ЧГ=") + ")");
	
	Для Месяц = 1 По 12 Цикл
		Дата = Дата(ГодПериода, Месяц, 1);
		ПредставлениеДаты = Формат(Дата, "ДФ='MMMM yyyy'");
		
		СписокЗначений.Добавить(Дата, ПредставлениеДаты);
	КонецЦикла;
	
	СледующийГод = ГодПериода + 1;
	СписокЗначений.Добавить(Дата(СледующийГод, 1, 1), "Следующий год (" + Формат(СледующийГод, "ЧГ=") + ")");	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьГрафикОтсутствия(Знач Сотрудник, Знач ДатаОтсутствия, Знач ЭтоНоваяЗапись, Знач ИдентификаторСтрокиКалендаря)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЭтоНоваяЗапись", ЭтоНоваяЗапись);
	ПараметрыОткрытия.Вставить("Сотрудник", Сотрудник);
	ПараметрыОткрытия.Вставить("ДатаОтсутствия", ДатаОтсутствия);
	ПараметрыОткрытия.Вставить("Комментарий", "");
	
	Если НЕ ЭтоНоваяЗапись Тогда
		ИдентификаторыДатОтсутствия = ИдентификаторыЗаписейОбОтсутствии.Получить(Сотрудник);
		ИдентификаторСтроки = ИдентификаторыДатОтсутствия.Получить(ДатаОтсутствия);
		Строка = Объект.ДатыОтсутствияСотрудников.НайтиПоИдентификатору(ИдентификаторСтроки);
		ПараметрыОткрытия.Комментарий = Строка.Комментарий;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ЭтоНоваяЗапись", ЭтоНоваяЗапись);
	ПараметрыОповещения.Вставить("ИдентификаторСтрокиКалендаря", ИдентификаторСтрокиКалендаря);
	ПараметрыОповещения.Вставить("СтрокаТабличнойЧасти", Строка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыЗаписиОбОтсутствии", ЭтотОбъект, ПараметрыОповещения);
	ОткрытьФорму("Документ.ОтсутствияНаРабочемМесте.Форма.ЗаписьОбОтсутствии", ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросИзменениеМесяца(Результат, ВыбранноеЗначение) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбработатьИзменениеМесяца(ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает отметки на датах из выбранного
// интервала отсутствия
//
// Параметры:
//  Результат				 - Структура - Массив с датами отсутствия 
//  ДополнительныеПараметры	 - Структура - Структура с идентификатором строки сотрудника
//
&НаКлиенте
Процедура ОбработатьИзменениеИнтервалаОтсутствия(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат =  Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Результат.Вставить("ИдентификаторСтрокиКалендаря", ДополнительныеПараметры.ИдентификаторСтрокиКалендаря); 
	
	ОбработатьИзменениеИнтервалаОтсутствияНаСервере(Результат);
	
	// Перезаполнение идентификаторов строк для корректного открытия в режиме редактирования
	ЗаполнитьИдентификаторыЗаписейОбОтсутствии();
	Модифицированность = Истина;		
	
КонецПроцедуры

// Получает разницу между уже внесенными датами отсутствия
// и выбранным интервалом отсутствия
//
// Параметры:
//  Результат - Структура - данные периода отсутствия по сотруднику
// 
&НаСервере
Процедура ОбработатьИзменениеИнтервалаОтсутствияНаСервере(Знач Результат)
	
	ДобавлениеЗаписей = Результат.ДобавлениеИнтервала;
	
	// Подготовка таблицы с выделенным интервалом отсутствия
	ТаблицаВыделенныйИнтервал = Новый ТаблицаЗначений;
	ТаблицаВыделенныйИнтервал.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	Для Каждого Дата Из Результат.ДатыОтсутствия Цикл
		НоваяСтрока = ТаблицаВыделенныйИнтервал.Добавить();
		НоваяСтрока.Дата = Дата;
	КонецЦикла;
	
	// Подготовка таблицы с внесенными датами
	Отбор = Новый Структура("Сотрудник");
	Отбор.Сотрудник = Результат.Сотрудник;
	
	ТаблицаВнесенныеРанееДаты = Объект.ДатыОтсутствияСотрудников.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнесенныеРанееДаты.ДатаОтсутствия КАК Дата,
	|	ВнесенныеРанееДаты.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВнесенныеРанееДатыСотрудника
	|ИЗ
	|	&ВнесенныеРанееДаты КАК ВнесенныеРанееДаты
	|ГДЕ
	|	ВнесенныеРанееДаты.Сотрудник = &Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыделенныйИнтервал.Дата КАК Дата
	|ПОМЕСТИТЬ ВыделенныйИнтервал
	|ИЗ
	|	&ВыделенныйИнтервал КАК ВыделенныйИнтервал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВнесенныеРанееДатыСотрудника.Дата ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НоваяЗапись,
	|	ВнесенныеРанееДатыСотрудника.НомерСтроки КАК НомерСтроки,
	|	ВыделенныйИнтервал.Дата КАК Дата
	|ПОМЕСТИТЬ ЗаписиОтсутствия
	|ИЗ
	|	ВыделенныйИнтервал КАК ВыделенныйИнтервал
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВнесенныеРанееДатыСотрудника КАК ВнесенныеРанееДатыСотрудника
	|		ПО ВыделенныйИнтервал.Дата = ВнесенныеРанееДатыСотрудника.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиОтсутствия.Дата КАК Дата
	|ИЗ
	|	ЗаписиОтсутствия КАК ЗаписиОтсутствия
	|ГДЕ
	|	ЗаписиОтсутствия.НоваяЗапись
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиОтсутствия.Дата КАК Дата,
	|	ЗаписиОтсутствия.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ЗаписиОтсутствия КАК ЗаписиОтсутствия
	|ГДЕ
	|	НЕ ЗаписиОтсутствия.НоваяЗапись";
	
	Запрос.УстановитьПараметр("ВнесенныеРанееДаты", ТаблицаВнесенныеРанееДаты);
	Запрос.УстановитьПараметр("ВыделенныйИнтервал", ТаблицаВыделенныйИнтервал);
	Запрос.УстановитьПараметр("Сотрудник", Результат.Сотрудник);
	
	Пакеты = Запрос.ВыполнитьПакет();
	
	СтрокаКалендаря = ГрафикОтсутствияСотрудников.НайтиПоИдентификатору(Результат.ИдентификаторСтрокиКалендаря);
	
	Если ДобавлениеЗаписей Тогда
		
		РезультатЗапроса = Пакеты.Получить(Пакеты.Количество() - 2);
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				// Пометка на форме
				СтрокаКалендаря["День" + День(Выборка.Дата)] = Истина;
				
				// Добавление в табличную часть
				НоваяСтрока = Объект.ДатыОтсутствияСотрудников.Добавить();
				НоваяСтрока.Сотрудник = Результат.Сотрудник;
				НоваяСтрока.Комментарий = Результат.Комментарий;
				НоваяСтрока.ДатаОтсутствия = Выборка.Дата;	
				
			КонецЦикла;
		КонецЕсли;	
	Иначе
		РезультатЗапроса = Пакеты.Получить(Пакеты.Количество() - 1);
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			СтрокиКУдалению = Новый Массив;
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				// Пометка на форме
				СтрокаКалендаря["День" + День(Выборка.Дата)] = Ложь;
				
				Строка = Объект.ДатыОтсутствияСотрудников[Выборка.НомерСтроки - 1];
				СтрокиКУдалению.Добавить(Строка);
			КонецЦикла;	
			
			Для Каждого Строка Из СтрокиКУдалению Цикл
				Объект.ДатыОтсутствияСотрудников.Удалить(Строка);
			КонецЦикла;	
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыЗаписиОбОтсутствии(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат =  Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ДополнительныеПараметры.ЭтоНоваяЗапись Тогда
		НоваяСтрока = Объект.ДатыОтсутствияСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
		ДобавитьУказатель(Результат.Сотрудник, Результат.ДатаОтсутствия, НоваяСтрока.ПолучитьИдентификатор());
		СтрокаКалендаря = ГрафикОтсутствияСотрудников.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтрокиКалендаря);
		СтрокаКалендаря["День" + День(Результат.ДатаОтсутствия)] = Истина;
		
	Иначе
		Если Результат.ДобавитьЗапись Тогда
			ДополнительныеПараметры.СтрокаТабличнойЧасти.Комментарий = Результат.Комментарий;
		Иначе
			Объект.ДатыОтсутствияСотрудников.Удалить(ДополнительныеПараметры.СтрокаТабличнойЧасти);
			СтрокаКалендаря = ГрафикОтсутствияСотрудников.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтрокиКалендаря);
			СтрокаКалендаря["День" + День(Результат.ДатаОтсутствия)] = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеМесяца(ВыбранноеЗначение)
	
	Если Год(Объект.Дата) <> Год(ВыбранноеЗначение) Тогда
		ЗаполнитьСписокМесяцев(ВыбранноеЗначение, Элементы.Дата.СписокВыбора);
	КонецЕсли;
	
	Объект.Дата = ВыбранноеЗначение;
	ЗаполнитьКалендарь();
	
	Объект.ДатыОтсутствияСотрудников.Очистить();
	ИдентификаторыЗаписейОбОтсутствии = Новый Соответствие;
	
КонецПроцедуры

// Получает разницу между уже внесенными датами отсутствия
// и выбранным интервалом отсутствия
//
// Параметры:
//  Сотрудник			 - СправочникСсылка.Пользователи - сотрудник, по которому вносятся даты 
//  ВнесенныеРанееДаты	 - Структура - ранее внесенные даты по сотрудникам 
//  ВыделенныйИнтервал	 - Массив - выбранный интервал отсутствия по сотруднику
// 
// Возвращаемое значение:
//   - 
//
&НаСервереБезКонтекста
Функция ПолучитьСохраняемыеДатыОтсутствия(Знач Сотрудник, Знач ВнесенныеРанееДаты, Знач ВыделенныйИнтервал)
	
	// Подготовка таблиц для запроса
	ТаблицаВнесенныеРанееДаты = Новый ТаблицаЗначений;
	ТаблицаВнесенныеРанееДаты.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаВнесенныеРанееДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));

	Для Каждого Строка Из ВнесенныеРанееДаты Цикл
		НоваяСтрока = ТаблицаВнесенныеРанееДаты.Добавить(); 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;	
	
	ТаблицаВыделенныйИнтервал = Новый ТаблицаЗначений;
	ТаблицаВыделенныйИнтервал.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	Для Каждого Дата Из ВыделенныйИнтервал Цикл
		НоваяСтрока = ТаблицаВыделенныйИнтервал.Добавить();
		НоваяСтрока.Дата = Дата;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнесенныеРанееДаты.Дата КАК Дата,
	|	ВнесенныеРанееДаты.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВнесенныеРанееДаты
	|ИЗ
	|	&ВнесенныеРанееДаты КАК ВнесенныеРанееДаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыделенныйИнтервал.Дата КАК Дата
	|ПОМЕСТИТЬ ВыделенныйИнтервал
	|ИЗ
	|	&ВыделенныйИнтервал КАК ВыделенныйИнтервал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнесенныеРанееДаты.Дата КАК Дата
	|ПОМЕСТИТЬ ВнесенныеРанееДатыСотрудника
	|ИЗ
	|	ВнесенныеРанееДаты КАК ВнесенныеРанееДаты
	|ГДЕ
	|	ВнесенныеРанееДаты.Сотрудник = &Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВнесенныеРанееДатыСотрудника.Дата ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НоваяЗапись,
	|	ВыделенныйИнтервал.Дата КАК Дата
	|ПОМЕСТИТЬ ЗаписиОтсутствия
	|ИЗ
	|	ВыделенныйИнтервал КАК ВыделенныйИнтервал
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВнесенныеРанееДатыСотрудника КАК ВнесенныеРанееДатыСотрудника
	|		ПО ВыделенныйИнтервал.Дата = ВнесенныеРанееДатыСотрудника.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиОтсутствия.Дата КАК Дата
	|ИЗ
	|	ЗаписиОтсутствия КАК ЗаписиОтсутствия
	|ГДЕ
	|	ЗаписиОтсутствия.НоваяЗапись";
	
	Запрос.УстановитьПараметр("ВнесенныеРанееДаты", ТаблицаВнесенныеРанееДаты);
	Запрос.УстановитьПараметр("ВыделенныйИнтервал", ТаблицаВыделенныйИнтервал);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДатыКВнесению = Новый Массив;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			 ДатыКВнесению.Добавить(Выборка.Дата);
		КонецЦикла;	
		
	КонецЕсли;	
	
	Возврат ДатыКВнесению;
	
КонецФункции	

#КонецОбласти
