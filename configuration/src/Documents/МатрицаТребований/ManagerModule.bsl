///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВыгрузитьМатрицуТребованийВExcel(Знач ОбъектОснование, Знач Требования, Знач ИдентификаторФормы) Экспорт
	
	Результат = Новый Структура("ЕстьОшибка, Ошибка, ИмяФайла, АдресФайла", Ложь, "", "", "");
	
	Макет = Документы.МатрицаТребований.ПолучитьМакет("МакетДляВыгрузкиВExcel");
	
	МатрицаТабДок = Новый ТабличныйДокумент;
	ЗаинтересованныеТабДок = Новый ТабличныйДокумент;
	СтатусыТабДок = Новый ТабличныйДокумент;
	
	ОбластьСтатусы = Макет.ПолучитьОбласть("Данные|Статус");
	ОбластьКаналПоступления = Макет.ПолучитьОбласть("Данные|КаналПоступления");
	
	Для Каждого Статус Из Перечисления.СтатусыТребований Цикл
		ОбластьСтатусы.Параметры.Статус = Статус;
		СтатусыТабДок.Вывести(ОбластьСтатусы);
	КонецЦикла;
	КоличествоСтатусов = Перечисления.СтатусыТребований.Количество();
	
	Для Каждого КаналПоступления Из Перечисления.КаналыПоступленияТребований Цикл
		ОбластьКаналПоступления.Параметры.КаналПоступления = КаналПоступления;
		СтатусыТабДок.Вывести(ОбластьКаналПоступления);
	КонецЦикла;
	КоличествоКаналов = Перечисления.КаналыПоступленияТребований.Количество();
	
	МатрицаШапка = Макет.ПолучитьОбласть("Шапка|МатрицаТребований");
	МатрицаДанные = Макет.ПолучитьОбласть("Данные|МатрицаТребований");
	ЗаинтересованныеШапка = Макет.ПолучитьОбласть("Шапка|РеестрЗаинтересованныхЛиц");
	ЗаинтересованныеДанные = Макет.ПолучитьОбласть("Данные|РеестрЗаинтересованныхЛиц");
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ЗаинтересованныеЛица.Пользователь КАК Пользователь,
	|	ЗаинтересованныеЛица.Роль КАК Роль,
	|	ЗаинтересованныеЛица.Должность КАК Должность,
	|	ЗаинтересованныеЛица.ОтношениеКПроекту КАК ОтношениеКПроекту,
	|	ЗаинтересованныеЛица.ДатаДобавления КАК ДатаДобавления
	|ПОМЕСТИТЬ ЗаинтересованныеЛица
	|ИЗ
	|	РегистрСведений.ЗаинтересованныеЛица КАК ЗаинтересованныеЛица
	|ГДЕ
	|	ЗаинтересованныеЛица.Объект = &Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Участники.Пользователь КАК Пользователь,
	|	МИНИМУМ(Участники.ДатаДобавления) КАК ДатаДобавления
	|ПОМЕСТИТЬ Участники
	|ИЗ
	|	РегистрСведений.Участники КАК Участники
	|ГДЕ
	|	Участники.Объект = &Объект
	|	И НЕ Участники.Скрытый
	|
	|СГРУППИРОВАТЬ ПО
	|	Участники.Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаинтересованныеЛица.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ИсточникиТребований
	|ИЗ
	|	ЗаинтересованныеЛица КАК ЗаинтересованныеЛица
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Участники.Пользователь
	|ИЗ
	|	Участники КАК Участники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсточникиТребований.Пользователь КАК Пользователь,
	|	ЕСТЬNULL(ЗаинтересованныеЛица.Роль, ""Участник"") КАК Роль,
	|	ВЫБОР
	|		КОГДА НЕ Пользователи.Должность ЕСТЬ NULL
	|			ТОГДА Пользователи.Должность
	|		КОГДА НЕ ЗаинтересованныеЛица.Должность ЕСТЬ NULL
	|			ТОГДА ЗаинтересованныеЛица.Должность
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
	|	КОНЕЦ КАК Должность,
	|	ЕСТЬNULL(ЗаинтересованныеЛица.ОтношениеКПроекту, ""Нейтральное"") КАК Отношение,
	|	ЕСТЬNULL(ЗаинтересованныеЛица.ДатаДобавления, Участники.ДатаДобавления) КАК Добавлен
	|ИЗ
	|	ИсточникиТребований КАК ИсточникиТребований
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ((ВЫРАЗИТЬ(ИсточникиТребований.Пользователь КАК Справочник.Пользователи)) = Пользователи.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаинтересованныеЛица КАК ЗаинтересованныеЛица
	|		ПО ИсточникиТребований.Пользователь = ЗаинтересованныеЛица.Пользователь
	|		ЛЕВОЕ СОЕДИНЕНИЕ Участники КАК Участники
	|		ПО ИсточникиТребований.Пользователь = Участники.Пользователь
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсточникиТребований.Пользователь
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Наименование КАК Наименование
	|ИЗ
	|	&ТаблицаЗамены КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Объект";
	#КонецОбласти
	
	Если ТипЗнч(ОбъектОснование) = Тип("СправочникСсылка.Проекты") Тогда
		ТекстЗамена = "Справочник.Проекты";
	Иначе
		ТекстЗамена = "Документ.ВнутреннееЗадание";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ТаблицаЗамены", ТекстЗамена);
	
	Запрос.УстановитьПараметр("Объект", ОбъектОснование);
	Пакеты = Запрос.ВыполнитьПакет();
	КоличествоПакетов = Пакеты.Количество();
	
	ТемаПроекта = Пакеты[КоличествоПакетов - 1].Выгрузить().ВыгрузитьКолонку("Наименование")[0];
	МатрицаШапка.Параметры.ТемаПроекта = ТемаПроекта;
	
	МатрицаТабДок.Вывести(МатрицаШапка);
	ЗаинтересованныеТабДок.Вывести(ЗаинтересованныеШапка);
	
	КоличествоТребований = Требования.Количество();
	
	Для Каждого Строка Из Требования Цикл
		ЗаполнитьЗначенияСвойств(МатрицаДанные.Параметры, Строка);
		МатрицаТабДок.Вывести(МатрицаДанные);
	КонецЦикла;
	
	МатрицаДанные = Макет.ПолучитьОбласть("Данные|МатрицаТребований");
	
	Если КоличествоТребований < 30 Тогда
		Для Счетчик = КоличествоТребований + 1 По 30 Цикл
			МатрицаДанные.Параметры.НомерСтроки = Счетчик;
			МатрицаТабДок.Вывести(МатрицаДанные);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Пакеты[КоличествоПакетов - 2].Пустой() Тогда
		ВыборкаЗаинтересованных = Пакеты[КоличествоПакетов - 2].Выбрать();
		
		Счетчик = 1;
		Пока ВыборкаЗаинтересованных.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ЗаинтересованныеДанные.Параметры, ВыборкаЗаинтересованных);
			ЗаинтересованныеДанные.Параметры.НомерСтроки = Счетчик;
			ЗаинтересованныеТабДок.Вывести(ЗаинтересованныеДанные);
			Счетчик = Счетчик + 1;
		КонецЦикла;
	
		КоличествоЗаинтересованных = Счетчик;
	Иначе
		КоличествоЗаинтересованных = 1;
	КонецЕсли;
	
	ЗаинтересованныеДанные = Макет.ПолучитьОбласть("Данные|РеестрЗаинтересованныхЛиц");
	
	Если КоличествоЗаинтересованных < 30 Тогда	
		Для Счетчик = КоличествоЗаинтересованных По 30 Цикл
			ЗаинтересованныеДанные.Параметры.НомерСтроки = Счетчик;
			ЗаинтересованныеТабДок.Вывести(ЗаинтересованныеДанные);
		КонецЦикла;
	КонецЕсли;
	
	ТабличныеДокументы = Новый СписокЗначений;
	СписокФайлов = Новый СписокЗначений;
	
	ТабличныеДокументы.Добавить(СтатусыТабДок, "Статусы");
	ТабличныеДокументы.Добавить(ЗаинтересованныеТабДок, "Реестр заинтересованных лиц");
	ТабличныеДокументы.Добавить(МатрицаТабДок, "Матрица отслеживания требований");
	
	Для Каждого ТабДок Из ТабличныеДокументы Цикл
		ИмяСтраницы = ТабДок.Представление;
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".XLSX");
		
		Попытка
			ТабДок.Значение.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLSX);
		Исключение
			Результат.ЕстьОшибка = Истина;
			Результат.Ошибка = "Не удалось сформировать файл: " + ИмяСтраницы + " " + ОписаниеОшибки();
			Возврат Результат;
		КонецПопытки;
	
		СписокФайлов.Добавить(ИмяВременногоФайла, ИмяСтраницы);
	КонецЦикла;
	
	ПриложениеExcel = ОбщегоНазначения.СоздатьОбъектExcelApplication();
	
	Если ПриложениеExcel = Неопределено Тогда
		Результат.ЕстьОшибка = Истина;
		Результат.Ошибка = "Не удалось запустить Excel: " + ОписаниеОшибки();
		Возврат Результат;
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".XLSX");
	
	КнигаExcel = ПриложениеExcel.Workbooks.Add();
	КнигаExcel.SaveAs(ИмяВременногоФайла);
	
	Для Каждого ФайлЛиста Из СписокФайлов Цикл                     
		Лист = ПриложениеExcel.Workbooks.Open(ФайлЛиста.Значение);
		Лист.Worksheets(1).Name = ФайлЛиста.Представление;
		Лист.Worksheets(1).Copy(, КнигаExcel.Worksheets(1));
		Лист.Close(0);
		Лист = Неопределено;
		УдалитьФайлы(ФайлЛиста.Значение);
	КонецЦикла;
	
	КнигаExcel.Worksheets(1).Delete();
	КнигаExcel.Worksheets(3).Visible = Ложь;
	
	// Добавим условное форматирование для строк со значение статуса "Реализовано" (зеленый цвет текста).
	КнигаExcel.Worksheets(1).Range("A3:G100").FormatConditions.Add(2, 4, "=ЕСЛИ($F3=""Реализовано"";$A$3:$G$32)").Font.ColorIndex = 50;
	
	КнигаExcel.Worksheets(1).Range("F3:F100").Validation.Add(3, , , СтрШаблон("=Статусы!$A$1:$A$%1", КоличествоСтатусов));
	КнигаExcel.Worksheets(1).Range("E3:E100").Validation.Add(3, , , СтрШаблон("=Статусы!$A$%1:$A$%2", КоличествоСтатусов + 1, КоличествоСтатусов + КоличествоКаналов));
		
		Если КоличествоЗаинтересованных > 1 Тогда
			КнигаExcel.Worksheets(1).Range("C3:C100").Validation.Add(3, , , "='Реестр заинтересованных лиц'!$B$3:$B$" + (КоличествоЗаинтересованных + 1));
		КонецЕсли;
	
	ОбщегоНазначения.УничтожитьОбъектExcelApplication(ПриложениеExcel, КнигаExcel, , Истина);
	
	ДвоичныеДанныеВложения = Новый ДвоичныеДанные(ИмяВременногоФайла);
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанныеВложения, ИдентификаторФормы);
	УдалитьФайлы(ИмяВременногоФайла);
	
	Результат.ИмяФайла = "Матрица требований " + Формат(ТекущаяДатаСеанса(), "ДФ=yyyy-MM-dd_hh-mm-ss") + ".xlsx";
	Результат.АдресФайла = АдресХранилища;
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьМатрицуТребованийИзExcel(Знач ОбъектОснование, Знач АдресХранилища) Экспорт
	
	ОписаниеТипаСтрока = ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(0);
	
	ТипыИнициаторов = Новый Массив;
	ТипыИнициаторов.Добавить(Тип("СправочникСсылка.Подписчики"));
	ТипыИнициаторов.Добавить(Тип("СправочникСсылка.Пользователи"));
	
	Требования = Новый ТаблицаЗначений;
	Требования.Колонки.Добавить("НомерСтроки", ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный));
	Требования.Колонки.Добавить("Описание", ОписаниеТипаСтрока);
	Требования.Колонки.Добавить("Инициатор", Новый ОписаниеТипов(ТипыИнициаторов));
	Требования.Колонки.Добавить("ДатаВыявления", ОбщегоНазначенияКлиентСервер.ОписаниеТипаДата(ЧастиДаты.Дата));
	Требования.Колонки.Добавить("КаналПоступления", Новый ОписаниеТипов("ПеречислениеСсылка.КаналыПоступленияТребований"));
	Требования.Колонки.Добавить("Статус", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыТребований"));
	Требования.Колонки.Добавить("Комментарий", ОписаниеТипаСтрока);
	
	Результат = Новый Структура("Успешно, Таблица", Ложь, Требования);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ИмяФайлаНаСервере = ПолучитьИмяВременногоФайла(".XLSX");
	ДвоичныеДанные.Записать(ИмяФайлаНаСервере);
	
	ПриложениеExcel = ОбщегоНазначения.СоздатьОбъектExcelApplication();
	
	Если ПриложениеExcel = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось загрузить файл.");
		Возврат Результат;
	КонецЕсли;
	
	КнигаExcel = Неопределено;
	Лист = Неопределено;
	
	Попытка
		КнигаExcel = ПриложениеExcel.Workbooks.Open(ИмяФайлаНаСервере);
		Лист = КнигаExcel.Worksheets(1);
	Исключение
		ЗаписьЖурналаРегистрации("Загрузка матрицы требований", УровеньЖурналаРегистрации.Ошибка, , ОбъектОснование, "Ошибка при открытии файла: " + ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось загрузить файл: " + ОписаниеОшибки());
		
		ОбщегоНазначения.УничтожитьОбъектExcelApplication(ПриложениеExcel, КнигаExcel, Лист);
		Возврат Результат;
	КонецПопытки;
	
	СпецЗначения = Лист.Cells(1, 1).SpecialCells(11);
	КоличествоСтрок = СпецЗначения.Row;
	
	Область = Лист.Range(Лист.Cells(3, 2), Лист.Cells(КоличествоСтрок, СпецЗначения.Column));
	ДанныеМатрицы = Область.Value.Выгрузить();
		
	Область = Неопределено;
	ОбщегоНазначения.УничтожитьОбъектExcelApplication(ПриложениеExcel, КнигаExcel, Лист);
	
	ЧислоКолонокИнформации = 6;
	
	Если ДанныеМатрицы.Количество() <> ЧислоКолонокИнформации Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Структура файла не соответствует шаблону для загрузки.");
		Возврат Результат;	
	КонецЕсли;
	
	СоответствияПеречислений = Новый Соответствие;
	
	Для Каждого Статус Из Перечисления.СтатусыТребований Цикл
		СоответствияПеречислений.Вставить(Строка(Статус), Статус);
	КонецЦикла;
	
	Для Каждого КаналПоступления Из Перечисления.КаналыПоступленияТребований Цикл
		СоответствияПеречислений.Вставить(Строка(КаналПоступления), КаналПоступления);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаинтересованныеЛица.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.ЗаинтересованныеЛица КАК ЗаинтересованныеЛица
	|ГДЕ
	|	ЗаинтересованныеЛица.Объект = &Объект
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Участники.Пользователь
	|ИЗ
	|	РегистрСведений.Участники КАК Участники
	|ГДЕ
	|	Участники.Объект = &Объект
	|	И НЕ Участники.Скрытый";
	
	Запрос.УстановитьПараметр("Объект", ОбъектОснование);
	
	ЗаинтересованныеЛица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
	Для НомерСтроки = 0 По КоличествоСтрок - 3 Цикл
		Если ДанныеМатрицы[0][НомерСтроки] = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Инициатор = Справочники.Пользователи.НайтиПоНаименованию(ДанныеМатрицы[1][НомерСтроки]);
		Если Инициатор.Пустая() Тогда
			Инициатор = Справочники.Подписчики.НайтиПоНаименованию(ДанныеМатрицы[1][НомерСтроки]);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Инициатор) И ЗаинтересованныеЛица.Найти(Инициатор) = Неопределено Тогда
			Инициатор = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
		
		ЧастиДат = СтрРазделить(СтрЗаменить(ДанныеМатрицы[2][НомерСтроки], "-", "."), ".", Ложь);
		
		Попытка
			ДатаВыявления = Дата(Число(ЧастиДат[2]), Число(ЧастиДат[1]), Число(ЧастиДат[0]));
		Исключение
			ДатаВыявления = '00010101';
		КонецПопытки;
		
		НоваяСтрока = Результат.Таблица.Добавить();
		НоваяСтрока.НомерСтроки = НомерСтроки + 1;
		НоваяСтрока.Описание = ДанныеМатрицы[0][НомерСтроки];
		НоваяСтрока.Инициатор = Инициатор;
		НоваяСтрока.ДатаВыявления = ДатаВыявления;
		НоваяСтрока.КаналПоступления = СоответствияПеречислений.Получить(ДанныеМатрицы[3][НомерСтроки]);
		НоваяСтрока.Статус = СоответствияПеречислений.Получить(ДанныеМатрицы[4][НомерСтроки]);
		НоваяСтрока.Комментарий = ДанныеМатрицы[5][НомерСтроки];
	КонецЦикла;
	
	Результат.Успешно = Истина;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
