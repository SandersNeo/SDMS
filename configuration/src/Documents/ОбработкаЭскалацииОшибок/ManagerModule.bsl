///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Проверяет необходимости оповещения о заявке по ошибке и создает документ
//
// Параметры:
//  ОбъектЭскалации - ДокументСсылка.ЗаявкаНаРазработку - заявка по ошибке
//  Период - Дата - Дата создания заявки или дата изменения параметров заявки
//
Процедура СоздатьНовыйДокумент(Знач ОбъектЭскалации, Знач Период) Экспорт
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаРазработку.Ссылка КАК ОбъектЭскалации,
	|	ЗаявкаНаРазработку.Направление КАК Направление,
	|	ЗаявкаНаРазработкуСистемыРазработки.Система КАК Система,
	|	ЗаявкаНаРазработку.СерьезностьОшибки КАК СерьезностьОшибки
	|ПОМЕСТИТЬ ДанныеОбъектаЭскалации
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ЗаявкаНаРазработкуСистемыРазработки
	|		ПО (ЗаявкаНаРазработкуСистемыРазработки.Ссылка = ЗаявкаНаРазработку.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОбработкаЭскалацииОшибок КАК ОбработкаЭскалацииОшибок
	|		ПО ЗаявкаНаРазработку.Направление = ОбработкаЭскалацииОшибок.Направление
	|			И (ЗаявкаНаРазработкуСистемыРазработки.Система = ОбработкаЭскалацииОшибок.Система)
	|			И ЗаявкаНаРазработку.СерьезностьОшибки = ОбработкаЭскалацииОшибок.СерьезностьОшибки
	|			И ЗаявкаНаРазработку.Ссылка = ОбработкаЭскалацииОшибок.ОбъектЭскалации
	|			И (НЕ ОбработкаЭскалацииОшибок.ПометкаУдаления)
	|ГДЕ
	|	ЗаявкаНаРазработку.Ссылка = &ОбъектЭскалации
	|	И ЗаявкаНаРазработку.Назначение = ЗНАЧЕНИЕ(Справочник.НазначенияЗадач.Ошибка)
	|	И НЕ ЗаявкаНаРазработку.Черновик
	|	И ОбработкаЭскалацииОшибок.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОбъектаЭскалации.ОбъектЭскалации КАК ОбъектЭскалации,
	|	ДанныеОбъектаЭскалации.Направление КАК Направление,
	|	ДанныеОбъектаЭскалации.Система КАК Система,
	|	ДанныеОбъектаЭскалации.СерьезностьОшибки КАК СерьезностьОшибки,
	|	НастройкиЭскалацииОшибокОчередьЭскалации.ИдентификаторОчереди КАК ИдентификаторОчереди,
	|	ДОБАВИТЬКДАТЕ(&Период, МИНУТА, НастройкиЭскалацииОшибокОчередьЭскалации.ОтсрочкаУведомления) КАК ДатаУведомления,
	|	НастройкиЭскалацииОшибокПолучателиОповещений.Получатель КАК Получатель
	|ИЗ
	|	ДанныеОбъектаЭскалации КАК ДанныеОбъектаЭскалации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиЭскалацииОшибок КАК НастройкиЭскалацииОшибок
	|		ПО ДанныеОбъектаЭскалации.Направление = НастройкиЭскалацииОшибок.Направление
	|			И ДанныеОбъектаЭскалации.Система = НастройкиЭскалацииОшибок.Система
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиЭскалацииОшибок.ОчередьЭскалации КАК НастройкиЭскалацииОшибокОчередьЭскалации
	|		ПО (НастройкиЭскалацииОшибок.Ссылка = НастройкиЭскалацииОшибокОчередьЭскалации.Ссылка)
	|			И ДанныеОбъектаЭскалации.СерьезностьОшибки = НастройкиЭскалацииОшибокОчередьЭскалации.СерьезностьОшибки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиЭскалацииОшибок.ПолучателиОповещений КАК НастройкиЭскалацииОшибокПолучателиОповещений
	|		ПО (НастройкиЭскалацииОшибок.Ссылка = НастройкиЭскалацииОшибокПолучателиОповещений.Ссылка)
	|			И (НастройкиЭскалацииОшибокОчередьЭскалации.ИдентификаторОчереди = НастройкиЭскалацииОшибокПолучателиОповещений.ИдентификаторОчереди)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаУведомления
	|ИТОГИ
	|	МАКСИМУМ(ОбъектЭскалации),
	|	МАКСИМУМ(Направление),
	|	МАКСИМУМ(СерьезностьОшибки),
	|	МАКСИМУМ(ДатаУведомления)
	|ПО
	|	Система,
	|	ИдентификаторОчереди";
	
	Запрос.УстановитьПараметр("ОбъектЭскалации", ОбъектЭскалации);
	Запрос.УстановитьПараметр("Период", Период);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаСистем = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСистем.Следующий() Цикл
			НовыйДокумент = СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НовыйДокумент, ВыборкаСистем);
			НовыйДокумент.Дата = Период;
			
			ВыборкаОчередей = ВыборкаСистем.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаОчередей.Следующий() Цикл
				НоваяОчередь = НовыйДокумент.ОчередьЭскалации.Добавить();
				НоваяОчередь.ИдентификаторОчереди = ВыборкаОчередей.ИдентификаторОчереди;
				НоваяОчередь.ДатаУведомления = ВыборкаОчередей.ДатаУведомления;
				
				ВыборкаПолучателей = ВыборкаОчередей.Выбрать();
				Пока ВыборкаПолучателей.Следующий() Цикл
					НовыйПолучатель = НовыйДокумент.Получатели.Добавить();
					НовыйПолучатель.ИдентификаторОчереди = ВыборкаПолучателей.ИдентификаторОчереди;
					НовыйПолучатель.Получатель = ВыборкаПолучателей.Получатель;
				КонецЦикла;
			КонецЦикла;
			
			НовыйДокумент.ОчередьЭскалации[0].СтатусРеагирования = Перечисления.СтатусыОбработкиЭскалацииОшибок.Ожидание;
			НовыйДокумент.ОчередьЭскалации[0].ДатаИзмененияСтатуса = ТекущаяДата;
			
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Оповещает очередь с переданным идентификатором
//
// Параметры:
//  Ссылка - ДокументСсылка.ОбработкаЭскалацииОшибок - документ по которому требуется оповестить
//  ИдентификаторОчереди - УникальныйИдентификатор - идентификатор очереди, которую требуется оповестить
//
Процедура ОповеститьОчередь(Знач Ссылка, Знач ИдентификаторОчереди) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбработкаЭскалацииОшибок.Ссылка КАК Ссылка,
	|	ЗаявкаНаРазработку.Черновик КАК Черновик,
	|	ЗаявкаНаРазработку.ДатаПоследнегоИзменения КАК ДатаПоследнегоИзменения,
	|	ОбработкаЭскалацииОшибок.ОбъектЭскалации КАК ОбъектЭскалации,
	|	ОбработкаЭскалацииОшибок.Система КАК Система,
	|	ЗаявкаНаРазработку.Направление = ОбработкаЭскалацииОшибок.Направление
	|		И ЗаявкаНаРазработку.СерьезностьОшибки = ОбработкаЭскалацииОшибок.СерьезностьОшибки
	|		И ЕСТЬNULL(СистемыЗаявки.Система, НЕОПРЕДЕЛЕНО) = ОбработкаЭскалацииОшибок.Система КАК ДанныеСовпадают
	|ПОМЕСТИТЬ ПромежуточныеДанные
	|ИЗ
	|	Документ.ОбработкаЭскалацииОшибок КАК ОбработкаЭскалацииОшибок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО ОбработкаЭскалацииОшибок.ОбъектЭскалации = ЗаявкаНаРазработку.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК СистемыЗаявки
	|		ПО ОбработкаЭскалацииОшибок.ОбъектЭскалации = СистемыЗаявки.Ссылка
	|			И ОбработкаЭскалацииОшибок.Система = СистемыЗаявки.Система
	|ГДЕ
	|	ОбработкаЭскалацииОшибок.Ссылка = &Ссылка
	|	И НЕ ОбработкаЭскалацииОшибок.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПромежуточныеДанные.Черновик КАК Черновик,
	|	ПромежуточныеДанные.ОбъектЭскалации КАК ОбъектЭскалации,
	|	ПромежуточныеДанные.ДанныеСовпадают КАК ДанныеСовпадают,
	|	ПромежуточныеДанные.ДатаПоследнегоИзменения КАК ДатаПоследнегоИзменения,
	|	ЕСТЬNULL(СтатусыЗаявокПоСистемам.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ПустаяСсылка)) КАК СтатусСистемы,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Задача.Ссылка) КАК КоличествоЗадач
	|ИЗ
	|	ПромежуточныеДанные КАК ПромежуточныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|		ПО ПромежуточныеДанные.ОбъектЭскалации = СтатусыЗаявокПоСистемам.Заявка
	|			И ПромежуточныеДанные.Система = СтатусыЗаявокПоСистемам.Система
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задача КАК Задача
	|		ПО ПромежуточныеДанные.ОбъектЭскалации = Задача.ОбъектОснование
	|			И ПромежуточныеДанные.Система = Задача.СистемаУчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ПромежуточныеДанные.Черновик,
	|	ПромежуточныеДанные.ОбъектЭскалации,
	|	ПромежуточныеДанные.ДанныеСовпадают,
	|	ПромежуточныеДанные.ДатаПоследнегоИзменения,
	|	СтатусыЗаявокПоСистемам.Статус";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ИдентификаторОчереди", ИдентификаторОчереди);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ОбработкаЭскалации = Ссылка.ПолучитьОбъект();
		
		ВыборкаСостояние = РезультатЗапроса.Выбрать();
		ВыборкаСостояние.Следующий();
		
		Если НЕ ВыборкаСостояние.Черновик И ВыборкаСостояние.ДанныеСовпадают Тогда
			ОбработатьОчередьЭскалации(ОбработкаЭскалации, ВыборкаСостояние, ИдентификаторОчереди);
		Иначе
			ОбработкаЭскалации.УстановитьПометкуУдаления(Истина);
			
			Если НЕ ВыборкаСостояние.Черновик Тогда
				РегистрыСведений.ОчередьСобытийНаОбработку.СоздатьОбработкуЭскалацииОшибок(ВыборкаСостояние.ОбъектЭскалации,
					ВыборкаСостояние.ДатаПоследнегоИзменения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьОчередьЭскалации(ОбработкаЭскалации, Знач Состояние, Знач ИдентификаторОчереди)
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Очередь = ОбработкаЭскалации.ОчередьЭскалации.Найти(ИдентификаторОчереди, "ИдентификаторОчереди");
	НомерТекущейОчереди = Очередь.НомерСтроки;
	
	Если Состояние.СтатусСистемы = Справочники.СтатусыОбъектов.Отклонен ИЛИ Состояние.КоличествоЗадач > 0 Тогда
		Для Каждого Строка Из ОбработкаЭскалации.ОчередьЭскалации Цикл
			Если НЕ ЗначениеЗаполнено(Строка.СтатусРеагирования)
				ИЛИ Строка.СтатусРеагирования = Перечисления.СтатусыОбработкиЭскалацииОшибок.Ожидание Тогда
				
				Строка.СтатусРеагирования = Перечисления.СтатусыОбработкиЭскалацииОшибок.НеТребуетРеакции;
			ИначеЕсли (Строка.НомерСтроки = НомерТекущейОчереди - 1) Тогда
				Строка.СтатусРеагирования = Перечисления.СтатусыОбработкиЭскалацииОшибок.ЕстьРеакция;
			Иначе
				Строка.СтатусРеагирования = Перечисления.СтатусыОбработкиЭскалацииОшибок.НетРеакции;
			КонецЕсли;
			
			Строка.ДатаИзмененияСтатуса = ТекущаяДата;
		КонецЦикла;
		
	Иначе
		Для Каждого Строка Из ОбработкаЭскалации.ОчередьЭскалации Цикл
			Если Строка.СтатусРеагирования = Перечисления.СтатусыОбработкиЭскалацииОшибок.Ожидание Тогда
				Строка.СтатусРеагирования = Перечисления.СтатусыОбработкиЭскалацииОшибок.Отправлено;
				Строка.ДатаИзмененияСтатуса = ТекущаяДата;
				
				ОтправитьОповещениеПолучателям(ОбработкаЭскалации, Строка.ИдентификаторОчереди);
				
			ИначеЕсли (Строка.НомерСтроки = НомерТекущейОчереди + 1) Тогда
				Строка.СтатусРеагирования = Перечисления.СтатусыОбработкиЭскалацииОшибок.Ожидание;
				Строка.ДатаИзмененияСтатуса = ТекущаяДата;
				
			ИначеЕсли Строка.СтатусРеагирования = Перечисления.СтатусыОбработкиЭскалацииОшибок.Отправлено Тогда
				Строка.СтатусРеагирования = Перечисления.СтатусыОбработкиЭскалацииОшибок.НетРеакции;
				Строка.ДатаИзмененияСтатуса = ТекущаяДата;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбработкаЭскалации.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Функция ОтправитьОповещение(Знач Данные, Знач ТекстСообщения, Знач Тема, Почта, Знач Отправитель, КоличествоОшибокПодряд)
	
	ИмяСобытия = "Обработка эскалации ошибок. Отправка оповещения";
	Отправлено = Ложь;
	
	Если Почта <> Неопределено Тогда
		ЗаменаДляВебКлиента = WebОкружениеВызовСервера.АдресПубликацииИнформационнойБазы();   	
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "<!-- sdms_link_prefix -->", ЗаменаДляВебКлиента);
		
		Сообщение = Новый ИнтернетПочтовоеСообщение;
		Сообщение.Кодировка = КодировкаТекста.UTF8;
		Сообщение.ИмяОтправителя = Отправитель.Имя;
		Сообщение.Отправитель = Отправитель.Адрес;
		Сообщение.Важность = ВажностьИнтернетПочтовогоСообщения.Высокая;
		Сообщение.Получатели.Добавить(Данные.Адрес);
		Сообщение.Тема = Тема;
		
		Сообщение.Тексты.Добавить(ТекстСообщения, ТипТекстаПочтовогоСообщения.HTML);
		Сообщение.ОбработатьТексты();
		
		Попытка
			Почта.Послать(Сообщение);
			Отправлено = Истина;
			КоличествоОшибокПодряд = 0;
		Исключение
			ТекстОшибки = СтрШаблон("Ошибка при отправке письма. Адрес - <%1> по причине: %2.", Данные.Адрес, ОписаниеОшибки());
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
			
			КоличествоОшибокПодряд = КоличествоОшибокПодряд + 1;
		КонецПопытки;
		
		Сообщение.Вложения.Очистить();
		
		Если КоличествоОшибокПодряд > 7 Тогда // BSLLS-off
			Почта = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Отправлено;
	
КонецФункции

Процедура ОтправитьОповещениеПолучателям(ОбработкаЭскалации, Знач ИдентификаторОчереди)
	
	ИмяСобытия = "Обработка эскалации ошибок. Отправка оповещения";
	
	РегистрОчередьОтправки = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем;
	
	Отбор = Новый Структура("ИдентификаторОчереди", ИдентификаторОчереди);
	ПолучателиОчереди = ОбработкаЭскалации.Получатели.НайтиСтроки(Отбор);
	ТаблицаПолучателей = ОбработкаЭскалации.Получатели.Выгрузить(ПолучателиОчереди, "Получатель");
	
	Запрос = Новый Запрос;
	
#Область ТекстЗапроса
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Получатели.Получатель КАК Получатель
	|ПОМЕСТИТЬ Получатели
	|ИЗ
	|	&ТаблицаПолучателей КАК Получатели
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Почта КАК Адрес
	|ИЗ
	|	Получатели КАК Получатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ((ВЫРАЗИТЬ(Получатели.Получатель КАК Справочник.Пользователи)) = Пользователи.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Подписчики.Наименование
	|ИЗ
	|	Получатели КАК Получатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Подписчики КАК Подписчики
	|		ПО ((ВЫРАЗИТЬ(Получатели.Получатель КАК Справочник.Подписчики)) = Подписчики.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаНаРазработку.Ссылка КАК ОбъектЭскалации,
	|	ЗаявкаНаРазработку.Номер КАК Номер,
	|	ЗаявкаНаРазработку.Наименование КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕ(ОбработкаЭскалацииОшибок.СерьезностьОшибки) КАК Серьезность,
	|	ПРЕДСТАВЛЕНИЕ(ОбработкаЭскалацииОшибок.Система) КАК Система,
	|	ОбработкаЭскалацииОшибок.Дата КАК Дата,
	|	ПРЕДСТАВЛЕНИЕ(ЗаявкаНаРазработку.Автор) КАК Автор,
	|	Пользователи.Почта КАК Почта
	|ИЗ
	|	Документ.ОбработкаЭскалацииОшибок КАК ОбработкаЭскалацииОшибок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО ОбработкаЭскалацииОшибок.ОбъектЭскалации = ЗаявкаНаРазработку.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (ЗаявкаНаРазработку.Автор = Пользователи.Ссылка)
	|ГДЕ
	|	ОбработкаЭскалацииОшибок.Ссылка = &ОбработкаЭскалации";
	
#КонецОбласти

	Запрос.УстановитьПараметр("ТаблицаПолучателей", ТаблицаПолучателей);
	Запрос.УстановитьПараметр("ОбработкаЭскалации", ОбработкаЭскалации.Ссылка);
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Если НЕ Пакет[1].Пустой() Тогда
		ДанныеПочты = Справочники.УчетныеЗаписиЭлектроннойПочты.СвойстваСлужебногоЯщикаДляОтправкиПисем();
		Почта = Неопределено;
		
		Если ДанныеПочты.ПрофильЗаполнен Тогда
			Почта = РегистрОчередьОтправки.ПолучитьСоединениеСПочтовымСервером(ДанныеПочты.ПочтовыйПрофиль);
		КонецЕсли;
		
		Данные = Пакет[2].Выбрать();
		Данные.Следующий();
		
		Тема = СтрШаблон("[Создана заявка на ошибку. %1] %2. %3", Данные.Серьезность, Данные.Номер, Данные.Наименование);
		Важность = Перечисления.ВажностьСообщения.Высокая;
		
		ШаблоныПисьма = РегистрОчередьОтправки.ШаблоныЭлектронногоПисьма();
		
		ТекстПисьма = СформироватьТекстПисьма(Данные, ШаблоныПисьма);
		
		ДиректорияФайлов = РегистрОчередьОтправки.ВыделитьДиректориюДляФайловРассылки();
		
		ГотовоеПисьмо = СтрЗаменить(ШаблоныПисьма.СтруктураЭлектронногоПисьма, "<!-- content -->", ТекстПисьма);
		
		РегистрОчередьОтправки.ОбработатьШаблоныДляКартинокПисьма(ДиректорияФайлов, ИмяСобытия, ГотовоеПисьмо);
		
		КоличествоОшибок = 0;
		Выборка = Пакет[1].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Отправлено = ОтправитьОповещение(Выборка, ГотовоеПисьмо, Тема, Почта, ДанныеПочты.Отправитель, КоличествоОшибок);
			РегистрОчередьОтправки.Добавить(Выборка.Адрес, Тема, ТекстПисьма, Важность, Отправлено);
		КонецЦикла;
		
		РегистрОчередьОтправки.ОтключитьСоединениеСПочтовымСервером(Почта);
		
		РегистрОчередьОтправки.ОчиститьВыделеннуюДиректориюФайловПисьма(ДиректорияФайлов, ИмяСобытия);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьТекстПисьма(Знач ДанныеОбъекта, Знач ШаблоныПисьма)
	
	ЧастиПисьма = Новый Массив;
	
	ШаблонПисьма = ШаблоныПисьма.БлокОсновногоТекста;
	ТекстШаблона = СтрШаблон("Создана заявка на ошибку. Уровень серьезности - %1:", ДанныеОбъекта.Серьезность);
	
	ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- content -->", ТекстШаблона);
	ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- font_size -->", "16px");
	
	ЧастиПисьма.Добавить(ШаблонПисьма);
	
	ШаблонПисьма = ШаблоныПисьма.БлокОсновногоТекста;
	
	ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- content -->", СтрШаблон("<b>%1</b>", ДанныеОбъекта.Наименование));
	ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- font_size -->", "16px");
	
	ЧастиПисьма.Добавить(ШаблонПисьма);
	
	ШаблонПисьма = ШаблоныПисьма.БлокТриТаблицы;
	
	СсылкаНаАвтора = СтрЗаменить(ШаблоныПисьма.ЭлектронноеПисьмо, "<!-- email -->", ДанныеОбъекта.Почта);
	СсылкаНаАвтора = СтрЗаменить(СсылкаНаАвтора, "<!-- user_name -->", ДанныеОбъекта.Автор);
	
	ТекстШаблона = СтрШаблон("Автор: %1", СсылкаНаАвтора);
	ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- left_table -->", ТекстШаблона);
	
	СсылкаНаОбъект = ОбщегоНазначения.ПолучитьШаблонНавигационнойСсылки(ДанныеОбъекта.ОбъектЭскалации);
	ТипОбъекта = ТипЗнч(ДанныеОбъекта.ОбъектЭскалации);
	
	СсылкаНаОбъект = СтрЗаменить(ШаблоныПисьма.АктивнаяСсылка, "<!-- link -->", СсылкаНаОбъект);
	СсылкаНаОбъект = СтрЗаменить(СсылкаНаОбъект, "<!-- title_link -->", ДанныеОбъекта.Номер);
	ТекстШаблона = СтрШаблон("%1: %2.", ТипОбъекта, СсылкаНаОбъект);
	
	ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- center_table -->", ТекстШаблона);
	
	ЧастиПисьма.Добавить(ШаблонПисьма);
	
	ШаблонПисьма = ШаблоныПисьма.БлокДвеТаблицы;
	
	НовоеЗначение = СтрЗаменить(ШаблоныПисьма.НовоеЗначение, "<!-- value -->", Формат(ДанныеОбъекта.Дата, "ДФ='dd.MM.yyyy HH:mm'"));
	
	ТекстШаблона = СтрШаблон("Дата: %1.", НовоеЗначение);
	
	ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- left_table_1 -->", ТекстШаблона);
	
	ЧастиПисьма.Добавить(ШаблонПисьма);
	
	ШаблонПисьма = ШаблоныПисьма.БлокДвеТаблицы;
	
	НовоеЗначение = СтрЗаменить(ШаблоныПисьма.НовоеЗначение, "<!-- value -->", ДанныеОбъекта.Система);
	
	ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- left_table_1 -->", СтрШаблон("Система: %1.", НовоеЗначение));
	
	ЧастиПисьма.Добавить(ШаблонПисьма);
	
	ЧастиПисьма.Добавить(ШаблоныПисьма.РазделительнаяЛиния);
	
	ЧастиПисьма.Добавить(ШаблоныПисьма.ПодвалПисьма);
	
	Возврат СтрСоединить(ЧастиПисьма, Символы.ПС);
	
КонецФункции

#КонецОбласти

#КонецЕсли
