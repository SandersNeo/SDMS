///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Возвращает список подключаемых команды панели навигации
// 
// Возвращаемое значение:
//   Список значенией - список подключаемых команды панели навигации
//
Функция КомандыПанелиНавигации() Экспорт

	Команды = Новый СписокЗначений;   
	Команды.Добавить("История", "История", , БиблиотекаКартинок.ПанельНавигацииИстория);
	Команды.Добавить("Участники", "Участники", , БиблиотекаКартинок.Участники);	
	Команды.Добавить("Комментарии", "Комментарии", , БиблиотекаКартинок.Комментарии);
	Команды.Добавить("ЗаинтересованныеЛица", "Заинтересованные лица", , БиблиотекаКартинок.ЗаинтересованныеЛица);
	Команды.Добавить("Файлы", "Файлы", , БиблиотекаКартинок.Файлы);
	Команды.Добавить("Связи", "Связи", , БиблиотекаКартинок.Связи); 
	Команды.Добавить("ПланПроекта", "План проекта", , БиблиотекаКартинок.ПланПроекта);
	Команды.Добавить("СтруктураПодчиненности", "Структура подчиненности", , БиблиотекаКартинок.СтруктураПодчиненности);
	ИнтеграцияДополнительныхПодсистем.ДобавитьКомандуРасчетПриоритета(Команды);
	
	Возврат Команды;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

Функция ПолучитьПрефикс() Экспорт
	
	Возврат "ВЗ";
	
КонецФункции

// Функция - Получить назначеного
//
// Параметры:
//  Статус		 - Справочник.СтатусыОбъектов			 - статус документа
//  Ссылка		 - Документ.ВнутреннееЗадание			 - ссылка на документ
//  Направление	 - СправочникСсылка.НаправленияРазработки	 - направление документа
//  Заказчик	 - СправочникСсылка.Пользователи			 - заказчик докумена
//  Назначена	 - СправочникСсылка.Пользователи			 - новый назначенный в документе
// 
// Возвращаемое значение:
//  Назначена - назначенный при изменении статуса
//
Функция ПолучитьНазначеного(Знач Статус, Знач Ссылка, Знач Направление, Знач Заказчик, Знач Назначена) Экспорт
	
	НовыйИсполнитель = Назначена;  
	Статусы = Справочники.СтатусыОбъектов;

	// При статусах "Тестирование" и "НаДоработку" задача возвращается на заказчика.
	Если Статус = Статусы.Тестирование 
		ИЛИ Статус = Статусы.НаДоработку Тогда
		
		НовыйИсполнитель = Заказчик;
		
	ИначеЕсли Статус = Статусы.ВРаботе
		ИЛИ Статус = Статусы.Протестирован Тогда
		
		// Если текущий пользователь - тестировщик, ИЛИ статус изменился на "В работе" задача возвращается на последнего исполнителя
		ПоследнийРазработчик = ПолучитьПоследнегоРазработчика(Ссылка, Направление);
		Если ЗначениеЗаполнено(ПоследнийРазработчик) Тогда
			НовыйИсполнитель = ПоследнийРазработчик;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат НовыйИсполнитель;
	
КонецФункции
	
// Возвращает максимально допустимый уровень вложенности 
// 
// Возвращаемое значение:
//   - Число
//
Функция МаксимальныйУровеньВложенности() Экспорт
	
	Возврат 3;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИСТОРИЯ ИЗМЕНЕНИЙ ОБЪЕКТА, ОПОВЕЩЕНИЕ ПОЛЬЗОВАТЕЛЕЙ

Функция ПроверяемыеСвойстваОбъекта() Экспорт
	
	Результат = Новый Структура("Реквизиты, ТабличныеЧасти", Новый Массив, Новый Структура);
	
	// Названия реквизитов объекта
	Результат.Реквизиты.Добавить("Филиал");
	Результат.Реквизиты.Добавить("ДатаЗакрытия");
	Результат.Реквизиты.Добавить("ДатаПоследнегоТестирования");
	Результат.Реквизиты.Добавить("ДатаНачалаРазработки");
	Результат.Реквизиты.Добавить("ОбъектОснование");
	Результат.Реквизиты.Добавить("Заказчик");
	Результат.Реквизиты.Добавить("ИсполнитьДо");
	Результат.Реквизиты.Добавить("Назначена");
	Результат.Реквизиты.Добавить("Назначение");
	Результат.Реквизиты.Добавить("Наименование");
	Результат.Реквизиты.Добавить("Направление");
	Результат.Реквизиты.Добавить("Описание");
	Результат.Реквизиты.Добавить("Порядок");
	Результат.Реквизиты.Добавить("Проект");
	Результат.Реквизиты.Добавить("СистемаУчета");
	Результат.Реквизиты.Добавить("Статус");
	Результат.Реквизиты.Добавить("Продукт");
	Результат.Реквизиты.Добавить("ЮридическоеЛицо");
	
	Возврат Результат;
	
КонецФункции

Функция АвтосохраняемыеРеквизиты() Экспорт
	
	СохраняемыеДанные = Новый Структура;
	
	СохраняемыеДанные.Вставить("РеквизитыОбъекта", Новый Массив);
	СохраняемыеДанные.Вставить("ТабличныеЧасти", Новый Структура);
	СохраняемыеДанные.Вставить("РеквизитыФормы", Новый Массив);
	
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("Наименование");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("Приоритет");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("Назначена");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("СерьезностьОшибки");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("ОбъектОснование");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("Назначение");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("ВидПроцесса");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("Направление");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("Заказчик");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("Филиал");
	СохраняемыеДанные.РеквизитыФормы.Добавить("ПланТрудозатрат");
	
	Возврат СохраняемыеДанные;
	
КонецФункции

// Массив имен реквизитов, тексты которых подвергаются семантическому контролю
// 
// Возвращаемое значение:
//  Массив - имена реквизитов, подвергающиеся семантическому анализу
//
Функция РеквизитыСемантическогоАнализа() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить("Описание");
	Массив.Добавить("Наименование");
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Номер");
	Поля.Добавить("Наименование");	
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = СтрШаблон("Внутреннее задание %1. %2", Данные.Номер, Данные.Наименование);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Устанавливает ограничения использования полей в динамических списках 
// документа "Задача".
//
// Параметры:
//  Список - ДинамическийСписок - динамический список.
Процедура УстановитьОграниченияСписка(Список) Экспорт
	
	// Поля, исключаемые из отбора, сортировки и группировки
	ИсключаемыеПоля = Новый Массив;
	ИсключаемыеПоля.Добавить("ИндексКартинки");
	ИсключаемыеПоля.Добавить("ПометкаУдаления");
	ИсключаемыеПоля.Добавить("Проведен");
	ИсключаемыеПоля.Добавить("Порядок");	
	
	Список.УстановитьОграниченияИспользованияВОтборе(ИсключаемыеПоля);
	
	ИсключаемыеПоля.Добавить("Ссылка");
	
	Список.УстановитьОграниченияИспользованияВПорядке(ИсключаемыеПоля);
	Список.УстановитьОграниченияИспользованияВГруппировке(ИсключаемыеПоля);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПоследнегоРазработчика(Знач Ссылка, Знач Направление)
	
	Результат = Справочники.Пользователи.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СвойстваВнутреннихЗаданий.Исполнитель КАК Исполнитель
	|ИЗ
	|	РегистрСведений.СвойстваВнутреннихЗаданий КАК СвойстваВнутреннихЗаданий
	|ГДЕ
	|	СвойстваВнутреннихЗаданий.Объект = &Ссылка
	|	И СвойстваВнутреннихЗаданий.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ВРаботе)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СвойстваВнутреннихЗаданий.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Направление", Направление);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Исполнитель;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
