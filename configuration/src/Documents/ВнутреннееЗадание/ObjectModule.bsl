///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ОбъявлениеПеременных

// Хранит состояние объекта до записи
Перем ДанныеДоЗаписи;

// Хранит признак изменения описания
Перем ОписаниеИзменилось;

// Хранит признак, что у объекта изменился объект-основание
Перем ИзменилосьОснование;

// Признак, что изменился статус
Перем ИзменилсяСтатус;

// Признак, что изменился филиал
Перем ИзменилсяФилиал;

// Хранит описание изменений объекта
Перем ОписаниеИзменений;

// Хранит признак, указывающий, что объект еще не записан в БД
Перем ЭтоНовыйОбъект;

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(Направление) 
		И РегистрыСведений.ИспользованиеЮридическихЛицНаправлений.Использует(Направление) Тогда

		ПроверяемыеРеквизиты.Добавить("ЮридическоеЛицо");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// ДЕЙСТВИЯ, СВЯЗАННЫЕ С ОБРАЩЕНИЕМ К "СТАРЫМ" ЗНАЧЕНИЯМ РЕКВИЗИТОВ ОБЪЕКТА
	
	// Данные объекта до записи
	ДанныеДоЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, 
		"Автор, Заказчик, Назначена, ОбъектОснование, Описание, Проект, Статус, Направление, ЮридическоеЛицо, Филиал, ВидРодительскогоПроекта");
	
	// Определенные данные объекта до записи,
	// для фиксации изменений состояния в РС.ОчередьСобытийНаОбработку 
	ОписаниеИзменений = ОбщегоНазначения.ПолучитьСостояниеОбъектаДоЗаписи(Ссылка);
	
	Если ДополнительныеСвойства.Свойство("ОценкаТрудозатрат") Тогда
		ОписаниеИзменений.Значения.Реквизиты.Вставить("ОценкаТрудозатрат", ДополнительныеСвойства.ОценкаТрудозатрат);
	КонецЕсли;
	
	// ДЕЙСТВИЯ, СВЯЗАННЫЕ С ПРОВЕРКАМИ И ЗАПОЛНЕНИЕМ ЗНАЧЕНИЙ РЕКВИЗИТОВ ОБЪЕКТА
	
	// Плановые трудозатраты
	ПредыдущаяОценкаТрудозатрат = УчетТрудозатрат.ПолучитьПлановыеТрудозатраты(Ссылка);
	
	Если ДополнительныеСвойства.Свойство("ОценкаТрудозатрат") 
		И ДополнительныеСвойства.ОценкаТрудозатрат <> ПредыдущаяОценкаТрудозатрат Тогда
		
		ДополнительныеСвойства.Вставить("ИзмениласьОценкаТрудозатрат");
	КонецЕсли;
		
	ТекущаяДата = ТекущаяДатаСеанса();
	ЭтоНовыйОбъект = ЭтоНовый();
	
	НовыйСтатус = Неопределено;
	Если ДополнительныеСвойства.Свойство("НовыйСтатус", НовыйСтатус) = Ложь Тогда
		НовыйСтатус = Статус;
	КонецЕсли;	
		
	ИзменилсяСтатус = (ДанныеДоЗаписи.Статус <> НовыйСтатус);
	ИзменилсяФилиал = (Филиал <> ДанныеДоЗаписи.Филиал);
	
	Если ДополнительныеСвойства.Свойство("НовыйСтатус") Тогда
		Статус = ДополнительныеСвойства.НовыйСтатус;
	КонецЕсли;
	
	Если ЭтоНовыйОбъект Тогда
		Если НЕ ЗначениеЗаполнено(Статус) Тогда
			Статус = Справочники.СтатусыОбъектов.Новый;
		КонецЕсли;
		
		ЭтотОбъект.УстановитьНовыйНомер();
		КороткийНомер = ОбщегоНазначения.ПолучитьКороткийНомер(Номер, Документы.ВнутреннееЗадание.ПолучитьПрефикс());
	    ДатаИзмененияСтатуса = Дата;
	Иначе
		Если Статус <> Справочники.СтатусыОбъектов.Новый И Статус <> Справочники.СтатусыОбъектов.Приостановлен
			И НЕ ЗначениеЗаполнено(Филиал) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Филиал"" не заполнено.", , "Объект.Филиал", , Отказ);
			Возврат;
		КонецЕсли;
		
		Если ИзменилсяСтатус Тогда
			ДатаИзмененияСтатуса = ТекущаяДата;
			ОбработатьИзменениеСтатуса();
		КонецЕсли;
		
		Если Статус = Справочники.СтатусыОбъектов.Решен Тогда
			ПроцентВыполнения = 100;
		Иначе
			ПорядокСтатуса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Статус, "Порядок");
			Если ПроцентВыполнения > 0 И ПроцентВыполнения < 100 Тогда
				Если ПорядокСтатуса < ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтатусыОбъектов.ВРаботе, "Порядок") Тогда
					Статус = Справочники.СтатусыОбъектов.ВРаботе;
				КонецЕсли;
			ИначеЕсли ПроцентВыполнения = 100 Тогда
				Статус = Справочники.СтатусыОбъектов.Решен;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИзменилсяСтатус ИЛИ Назначена <> ДанныеДоЗаписи.Назначена Тогда
		ДополнительныеСвойства.Вставить("ЗаписатьИзмененияСвойствЗадачи", Истина);
	КонецЕсли;
		
	ИзменилосьОснование = (ОбъектОснование <> ДанныеДоЗаписи.ОбъектОснование) ИЛИ (Проект <> ДанныеДоЗаписи.Проект);
	Если ИзменилосьОснование Тогда
		Если ЗначениеЗаполнено(ОбъектОснование) Тогда
			ВидРодительскогоПроекта = ОбщегоНазначения.ПолучитьВидРодительскогоПроекта(ОбъектОснование);
		Иначе
			ВидРодительскогоПроекта = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// Если объект изменен записываем дату изменения, и дату изменения в объект верхнего уровня
	Если ДополнительныеСвойства.Свойство("ОбновитьДатыПоследнихИзменений") Тогда
		ДатаПоследнегоИзменения = ТекущаяДата;
	КонецЕсли;
	
	Если Назначение = Справочники.НазначенияЗадач.Ошибка И НЕ ЗначениеЗаполнено(СерьезностьОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Серьезность ошибки"" не заполнено", , , , Отказ);
		Возврат;
	КонецЕсли;
	
	ЕстьИзмененияОписания = Неопределено;	
	Если ДополнительныеСвойства.Свойство("ОписаниеИзменилось") Тогда
		ЕстьИзмененияОписания = ДополнительныеСвойства.ОписаниеИзменилось;
	КонецЕсли;
	
	// Задействование механизма сравнения истории описания объектов
	ОписаниеИзменилось = ИсторияИзменений.СравнитьОписанияОбъектаПриЗаписи(Ссылка, 
		ДанныеДоЗаписи.Описание, Описание, ЕстьИзмененияОписания);
		
	Если НЕ Отказ И (ОписаниеИзменилось ИЛИ ЭтоНовыйОбъект) Тогда
		ИндексируемоеОписание = РедакторОписания.ПолучитьИндексируемоеОписание(Описание);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Сравнение состояния до и после записи
	Если ДополнительныеСвойства.Свойство("Комментарий") Тогда
		ОбщегоНазначения.ОбработатьИзменениеОбъекта(Ссылка, ОписаниеИзменений, , ДополнительныеСвойства.Комментарий);
	Иначе
		ОбщегоНазначения.ОбработатьИзменениеОбъекта(Ссылка, ОписаниеИзменений);
	КонецЕсли;
		
	// Сохранение ключевых свойств задачи
	Если ДополнительныеСвойства.Свойство("ЗаписатьИзмененияСвойствЗадачи") Тогда
		РегистрыСведений.СвойстваВнутреннихЗаданий.Добавить(Ссылка, Назначена, Статус, Порядок);
	КонецЕсли;
	
	// Проверка изменения статуса задачи
	ПараметрыОперации = Неопределено;
	Если ДополнительныеСвойства.Свойство("ПроверкаИзмененияСтатусаПередЗаписью", ПараметрыОперации) Тогда
		ТекстКомментария = ПараметрыОперации.Комментарий.ТекстКомментария;
		Общедоступный = ПараметрыОперации.Комментарий.Общедоступный;
		Служебный = ?(Статус = Справочники.СтатусыОбъектов.Отклонен, Истина, Ложь);
		
		Если ПараметрыОперации.ВидОперации = Справочники.СтатусыОбъектов.Приостановлен Тогда
			РегистрыСведений.ПриостановленныеЗадачи.Приостановить(Ссылка, ТекстКомментария);
			Служебный = Истина;
		Иначе
			// Если есть незакрытый период приостановки задачи, необходимо его закрыть
			Если ПараметрыОперации["ЕстьНезакрытыйПериодПриостановки"] = Истина Тогда
				РегистрыСведений.ПриостановленныеЗадачи.Возобновить(Ссылка);
				Комментарий = "<p>Работа над задачей возобновлена.</p>";
				Служебный = Истина;
				
				Если НЕ ПустаяСтрока(ТекстКомментария) Тогда
					ТекстКомментария = Комментарий + Символы.ПС + ТекстКомментария;
				Иначе
					ТекстКомментария = Комментарий;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстКомментария) Тогда
			ИдентификаторКомментария = ПараметрыОперации.Комментарий.Идентификатор;
			РегистрыСведений.Комментарии.Добавить(Ссылка, ИдентификаторКомментария, , ТекстКомментария, , Служебный, Общедоступный);
			
			Если ПараметрыОперации.Свойство("ПричинаИзмененияСтатуса") Тогда
				РегистрыСведений.ПричиныИзмененияСтатусаОбъектов.Добавить(Ссылка, Статус, ПараметрыОперации.ПричинаИзмененияСтатуса, ИдентификаторКомментария);
				ТребуетсяУведомлениеОбИзмененииСтатуса = ПараметрыОперации.НеобходимоОтправитьУведомление;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыОперации.Свойство("Трудозатраты") Тогда
			Трудозатраты = ПараметрыОперации.Трудозатраты;
			
			Если Трудозатраты.ЗатратыВремени > 0 И ЗначениеЗаполнено(Трудозатраты.ВидДеятельности) Тогда
				ДанныеЗаполнения = Документы.Трудозатраты.НовыеПараметрыЗаполненияТрудозатрат();
				ДанныеЗаполнения.Дата = ОбщегоНазначения.ТекущаяДатаСоСдвигом();
				ДанныеЗаполнения.Объект = Ссылка;
				ДанныеЗаполнения.Затрата = Трудозатраты.ЗатратыВремени;
				ДанныеЗаполнения.ВидДеятельности = Трудозатраты.ВидДеятельности;
				ДанныеЗаполнения.Пользователь = ПараметрыСеанса.ТекущийПользователь;
				ДанныеЗаполнения.Комментарий = Трудозатраты.Комментарий;
				ДанныеЗаполнения.Услуга = Трудозатраты.Услуга;
				ДанныеЗаполнения.Автор = ПараметрыСеанса.ТекущийПользователь;
				ДанныеЗаполнения.Направление = Направление;
				
				Документы.Трудозатраты.ДобавитьТрудозатраты(ДанныеЗаполнения);
			КонецЕсли;
		КонецЕсли;
		
		ДополнительныеСвойства.Удалить("ПроверкаИзмененияСтатусаПередЗаписью");
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Если ДанныеДоЗаписи.ЮридическоеЛицо <> ЮридическоеЛицо Тогда
		РегистрыСведений.ИсторияИзмененийЮрЛицОбъектов.ДобавитьЗапись(Ссылка, ЮридическоеЛицо, ТекущаяДата);
	КонецЕсли;
	
	// Запись в регистр сведений высшего родителя для текущего объекта
	Если ЭтоНовыйОбъект ИЛИ ИзменилосьОснование Тогда
		Если НЕ ЗначениеЗаполнено(ОбъектОснование) Тогда
			ОбъектОснование = Неопределено;
		КонецЕсли;
		
		РегистрыСведений.ОбъектыВерхнегоУровняСтруктурыПодчиненности.Добавить(Ссылка, ОбъектОснование);
		РегистрыСведений.СтруктураПодчиненности.Добавить(Ссылка, ОбъектОснование, ДанныеДоЗаписи.ОбъектОснование);
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ОбновитьДатыПоследнихИзменений") Тогда
		ОбщегоНазначения.ДобавитьДатыИзмененияДляПроекта(Ссылка);
		ДополнительныеСвойства.Удалить("ОбновитьДатыПоследнихИзменений");
	КонецЕсли;
	
	// Если это новый объект, то нужно добавить заказчика в заинтересованные лица и протянуть наблюдателей
	Если ЭтоНовыйОбъект Тогда
		УчастникиПроцессов.ДобавитьУчастниковИзОбъектаОснования(Ссылка);
		
		РегистрыСведений.ЗаинтересованныеЛица.ДобавитьЗапись(Ссылка, Заказчик, "Заказчик");
	КонецЕсли;
	
	Если ДанныеДоЗаписи.Статус <> Статус Тогда
		// Если является документом для элемента проекта и изменился статус, необходимо изменить статус элемента проекта
		РегистрыСведений.ПланыВыполненияПроектов.ИзменитьСтатусЭлементаПланаПроекта(Ссылка, Статус, ДатаЗакрытия, ПроцентВыполнения);
		
		// Если есть активный спринт, обновить статус в истории спринта
		Спринт = РегистрыСведений.СоставСпринтов.ПолучитьАктивныеСпринтыОбъекта(Ссылка);
		
		Если ЗначениеЗаполнено(Спринт) Тогда
			РегистрыСведений.ИсторияСоставаСпринтов.Добавить(Ссылка, Спринт, Статус);
		КонецЕсли;
	КонецЕсли;
	
	УчастникиПроцессов.ОбновитьУчастниковОбъекта(Ссылка, ДанныеДоЗаписи);
	
	ИнтеграцияДополнительныхПодсистем.ДобавитьИсключаемыеОбъекты(Ссылка, ОбъектОснование);
	
	УчетТрудозатрат.ПроверкаНеобходимостиПересчетаТрудозатрат(ЭтотОбъект, ЭтоНовыйОбъект, ДанныеДоЗаписи);
	
	Если ЗначениеЗаполнено(ОбъектОснование) И ОбъектОснование <> ДанныеДоЗаписи.ОбъектОснование Тогда
		ДополнительныеСвойства.Вставить("ЕстьИзмененияДляОбъектаОснования");
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ИзмениласьОценкаТрудозатрат") Тогда			
		УчетТрудозатрат.ЗаписатьПлановыеТрудозатраты(Ссылка, ДополнительныеСвойства.ОценкаТрудозатрат);
	КонецЕсли;
	
	Если ЭтоНовыйОбъект ИЛИ ИзменилсяСтатус ИЛИ ИзменилсяФилиал Тогда
		РегистрыСведений.ОчередьСобытийНаОбработку.ДобавитьЗаданиеОбработатьОбъектЭтапаКанбана(Ссылка);
	КонецЕсли;
	
	// Если изменился вид родительского проекта, нужно обновить его и у подчиненных объектов
	Если НЕ ЭтоНовыйОбъект И (ВидРодительскогоПроекта <> ДанныеДоЗаписи.ВидРодительскогоПроекта) Тогда 
		РегистрыСведений.ОчередьСобытийНаОбработку.ДобавитьЗаданиеОбновитьВидРодительскогоПроекта(Ссылка, ВидРодительскогоПроекта);
	КонецЕсли;
	
	// Если изменили основание объекта, то нужно перебросить общие фактические трудозатраты со старого основания на новое
	Если НЕ ЭтоНовыйОбъект И (ОбъектОснование <> ДанныеДоЗаписи.ОбъектОснование) Тогда
		УчетТрудозатрат.ОбработатьТрудозатратыПриИзмененииОснованияОбъекта(Ссылка, ОбъектОснование, ДанныеДоЗаписи.ОбъектОснование);
	КонецЕсли;
	
	Если НЕ Отказ И (ОписаниеИзменилось ИЛИ ЭтоНовыйОбъект) Тогда    
		РедакторОписания.ДополнительноОбработатьОписание(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Справочники.СерьезностьОшибок.ПриКопированииОбъекта(СерьезностьОшибки, Назначение);

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипЗначенияДанных = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипЗначенияДанных = Тип("СправочникСсылка.Проекты") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения,
			"Автор, ВидПроекта, ВидПроцесса, Направление, ЮридическоеЛицо");
		
		Проект = ДанныеЗаполнения;
		ОбъектОснование = ДанныеЗаполнения;
		Заказчик = ЗначенияРеквизитов.Автор;
		ВидРодительскогоПроекта = ЗначенияРеквизитов.ВидПроекта;
		ВидПроцесса = ЗначенияРеквизитов.ВидПроцесса;
		Направление = ЗначенияРеквизитов.Направление;
		ЮридическоеЛицо = ЗначенияРеквизитов.ЮридическоеЛицо;
		
	ИначеЕсли ТипЗначенияДанных = Тип("ДокументСсылка.ВнутреннееЗадание") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения,
			"Проект, Направление, Автор, ВидРодительскогоПроекта, Наименование, Назначение,
			|СерьезностьОшибки, ВидПроцесса, ЮридическоеЛицо");
		
		ОбъектОснование = ДанныеЗаполнения;
		Проект = ЗначенияРеквизитов.Проект;
		Направление = ЗначенияРеквизитов.Направление;
		Заказчик = ЗначенияРеквизитов.Автор;
		ВидРодительскогоПроекта = ЗначенияРеквизитов.ВидРодительскогоПроекта;
		Наименование = ЗначенияРеквизитов.Наименование;
		Назначение = ЗначенияРеквизитов.Назначение;
		СерьезностьОшибки = ЗначенияРеквизитов.СерьезностьОшибки;
		ВидПроцесса = ЗначенияРеквизитов.ВидПроцесса;
		ЮридическоеЛицо = ЗначенияРеквизитов.ЮридическоеЛицо;
		
	ИначеЕсли ТипЗначенияДанных = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	УстановитьЗначенияИзНастроекЗаполненияПользователя();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьИзменениеСтатуса()
		
	// Хранит имена реквизитов, которые необходимо заполнить текущей датой
	ЗаполняемыеРеквизиты = Новый Массив;
	
	НеобработанныйСтатус = Ложь;
	ТекущаяДата = ТекущаяДатаСеанса();
	Статусы = Справочники.СтатусыОбъектов;

	Если Статус = Статусы.ВРаботе Тогда
		ЗаполняемыеРеквизиты.Добавить("ДатаНачалаРазработки");
		
	ИначеЕсли Статус = Статусы.Тестирование Тогда
		ЗаполняемыеРеквизиты.Добавить("ДатаПоследнегоТестирования");
		
	ИначеЕсли Статус = Статусы.Решен Тогда
		ЗаполняемыеРеквизиты.Добавить("ДатаНачалаРазработки");
		ЗаполняемыеРеквизиты.Добавить("ДатаПоследнегоТестирования");
		ЗаполняемыеРеквизиты.Добавить("ДатаЗакрытия");
		
		ПроцентВыполнения = 100;
		
	ИначеЕсли Статус = Статусы.Отклонен Тогда
		ЗаполняемыеРеквизиты.Добавить("ДатаЗакрытия");
	КонецЕсли;
	
	// Если дата, соответствующая статусу, не заполнена, она заполняется текущей датой.
	// При переводе в статус "Тестирование" дата последнего тестирования обновляется всегда.
	Для Каждого ИмяРеквизита Из ЗаполняемыеРеквизиты Цикл
		Если ЗначениеЗаполнено(ИмяРеквизита)
			И (НЕ ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]) ИЛИ Статус = Статусы.Тестирование) Тогда
			
			ЭтотОбъект[ИмяРеквизита] = ТекущаяДата;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Назначена) Тогда
		Назначена = Документы.ВнутреннееЗадание.ПолучитьНазначеного(Статус, Ссылка,	Направление, Заказчик, Назначена); 
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначенияИзНастроекЗаполненияПользователя()

	ВидыНастроек = ПланыВидовХарактеристик.ВидыНастроекПользователя;
	НастройкиАвтозаполнения = РаботаСНастройками.ПолучитьНастройкиАвтозаполнения(ВидыНастроек.ЗаполнениеВнутреннегоЗадания);
	
	Если НЕ ЗначениеЗаполнено(Направление) Тогда
		Направление = НастройкиАвтозаполнения[ВидыНастроек.НаправлениеДляЗаполненияВЗ];
	КонецЕсли;
	
	Если Направление = НастройкиАвтозаполнения[ВидыНастроек.НаправлениеДляЗаполненияВЗ] Тогда
		
		Если РегистрыСведений.ИспользованиеЮридическихЛицНаправлений.Использует(Направление) Тогда
			ЮридическоеЛицо = НастройкиАвтозаполнения[ВидыНастроек.ЮрЛицоДляЗаполненияВЗ];
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВидПроцесса) 
			И Справочники.НаправленияРазработки.ИспользуетВидыПроцессов(Направление) Тогда
			ВидПроцесса = НастройкиАвтозаполнения[ВидыНастроек.ВидПроцессаДляЗаполненияВЗ];
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Назначение)Тогда
		Назначение = НастройкиАвтозаполнения[ВидыНастроек.НазначениеДляЗаполненияВЗ];
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Продукт) Тогда
		Продукт = НастройкиАвтозаполнения[ВидыНастроек.ПродуктДляЗаполненияВЗ];
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Назначена) Тогда
		Назначена = НастройкиАвтозаполнения[ВидыНастроек.НазначенаДляЗаполненияВЗ];
		
		Если НЕ Назначена.Пустая() Тогда
			Филиал = ОбщегоНазначенияВызовСервера.ФилиалПользователя(Назначена);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
