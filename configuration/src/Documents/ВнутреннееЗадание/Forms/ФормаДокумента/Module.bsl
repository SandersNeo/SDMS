///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

// Хранит список реквизитов, которые должны сохраняться при автосохранении
&НаКлиенте
Перем АвтосохраняемыеРеквизиты Экспорт;

// Структура дополнительных свойств формы
&НаКлиенте
Перем ДополнительныеСвойства Экспорт;

// Хранит признак неопубликованного комментария
&НаКлиенте
Перем ЕстьНеопубликованныйКомментарий Экспорт;

// Уникальный идентификатор формы без символа "-"
&НаКлиенте
Перем ИдентификаторФормы Экспорт;

// Признак изменения плана проекта
&НаКлиенте
Перем ИзмененПланПроекта Экспорт;

// Хранит имя последней нажатой кнопки панели навигации
&НаКлиенте
Перем ИмяАктивнойКнопкиПанелиНавигации Экспорт;

// Для исключения ошибки "Cannot read property of undefined"
// (при записи основной формы в веб клиенте "протухают" подчиненные формы в массиве форм основного окна)
&НаКлиенте
Перем ИскатьПодчиненныеФормы Экспорт;

&НаКлиенте
Перем ЕстьИзмененныеПоказателейПриоритета Экспорт;

// Хранит дополнительные данные на время жизни формы, чтобы избежать многократных
// повторных обращений к серверу.
&НаКлиенте
Перем КэшВспомогательныхДанных;

// Хранит значение предыдущей открытой страницы
&НаКлиенте
Перем ПредыдущаяОткрытаяВкладка;

// Хранит положение курсора в текстовом документе для описания
&НаКлиенте
Перем ТекущееПоложениеКурсора Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПричинаИзмененияСтатуса = ОбщегоНазначения.ПолучитьПричинуИзмененияСтатуса(Объект.Ссылка, ТекущийОбъект.Статус);
	Элементы.ПричинаИзмененияСтатуса.Видимость = ЗначениеЗаполнено(ПричинаИзмененияСтатуса);
	ВладелецПродукта = ПолучитьВладельцаПродукта(ТекущийОбъект.Продукт);
	ОбновитьВидимостьВладельцаПродукта(Элементы.ВладелецПродукта, Объект.Продукт);
	Параметры.Свойство("ИмяОткрываемойСтраницы", ИмяОткрываемойСтраницы);
	
	ПланТрудозатрат = УчетТрудозатрат.ПолучитьПлановыеТрудозатраты(Объект.Ссылка); 
	
	РедакторОписания.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	Если ЗначениеЗаполнено(Объект.Статус) И ИндексКартинкиСтатуса <> 0 Тогда
		// Если индекс картинки = 0, это значит что это первые открытие, все вычислиться при создании на сервере
		// здесь должно отрабатывать только при повторном чтении задачи
		НовыйИндексКартинкиСтатуса = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущийОбъект.Статус, "ИндексКартинки");
		
		Если НовыйИндексКартинкиСтатуса <> ИндексКартинкиСтатуса Тогда 
			ЗаполнитьДоступныеСтатусы();                                   
		КонецЕсли;
	КонецЕсли;
	
	Спринт = РегистрыСведений.СоставСпринтов.ПолучитьТекущийСпринтОбъекта(ТекущийОбъект.Ссылка);
	СпринтИсходный = Спринт;
		
	Если ЗначениеЗаполнено(НовыйСтатус) И НовыйСтатус <> Объект.Статус Тогда
		НовыйСтатус = Объект.Статус; 
		ИндексКартинкиСтатуса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовыйСтатус, "ИндексКартинки");
		СтатусПредставление = Строка(НовыйСтатус);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
		
	// Проверим, что если основание - проект, что его статус корректен, для
	// создания подчиненных.
	Результат = ОбщегоНазначенияВызовСервера.ПроверитьСтатусПроектаНаСервере(Параметры.Основание, Отказ);
	Если НЕ Результат.РазрешеноСоздавать Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Специалист") Тогда
		Объект.Назначена = Параметры.Специалист;
	КонецЕсли;
	
	Параметры.Свойство("ОткрытьКомментарии", ОткрытьКомментарии);
	
	ЭтоНовый = Параметры.Ключ.Пустая();
	
	Если ЭтоНовый Тогда
		// Заполнить наименование если задача для автотеста
		Если Параметры.Свойство("НаименованиеОснования")  Тогда
			Объект.Наименование = Параметры.НаименованиеОснования;
		КонецЕсли;
		
		ОбщегоНазначения.ЗаполнитьОбъектПервоначальнымиДанными(Объект); 
		
		// Проверка уровней вложенности друг в друга.
		РезультатПроверки = ОбщегоНазначения.УровеньВложенностиПревышен(ТипЗнч(Объект.Ссылка), Объект.ОбъектОснование);
		Если РезультатПроверки.УровеньПревышен Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение);
			Возврат;
		КонецЕсли;
		
		Объект.Заказчик = Объект.Автор;
		Объект.ПлановоеНачало = ТекущаяДатаСеанса();
		Объект.ПроцентВыполнения = 0;
		
		// Если внутреннее задание создается от ошибочно созданной заявки на разработку
		Если Параметры.Свойство("ДанныеИзЗаявки") Тогда
			ДанныеЗаявки = Параметры.ДанныеИзЗаявки;
			ЗаполнитьЗначенияСвойств(Объект, ДанныеЗаявки);
			
			Если ЗначениеЗаполнено(ДанныеЗаявки.Назначение) Тогда
				Объект.Назначение = ДанныеЗаявки.Назначение;
			Иначе
				Объект.Назначение = Справочники.НазначенияЗадач.НоваяЗадача;
			КонецЕсли;
		КонецЕсли;
		
		Параметры.Свойство("ПрикрепитьКПлануПроекта", СозданоИзПлана);
		
		СсылкаНаОбъектДляАвтосохранения = АвтосохраненияДанных.ПолучитьСсылкуНовогоОбъекта(Объект.Ссылка);
	Иначе
		Трудозатраты = РегистрыСведений.Трудозатраты.СформироватьДанныеДляФормы(Объект.Ссылка, Истина);
		ФактическиеЗатратыВремени = Трудозатраты.КоличествоЧасов;
		
		СсылкаНаОбъектДляАвтосохранения = Объект.Ссылка;
		ВладелецПродукта = ПолучитьВладельцаПродукта(Объект.Продукт);
	КонецЕсли;
	
	УстановитьДоступныеНаправления();
	ЗаполнитьРольПользователяПоНаправлению();
		
	ОбновитьВидимостьВидаПроцесса();
		
	ЕстьПодчиненные = РегистрыСведений.СтруктураПодчиненности.ЕстьПодчиненные(Объект.Ссылка);
	ОбновитьДоступностьВидаПроцесса(Элементы.ВидПроцесса, Объект.ВидПроцесса, Объект.ОбъектОснование, ЕстьПодчиненные);
	
	// Создание элементов формы для отображения трудозатрат и получение трудозатрат по объекту
	УчетТрудозатрат.КонструкторИнтерфейсаУправленияТрудозатратами(ЭтотОбъект, Элементы.СтраницыДокумента);
	УчетТрудозатрат.ЗаполнитьТрудозатраты(ЭтотОбъект, ЭтоНовый);
	
	ИнтерфейсПриложения.СформироватьЗаголовокОкнаОбъекта(Объект.ВидРодительскогоПроекта, Заголовок);
		
	РаботаСТегами.Заполнить(ЭтотОбъект, Элементы.ГруппаСтраницаСвойстваШапка.ЦветФона);
	
	Если Элементы.ПроцентВыполнения.СписокВыбора.НайтиПоЗначению(Объект.ПроцентВыполнения) = Неопределено Тогда
		ДополнитьСписокВыбораПроцента();
	КонецЕсли;
	
	ПараметрыАвтосохранения = АвтосохраненияДанных.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Программное создание элементов формы для редактирования описания
	РедакторОписания.ПриСозданииНаСервере(ЭтотОбъект, Элементы.СтраницаОписание, , ПараметрыАвтосохранения);
	
	ПанельНавигации.Создать(ЭтотОбъект);
	
	ОбщегоНазначения.ЗаполнитьСписокНазначений(Элементы.Назначение.СписокВыбора);
	ОбщегоНазначения.ЗаполнитьСписокСерьезностьОшибки(Элементы.СерьезностьОшибки.СписокВыбора);
	ОбщегоНазначения.УстановитьВидимостьСерьезности(Элементы.СерьезностьОшибки, Объект.Назначение);

	Если ЭтоНовый Тогда
		
		Если ЗначениеЗаполнено(Объект.Назначение) И Элементы.Назначение.СписокВыбора.НайтиПоЗначению(Объект.Назначение) = Неопределено Тогда
			Объект.Назначение = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьСвойстваЮридическогоЛица(НЕ ЭтоНовый);
	
	НастроитьПолеСпринта();
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// Чтобы клиент не обращался часто к серверу за небольшими порциями данных,
	// получим их все сразу за один вызов.
	КэшВспомогательныхДанных = ПолучитьВспомогательныеДанные(Объект.ОбъектОснование, Объект.Ссылка, ЗагруженоАвтосохранение);
	
	АвтосохраненияДанныхКлиент.ПриОткрытии(ЭтотОбъект, КэшВспомогательныхДанных);
		
	// Инициализация хранилища дополнительных свойств формы
	ОбщегоНазначенияКлиент.ИнициализироватьДополнительныеСвойстваФормы(ДополнительныеСвойства);
	
	// Трудозатраты
	ОбщегоНазначенияКлиент.ДобавитьДополнительноеСвойствоФормы("АктивнаяСтраницаПанели", ДополнительныеСвойства, Элементы.СтраницаСвойства);
	// Конец Трудозатраты
	
	// Устанавливаем текущую вкладку предыдущей иначе возникнет ошибка, если сразу открыть комментарии
	ПредыдущаяОткрытаяВкладка = Элементы.СтраницыДокумента.ТекущаяСтраница;
	
	// Нужен для работы с программно-сформированными элементами формы
	ИдентификаторФормы = ОбщегоНазначенияКлиентСервер.СтрУникальныйИдентификатор(УникальныйИдентификатор);
			
	Если ОткрытьКомментарии Тогда
		ПодключитьОбработчикОжидания("ОткрытьНовыеКомментарии", 0.2, Истина);	
	КонецЕсли;
	
	Если СтрДлина(СтатусПредставление) > 16 Тогда
		Элементы.НадписьСтатус.Высота = 2;
		Элементы.НадписьСтатус.РастягиватьПоВертикали = Истина;
	КонецЕсли;
	
	ПанельНавигацииКлиент.ПриОткрытии(Элементы);
	
	Если ЗначениеЗаполнено(ИмяОткрываемойСтраницы) Тогда                 
		ПодключитьОбработчикОжидания("ОткрытьСтраницуПанелиНавигации", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	ПанельНавигацииКлиент.ПриПовторномОткрытии(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ИзмененПланПроекта Тогда
		Отказ = Истина;
		ПланПроектаКлиент.ЗадатьВопросОНеСохраненномПланеПроекта(ЭтотОбъект, ПараметрыЗаписи);
		Возврат;
	КонецЕсли;
	
	РедакторОписанияКлиент.ПередЗаписью(ЭтотОбъект, ПараметрыЗаписи, Отказ, Элементы.СтраницаОписание);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыЗаписи.Свойство("ПроверкаИзмененияСтатусаПередЗаписью") Тогда
		ПроверкаИзмененияСтатусаПередЗаписью(Отказ, ПараметрыЗаписи);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Назначена)
		И НЕ ПараметрыЗаписи.Свойство("ПроверкаОтсутствияНазначенного") Тогда
		
		ПроверкаОтсутствияНазначенногоПередЗаписью(Отказ, ПараметрыЗаписи);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьНеопубликованныйКомментарий Тогда
		ОбщегоНазначенияКлиент.ЗадатьВопросОНеопубликованномКомментарии(ЭтотОбъект, ПараметрыЗаписи);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
		
	Если Элементы.ВидПроцесса.Видимость И НЕ ЗначениеЗаполнено(Объект.ВидПроцесса) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан вид процесса",
			Объект.Ссылка, "ВидПроцесса", "Объект.ВидПроцесса", Отказ);
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("УИДЗамера", ИнтеграцияДополнительныхПодсистемКлиент.НачатьЗамерВремени(Ложь, 
		"Документ.ВнутреннееЗадание.Запись"));
	
	Если Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
		ПараметрыЗаписи.Вставить("ОбновитьДатыПоследнихИзменений");
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ОбработчикАвтосохраненияЗапущен", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	ТекущийОбъект.ДополнительныеСвойства.Вставить("НовыйСтатус", НовыйСтатус);
	
	Если ПараметрыЗаписи.Свойство("ПроверкаИзмененияСтатусаПередЗаписью") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ПроверкаИзмененияСтатусаПередЗаписью", ПараметрыЗаписи);
	КонецЕсли;
	
	// Указываем системе, что нужно дополнительно обработать изменение объекта
	Если ПараметрыЗаписи.Свойство("ОбновитьДатыПоследнихИзменений") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОбновитьДатыПоследнихИзменений");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		ТекущийОбъект.УстановитьСсылкуНового(Документы.ВнутреннееЗадание.ПолучитьСсылку());
		СсылкаНаОбъект = ТекущийОбъект.ПолучитьСсылкуНового();
	Иначе
		СсылкаНаОбъект = ТекущийОбъект.Ссылка;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Комментарий") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Комментарий", ПараметрыЗаписи.Комментарий);
	КонецЕсли;
	
	РедакторОписания.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, СсылкаНаОбъект);
		
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОценкаТрудозатрат", ПланТрудозатрат);
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НовыйСтатус <> Справочники.СтатусыОбъектов.Новый 
		И НовыйСтатус <> Справочники.СтатусыОбъектов.Приостановлен
		И НЕ ЗначениеЗаполнено(Объект.Филиал) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Филиал"" не заполнено.", , "Объект.Филиал", , Отказ);
	КонецЕсли;
	
	Если Объект.Назначение = Справочники.НазначенияЗадач.Ошибка 
		И НЕ ЗначениеЗаполнено(Объект.СерьезностьОшибки) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Серьезность ошибки"" не заполнено", , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если СпринтИсходный <> Спринт Тогда 
		РегистрыСведений.ПланируемыеТрудозатратыПоСпринтам.Удалить(ТекущийОбъект.Ссылка, СпринтИсходный);
		РегистрыСведений.СоставСпринтов.ОбновитьСпринтОбъекта(ТекущийОбъект.Ссылка, Спринт);
		СпринтИсходный = Спринт;
	КонецЕсли;
	
	ЭтоНовый = Параметры.Ключ.Пустая();
	
	Если ЭтоНовый Тогда
		РаботаСТегамиВызовСервера.Обработать(СписокТегов, ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЕстьИзмененияДляОбъектаОснования") Тогда
		ПараметрыЗаписи.Вставить("ЕстьИзмененияДляОбъектаОснования");
	КонецЕсли;
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ИзмениласьОценкаТрудозатрат") Тогда
		ПараметрыЗаписи.Вставить("ИзмениласьОценкаТрудозатрат");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи) 
	
	// Добавление текстов описания в регистр сведений для индексирования
	// полнотекстовым поиском.
	ИдентификаторФормы = СтрЗаменить(ЭтотОбъект.УникальныйИдентификатор, "-", "");
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЗаписатьИзмененияСвойствЗадачи") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Удалить("ЗаписатьИзмененияСвойствЗадачи");
	КонецЕсли;
	
	Элементы.ГруппаСоздатьНаОснованиПолучитьСсылку.Видимость = Истина;
		
	ЗаполнитьДоступныеСтатусы();
			
	ПанельНавигации.ОбновитьДоступность(ЭтотОбъект);
	
	// Формирование заголовка окна
	ИнтерфейсПриложения.СформироватьЗаголовокОкнаОбъекта(Объект.ВидРодительскогоПроекта, Заголовок);
	
	Если ПараметрыЗаписи.ОбработчикАвтосохраненияЗапущен Тогда
		РегистрыСведений.АвтосохраненныеОписания.УдалитьЗаписиПоОбъекту(СсылкаНаОбъектДляАвтосохранения);
		СсылкаНаОбъектДляАвтосохранения = ТекущийОбъект.Ссылка;
	КонецЕсли;	
		
	РедакторОписания.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИскатьПодчиненныеФормы = Ложь;
	
	Оповестить(СобытияОповещенияКлиент.ИмяСобытияОбновлениеСписковИнструментов());
	
	Если ПараметрыЗаписи.Свойство("ЕстьИзмененияДляОбъектаОснования") И ЗначениеЗаполнено(Объект.ОбъектОснование) Тогда
		Оповестить(СобытияОповещенияКлиент.ИмяСобытияОбновленияКоличестваПодчиненныхОбъектов(), Объект.ОбъектОснование); 
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ИзмениласьОценкаТрудозатрат") Тогда
		Оповестить("Документ.ВнутреннееЗадание.ИзмениласьОценкаТрудозатрат", , Объект.Ссылка);
	КонецЕсли;
	
	Если СозданоИзПлана Тогда
		ДокументПредставление = СтрШаблон("%1. %2", Объект.Номер, Объект.Наименование);
		СтруктураДляПлана = Новый Структура("Ссылка, ДокументПредставление, Статус, СтатусПредставление, Ответственный", 
			Объект.Ссылка, ДокументПредставление, Объект.Статус, Строка(Объект.Статус), Объект.Автор);
		
		Оповестить("ПрикрепитьКПлануПроекта", СтруктураДляПлана, Объект.Ссылка);
		СозданоИзПлана = Ложь;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЗакрытьПослеЗаписи") Тогда
		Закрыть();
	КонецЕсли;
		
	Если ПараметрыЗаписи.ОбработчикАвтосохраненияЗапущен Тогда
		АвтосохраненияДанныхКлиент.ВыключитьАвтосохранениеОписания(ЭтотОбъект, КэшВспомогательныхДанных);
		ДатаПоследнегоАвтосохранения = Дата(1, 1, 1);
	КонецЕсли; 
	
	РедакторОписанияКлиент.ПослеЗаписи(ЭтотОбъект);
	
	ИнтеграцияДополнительныхПодсистемКлиент.ЗавершитьЗамерВремени(ПараметрыЗаписи.УИДЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗавершениеРаботы Тогда
		Если ЕстьНеопубликованныйКомментарий Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиент.ЗадатьВопросОНеопубликованномКомментарии(ЭтотОбъект);
		КонецЕсли;
		
		Если ЕстьИзмененныеПоказателейПриоритета Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиент.ЗадатьВопросОНеСохранныхПоказателяхПриоритета(ЭтотОбъект);
		КонецЕсли;
		
		Если ИзмененПланПроекта Тогда
			Отказ = Истина;
			ПланПроектаКлиент.ЗадатьВопросОНеСохраненномПланеПроекта(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы И ЗначениеЗаполнено(ДатаПоследнегоАвтосохранения) Тогда
		АвтосохраненияДанныхВызовСервера.УдалитьАвтосохраненноеОписание(СсылкаНаОбъектДляАвтосохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если СобытияОповещенияКлиент.СобытиеДобавленияТрудозатратПоОбъекту(ИмяСобытия, Объект.Ссылка, Параметр) Тогда
		УчетТрудозатратКлиент.ОбновитьОбщиеФактическиеТрудозатраты(ЭтотОбъект);		
	ИначеЕсли СобытияОповещенияКлиент.СобытиеОбновленияКоличестваПодчиненныхОбъектов(ИмяСобытия, Объект.Ссылка, Параметр) Тогда
		// Если произошло оповещение от подчиненного, то подчиненные точно есть, поэтому передаем флаг истина.
		ОбновитьДоступностьВидаПроцесса(Элементы.ВидПроцесса, Объект.ВидПроцесса, Объект.ОбъектОснование, Истина);
	КонецЕсли;
	
	ПанельНавигацииКлиент.ОбработкаОповещения(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);	
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АвторНажатие(Элемент, СтандартнаяОбработка)
	
	ИнтерфейсПриложенияКлиент.ОткрытьИнформациюОПользователе(ЭтотОбъект, Объект.Автор, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПродуктаНажатие(Элемент, СтандартнаяОбработка)
	
	ИнтерфейсПриложенияКлиент.ОткрытьИнформациюОПользователе(ЭтотОбъект, ВладелецПродукта, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияКлиент.КопироватьТекстВБуферОбмена(Объект.Дата, "Дата создания скопирована в буфер обмена");
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВводПлановыхТрудозатратДляСпринта()  
	
	ЗаполненСпринт = ЗначениеЗаполнено(Спринт);
	Элементы.ГруппаОценкаТрудозатратНадпись.Видимость = ЗаполненСпринт;
	Элементы.ГруппаОценкаТрудозатрат.Видимость = НЕ ЗаполненСпринт;
	
	Если НЕ ЗаполненСпринт Тогда
		ПлановоеВремя = РегистрыСведений.ПланируемыеТрудозатратыПоСпринтам.ПолучитьПодсказкуПлановогоВремени(Объект.Ссылка);
		Подсказка = ПлановоеВремя.Подсказка;
		Элементы.ОценкаТрудозатрат.Подсказка = Подсказка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикОткрытие(Элемент, СтандартнаяОбработка)
	
	ИнтерфейсПриложенияКлиент.ОткрытьИнформациюОПользователе(ЭтотОбъект, Объект.Заказчик, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначенаОткрытие(Элемент, СтандартнаяОбработка)
	
	ИнтерфейсПриложенияКлиент.ОткрытьИнформациюОПользователе(ЭтотОбъект, Объект.Назначена, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначенаПриИзменении(Элемент)
		
	Объект.Филиал = ОбщегоНазначенияВызовСервера.ФилиалПользователя(Объект.Назначена);
			
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПриИзменении(Элемент)
		
	ОбщегоНазначенияКлиент.УстановитьСерьезность(Элементы.СерьезностьОшибки, Объект.СерьезностьОшибки, Объект.Назначение);
			
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеРазработкиПриИзменении(Элемент)
	
	НаправлениеРазработкиПриИзмененииНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура НомерНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияКлиент.КопироватьТекстВБуферОбмена(Объект.Номер, "Номер скопирован в буфер обмена");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	СписокТипов = Новый СписокЗначений;	
	СписокТипов.Добавить("Проект", "Проект");
	СписокТипов.Добавить("ВнутреннееЗадание", "Внутреннее задание");
	
	Если ТипЗнч(Объект.ОбъектОснование) = Тип("Неопределено") Тогда
		АктивныйЭлемент = Неопределено;
	Иначе
		ТипОбъектаОснования = СтрЗаменить(ТРег(ТипЗнч(Объект.ОбъектОснование)), " ", "");
		АктивныйЭлемент = СписокТипов.НайтиПоЗначению(ТипОбъектаОснования);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборТипаОбъектаОснования", ЭтотОбъект);
	СписокТипов.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выбор типа данных", АктивныйЭлемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектОснованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ОбъектОснование) Тогда
		ОбработатьВыборОбъектаОснования(Объект.ОбъектОснование, Неопределено);
	Иначе
		ЕстьПодчиненные = ОбщегоНазначенияВызовСервера.ЕстьПодчиненные(Объект.Ссылка);
		ОбновитьДоступностьВидаПроцесса(Элементы.ВидПроцесса, Объект.ВидПроцесса, Объект.ОбъектОснование, ЕстьПодчиненные);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНажатииОценкаТрудрозатрат(Элемент, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;                    
	УчетТрудозатратКлиент.ОткрытьФормуПлановогоВремениПоСпринтам(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродуктПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Продукт) Тогда
		ВладелецПродукта = ПолучитьВладельцаПродукта(Объект.Продукт);
	Иначе 
		ВладелецПродукта = Неопределено;
	КонецЕсли;
	
	ОбновитьВидимостьВладельцаПродукта(Элементы.ВладелецПродукта, Объект.Продукт);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентВыполненияПриИзменении(Элемент)
		
	Если Объект.ПроцентВыполнения = 100 Тогда
		ТекущаяДата = ПолучитьТекущуюДатуСеанса();
		СвойстваСтатуса = КэшВспомогательныхДанных.Статусы["Решен"];
		
		Объект.ДатаЗакрытия = ТекущаяДата;
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаПоследнегоТестирования) Тогда
			Объект.ДатаПоследнегоТестирования = ТекущаяДата;
		КонецЕсли;
	Иначе
		СвойстваСтатуса = КэшВспомогательныхДанных.Статусы["Тестирование"];
		
		Если Объект.Статус <> СвойстваСтатуса.Ссылка Тогда
			СвойстваСтатуса = КэшВспомогательныхДанных.Статусы["ВРаботе"];
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПредставлениеСтатуса(СвойстваСтатуса);
	
КонецПроцедуры

&НаКлиенте
Процедура СерьезностьОшибкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // По умолчанию защита от Ctrl + Shift + F4

КонецПроцедуры

&НаКлиенте
Процедура СерьезностьОшибкиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // По умолчанию защита от Shift + F4 
	
КонецПроцедуры

&НаКлиенте
Процедура СпринтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	       
	
	ВыбранныеСпринты = Новый СписокЗначений;
	ВыбранныеСпринты.Добавить(Спринт);
	
	ПараметрыОткрытия = Новый Структура;	
	ПараметрыОткрытия.Вставить("РежимВыбораОдного", Истина); 
	ПараметрыОткрытия.Вставить("ВидСпринта", ПредопределенноеЗначение("Перечисление.ВидыСпринта.ВнутреннееЗадание")); 
	ПараметрыОткрытия.Вставить("Филиал", Объект.Филиал); 
	ПараметрыОткрытия.Вставить("ВыбранныеСпринты", ВыбранныеСпринты); 
	
	УчетТрудозатратКлиент.ОткрытьФормуВыбораСпринта(ЭтотОбъект, ПараметрыОткрытия);	
	
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьВнутреннегоЗаданияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяКоманды = СобытияОповещенияКлиент.ИмяСобытияНажатиеСтоимостьВнутреннегоЗадания();
	УчетТрудозатратКлиент.ОбработатьКомандуИнтерфейсаУправленияТрудозатратами(ЭтотОбъект, ИмяКоманды);
	
КонецПроцедуры

// Стандартное событие возникающее при переключении с одной страницы на другую
//
// Параметры:
//  Элемент			 - ГруппаФормы - Страницы формы
//  ТекущаяСтраница	 - ГруппаФормы - Текущая страница формы 
//
&НаКлиенте
Процедура СтраницыДокументаПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	
	РедакторОписанияКлиент.ПриСменеСтраницы(ЭтотОбъект, ПредыдущаяОткрытаяВкладка, Элементы.СтраницаОписание);
	УчетТрудозатратКлиент.ПриПереключенииСтраницПанели(ЭтотОбъект, Элементы.СтраницыДокумента, ДополнительныеСвойства);
	
	ПредыдущаяОткрытаяВкладка = Элементы.СтраницыДокумента.ТекущаяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура ТегиHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РаботаСТегамиКлиент.ПриНажатии(ЭтотОбъект, ДанныеСобытия.Href);
		
КонецПроцедуры

&НаКлиенте
Процедура ФилиалПриИзменении(Элемент)
	
	НастроитьПолеСпринта(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическоеЛицоОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// Учет трудозатрат

&НаКлиенте
Процедура ДобавитьФактическиеТрудозатраты(Команда)
	
	УчетТрудозатратКлиент.ОбработатьКомандуИнтерфейсаУправленияТрудозатратами(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоФактическимТрудозатратам(Команда)

	УчетТрудозатратКлиент.ОбработатьКомандуИнтерфейсаУправленияТрудозатратами(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокФактическихТрудозатрат(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ШаблонИмениКнопкиСтраницы = ПанельНавигацииКлиентСервер.ШаблонИмениКнопкиСтраницы();	
		ИмяКоманды = СтрШаблон(ШаблонИмениКнопкиСтраницы, Элементы["УправленияТрудозатратами_ОсновнаяСтраница"].Имя);
		
		ЭтоКомандаПодменю = НЕ Элементы[ИмяКоманды].Видимость;
		ПанельНавигацииКлиент.Нажатие(ЭтотОбъект, Новый Структура("Имя", ИмяКоманды), , ЭтоКомандаПодменю);		
	Иначе
		Элементы.СтраницыДокумента.ТекущаяСтраница = Элементы["УправленияТрудозатратами_ОсновнаяСтраница"];
		СтраницыДокументаПриСменеСтраницы(Элементы.СтраницыДокумента, Элементы.СтраницыДокумента.ТекущаяСтраница); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыНажатие(Элемент, СтандартнаяОбработка)
		
	УчетТрудозатратКлиент.ПереключитьНаВкладкуТрудозатрат(СтандартнаяОбработка, ЭтотОбъект, Элемент.Имя);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура ЗаписатьЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура("ЗакрытьПослеЗаписи", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьВБуфер(Команда)
				
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиент.КопироватьНавигационнуюСсылкуВБуферОбмена(Объект.Ссылка);
	Иначе
		ПоказатьПредупреждение(, "Данные еще не записаны. Копирование ссылки возможно только после записи данных.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьНаЗаказчика(Команда)
	
	ЗаполнитьИсполнителя(Объект.Заказчик);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьНаМеня(Команда)
	
	ЗаполнитьИсполнителя(КэшВспомогательныхДанных.ТекущийПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДатуПлановогоОкончания(Команда)
	
	Результат = ПланПроектаВызовСервера.ПолучитьПлановуюДатуОкончания(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
		Сообщить(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Объект.ИсполнитьДо = Результат.ДатаОкончания_План;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПроцентВыполнения(Команда)
	
	Результат = ПланПроектаВызовСервера.ПолучитьПроцентВыполнения(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
		Сообщить(Результат.ТекстОшибки);
	Иначе
		Если Элементы.ПроцентВыполнения.СписокВыбора.НайтиПоЗначению(Результат.ПроцентВыполнения) = Неопределено Тогда
			ЗначениеЭлемента = 0;
			ИндексЭлемента = 0;
			
			Пока ЗначениеЭлемента < Результат.ПроцентВыполнения Цикл
				ЗначениеЭлемента = Элементы.ПроцентВыполнения.СписокВыбора[ИндексЭлемента].Значение;
				ИндексЭлемента = ИндексЭлемента + 1;
			КонецЦикла;
			
			ПредставлениеПроцента = СтрШаблон("%1%%", Строка(Результат.ПроцентВыполнения));
			Элементы.ПроцентВыполнения.СписокВыбора.Вставить(ИндексЭлемента - 1, Результат.ПроцентВыполнения, ПредставлениеПроцента);
		КонецЕсли;
		
		Если Объект.ПроцентВыполнения <> Результат.ПроцентВыполнения Тогда
			Объект.ПроцентВыполнения = Результат.ПроцентВыполнения;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВариантыСсылок(Команда)
		
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ИнтерфейсПриложенияКлиент.ОткрытьОкноНавигационнойСсылки(Объект.Ссылка, ЭтотОбъект, УникальныйИдентификатор);
	Иначе
		ПоказатьПредупреждение(, "Данные еще не записаны. Копирование ссылки возможно только после записи данных.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельНавигацииНажатие(Команда)
	
	ПанельНавигацииКлиент.Нажатие(ЭтотОбъект, Команда);
			
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОснованииВнутреннееЗадание(Команда)
	
	ОткрытьФорму("Документ.ВнутреннееЗадание.Форма.ФормаДокумента", Новый Структура("Основание", Объект.Ссылка), ЭтотОбъект, 
		КлючУникальности, , , , РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры
	
&НаКлиенте
Процедура СоздатьНаОснованииЗаявкуНаРазработку(Команда)
	
	ОткрытьФорму("Документ.ЗаявкаНаРазработку.Форма.ФормаДокумента", Новый Структура("Основание", Объект.Ссылка), ЭтотОбъект, 
		КлючУникальности, , , , РежимОткрытияОкнаФормы.Независимый);
		
КонецПроцедуры
	
&НаКлиенте
Процедура УстановитьСтатусПоКнопке(Команда)
	
	Если Модифицированность Тогда
		ПоказатьПредупреждение(, "Перед изменением статуса необходимо сохранить изменения.");
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтатуса = СтрЗаменить(Команда.Имя, "УстановитьСтатус_", "");

	Для Каждого ЭлементСписка Из КэшСтатусов Цикл
		Если ЭлементСписка.Представление = ИдентификаторСтатуса Тогда
			ОбновитьПредставлениеСтатуса(ЭлементСписка.Значение);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Записать(Новый Структура("ПроверкаОтсутствияНазначенного"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДополнитьСписокВыбораПроцента()
	
	ЗначениеЭлемента = 0;
	Индекс = 0;
	
	Пока ЗначениеЭлемента < Объект.ПроцентВыполнения Цикл
		ЗначениеЭлемента = Элементы.ПроцентВыполнения.СписокВыбора[Индекс].Значение;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	ПредставлениеПроцента = СтрШаблон("%1%%", Строка(Объект.ПроцентВыполнения));
	Элементы.ПроцентВыполнения.СписокВыбора.Вставить(Индекс - 1, Объект.ПроцентВыполнения, ПредставлениеПроцента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьНезакрытыйПериодПриостановки(Знач Задача)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриостановленныеЗадачиСрезПоследних.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	РегистрСведений.ПриостановленныеЗадачи.СрезПоследних(, Задача = &Задача) КАК ПриостановленныеЗадачиСрезПоследних
	|ГДЕ
	|	ПриостановленныеЗадачиСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)";
	
	Запрос.УстановитьПараметр("Задача", Задача);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВладельцаПродукта(Продукт)
	
	Если ЗначениеЗаполнено(Продукт) Тогда
		ВладелецПродукта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Продукт, "Ответственный");
	Иначе
		ВладелецПродукта = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВладелецПродукта;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДоступныеСтатусы()
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Если Объект.Назначена = ТекущийПользователь ИЛИ Объект.Заказчик = ТекущийПользователь Тогда
		РольПользователя = Справочники.РолиПользователей.Заказчик;
	КонецЕсли;
	
	ДанныеСтатусов = РаботаСПроцессами.ПолучитьСписокСтатусовДляПерехода(Объект.Ссылка, 
		Объект.Статус, РольПользователя, Объект.Филиал);
	
	ИдентификаторыСтатусов = СтрРазделить(ХранилищеСтатусов, ",", Ложь);
	
	Для Каждого ИдентификаторСтатуса Из ИдентификаторыСтатусов Цикл
		Элементы.Удалить(Элементы["КнопкаСтатуса_" + ИдентификаторСтатуса]);
		Команды.Удалить(Команды.Найти("УстановитьСтатус_" + ИдентификаторСтатуса));
	КонецЦикла;
	
	ХранилищеСтатусов = "";
	
	// Определяем, есть среди статусов те, которые помечены "БыстрыйДоступ"
	ОтборБыстрогоДоступа = Новый Структура("БыстрыйДоступ", Истина);
	НайденныеСтроки = ДанныеСтатусов.НайтиСтроки(ОтборБыстрогоДоступа);
	ЕстьСтатусыБыстрогоДоступа = (НайденныеСтроки.Количество() > 0);
	
	// Если есть статусы с пометкой быстрого доступа, они будут выводиться
	// кнопками, остальные будут выводиться в отдельном подменю. Если все
	// статусы без пометки быстрого доступа, то они будут выведены кнопками
	ПодменюДополнительныхСтатусов = Элементы.ПодменюДополнительныхСтатусовПерехода;
	ГруппаДополнительныхСтатусов = Элементы.КоманднаяПанельДополнительныеСтатусыПерехода;
	
	Для Каждого СтруктураСтатуса Из ДанныеСтатусов Цикл
		СвойстваСтатуса = Новый Структура("Ссылка, Наименование, ИндексКартинки");
		ЗаполнитьЗначенияСвойств(СвойстваСтатуса, СтруктураСтатуса);
		СвойстваСтатуса.Наименование = СтруктураСтатуса.Представление;
		КэшСтатусов.Добавить(СвойстваСтатуса, СтруктураСтатуса.Идентификатор);		
		
		Попытка
			Картинка = БиблиотекаКартинок["Статус" + СтруктураСтатуса.ИмяПредопределенныхДанных];
		Исключение
			Картинка = Новый Картинка;
		КонецПопытки;
		
		// Для текущего статуса задачи не создается кнопка
		Если СтруктураСтатуса.ТекущийСтатус Тогда
			НовыйСтатус = СтруктураСтатуса.Ссылка;
			ИндексКартинкиСтатуса = СтруктураСтатуса.ИндексКартинки;
			СтатусПредставление = СтруктураСтатуса.Представление;
			Продолжить;
		КонецЕсли;
		
		ИдентификаторСтатуса = СтруктураСтатуса.Идентификатор;
		ХранилищеСтатусов = ХранилищеСтатусов + ИдентификаторСтатуса + ",";
		
		ИмяКоманды = "УстановитьСтатус_" + ИдентификаторСтатуса;
		
		КомандаФормы = Команды.Найти(ИмяКоманды);
		Если КомандаФормы = Неопределено Тогда
			КомандаФормы = Команды.Добавить(ИмяКоманды);
			КомандаФормы.Действие = "УстановитьСтатусПоКнопке";
		КонецЕсли;
		
		Если НЕ ЕстьСтатусыБыстрогоДоступа ИЛИ (ЕстьСтатусыБыстрогоДоступа И СтруктураСтатуса.БыстрыйДоступ) Тогда
			НоваяКнопка = Элементы.Вставить("КнопкаСтатуса_" + ИдентификаторСтатуса, Тип("КнопкаФормы"), 
				ГруппаДополнительныхСтатусов, ПодменюДополнительныхСтатусов);
		Иначе
			НоваяКнопка = Элементы.Добавить("КнопкаСтатуса_" + ИдентификаторСтатуса, Тип("КнопкаФормы"), 
				ПодменюДополнительныхСтатусов);
		КонецЕсли;
		
		НоваяКнопка.Заголовок = СтруктураСтатуса.Представление;
		НоваяКнопка.ИмяКоманды = КомандаФормы.Имя;
		НоваяКнопка.Картинка = Картинка;
		НоваяКнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КонецЦикла;
	
	Элементы.ГруппаУправлениеСтатусом.Видимость = (ДанныеСтатусов.Количество() > 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителя(Знач Пользователь)
	
	Объект.Назначена = Пользователь;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРольПользователяПоНаправлению()
	
	РольПользователя = ОбщегоНазначения.РольПользователяВНаправлении(Объект.Направление);
	
	ЗаполнитьДоступныеСтатусы();
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеРазработкиПриИзмененииНаСервере()

	ЗаполнитьРольПользователяПоНаправлению();	
	
	УстановитьСвойстваЮридическогоЛица();
	
	ОбновитьВидимостьВидаПроцесса();	
	
	Если Элементы.ВидПроцесса.Видимость Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ВидПроцесса) И ЗначениеЗаполнено(Объект.ОбъектОснование) Тогда
			Объект.ВидПроцесса = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ОбъектОснование, "ВидПроцесса");
		КонецЕсли;
	КонецЕсли;
	
	ЕстьПодчиненные = ОбщегоНазначенияВызовСервера.ЕстьПодчиненные(Объект.Ссылка);
	ОбновитьДоступностьВидаПроцесса(Элементы.ВидПроцесса, Объект.ВидПроцесса, Объект.ОбъектОснование, ЕстьПодчиненные); 

КонецПроцедуры

&НаСервере
Процедура НастроитьПолеСпринта(Знач ИзменениеФилиала = Ложь)
	
	Если ЗначениеЗаполнено(Спринт) Тогда
		ИспользоватьСпринты = Истина;
	ИначеЕсли ЗначениеЗаполнено(Объект.Филиал) Тогда
		ИспользоватьСпринты = Справочники.Филиалы.ЕстьАктивныйСпринт(Объект.Филиал, Перечисления.ВидыСпринта.ВнутреннееЗадание);
	Иначе
		ИспользоватьСпринты = Ложь;	
	КонецЕсли;
	
	Элементы.Спринт.Видимость = ИспользоватьСпринты;
	
	Если НовыйСтатус = Справочники.СтатусыОбъектов.Решен 
		ИЛИ НовыйСтатус = Справочники.СтатусыОбъектов.Отклонен 
		ИЛИ (ЗначениеЗаполнено(Объект.Филиал) И ПараметрыСеанса.СвязанныеФилиалы.Найти(Объект.Филиал) = Неопределено
			И ПараметрыСеанса.ДоступныеФилиалыРуководителя.Найти(Объект.Филиал) = Неопределено) Тогда
					
		Элементы.Спринт.Доступность = Ложь;
	КонецЕсли;	
	
	Если ИзменениеФилиала И ЗначениеЗаполнено(Объект.Филиал) И ЗначениеЗаполнено(Спринт) Тогда
		ФилиалСпринта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Спринт, "Филиал");
		
		Если ФилиалСпринта <> Объект.Филиал Тогда
			Спринт = Документы.Спринт.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	ИзменитьВводПлановыхТрудозатратДляСпринта();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьВидаПроцесса()
	
	Элементы.ВидПроцесса.Видимость = ЗначениеЗаполнено(Объект.Направление) 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Направление, "ИспользоватьВидыПроцессов");
		
	Если НЕ Элементы.ВидПроцесса.Видимость Тогда
		Объект.ВидПроцесса = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьВладельцаПродукта(Элемент, Знач Продукт)
	
	Элемент.Видимость = ЗначениеЗаполнено(Продукт);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьВидаПроцесса(Элемент, Знач ВидПроцесса, Знач ОбъектОснование, Знач ЕстьПодчиненные)
			
	Если ЗначениеЗаполнено(ВидПроцесса) Тогда
		Элемент.ТолькоПросмотр = ЕстьПодчиненные 
			ИЛИ (ЗначениеЗаполнено(ОбъектОснование) И ТипЗнч(ОбъектОснование) <> Тип("СправочникСсылка.Проекты"));
	Иначе
		Элемент.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеСтатуса(Знач СвойстваСтатуса)
	
	НовыйСтатус = СвойстваСтатуса.Ссылка;
	ИндексКартинкиСтатуса = СвойстваСтатуса.ИндексКартинки;
	СтатусПредставление = СвойстваСтатуса.Наименование;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборОбъектаОснования(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Результат = ОбработатьВыборОбъектаОснованияНаСервере(Объект.Ссылка, РезультатЗакрытия, Объект.ВидПроцесса);
	
	Если НЕ Результат.Успешно Тогда
		Объект.ОбъектОснование = Неопределено;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Объект.ОбъектОснование = РезультатЗакрытия;
	Модифицированность = Истина;
	
	ПриИзмененииОбъектОснования();
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработатьВыборОбъектаОснованияНаСервере(Знач Ссылка, Знач ОбъектОснование, Знач ВидПроцесса)
	
	Результат = Новый Структура("Успешно, ТекстОшибки", Истина, "");
	
	РезультатУровеньВложенности = ОбщегоНазначения.УровеньВложенностиПревышен(ТипЗнч(Ссылка), ОбъектОснование);
	
	Если РезультатУровеньВложенности.УровеньПревышен Тогда
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = РезультатУровеньВложенности.Сообщение;
		Возврат Результат;
	КонецЕсли;
	
	ТипОснования = ТипЗнч(ОбъектОснование);
	
	Если ТипЗнч(ОбъектОснование) <> Тип("СправочникСсылка.Проекты") Тогда
		ВидПроцессаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектОснование, "ВидПроцесса");
		
		Если ЗначениеЗаполнено(ВидПроцесса) И ЗначениеЗаполнено(ВидПроцессаОснования) 
			И ВидПроцесса <> ВидПроцессаОснования 
			И РегистрыСведений.СтруктураПодчиненности.ЕстьПодчиненные(Ссылка) Тогда
			
			Результат.Успешно = Ложь;
			Результат.ТекстОшибки = "Вид процесса объекта основания должен соответствовать виду процесса текущего объекта";
			Возврат Результат;
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗакрытиеПлановогоВремениПоСпринтам(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	УчетТрудозатратКлиент.ОбработатьЗакрытиеПлановогоВремениПоСпринтам(Результат, ЭтотОбъект, ПланТрудозатрат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПроверкиИзмененияСтатусаПередЗаписью(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ИдентификаторСтатуса = ОбщегоНазначенияКлиентСервер.СтрУникальныйИдентификатор(Объект.Статус.УникальныйИдентификатор());
		
		Для Каждого ЭлементСписка Из КэшСтатусов Цикл
			Если ЭлементСписка.Представление = ИдентификаторСтатуса Тогда
				ОбновитьПредставлениеСтатуса(ЭлементСписка.Значение);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Результат.Свойство("ПереоткрытиеФормы") Тогда
		Возврат;
	Иначе
		Если ЗначениеЗаполнено(Результат.НазначитьНа) Тогда
			Объект.Назначена = Результат.НазначитьНа;
		КонецЕсли;
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ПроверкаИзмененияСтатусаПередЗаписью", Истина);
		ПараметрыЗаписи.Вставить("ВидОперации", Неопределено);
		ПараметрыЗаписи.Вставить("Комментарий", Результат.Комментарий);
		ПараметрыЗаписи.Вставить("ЕстьНезакрытыйПериодПриостановки", ДополнительныеПараметры.ЕстьНезакрытыйПериодПриостановки);
		ПараметрыЗаписи.Вставить("Трудозатраты", Результат.Трудозатраты);
		ПараметрыЗаписи.Вставить("ОбновитьДатыПоследнихИзменений");
		ПараметрыЗаписи.Вставить("ПроверкаОтсутствияНазначенного");
		
		Если Результат.Свойство("ПричинаИзмененияСтатуса") Тогда
			ПричинаИзмененияСтатуса = Строка(Результат.ПричинаИзмененияСтатуса);
			Элементы.ПричинаИзмененияСтатуса.Видимость = Истина;
			
			ПараметрыЗаписи.Вставить("ПричинаИзмененияСтатуса", Результат.ПричинаИзмененияСтатуса);
			ПараметрыЗаписи.Вставить("НеобходимоОтправитьУведомление", Результат.НеобходимоОтправитьУведомление);
		Иначе
			ПричинаИзмененияСтатуса = Неопределено;
			Элементы.ПричинаИзмененияСтатуса.Видимость = Ложь;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ЗакрытьПослеЗаписи") = Истина Тогда
			ПараметрыЗаписи.Вставить("ЗакрытьПослеЗаписи", Истина);
		КонецЕсли;
		
		Если НовыйСтатус = КэшВспомогательныхДанных.Статус_Приостановлен Тогда
			ПараметрыЗаписи.ВидОперации = КэшВспомогательныхДанных.Статус_Приостановлен;
			
		ИначеЕсли НовыйСтатус = КэшВспомогательныхДанных.Статус_ВРаботе 
			И ТипЗнч(Объект.ОбъектОснование) = Тип("ДокументСсылка.ЗаявкаНаРазработку")
			И ЗначениеЗаполнено(Объект.ОбъектОснование) Тогда
			
			ПараметрыЗаписи.ВидОперации = КэшВспомогательныхДанных.Статус_ВРаботе;
		КонецЕсли;
		
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНовыеКомментарии() Экспорт
	
	ШаблонИмениКнопки = ПанельНавигацииКлиентСервер.ШаблонИмениКнопки();	
	ИмяКоманды = СтрШаблон(ШаблонИмениКнопки, "Комментарии");
	
	ПанельНавигацииКлиент.НажатиеВнеПанели(ЭтотОбъект, ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуПанелиНавигации() Экспорт
	
	ПанельНавигацииКлиент.ОткрытьСтраницуНаФорме(ЭтотОбъект, ИмяОткрываемойСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапуститьАвтосохранениеОписания()
	
	АвтосохраненияДанныхКлиент.ЗапуститьАвтосохранениеОписания(ЭтотОбъект, КэшВспомогательныхДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗадатьВопросВосстановленияОписания()
	
	АвтосохраненияДанныхКлиент.ЗадатьВопросОВосстановленииОписания(ЭтотОбъект, КэшВспомогательныхДанных, "текущего задания");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеПодтвержденияВыбораОтсутствующего(Знач ДопПараметры) Экспорт
	
	ПараметрыЗаписи = ДопПараметры.ПараметрыЗаписи;
	ПараметрыЗаписи.Вставить("ПроверкаОтсутствияНазначенного");
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриНажатииПоляHTMLДокумента(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
		РедакторОписанияКлиент.ПриНажатииПоляHTMLДокумента(ЭтотОбъект, ДанныеСобытия, СтандартнаяОбработка, КэшВспомогательныхДанных);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнформациюОПользователе(Знач СтрокаСсылки, СтандартнаяОбработка)
	
	ИдентификаторПользователя = Новый УникальныйИдентификатор(Сред(СтрокаСсылки, СтрНайти(СтрокаСсылки, "sdms_user_") + 10));
	ИнтерфейсПриложенияКлиент.ОткрытьИнформациюОПользователе(ЭтотОбъект, ИдентификаторПользователя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВспомогательныеДанные(Знач Основание, Знач Ссылка, Знач ЗагруженоАвтосохранение)
		
	Статусы = Справочники.СтатусыОбъектов.ОписаниеСтатусов();
		
	СтатусРешенКартинка = Справочники.СтатусыОбъектов.НайтиЗначениеСвойстваСтатуса("Картинка", "Ссылка", Справочники.СтатусыОбъектов.Решен);
	СтатусВРаботеКартинка = Справочники.СтатусыОбъектов.НайтиЗначениеСвойстваСтатуса("Картинка", "Ссылка", Справочники.СтатусыОбъектов.ВРаботе);
			
	ДанныеДляКлиента = Новый Структура;
	ДанныеДляКлиента.Вставить("Статусы", Статусы);
	ДанныеДляКлиента.Вставить("СтатусРешенКартинка", СтатусРешенКартинка);
	ДанныеДляКлиента.Вставить("СтатусВРаботеКартинка", СтатусВРаботеКартинка);
	ДанныеДляКлиента.Вставить("Статус_НаДоработку", Справочники.СтатусыОбъектов.НаДоработку);
	ДанныеДляКлиента.Вставить("Статус_Приостановлен", Справочники.СтатусыОбъектов.Приостановлен);
	ДанныеДляКлиента.Вставить("Статус_Отклонен", Справочники.СтатусыОбъектов.Отклонен);
	ДанныеДляКлиента.Вставить("Статус_ВРаботе", Справочники.СтатусыОбъектов.ВРаботе);
	ДанныеДляКлиента.Вставить("Статус_Протестирован", Справочники.СтатусыОбъектов.Протестирован);
	ДанныеДляКлиента.Вставить("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	
	АвтосохраненияДанных.ДобавитьПараметрыДляАвтосохранения(ДанныеДляКлиента, Ссылка, Основание, ЗагруженоАвтосохранение);
	
	Возврат ДанныеДляКлиента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДополнительныеДанныеНаСервере(Знач Объект, Знач НовыйСтатус)
	
	ЕстьНезакрытыйПериод = ЕстьНезакрытыйПериодПриостановки(Объект.Ссылка);
	НовыйИсполнитель = РаботаСПроцессамиВызовСервера.ПолучитьНовогоИсполнителяЗадачи(Объект.Ссылка, НовыйСтатус);
	
	ДополнительныеДанные = Новый Структура;	
	ДополнительныеДанные.Вставить("ЕстьНезакрытыйПериод", ЕстьНезакрытыйПериод);
	ДополнительныеДанные.Вставить("НовыйИсполнитель", НовыйИсполнитель);
	
	Возврат ДополнительныеДанные;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекущуюДатуСеанса()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииОбъектОснования()
	
	ЕстьПодчиненные = ОбщегоНазначенияВызовСервера.ЕстьПодчиненные(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Объект.ОбъектОснование) Тогда
		ДанныеОснования = ОбщегоНазначенияВызовСервера.ПолучитьДанныеОбъектаОснования(Объект.ОбъектОснование);
		
		// Заполнение проекта
		Объект.Проект = ДанныеОснования.Проект;
		
		// Заполнение юридического лица
		ЮридическоеЛицоОснования = ДанныеОснования.ЮридическоеЛицо;
		
		Если ЗначениеЗаполнено(ЮридическоеЛицоОснования)
			И Элементы.ЮридическоеЛицо.СписокВыбора.НайтиПоЗначению(ЮридическоеЛицоОснования) <> Неопределено Тогда
			
			Объект.ЮридическоеЛицо = ЮридическоеЛицоОснования;
		КонецЕсли;
		
		// Заполнение вида процесса
		Если Элементы.ВидПроцесса.Видимость 
			И ЗначениеЗаполнено(ДанныеОснования.ВидПроцесса) 
			И НЕ ЕстьПодчиненные Тогда
			
			Объект.ВидПроцесса = ДанныеОснования.ВидПроцесса;
		КонецЕсли;	
	КонецЕсли;
	
	ОбновитьДоступностьВидаПроцесса(Элементы.ВидПроцесса, Объект.ВидПроцесса, Объект.ОбъектОснование, ЕстьПодчиненные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаИзмененияСтатусаПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Параметры.Ключ.Пустая() ИЛИ Объект.Статус = НовыйСтатус Тогда
		Возврат;
	ИначеЕсли НовыйСтатус = КэшВспомогательныхДанных.Статус_ВРаботе И НЕ ЗначениеЗаполнено(Объект.Назначена) Тогда
		НовыйСтатус = Объект.Статус;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан пользователь, на которого будет назначена задача", ,
			"Объект.Назначена", "Объект.Назначена", Отказ);
		Возврат;
	КонецЕсли;
	
	ДополнительныеДанные = ПолучитьДополнительныеДанныеНаСервере(Объект, НовыйСтатус);		
	ЕстьНезакрытыйПериод = ДополнительныеДанные.ЕстьНезакрытыйПериод;
	
	ПараметрыОповещения  = Новый Структура("ЕстьНезакрытыйПериодПриостановки", ЕстьНезакрытыйПериод);
	
	Если ПараметрыЗаписи.Свойство("ЗакрытьПослеЗаписи") Тогда
		ПараметрыОповещения.Вставить("ЗакрытьПослеЗаписи", Истина);
	КонецЕсли;		
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаПроверкиИзмененияСтатусаПередЗаписью",
		ЭтотОбъект, ПараметрыОповещения);
		
	// Параметры открытия форма изменения статуса (для добавления трудозатрат/комментария)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТребуетсяКомментарий");
	ПараметрыОткрытия.Вставить("НовыйСтатус", НовыйСтатус);
	ПараметрыОткрытия.Вставить("Назначена", ДополнительныеДанные.НовыйИсполнитель);
	ПараметрыОткрытия.Вставить("Объект", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ПараметрыОповещения", ПараметрыОповещения);
	
	Если НовыйСтатус = КэшВспомогательныхДанных.Статус_Приостановлен Тогда
		Если НЕ ЕстьНезакрытыйПериод Тогда
			Отказ = Истина;			
			ПараметрыОткрытия.ТребуетсяКомментарий = Истина;			
		КонецЕсли;
	Иначе
		Отказ = Истина;	
		ПараметрыОткрытия.ТребуетсяКомментарий = (НовыйСтатус = КэшВспомогательныхДанных.Статус_Отклонен);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ИзменениеСтатуса", ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаОтсутствияНазначенногоПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ДанныеОтсутствия = ПользователиВызовСервера.ДанныеОтсутствия(Объект.Назначена);
	
	Если ДанныеОтсутствия.Отсутствует Тогда
		Отказ = Истина;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Форма", ЭтотОбъект);
		ДопПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
		
		ИнтерфейсПриложенияКлиент.ПодтвердитьВыборОтсутствующегоПользователя(Объект.Назначена, ДанныеОтсутствия, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпринтОбработкаВыбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		Спринт = ПредопределенноеЗначение("Документ.Спринт.ПустаяСсылка");
		
		Для Каждого Строка Из РезультатЗакрытия.АктивныеСпринты Цикл
			Спринт = Строка; 
		КонецЦикла;  
		
		ПланТрудозатрат = РезультатЗакрытия.Трудозатраты;
		СпринтИсходный = Спринт;
		ИзменитьВводПлановыхТрудозатратДляСпринта();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТегиHTMLПослеНажатия(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") 
		ИЛИ НЕ Результат.Модифицированность Тогда
		
		Возврат;
	КонецЕсли;
	
	ТегиHTMLПослеНажатияНаСервере(Результат.СписокТегов);
	
КонецПроцедуры

&НаСервере
Процедура ТегиHTMLПослеНажатияНаСервере(Знач СписокТегов)

	РаботаСТегамиВызовСервера.Обновить(ЭтотОбъект, СписокТегов, Элементы.ГруппаСтраницаСвойстваШапка.ЦветФона);	

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступныеНаправления()
	
	ТаблицаНаправлений = Пользователи.ТаблицаНаправленийРолейПользователя(Объект.Направление);
	
	Элементы.НаправлениеРазработки.СписокВыбора.ЗагрузитьЗначения(ТаблицаНаправлений.СписокНаправлений.ВыгрузитьЗначения());	
	Элементы.НаправлениеРазработки.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЮридическогоЛица(Знач ОткрытиеДокумента = Ложь)
	
	// Очистка списка выбора юридических лиц
	СписокВыбора = Элементы.ЮридическоеЛицо.СписокВыбора;
	СписокВыбора.Очистить();
	
	// Получение юридического лица объекта основания
	Если ЗначениеЗаполнено(Объект.ОбъектОснование) Тогда
		ЮрЛицоОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ОбъектОснование, "ЮридическоеЛицо");
	Иначе
		ЮрЛицоОснования = Неопределено;
	КонецЕсли;
	
	Если НЕ ОткрытиеДокумента И ЗначениеЗаполнено(Объект.ЮридическоеЛицо) Тогда
		ЮридическоеЛицоНастроек = Объект.ЮридическоеЛицо;
	Иначе
		ЮридическоеЛицоНастроек = Неопределено;
	КонецЕсли;
	
	// Получения списка юридических лиц направления, основного юридического лица и признака видимости поля юридического лица
	ПараметрыЮридическогоЛица = Документы.ЗаявкаНаРазработку.ПараметрыЮрЛица(Объект.Направление);
		
	ВидимостьЮрЛица = ПараметрыЮридическогоЛица.ВидимостьЮрЛица;
	ОсновноеЮрЛицо = ПараметрыЮридическогоЛица.ОсновноеЮрЛицо;
	
	// Заполнение списка выбора юридических лиц
	Для Каждого Элемент Из ПараметрыЮридическогоЛица.СписокЮрЛиц Цикл
		СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
	КонецЦикла;
	
	// Если открывается существующий документ
	Если ОткрытиеДокумента Тогда
		// Если юридическое лицо не заполнено, то добавляется пункт "Не выбрано"
		Если НЕ ЗначениеЗаполнено(Объект.ЮридическоеЛицо) Тогда
			СписокВыбора.Добавить(Справочники.ЮридическиеЛица.ПустаяСсылка(), "Не выбрано");
		Иначе
			ВидимостьЮрЛица = Истина;
		КонецЕсли;
		
		ЮридическоеЛицоВнутреннегоЗадания = Объект.ЮридическоеЛицо;
		
		// Если юридическое лицо заявки отсутствует в списке выбора, то оно добавляется в список
		Если ВидимостьЮрЛица И СписокВыбора.НайтиПоЗначению(ЮридическоеЛицоВнутреннегоЗадания) = Неопределено Тогда
			СписокВыбора.Добавить(ЮридическоеЛицоВнутреннегоЗадания);
		КонецЕсли;
		
	// Если создается новый документ и заполнено юридическое лицо в объекте основания,
	// то оно будет установлено в качестве юридического лица текущего объекта
	ИначеЕсли ЗначениеЗаполнено(ЮрЛицоОснования) И СписокВыбора.НайтиПоЗначению(ЮрЛицоОснования) <> Неопределено Тогда
		ЮридическоеЛицоВнутреннегоЗадания = ЮрЛицоОснования;
	ИначеЕсли ЗначениеЗаполнено(ЮридическоеЛицоНастроек) 
		И СписокВыбора.НайтиПоЗначению(ЮридическоеЛицоНастроек) <> Неопределено Тогда
		ЮридическоеЛицоВнутреннегоЗадания = ЮридическоеЛицоНастроек;
	Иначе
		ЮридическоеЛицоВнутреннегоЗадания = ОсновноеЮрЛицо;
	КонецЕсли;
	
	Объект.ЮридическоеЛицо = ЮридическоеЛицоВнутреннегоЗадания;
	Элементы.ЮридическоеЛицо.Видимость = ВидимостьЮрЛица;
	Элементы.СтоимостьВнутреннегоЗадания.Видимость = ВидимостьЮрЛица;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеМеханизмы_Трудозатраты

////////////////////////////////////////////////////////////////////////////////
// Управление трудозатратами

&НаКлиенте
Процедура Подключаемый_УправлениеТрудозатратамиПриНажатииHTML(Элемент, ДанныеСобытия, СтандартнаяОбработка)

	УчетТрудозатратКлиент.ПриНажатииПоляHTMLУправленияТрудозатратами(ЭтотОбъект, ДанныеСобытия, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборТипаОбъектаОснования(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("ФиксированныеНастройки", Новый НастройкиКомпоновкиДанных);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборОбъектаОснования", ЭтотОбъект);
	
	ОтборТекущийОбъект = ПараметрыОткрытия.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборТекущийОбъект.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборТекущийОбъект.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ОтборТекущийОбъект.ПравоеЗначение = Объект.Ссылка;
	ОтборТекущийОбъект.Использование = Истина;
	
	МассивСтатусов = ИнтерфейсПриложенияКлиент.ПолучитьОграниченияПоСтатусамДляПроекта(КэшВспомогательныхДанных.Статусы);
	
	Если ВыбранныйЭлемент.Значение = "ВнутреннееЗадание" Тогда
		МассивСтатусов.Удалить(0);
	КонецЕсли;
	
	ОтборСтатус = ПараметрыОткрытия.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборСтатус.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборСтатус.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ОтборСтатус.ПравоеЗначение = МассивСтатусов;         
	ОтборСтатус.Использование = Истина;
	
	Если ВыбранныйЭлемент.Значение = "ВнутреннееЗадание" Тогда
		ОткрытьФорму("Документ.ВнутреннееЗадание.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект, , , , 
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	ИначеЕсли ВыбранныйЭлемент.Значение = "Проект" Тогда		
		ОткрытьФорму("Справочник.Проекты.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект, , , , 
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

#Если Клиент Тогда	
	ЕстьИзмененныеПоказателейПриоритета = Ложь;
	ЕстьНеопубликованныйКомментарий = Ложь;
	ИскатьПодчиненныеФормы = Ложь;
	ИзмененПланПроекта = Ложь;
#КонецЕсли

#КонецОбласти
