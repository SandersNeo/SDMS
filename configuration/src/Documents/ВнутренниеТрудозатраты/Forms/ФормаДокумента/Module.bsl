///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////
 
#Область ОписаниеПеременных

&НаКлиенте
Перем ИдентификаторФормы Экспорт; // Уникальный идентификатор формы без символа "-"

// Для исключения ошибки "Cannot read property of undefined"
// (при записи основной формы в веб клиенте "протухают" подчиненные формы в массиве форм основного окна)
&НаКлиенте
Перем ИскатьПодчиненныеФормы Экспорт;

// Хранит имя последней нажатой кнопки панели навигации
&НаКлиенте
Перем ИмяАктивнойКнопкиПанелиНавигации Экспорт;

&НаКлиенте
Перем ПредыдущаяОткрытаяВкладка;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьУчастниковВнутреннихТрудозатрат();
	РедакторОписания.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;
		Объект.Дата = ТекущаяДатаСеанса();
		
		Настройка = ПланыВидовХарактеристик.ВидыНастроекФилиалов.СниматьАктивностьПриЗанесенииТрудозатрат;
		Объект.АвтоСнятиеАктивности = РегистрыСведений.НастройкиФилиалов.ЗначениеНастройки(ПараметрыСеанса.Филиал, Настройка);
		
		Элементы.СотрудникиАктивный.ТолькоПросмотр = Истина;
		Элементы.МассовоеЗанесениеТрудозатрат.Доступность = Ложь;
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ЗаполнитьУчастниковВнутреннихТрудозатрат(Параметры.ЗначениеКопирования);
		КонецЕсли;
	КонецЕсли;
	
	// Создание элементов формы для отображения трудозатрат и получение трудозатрат по объекту
	УчетТрудозатрат.КонструкторИнтерфейсаУправленияТрудозатратами(ЭтотОбъект, Элементы.СтраницыДокумента);	
	УчетТрудозатрат.ЗаполнитьТрудозатраты(ЭтотОбъект, Параметры.Ключ.Пустая());
	
	РедакторОписания.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаСвойствОписание);
	
	// форма открывается сразу на странице описания
	Функциональность = РедакторОписанияКлиентСервер.ИмяСобытияОткрытияРедактора();
	ОбщегоНазначенияВызовСервера.ОтслеживаниеИспользованияФункциональностиНаСервере(Функциональность);
	ЭтотОбъект[РедакторОписанияКлиентСервер.ИмяРеквизитаОткрытиеОписания()] = Истина;
	
	ПанельНавигации.Создать(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Нужен для работы с программно-сформированными элементами формы
	ИдентификаторФормы = ОбщегоНазначенияКлиентСервер.СтрУникальныйИдентификатор(УникальныйИдентификатор);
	ПредыдущаяОткрытаяВкладка = Элементы.СтраницыДокумента.ТекущаяСтраница;
	
	ПанельНавигацииКлиент.ПриОткрытии(Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РедакторОписанияКлиент.ПередЗаписью(ЭтотОбъект, ПараметрыЗаписи, Отказ, Элементы.СтраницаСвойства);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() И Участники.Количество() = 0 Тогда
		НоваяСтрока = Участники.Добавить();
		НоваяСтрока.Пользователь = Объект.Автор;
		НоваяСтрока.Активный = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЭтоНовый = Параметры.Ключ.Пустая();
	
	Если Модифицированность ИЛИ ЭтоНовый Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Участники", Участники.Выгрузить(, "Пользователь, Активный"));
	КонецЕсли;
	
	Если ЭтоНовый Тогда
		ТекущийОбъект.УстановитьСсылкуНового(Документы.ВнутренниеТрудозатраты.ПолучитьСсылку());
		СсылкаНаОбъект = ТекущийОбъект.ПолучитьСсылкуНового();
	Иначе
		СсылкаНаОбъект = ТекущийОбъект.Ссылка;
	КонецЕсли;
	
	РедакторОписания.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, СсылкаНаОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьУчастниковВнутреннихТрудозатрат();
	Элементы.СотрудникиАктивный.ТолькоПросмотр = Ложь;
	Элементы.МассовоеЗанесениеТрудозатрат.Доступность = Истина;
	ОбщегоНазначения.ИзменитьДоступностьПрограммногоЭлементаФормы(ЭтотОбъект, "СтраницаПрикрепленныеФайлы_", Объект.Ссылка);
	
	РедакторОписания.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	ПанельНавигации.ОбновитьДоступность(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИскатьПодчиненныеФормы = Ложь;
	
	РедакторОписанияКлиент.ПослеЗаписи(ЭтотОбъект);
	
	Оповестить(СобытияОповещенияКлиент.ИмяСобытияОбновлениеСписковИнструментов());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если СобытияОповещенияКлиент.СобытиеДобавленияТрудозатратПоОбъекту(ИмяСобытия, Объект.Ссылка, Параметр) Тогда
		УчетТрудозатратКлиент.ОбновитьОбщиеФактическиеТрудозатраты(ЭтотОбъект);
		ЗаполнитьУчастниковВнутреннихТрудозатрат(, Источник);
	КонецЕсли;
	
	ПанельНавигацииКлиент.ОбработкаОповещения(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АвторНажатие(Элемент, СтандартнаяОбработка)
	
	ИнтерфейсПриложенияКлиент.ОткрытьИнформациюОПользователе(ЭтотОбъект, Объект.Автор, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВнутренниеТрудозатраты");
	
	ОткрытьФорму("Справочник.ВидыДеятельности.ФормаВыбора", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВнутренниеТрудозатраты");
	
	ОткрытьФорму("Справочник.ВидыДеятельности.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияКлиент.КопироватьТекстВБуферОбмена(Объект.Дата, "Дата создания скопирована в буфер обмена");
	
КонецПроцедуры

&НаКлиенте
Процедура НомерНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияКлиент.КопироватьТекстВБуферОбмена(Объект.Номер, "Номер скопирован в буфер обмена");
	
КонецПроцедуры

// Стандартное событие возникающее при переключении с одной страницы на другую
//
// Параметры:
//  Элемент			 - ГруппаФормы - Страницы формы
//  ТекущаяСтраница	 - ГруппаФормы - Текущая страница формы 
//
&НаКлиенте
Процедура СтраницыДокументаПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	
	РедакторОписанияКлиент.ПриСменеСтраницы(ЭтотОбъект, ПредыдущаяОткрытаяВкладка, Элементы.СтраницаСвойства);
	УчетТрудозатратКлиент.ОбновитьОбщиеФактическиеТрудозатраты(ЭтотОбъект, Ложь, Ложь);
	
	ПредыдущаяОткрытаяВкладка = Элементы.СтраницыДокумента.ТекущаяСтраница;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий таблицы "Сотрудники"

&НаКлиенте
Процедура СотрудникиАктивныйПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ИзменитьАктивностьУчастника(Объект.Ссылка, ТекущиеДанные.Пользователь, ТекущиеДанные.Активный);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.Трудозатраты > 0 Тогда
		ТекстПредупреждения = "Нельзя удалять пользователя с заполненными трудозатратами";
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Отказ = Истина;
	Иначе
		Модифицированность = Истина;
	КонецЕсли;
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий Редактора описания

&НаКлиенте
Процедура Подключаемый_ПриНажатииПоляHTMLДокумента(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РедакторОписанияКлиент.ПриНажатииПоляHTMLДокумента(ЭтотОбъект, ДанныеСобытия, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ДобавитьМойФилиал(Команда)
		
	ДобавитьСотрудниковФилиалаНаСервере();
			
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСебя(Команда)
	
	ДобавитьСебяНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСотрудниковФилиала(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВыбранныеФилиалы", ВыбранныеФилиалы);
	ПараметрыОткрытия.Вставить("ВключаяКоманды", Истина);
	ПараметрыОткрытия.Вставить("ITСтруктура", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборФилиалов", ЭтотОбъект);
			
	ОткрытьФорму("Справочник.Филиалы.Форма.МножественныйВыбор", ПараметрыОткрытия, ЭтотОбъект, КлючУникальности, , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры
	
&НаКлиенте
Процедура ДобавитьУчастников(Команда)
	
	ВыбранныеПользователи = Новый Массив;
	
	Для Каждого Строка Из Участники Цикл
		ВыбранныеПользователи.Добавить(Строка.Пользователь);
	КонецЦикла;
	
	ПараметрыОткрытия = Новый Структура("ВыбранныеПользователи", ВыбранныеПользователи);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборУчастников", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.Пользователи.Форма.МножественныйВыбор", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФактическиеТрудозатраты(Команда)
	
	УчетТрудозатратКлиент.ОбработатьКомандуИнтерфейсаУправленияТрудозатратами(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьВБуфер(Команда)
			
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиент.КопироватьНавигационнуюСсылкуВБуферОбмена(Объект.Ссылка);
	Иначе
		ПоказатьПредупреждение(, "Данные еще не записаны. Копирование ссылки возможно только после записи данных.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МассовоеЗанесениеТрудозатрат(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеМассовогоЗанесенияТрудозатрат", ЭтотОбъект);	
	УчетТрудозатратКлиент.ОткрытьОкноМассовоеЗанесениеТрудозатрат(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВариантыСсылок(Команда)
		
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ИнтерфейсПриложенияКлиент.ОткрытьОкноНавигационнойСсылки(Объект.Ссылка, ЭтотОбъект, УникальныйИдентификатор);
	Иначе
		ПоказатьПредупреждение(, "Данные еще не записаны. Копирование ссылки возможно только после записи данных.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоФактическимТрудозатратам(Команда)
	
	УчетТрудозатратКлиент.ОбработатьКомандуИнтерфейсаУправленияТрудозатратами(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокФактическихТрудозатрат(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ШаблонИмениКнопкиСтраницы = ПанельНавигацииКлиентСервер.ШаблонИмениКнопкиСтраницы();	
		ИмяКоманды = СтрШаблон(ШаблонИмениКнопкиСтраницы, Элементы["УправленияТрудозатратами_ОсновнаяСтраница"].Имя);
		
		ЭтоКомандаПодменю = НЕ Элементы[ИмяКоманды].Видимость;
		ПанельНавигацииКлиент.Нажатие(ЭтотОбъект, Новый Структура("Имя", ИмяКоманды), , ЭтоКомандаПодменю);		
	Иначе
		Элементы.СтраницыДокумента.ТекущаяСтраница = Элементы["УправленияТрудозатратами_ОсновнаяСтраница"];
		СтраницыДокументаПриСменеСтраницы(Элементы.СтраницыДокумента, Элементы.СтраницыДокумента.ТекущаяСтраница); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельНавигацииНажатие(Команда)
	
	ПанельНавигацииКлиент.Нажатие(ЭтотОбъект, Команда);
			
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДобавитьСебяНаСервере()
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь; 
	ПараметрыОтбора = Новый Структура("Пользователь", ТекущийПользователь);
	
	Если Участники.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныеСотрудники = Новый Массив;
	ВыбранныеСотрудники.Добавить(ТекущийПользователь);
	
	ОбработатьВыборУчастниковНаСервере(ВыбранныеСотрудники, Истина);
	
КонецПроцедуры

&НаСервере
Функция ДобавитьСотрудниковФилиалаНаСервере(Знач Филиалы = Неопределено, Знач УдаляемыеФилиалы = Неопределено)
	
	ТолькоДобавить = Ложь;
	
	Если Филиалы = Неопределено Тогда
		ТолькоДобавить = Истина;
		МойФилиал = ПараметрыСеанса.Филиал;
		
		Филиалы = Новый Массив;
		Филиалы.Добавить(МойФилиал);
		
		Если ВыбранныеФилиалы.НайтиПоЗначению(МойФилиал) = Неопределено Тогда
			ВыбранныеФилиалы.Добавить(МойФилиал);
		КонецЕсли;
	КонецЕсли;

	ТаблицаПользователи = ПолучитьСотрудниковФилиала(Филиалы);
	МассивСообщений = ОбработатьВыборУчастниковНаСервере(ТаблицаПользователи, ТолькоДобавить, УдаляемыеФилиалы);
	
	Возврат МассивСообщений;
		
КонецФункции

&НаСервере
Процедура ЗаполнитьУчастниковВнутреннихТрудозатрат(Знач Документ = Неопределено, Знач ДокументТрудозатраты = Неопределено)
	
	Участники.Очистить();
	
	Если НЕ Объект.АвтоСнятиеАктивности Тогда
		ДокументТрудозатраты = Неопределено;
	КонецЕсли;
	
	Если Документ = Неопределено Тогда
		Документ = Объект.Ссылка;
		СписокСвойств = "Пользователь, Активный, Филиал, Команда, Трудозатраты";
	Иначе
		СписокСвойств = "Пользователь, Филиал, Команда";
		Модифицированность = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	УчастникиВнутреннихТрудозатрат.Пользователь КАК Пользователь,
	|	УчастникиВнутреннихТрудозатрат.Активный КАК Активный,
	|	Пользователи.Филиал КАК Филиал,
	|	Команды.Ссылка КАК Команда,
	|	СУММА(Трудозатраты.Затрата) КАК Трудозатраты,
	|	ЕСТЬNULL(МАКСИМУМ(Трудозатраты.Регистратор В (&ДокументТрудозатраты)), ЛОЖЬ) КАК ИзмененыТрудозатраты
	|ИЗ
	|	РегистрСведений.УчастникиВнутреннихТрудозатрат КАК УчастникиВнутреннихТрудозатрат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО УчастникиВнутреннихТрудозатрат.Пользователь = Пользователи.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела.СрезПоследних(&ТекущаяДата, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВКоманду)) КАК КомандыПользователей
	|		ПО (Пользователи.Ссылка = КомандыПользователей.Сотрудник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Команды
	|		ПО ((ВЫРАЗИТЬ(КомандыПользователей.Данные КАК Справочник.Филиалы)) = Команды.Ссылка)
	|			И (Команды.Родитель = Пользователи.Филиал)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК Трудозатраты
	|		ПО (УчастникиВнутреннихТрудозатрат.Объект = (ВЫРАЗИТЬ(Трудозатраты.Объект КАК Документ.ВнутренниеТрудозатраты)))
	|			И УчастникиВнутреннихТрудозатрат.Пользователь = Трудозатраты.Пользователь
	|ГДЕ
	|	УчастникиВнутреннихТрудозатрат.Объект = &Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	УчастникиВнутреннихТрудозатрат.Пользователь,
	|	УчастникиВнутреннихТрудозатрат.Активный,
	|	Пользователи.Филиал,
	|	Команды.Ссылка";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Объект", Документ);
	Запрос.УстановитьПараметр("ДокументТрудозатраты", ДокументТрудозатраты);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаУчастник = Участники.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУчастник, Выборка, СписокСвойств);
						
			Если Выборка.ИзмененыТрудозатраты Тогда
				Если СтрокаУчастник.Активный Тогда
					ИзменитьАктивностьУчастника(Объект.Ссылка, Выборка.Пользователь, Ложь);
					СтрокаУчастник.Активный = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Участники.Сортировать("Пользователь");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьАктивностьУчастника(Знач Документ, Знач Пользователь, Знач Активный)
	
	РегистрыСведений.УчастникиВнутреннихТрудозатрат.ИзменитьЗапись(Документ, Пользователь, Активный);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФилиалов(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемыеФилиалы = Новый Массив;
	
	Для Каждого Филиал Из ВыбранныеФилиалы Цикл
		Если Результат.НайтиПоЗначению(Филиал.Значение) = Неопределено Тогда
			УдаляемыеФилиалы.Добавить(Филиал.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ВыбранныеФилиалы = Результат;
		
	ТекстСообщения = ДобавитьСотрудниковФилиалаНаСервере(ВыбранныеФилиалы.ВыгрузитьЗначения(), УдаляемыеФилиалы);
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ПоказатьПредупреждение(, ТекстСообщения); 
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборУчастников(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = ОбработатьВыборУчастниковНаСервере(Результат, Ложь);	
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ПоказатьПредупреждение(, ТекстСообщения); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьВыборУчастниковНаСервере(Знач ВыбранныеСотрудники, Знач ТолькоДобавить, Знач УдаляемыеФилиалы = Неопределено)
	
	ТекстСообщения = "";
	
	Если ТипЗнч(ВыбранныеСотрудники) = Тип("Массив") Тогда
		ТаблицаСотрудники = ПолучитьДанныеСотрудников(ВыбранныеСотрудники);
	Иначе
		ТаблицаСотрудники = ВыбранныеСотрудники;
	КонецЕсли;
			
	// Добавление новых
	ПараметрыОтбора = Новый Структура; 
	
	Для Каждого Сотрудник Из ТаблицаСотрудники Цикл
		ПараметрыОтбора.Вставить("Пользователь", Сотрудник.Пользователь);
		НайденныеСтроки = Участники.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Участники.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Сотрудник);
			НоваяСтрока.Активный = Истина;
			
			Модифицированность = Истина;
		КонецЕсли;
	КонецЦикла;			
	
	Если ТолькоДобавить Тогда
		Участники.Сортировать("Пользователь");
		Возврат ТекстСообщения;
	КонецЕсли;
			
	// Удаление
	УдаляемыеСтроки = Новый Массив;
	НеУдаляемыеПользователи = Новый Массив;
	
	Для Каждого Строка Из Участники Цикл
		Если ТаблицаСотрудники.Найти(Строка.Пользователь, "Пользователь") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если УдаляемыеФилиалы = Неопределено 
			ИЛИ (УдаляемыеФилиалы.Найти(Строка.Филиал) <> Неопределено 
				И ВыбранныеФилиалы.НайтиПоЗначению(Строка.Команда) = Неопределено)
			ИЛИ (УдаляемыеФилиалы.Найти(Строка.Команда) <> Неопределено 
				И ВыбранныеФилиалы.НайтиПоЗначению(Строка.Филиал) = Неопределено) Тогда
			
			Если Строка.Трудозатраты > 0 Тогда
				НеУдаляемыеПользователи.Добавить(Строка.Пользователь);
			Иначе
				УдаляемыеСтроки.Добавить(Строка);
			КонецЕсли;		
		КонецЕсли;
	КонецЦикла;
	
	Если УдаляемыеСтроки.Количество() > 0 Тогда
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Участники.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		Модифицированность = Истина;
	КонецЕсли;
	
	// Сортировка таблицы
	Участники.Сортировать("Пользователь");
	
	КоличествоНеудаляемых = НеУдаляемыеПользователи.Количество();
	
	Если КоличествоНеудаляемых > 0 Тогда
		Если КоличествоНеудаляемых = 1 Тогда
			ШаблонСообщения = "Нельзя удалять пользователя %1 с заполненными трудозатратами";
		Иначе
			ШаблонСообщения = "Нельзя удалять пользователей %1 с заполненными трудозатратами";
		КонецЕсли;
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрСоединить(НеУдаляемыеПользователи, ", "));
	КонецЕсли;	
	
	Возврат ТекстСообщения;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗакрытиеМассовогоЗанесенияТрудозатрат(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		УчетТрудозатратКлиент.ОбновитьОбщиеФактическиеТрудозатраты(ЭтотОбъект);
		ЗаполнитьУчастниковВнутреннихТрудозатрат(, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСотрудников(Знач Пользователи)

	Запрос = Новый Запрос;
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	КомандыПользователей.Сотрудник КАК Пользователь,
	|	ВЫРАЗИТЬ(КомандыПользователей.Данные КАК Справочник.Филиалы) КАК Команда,
	|	Команды.Родитель КАК ГоловнойФилиал
	|ПОМЕСТИТЬ КомандыПользователей
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(
	|			&ТекущаяДата,
	|			Сотрудник В (&Пользователи)
	|				И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВКоманду)) КАК КомандыПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Команды
	|		ПО ((ВЫРАЗИТЬ(КомандыПользователей.Данные КАК Справочник.Филиалы)) = Команды.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	ЕСТЬNULL(КомандыПользователей.Команда, Пользователи.Филиал) КАК Филиал
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ КомандыПользователей КАК КомандыПользователей
	|		ПО Пользователи.Филиал = КомандыПользователей.ГоловнойФилиал
	|			И Пользователи.Ссылка = КомандыПользователей.Пользователь
	|ГДЕ
	|	Пользователи.Ссылка В(&Пользователи)";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Пользователи", Пользователи);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ПолучитьСотрудниковФилиала(Знач Филиалы)
			
	Запрос = Новый Запрос;
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	Филиалы.Ссылка КАК Филиал
	|ПОМЕСТИТЬ ВсеФилиалы
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|ГДЕ
	|	Филиалы.Ссылка В(&Филиалы)
	|	И Филиалы.Родитель = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Филиалы.Родитель
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|ГДЕ
	|	Филиалы.Ссылка В(&Филиалы)
	|	И Филиалы.Родитель <> ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КомандыПользователей.Сотрудник КАК Пользователь,
	|	Пользователи.Филиал КАК ГоловнойФилиал,
	|	Пользователи.Наименование КАК ПользовательНаименование,
	|	Команды.Ссылка КАК Команда
	|ПОМЕСТИТЬ ПользователиКоманд
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(&ТекущаяДата, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВКоманду)) КАК КомандыПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО КомандыПользователей.Сотрудник = Пользователи.Ссылка
	|			И (НЕ Пользователи.Недействителен)
	|			И (НЕ Пользователи.Служебный)
	|			И (НЕ Пользователи.ПометкаУдаления)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Команды
	|		ПО ((ВЫРАЗИТЬ(КомандыПользователей.Данные КАК Справочник.Филиалы)) = Команды.Ссылка)
	|			И (Команды.Родитель = Пользователи.Филиал)
	|ГДЕ
	|	КомандыПользователей.Данные В(&Филиалы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.Наименование КАК Наименование,
	|	Пользователи.Филиал КАК Филиал,
	|	ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка) КАК Команда
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПользователиКоманд КАК ПользователиКоманд
	|		ПО Пользователи.Филиал = ПользователиКоманд.ГоловнойФилиал
	|			И Пользователи.Ссылка = ПользователиКоманд.Пользователь
	|ГДЕ
	|	Пользователи.Филиал В(&Филиалы)
	|	И НЕ Пользователи.Недействителен
	|	И НЕ Пользователи.Служебный
	|	И НЕ Пользователи.ПометкаУдаления
	|	И ПользователиКоманд.Пользователь ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПользователиКоманд.Пользователь,
	|	ПользователиКоманд.ПользовательНаименование,
	|	ПользователиКоманд.ГоловнойФилиал,
	|	ПользователиКоманд.Команда
	|ИЗ
	|	ПользователиКоманд КАК ПользователиКоманд
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Филиалы", Филиалы);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

#КонецОбласти

#Область ОбщиеМеханизмы_Трудозатраты

&НаКлиенте
Процедура Подключаемый_УправлениеТрудозатратамиПриНажатииHTML(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеМассовогоЗанесенияТрудозатрат", ЭтотОбъект);
	
	УчетТрудозатратКлиент.ПриНажатииПоляHTMLУправленияТрудозатратами(ЭтотОбъект, ДанныеСобытия, 
		СтандартнаяОбработка, ОписаниеОповещения);

КонецПроцедуры

#КонецОбласти

#Область Инициализация

#Если Клиент Тогда
	ИскатьПодчиненныеФормы = Ложь;
#КонецЕсли

#КонецОбласти
