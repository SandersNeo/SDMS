///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Возвращает список подключаемых команды панели навигации
// 
// Возвращаемое значение:
//   Список значенией - список подключаемых команды панели навигации
//
Функция КомандыПанелиНавигации() Экспорт

	Команды = Новый СписокЗначений;   
	Команды.Добавить("История", "История", , БиблиотекаКартинок.ПанельНавигацииИстория);	
	Команды.Добавить("Комментарии", "Комментарии", , БиблиотекаКартинок.Комментарии);
	Команды.Добавить("Участники", "Участники", , БиблиотекаКартинок.Участники);
	Команды.Добавить("Файлы", "Файлы", , БиблиотекаКартинок.Файлы);
	Команды.Добавить("Связи", "Связи", , БиблиотекаКартинок.Связи);
	Команды.Добавить("СтруктураПодчиненности", "Структура подчиненности", , БиблиотекаКартинок.СтруктураПодчиненности);
	
	Возврат Команды;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

// Формирует ссылку на задачу, которая используется для помещения информации
// об изменениях в хранилища 1С.
//
// Параметры:
//  Ссылка - ДокументСсылка.Задача - ссылка на задачу.
//
// Возвращаемое значение:
//  Строка вида {sdms-task:nnn}, где nnn - номер задачи в SDMS.
//
Функция СсылкаДляПубликации1С(Знач Ссылка) Экспорт
	
	Возврат СтрШаблон("{sdms-task:%1}", Формат(Ссылка.Номер, "ЧГ=0"));
	
КонецФункции

Функция ОбновитьИсполнителя(Знач Ссылка, Знач НовыйСтатус, Знач Заказчик, Знач Назначена) Экспорт
	
	// При статусах "Тестирование" и "НаДоработку" задача возвращается на заказчика.
	Если НовыйСтатус = Справочники.СтатусыОбъектов.Тестирование  
		ИЛИ НовыйСтатус = Справочники.СтатусыОбъектов.НаДоработку Тогда

		Назначена = Заказчик;
	ИначеЕсли НовыйСтатус = Справочники.СтатусыОбъектов.ВРаботе
		ИЛИ НовыйСтатус = Справочники.СтатусыОбъектов.Протестирован
		ИЛИ НовыйСтатус = Справочники.СтатусыОбъектов.Публикация Тогда
		// Если текущий пользователь - тестировщик, ИЛИ статус изменился на "В работе" задача возвращается на последнего исполнителя
		ПоследнийРазработчик = ПоследнийРазработчик(Ссылка);
		Если ЗначениеЗаполнено(ПоследнийРазработчик) Тогда
			Назначена = ПоследнийРазработчик;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Назначена;
	
КонецФункции

Функция ПолучитьПрефикс() Экспорт
	
	Возврат "З";
	
КонецФункции

Функция ПроверитьВозможностьСозданияЗадачи(Знач ЭтоНовый, Знач ОбъектОснование, Отказ = Неопределено) Экспорт
	
	РезультатПроверки = Новый Структура("РазрешитьСоздание, ТекстСообщения", Истина, "");
	
	Если ЗначениеЗаполнено(ОбъектОснование) Тогда
		УстановитьПривилегированныйРежим(Истина);
		ПроверяемыеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектОснование, "Черновик, ФинальныйСтатус");
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ПроверяемыеРеквизиты.Черновик Тогда
			РезультатПроверки.РазрешитьСоздание = Ложь;
			РезультатПроверки.ТекстСообщения = "Объект основание в статусе ""Черновик"". Создание новых задач невозможно.";
			Отказ = Истина;
			Возврат РезультатПроверки;
		КонецЕсли;
		
		Если ПроверяемыеРеквизиты.ФинальныйСтатус = Справочники.СтатусыОбъектов.Отклонен Тогда
			РезультатПроверки.РазрешитьСоздание = Ложь;
			РезультатПроверки.ТекстСообщения = "Работы по данной заявке отклонены. Создание новых задач невозможно.";
			Отказ = Истина;
			Возврат РезультатПроверки;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоНовый Тогда
		
		ЗапретСоздания = РегистрыСведений.МинимальныеСтатусыЗаявок.РаботыПоЗаявкеЗавершены(ОбъектОснование);
		
		Если ЗапретСоздания Тогда
			РезультатПроверки.РазрешитьСоздание = Ложь;
			РезультатПроверки.ТекстСообщения = "Работы по данной заявке завершены. Создание новых задач невозможно.";
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИСТОРИЯ ИЗМЕНЕНИЙ ОБЪЕКТА, ОПОВЕЩЕНИЕ ПОЛЬЗОВАТЕЛЕЙ

Функция АвтосохраняемыеРеквизиты() Экспорт
	
	СохраняемыеДанные = Новый Структура;
	
	СохраняемыеДанные.Вставить("РеквизитыОбъекта", Новый Массив);
	СохраняемыеДанные.Вставить("ТабличныеЧасти", Новый Структура);
	СохраняемыеДанные.Вставить("РеквизитыФормы", Новый Массив);
	
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("Наименование");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("Назначена");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("Проект");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("ОбъектОснование");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("Назначение");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("СерьезностьОшибки");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("Направление");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("Заказчик");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("СистемаУчета");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("Филиал");
	
	СохраняемыеДанные.РеквизитыФормы.Добавить("ПланТрудозатрат");
	
	Возврат СохраняемыеДанные;
	
КонецФункции

// Возвращает структуру проверяемых данных
// 
// Возвращаемое значение:
//   - Структура
//		* Реквизиты	 - Массив	 - названия реквизитов которые требуют проверки
//		* ТабличныеЧасти	 - Структура	 - табличные части и их реквизиты которые требуют проверки.
//			Ключ - название табличной части
//			Значение - реквизит табличной части который требуется проверить
//
Функция ПроверяемыеСвойстваОбъекта() Экспорт
	
	Результат = Новый Структура("Реквизиты, ТабличныеЧасти", Новый Массив, Новый Структура);
	
	// Названия реквизитов объекта
	Результат.Реквизиты.Добавить("ДатаГотовностиРеализации");
	Результат.Реквизиты.Добавить("ДатаЗакрытия");
	Результат.Реквизиты.Добавить("ДатаНачалаРассмотрения");
	Результат.Реквизиты.Добавить("ДатаПодтверждения");
	Результат.Реквизиты.Добавить("ДатаПоследнегоТестирования");
	Результат.Реквизиты.Добавить("ДатаНачалаРазработки");
	Результат.Реквизиты.Добавить("Заказчик");
	Результат.Реквизиты.Добавить("Назначена");
	Результат.Реквизиты.Добавить("Назначение");
	Результат.Реквизиты.Добавить("Наименование");
	Результат.Реквизиты.Добавить("Направление");
	Результат.Реквизиты.Добавить("Описание");
	Результат.Реквизиты.Добавить("ОценкаStoryPoint");
	Результат.Реквизиты.Добавить("Порядок");
	Результат.Реквизиты.Добавить("Проект");
	Результат.Реквизиты.Добавить("ПроцентВыполнения");
	Результат.Реквизиты.Добавить("СистемаУчета");
	Результат.Реквизиты.Добавить("Статус");
	Результат.Реквизиты.Добавить("ТребуетсяПубликация");
	Результат.Реквизиты.Добавить("Филиал"); 
	
	Возврат Результат;
	
КонецФункции

// Массив имен реквизитов, тексты которых подвергаются семантическому контролю
// 
// Возвращаемое значение:
//  Массив - имена реквизитов, подвергающиеся семантическому анализу
//
Функция РеквизитыСемантическогоАнализа() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить("Описание");
	Массив.Добавить("Наименование");
	
	Возврат Массив;
	
КонецФункции

// Последовательно переводит задачу по статусам от текущего до целевого
//
// Параметры:
//  ЗадачаОбъект  - ДокументОбъект.Задача - объект задача
//  ЦелевойСтатус  - СправочникСсылка.СтатусыОбъектов - конечный статус для установки
//
Процедура ОбработатьПереходЗадачиПоСтатусам(ЗадачаОбъект, Знач ЦелевойСтатус) Экспорт
	
	ЗадачаОбъект.Статус = ЦелевойСтатус;
	ЗадачаОбъект.Записать();
	
КонецПроцедуры

// Создает задачу и объект основание - заявку на разработку.
//
// Параметры:
//  Данные - Структура - Структура данных для создания задачи
// 		* Направление - СправочникСсылка.НаправленияРазработки - Направление, по которому создается задача.
// 		* ЮрЛицо - СправочникСсылка.ЮридическиеЛица - Юридическое лицо по которому создается задача.
// 		* ВидПроцесса - ПеречислениеСсылка.ВидыПроцессов - Вид процесса.
// 		и т.д.
//
// Возвращаемое значение:
//   Структура - структура с данными о результате работы функции
// 		* Успешно - Булево	- Ложь, если была ошибка, иначе Истина.
// 		* ТекстОшибки - Строка - Описание возникшей ошибки.
// 		* Задача - ДокументСсылка.Задача - Ссылка на созданный документ.
//
Функция БыстроеСозданиеЗадачи(Знач Данные) Экспорт
	
	Результат = Новый Структура("Успешно, ТекстОшибки", Истина, "");
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	РезультатПолученияДанныхНаправления = Справочники.НаправленияРазработки.ПолучитьДанныеНаправления(Данные.Направление);

	Если НЕ РезультатПолученияДанныхНаправления.Успешно Тогда
		ЗаполнитьЗначенияСвойств(Результат, РезультатПолученияДанныхНаправления);
		Возврат Результат;
	КонецЕсли;
	
	ДанныеНаправления = РезультатПолученияДанныхНаправления.Данные;
	
	Если ДанныеНаправления.ИспользуетЮрЛица И Данные.ЮрЛицо = Неопределено Тогда
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = "Направление использует юридические лица. Заполните параметр entity.";
		Возврат Результат;
	КонецЕсли;
	
	Если ДанныеНаправления.ИспользуетВидыПроцессов И Данные.ВидПроцесса = Неопределено Тогда
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = "Направление использует виды процессов. Заполните параметр process.";
		Возврат Результат;
	КонецЕсли;
	
	РезультатПолученияДанныхАвтора = Пользователи.ПолучитьДанныеПользователя(Данные.Автор);

	Если НЕ РезультатПолученияДанныхАвтора.Успешно Тогда
		ЗаполнитьЗначенияСвойств(Результат, РезультатПолученияДанныхАвтора);
		Возврат Результат;
	КонецЕсли;
	
	ДанныеАвтора = РезультатПолученияДанныхАвтора.Данные;
	
	Если Данные.Филиал = Неопределено Тогда
		ФилиалЗадачи = ДанныеАвтора.Филиал;
	ИначеЕсли ДанныеАвтора.СвязанныеФилиалы.Найти(Данные.Филиал) <> Неопределено Тогда
		ФилиалЗадачи = Данные.Филиал;
	Иначе
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = "Переданный филиал должен быть в связанных у автора. Измените параметр branch.";
		Возврат Результат;
	КонецЕсли;
	
	// Если прошли все проверки создаем заявку
	НоваяЗаявка = Документы.ЗаявкаНаРазработку.СоздатьДокумент();
	НоваяЗаявка.ДополнительныеСвойства.Вставить("ЭтоСозданиеЗаявкиОснованиеЗадачи");
	
	НоваяЗаявка.УстановитьСсылкуНового(Документы.ЗаявкаНаРазработку.ПолучитьСсылку());
	НоваяЗаявка.УстановитьНовыйНомер(Документы.ЗаявкаНаРазработку.ПолучитьПрефикс());	
	НоваяЗаявка.Автор = Данные.Заказчик;
	НоваяЗаявка.Дата = ТекущаяДата;
	НоваяЗаявка.Наименование = Данные.Наименование;
	НоваяЗаявка.Направление = Данные.Направление;
	НоваяЗаявка.ЮридическоеЛицо = Данные.ЮрЛицо;
	НоваяЗаявка.Назначение =  Данные.Назначение;
	
	Если НоваяЗаявка.Назначение = Справочники.НазначенияЗадач.Ошибка Тогда
		НоваяЗаявка.СерьезностьОшибки = Справочники.СерьезностьОшибок.Средняя; 
	КонецЕсли;
	
	НоваяЗаявка.Описание = Новый ХранилищеЗначения("" + Данные.Описание);
	НоваяЗаявка.ВидПроцесса = Данные.ВидПроцесса;
	НоваяЗаявка.СрокРеализации = Данные.СрокСдачи;	
	НоваяЗаявка.СистемыРазработки.Добавить().Система = Данные.СистемаУчета;
	НоваяЗаявка.ДополнительныеСвойства.Вставить("ОбновитьДатыИзмененийИКоличествоСистем");
	
	НоваяЗадача = Документы.Задача.СоздатьДокумент();
	НоваяЗадача.УстановитьСсылкуНового(Документы.Задача.ПолучитьСсылку());
	НоваяЗадача.УстановитьНовыйНомер(Документы.Задача.ПолучитьПрефикс());	
	НоваяЗадача.Автор = Данные.Автор;
	НоваяЗадача.Дата = ТекущаяДата;
	НоваяЗадача.Заказчик = Данные.Заказчик;
	НоваяЗадача.Наименование = Данные.Наименование;
	НоваяЗадача.Направление = Данные.Направление;
	НоваяЗадача.СистемаУчета = Данные.СистемаУчета;
	НоваяЗадача.Статус = Справочники.СтатусыОбъектов.Новый;
	НоваяЗадача.Назначена = Данные.Исполнитель;
	НоваяЗадача.Филиал = ФилиалЗадачи;
	НоваяЗадача.Назначение = Данные.Назначение;
	НоваяЗадача.СерьезностьОшибки = НоваяЗаявка.СерьезностьОшибки;
	НоваяЗадача.Описание = Новый ХранилищеЗначения("" + Данные.Описание);
	НоваяЗадача.КомандаРазработчиков = ДанныеАвтора.Команда;
	НоваяЗадача.ВидПроцесса = Данные.ВидПроцесса;
	
	Если Данные.ПлановоеВремя > 0 Тогда
		НоваяЗадача.ДополнительныеСвойства.Вставить("ОценкаТрудозатрат", Данные.ПлановоеВремя);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.СрокСдачи) Тогда
		НоваяЗадача.ДополнительныеСвойства.Вставить("СрокСдачи", Данные.СрокСдачи);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		НоваяЗаявка.Записать();
		
		НоваяЗадача.ОбъектОснование = НоваяЗаявка.Ссылка;
		НоваяЗадача.Записать();
		
		Документы.Задача.ОбработатьПереходЗадачиПоСтатусам(НоваяЗадача, Данные.Статус);
				
		ЗафиксироватьТранзакцию();
	Исключение		
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("Задача.БыстроеСозданиеЗадачи", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = "Не удалось записать задачу.";
		Возврат Результат;
	КонецПопытки;
	
	Результат.Вставить("Задача", НоваяЗадача.Ссылка);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Номер");
	Поля.Добавить("Наименование");	
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = СтрШаблон("Задача %1. %2", Данные.Номер, Данные.Наименование);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ДополнитьНомерЗадачи(Знач НомерЗадачи) Экспорт
	
	Если СтрДлина(НомерЗадачи) < Метаданные.Документы.Задача.ДлинаНомера Тогда
		ОписаниеТипаЧисло = ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный);
		НомерЗадачи = Документы.Задача.ПолучитьПрефикс() + Формат(ОписаниеТипаЧисло.ПривестиЗначение(НомерЗадачи), "ЧЦ=10; ЧВН=; ЧГ=");
	КонецЕсли;
	
	Возврат НомерЗадачи;
	
КонецФункции

// Устанавливает ограничения использования полей в динамических списках 
// документа "Задача".
//
// Параметры:
//  Список - ДинамическийСписок - динамический список.
Процедура УстановитьОграниченияСписка(Список) Экспорт
	
	// Поля, исключаемые из отбора, сортировки и группировки
	ИсключаемыеПоля = Новый Массив;
	ИсключаемыеПоля.Добавить("ИндексКартинки");
	ИсключаемыеПоля.Добавить("ПометкаУдаления");
	ИсключаемыеПоля.Добавить("Проведен");
	ИсключаемыеПоля.Добавить("ИмпортированаИзRedmine");
	ИсключаемыеПоля.Добавить("НомерЗадачиRedmine");	
	
	Список.УстановитьОграниченияИспользованияВОтборе(ИсключаемыеПоля);
	Список.УстановитьОграниченияИспользованияВПорядке(ИсключаемыеПоля);
	Список.УстановитьОграниченияИспользованияВГруппировке(ИсключаемыеПоля);
	
КонецПроцедуры

Процедура ОповеститьФилиалТестирования(Знач Задача, Знач СистемаУчета) Экспорт
	
	СвойстваЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "Назначена, Номер, Наименование");
	
	Если ЗначениеЗаполнено(СвойстваЗадачи.Назначена) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СистемыУчетаТестировщики.Филиал КАК Филиал
	|ПОМЕСТИТЬ ФилиалыТестировщики
	|ИЗ
	|	Справочник.СистемыУчета КАК СистемыУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СистемыУчета.Тестировщики КАК СистемыУчетаТестировщики
	|		ПО СистемыУчета.Ссылка = СистемыУчетаТестировщики.Ссылка
	|			И (СистемыУчета.Тестируемая)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО (СистемыУчетаТестировщики.Филиал = Филиалы.Ссылка)
	|ГДЕ
	|	СистемыУчета.Ссылка = &СистемаУчета
	|	И Филиалы.ТипФилиала = ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.QA)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Пользователи.ФИО КАК ИсполнительФИО
	|ИЗ
	|	РегистрСведений.СвойстваЗадач КАК СвойстваЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО СвойстваЗадач.Исполнитель = Пользователи.Ссылка
	|ГДЕ
	|	СвойстваЗадач.Объект = &Задача
	|	И СвойстваЗадач.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ВРаботе)
	|	И НЕ Пользователи.Филиал В
	|				(ВЫБРАТЬ
	|					ФилиалыТестировщики.Филиал
	|				ИЗ
	|					ФилиалыТестировщики)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсполнительФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АдресаПолучателей.Адрес КАК ОбщийКанал,
	|	ФилиалыТестировщики.Филиал КАК Филиал
	|ИЗ
	|	ФилиалыТестировщики КАК ФилиалыТестировщики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АдресаПолучателей КАК АдресаПолучателей
	|		ПО ФилиалыТестировщики.Филиал = АдресаПолучателей.Получатель
	|			И (АдресаПолучателей.Мессенджер = &ОсновнойМессенджер)
	|			И (АдресаПолучателей.Адрес <> """")";

	Запрос.УстановитьПараметр("СистемаУчета", СистемаУчета);
	Запрос.УстановитьПараметр("ОсновнойМессенджер", Константы.ОсновнойМессенджер.Получить());
	Запрос.УстановитьПараметр("Задача", Задача);
	
	Пакеты = Запрос.ВыполнитьПакет();
	
	Если НЕ Пакеты[2].Пустой() Тогда
		Если НЕ Пакеты[1].Пустой() Тогда
			Разработчики = Пакеты[1].Выгрузить().ВыгрузитьКолонку("ИсполнительФИО");
			Разработчик = СтрСоединить(Разработчики, ", ");
			СтрокаРазработчик = "разработчик: ";
			Разделитель = ", ";
		Иначе
			Разработчик = "";
			СтрокаРазработчик = "";
			Разделитель = "";
		КонецЕсли;
		
		ПредставлениеСистемы = Строка(СистемаУчета);
		
		Выборка = Пакеты[2].Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ОбщийКанал) Тогда
				Получатель = Выборка.Филиал;
	
				ШаблонСсылки = ОбщегоНазначения.ПолучитьШаблонНавигационнойСсылки(Задача);
				НаименованиеЗадачи = СтрЗаменить(СвойстваЗадачи.Наименование, "[", "");
				НаименованиеЗадачи = СтрЗаменить(НаименованиеЗадачи, "]", "");
				
				Если ЗначениеЗаполнено(Разработчик) Тогда
					Разработчик = СтрШаблон("*%1*", Разработчик);
				КонецЕсли;
				
				ШаблонТекста =
				":small_orange_diamond: [%1. %2](%3)
				|(%4%5%6%7*%8*)";
				
				ТекстСообщения = СтрШаблон(ШаблонТекста, СвойстваЗадачи.Номер, НаименованиеЗадачи, ШаблонСсылки,
					СтрокаРазработчик, Разработчик, Разделитель, "система разработки: ", ПредставлениеСистемы);
				
				РегистрыСведений.БуферСообщений.Добавить(Перечисления.СпособыОтправкиСообщений.Мессенджер, 
					Получатель, ТекстСообщения, "ОповеститьФилиалТестирования", 
					Перечисления.ТипыСообщенийМессенджера.ОповещениеФилиалаТестирования);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПоследнийРазработчик(Знач Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СвойстваЗадач.Исполнитель КАК Исполнитель
	|ИЗ
	|	РегистрСведений.СвойстваЗадач КАК СвойстваЗадач
	|ГДЕ
	|	СвойстваЗадач.Объект = &Ссылка
	|	И СвойстваЗадач.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ВРаботе)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СвойстваЗадач.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Разработчик = Выборка.Исполнитель;
	Иначе
		Разработчик = Неопределено;
	КонецЕсли;
	
	Возврат Разработчик;
	
КонецФункции

// Возвращает список статусов, которые можно устанавливать при быстром создании задачи
//
// Возвращаемое значение:
//   Массив   - массив статусов
//
Функция ДоступныеСтатусыДляБыстрогоСозданияЗадачи()
	
	Статусы = Новый Массив;	
	Статусы.Добавить(Справочники.СтатусыОбъектов.Новый);
	Статусы.Добавить(Справочники.СтатусыОбъектов.ВРеализацию);
	Статусы.Добавить(Справочники.СтатусыОбъектов.ВРаботе);
	Статусы.Добавить(Справочники.СтатусыОбъектов.Тестирование);
	Статусы.Добавить(Справочники.СтатусыОбъектов.Решен);
	
	Возврат Статусы;	

КонецФункции

#КонецОбласти

#КонецЕсли
