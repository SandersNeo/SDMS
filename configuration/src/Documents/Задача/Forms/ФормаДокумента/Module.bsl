///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

// Хранит список реквизитов, которые должны сохраняться при автосохранении
&НаКлиенте
Перем АвтосохраняемыеРеквизиты Экспорт;

// Список возможных исполнителей задачи. Формируется из автора задачи, заказчика
// и предыдущих исполнителей.
&НаКлиенте
Перем ВозможныеИсполнители;

&НаКлиенте
Перем ДополнительныеСвойства Экспорт; // Дополнительные свойства формы

// Хранит признак неопубликованного комментария
&НаКлиенте
Перем ЕстьНеопубликованныйКомментарий Экспорт;

&НаКлиенте
Перем ИдентификаторФормы Экспорт; // Уникальный идентификатор формы без символа "-"

// Хранит имя последней нажатой кнопки панели навигации
&НаКлиенте
Перем ИмяАктивнойКнопкиПанелиНавигации Экспорт;

// TODO: Для исключения ошибки "Cannot read property of undefined"
// (при записи основной формы в веб клиенте "протухают" подчиненные формы в массиве форм основного окна)
&НаКлиенте
Перем ИскатьПодчиненныеФормы Экспорт;

// Хранит дополнительные данные на время жизни формы, чтобы избежать многократных
// повторных обращений к серверу.
&НаКлиенте
Перем КэшВспомогательныхДанных;

&НаКлиенте
Перем ПредыдущаяОткрытаяВкладка;

// Хранит предыдущий СрокСдачи (который был до изменения в поле СрокаСдачи).
&НаКлиенте
Перем СрокСдачиДоИзменения;

// Хранит положение курсора в текстовом документе для описания
&НаКлиенте
Перем ТекущееПоложениеКурсора Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)   
	
	ОпределитьДоступныеНаправленияРоли();
	
	// Чтение плановых трудозатрат задачи
	ПланТрудозатрат = УчетТрудозатрат.ПолучитьПлановыеТрудозатраты(Объект.Ссылка);
	ТестированиеТрудозатратыПлан = УчетТрудозатрат.ПолучитьПлановыеТрудозатраты(
			Объект.Ссылка, Перечисления.ТипыТрудозатрат.Тестирование);	
	СложностьЗадачи = РегистрыСведений.СложностиЗадач.ПолучитьСложность(Объект.Ссылка);
	НастроитьОтображениеСложности(ТекущийОбъект.Филиал);
		
	НовыйСтатус = ТекущийОбъект.Статус;
	ПричинаИзмененияСтатуса = ОбщегоНазначения.ПолучитьПричинуИзмененияСтатуса(Объект.Ссылка, НовыйСтатус);
	Элементы.ПричинаИзмененияСтатуса.Видимость = ЗначениеЗаполнено(ПричинаИзмененияСтатуса);
		
	//ПараметрыОграничения = РедактированиеОграничено();
	РедакторОписания.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект, НЕ ДоступностьРедактированияОписания);
	
	Если ТекущийОбъект.Статус = Справочники.СтатусыОбъектов.Решен Тогда
		Элементы.ПроцентВыполнения.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если НЕ УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("Администратор") 
		И ПараметрыСеанса.СвязанныеФилиалы.Найти(ТекущийОбъект.Филиал) = Неопределено  
		И ПараметрыСеанса.ДоступныеФилиалыРуководителя.Найти(ТекущийОбъект.Филиал) = Неопределено  
		ИЛИ ТекущийОбъект.Статус = Справочники.СтатусыОбъектов.Решен Тогда
		Элементы.ТребуетсяПубликация.Доступность = Ложь;		
	КонецЕсли;
	
	СрокСдачи = РегистрыСведений.СрокиСдачиЗадач.ПолучитьСрокСдачиЗадачи(Объект.Ссылка);
	Параметры.Свойство("ИмяОткрываемойСтраницы", ИмяОткрываемойСтраницы);
	
	Если ЗначениеЗаполнено(Объект.Статус) И ИндексКартинкиСтатуса <> 0 Тогда
		// Если индекс картинки = 0, это значит что это первые открытие, все вычислиться при создании на сервере
		// здесь должно отрабатывать только при повторном чтении задачи
		НовыйИндексКартинкиСтатуса = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекущийОбъект.Статус, "ИндексКартинки");
		
		Если НовыйИндексКартинкиСтатуса <> ИндексКартинкиСтатуса Тогда 
			ЗаполнитьДоступныеСтатусы();                                   
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияДополнительныхПодсистем.СоздатьЗаполнитьНомерИнцидентаJira(ЭтотОбъект);
	
	Если ДопРеквизитыПодключены Тогда
		ЗаполнитьДанныеИзДополнительныхРеквизитов(); 	
	КонецЕсли;    			

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Проверяем, разрешено ли открыть объект текущему пользователю. В том
	// числе флаг "Ограниченный просмотр". Сообщение пользователю поместим в
	// реквизит формы.
	ЗапретОткрытия = Ложь;
	Безопасность.НастроитьФормуПередОткрытием(ЭтотОбъект, ЗапретОткрытия);	
	
	// Дополнительно проверяем, создается ли объект на основании заявки
	// с признаком "Ограниченный просмотр" или копированием на основании
	// задачи.
	Если ЗапретОткрытия ИЛИ НЕ ПроверитьОбъектОснование(ЭтотОбъект) ИЛИ ОбщегоНазначения.ПроверитьОбъектКопирования(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНовый = Параметры.Ключ.Пустая();
	
	Если ЭтоНовый Тогда	
		Если НЕ Пользователи.ПринадлежитIT() Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Создавать задачи могут только сотрудники IT-отделов.");
			Возврат;
		КонецЕсли;
		
		СсылкаНаОбъектДляАвтосохранения = АвтосохраненияДанных.ПолучитьСсылкуНовогоОбъекта(Объект.Ссылка);		
		ПоказатьОписаниеНазначения = ОбщегоНазначения.НеобходимоПоказатьОписаниеНазначенияОбъектов(Параметры.Ключ);
		
		// Если создается задача для автотеста.
		Если Параметры.Свойство("НаименованиеОснования")  Тогда
			Объект.Наименование = Параметры.НаименованиеОснования;
		КонецЕсли;	
		
		Параметры.Свойство("ЗадачаДляАвтотеста", ЗадачаДляАвтотеста);
		Параметры.Свойство("ИзначальнаяЗадача", ИзначальнаяЗадача);
		
		// Если необходимо создать заявку-основание для задачи.
		Параметры.Свойство("СоздатьЗаявкуОснование", СоздатьЗаявку);
		
		// Заполнение реквизита "Заказчик", если значение передается в параметрах
		Если Параметры.Свойство("Заказчик") Тогда
			Объект.Заказчик = Параметры.Заказчик;
		КонецЕсли;
		
		// Заполнение системы при создании задачи на основании заявки
		Если Параметры.Свойство("Система") Тогда
			РазрабатываемыеСистемы = ПараметрыСеанса.РазрабатываемыеСистемы;
			
			Если РазрабатываемыеСистемы.Найти(Параметры.Система) <> Неопределено Тогда 
				Объект.СистемаУчета = Параметры.Система;
				
				Если Параметры.Свойство("Филиал") Тогда
					ФилиалРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Филиал, "Родитель");
					
					Если ЗначениеЗаполнено(ФилиалРодитель) Тогда 
						Если ФилиалРодитель <> Справочники.Филиалы.КастомныеКоманды Тогда
							Объект.Филиал = ФилиалРодитель;
						КонецЕсли;
						Объект.КомандаРазработчиков = Параметры.Филиал;                  						
					Иначе
						Объект.Филиал = Параметры.Филиал;	
					КонецЕсли;
				КонецЕсли;
			Иначе
				СистемыЗаявки = ПолучитьСписокДоступныхСистем(Параметры.Основание);
				
 				Для Каждого Система Из РазрабатываемыеСистемы Цикл
					Если СистемыЗаявки.Найти(Система) <> Неопределено Тогда
						Объект.СистемаУчета = Система;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ЗначениеЗаполнено(Объект.СистемаУчета) Тогда
					Объект.СистемаУчета = Параметры.Система;
				КонецЕсли; 
				
				Если Параметры.Свойство("Филиал") Тогда
					ФилиалРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Филиал, "Родитель");
					Если ФилиалРодитель = Справочники.Филиалы.КастомныеКоманды Тогда
						Объект.КомандаРазработчиков = Параметры.Филиал;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Если создается задача на составление автотеста
		Если ЗадачаДляАвтотеста Тогда
			Объект.Наименование = Параметры.Наименование;
			ЗаполнитьЗадачуПараметрами(ЗадачаДляАвтотеста);
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Филиал) Тогда
			Объект.Филиал = ПараметрыСеанса.Филиал;	
		КонецЕсли;
		
		ОбщегоНазначения.ЗаполнитьОбъектПервоначальнымиДанными(Объект);
		
		// Формирование списка настроек в группе шаблона.
		ОбновитьСписокШаблонов();
		
		Элементы.КнопкаКомментарийВХранилище.Видимость = Ложь;
			
		Если ЗначениеЗаполнено(Объект.ОбъектОснование) Тогда
			СрокСдачи = ПолучитьСрокРеализацииЗаявки(Объект.ОбъектОснование);
		КонецЕсли;
		
	Иначе
		СсылкаНаОбъектДляАвтосохранения = Объект.Ссылка; 		
		РегистрыСведений.ОчередьСобытийНаОбработку.ОтметитьПросмотренным(Объект.Ссылка);
		
		// Заблокируем возможность изменить объект основание
		Элементы.ОбъектОснование.ТолькоПросмотр = Истина;		
		Элементы.КнопкаОбновитьСписок.Видимость = Ложь;	
		
		УстановитьВозможностьРедактированияРевьюера();
	КонецЕсли;
	
	Параметры.Свойство("ОткрытьКомментарии", ОткрытьКомментарии);
	
	ОбновитьВидимостьВидаПроцесса();
	
	ОбновитьДоступностьВидаПроцесса(Элементы.ВидПроцесса, Объект.ОбъектОснование, Объект.ВидПроцесса);
	
	// Установка видимости группы описания для дайджеста
	РазрешеноРедактирование = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("РедактированиеОписанияИзмененийКЗадачам");
	Элементы.ГруппаДайджестИзменений.Видимость = РазрешеноРедактирование;
	
	ПоследняяПубликация = УстановитьЗаголовокНадписиПоследняяПубликация(Объект.Ссылка);
	
	УстановитьВозможностьРедактироватьСрокСдачи();
	
	// Видимость кнопки открытия в поле Тип задачи
	Элементы.ТипЗадачиТестирования.КнопкаОткрытия = (УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("РуководительГруппыРазработки")
		ИЛИ УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("Администратор"));
		
	ОбновитьДоступностьПоляНаправления();
	ЗаполнитьРольПользователяПоНаправлению();
	
	Если ЗначениеЗаполнено(Объект.ОбъектОснование) Тогда
		// Необходимо проверить, что остались системы доступные для выбора.
		Если СистемыЗаявки = Неопределено Тогда
			МассивСистем = ПолучитьСписокДоступныхСистем(Объект.ОбъектОснование);
		Иначе
			МассивСистем = СистемыЗаявки;
		КонецЕсли;
		
		Если МассивСистем.Количество() <> 0 Тогда	
			Элементы.СистемаУчета.СписокВыбора.ЗагрузитьЗначения(МассивСистем);
			Элементы.СистемаУчета.КнопкаВыбора = Ложь;
			Элементы.СистемаУчета.КнопкаВыпадающегоСписка = Истина;
			Элементы.СистемаУчета.РежимВыбораИзСписка = Истина;  
			
			Если МассивСистем.Найти(Объект.СистемаУчета) = Неопределено Тогда
				Объект.СистемаУчета = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Создание элементов формы для отображения трудозатрат и получение трудозатрат по объекту
	УчетТрудозатрат.КонструкторИнтерфейсаУправленияТрудозатратами(ЭтотОбъект, Элементы.СтраницыДокумента);	
	УчетТрудозатрат.ЗаполнитьТрудозатраты(ЭтотОбъект, Параметры.Ключ.Пустая());
	
	ПредпросмотрИзображение = "";
	
	// Запись количества новых комментариев
	Если Параметры.Свойство("КоличествоНовыхКомментариев") Тогда 
		КоличествоНовыхКомментариев = Параметры.КоличествоНовыхКомментариев;
	КонецЕсли;	
	
	// Запись числа изменений
	Если Параметры.Свойство("ЧислоПрочихИзменений") Тогда
		ЧислоПрочихИзменений = Параметры.ЧислоПрочихИзменений;
	КонецЕсли;
	
	Если Параметры.Свойство("ЧислоВажныхИзменений") Тогда
		ЧислоВажныхИзменений = Параметры.ЧислоВажныхИзменений;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОбъектОснование) И ЗначениеЗаполнено(Объект.СистемаУчета) Тогда 
		// Заполним информативное поле "группа заказчиков направлений"
		ГруппаЗаказчиковНаправлений = ПолучитьДоступнуюГруппуЗаказчиков(Объект.ОбъектОснование, Объект.СистемаУчета);
	КонецЕсли;
	
	// Настройка видимости трудозатрат, спринтов, команд разработчкиков
	// и поля "тип задачи", заполнение настроек видимости по умолчанию. 
	НастроитьВидимостьПолей();
		
	// Для нового документа, если пользователь состоит в команде, заполним ее по умолчанию.
	Если ЭтоНовый 
		И Элементы.КомандаРазработчиков.Видимость 
		И НЕ ЗначениеЗаполнено(Объект.КомандаРазработчиков) Тогда
		
		Объект.КомандаРазработчиков = РегистрыСведений.ЛичныеДела.КомандаПользователя(ПараметрыСеанса.ТекущийПользователь);
	КонецЕсли;
	
	ИнтерфейсПриложения.СформироватьЗаголовокОкнаОбъекта(Объект.ВидРодительскогоПроекта, Заголовок);	
	
	РаботаСТегами.Заполнить(ЭтотОбъект, Элементы.ГруппаСтраницаСвойстваШапка.ЦветФона);
	
	ОбщегоНазначения.ЗаполнитьСписокНазначений(Элементы.Назначение.СписокВыбора);
	ОбщегоНазначения.ЗаполнитьСписокСерьезностьОшибки(Элементы.СерьезностьОшибки.СписокВыбора);
	ОбщегоНазначения.УстановитьВидимостьСерьезности(Элементы.СерьезностьОшибки, Объект.Назначение);
	
	ДополнительныеРеквизиты.ПодключитьДополнительныеРеквизиты(Объект.Ссылка, ЭтотОбъект,, Элементы.ГруппаДопРеквизитыНаФорме.Имя);
	ИнтеграцияДополнительныхПодсистем.ОбработатьСозданныйЭлементФормы(ЭтотОбъект, Объект.Филиал);					
	ДопРеквизитыПодключены = Истина;
	
	ИнтеграцияДополнительныхПодсистем.СоздатьЗаполнитьНомерИнцидентаJira(ЭтотОбъект);
	ИнтеграцияДополнительныхПодсистем.ПодключитьTeamCity(ЭтотОбъект);
	ИнтеграцияДополнительныхПодсистем.ВозможноЗапускатьСборкуTeamCity(ЭтотОбъект, РольПользователя, Объект.Статус);

	// Запретим всем, кроме филиала задачи редактировать описание.	
	Если (УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("РедактированиеЗадачДругихГруппРазработки")
		И ЗначениеЗаполнено(Объект.Статус) 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Статус, "Порядок") < ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтатусыОбъектов.ВРаботе, "Порядок")) Тогда
		
		ДоступностьРедактированияОписания = Истина;
	Иначе
		ДоступностьРедактированияОписания = (ПараметрыСеанса.СвязанныеФилиалы.Найти(Объект.Филиал) <> Неопределено 
			ИЛИ ПараметрыСеанса.ДоступныеФилиалыРуководителя.Найти(Объект.Филиал) <> Неопределено
			ИЛИ Параметры.Ключ.Пустая() ИЛИ УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("Администратор"));
	КонецЕсли;
	
	ПараметрыАвтосохранения = АвтосохраненияДанных.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Программное создание элементов формы для редактирования описания
	РедакторОписания.ПриСозданииНаСервере(ЭтотОбъект, Элементы.СтраницаОписание, НЕ ДоступностьРедактированияОписания, ПараметрыАвтосохранения);
	
	ПанельНавигации.Создать(ЭтотОбъект);
	
	Если ЭтоНовый Тогда
		// Определение ролей и доступных направлений пользователя
		ОпределитьДоступныеНаправленияРоли();
	Иначе
		УстановитьЗаголовокСтраницыЧекЛист(ЭтотОбъект);
		Элементы.СтраницаТестирование.Доступность = Истина;
		ЗаполнитьДанныеИзДополнительныхРеквизитов(); 
	КонецЕсли;

	// Безопасность SDMS. Стандартный блок вызова процедур	
	РазрешенаНастройкаПрав = Безопасность.ПроверитьДоступностьНастройкиПравОбъектов(Объект.Ссылка);
	Элементы.КнопкаНастройкаПравОбъектов.Видимость = РазрешенаНастройкаПрав;
	
	УчетТрудозатрат.ДобавитьВПросмотренныеЗаявки(Объект.Ссылка, Объект.ОбъектОснование);
	
	// Скроем информативное поле "группа заказчиков направлений", если оно пустое
	Если НЕ ЗначениеЗаполнено(ГруппаЗаказчиковНаправлений) Тогда
		Элементы.ГруппаЗаказчиковНаправлений.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Пользователю запрещено просматривать объект. Заполняется при создании на сервере
	Если ЗначениеЗаполнено(СообщениеПользователю) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, СообщениеПользователю);
		Возврат;
	КонецЕсли;
	
	Если ПоказатьОписаниеНазначения Тогда
		ПодключитьОбработчикОжидания("ОткрытьОписаниеНазначенияОбъектов", 0.5, Истина);
	КонецЕсли;
	
	// Вспомогательные данные с сервера
	КэшВспомогательныхДанных = ПолучитьВспомогательныеДанные(Объект.ОбъектОснование, Объект.Ссылка, ЗагруженоАвтосохранение);
	
	АвтосохраненияДанныхКлиент.ПриОткрытии(ЭтотОбъект, КэшВспомогательныхДанных);
		
	// Инициализация хранилища дополнительных свойств формы
	ОбщегоНазначенияКлиент.ИнициализироватьДополнительныеСвойстваФормы(ДополнительныеСвойства);
	
	ОбщегоНазначенияКлиент.ДобавитьДополнительноеСвойствоФормы("АктивнаяСтраницаПанели", ДополнительныеСвойства, Элементы.СтраницаСвойства);
	
	// Нужен для работы с программно-сформированными элементами формы
	ИдентификаторФормы = ОбщегоНазначенияКлиентСервер.СтрУникальныйИдентификатор(УникальныйИдентификатор);
			
	Если КоличествоНовыхКомментариев > 0 ИЛИ ОткрытьКомментарии Тогда
		ПодключитьОбработчикОжидания("ОткрытьНовыеКомментарии", 0.2, Истина);	
	КонецЕсли;
	
	Если ЧислоПрочихИзменений > 0 Или ЧислоВажныхИзменений > 0 Тогда
		ПодключитьОбработчикОжидания("ОткрытьНовыеИзменения", 0.2, Истина);
	КонецЕсли;
		
	Если НЕ Параметры.Ключ.Пустая() И ЗначениеЗаполнено(Объект.ОбъектОснование) 
			И ИнтерфейсПриложенияКлиент.ФормаОткрыта("Обработка.ГрупповоеВнесениеТрудозатрат.Форма.Форма") Тогда
		Оповестить(СобытияОповещенияКлиент.ИмяСобытияОбновленияПросмотренныхЗаявок(), Объект.ОбъектОснование);
	КонецЕсли;
	
	Если СтрДлина(СтатусПредставление) > 16 Тогда
		Элементы.НадписьСтатус.Высота = 2; 
		Элементы.НадписьСтатус.РастягиватьПоВертикали = Истина;
	КонецЕсли;
	
	ПанельНавигацииКлиент.ПриОткрытии(Элементы);  
	
	Если ЗначениеЗаполнено(ИмяОткрываемойСтраницы) Тогда                 
		ПодключитьОбработчикОжидания("ОткрытьСтраницуПанелиНавигации", 0.1, Истина);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	ПанельНавигацииКлиент.ПриПовторномОткрытии(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	НачатьЗамерВремениЗаписиЗадачи(ПараметрыЗаписи);
	
	РедакторОписанияКлиент.ПередЗаписью(ЭтотОбъект, ПараметрыЗаписи, Отказ, Элементы.СтраницаОписание);
	РедакторОписанияКлиент.ПередЗаписью(ЭтотОбъект, ПараметрыЗаписи, Отказ, Элементы.СтраницаТестирование, "ПримечаниеРазработчиков");
	РедакторОписанияКлиент.ПередЗаписью(ЭтотОбъект, ПараметрыЗаписи, Отказ, Элементы.СтраницаТестирование, "ПримечаниеТестировщиков");
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНовый = Параметры.Ключ.Пустая();    
	
	РезультатПроверки = ПроверитьВозможностьСозданияЗадачи(ЭтоНовый, Объект.ОбъектОснование);
	
	Если НЕ РезультатПроверки.РазрешитьСоздание Тогда
		ПоказатьПредупреждение(, РезультатПроверки.ТекстСообщения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ОбъектОснование) И НЕ СоздатьЗаявку Тогда
			ПоказатьВопросОСозданииЗаявки();
			Отказ = Истина;
			Возврат;
		КонецЕсли;		
	Иначе
		СтатусИзменился = (Объект.Статус <> НовыйСтатус);
		
		Если СтатусИзменился Тогда
			// Автоподстановка текущего пользователи в исполнителя при переводе задачи в работу
			СтатусДляПроверки = РаботаСПроцессамиВызовСервера.ПолучитьСсылкуНаСлужебныйСтатус(НовыйСтатус);
			Если СтатусДляПроверки = КэшВспомогательныхДанных.Статус_ВРаботе 
				И НЕ ЗначениеЗаполнено(Объект.Назначена) Тогда		
				Объект.Назначена = КэшВспомогательныхДанных.ТекущийПользователь;
			КонецЕсли;
			
			// Проверка возможности изменения статуса и открытие формы изменения статуса
			Если НЕ ПараметрыЗаписи.Свойство("ПроверкаИзмененияСтатусаПередЗаписью") Тогда
				ПроверкаИзмененияСтатусаПередЗаписью(ПараметрыЗаписи, НовыйСтатус);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		ИначеЕсли СтатусДляПроверки = КэшВспомогательныхДанных.Статус_ВРаботе И НЕ ЗначениеЗаполнено(Объект.Назначена) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен исполнитель.", , "Назначена", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Назначена)
		И НЕ ПараметрыЗаписи.Свойство("ПроверкаОтсутствияНазначенного") Тогда
		
		ПроверкаОтсутствияНазначенногоПередЗаписью(Отказ, ПараметрыЗаписи);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьНеопубликованныйКомментарий Тогда
		ОбщегоНазначенияКлиент.ЗадатьВопросОНеопубликованномКомментарии(ЭтотОбъект, ПараметрыЗаписи);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Элементы.ВидПроцесса.Видимость И НЕ ЗначениеЗаполнено(Объект.ВидПроцесса) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан вид процесса",
			Объект.Ссылка, "ВидПроцесса", "Объект.ВидПроцесса", Отказ);
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ОбработчикАвтосохраненияЗапущен", Истина);
	
	Если ЭтоНовый ИЛИ Модифицированность Тогда
		ПараметрыЗаписи.Вставить("ОбновитьДатыПоследнихИзменений");
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЭтоНовый = Параметры.Ключ.Пустая();

	ТекущийОбъект.ДополнительныеСвойства.Вставить("СложностьЗадачи", СложностьЗадачи);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОценкаТрудозатрат", ПланТрудозатрат); 
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОценкаТрудозатратТестирования", ТестированиеТрудозатратыПлан);
	
	Если Элементы.ОценкаStoryPoint.Видимость Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОценкаStoryPoint", Объект.ОценкаStoryPoint);
	КонецЕсли;
	
	// Добавим сохранение статуса задачи (при необходимости)
	Если ЭтоНовый ИЛИ ТекущийОбъект.Статус <> НовыйСтатус Тогда
		ПараметрыЗаписи.Вставить("ИзменениеСтатусаЗадачи");
		ТекущийОбъект.Статус = НовыйСтатус;
	КонецЕсли;
		
	// Указываем системе, что нужно дополнительно обработать изменение статуса задачи
	Если ПараметрыЗаписи.Свойство("ПроверкаИзмененияСтатусаПередЗаписью") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ПроверкаИзмененияСтатусаПередЗаписью", ПараметрыЗаписи);
	КонецЕсли;
	
	// Указываем системе, что нужно дополнительно обработать изменение объекта
	Если ПараметрыЗаписи.Свойство("ОбновитьДатыПоследнихИзменений") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОбновитьДатыПоследнихИзменений");
	КонецЕсли;
	
	// ИсторияИзменений
	Если ПараметрыЗаписи.Свойство("Комментарий") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("КомментарийСтатуса", ПараметрыЗаписи.Комментарий);
	КонецЕсли;
	
	Если ЭтоНовый Тогда
		ТекущийОбъект.УстановитьСсылкуНового(Документы.Задача.ПолучитьСсылку());
		СсылкаНаОбъект = ТекущийОбъект.ПолучитьСсылкуНового();
		
		// В новом документе СрокСдачи не записывался в регистр при изменении на форме и его нужно будет записать
		Если ЗначениеЗаполнено(СрокСдачи) Тогда	
			ТекущийОбъект.ДополнительныеСвойства.Вставить("СрокСдачи", СрокСдачи);
		КонецЕсли;
	Иначе
		СсылкаНаОбъект = ТекущийОбъект.Ссылка;
	КонецЕсли;
	
	РедакторОписания.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, СсылкаНаОбъект);

	ДобавитьПримечаниеВДополнительныеСвойстваОбъекта("ПримечаниеРазработчиков", ТекущийОбъект, ПараметрыЗаписи);
	ДобавитьПримечаниеВДополнительныеСвойстваОбъекта("ПримечаниеТестировщиков", ТекущийОбъект, ПараметрыЗаписи);

	Если ЗадачаДляАвтотеста Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗадачаДляАвтотеста", ЗадачаДляАвтотеста);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ИзначальнаяЗадача", ИзначальнаяЗадача);
	КонецЕсли;
	
	// Если необходимо создать заявку-основание (при создании задачи без основания).
	Если СоздатьЗаявку Тогда
		РегистрыСведений.ОтслеживаниеИспользованияФункциональности.Добавить("Создание задачи без заявки", ИмяФормы);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СоздатьЗаявкуОснование");
		СоздатьЗаявку = Ложь;
	КонецЕсли;
	
	// Если задача переводится в статус Решен, то установить процент выполнения 100%
	Если НовыйСтатус <> Объект.Статус И НовыйСтатус = Справочники.СтатусыОбъектов.Решен Тогда
		ТекущийОбъект.ПроцентВыполнения = 100;
	КонецЕсли;
	
	ЗаполнитьДополнительныеРеквизиты();
	
	ДополнительныеРеквизиты.ПередЗаписьюОбъекта(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если СпринтыИсходные.Количество() > 0 ИЛИ Спринты.Количество() > 0 Тогда		
		Для Каждого Спринт Из Спринты Цикл
			Если СпринтыИсходные.НайтиПоЗначению(Спринт.Значение) = Неопределено Тогда
				// добавили
				РегистрыСведений.СоставСпринтов.ОбновитьСпринтОбъекта(ТекущийОбъект.Ссылка, Спринт.Значение);
			КонецЕсли;
		КонецЦикла;  
		
		Для Каждого Спринт Из СпринтыИсходные Цикл
			Если Спринты.НайтиПоЗначению(Спринт.Значение) = Неопределено Тогда
				// Удалили
				РегистрыСведений.ПланируемыеТрудозатратыПоСпринтам.Удалить(ТекущийОбъект.Ссылка, Спринт.Значение);
			КонецЕсли;
		КонецЦикла; 
			
		СпринтыИсходные.ЗагрузитьЗначения(Спринты.ВыгрузитьЗначения());
	КонецЕсли;  
	
	ЭтоНовый = Параметры.Ключ.Пустая();
	
	Если ЭтоНовый Тогда
		РаботаСТегамиВызовСервера.Обработать(СписокТегов, ТекущийОбъект.Ссылка);
	КонецЕсли;	
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ИзмениласьОценкаТрудозатрат") Тогда
		ПараметрыЗаписи.Вставить("ИзмениласьОценкаТрудозатрат");
	КонецЕсли;
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ИзмениласьОценкаStoryPoint") Тогда
		ПараметрыЗаписи.Вставить("ИзмениласьОценкаStoryPoint");
	КонецЕсли;
		
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ИзмениласьОценкаТрудозатратТестирования") Тогда
		ПараметрыЗаписи.Вставить("ИзмениласьОценкаТрудозатратТестирования");
	КонецЕсли;
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЕстьИзмененияДляЗаявкиОснования") Тогда
		ПараметрыЗаписи.Вставить("ЕстьИзмененияДляЗаявкиОснования");
	КонецЕсли;
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЕстьИзмененияДляРабочегоСтола") Тогда
		ПараметрыЗаписи.Вставить("ЕстьИзмененияДляРабочегоСтола");
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НастроитьФормуПослеЗаписиНаСервере(ТекущийОбъект);
	
	ИдентификаторФормы = СтрЗаменить(ЭтотОбъект.УникальныйИдентификатор, "-", "");
	
	ПанельНавигации.ОбновитьДоступность(ЭтотОбъект);
		
	РедакторОписания.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, НЕ ДоступностьРедактированияОписания);
	
	ОбновитьДанныеПримечанияПослеЗаписи("ПримечаниеРазработчиков", ТекущийОбъект.ДополнительныеСвойства); 
	ОбновитьДанныеПримечанияПослеЗаписи("ПримечаниеТестировщиков", ТекущийОбъект.ДополнительныеСвойства);
	
	ЗадачаДляАвтотеста = Ложь;
		
	Если ПараметрыЗаписи.ОбработчикАвтосохраненияЗапущен Тогда
		РегистрыСведений.АвтосохраненныеОписания.УдалитьЗаписиПоОбъекту(СсылкаНаОбъектДляАвтосохранения);
		СсылкаНаОбъектДляАвтосохранения = ТекущийОбъект.Ссылка;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Трудозатраты") И ПараметрыЗаписи.Трудозатраты.ЗатратыВремени > 0 Тогда
		ДанныеПоТрудозатратам = УчетТрудозатратВызовСервера.ПолучитьДанныеПоТрудозатратам(ТекущийОбъект.Ссылка);
		ФактическиеЗатратыВремени = ДанныеПоТрудозатратам.КоличествоЧасов;
		ФактическиеТрудозатратыКоманд = ДанныеПоТрудозатратам.ТрудозатратыПоКомандам;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ИзмениласьОценкаТрудозатрат") Тогда
		ОбновитьПодсказкуПлановогоВремениТрудозатрат();
	КонецЕсли;
	
	РазблокироватьДанныеДляРедактирования(, УникальныйИдентификатор);    	
	ЭтотОбъект.ЗаблокированныеОписания.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОповеститьПослеЗаписи(ПараметрыЗаписи);
		
	Если ПараметрыЗаписи.Свойство("ЗакрытьПослеЗаписи") Тогда
		Закрыть();
		
	ИначеЕсли КэшВспомогательныхДанных.ПризнакСозданияЗадачиТестирование
		И НовыйСтатус = КэшВспомогательныхДанных.Статус_Протестирован
		И Объект.Филиал <> КэшВспомогательныхДанных.ТекущийФилиалПользователя Тогда
		
		СвойстваЗадачи = Новый Структура;
		СвойстваЗадачи.Вставить("Ссылка", Объект.Ссылка);
		СвойстваЗадачи.Вставить("Наименование", Объект.Наименование);
		СвойстваЗадачи.Вставить("Направление", Объект.Направление);
		СвойстваЗадачи.Вставить("Автор", Объект.Автор);
		СвойстваЗадачи.Вставить("ВидРодительскогоПроекта", Объект.ВидРодительскогоПроекта);
		СвойстваЗадачи.Вставить("Проект", Объект.Проект);
		СвойстваЗадачи.Вставить("Назначение", Объект.Назначение);
		СвойстваЗадачи.Вставить("СерьезностьОшибки", Объект.СерьезностьОшибки);
		СвойстваЗадачи.Вставить("ВидПроцесса", Объект.ВидПроцесса);
		
		ИнтерфейсПриложенияКлиент.ЗадатьВопросОСозданииЗадачиАвтотеста(СвойстваЗадачи);
	КонецЕсли;
	
	ИскатьПодчиненныеФормы = Ложь;
	
	Если ПараметрыЗаписи.ОбработчикАвтосохраненияЗапущен Тогда
		АвтосохраненияДанныхКлиент.ВыключитьАвтосохранениеОписания(ЭтотОбъект, КэшВспомогательныхДанных);
		ДатаПоследнегоАвтосохранения = Дата(1, 1, 1);
	КонецЕсли;
	
	РедакторОписанияКлиент.ПослеЗаписи(ЭтотОбъект);
	
	Элементы.СтраницаТестирование.Доступность = Истина;
	МодифицированностьДополнительная = Ложь;			
	
	// Конец замера времени записи
	ИнтеграцияДополнительныхПодсистемКлиент.ЗавершитьЗамерВремени(ПараметрыЗаписи.УИДЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СписокСобытий = СтрРазделить(ИмяСобытия, ";");
	ЭтоМассив = СписокСобытий.Количество() > 1; 
	Счетчик = 0;
	
	Для Каждого Событие Из СписокСобытий Цикл	
		ПараметрСобытия = ?(ЭтоМассив, Параметр[Счетчик], Параметр);
		
		Если СобытияОповещенияКлиент.СобытиеДобавленияТрудозатратПоОбъекту(Событие, Объект.Ссылка, ПараметрСобытия) Тогда
			УчетТрудозатратКлиент.ОбновитьОбщиеФактическиеТрудозатраты(ЭтотОбъект);		
		ИначеЕсли Событие = "Документ.ЗаявкаНаРазработку.ИзменениеСистемРазработки" И Объект.ОбъектОснование = Источник Тогда
			Если НЕ ЭтоМассив Тогда
				ПараметрСобытия = ПараметрСобытия[0];
			КонецЕсли;
			Элементы.СистемаУчета.СписокВыбора.ЗагрузитьЗначения(ПараметрСобытия);	 
			
			Если Элементы.СистемаУчета.СписокВыбора.НайтиПоЗначению(Объект.СистемаУчета) = Неопределено Тогда
				Объект.СистемаУчета = Неопределено;
				Элементы.СистемаУчета.ОбновитьТекстРедактирования();
			КонецЕсли;
			
		ИначеЕсли Событие = СобытияОповещенияКлиент.ИмяСобытияИзменениеНаправленияЗаявки() 
			И Объект.ОбъектОснование = Источник
			И Параметры.Ключ.Пустая() Тогда
			
			Объект.Направление = ПараметрСобытия;	
			
		ИначеЕсли Событие = СобытияОповещенияКлиент.ИмяСобытияОбновлениеСпринтовЗадач() Тогда
			
			Если ПараметрСобытия.Найти(Объект.Ссылка) <> Неопределено Тогда 
				НастроитьИЗаполнитьСпринт(Объект.Филиал, Объект.КомандаРазработчиков, Истина);		
			КонецЕсли;
		КонецЕсли;
		
		ПанельНавигацииКлиент.ОбработкаОповещения(ЭтотОбъект, Объект.Ссылка, Событие, ПараметрСобытия, Источник);
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ВидимостьСписок = Настройки.Получить("ВидимостьСписок");
	
	Если ВидимостьСписок <> Неопределено Тогда
		Если ВидимостьСписок.Количество() <> 4 Тогда
			ВидимостьСписок.Очистить();
		Иначе
			Для Каждого Элемент Из ВидимостьСписок Цикл
				Попытка
					Элементы[Элемент.Значение].Видимость = Элемент.Пометка;
				Исключение
					ИмяСобытия = "Ошибка загрузки пользовательских настроек";
					ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , 
						"Ошибка загрузки пользовательских настроек по причине: " + ОписаниеОшибки());
				КонецПопытки;
			КонецЦикла;		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗавершениеРаботы Тогда 		
		Если МодифицированностьДополнительная И НЕ Модифицированность Тогда
			Отказ = Истина;
			Модифицированность = Истина;
			Возврат;
		КонецЕсли;
		
		Если ЕстьНеопубликованныйКомментарий Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиент.ЗадатьВопросОНеопубликованномКомментарии(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ДополнительныеРеквизитыКлиент.ПередЗакрытиемФормы(ЭтотОбъект, ЗавершениеРаботы);
	
	Если НЕ ЗавершениеРаботы Тогда 
		РедакторОписанияВызовСервера.РазблокироватьОписания(УникальныйИдентификатор);
		
		Если ЗначениеЗаполнено(ДатаПоследнегоАвтосохранения) Тогда
			АвтосохраненияДанныхВызовСервера.УдалитьАвтосохраненноеОписание(СсылкаНаОбъектДляАвтосохранения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АвторНажатие(Элемент, СтандартнаяОбработка)
	
	ИнтерфейсПриложенияКлиент.ОткрытьИнформациюОПользователе(ЭтотОбъект, Объект.Автор, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.КопироватьТекстВБуферОбмена(Объект.Дата, "Дата создания скопирована в буфер обмена");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВДайджест(Команда)
	
	ОткрытьФорму("РегистрСведений.ОписаниеИзмененийКЗадачам.Форма.ОписаниеИзменений", Новый Структура("Задача", Объект.Ссылка)); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьЗаписьВЖурналРегистрации(Знач ТекстСообщения, Знач Задача)
	
	ЗаписьЖурналаРегистрации("ДокументЗадача.СтраницыДокументаПриСменеСтраницы",
		УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЗаявкаНаРазработку, Задача, ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикОткрытие(Элемент, СтандартнаяОбработка)
	
	ИнтерфейсПриложенияКлиент.ОткрытьИнформациюОПользователе(ЭтотОбъект, Объект.Заказчик, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРазработчиковОчистка(Элемент, СтандартнаяОбработка)
	
	НастроитьИЗаполнитьСпринт(Объект.Филиал, Объект.КомандаРазработчиков);		
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРазработчиковПриИзменении(Элемент)
	
	НастроитьИЗаполнитьСпринт(Объект.Филиал, Объект.КомандаРазработчиков);		
	
КонецПроцедуры

&НаКлиенте
Процедура НазначенаОткрытие(Элемент, СтандартнаяОбработка)
	
	ИнтерфейсПриложенияКлиент.ОткрытьИнформациюОПользователе(ЭтотОбъект, Объект.Назначена, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначенаПриИзменении(Элемент)
	
	Если Параметры.Ключ.Пустая() И НЕ ЗначениеЗаполнено(Объект.Филиал) Тогда
		Объект.Филиал = ОбщегоНазначенияВызовСервера.ФилиалПользователя(Объект.Назначена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиент.УстановитьСерьезность(Элементы.СерьезностьОшибки, Объект.СерьезностьОшибки, Объект.Назначение);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеРазработкиПриИзменении(Элемент)
	
	ЗаполнитьРольПользователяПоНаправлению();
	
	ОбновитьВидимостьВидаПроцесса();	
	
	Если Элементы.ВидПроцесса.Видимость Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ВидПроцесса) И ЗначениеЗаполнено(Объект.ОбъектОснование) Тогда
			Объект.ВидПроцесса = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ОбъектОснование, "ВидПроцесса");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияКлиент.КопироватьТекстВБуферОбмена(Объект.Номер, "Номер скопирован в буфер обмена");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия 	= Новый Структура("ФиксированныеНастройки", Новый НастройкиКомпоновкиДанных);
	ОписаниеОповещения 	= Новый ОписаниеОповещения("ОбработатьВыборОбъектаОснования", ЭтотОбъект);
	
	ОтборТекущийОбъект = ПараметрыОткрытия.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборТекущийОбъект.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборТекущийОбъект.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка");
	ОтборТекущийОбъект.ПравоеЗначение = Объект.Ссылка;
	ОтборТекущийОбъект.Использование  = Истина;
	
	МассивСтатусов = ИнтерфейсПриложенияКлиент.ПолучитьОграниченияПоСтатусамДляПроекта(КэшВспомогательныхДанных.Статусы);

	ОтборСтатус = ПараметрыОткрытия.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборСтатус.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборСтатус.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");
	ОтборСтатус.ПравоеЗначение = МассивСтатусов;
	ОтборСтатус.Использование  = Истина;

	ОткрытьФорму("Документ.ЗаявкаНаРазработку.ФормаВыбора", ПараметрыОткрытия,
			ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияВызовСервера.ЗаявкаНаРазработкуЯвляетсяЧерновиком(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка   = Ложь;
		Объект.ОбъектОснование = Неопределено;
		ПоказатьПредупреждение(, """Заявка на разработку"" со статусом ""Черновик"" не может быть основанием для задачи.");
	Иначе
		СрокСдачи = ПолучитьСрокРеализацииЗаявки(Объект.ОбъектОснование);
	КонецЕсли;
	
	Объект.СистемаУчета = Неопределено;
	Объект.Направление = ПолучитьНаправлениеЗадачиИлиЗаявки(ВыбранноеЗначение);
	
	ПредыдущаяСистема = ТипЗнч(Объект.ОбъектОснование);
	ОбновитьДоступностьПоляНаправления();

КонецПроцедуры

&НаКлиенте
Процедура ОбъектОснованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ОбъектОснование) Тогда
		СписокСистемУчета = Элементы.СистемаУчета.СписокВыбора;
		СписокДоступныхСистем = ПолучитьСписокДоступныхСистем(Объект.ОбъектОснование);
		СписокСистемУчета.ЗагрузитьЗначения(СписокДоступныхСистем);
		Элементы.СистемаУчета.КнопкаВыбора = Ложь;
		Элементы.СистемаУчета.РежимВыбораИзСписка = Истина;
		Элементы.СистемаУчета.КнопкаВыпадающегоСписка = Истина;	
		
		Если СписокСистемУчета.НайтиПоЗначению(Объект.СистемаУчета) = Неопределено Тогда
			Объект.СистемаУчета = Неопределено;
			Элементы.СистемаУчета.ОбновитьТекстРедактирования();
		КонецЕсли;
		
		Объект.Направление = ПолучитьНаправлениеЗадачиИлиЗаявки(Объект.ОбъектОснование);
		Элементы.НаправлениеРазработки.РежимВыбораИзСписка = Ложь;
		СрокСдачи = ПолучитьСрокРеализацииЗаявки(Объект.ОбъектОснование);
	Иначе
		Элементы.СистемаУчета.КнопкаВыбора = Истина;
		Элементы.СистемаУчета.РежимВыбораИзСписка = Ложь;
		Элементы.СистемаУчета.КнопкаВыпадающегоСписка = Ложь;
		Элементы.НаправлениеРазработки.РежимВыбораИзСписка = Истина;
	КонецЕсли;
	
	ПриИзмененииОбъектОснования();
	ОбновитьДоступностьПоляНаправления();
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокОписанийДляДайджеста(Команда)
	
	ПараметрыОткрытия = Новый Структура("ФиксированныеНастройки", Новый НастройкиКомпоновкиДанных);
					
	ЭлементОтбора = ПараметрыОткрытия.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задача");
	ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
	ЭлементОтбора.Использование = Истина;
	
	ОткрытьФорму("РегистрСведений.ОписаниеИзмененийКЗадачам.ФормаСписка", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОценкаТрудозатратПриИзменении(Элемент)
	
	Если ПланТрудозатрат < РаспределенныеТрудозатраты Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя установить плановое время меньше распределенного на спринты");
		ПланТрудозатрат = РаспределенныеТрудозатраты;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиJira(Команда)  
	
	ИнтеграцияДополнительныхПодсистемКлиент.ПерейтиJira(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоследняяПубликацияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если Параметры.Ключ.Пустая() Тогда
		Возврат;
	КонецЕсли;
			
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Задача", Объект.Ссылка);
	
	ОбработчикЗакрытия = Новый ОписаниеОповещения("ПослеЗакрытияОкнаИсторияПубликации", ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.ИсторияПубликацииЗадач.Форма.ИсторияПубликации", ПараметрыОткрытия,
		ЭтотОбъект, , , , ОбработчикЗакрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНажатииОценкаТрудрозатрат(Элемент, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;                    
	УчетТрудозатратКлиент.ОткрытьФормуПлановогоВремениПоСпринтам(ЭтотОбъект);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПроверкаБлокировкиПримечаниеТестировщиковНажатие(Элемент) 
	
	ПолучитьПримечание("ПримечаниеТестировщиков"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаБлокировкиПримечаниеРазработчиковНажатие(Элемент)
	
	ПолучитьПримечание("ПримечаниеРазработчиков"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивСтатусов = ИнтерфейсПриложенияКлиент.ПолучитьОграниченияПоСтатусамДляПроекта(КэшВспомогательныхДанных.Статусы);
	
	ПараметрыОткрытия  = Новый Структура("ФиксированныеНастройки", Новый НастройкиКомпоновкиДанных);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборОснованияПроект", ЭтотОбъект);
					
	ОтборНеактуальный = ПараметрыОткрытия.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборНеактуальный.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборНеактуальный.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");
	ОтборНеактуальный.ПравоеЗначение = МассивСтатусов;
	ОтборНеактуальный.Использование  = Истина;
					
	ОткрытьФорму("Справочник.Проекты.ФормаВыбора", ПараметрыОткрытия, 
		ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РевьюерОткрытие(Элемент, СтандартнаяОбработка)
	
	ИнтерфейсПриложенияКлиент.ОткрытьИнформациюОПользователе(ЭтотОбъект, Ревьюер, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СерьезностьОшибкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // По умолчанию защита от Ctrl + Shift + F4
	
КонецПроцедуры

&НаКлиенте
Процедура СерьезностьОшибкиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // По умолчанию защита от Shift + F4 
	
КонецПроцедуры

&НаКлиенте
Процедура СпринтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	       
		
	ПараметрыОткрытия = Новый Структура;	
	ПараметрыОткрытия.Вставить("ВидСпринта", ПредопределенноеЗначение("Перечисление.ВидыСпринта.IT")); 
	ПараметрыОткрытия.Вставить("Филиал", Объект.Филиал);
	ПараметрыОткрытия.Вставить("Команда", Объект.КомандаРазработчиков);
	ПараметрыОткрытия.Вставить("ВыбранныеСпринты", Спринты);
	ПараметрыОткрытия.Вставить("ФормаЗадачи", Истина);
		
	УчетТрудозатратКлиент.ОткрытьФормуВыбораСпринта(ЭтотОбъект, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокСдачиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СрокСдачиДоИзменения = СрокСдачи;
	
	Если ЗначениеЗаполнено(СрокСдачи) И НЕ Объект.Ссылка.Пустая() Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуИзменениеСрокаСдачи(СрокСдачи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокСдачиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СрокСдачиДоИзменения = СрокСдачи;
		
КонецПроцедуры

&НаКлиенте
Процедура СрокСдачиПриИзменении(Элемент)
	
	ЭтоНовый = Объект.Ссылка.Пустая();
	
	Если ЭтоНовый И НЕ ЗначениеЗаполнено(СрокСдачи) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ОбщегоНазначенияКлиент.ПроверитьКорректностьНовогоСрока(СрокСдачи, СрокСдачиДоИзменения);
	
	Если РезультатПроверки.Ошибка Тогда
		ПоказатьПредупреждение(, РезультатПроверки.ТекстОшибки);
		СрокСдачи = СрокСдачиДоИзменения;
		Возврат;
	КонецЕсли;
	
	// Для нового объекта ничего не делаем, запишем срок сдачи при первой записи объекта
	Если ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СрокСдачиДоИзменения) Тогда		
		ОткрытьФормуИзменениеСрокаСдачи(СрокСдачи);
	Иначе
		ОбщегоНазначенияВызовСервера.СохранитьСрокСдачи(Объект.Ссылка, СрокСдачи);
	КонецЕсли;
	
	СрокСдачиДоИзменения = СрокСдачи;
		
КонецПроцедуры

&НаКлиенте
Процедура СтатусЗадачиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусЗадачиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Стандартное событие возникающее при переключении с одной страницы на другую
//
// Параметры:
//  Элемент			 - ГруппаФормы - Страницы формы
//  ТекущаяСтраница	 - ГруппаФормы - Текущая страница формы 
//
&НаКлиенте
Процедура СтраницыДокументаПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	
	Функциональность = Неопределено;
	
	Если ТекущаяСтраница = Элементы.СтраницаТестирование Тогда
		Функциональность = "Открытие вкладки ""Тестирование""";	
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЧекЛист Тогда
		Функциональность = "Открытие вкладки ""Чек-лист""";	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Функциональность) Тогда
		ОбщегоНазначенияВызовСервера.ОтслеживаниеИспользованияФункциональностиНаСервере(Функциональность, ИмяФормы);
	КонецЕсли;
	
	Если ПредыдущаяОткрытаяВкладка = Элементы.СтраницаТестирование ИЛИ ТекущаяСтраница = Элементы.СтраницаТестирование Тогда
		РедакторОписанияКлиент.ПриСменеСтраницы(ЭтотОбъект, 
			ПредыдущаяОткрытаяВкладка, Элементы.СтраницаТестирование, "ПримечаниеРазработчиков");
			
		РедакторОписанияКлиент.ПриСменеСтраницы(ЭтотОбъект, 
			ПредыдущаяОткрытаяВкладка, Элементы.СтраницаТестирование, "ПримечаниеТестировщиков");
	КонецЕсли;
		
	Если ПредыдущаяОткрытаяВкладка = Элементы.СтраницаОписание ИЛИ ТекущаяСтраница = Элементы.СтраницаОписание Тогда
		РедакторОписанияКлиент.ПриСменеСтраницы(ЭтотОбъект, ПредыдущаяОткрытаяВкладка, Элементы.СтраницаОписание);
	КонецЕсли;
	
	УчетТрудозатратКлиент.ПриПереключенииСтраницПанели(ЭтотОбъект, Элементы.СтраницыДокумента, ДополнительныеСвойства);
	
	ПредыдущаяОткрытаяВкладка = Элементы.СтраницыДокумента.ТекущаяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура ТегиHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РаботаСТегамиКлиент.ПриНажатии(ЭтотОбъект, ДанныеСобытия.Href);	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТестированиеРезультатПоследнегоТестированияTeamCityОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
			
	ИнтеграцияДополнительныхПодсистемКлиент.ТестированиеРезультатПоследнегоТестированияTeamCityОткрытие(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестированиеТрудозатратыПланПриИзменении(Элемент)
	
	Если ТестированиеТрудозатратыПлан < РаспределенныеТрудозатратыТестирования Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя установить плановое время меньше распределенного на спринты");
		ТестированиеТрудозатратыПлан = РаспределенныеТрудозатратыТестирования;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестированиеЧекЛистПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестированиеПримечаниеРазработчиковПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РедакторОписанияКлиент.ПриНажатииПоляHTMLДокумента(ЭтотОбъект, 
		ДанныеСобытия, СтандартнаяОбработка, , "ПримечаниеРазработчиков");

КонецПроцедуры

&НаКлиенте
Процедура ТестированиеПримечаниеТестировщиковПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РедакторОписанияКлиент.ПриНажатииПоляHTMLДокумента(ЭтотОбъект, 
		ДанныеСобытия, СтандартнаяОбработка, , "ПримечаниеТестировщиков");

КонецПроцедуры

&НаКлиенте
Процедура ФилиалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьВыборФилиала", ЭтотОбъект);
	
	ТипыITФилиалов = Новый Массив();
	ТипыITФилиалов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФилиалов.IT"));
	ТипыITФилиалов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФилиалов.QA"));
	
	ПараметрыОтбора = Новый Структура("ТипФилиала", ТипыITФилиалов);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыОткрытия.Вставить("УстановитьСписок", Истина);
	
	ОткрытьФорму("Справочник.Филиалы.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект,
		КлючУникальности, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 

&НаКлиенте
Процедура ФилиалПриИзменении(Элемент)
	
	ФилиалПриИзмененииНаСервере();
	
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// Табличное поле "ЧекЛист"

&НаКлиенте
Процедура ЧекЛистПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Костыль для исправления ошибки Uncaught TypeError: Cannot read property 'bE' of undefined
	// Ошибка воспроизводится при копировании строки и переключении на вкладку трудозатраты
	// ЗР000034768.
	Если Копирование Тогда
		// Отказ от стандартной обработки. Все операции будут выполняться самостоятельно
		Отказ = Истина;
		
		// Данные строки, которые будут копироваться
		ТекущиеДанные = Элементы.ЧекЛист.ТекущиеДанные;		
		
		НоваяСтрока = Объект.ЧекЛист.Добавить();
		НоваяСтрока.Описание = ТекущиеДанные.Описание;
		
		// Установка фокуса на последней добавленной строке
		Элементы.ЧекЛист.ТекущаяСтрока = Объект.ЧекЛист.Количество() - 1;
		
		// Обновление в заголовке количества элементов чек-листа
		ПодключитьОбработчикОжидания("ОбновитьЗаголовокСтраницыЧекЛист", 0.1, Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистПослеУдаления(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьЗаголовокСтраницыЧекЛист", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И НЕ ОтменаРедактирования Тогда
		ТекущиеДанные = Элементы.ЧекЛист.ТекущиеДанные;
		ТекущиеДанные.Выполнено = Ложь;
		
		ПодключитьОбработчикОжидания("ОбновитьЗаголовокСтраницыЧекЛист", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// Учет трудозатрат

&НаКлиенте
Процедура ДобавитьФактическиеТрудозатраты(Команда)
	
	УчетТрудозатратКлиент.ОбработатьКомандуИнтерфейсаУправленияТрудозатратами(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоФактическимТрудозатратам(Команда)

	УчетТрудозатратКлиент.ОбработатьКомандуИнтерфейсаУправленияТрудозатратами(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокФактическихТрудозатрат(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ШаблонИмениКнопкиСтраницы = ПанельНавигацииКлиентСервер.ШаблонИмениКнопкиСтраницы();	
		ИмяКоманды = СтрШаблон(ШаблонИмениКнопкиСтраницы, Элементы["УправленияТрудозатратами_ОсновнаяСтраница"].Имя);	
		ПанельНавигацииКлиент.НажатиеВнеПанели(ЭтотОбъект, ИмяКоманды); 	
	Иначе
		Элементы.СтраницыДокумента.ТекущаяСтраница = Элементы["УправленияТрудозатратами_ОсновнаяСтраница"];
		СтраницыДокументаПриСменеСтраницы(Элементы.СтраницыДокумента, Элементы.СтраницыДокумента.ТекущаяСтраница); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыНажатие(Элемент, СтандартнаяОбработка)
		
	УчетТрудозатратКлиент.ПереключитьНаВкладкуТрудозатрат(СтандартнаяОбработка, ЭтотОбъект, Элемент.Имя);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура ДобавитьВыделенныйТекстВЧекЛист(Команда)
	
	ВыделенныйТекст = РедакторОписанияКлиент.ПолучитьВыделенныйТекст(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ВыделенныйТекст) Тогда
		СтрокаЧекЛиста = Объект.ЧекЛист.Добавить();
		СтрокаЧекЛиста.Автор = КэшВспомогательныхДанных["ТекущийПользователь"];
		СтрокаЧекЛиста.ДатаДобавления = ПолучитьТекущуюДату();
		СтрокаЧекЛиста.Описание = ВыделенныйТекст;
		
		УстановитьЗаголовокСтраницыЧекЛист(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура("ЗакрытьПослеЗаписи", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФорму(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеФормы", ЭтотОбъект);
	
	Если ВидимостьСписок.Количество() = 0 Тогда 
		ВидимостьСписок.Добавить("ГруппаСвязанныеОбъекты", "Связанные объекты", Истина);
		ВидимостьСписок.Добавить("ГруппаОсновные", "Основные", Истина);
		ВидимостьСписок.Добавить("ГруппаТрудозатраты", "Трудозатраты", Истина);	
		ВидимостьСписок.Добавить("ГруппаСроки", "Сроки", Истина);
	КонецЕсли;	
	
	ВидимостьСписок.ПоказатьОтметкуЭлементов(ОписаниеОповещения, "Отображать следующие элементы");
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьВБуфер(Команда)
			
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиент.КопироватьНавигационнуюСсылкуВБуферОбмена(Объект.Ссылка);
	Иначе
		ПоказатьПредупреждение(, "Данные еще не записаны. Копирование ссылки возможно только после записи данных.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьНаАвтора(Команда)
	
	ЗаполнитьИсполнителя(Объект.Автор);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьНаЗаказчика(Команда)
	
	ЗаполнитьИсполнителя(Объект.Заказчик);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьНаТекущегоПользователя(Команда)
	
	ЗаполнитьИсполнителя(КэшВспомогательныхДанных.ТекущийПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВариантыСсылок(Команда)
		
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ИнтерфейсПриложенияКлиент.ОткрытьОкноНавигационнойСсылки(Объект.Ссылка, ЭтотОбъект, УникальныйИдентификатор);
	Иначе
		ПоказатьПредупреждение(, "Данные еще не записаны. Копирование ссылки возможно только после записи данных.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсториюИсполнителей(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Задача", Объект.Ссылка);
	
	ОбработчикЗакрытия = Новый ОписаниеОповещения("ПослеЗакрытияОкнаИсторииИсполнителей", ЭтотОбъект);
	
	ОткрытьФорму("Документ.Задача.Форма.ИсторияИсполнителей", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОбработчикЗакрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкаПрав(Команда)

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ПолноеИмяФормы", ЭтотОбъект.ИмяФормы);
	ПараметрыОткрытия.Вставить("СсылкаНаОбъект", Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаПравОбъектов", ПараметрыОткрытия, ЭтотОбъект,
		ЭтотОбъект.УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьШаблонКомментарияВЦБ(Команда)
	
	ПараметрыОткрытия = Новый Структура("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.КомментарийВХранилищеЦБ", ПараметрыОткрытия,
		ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура Подключаемый_ЗапуститьСборкуTeamCity(Команда)
	
	ИнтеграцияДополнительныхПодсистемКлиент.ЗапуститьСборкуTeamCity(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельНавигацииНажатие(Команда)
	
	ПанельНавигацииКлиент.Нажатие(ЭтотОбъект, Команда);
			
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПрименитьВыбранныйШаблон(Команда)
	
	ИмяКоманды = Команда.Имя;
	ИдентификаторШаблона = СтрЗаменить(ИмяКоманды, "ШаблонПользователя_", "");
	
	Результат = ПолучитьШаблонПоИдентификатору(ВариантыШаблонов, ИдентификаторШаблона);
	
	Если НЕ Результат.ШаблонНайден Тогда
		Возврат;
	КонецЕсли;
		
	// Заполняем реквизиты.
	Для Каждого Реквизит Из Результат.ДанныеЗаполнения Цикл
		Попытка
			Объект[Реквизит.Ключ] = Реквизит.Значение;
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	НазначениеПриИзменении(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПримечание(Знач ИмяРеквизита, Знач ДопРеквизиты = Неопределено)
	
	Если ДопРеквизиты = Неопределено Тогда
		ДопРеквизиты = ПолучитьИзВременногоХранилища(ЭтотОбъект[ДополнительныеРеквизитыКлиентСервер.ИмяРеквизитаАдреса()]);
		
		Если ТипЗнч(ДопРеквизиты) <> Тип("ТаблицаЗначений") Тогда
			Возврат;
		КонецЕсли;   
	КонецЕсли;

	ЭтотОбъект[ИмяРеквизита] = ПолучитьЗначениеДопРеквизита(ДопРеквизиты, ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов[ИмяРеквизита]);
	Если ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизита]) Тогда
		ХранилищеЗначения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект[ИмяРеквизита], "Описание");
	Иначе
		ХранилищеЗначения = Неопределено;
	КонецЕсли;           
	
	ЗаполнитьРеквизитыРедактораПримечаний(ХранилищеЗначения, ИмяРеквизита);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПоКнопке(Команда)
	
	ИдентификаторСтатуса = СтрЗаменить(Команда.Имя, "УстановитьСтатус_", "");
	
	Для Каждого ЭлементСписка Из КэшСтатусов Цикл
		Если ЭлементСписка.Представление = ИдентификаторСтатуса Тогда
			ОбновитьПредставлениеСтатуса(ЭлементСписка.Значение);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура Шаблоны_ОбновитьСписок(Команда)
	
	ОбновитьСписокШаблонов();
	
КонецПроцедуры

&НаКлиенте
Процедура Шаблоны_Сохранить(Команда)
	
	МассивРеквизитов = ПолучитьСписокРеквизитовДляШаблона();
	ЗаполнитьСоответствиеЗначенийШаблона(МассивРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныЧекЛиста_ЗаполнитьИзШаблона(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеШаблоновЧекЛиста", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЧекЛистЗаполнен", Объект.ЧекЛист.Количество() > 0);
	
	ОткрытьФорму("Справочник.ШаблоныЧекЛиста.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныЧекЛиста_ОткрытьСписок(Команда)
	
	ОткрытьФорму("Справочник.ШаблоныЧекЛиста.ФормаСписка", , ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьПодсказкуПлановогоВремениТрудозатрат()
	
	Если Элементы.ОценкаТрудозатратНадпись.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	ПлановоеВремя = РегистрыСведений.ПланируемыеТрудозатратыПоСпринтам.ПолучитьПодсказкуПлановогоВремени(Объект.Ссылка);
	
	Подсказка = ПлановоеВремя.Подсказка;
	Элементы.ОценкаТрудозатрат.Подсказка = Подсказка; 
	
	РаспределенныеТрудозатраты = ПлановоеВремя.Трудозатраты;
	
	Если ПлановоеВремя.Свойство("ПодсказкаТестирование") Тогда
		Элементы.ТестированиеТрудозатратыПлан.Подсказка = ПлановоеВремя.ПодсказкаТестирование;
		РаспределенныеТрудозатратыТестирования = ПлановоеВремя.ТрудозатратыТестирование;
	КонецЕсли;
	
	Элементы.ТестированиеТрудозатратыФакт.Подсказка = ПодсказкаПоСринтам();

КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьСтраницуПанелиНавигации() Экспорт
	
	ПанельНавигацииКлиент.ОткрытьСтраницуНаФорме(ЭтотОбъект, ИмяОткрываемойСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапуститьАвтосохранениеОписания()
	
	АвтосохраненияДанныхКлиент.ЗапуститьАвтосохранениеОписания(ЭтотОбъект, КэшВспомогательныхДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗадатьВопросВосстановленияОписания()
	
	АвтосохраненияДанныхКлиент.ЗадатьВопросОВосстановленииОписания(ЭтотОбъект, КэшВспомогательныхДанных, "текущей задачи");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьНезакрытыйПериодПриостановки(Ссылка)
	
	Возврат ОбщегоНазначения.ЕстьНезакрытыйПериодПриостановкиЗадачи(Ссылка);
	
КонецФункции

&НаСервере
Процедура ИзменитьВводПлановыхТрудозатратДляСпринта()  
	
	ЗаполненСпринт = Спринты.Количество() > 0; 
	
	Элементы.ОценкаТрудозатратНадпись.Видимость = ЗаполненСпринт;
	Элементы.ОценкаТрудозатрат.Видимость = НЕ ЗаполненСпринт;
	Элементы.ТестированиеТрудозатратыЛланНадпись.Видимость = ЗаполненСпринт;
	Элементы.ТестированиеТрудозатратыПлан.Видимость = НЕ ЗаполненСпринт;
	Элементы.ТестированиеТрудозатратыФактНадпись.Видимость = ЗаполненСпринт;
	Элементы.ТестированиеТрудозатратыФакт.Видимость = НЕ ЗаполненСпринт;	
	
	Если НЕ ЗаполненСпринт Тогда
		ОбновитьПодсказкуПлановогоВремениТрудозатрат();
	Иначе
		ТестированиеТрудозатратыПлан = УчетТрудозатрат.ПолучитьПлановыеТрудозатраты(
			Объект.Ссылка, Перечисления.ТипыТрудозатрат.Тестирование);
	КонецЕсли;   
		
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВыборФилиала(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранныйЭлемент) = Тип("СправочникСсылка.Филиалы") Тогда
		НовоеЗначение = ВыбранныйЭлемент;
	Иначе
		НовоеЗначение = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
	Если Объект.Филиал <> НовоеЗначение Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Объект.Филиал = НовоеЗначение;
	
	ФилиалПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеРеквизиты()
	
	ИмяРеквизитаАдреса = ДополнительныеРеквизитыКлиентСервер.ИмяРеквизитаАдреса();
	
	ТаблицаДопРеквизиты = ПолучитьИзВременногоХранилища(ЭтотОбъект[ИмяРеквизитаАдреса]);
	
	Если ТипЗнч(ТаблицаДопРеквизиты) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ВидыРеквизитов = ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов;
	
	Строка = ТаблицаДопРеквизиты.Найти(ВидыРеквизитов.ЧекЛистТестирования, "ВидРеквизита");
	Если Строка <> Неопределено Тогда
		Строка.Значение = ТестированиеЧекЛист;
	ИначеЕсли ЗначениеЗаполнено(ТестированиеЧекЛист) Тогда
		НоваяСтрока = ТаблицаДопРеквизиты.Добавить();
		НоваяСтрока.ВидРеквизита = ВидыРеквизитов.ЧекЛистТестирования;
		НоваяСтрока.Значение = ТестированиеЧекЛист;
	КонецЕсли;
	
	Строка = ТаблицаДопРеквизиты.Найти(ВидыРеквизитов.РевьюерОбъекта, "ВидРеквизита");
	Если Строка <> Неопределено Тогда
		Строка.Значение = Ревьюер;
	ИначеЕсли ЗначениеЗаполнено(Ревьюер) Тогда
		НоваяСтрока = ТаблицаДопРеквизиты.Добавить();
		НоваяСтрока.ВидРеквизита = ВидыРеквизитов.РевьюерОбъекта;
		НоваяСтрока.Значение = Ревьюер;
	КонецЕсли;
	
	ЭтотОбъект[ИмяРеквизитаАдреса] = ПоместитьВоВременноеХранилище(ТаблицаДопРеквизиты, ЭтотОбъект[ИмяРеквизитаАдреса]);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеСтатусы()
	
	// Если задача создается от заявки с определенным статусом, то нужно изменить заполнение списка статусов
	Если Параметры.Ключ.Пустая() И Параметры.Свойство("Статус") Тогда
		НовыйСтатус = Параметры.Статус;
		
		ДанныеСтатусов = РаботаСПроцессами.ПолучитьТаблицуДанныхСтатусов();
		НоваяСтрока = ДанныеСтатусов.Добавить();
		НоваяСтрока.Ссылка = НовыйСтатус;
		НоваяСтрока.Представление = Строка(НовыйСтатус);
		НоваяСтрока.ТекущийСтатус = Истина;
		
		СтатусДляКартинки = РаботаСПроцессами.ПолучитьСсылкуНаСлужебныйСтатус(НовыйСтатус);
		
		СвойстваСтатуса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтатусДляКартинки, 
			"ИмяПредопределенныхДанных, ИндексКартинки");
		
		НоваяСтрока.ИмяПредопределенныхДанных = СвойстваСтатуса.ИмяПредопределенныхДанных;
		НоваяСтрока.ИндексКартинки = СвойстваСтатуса.ИндексКартинки;
	Иначе
		ДанныеСтатусов = РаботаСПроцессами.ПолучитьСписокСтатусовДляПерехода(Объект.Ссылка,
			Объект.Статус, РольПользователя, Объект.Филиал, Объект.КомандаРазработчиков);
	КонецЕсли;
		
	ИдентификаторыСтатусов = СтрРазделить(ХранилищеСтатусов, ",", Ложь);
	
	Для Каждого ИдентификаторСтатуса Из ИдентификаторыСтатусов Цикл
		Элементы.Удалить(Элементы["КнопкаСтатуса_" + ИдентификаторСтатуса]);
		Команды.Удалить(Команды.Найти("УстановитьСтатус_" + ИдентификаторСтатуса));
	КонецЦикла;
	
	ХранилищеСтатусов = "";
	
	// Определяем, есть среди статусов те, которые помечены "БыстрыйДоступ"
	ОтборБыстрогоДоступа = Новый Структура("БыстрыйДоступ", Истина);
	НайденныеСтроки = ДанныеСтатусов.НайтиСтроки(ОтборБыстрогоДоступа);
	ЕстьСтатусыБыстрогоДоступа = (НайденныеСтроки.Количество() > 0);
	
	// Если есть статусы с пометкой быстрого доступа, они будут выводиться
	// кнопками, остальные будут выводиться в отдельном подменю. Если все
	// статусы без пометки быстрого доступа, то они будут выведены кнопками
	ПодменюДополнительныхСтатусов = Элементы.ПодменюДополнительныхСтатусовПерехода;
	ГруппаДополнительныхСтатусов = Элементы.КоманднаяПанельДополнительныеСтатусыПерехода;
	
	Для Каждого СтруктураСтатуса Из ДанныеСтатусов Цикл
		СвойстваСтатуса = Новый Структура("Ссылка, Наименование, ИндексКартинки");
		ЗаполнитьЗначенияСвойств(СвойстваСтатуса, СтруктураСтатуса);
		СвойстваСтатуса.Наименование = СтруктураСтатуса.Представление;
		КэшСтатусов.Добавить(СвойстваСтатуса, СтруктураСтатуса.Идентификатор);		
		
		Попытка
			Картинка = БиблиотекаКартинок["Статус" + СтруктураСтатуса.ИмяПредопределенныхДанных];
		Исключение
			Картинка = Новый Картинка;
		КонецПопытки;
		
		// Для текущего статуса задачи не создается кнопка
		Если СтруктураСтатуса.ТекущийСтатус = Истина Тогда
			НовыйСтатус = СтруктураСтатуса.Ссылка;
			ИндексКартинкиСтатуса = СтруктураСтатуса.ИндексКартинки;
			СтатусПредставление = СтруктураСтатуса.Представление;
			Продолжить;
		КонецЕсли;
		
		ИдентификаторСтатуса = СтруктураСтатуса.Идентификатор;
		ХранилищеСтатусов = ХранилищеСтатусов + ИдентификаторСтатуса + ",";
		
		ИмяКоманды = "УстановитьСтатус_" + ИдентификаторСтатуса;
		
		КомандаФормы = Команды.Найти(ИмяКоманды);
		Если КомандаФормы = Неопределено Тогда
			КомандаФормы = Команды.Добавить(ИмяКоманды);
			КомандаФормы.Действие = "УстановитьСтатусПоКнопке";
		КонецЕсли;
		
		Если НЕ ЕстьСтатусыБыстрогоДоступа ИЛИ (ЕстьСтатусыБыстрогоДоступа И СтруктураСтатуса.БыстрыйДоступ) Тогда
			НоваяКнопка = Элементы.Вставить("КнопкаСтатуса_" + ИдентификаторСтатуса, Тип("КнопкаФормы"), ГруппаДополнительныхСтатусов, ПодменюДополнительныхСтатусов);
		Иначе
			НоваяКнопка = Элементы.Добавить("КнопкаСтатуса_" + ИдентификаторСтатуса, Тип("КнопкаФормы"), ПодменюДополнительныхСтатусов);
		КонецЕсли;
		
		НоваяКнопка.Заголовок = СтруктураСтатуса.Представление;
		НоваяКнопка.ИмяКоманды = КомандаФормы.Имя;
		НоваяКнопка.Картинка = Картинка;
		НоваяКнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КонецЦикла;
	
	Элементы.ГруппаУправлениеСтатусом.Видимость = (ДанныеСтатусов.Количество() > 1);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗадачуПараметрами(ЭтоЗадачаАвтотеста)
	
	НастройкиЗаполненияЗадачи = Новый Структура;
	НастройкиЗаполненияЗадачи.Вставить("ПрефиксЗадачиАвтотеста", "");
	НастройкиЗаполненияЗадачи.Вставить("ТипДляЗадачиАвтотеста", Справочники.ВидыЗадач.ПустаяСсылка());
	
	НастройкиЗаполненияЗадачи.Вставить("НазначениеДополнительныхЗадач", Справочники.НазначенияЗадач.ПустаяСсылка());
	НастройкиЗаполненияЗадачи.Вставить("НаправлениеДополнительныхЗадач", Справочники.НаправленияРазработки.ПустаяСсылка());
	НастройкиЗаполненияЗадачи.Вставить("СистемаУчетаДополнительныхЗадач", Справочники.СистемыУчета.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНастроекФилиалов.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	ЕСТЬNULL(НастройкиФилиалов.Значение, НЕОПРЕДЕЛЕНО) КАК Значение
	|ИЗ
	|	ПланВидовХарактеристик.ВидыНастроекФилиалов КАК ВидыНастроекФилиалов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиФилиалов КАК НастройкиФилиалов
	|		ПО (НастройкиФилиалов.Филиал = &Филиал)
	|			И ВидыНастроекФилиалов.Ссылка = НастройкиФилиалов.Настройка
	|ГДЕ
	|	ВидыНастроекФилиалов.Ссылка В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.ПрефиксЗадачиАвтотеста), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.ТипДляЗадачиАвтотеста), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.НазначениеДополнительныхЗадач), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.НаправлениеДополнительныхЗадач), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.СистемаУчетаДополнительныхЗадач))";
	
	Запрос.УстановитьПараметр("Филиал", ПараметрыСеанса.Филиал);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Значение <> Неопределено Тогда
			НастройкиЗаполненияЗадачи[Выборка.ИмяПредопределенныхДанных] = Выборка.Значение;
		КонецЕсли;
	КонецЦикла;
	
	ПрефиксЗадачи = НастройкиЗаполненияЗадачи.ПрефиксЗадачиАвтотеста;  
	ТипЗадачи = НастройкиЗаполненияЗадачи.ТипДляЗадачиАвтотеста;
		
	Объект.Наименование = ПрефиксЗадачи + ". " + Объект.Наименование;
	Объект.ВидЗадачи = ТипЗадачи;
	Объект.СистемаУчета = НастройкиЗаполненияЗадачи.СистемаУчетаДополнительныхЗадач;
	Объект.Назначение = НастройкиЗаполненияЗадачи.НазначениеДополнительныхЗадач;
	Объект.Направление = НастройкиЗаполненияЗадачи.НаправлениеДополнительныхЗадач;
	Объект.Заказчик = ПараметрыСеанса.ТекущийПользователь;
	Объект.Филиал = ПараметрыСеанса.Филиал;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителя(Знач Пользователь)
	
	Объект.Назначена = Пользователь;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыРедактораПримечаний(Знач ХранилищеЗначения, Знач ИмяРеквизита)
	
	Если ХранилищеЗначения <> Неопределено Тогда
		ДопОписание = ХранилищеЗначения.Получить();
	Иначе
		ДопОписание = "";
	КонецЕсли;
	
	Редактор = РедакторОписанияКлиентСервер.ИмяРеквизита(ИмяРеквизита); 
	Блокировка = РедакторОписанияКлиентСервер.ИмяНадписиБлокировкаОписания(ИмяРеквизита);
			
	Если ЗаблокированныеОписания.НайтиПоЗначению(ИмяРеквизита) = Неопределено Тогда
		
		ЭтотОбъект[РедакторОписанияКлиентСервер.ИмяРеквизитаАктуальноеОписание(ИмяРеквизита)] = ДопОписание;	
		Результат = РедакторОписанияВызовСервера.ЗаблокироватьОписание(УникальныйИдентификатор, ЭтотОбъект[ИмяРеквизита], Истина);  
		ЭтотОбъект[Редактор] = РедакторОписанияВызовСервера.ПолучитьРедактор(ДопОписание,, НЕ Результат.Успешно); 
		Элементы["Группа" + Блокировка].Видимость = НЕ Результат.Успешно;
		Элементы[Блокировка].Заголовок = Результат.ТекстОшибки;
		
		ОбновитьВерсиюПримечания(ЭтотОбъект[ИмяРеквизита]);
	Иначе           
		// Заблокировано текущим документом. 
		// Если объект перечитывали, то флаг модифицированности пропадает. 
		// Если были не сохранены изменения описания, тог нужно вернуть флаг модифицированности на форму.
		// После перечитывания нет никакого вызова клиентского метода, что бы его вернуть.
		// Поэтому добавляю некий другой флаг. Перед закрытием формы если он включен, то сообщитить о необходимости сохранения.
		МодифицированностьДополнительная = Истина; 				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРольПользователяПоНаправлению()
	
	РольПользователя = ОбщегоНазначения.РольПользователяВНаправлении(Объект.Направление);
	ЗаполнитьДоступныеСтатусы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеИзДополнительныхРеквизитов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СвойстваЗадач.Исполнитель КАК Исполнитель,
	|	СвойстваЗадач.Статус КАК Статус,
	|	СвойстваЗадач.Период КАК Период
	|ПОМЕСТИТЬ ИсполнителиЗадачи
	|ИЗ
	|	РегистрСведений.СвойстваЗадач КАК СвойстваЗадач
	|ГДЕ
	|	СвойстваЗадач.Объект = &Задача
	|	И СвойстваЗадач.Статус В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ВРаботе), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Тестирование))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвойстваЗадач.Исполнитель,
	|	СвойстваЗадач.ПользовательскийСтатус,
	|	СвойстваЗадач.Период
	|ИЗ
	|	РегистрСведений.СвойстваЗадач КАК СвойстваЗадач
	|ГДЕ
	|	СвойстваЗадач.Объект = &Задача
	|	И СвойстваЗадач.ПользовательскийСтатус = &TestReview
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛичныеДела.Период КАК Период,
	|	ЛичныеДела.Сотрудник КАК Сотрудник,
	|	ВЫРАЗИТЬ(ЛичныеДела.Данные КАК Справочник.Филиалы) КАК Филиал
	|ПОМЕСТИТЬ ФилиалыПользователей
	|ИЗ
	|	ИсполнителиЗадачи КАК ИсполнителиЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела КАК ЛичныеДела
	|		ПО ИсполнителиЗадачи.Исполнитель = ЛичныеДела.Сотрудник
	|			И (ЛичныеДела.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФилиалыПользователей.Сотрудник КАК Сотрудник,
	|	ФилиалыПользователей.Филиал КАК Филиал,
	|	ФилиалыПользователей.Период КАК ДатаНачала,
	|	МИНИМУМ(ЕСТЬNULL(ФилиалыПользователей1.Период, &ТекущаяДата)) КАК ДатаОкончания
	|ПОМЕСТИТЬ ПериодыНахожденияВФилиале
	|ИЗ
	|	ФилиалыПользователей КАК ФилиалыПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФилиалыПользователей КАК ФилиалыПользователей1
	|		ПО ФилиалыПользователей.Сотрудник = ФилиалыПользователей1.Сотрудник
	|			И ФилиалыПользователей.Период < ФилиалыПользователей1.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ФилиалыПользователей.Период,
	|	ФилиалыПользователей.Сотрудник,
	|	ФилиалыПользователей.Филиал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛичныеДела.Период КАК Период,
	|	ЛичныеДела.Сотрудник КАК Сотрудник,
	|	Должности.РольВОтделеIT КАК Роль
	|ПОМЕСТИТЬ РолиПользователей
	|ИЗ
	|	ИсполнителиЗадачи КАК ИсполнителиЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела КАК ЛичныеДела
	|		ПО ИсполнителиЗадачи.Исполнитель = ЛичныеДела.Сотрудник
	|			И (ЛичныеДела.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПринятНаДолжность))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
	|		ПО (Должности.Ссылка = (ВЫРАЗИТЬ(ЛичныеДела.Данные КАК Справочник.Должности)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РолиПользователей.Сотрудник КАК Сотрудник,
	|	РолиПользователей.Роль КАК Роль,
	|	РолиПользователей.Период КАК ДатаНачала,
	|	МИНИМУМ(ЕСТЬNULL(РолиПользователей1.Период, &ТекущаяДата)) КАК ДатаОкончания
	|ПОМЕСТИТЬ ПериодыРолей
	|ИЗ
	|	РолиПользователей КАК РолиПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РолиПользователей КАК РолиПользователей1
	|		ПО РолиПользователей.Сотрудник = РолиПользователей1.Сотрудник
	|			И РолиПользователей.Период < РолиПользователей1.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	РолиПользователей.Период,
	|	РолиПользователей.Сотрудник,
	|	РолиПользователей.Роль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсполнителиЗадачи.Исполнитель КАК Исполнитель,
	|	ИсполнителиЗадачи.Статус КАК Статус,
	|	ПериодыРолей.Роль КАК Роль,
	|	ПериодыНахожденияВФилиале.Филиал КАК Филиал
	|ПОМЕСТИТЬ ИсполнительСтатусФилиалРоль
	|ИЗ
	|	ИсполнителиЗадачи КАК ИсполнителиЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодыНахожденияВФилиале КАК ПериодыНахожденияВФилиале
	|		ПО ИсполнителиЗадачи.Исполнитель = ПериодыНахожденияВФилиале.Сотрудник
	|			И (ИсполнителиЗадачи.Период МЕЖДУ ПериодыНахожденияВФилиале.ДатаНачала И ПериодыНахожденияВФилиале.ДатаОкончания)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодыРолей КАК ПериодыРолей
	|		ПО ИсполнителиЗадачи.Исполнитель = ПериодыРолей.Сотрудник
	|			И (ИсполнителиЗадачи.Период МЕЖДУ ПериодыРолей.ДатаНачала И ПериодыРолей.ДатаОкончания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсполнительСтатусФилиалРоль.Исполнитель КАК Исполнитель,
	|	ИсполнительСтатусФилиалРоль.Статус КАК Статус,
	|	ИсполнительСтатусФилиалРоль.Роль КАК Роль,
	|	ИсполнительСтатусФилиалРоль.Филиал КАК Филиал
	|ПОМЕСТИТЬ ИсполнителиСТрудозатратами
	|ИЗ
	|	ИсполнительСтатусФилиалРоль КАК ИсполнительСтатусФилиалРоль
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК Трудозатраты
	|		ПО ИсполнительСтатусФилиалРоль.Исполнитель = Трудозатраты.Пользователь
	|			И (&Задача = Трудозатраты.Объект)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсполнительСтатусФилиалРоль.Исполнитель КАК Исполнитель,
	|	ИсполнительСтатусФилиалРоль.Статус КАК Статус
	|ИЗ
	|	ИсполнительСтатусФилиалРоль КАК ИсполнительСтатусФилиалРоль
	|ГДЕ
	|	ИсполнительСтатусФилиалРоль.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ВРаботе)
	|	И ИсполнительСтатусФилиалРоль.Роль <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.Тестировщик)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИсполнительСтатусФилиалРоль.Исполнитель,
	|	ИсполнительСтатусФилиалРоль.Статус
	|ИЗ
	|	ИсполнителиСТрудозатратами КАК ИсполнительСтатусФилиалРоль
	|ГДЕ
	|	ИсполнительСтатусФилиалРоль.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Тестирование)
	|	И ИсполнительСтатусФилиалРоль.Роль = ЗНАЧЕНИЕ(Справочник.РолиПользователей.Тестировщик)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИсполнительСтатусФилиалРоль.Исполнитель,
	|	ИсполнительСтатусФилиалРоль.Статус
	|ИЗ
	|	ИсполнителиСТрудозатратами КАК ИсполнительСтатусФилиалРоль
	|ГДЕ
	|	ИсполнительСтатусФилиалРоль.Статус = &TestReview
	|	И ИсполнительСтатусФилиалРоль.Роль = ЗНАЧЕНИЕ(Справочник.РолиПользователей.Тестировщик)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИсполнительСтатусФилиалРоль.Исполнитель,
	|	ИсполнительСтатусФилиалРоль.Статус
	|ИЗ
	|	ИсполнителиСТрудозатратами КАК ИсполнительСтатусФилиалРоль
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО ИсполнительСтатусФилиалРоль.Филиал = Филиалы.Ссылка
	|			И (Филиалы.ТипФилиала = ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.QA))
	|ГДЕ
	|	ИсполнительСтатусФилиалРоль.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Тестирование)
	|	И ИсполнительСтатусФилиалРоль.Роль <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.Тестировщик)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИсполнительСтатусФилиалРоль.Исполнитель,
	|	ИсполнительСтатусФилиалРоль.Статус
	|ИЗ
	|	ИсполнителиСТрудозатратами КАК ИсполнительСтатусФилиалРоль
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО ИсполнительСтатусФилиалРоль.Филиал = Филиалы.Ссылка
	|			И (Филиалы.ТипФилиала = ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.QA))
	|ГДЕ
	|	ИсполнительСтатусФилиалРоль.Статус = &TestReview
	|	И ИсполнительСтатусФилиалРоль.Роль <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.Тестировщик)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Трудозатраты.Затрата) КАК Затрата
	|ИЗ
	|	РегистрСведений.Трудозатраты КАК Трудозатраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Трудозатраты КАК ДокументТрудозатрат
	|		ПО Трудозатраты.Регистратор = ДокументТрудозатрат.Ссылка
	|ГДЕ
	|	(ВЫРАЗИТЬ(Трудозатраты.Объект КАК Документ.Задача)) = &Задача
	|	И Трудозатраты.РольПользователя = ЗНАЧЕНИЕ(Справочник.РолиПользователей.Тестировщик)";
	
	Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
	Запрос.УстановитьПараметр("TestReview", Справочники.СтатусыОбъектов.ПолучитьСтатусTestReview());
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Пакет = Запрос.ВыполнитьПакет();
	ВыборкаРазработчикиТестировщики = Пакет[Пакет.ВГраница() - 1].Выбрать();
	ВыборкаТрудозатратыНаТестирование = Пакет[Пакет.ВГраница()].Выбрать();
	
	ТестированиеРазработчики.Очистить();
	ТестированиеТестировщики.Очистить();

	Если ВыборкаТрудозатратыНаТестирование.Следующий() Тогда
		ТестированиеТрудозатратыФакт = ВыборкаТрудозатратыНаТестирование.Затрата;
	КонецЕсли;
	
	Пока ВыборкаРазработчикиТестировщики.Следующий() Цикл
		Если ВыборкаРазработчикиТестировщики.Статус = Справочники.СтатусыОбъектов.ВРаботе Тогда
			ТестированиеРазработчики.Добавить(ВыборкаРазработчикиТестировщики.Исполнитель);
		Иначе                                  
			ТестированиеТестировщики.Добавить(ВыборкаРазработчикиТестировщики.Исполнитель);
		КонецЕсли;
	КонецЦикла;
	
	ДопРеквизиты = ПолучитьИзВременногоХранилища(ЭтотОбъект[ДополнительныеРеквизитыКлиентСервер.ИмяРеквизитаАдреса()]);
	
	Если ТипЗнч(ДопРеквизиты) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ВидыРеквизитов = ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов;
	
	ТестированиеЧекЛист = ПолучитьЗначениеДопРеквизита(ДопРеквизиты, ВидыРеквизитов.ЧекЛистТестирования);
	
	ИнтеграцияДополнительныхПодсистем.ЗаполнитьДополнительныеРеквизитыTeamCity(ЭтотОбъект, ДопРеквизиты);
		
	ТестированиеЗадачаНаАвтотесты = ПолучитьЗначениеДопРеквизита(ДопРеквизиты, ВидыРеквизитов.ЗадачаНаАвтотесты);
	
	ПолучитьИзображенияТестирования();
	ПолучитьПримечание("ПримечаниеРазработчиков", ДопРеквизиты);
	ПолучитьПримечание("ПримечаниеТестировщиков", ДопРеквизиты);
	
	Ревьюер = ПолучитьЗначениеДопРеквизита(ДопРеквизиты, ВидыРеквизитов.РевьюерОбъекта);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьПолей()
	
	Если ЗначениеЗаполнено(Объект.Филиал) Тогда
		ФилиалЗадачи = Объект.Филиал;
	Иначе
		ФилиалЗадачи = ПараметрыСеанса.Филиал;
	КонецЕсли;
	
	НастроитьГруппуТрудозатраты();
	
	НастроитьИЗаполнитьСпринт(ФилиалЗадачи, Объект.КомандаРазработчиков);
				
	УстановитьВидимостьТипаЗадачи(ФилиалЗадачи);	
			
	НастроитьКомандыРазработчиков(ФилиалЗадачи);
	
	ЗаполнитьСписокВыбораСвязанныхФилиалов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьГруппуТрудозатраты()
	
	Элементы.ОценкаStoryPoint.Видимость = РегистрыСведений.НастройкиФилиалов.ЗначениеНастройки(Объект.Филиал, 
		ПланыВидовХарактеристик.ВидыНастроекФилиалов.ОцениватьЗадачиВStoryPoint);

КонецПроцедуры

&НаСервере 
Процедура НастроитьИЗаполнитьСпринт(Знач Филиал, Знач Команда, Знач Перезаполнение = Ложь)
	
	Если Перезаполнение Тогда
		ПланТрудозатрат = УчетТрудозатрат.ПолучитьПлановыеТрудозатраты(Объект.Ссылка);
		ТестированиеТрудозатратыПлан = УчетТрудозатрат.ПолучитьПлановыеТрудозатраты(
			Объект.Ссылка, Перечисления.ТипыТрудозатрат.Тестирование);
	КонецЕсли;
	
	ЭтоКастомнаяКоманда = Ложь;
	СтатусыОбъектов = Справочники.СтатусыОбъектов;   
	ФилиалНедоступен =  (ЗначениеЗаполнено(Объект.Филиал) 
		И ПараметрыСеанса.СвязанныеФилиалы.Найти(Объект.Филиал) = Неопределено
		И ПараметрыСеанса.ДоступныеФилиалыРуководителя.Найти(Объект.Филиал) = Неопределено); 
		
	Если ЗначениеЗаполнено(Объект.КомандаРазработчиков) Тогда		
		ЭтоКастомнаяКоманда = Объект.КомандаРазработчиков.ПринадлежитЭлементу(Справочники.Филиалы.КастомныеКоманды);  		
	КонецЕсли;
	
	Если НовыйСтатус = СтатусыОбъектов.Решен 
		ИЛИ НовыйСтатус = СтатусыОбъектов.Отклонен 
		ИЛИ (ФилиалНедоступен И НЕ ЭтоКастомнаяКоманда) Тогда
		
		Элементы.Спринт.Доступность = Ложь;
	КонецЕсли;
	
	Спринты = РегистрыСведений.СоставСпринтов.ПолучитьАктивныеСпринтыОбъекта(Объект.Ссылка, Истина);
	
	ИзменитьВводПлановыхТрудозатратДляСпринта();
	
	Если Спринты.Количество() = 0 Тогда
		Спринты = РегистрыСведений.СоставСпринтов.ПолучитьТекущийСпринтОбъекта(Объект.Ссылка, Истина);
	КонецЕсли;
	
	СпринтыИсходные.ЗагрузитьЗначения(Спринты.ВыгрузитьЗначения());
		
	Элементы.Спринт.Видимость = Спринты.Количество() > 0  
		ИЛИ Справочники.Филиалы.ЕстьАктивныйСпринт(Филиал, Перечисления.ВидыСпринта.IT, Команда);
		
КонецПроцедуры 	
	
&НаСервере
Процедура НастроитьОтображениеСложности(Знач Филиал)
	
	ВидимостьГруппыАвтопула = Ложь;
	
	Если ЗначениеЗаполнено(Филиал) Тогда
		Настройка = ПланыВидовХарактеристик.ВидыНастроекФилиалов.ИспользованиеАвтопулаЗадач;
		ИспользованиеАвтопула = РегистрыСведений.НастройкиФилиалов.ЗначениеНастройки(Филиал, Настройка);
		
		Если ИспользованиеАвтопула И (ПараметрыСеанса.СвязанныеФилиалы.Найти(Филиал) <> Неопределено
				ИЛИ ПараметрыСеанса.ДоступныеФилиалыРуководителя.Найти(Филиал) <> Неопределено) Тогда
			ВидимостьГруппыАвтопула = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СложностьЗадачи.Видимость = ВидимостьГруппыАвтопула;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПослеЗаписиНаСервере(ТекущийОбъект)
	
	УстановитьЗаголовокСтраницыЧекЛист(ЭтотОбъект);
	ОбновитьДоступностьПоляНаправления();
	ЗаполнитьДоступныеСтатусы();
	
	ИнтеграцияДополнительныхПодсистем.ВозможноЗапускатьСборкуTeamCity(ЭтотОбъект, РольПользователя, Объект.Статус);
	
	// Заблокируем возможность изменить объект основание
	Элементы.ОбъектОснование.ТолькоПросмотр = Истина;
	
	Если Объект.Статус = Справочники.СтатусыОбъектов.Решен Тогда
		Элементы.ПроцентВыполнения.ТолькоПросмотр = Истина;
		Элементы.ТребуетсяПубликация.Доступность = Ложь;
		
		// При установке статуса решен, возможно была добавлена дата публикации в историю
		ПоследняяПубликация = УстановитьЗаголовокНадписиПоследняяПубликация(Объект.Ссылка);
	КонецЕсли;
	
	// Формирование заголовка окна
	ИнтерфейсПриложения.СформироватьЗаголовокОкнаОбъекта(Объект.ВидРодительскогоПроекта, Заголовок);
	
	// Скроем шаблоны и кнопку обновления.	
	Элементы.ГруппаШаблоны.Видимость = Ложь;
	Элементы.КнопкаОбновитьСписок.Видимость = Ложь;
	
	// Восстановим видимость кнопки Комментарий в хранилище, после записи объекта в БД
	Элементы.КнопкаКомментарийВХранилище.Видимость = Истина;
		
	// Установим доступность редактирования срока сдачи, после записи объекта в БД
	УстановитьВозможностьРедактироватьСрокСдачи();
	
	НастроитьОтображениеСложности(ТекущийОбъект.Филиал);

КонецПроцедуры

&НаКлиенте
Процедура НачатьЗамерВремениЗаписиЗадачи(ПараметрыЗаписи)
	
	УИДЗамера = ИнтеграцияДополнительныхПодсистемКлиент.НачатьЗамерВремени(Ложь, "Документ.Задача.Запись");
	ПараметрыЗаписи.Вставить("УИДЗамера", УИДЗамера);
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьВидаПроцесса()
	
	Элементы.ВидПроцесса.Видимость = ЗначениеЗаполнено(Объект.Направление) 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Направление, "ИспользоватьВидыПроцессов");
		
	Если НЕ Элементы.ВидПроцесса.Видимость Тогда
		Объект.ВидПроцесса = Неопределено;
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьВидаПроцесса(Элемент, Знач ОбъектОснование, Знач ВидПроцесса)
	
	Если ЗначениеЗаполнено(ВидПроцесса) Тогда
		Элемент.ТолькоПросмотр = ЗначениеЗаполнено(ОбъектОснование); 
	Иначе
		Элемент.ТолькоПросмотр = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьПоляНаправления()
	
	Элементы.НаправлениеРазработки.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ОбъектОснование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокСтраницыЧекЛист()
	
	УстановитьЗаголовокСтраницыЧекЛист(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеСтатуса(Знач СвойстваСтатуса)
	
	НовыйСтатус = СвойстваСтатуса.Ссылка;
	ИндексКартинкиСтатуса = СвойстваСтатуса.ИндексКартинки;
	СтатусПредставление = СвойстваСтатуса.Наименование;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросОСозданииЗаявки(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СоздатьЗаявку = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеПлановогоВремениПоСпринтам(Знач Результат, Знач ДополнительныеПараметры) Экспорт 
	
	Если ДополнительныеПараметры = ПредопределенноеЗначение("Перечисление.ТипыТрудозатрат.Тестирование") Тогда
		УчетТрудозатратКлиент.ОбработатьЗакрытиеПлановогоВремениПоСпринтам(Результат, ЭтотОбъект, ТестированиеТрудозатратыПлан);
	Иначе
		УчетТрудозатратКлиент.ОбработатьЗакрытиеПлановогоВремениПоСпринтам(Результат, ЭтотОбъект, ПланТрудозатрат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеФормы(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ВидимостьСписок.Количество() = 4 Тогда
		Для Каждого Элемент Из ВидимостьСписок Цикл
			Элементы[Элемент.Значение].Видимость = Элемент.Пометка;
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуИзменениеСрокаСдачи(СрокСдачи)
		
	ОбработчикЗакрытия = Новый ОписаниеОповещения("ПослеЗакрытияОкнаИзменениеСрокаСдачи", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Задача", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("НовыйСрокСдачи", СрокСдачи);
	ПараметрыОткрытия.Вставить("СтарыйСрокСдачи", СрокСдачиДоИзменения);
	
	ОткрытьФорму("РегистрСведений.СрокиСдачиЗадач.Форма.ИзменениеСрокаСдачи", ПараметрыОткрытия,
		ЭтотОбъект, , , , ОбработчикЗакрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПроверкиИзмененияСтатусаПередЗаписью(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат = Неопределено Тогда
		ИдентификаторСтатуса = ОбщегоНазначенияКлиентСервер.СтрУникальныйИдентификатор(Объект.Статус.УникальныйИдентификатор());
		
		Для Каждого ЭлементСписка Из КэшСтатусов Цикл
			Если ЭлементСписка.Представление = ИдентификаторСтатуса Тогда
				ОбновитьПредставлениеСтатуса(ЭлементСписка.Значение);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Результат.Свойство("ПереоткрытиеФормы") Тогда
		Возврат;
	Иначе
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("Назначена", Результат.НазначитьНа);		
		ПараметрыЗаписи.Вставить("НовыйСтатус", НовыйСтатус);
		ПараметрыЗаписи.Вставить("ПроверкаИзмененияСтатусаПередЗаписью", Истина);
		ПараметрыЗаписи.Вставить("ВидОперации", Неопределено);
		ПараметрыЗаписи.Вставить("Комментарий", Результат.Комментарий);
		ПараметрыЗаписи.Вставить("ЕстьНезакрытыйПериодПриостановки", ДополнительныеПараметры.ЕстьНезакрытыйПериодПриостановки);
		ПараметрыЗаписи.Вставить("Трудозатраты", Результат.Трудозатраты);
		ПараметрыЗаписи.Вставить("ОбновитьДатыПоследнихИзменений");
		ПараметрыЗаписи.Вставить("ПроверкаОтсутствияНазначенного");
		
		Если Результат.Свойство("ПричинаИзмененияСтатуса") Тогда
			ПричинаИзмененияСтатуса = Строка(Результат.ПричинаИзмененияСтатуса);
			Элементы.ПричинаИзмененияСтатуса.Видимость = Истина;
			
			ПараметрыЗаписи.Вставить("ПричинаИзмененияСтатуса", Результат.ПричинаИзмененияСтатуса);
			ПараметрыЗаписи.Вставить("НеобходимоОтправитьУведомление", Результат.НеобходимоОтправитьУведомление);
		Иначе
			ПричинаИзмененияСтатуса = Неопределено;
			Элементы.ПричинаИзмененияСтатуса.Видимость = Ложь;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ЗакрытьПослеЗаписи") Тогда
			ПараметрыЗаписи.Вставить("ЗакрытьПослеЗаписи", Истина);
		КонецЕсли;
		
		Если НовыйСтатус = КэшВспомогательныхДанных.Статус_Приостановлен Тогда
			ПараметрыЗаписи.ВидОперации = КэшВспомогательныхДанных.Статус_Приостановлен;
			
		ИначеЕсли НовыйСтатус = КэшВспомогательныхДанных.Статус_ВРаботе 
			И ТипЗнч(Объект.ОбъектОснование) = Тип("ДокументСсылка.ЗаявкаНаРазработку") 
			И ЗначениеЗаполнено(Объект.ОбъектОснование) Тогда
			ПараметрыЗаписи.ВидОперации = КэшВспомогательныхДанных.Статус_ВРаботе;			
		КонецЕсли;
		
		Записать(ПараметрыЗаписи);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПослеЗаписи(Знач ПараметрыЗаписи)
	
	Операции = Новый Массив;  
	ПараметрыОповещения = Новый Массив;
	
	Если ПараметрыЗаписи.Свойство("ИзменениеСтатусаЗадачи") Тогда
		ПараметрыОповещения.Вставить(Операции.Количество(), Неопределено); 
		Операции.Добавить(СобытияОповещенияКлиент.ИмяСобытияИзмененияСтатусаЗадачи());
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ИзмениласьОценкаТрудозатрат") Тогда
		ПараметрыОповещения.Вставить(Операции.Количество(), Объект.Ссылка); 
		Операции.Добавить("Документ.Задача.ИзмениласьОценкаТрудозатрат");
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ИзмениласьОценкаStoryPoint") Тогда
		ПараметрыОповещения.Вставить(Операции.Количество(), Объект.Ссылка); 
		Операции.Добавить("Документ.Задача.ИзмениласьОценкаStoryPoint");
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЕстьИзмененияДляЗаявкиОснования") Тогда
		ПараметрыОповещения.Вставить(Операции.Количество(), Объект.ОбъектОснование); 
		Операции.Добавить("Документ.ЗаявкаНаРазработку.ОбновитьСтатусыПоФилиалам"); 
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЕстьИзмененияДляРабочегоСтола") Тогда
		ПараметрыОповещения.Вставить(Операции.Количество(), Неопределено); 
		Операции.Добавить(СобытияОповещенияКлиент.ИмяСобытияОбновлениеСписковИнструментов());
	КонецЕсли; 
	
	Если Операции.Количество() > 0 Тогда 
		Оповестить(СтрСоединить(Операции, ";"), ПараметрыОповещения, Объект.Ссылка);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОпределитьДоступныеНаправленияРоли()
	
	ТаблицаНаправленийРолей = Пользователи.ТаблицаНаправленийРолейПользователя(Объект.Направление);
	Элементы.НаправлениеРазработки.СписокВыбора.ЗагрузитьЗначения(ТаблицаНаправленийРолей.СписокНаправлений.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНовыеКомментарии() Экспорт
	
	ШаблонИмениКнопки = ПанельНавигацииКлиентСервер.ШаблонИмениКнопки();
	ИмяКоманды = СтрШаблон(ШаблонИмениКнопки, "Комментарии");
	
	ПанельНавигацииКлиент.НажатиеВнеПанели(ЭтотОбъект, ИмяКоманды);
	
	Если КоличествоНовыхКомментариев > 0 Тогда
		Оповестить("Документ.Задача.Форма.ФормаДокумента.ОткрытьНовыеКомментарии");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНовыеИзменения() Экспорт
	
	ШаблонИмениКнопки = ПанельНавигацииКлиентСервер.ШаблонИмениКнопки();	
	ИмяКоманды = СтрШаблон(ШаблонИмениКнопки, "История");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЧислоПрочихИзменений", ЧислоПрочихИзменений);
	ДополнительныеПараметры.Вставить("ЧислоВажныхИзменений", ЧислоВажныхИзменений);
	
	ПанельНавигацииКлиент.НажатиеВнеПанели(ЭтотОбъект, ИмяКоманды, ДополнительныеПараметры);
	
	Оповестить("Документ.Задача.Форма.ФормаДокумента.ОткрытьНовыеИзменения");	
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОписаниеНазначенияОбъектов()
	
	ИнтерфейсПриложенияКлиент.ОткрытьОписаниеНазначенияОбъектов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеПодтвержденияВыбораОтсутствующего(Знач ДопПараметры) Экспорт
	
	ПараметрыЗаписи = ДопПараметры.ПараметрыЗаписи;
	ПараметрыЗаписи.Вставить("ПроверкаОтсутствияНазначенного");
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриНажатииПоляHTMLДокумента(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РедакторОписанияКлиент.ПриНажатииПоляHTMLДокумента(ЭтотОбъект, ДанныеСобытия, СтандартнаяОбработка, КэшВспомогательныхДанных);
	
КонецПроцедуры

&НаСервере
Функция ПодсказкаПоСринтам() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоставСпринтов.Спринт КАК Спринт,
	|	СУММА(ТрудозатратыФакт.Затрата) КАК Затрата
	|ИЗ
	|	РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК Спринты
	|		ПО СоставСпринтов.Спринт = Спринты.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК ТрудозатратыФакт
	|		ПО (ТрудозатратыФакт.Объект = СоставСпринтов.Объект)
	|ГДЕ
	|	ТрудозатратыФакт.РольПользователя = ЗНАЧЕНИЕ(Справочник.РолиПользователей.Тестировщик)
	|	И ТрудозатратыФакт.Период МЕЖДУ Спринты.ДатаНачала И Спринты.ДатаОкончания
	|	И СоставСпринтов.Объект = &Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставСпринтов.Спринт,
	|	Спринты.ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спринты.ДатаОкончания";
	
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтрокаПодсказкиСпринты = "";
	
	Пока Выборка.Следующий() Цикл
		СтрокаПодсказкиСпринты = СтрокаПодсказкиСпринты + СтрШаблон("%1 - %2", Выборка.Затрата ,Выборка.Спринт) + Символы.ПС; 
	КонецЦикла;    
	
	Возврат СтрокаПодсказкиСпринты;
		
КонецФункции

&НаКлиенте
Процедура ПоказатьВопросОСозданииЗаявки()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросОСозданииЗаявки", ЭтотОбъект);
	
	ТекстВопроса = 
	"Для задачи не указан объект-основание.
	|Создать заявку на разработку для задачи?";
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , "Создание заявки основания");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеЗаполнения()
	
	Данные = Новый Структура;
	Данные.Вставить("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	Данные.Вставить("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Возврат Данные;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекущуюДату()
	
	Возврат НачалоДня(ТекущаяДатаСеанса());
	
КонецФункции

&НаСервере
Процедура ПолучитьИзображенияТестирования()
	
	Ссылка = Документы.Задача.ПустаяСсылка();
	
	Если НЕ ЭтотОбъект.Параметры.Свойство("Ключ", Ссылка) ИЛИ Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Каталог КАК Каталог,
	|	Файлы.ОригинальноеИмя КАК КороткоеИмяФайла,
	|	Файлы.Наименование КАК УникальноеИмяФайла,
	|	Файлы.Ссылка КАК Ссылка,
	|	ПрикрепленныеФайлы.Назначение КАК Назначение,
	|	Файлы.Ширина КАК Ширина,
	|	Файлы.Высота КАК Высота
	|ИЗ
	|	РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО ПрикрепленныеФайлы.Файл = Файлы.Ссылка
	|ГДЕ
	|	ПрикрепленныеФайлы.Объект = &Объект
	|	И ПрикрепленныеФайлы.Назначение В (ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.ИзображениеПримечанияРазработчика), ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.ИзображениеПримечанияТестировщика))
	|	И НЕ Файлы.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	КороткоеИмяФайла";
	
	Запрос.УстановитьПараметр("Объект", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		АдресПубликацииФайлов = ОбщегоНазначенияКлиентСервер.ДобавитьСлэш(WebОкружениеВызовСервера.АдресПубликацииФайлов());
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл			
			Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьСлэш(АдресПубликацииФайлов + Выборка.Каталог) + Выборка.УникальноеИмяФайла;
			
			Если Выборка.Назначение = Перечисления.НазначенияФайлов.ИзображениеПримечанияРазработчика Тогда
				НоваяСтрока = ТестированиеИзображенияПримечаниеРазработчиков.Добавить();
			Иначе
				НоваяСтрока = ТестированиеИзображенияПримечаниеТестировщиков.Добавить();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, "КороткоеИмяФайла, УникальноеИмяФайла, Ширина, Высота, Ссылка");
			
			НоваяСтрока.АдресВХранилище = Каталог;
			НоваяСтрока.UIDФайла = Новый УникальныйИдентификатор;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнформациюОПользователе(Знач СтрокаСсылки, СтандартнаяОбработка)
	
	ИдентификаторПользователя = Новый УникальныйИдентификатор(Сред(СтрокаСсылки, СтрНайти(СтрокаСсылки, "sdms_user_") + 10));
	ИнтерфейсПриложенияКлиент.ОткрытьИнформациюОПользователе(ЭтотОбъект, ИдентификаторПользователя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДополнительныеДанныеНаСервере(Знач Объект, Знач НовыйСтатус, Знач ДопРеквизиты)
	
	ЕстьНезакрытыйПериод = ЕстьНезакрытыйПериодПриостановки(Объект.Ссылка);
	НовыйИсполнитель = РаботаСПроцессамиВызовСервера.ПолучитьНовогоИсполнителяЗадачи(Объект, НовыйСтатус, ДопРеквизиты);
	
	ДополнительныеДанные = Новый Структура;	
	ДополнительныеДанные.Вставить("ЕстьНезакрытыйПериод", ЕстьНезакрытыйПериод);
	ДополнительныеДанные.Вставить("НовыйИсполнитель", НовыйИсполнитель);
	
	Возврат ДополнительныеДанные;
	
КонецФункции
	
&НаСервереБезКонтекста
Функция ПолучитьВспомогательныеДанные(Знач Основание, Знач Ссылка, Знач ЗагруженоАвтосохранение)
		
	Статусы = Справочники.СтатусыОбъектов.ОписаниеСтатусов();
		
	СтруктураПолученныеРеквизиты = РаботаСНастройками.ПолучитьДополнительныеРеквизитыФилиала(ПараметрыСеанса.Филиал);	

	ДанныеДляКлиента = Новый Структура;
	ДанныеДляКлиента.Вставить("Статусы", Статусы);
	ДанныеДляКлиента.Вставить("Статус_НаДоработку", Справочники.СтатусыОбъектов.НаДоработку);
	ДанныеДляКлиента.Вставить("Статус_Приостановлен", Справочники.СтатусыОбъектов.Приостановлен);
	ДанныеДляКлиента.Вставить("Статус_Отклонен", Справочники.СтатусыОбъектов.Отклонен);
	ДанныеДляКлиента.Вставить("Статус_ВРаботе", Справочники.СтатусыОбъектов.ВРаботе);
	ДанныеДляКлиента.Вставить("Статус_Протестирован", Справочники.СтатусыОбъектов.Протестирован);
	ДанныеДляКлиента.Вставить("Статус_Решен", Справочники.СтатусыОбъектов.Решен);
	ДанныеДляКлиента.Вставить("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	ДанныеДляКлиента.Вставить("ТекущийФилиалПользователя", ПараметрыСеанса.Филиал);
	ДанныеДляКлиента.Вставить("ПризнакСозданияЗадачиТестирование", СтруктураПолученныеРеквизиты.ЗапросСозданияЗадачиАвтотеста);
	ДанныеДляКлиента.Вставить("ПрефиксЗадачиТестирование", СтруктураПолученныеРеквизиты.ПрефиксЗадачиАвтотеста);
	ДанныеДляКлиента.Вставить("ИсполнителяCodeReviewНазначаетРуководитель", СтруктураПолученныеРеквизиты.ИсполнителяCodeReviewНазначаетРуководитель);
	ДанныеДляКлиента.Вставить("СистемаХранилищеДанных", Справочники.СистемыУчета.НайтиПоКоду("00022"));
	
	АвтосохраненияДанных.ДобавитьПараметрыДляАвтосохранения(ДанныеДляКлиента, Ссылка, Основание, ЗагруженоАвтосохранение);
	
	Возврат ДанныеДляКлиента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеДопРеквизита(Знач Таблица, Знач Реквизит)
	
	Результат = Неопределено;
	Строка = Таблица.Найти(Реквизит, "ВидРеквизита");
	
	Если Строка <> Неопределено Тогда
		Результат = Строка.Значение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНаправлениеЗадачиИлиЗаявки(Знач Ссылка)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Направление");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокДоступныхСистем(Знач Основание)
	
	Возврат Документы.ЗаявкаНаРазработку.ПолучитьСписокДоступныхСистем(Основание);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДоступнуюГруппуЗаказчиков(Знач Основание, Знач Система)
	
	ДоступнаяГруппа = Справочники.ГруппыЗаказчиковНаправлений.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаРазработкуСистемыРазработки.ГруппаЗаказчиков КАК ГруппаЗаказчиков
	|ИЗ
	|	Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ЗаявкаНаРазработкуСистемыРазработки
	|ГДЕ
	|	ЗаявкаНаРазработкуСистемыРазработки.Ссылка = &Заявка
	|	И ЗаявкаНаРазработкуСистемыРазработки.Система = &Система";
	
	Запрос.УстановитьПараметр("Заявка", Основание);
	Запрос.УстановитьПараметр("Система", Система);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДоступнаяГруппа = Выборка.ГруппаЗаказчиков;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДоступнаяГруппа; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСрокРеализацииЗаявки(Знач Заявка)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заявка, "СрокРеализации");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылкуПользователя(Знач УникальныйИдентификатор)
	
	Возврат Справочники.Пользователи.ПолучитьСсылку(УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПометитьНаУдалениеФайлыПримечаний(Знач УдаляемыеФайлыИзображений) Экспорт
	
	Если УдаляемыеФайлыИзображений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.Наименование В(&УдаляемыеФайлыИзображений)";
	
	Запрос.УстановитьПараметр("УдаляемыеФайлыИзображений", УдаляемыеФайлыИзображений);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбъектФайл = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектФайл.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияОкнаИзменениеСрокаСдачи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		СрокСдачи = СрокСдачиДоИзменения;
	Иначе
		СрокСдачи = Результат.СрокСдачи;
		ОбщегоНазначенияВызовСервера.СохранитьСрокСдачи(Объект.Ссылка, СрокСдачи, СрокСдачиДоИзменения, Результат.Комментарий);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик закрытия окна ИсторииИсполнителей.
//
// Параметры:
//  Исполнитель				 - Неопределено, СправочникСсылка.Пользователи	 - если пользователь
//  	не выбрал ни одно значение, то Неопределено. В противном случае
//  	ссылка на справочник Пользователи.
//  ДополнительныеПараметры	 - Произвольный									 - значение, указанное при создании объекта
//  									ОписаниеОповещения.
//
&НаКлиенте
Процедура ПослеЗакрытияОкнаИсторииИсполнителей(Исполнитель, ДополнительныеПараметры) Экспорт
	
	Если Исполнитель <> Неопределено Тогда
		ЗаполнитьИсполнителя(Исполнитель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияОкнаИсторияПубликации(Результат, ДополнительныеПараметры) Экспорт
	
	ПоследняяПубликация = УстановитьЗаголовокНадписиПоследняяПубликация(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОбъектОснования()
	
	// Заполнение вида процесса
	Если Элементы.ВидПроцесса.Видимость И ЗначениеЗаполнено(Объект.ОбъектОснование) Тогда	
		ВидПроцессаОбъектОснование = ОбщегоНазначенияВызовСервера.ПолучитьВидПроцессаОбъекта(Объект.ОбъектОснование);
		
		Если Элементы.ВидПроцесса.Видимость И ЗначениеЗаполнено(ВидПроцессаОбъектОснование) Тогда
			Объект.ВидПроцесса = ВидПроцессаОбъектОснование;
		КонецЕсли;	
	КонецЕсли;
	
	ОбновитьДоступностьВидаПроцесса(Элементы.ВидПроцесса, Объект.ОбъектОснование, Объект.ВидПроцесса);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьИзмененийРазмеровИзображений(Знач НовыеДанные, Знач ВидПримечания)
	
	Результат = Ложь;
	ДанныеФормы = ЭтотОбъект["ТестированиеИзображения" + ВидПримечания];
	
	Фильтр = Новый Структура("UIDФайла");
	Для Каждого Картинка Из НовыеДанные Цикл
		Фильтр.UIDФайла = Картинка.UIDФайла;
		НайденныеСтроки = ДанныеФормы.НайтиСтроки(Фильтр);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Если НайденныеСтроки[0].Высота <> Картинка.Высота ИЛИ НайденныеСтроки[0].Ширина <> Картинка.Ширина Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПроверитьОбъектОснование(Знач Форма)
	
	Результат = Истина;
	Основание = Форма.Параметры.Основание;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		
		СообщениеПриЗапретеЗаявка = "Для заявки на разработку установлен признак ""Ограниченный просмотр"". Создание задачи невозможно.";
		СообщениеПриЗапретеЗадача = "Для задачи установлен признак ""Ограниченный просмотр"". Создание задачи невозможно.";
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда	
			РеквизитыЗаявка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Черновик, ФинальныйСтатус");
			
			Если Безопасность.ПроверитьПраваРодительскогоОбъекта(Форма, "Документ.ЗаявкаНаРазработку.Форма.ФормаДокумента", Основание, СообщениеПриЗапретеЗаявка) Тогда
				Результат = Ложь;
			ИначеЕсли РеквизитыЗаявка.Черновик Тогда		
				Результат = Ложь;
				Форма["СообщениеПользователю"] = "Нельзя создавать другие объекты на основании заявки со статусом ""Черновик""";			
			ИначеЕсли Основание.ФинальныйСтатус = Справочники.СтатусыОбъектов.Отклонен Тогда
				Результат = Ложь;
				Форма["СообщениеПользователю"] = "Нельзя создавать другие объекты на основании отклоненной заявки.";
			КонецЕсли;
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.Задача")
			И Безопасность.ПроверитьПраваРодительскогоОбъекта(Форма, Форма.ИмяФормы, Основание, СообщениеПриЗапретеЗадача) Тогда
			
			Результат = Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПроверкаОтсутствияНазначенногоПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ДанныеОтсутствия = ПользователиВызовСервера.ДанныеОтсутствия(Объект.Назначена);
	
	Если ДанныеОтсутствия.Отсутствует Тогда
		Отказ = Истина;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Форма", ЭтотОбъект);
		ДопПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
		
		ИнтерфейсПриложенияКлиент.ПодтвердитьВыборОтсутствующегоПользователя(Объект.Назначена, ДанныеОтсутствия, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РазрешеноИзменениеСтатуса()
	
	Разрешено = Истина;
	
	Если НовыйСтатус = КэшВспомогательныхДанных.Статус_Решен Тогда
		Если ОбщегоНазначенияКлиент.ПроверитьВозможностьУстановкиСтатуса(Объект.ТребуетсяПубликация, НовыйСтатус, КэшВспомогательныхДанных.Статус_Решен) Тогда
			Разрешено = Ложь;
		КонецЕсли;	
	КонецЕсли;

	Возврат Разрешено;
	
КонецФункции

&НаКлиенте
Процедура ПроверкаИзмененияСтатусаПередЗаписью(ПараметрыЗаписи, Знач НовыйСтатус)
	
	Если НЕ РазрешеноИзменениеСтатуса() Тогда
		Возврат;
	КонецЕсли;
			
	ДопРеквизиты = Новый Структура();
	ДопРеквизиты.Вставить("ИсполнителяCodeReviewНазначаетРуководитель", 
		КэшВспомогательныхДанных.ИсполнителяCodeReviewНазначаетРуководитель);
	ДопРеквизиты.Вставить("Ревьюер", Ревьюер);
	
	// Получим необходимые данные для открытия формы ИзменениеСтатуса за один серверный вызов.
	ДополнительныеДанные = ПолучитьДополнительныеДанныеНаСервере(Объект, НовыйСтатус, ДопРеквизиты);		
	ЕстьНезакрытыйПериод = ДополнительныеДанные.ЕстьНезакрытыйПериод;
	НовыйИсполнитель = ДополнительныеДанные.НовыйИсполнитель;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ЕстьНезакрытыйПериодПриостановки", ЕстьНезакрытыйПериод);

	Если ПараметрыЗаписи.Свойство("ЗакрытьПослеЗаписи") Тогда
		ПараметрыОповещения.Вставить("ЗакрытьПослеЗаписи", Истина);
	КонецЕсли;		
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаПроверкиИзмененияСтатусаПередЗаписью",
		ЭтотОбъект, ПараметрыОповещения);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТребуетсяКомментарий", Ложь);
	ПараметрыОткрытия.Вставить("НовыйСтатус", НовыйСтатус);
	ПараметрыОткрытия.Вставить("Назначена", НовыйИсполнитель);
	ПараметрыОткрытия.Вставить("Объект", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ПараметрыОповещения", ПараметрыОповещения);
				
	Если НовыйСтатус = КэшВспомогательныхДанных.Статус_Отклонен 
		ИЛИ (НовыйСтатус = КэшВспомогательныхДанных.Статус_Приостановлен И НЕ ЕстьНезакрытыйПериод) Тогда
		ПараметрыОткрытия.ТребуетсяКомментарий = Истина;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ИзменениеСтатуса", ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВозможностьСозданияЗадачи(Знач ЭтоНовый, Знач ОбъектОснование)
	
	РезультатПроверки = Документы.Задача.ПроверитьВозможностьСозданияЗадачи(ЭтоНовый, ОбъектОснование);
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиенте
Процедура СпринтОбработкаВыбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		Спринты.Очистить();
		
		Для Каждого Строка Из РезультатЗакрытия.АктивныеСпринты Цикл
			Спринты.Добавить(Строка);   
		КонецЦикла; 
		
		ПланТрудозатрат = РезультатЗакрытия.Трудозатраты;
		СпринтыИсходные.ЗагрузитьЗначения(Спринты.ВыгрузитьЗначения());
		ИзменитьВводПлановыхТрудозатратДляСпринта();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПримечаниеВДополнительныеСвойстваОбъекта(Знач ИмяРеквизита, ТекущийОбъект, Знач ПараметрыЗаписи)
	
	ИмяСвойстваСсылка = Справочники.ДополнительныеОписанияОбъектов.ИмяДополнительногоСвойстваСсылка(ИмяРеквизита);
	ИмяСвойстваСодержаниеОписания = Справочники.ДополнительныеОписанияОбъектов.ИмяДополнительногоСвойстваСодержаниеОписания(ИмяРеквизита); 
	ИмяСвойстваИзмененоОписание = Справочники.ДополнительныеОписанияОбъектов.ИмяДополнительногоСвойстваИзмененоОписание(ИмяРеквизита);
	
	// Ссылка на элемент справочника с примечанием 
	ПримечаниеСсылка = ЭтотОбъект[ИмяРеквизита];
	ТекущийОбъект.ДополнительныеСвойства.Вставить(ИмяСвойстваСсылка, ПримечаниеСсылка);
	
	// Признак того, что примечание было изменено
	ИмяРеквизитаИзмененоОписание = РедакторОписанияКлиентСервер.ИмяРеквизитаИзмененоОписание(ИмяРеквизита); 
	
	//Если Параметры.Ключ.Пустая() Тогда
	Если ЗначениеЗаполнено(ПримечаниеСсылка) Тогда 
		ОписаниеИзменено = ПараметрыЗаписи[ИмяРеквизитаИзмененоОписание];
	Иначе
		ОписаниеИзменено = Истина;
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить(ИмяСвойстваИзмененоОписание, ОписаниеИзменено);
	
	// Содержание примечания
	ИмяРеквизитаАктуальноеОписание = РедакторОписанияКлиентСервер.ИмяРеквизитаАктуальноеОписание(ИмяРеквизита);
	ТекущийОбъект.ДополнительныеСвойства.Вставить(ИмяСвойстваСодержаниеОписания, ЭтотОбъект[ИмяРеквизитаАктуальноеОписание]);

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПримечанияПослеЗаписи(Знач ИмяРеквизита, Знач ДополнительныеСвойстваОбъекта)
	
	ИмяСвойстваИзмененоОписание = Справочники.ДополнительныеОписанияОбъектов.ИмяДополнительногоСвойстваИзмененоОписание(ИмяРеквизита);
	ИмяСвойстваСсылка = Справочники.ДополнительныеОписанияОбъектов.ИмяДополнительногоСвойстваСсылка(ИмяРеквизита);
	ИмяСвойстваСодержаниеОписания = Справочники.ДополнительныеОписанияОбъектов.ИмяДополнительногоСвойстваСодержаниеОписания(ИмяРеквизита);
	
	ИзмененоОписание = ДополнительныеСвойстваОбъекта[ИмяСвойстваИзмененоОписание]; 
	
	Если ИзмененоОписание Тогда
		ПримечаниеСсылка = ДополнительныеСвойстваОбъекта[ИмяСвойстваСсылка];
		СодержаниеОписания = ДополнительныеСвойстваОбъекта[ИмяСвойстваСодержаниеОписания];
		
		ЭтотОбъект[ИмяРеквизита] = ПримечаниеСсылка;
		ЭтотОбъект[РедакторОписанияКлиентСервер.ИмяРеквизитаАктуальноеОписание(ИмяРеквизита)] = СодержаниеОписания;
		ЭтотОбъект[РедакторОписанияКлиентСервер.ИмяРеквизитаИзмененоОписание(ИмяРеквизита)] = Ложь;
		ЭтотОбъект[РедакторОписанияКлиентСервер.ИмяРеквизита(ИмяРеквизита)] = РедакторОписанияВызовСервера.ПолучитьРедактор(СодержаниеОписания); 
		
		ОбновитьВерсиюПримечания(ПримечаниеСсылка);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьВерсиюПримечания(ПримечаниеСсылка)
	
	Найденное = ВерсииОписаний.НайтиПоЗначению(ПримечаниеСсылка);
	
	Если Найденное <> Неопределено Тогда
		ВерсииОписаний.Удалить(Найденное);
	КонецЕсли;
	
	ВерсииОписаний.Добавить(ПримечаниеСсылка, ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ПримечаниеСсылка, "ВерсияДанных")); 
	
КонецПроцедуры

&НаКлиенте
Процедура ТегиHTMLПослеНажатия(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") 
		ИЛИ НЕ Результат.Модифицированность Тогда
		
		Возврат;
	КонецЕсли;
	
	ТегиHTMLПослеНажатияНаСервере(Результат.СписокТегов);
	
КонецПроцедуры

&НаСервере
Процедура ТегиHTMLПослеНажатияНаСервере(Знач СписокТегов)

	РаботаСТегамиВызовСервера.Обновить(ЭтотОбъект, СписокТегов, Элементы.ГруппаСтраницаСвойстваШапка.ЦветФона);	

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьТипаЗадачи(Знач Филиал)
	
	ВидыЗадач = РегистрыСведений.ВидыЗадачФилиалов.ПолучитьВидыЗадач(Филиал);
	Если ВидыЗадач.Количество() = 0 Тогда
		Элементы.ТипЗадачиТестирования.Видимость = Ложь;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыЗадач.Ссылка КАК Значение,
		|	ВидыЗадач.Наименование КАК Представление
		|ИЗ
		|	Справочник.ВидыЗадач КАК ВидыЗадач
		|ГДЕ
		|	ВидыЗадач.Ссылка В(&Ссылка)
		|	И НЕ ВидыЗадач.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Ссылка", ВидыЗадач);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Элементы.ТипЗадачиТестирования.СписокВыбора.Добавить(), Выборка);
		КонецЦикла;
	КонецЕсли;	
			
КонецПроцедуры	

&НаСервере
Процедура УстановитьВозможностьРедактированияРевьюера()
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ТолькоПросмотрРевьюера = Истина;
	
	Если Объект.Автор = ТекущийПользователь Тогда
		ТолькоПросмотрРевьюера = Ложь;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	Справочник.Филиалы КАК Филиалы
		|ГДЕ
		|	Филиалы.Ссылка = &Филиал
		|	И (Филиалы.Руководитель = &ТекущийПользователь
		|			ИЛИ Филиалы.ЗаместительРуководителя = &ТекущийПользователь)";
		
		Запрос.УстановитьПараметр("Филиал", Объект.Филиал);
		Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
		
		ТолькоПросмотрРевьюера = Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	Элементы.Ревьюер.ТолькоПросмотр = ТолькоПросмотрРевьюера;
	
	Если НЕ ТолькоПросмотрРевьюера Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Филиал", ПараметрыСеанса.СвязанныеФилиалы);
		
		НовыйПараметрыВыбора = Новый Массив;
		НовыйПараметрыВыбора.Добавить(НовыйПараметр);
		
		Элементы.Ревьюер.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйПараметрыВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВозможностьРедактироватьСрокСдачи()
	
	Элементы.СрокСдачи.ТолькоПросмотр = 
		(НЕ УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("Администратор") 
			И ПараметрыСеанса.СвязанныеФилиалы.Найти(Объект.Филиал) = Неопределено
			И ПараметрыСеанса.ДоступныеФилиалыРуководителя.Найти(Объект.Филиал) = Неопределено);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьЗаголовокНадписиПоследняяПубликация(Знач Задача)
	
	Если ЗначениеЗаполнено(Задача) Тогда
		ДатаПоследнейПубликации = РегистрыСведений.ИсторияПубликацииЗадач.ПолучитьДатуПоследнейПубликации(Задача);
		
		Если ЗначениеЗаполнено(ДатаПоследнейПубликации) Тогда
			ПоследняяПубликация = Строка(Формат(ДатаПоследнейПубликации, "ДФ='dd.MM.yyyy HH:mm'"));
		Иначе 
			ПоследняяПубликация = "не публиковалась";
		КонецЕсли;	
	Иначе
		ПоследняяПубликация = "не публиковалась";
	КонецЕсли;
	
	Возврат ПоследняяПубликация;
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокСтраницыЧекЛист(Форма)
	
	Количество = Форма.Объект.ЧекЛист.Количество();
	Заголовок = СтрШаблон("Чек-лист%1", Формат(Количество, "ЧФ=' (Ч)'"));
	
	ПанельНавигацииКлиентСервер.ОбновитьЗаголовокКнопкиСтраницыПанелиНавигации(Форма, "СтраницаЧекЛист", Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеШаблоновЧекЛиста(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат.ПерезаполнитьСписок Тогда
			Объект.ЧекЛист.Очистить();
		КонецЕсли;
		
		Для Каждого Описание Из Результат.ЧекЛист Цикл
			Объект.ЧекЛист.Добавить().Описание = Описание;
		КонецЦикла;
		
		// Обновление в заголовке количества элементов чек-листа
		ПодключитьОбработчикОжидания("ОбновитьЗаголовокСтраницыЧекЛист", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораСвязанныхФилиалов()
	
	МассивСвязанныхФиилалов = Новый Массив(ПараметрыСеанса.СвязанныеФилиалы);
	СписокВыбораФилиалов = Элементы.Филиал.СписокВыбора;
	СписокВыбораФилиалов.Очистить();
	СписокВыбораФилиалов.ЗагрузитьЗначения(МассивСвязанныхФиилалов);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДоскиTrello()  
		
	ИнтеграцияДополнительныхПодсистем.НастроитьСписокВыбораДоскаTrello(ЭтотОбъект, Объект.Филиал, Истина);
		
КонецПроцедуры

&НаСервере
Процедура НастроитьКомандыРазработчиков(Знач Филиал)
	
	СписокВыбора = Элементы.КомандаРазработчиков.СписокВыбора;
	СписокВыбора.Очистить();	
	
	КомандыРазработки = Справочники.Филиалы.ПолучитьКомандыРазработки(Филиал);
	
	Для Каждого Команда Из КомандыРазработки Цикл
		СписокВыбора.Добавить(Команда.Значение, Команда.Представление);
	КонецЦикла; 
	
	КомандыРазработки = Справочники.Филиалы.ПолучитьКастомныеКомандыПользователя(Объект.СистемаУчета);
	
	Для Каждого Команда Из КомандыРазработки Цикл 
		Если СписокВыбора.НайтиПоЗначению(Команда.Значение) = Неопределено Тогда 
			СписокВыбора.Добавить(Команда.Значение, Команда.Представление);          
		КонецЕсли;
	КонецЦикла; 
	
	Если  ЗначениеЗаполнено(Объект.КомандаРазработчиков) И 
			СписокВыбора.НайтиПоЗначению(Объект.КомандаРазработчиков) = Неопределено Тогда 
		СписокВыбора.Добавить(Объект.КомандаРазработчиков);          
	КонецЕсли;
	
	Элементы.КомандаРазработчиков.Видимость = (СписокВыбора.Количество() <> 0);
	
КонецПроцедуры

&НаСервере
Процедура ФилиалПриИзмененииНаСервере()
	
	Объект.ВидЗадачи = Справочники.ВидыЗадач.ПустаяСсылка();
	Объект.КомандаРазработчиков = Справочники.Филиалы.ПустаяСсылка(); 
	
	Если Спринты.Количество() > 0 И ЗначениеЗаполнено(Объект.Филиал) Тогда
		ФилиалСпринта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Спринты[0].Значение, "Филиал");
		
		Если ФилиалСпринта <> Объект.Филиал Тогда
			Спринты.Очистить();
		КонецЕсли;
	КонецЕсли;
		
	УстановитьВозможностьРедактироватьСрокСдачи();
	НастроитьКомандыРазработчиков(Объект.Филиал);
	НастроитьГруппуТрудозатраты();
	НастроитьИЗаполнитьСпринт(Объект.Филиал, Объект.КомандаРазработчиков);		
	
	НастроитьДоскиTrello();
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеМеханизмы_Трудозатраты

&НаКлиенте
Процедура ОбработатьВыборОбъектаОснования(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Объект.ОбъектОснование = РезультатЗакрытия;
	ОбъектОснованиеПриИзменении(Элементы.ОбъектОснование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборОснованияПроект(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	Объект.Проект = Результат;
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Управление трудозатратами

&НаКлиенте
Процедура Подключаемый_УправлениеТрудозатратамиПриНажатииHTML(Элемент, ДанныеСобытия, СтандартнаяОбработка)

	УчетТрудозатратКлиент.ПриНажатииПоляHTMLУправленияТрудозатратами(ЭтотОбъект, ДанныеСобытия, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область ШаблоныЗаполненияДокумента

&НаКлиенте
Процедура ЗаполнитьСоответствиеЗначенийШаблона(Знач МассивРеквизитов)

	СтруктураРеквизитов = Новый Структура;
	
	Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
		ЗначениеРеквизита = Неопределено;
		Попытка
			ЗначениеРеквизита = Объект[ИмяРеквизита];
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			СтруктураРеквизитов.Вставить(ИмяРеквизита, ЗначениеРеквизита);
		КонецЕсли;	
	КонецЦикла;
	
	Если СтруктураРеквизитов.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Не заполнены сохраняемые поля для шаблона.");
		Возврат;
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьСохранениеШаблона", ЭтотОбъект, СтруктураРеквизитов);
	ПоказатьВводСтроки(ОписаниеОповещения, "Шаблон", "Введите имя сохраняемого шаблона", 150); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьСохранениеШаблона(ИмяШаблона, СтруктураРеквизитов) Экспорт

	Если НЕ ЗначениеЗаполнено(ИмяШаблона) Тогда
		ПоказатьПредупреждение(, "Необходимо заполнить имя шаблона.");
		Возврат;
	КонецЕсли;
	
	ЗавершитьСохранениеШаблонаНаСервере(ИмяШаблона, СтруктураРеквизитов, КэшВспомогательныхДанных.ТекущийПользователь); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗавершитьСохранениеШаблонаНаСервере(Знач ИмяШаблона, Знач СтруктураРеквизитов, Знач ТекущийПользователь)
	
	// Предварительно получим гуиды ссылочных элементов.
	Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
		СтруктураРеквизитов.Вставить(ЭлементСтруктуры.Ключ, XMLСтрока(ЭлементСтруктуры.Значение));
	КонецЦикла;
	
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON;  
	
	// Формирование JSON.
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(ЗаписьJSON, СтруктураРеквизитов);
	
	ТекстJSON = ЗаписьJSON.Закрыть();

	ШаблонОбъект = Справочники.ШаблоныЗаполненияДокументов.СоздатьЭлемент();
	ШаблонОбъект.Наименование = ИмяШаблона;
	ШаблонОбъект.Владелец = ТекущийПользователь;
	ШаблонОбъект.ДатаСоздания = ТекущаяДатаСеанса();
	ШаблонОбъект.ДанныеЗаполнения = ТекстJSON;
	
	// Обработать запись.
	ШаблонОбъект.Записать();
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокШаблонов()
	
	// Предварительно очищаем созданные элементы формы.
	Для Каждого СтрокаТаблицы Из ВариантыШаблонов Цикл
		ИдентификаторКоманды = "ШаблонПользователя_" + СтрокаТаблицы.ИдентификаторШаблона;
		
		Команда = Команды.Найти(ИдентификаторКоманды);
		Команды.Удалить(Команда);
		
		ЭлементФормы = Элементы.Найти(ИдентификаторКоманды);
		Элементы.Удалить(ЭлементФормы);
	КонецЦикла;
	
	ВариантыШаблонов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШаблоныЗаполненияДокументов.Наименование КАК Наименование,
	|	ШаблоныЗаполненияДокументов.Ссылка КАК Ссылка,
	|	ШаблоныЗаполненияДокументов.ДанныеЗаполнения КАК ДанныеЗаполнения
	|ИЗ
	|	Справочник.ШаблоныЗаполненияДокументов КАК ШаблоныЗаполненияДокументов
	|ГДЕ
	|	ШаблоныЗаполненияДокументов.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("Владелец", ПараметрыСеанса.ТекущийПользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ИдентификаторШаблона = XMLСтрока(Выборка.Ссылка);
		ПреобразованныйИдентификатор = ОбщегоНазначенияКлиентСервер.СтрУникальныйИдентификатор(ИдентификаторШаблона, Истина);
		ИдентификаторКоманды = "ШаблонПользователя_" + ПреобразованныйИдентификатор;
		
		// Сохраним все данные шаблона в реквизите формы.
		НоваяСтрока = ВариантыШаблонов.Добавить();	
		НоваяСтрока.ИдентификаторШаблона = ПреобразованныйИдентификатор;
		НоваяСтрока.ДанныеШаблона = Выборка.ДанныеЗаполнения;
		
		// Создадим интерфейсные элементы.
		Команда = Команды.Добавить(ИдентификаторКоманды);
		Команда.Заголовок = Выборка.Наименование;
		Команда.Действие  = "Подключаемый_ПрименитьВыбранныйШаблон";
		
		НовыйЭлемент = Элементы.Добавить(ИдентификаторКоманды, Тип("КнопкаФормы"), Элементы.ГруппаШаблоны);
		НовыйЭлемент.ИмяКоманды = Команда.Имя;
		НовыйЭлемент.Заголовок  = Команда.Заголовок;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокРеквизитовДляШаблона()
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить("Назначена");
	МассивРеквизитов.Добавить("Проект");
	МассивРеквизитов.Добавить("Назначение");
	МассивРеквизитов.Добавить("СерьезностьОшибки");
	МассивРеквизитов.Добавить("Направление");
	МассивРеквизитов.Добавить("Заказчик");
	МассивРеквизитов.Добавить("СистемаУчета");
	
	Возврат МассивРеквизитов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьШаблонПоИдентификатору(Знач ВариантыШаблонов, Знач Идентификатор)
	
	Результат = Новый Структура("ШаблонНайден, ДанныеЗаполнения", Ложь, "");
	
	НайденныеСтроки = ВариантыШаблонов.НайтиСтроки(Новый Структура("ИдентификаторШаблона", Идентификатор));
	Если НайденныеСтроки.Количество() <> 0 Тогда	
		ДанныеЗаполнения = НайденныеСтроки[0].ДанныеШаблона;
		
		// Прочитаем сохраненные реквизиты.
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ДанныеЗаполнения);
		
		// JSON может быть некорректным, учитываем это.
		Попытка
			СохраненныеРеквизиты = ПрочитатьJSON(ЧтениеJSON);
		Исключение
			Возврат Результат;
		КонецПопытки;
		
		УдаляемыеЭлементы = Новый Массив;
		
		// Обработаем сохраненные реквизиты (получим ссылочные значения).
		КоллекцияМетаданныхРеквизиты = Метаданные.Документы.Задача.Реквизиты;
		Для Каждого ЭлементСтруктуры Из СохраненныеРеквизиты Цикл
			НайденныйРеквизит = КоллекцияМетаданныхРеквизиты.Найти(ЭлементСтруктуры.Ключ);
			Если НайденныйРеквизит = Неопределено Тогда
				УдаляемыеЭлементы.Добавить(ЭлементСтруктуры.Ключ);
				Продолжить;
			КонецЕсли;
			
			МассивТипов = НайденныйРеквизит.Тип.Типы();
			Если МассивТипов.Количество() = 0 ИЛИ МассивТипов.Количество() > 1 Тогда
				УдаляемыеЭлементы.Добавить(ЭлементСтруктуры.Ключ);
				Продолжить;
			КонецЕсли;
			
			ТипРеквизита = МассивТипов[0];
			ПреобразованноеЗначение = XMLЗначение(ТипРеквизита, ЭлементСтруктуры.Значение);
			
			СохраненныеРеквизиты.Вставить(ЭлементСтруктуры.Ключ, ПреобразованноеЗначение);
		КонецЦикла;
		
		Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
			СохраненныеРеквизиты.Удалить(УдаляемыйЭлемент);
		КонецЦикла;
	
		Результат.ШаблонНайден = Истина;
		Результат.ДанныеЗаполнения = СохраненныеРеквизиты; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ТестированиеТрудозатратыНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УчетТрудозатратКлиент.ОткрытьФормуПлановогоВремениПоСпринтам(ЭтотОбъект, 
		ПредопределенноеЗначение("Перечисление.ТипыТрудозатрат.Тестирование"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТестированиеТрудозатратыФактНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УчетТрудозатратКлиент.ОткрытьФормуПлановогоВремениПоСпринтам(ЭтотОбъект, 
		ПредопределенноеЗначение("Перечисление.ТипыТрудозатрат.Тестирование"), Ложь);

КонецПроцедуры

#КонецОбласти

#Область ИнициализацияПеременных

#Если Клиент Тогда
	ЕстьНеопубликованныйКомментарий = Ложь;
	ИскатьПодчиненныеФормы = Ложь;	 
#КонецЕсли

#КонецОбласти
