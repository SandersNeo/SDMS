///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

// Хранит соответствие строки хеша паре "Услуга - Вид деятельности"
&НаКлиенте
Перем ХешВидДеятельностиУслуги;

// Хранит данные для использования на клиенте
&НаКлиенте
Перем КэшВспомогательныхДанных;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РедакторОписания.Создать(ЭтотОбъект, Элементы.ГруппаОписание);

	// форма открывается сразу с редактором
	Функциональность = РедакторОписанияКлиентСервер.ИмяСобытияОткрытияРедактора();
	ОбщегоНазначенияВызовСервера.ОтслеживаниеИспользованияФункциональностиНаСервере(Функциональность);
	ЭтотОбъект[РедакторОписанияКлиентСервер.ИмяРеквизитаОткрытиеОписания()] = Истина;
	
	НастроитьЭлементыФормы();
	ПроизвестиНачальноеЗаполнениеФормы(ПолучитьНастройки());
	
	Если НЕ Параметры.Свойство("ОткрытоСРабочегоСтола") Тогда
		РегистрыСведений.ОтслеживаниеИспользованияФункциональности.Открытиеформы(ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КэшВспомогательныхДанных = ПолучитьКэшВспомогательныхДанных();
	ПриИзмененииНаправления();
	ОбновитьВидимостьИЗначениеГруппыЗаказчиков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗавершениеРаботы Тогда
		Если Модифицированность Тогда
			Отказ = Истина;
			ЗадатьВопросОЗакрытии();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеНастроек" Тогда
		ПерезаполнитьФорму(Неопределено);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВидПроцессаПриИзменении(Элемент)
	
	ОбновитьДоступностьКнопкиЗаписать();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаЗаказчиковНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	ОтфильтрованныеГруппыЗаказчиков = ПолучитьГруппыЗаказчиков(Направление, Система);
	
	ИнтерфейсПриложенияКлиент.ОткрытьФормуВыбораГруппыЗаказчиков(ЭтотОбъект, ОтфильтрованныеГруппыЗаказчиков);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикПриИзменении(Элемент)
	
	ОбновитьДоступностьКнопкиЗаписать();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	ОбновитьКомандуРазработчиков();
	
	ОбновитьДоступностьКнопкиЗаписать();

КонецПроцедуры

&НаКлиенте
Процедура КомандаРазработчиковПриИзменении(Элемент)
	
	ОбновитьДоступностьКнопкиЗаписать();
	ЗаполнитьСписокВыбораСпринта();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиент.УстановитьСерьезность(Элементы.СерьезностьОшибки, СерьезностьОшибки, Назначение);
	
	ОбновитьДоступностьКнопкиЗаписать();
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяЗаявкаНаименованиеПриИзменении(Элемент)
	
	ОбновитьДоступностьКнопкиЗаписать();
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяЗаявкаНаправлениеПриИзменении(Элемент)
	
	ПриИзмененииНаправления();
	ОбновитьВидимостьИЗначениеГруппыЗаказчиков();
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяЗаявкаПредставлениеВидаДеятельностиУслугиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УчетТрудозатратКлиент.ОбработатьВыборВидаДеятельности(ВыбранноеЗначение, ВидДеятельности, Услуга, ХешВидДеятельностиУслуги);
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяЗаявкаПредставлениеВидаДеятельностиУслугиПриИзменении(Элемент)
	
	ОбновитьДоступностьКнопкиЗаписать();

КонецПроцедуры

&НаКлиенте
Процедура НоваяЗаявкаСистемаПриИзменении(Элемент)
	
	ОбновитьДоступностьКнопкиЗаписать();
	ОбновитьВидимостьИЗначениеГруппыЗаказчиков();
	ЗаполнитьСписокКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяЗаявкаСтатусПриИзменении(Элемент)
	
	ОбновитьДоступностьКнопкиЗаписать();
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяЗаявкаТрудозатратыПриИзменении(Элемент)
	
	ОбновитьДоступностьКнопкиЗаписать();
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяЗаявкаЮридическоеЛицоПриИзменении(Элемент)
	
	ОбновитьДоступностьКнопкиЗаписать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродуктПриИзменении(Элемент)
	
	ОбновитьВидимостьИЗначениеГруппыЗаказчиков();
	
КонецПроцедуры

&НаКлиенте
Процедура СерьезностьОшибкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // По умолчанию защита от Ctrl + Shift + F4
	
КонецПроцедуры

&НаКлиенте
Процедура СерьезностьОшибкиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // По умолчанию защита от Shift + F4
	
КонецПроцедуры

&НаКлиенте
Процедура ТегиНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ТегиПослеВыбора", ЭтотОбъект);

	ПараметрыОткрытия = Новый Структура("СписокТегов", СписокТегов);
	ОткрытьФорму("Справочник.Теги.Форма.ДобавлениеТегов", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,
		, , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТегиОчистка(Элемент, СтандартнаяОбработка)
	
	// процедура добавлена для очистики тегов в списке,
	// т.к. в форму ДобавлениеТегов передается именно СписокТегов,
	// а не СписокЗначений Теги
	
	СписокТегов.Очистить();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура Настройки(Команда)
	
	ОткрытьФорму("Документ.Задача.Форма.НастройкиБыстрогоСозданияЗадачи", ,
		ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяЗаявкаСоздать(Команда)
	
	ДанныеОтсутствия = ПользователиВызовСервера.ДанныеОтсутствия(Исполнитель);
	
	Если ДанныеОтсутствия.Отсутствует Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Форма", ЭтотОбъект);
		
		ИнтерфейсПриложенияКлиент.ПодтвердитьВыборОтсутствующегоПользователя(Исполнитель, ДанныеОтсутствия, ДопПараметры);
	Иначе
		ПродолжитьСозданиеНовойЗаявки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьФорму(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОчисткуФормы", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Перезаполнить форму настройками по умолчанию?", РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ГруппаЗаказчиковОбработкаВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ГруппаЗаказчиков = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗадатьВопросОЗакрытии()
	
	ЗаголовокВопроса = "Закрытие мастера создания задачи";
	ТекстВопроса = "Отменить создание задачи и закрыть форму?";
	
	Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, ЗаголовокВопроса);
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗанестиТрудозатраты(Знач ЗадачаСсылка)
	
	Если Трудозатраты > 0 Тогда
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
		
		ДанныеЗаполнения = Документы.Трудозатраты.НовыеПараметрыЗаполненияТрудозатрат();
		ДанныеЗаполнения.Дата = ОбщегоНазначения.ТекущаяДатаСоСдвигом();
		ДанныеЗаполнения.Объект = ЗадачаСсылка;
		ДанныеЗаполнения.Затрата = Трудозатраты;
		ДанныеЗаполнения.ВидДеятельности = ВидДеятельности;
		ДанныеЗаполнения.Пользователь = Пользователь;
		ДанныеЗаполнения.Комментарий = КомментарийКТрудозатратам;
		ДанныеЗаполнения.Услуга = Услуга;
		ДанныеЗаполнения.Автор = Пользователь;
		ДанныеЗаполнения.Направление = Направление;
		
		СозданныеТрудозатраты = Документы.Трудозатраты.ДобавитьТрудозатраты(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораИсполнителей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛичныеДелаСрезПоследних.Сотрудник КАК Пользователь
	|ПОМЕСТИТЬ СотрудникиФилиала
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(&ТекущаяДата, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаСрезПоследних
	|ГДЕ
	|	(ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы)) = &Филиал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|	СотрудникиФилиала КАК СотрудникиФилиала
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО СотрудникиФилиала.Пользователь = Пользователи.Ссылка
	|ГДЕ
	|	Пользователи.ПометкаУдаления = ЛОЖЬ
	|	И Пользователи.Недействителен = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователи.Наименование";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Филиал", ПараметрыСеанса.Филиал);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Элементы.Исполнитель.СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.Пользователь);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораНаправлений()
	
	ТаблицаНаправленийРолей = Пользователи.ТаблицаНаправленийРолейПользователя();
	Элементы.НоваяЗаявкаНаправление.СписокВыбора.ЗагрузитьЗначения(ТаблицаНаправленийРолей.СписокНаправлений.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораСпринта()
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Элементы.Спринт.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокСпринтов(Перечисления.ВидыСпринта.IT, ТекущаяДата));
	Элементы.Спринт.Видимость = Элементы.Спринт.СписокВыбора.Количество() > 0;
	
	Элементы.СпринтДляЗаявки.СписокВыбора.ЗагрузитьЗначения(
		ПолучитьСписокСпринтов(Перечисления.ВидыСпринта.Планирование, ТекущаяДата));
	Элементы.СпринтДляЗаявки.Видимость = Элементы.СпринтДляЗаявки.СписокВыбора.Количество() > 0;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокСпринтов(ВидСпринта, ТекущаяДата)
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ДокументСпринт.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Спринт КАК ДокументСпринт
	|ГДЕ
	|	НЕ ДокументСпринт.ПометкаУдаления
	|	И КОНЕЦПЕРИОДА(ДокументСпринт.ДатаОкончания, ДЕНЬ) >= &ДатаНачала
	|{ГДЕ
	|	ДокументСпринт.Филиал КАК Филиал,
	|	ДокументСпринт.Команда КАК Команда,
	|	ДокументСпринт.ВидСпринта КАК ВидСпринта}
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументСпринт.ДатаНачала";
	#КонецОбласти
	
	ОтборПоКоманде = ЗначениеЗаполнено(КомандаРазработчиков);  		
		
	Если ОтборПоКоманде Тогда
		ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ПостроительЗапроса,
			"Команда", ВидСравнения.Равно, КомандаРазработчиков);	
		
		Филиалы = Новый СписокЗначений;
		Филиалы.Добавить(ПараметрыСеанса.Филиал);	
		
		КомандаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КомандаРазработчиков, "Родитель");
		
		Если КомандаРодитель = Справочники.Филиалы.КастомныеКоманды Тогда
			Филиалы.Добавить(КомандаРодитель);
		КонецЕсли; 
		
		ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ПостроительЗапроса,
			"Филиал", ВидСравнения.ВСписке, Филиалы);	
	Иначе	
		ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ПостроительЗапроса,
			"Филиал", ВидСравнения.Равно, ПараметрыСеанса.Филиал);	
	КонецЕсли;

	ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ПостроительЗапроса,
		"ВидСпринта", ВидСравнения.Равно, ВидСпринта);
	
	ПостроительЗапроса.Параметры.Вставить("ДатаНачала", ТекущаяДата);
	ПостроительЗапроса.Выполнить();	
		
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	СписокСпринтов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		СписокСпринтов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокСпринтов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораСтатусов()
	
	СписокВыбора = Элементы.НоваяЗаявкаСтатус.СписокВыбора;
	РаботаСПроцессами.ЗаполнитьСтатусыДляФормыБыстрогоСозданияЗадачи(СписокВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокКоманд()
	
	СписокВыбора = Элементы.КомандаРазработчиков.СписокВыбора;
	СписокВыбора.Очистить();
	СписокКоманд = Справочники.Филиалы.ПолучитьКомандыРазработки(ПараметрыСеанса.Филиал);
	
	Для Каждого ЭлементКоманда Из СписокКоманд Цикл
		СписокВыбора.Добавить(ЭлементКоманда.Значение, ЭлементКоманда.Представление);
	КонецЦикла;   
	
	СписокКоманд = Справочники.Филиалы.ПолучитьКастомныеКомандыПользователя(Система);
	
	Для Каждого ЭлементКоманда Из СписокКоманд Цикл
		Если СписокВыбора.НайтиПоЗначению(ЭлементКоманда.Значение) = Неопределено Тогда 
			СписокВыбора.Добавить(ЭлементКоманда.Значение, ЭлементКоманда.Представление);          
		КонецЕсли;
	КонецЦикла;   
	
	Элементы.КомандаРазработчиков.Видимость = (СписокВыбора.Количество() <> 0); 	

КонецПроцедуры

&НаСервере
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат ИмяФормы;
	
КонецФункции

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	ЗаполнитьСписокВыбораНаправлений();
	ЗаполнитьСписокВыбораСтатусов();
	ЗаполнитьСписокВыбораИсполнителей();
	ЗаполнитьСписокВыбораСпринта();
	ОбщегоНазначения.ЗаполнитьСписокНазначений(Элементы.Назначение.СписокВыбора);
	ОбщегоНазначения.ЗаполнитьСписокСерьезностьОшибки(Элементы.СерьезностьОшибки.СписокВыбора);
	ЗаполнитьСписокКоманд();
	
	УстановитьВидимостьТипаЗадачи();
	
	Элементы.ГруппаСозданаЗадача.Видимость = Ложь;       
		
КонецПроцедуры

&НаКлиенте
Функция НастройкиФрагмент()
	
	Перем ИсточникНастроек, МассивРазделов, НастройкиВРазделе, ПараметрыОткрытия, Раздел;
	
	// Опишем все разделы которые мы хотим видеть в форме настроек
	МассивРазделов = Новый Массив;
	
	// Создадим новый раздел для настроек
	Раздел = Новый Структура("Имя, Представление, Настройки, ИсточникНастроек");
	
	// Зададим наименование имя раздела и его тектсовое предсталвение на форме
	Раздел.Имя = "НастройкиПоУмолчанию";
	Раздел.Представление = "Настройки по умолчанию";
	
	// Значение настроек хранится в виде структуры в ХранилищеНастроекДанныхФорм
	// Передадим адрес, по которому необходимо искать эти настройки
	// В нашем случае фиксированно - полное имя формы + тип настрйоки - "Настройки по умолчанию"
	
	ИсточникНастроек = Новый Структура("Объект, Настройка", ИмяФормы, "НастройкиПоУмолчанию");
	Раздел.Вставить("ИсточникНастроек", ИсточникНастроек);
	
	// Опишем список полей которые надо расположить в разделе
	НастройкиВРазделе = Новый Массив;
	
	// При изменении юр.лица мы также должны изменить и списка юрлиц которые работают с этим юрлицом
	// Если в форме будут два элемента с типами "направление" и "Юрлицо" то они автоматически свяжутся!
	ТипНаправления = Тип("СправочникСсылка.НаправленияРазработки");
	ТипЮридическогоЛица = Тип("СправочникСсылка.ЮридическиеЛица");
	ТипНазначения = Тип("СправочникСсылка.НазначенияЗадач");
	ТипСистемы = Тип("СправочникСсылка.СистемыУчета");
	ТипВидаЗадачи = Тип("СправочникСсылка.ВидыЗадач");
	
	ПоляСтруктуры = "Имя, Представление, Тип";
	
	НастройкиВРазделе.Добавить(Новый Структура(ПоляСтруктуры, "Направление", "Направление", ТипНаправления));
	НастройкиВРазделе.Добавить(Новый Структура(ПоляСтруктуры, "ЮрЛицо", "Юр. лицо", ТипЮридическогоЛица));
	
	НастройкиВРазделе.Добавить(Новый Структура(ПоляСтруктуры, "Назначение", "Назначение", ТипНазначения));
	НастройкиВРазделе.Добавить(Новый Структура(ПоляСтруктуры, "Система", "Система", ТипСистемы));
	НастройкиВРазделе.Добавить(Новый Структура(ПоляСтруктуры, "Тип задачи", "ВидЗадачи", ТипВидаЗадачи));
	
	Раздел.Настройки = НастройкиВРазделе;
	
	МассивРазделов.Добавить(Раздел);
	
	ПараметрыОткрытия = Новый Структура("Разделы",  МассивРазделов);
	
	Возврат ПараметрыОткрытия;

КонецФункции

&НаКлиенте
Процедура ОбновитьВидимостьИЗначениеГруппыЗаказчиков()
	
	ЕстьГруппыЗаказчиков = Ложь;
	ОтобранныеГруппы = ПолучитьГруппыЗаказчиков(Направление, Система);
			
	Если НЕ ЗначениеЗаполнено(Продукт) И ОтобранныеГруппы.Количество() > 0 Тогда
		Элементы.ГруппаЗаказчиков.Видимость = Истина;
	Иначе
		Элементы.ГруппаЗаказчиков.Видимость = Ложь;
		ГруппаЗаказчиков = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьВидыДеятельностиУслуг(ПолеВидаДеятельности, Знач Направление)
	
	Если ЗначениеЗаполнено(Направление) Тогда
		УчетТрудозатрат.ДополнитьВидыДеятельностиУслугами(ПолеВидаДеятельности, Направление);
	Иначе
		ПолеВидаДеятельности.СписокВыбора.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКнопкиЗаписать()
	
	ИспользуютсяУслуги = Элементы.НоваяЗаявкаЮридическоеЛицо.Видимость;
	ИспользуютсяВидыПроцессов = Элементы.ВидПроцесса.Видимость;
			
	ЗаполненыОсновныеПоля = ЗначениеЗаполнено(Наименование) И
							ЗначениеЗаполнено(Направление) И
							?(ИспользуютсяВидыПроцессов, ЗначениеЗаполнено(ВидПроцесса), Истина) И
							?(ИспользуютсяУслуги, ЗначениеЗаполнено(ЮрЛицо), Истина) И
							ЗначениеЗаполнено(Назначение) И
							ЗначениеЗаполнено(Заказчик) И
							ЗначениеЗаполнено(Система) И
							ЗначениеЗаполнено(Статус); 
							
	Если НЕ ЗаполненыОсновныеПоля ИЛИ (Трудозатраты > 0 И НЕ ЗначениеЗаполнено(ВидДеятельности)) Тогда
		Элементы.ФормаЗаписать.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	ИсполнительЗаполнен = ЗначениеЗаполнено(Исполнитель);
	ДоступностьЗаписи = Истина;
	
	Если НЕ ИсполнительЗаполнен Тогда
		ПорядокСтатуса = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Статус, "Порядок");
		ПорядокСтатусаВРаботе = КэшВспомогательныхДанных.ПорядокСтатусаВРаботе;
		
		Если ПорядокСтатуса >= ПорядокСтатусаВРаботе Тогда
			ДоступностьЗаписи = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ФормаЗаписать.Доступность = ДоступностьЗаписи;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандуРазработчиков()
	
	КомандаРазработчиков = РегистрыСведений.ЛичныеДела.КомандаПользователя(Исполнитель);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСерьезностьОшибки()
		
	Если Назначение = Справочники.НазначенияЗадач.Ошибка Тогда 
		СерьезностьОшибки = Справочники.СерьезностьОшибок.Средняя;
		Элементы.СерьезностьОшибки.Видимость = Истина;
	Иначе
		СерьезностьОшибки = Справочники.СерьезностьОшибок.ПустаяСсылка();
		Элементы.СерьезностьОшибки.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОчисткуФормы(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПроизвестиНачальноеЗаполнениеФормы(ПолучитьНастройки());
		ПриИзмененииНаправления();
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПереходЗадачиПоСтатусам(ЗадачаОбъект)
	
	// Получение массива статусов
	МассивСтатусов = Элементы.НоваяЗаявкаСтатус.СписокВыбора.ВыгрузитьЗначения();
	
	// Определяем индекс статуса в массиве
	ЦелевойИндекс = МассивСтатусов.Найти(Статус);
	
	// Последовательно перебираем статусы и устанавливаем их задаче
	Для ИндексСтатуса = 1 По ЦелевойИндекс Цикл
		НовыйСтатус = МассивСтатусов.Получить(ИндексСтатуса);
		Если НовыйСтатус <> ЗадачаОбъект.Статус Тогда
			ЗадачаОбъект.Статус = НовыйСтатус;
			ЗадачаОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеПодтвержденияВыбораОтсутствующего(Знач ДопПараметры) Экспорт
	
	ПродолжитьСозданиеНовойЗаявки();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриНажатииПоляHTMLДокумента(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РедакторОписанияКлиент.ПриНажатииПоляHTMLДокумента(ЭтотОбъект, ДанныеСобытия, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьГруппыЗаказчиков(Знач Направление, Знач Система)
	
	Результат = Новый Массив;
	
	ЭлементНаправление = КэшВспомогательныхДанных.ГруппыЗаказчиков.Получить(Направление);
	                     
	Если ЭлементНаправление <> Неопределено Тогда
		ЭлементСистема = ЭлементНаправление.Получить(Система);
		
		Если ЭлементСистема <> Неопределено Тогда
			Результат = ЭлементСистема;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеПослеИзмененияНаправления(Знач Направление)
	
	Результат = Новый Структура("ДанныеЮрЛицо, ДанныеВидыДеятельности, ИспользованиеВидовПроцессов");
	
	Результат.ИспользованиеВидовПроцессов = ОбщегоНазначенияВызовСервера.ПолучитьИспользованиеВидовПроцессов(Направление);
	
	Результат.ДанныеЮрЛицо = УстановитьСвойстваЮридическогоЛица(Направление);
	
	ДанныеВидыДеятельности = Новый Структура("СписокВыбора, ХешВидДеятельностиУслуги", Новый СписокЗначений);
	ДополненныйСписок = УчетТрудозатрат.ДополнитьВидыДеятельностиУслугами(ДанныеВидыДеятельности, Направление);
	ДанныеВидыДеятельности.ХешВидДеятельностиУслуги = ДополненныйСписок;
	
	Результат.ДанныеВидыДеятельности = ДанныеВидыДеятельности;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьЗаполненнуюЗадачу(Знач ЗаявкаСсылка)
	
	Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	// Создание задачи и установка ссылки, номера и объекта основания
	ДокументЗадача = Документы.Задача.СоздатьДокумент();
	ДокументЗадача.УстановитьСсылкуНового(Документы.Задача.ПолучитьСсылку());
	ДокументЗадача.УстановитьНовыйНомер(Документы.Задача.ПолучитьПрефикс());
	ДокументЗадача.ОбъектОснование = ЗаявкаСсылка;
	
	ДокументЗадача.Автор = Пользователь;
	ДокументЗадача.Дата = ТекущаяДатаСеанса();
	ДокументЗадача.Заказчик = Заказчик;
	ДокументЗадача.Наименование = Наименование;
	ДокументЗадача.Направление = Направление;
	ДокументЗадача.СистемаУчета = Система;
	ДокументЗадача.Статус = Справочники.СтатусыОбъектов.Новый;
	ДокументЗадача.Назначена = Исполнитель;
	ДокументЗадача.Филиал = ПараметрыСеанса.Филиал;
	ДокументЗадача.Назначение = Назначение;
	ДокументЗадача.СерьезностьОшибки = СерьезностьОшибки;
	ДокументЗадача.КомандаРазработчиков = КомандаРазработчиков;
	ДокументЗадача.ВидЗадачи = ВидЗадачи;
	ДокументЗадача.ВидПроцесса = ВидПроцесса;
	ДокументЗадача.Проект = Проект;
		
	Возврат ДокументЗадача;
	
КонецФункции

&НаСервере
Функция ПолучитьЗаполненнуюЗаявку()
	
	// Создание заявки и установка ссылки и номера
	ДокументЗаявка = Документы.ЗаявкаНаРазработку.СоздатьДокумент();
	ДокументЗаявка.ДополнительныеСвойства.Вставить("ЭтоСозданиеЗаявкиОснованиеЗадачи");
		
	ДокументЗаявка.УстановитьСсылкуНового(Документы.ЗаявкаНаРазработку.ПолучитьСсылку());
	ДокументЗаявка.УстановитьНовыйНомер(Документы.ЗаявкаНаРазработку.ПолучитьПрефикс());
	
	ДокументЗаявка.Автор = ПараметрыСеанса.ТекущийПользователь;
	ДокументЗаявка.Дата = ТекущаяДатаСеанса();
	ДокументЗаявка.Наименование = Наименование;
	ДокументЗаявка.Направление = Направление;
	ДокументЗаявка.ЮридическоеЛицо = ЮрЛицо;
	ДокументЗаявка.Назначение = Назначение;
	ДокументЗаявка.СерьезностьОшибки = СерьезностьОшибки;
	ДокументЗаявка.ВидПроцесса = ВидПроцесса;
	ДокументЗаявка.ОбъектОснование = Проект;
	ДокументЗаявка.Продукт = Продукт;
		
	ДобавитьВТаблицуСистемРазработки = ДокументЗаявка.СистемыРазработки.Добавить();
	ДобавитьВТаблицуСистемРазработки.Система = Система;
	
	Если Элементы.ГруппаЗаказчиков.Видимость Тогда
		Если ГруппаЗаказчиков <> Неопределено Тогда
			ДобавитьВТаблицуСистемРазработки.ГруппаЗаказчиков = ГруппаЗаказчиков;
		Иначе
			ДобавитьВТаблицуСистемРазработки.ГруппаЗаказчиков = Справочники.ГруппыЗаказчиковНаправлений.ПрочиеЗаказчики;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДокументЗаявка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКэшВспомогательныхДанных()
		
	ВспомогательныеДанные = Новый Структура;
	
	ГруппыЗаказчиков = ИнтерфейсПриложения.ПолучитьСписокГруппЗаказчиков();
	ВспомогательныеДанные.Вставить("ГруппыЗаказчиков", ГруппыЗаказчиков);
	
	Статусы = Справочники.СтатусыОбъектов.ОписаниеСтатусов();
	ВспомогательныеДанные.Вставить("Статусы", Статусы);
	
	ПорядокСтатусаВРаботе = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтатусыОбъектов.ВРаботе, "Порядок");
	ВспомогательныеДанные.Вставить("ПорядокСтатусаВРаботе", ПорядокСтатусаВРаботе);
		
	Возврат ВспомогательныеДанные;
	
КонецФункции

&НаСервере
Функция ПолучитьНастройки()
	
	МассивНастроек = Новый Массив;
	МассивНастроек.Добавить(ПланыВидовХарактеристик.ВидыНастроекПользователя.НаправлениеДляБыстрогоСозданияЗадачи);
	МассивНастроек.Добавить(ПланыВидовХарактеристик.ВидыНастроекПользователя.НазначениеДляБыстрогоСозданияЗадачи);
	МассивНастроек.Добавить(ПланыВидовХарактеристик.ВидыНастроекПользователя.СистемаДляБыстрогоСозданияЗадачи);
	МассивНастроек.Добавить(ПланыВидовХарактеристик.ВидыНастроекПользователя.ПродуктДляБыстрогоСозданияЗадачи);
	МассивНастроек.Добавить(ПланыВидовХарактеристик.ВидыНастроекПользователя.ГруппаЗаказчиковДляБыстрогоСозданияЗадачи);
	МассивНастроек.Добавить(ПланыВидовХарактеристик.ВидыНастроекПользователя.ЮрЛицоДляБыстрогоСозданияЗадачи);
	
	Настройки = РегистрыСведений.НастройкиПользователя.ЗначенияНастроек(ПараметрыСеанса.ТекущийПользователь, МассивНастроек);
	
	Если Настройки = Неопределено Тогда	
		Настройки = Новый Структура;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииНаправления()
	
	// Очистка списка выбора юридических лиц
	ЭлементФормыЮрЛицо = Элементы.НоваяЗаявкаЮридическоеЛицо;
	СписокВыбораЮрЛицо = ЭлементФормыЮрЛицо.СписокВыбора;
	СписокВыбораЮрЛицо.Очистить();
	
	// Очистка списка выбора видов деятельности услуг
	СписокВыбораВидаДеятельности = Элементы.НоваяЗаявкаПредставлениеВидаДеятельностиУслуги.СписокВыбора;
	СписокВыбораВидаДеятельности.Очистить();
	
	// Очистка выбранных вида деятельности, услуги и представления вида деятельности услуги
	ВидДеятельности = ПредопределенноеЗначение("Справочник.ВидыДеятельности.ПустаяСсылка");
	Услуга = ПредопределенноеЗначение("Справочник.Услуги.ПустаяСсылка");
	ПредставлениеВидаДеятельностиУслуги = "";
	
	Если ЗначениеЗаполнено(Направление) Тогда
		// Получение данных по юридическим лицам и видам деятельности услуг
		Результат = ПолучитьДанныеПослеИзмененияНаправления(Направление);
		
		Для Каждого ЭлементСпискаЗначений Из Результат.ДанныеЮрЛицо.СписокВыбора Цикл
			
			Если ЭлементСпискаЗначений.Значение = Результат.ДанныеЮрЛицо.ЮрЛицо Тогда
				ПредставлениеСтроки = Новый ФорматированнаяСтрока(ЭлементСпискаЗначений.Представление, Новый Шрифт(, , Истина));
			Иначе
				ПредставлениеСтроки = ЭлементСпискаЗначений.Представление; 
			КонецЕсли;
			
			СписокВыбораЮрЛицо.Добавить(ЭлементСпискаЗначений.Значение, ПредставлениеСтроки);
		КонецЦикла;
		
		// Установка данных по юридическим лицам
		Если СписокВыбораЮрЛицо.НайтиПоЗначению(ЮрЛицо) = Неопределено Тогда
			ЮрЛицо = Результат.ДанныеЮрЛицо.ЮрЛицо;
		КонецЕсли;
		
		ЭлементФормыЮрЛицо.Видимость = Результат.ДанныеЮрЛицо.ЮрЛицоВидимость;
		ЭлементФормыЮрЛицо.ТолькоПросмотр = (СписокВыбораЮрЛицо.Количество() = 1);
		
		// Установка данных по видам деятельности
		ХешВидДеятельностиУслуги = Результат.ДанныеВидыДеятельности.ХешВидДеятельностиУслуги;
		
		Для Каждого ЭлементСпискаЗначений Из Результат.ДанныеВидыДеятельности.СписокВыбора Цикл
			СписокВыбораВидаДеятельности.Добавить(ЭлементСпискаЗначений.Значение,
				ЭлементСпискаЗначений.Представление, , ЭлементСпискаЗначений.Картинка);
		КонецЦикла;
			
		Элементы.ВидПроцесса.Видимость = Результат.ИспользованиеВидовПроцессов;
		Если НЕ Результат.ИспользованиеВидовПроцессов Тогда
			ВидПроцесса = Неопределено;
		КонецЕсли;
		
	Иначе
		// По умолчанию очистим и скроем поле "Юридическое лицо"
		ЮрЛицо = ПредопределенноеЗначение("Справочник.ЮридическиеЛица.ПустаяСсылка");
		ЭлементФормыЮрЛицо.Видимость = Ложь;
		
	КонецЕсли;
	
	ОбновитьДоступностьКнопкиЗаписать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСозданиеНовойЗаявки()
	
	ОповеститьОДобавленииТрудозатрат = Трудозатраты > 0;
	
	ОписаниеОбъекта = РедакторОписанияКлиент.ПолучитьТекст(ЭтотОбъект);
	ЗаявкаУспешноСоздана = СоздатьЗаявкуНаСервере(ОписаниеОбъекта);
	
	Если ЗаявкаУспешноСоздана Тогда
		Оповестить(СобытияОповещенияКлиент.ИмяСобытияИзмененияСтатусаЗадачи());
		
		Если ОповеститьОДобавленииТрудозатрат Тогда
			Оповестить(СобытияОповещенияКлиент.ИмяСобытияДобавленияТрудозатрат(), СозданнаяЗадача, СозданныеТрудозатраты);
		КонецЕсли;
		
		ПриИзмененииНаправления();
		Модифицированность = Ложь;
	КонецЕсли;
	
	ОбновитьДоступностьКнопкиЗаписать();	
	
КонецПроцедуры

&НаСервере
Процедура ПроизвестиНачальноеЗаполнениеФормы(СохраненныеНастройки = Неопределено)
	
	Исполнитель = ПараметрыСеанса.ТекущийПользователь;
	Заказчик = ПараметрыСеанса.ТекущийПользователь;
	
	// Очистка значений полей
	Наименование = "";
	Направление = Справочники.НаправленияРазработки.ПустаяСсылка();
	ЮрЛицо = Справочники.ЮридическиеЛица.ПустаяСсылка();
	Система = Справочники.СистемыУчета.ПустаяСсылка();
	Статус = Справочники.СтатусыОбъектов.Новый;
	Трудозатраты = 0;
	КомментарийКТрудозатратам = "";
	ПредставлениеВидаДеятельностиУслуги = Справочники.ВидыДеятельностиУслуг.ПустаяСсылка();
	Услуга = Справочники.Услуги.ПустаяСсылка();
	ВидДеятельности = Справочники.ВидыДеятельности.ПустаяСсылка();
	Назначение = Справочники.НазначенияЗадач.НоваяЗадача;
	
	ВидПроцесса = Перечисления.ВидыПроцессов.ПустаяСсылка();
	
	Если СохраненныеНастройки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СохраненныеНастройки); 	
	КонецЕсли;
	
	ОбновитьСерьезностьОшибки();
	ОбновитьКомандуРазработчиков();
	
	// Очистка зависимых выпадающих списков
	Элементы.НоваяЗаявкаЮридическоеЛицо.СписокВыбора.Очистить();
	
	РедакторОписания.ЗаполнитьТекстHTML(ЭтотОбъект, "");
	
КонецПроцедуры

&НаСервере
Функция СоздатьЗаявкуНаСервере(Знач ОписаниеОбъекта)
	
	ЗаявкаУспешноСоздана = Истина;
	
	ЗаявкаОбъект = ПолучитьЗаполненнуюЗаявку();
	ЗаявкаОбъект.ДополнительныеСвойства.Вставить("ОбновитьДатыИзмененийИКоличествоСистем");
	
	ЗаявкаСсылка = ЗаявкаОбъект.ПолучитьСсылкуНового();
	
	ЗадачаОбъект = ПолучитьЗаполненнуюЗадачу(ЗаявкаСсылка);
	
	СжатиеДанных = Новый СжатиеДанных(9);
	
	НачатьТранзакцию();
	Попытка
		РезультатОбработки = РедакторОписания.ОбработатьОписание(ЗаявкаСсылка, ОписаниеОбъекта);
		ОписаниеОбъекта = РезультатОбработки.Описание;
		
		ЗаявкаОбъект.Описание = Новый ХранилищеЗначения(ОписаниеОбъекта, СжатиеДанных);
		ЗадачаОбъект.Описание = Новый ХранилищеЗначения(ОписаниеОбъекта, СжатиеДанных);
		
		ЗаявкаОбъект.Записать();		
		ЗадачаОбъект.Записать();
		
		Для Каждого Тег Из Теги Цикл
			РегистрыСведений.ТегиОбъектов.Добавить(Тег.Значение, ЗаявкаОбъект.Ссылка);
			РегистрыСведений.ТегиОбъектов.Добавить(Тег.Значение, ЗадачаОбъект.Ссылка);
		КонецЦикла;
				
		Если ЗначениеЗаполнено(Спринт) Тогда
			РегистрыСведений.СоставСпринтов.ОбновитьСпринтОбъекта(ЗадачаОбъект.Ссылка, Спринт);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СпринтДляЗаявки) Тогда
			РегистрыСведений.СоставСпринтов.ОбновитьСпринтОбъекта(ЗаявкаОбъект.Ссылка, СпринтДляЗаявки);
		КонецЕсли;
		
		Документы.Задача.ОбработатьПереходЗадачиПоСтатусам(ЗадачаОбъект, Статус);
		УстановитьЗначениеДополнительногоРеквизита(ЗадачаОбъект.Ссылка);
		ЗанестиТрудозатраты(ЗадачаОбъект.Ссылка);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаявкаУспешноСоздана = Ложь;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Произошла ошибка при создании заявки.");
		
		ИмяСобытия = ИмяСобытияЖурналаРегистрации();
		Информация = ИнформацияОбОшибке();
		ПодробноеПредставление = ПодробноеПредставлениеОшибки(Информация);
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставление);
	КонецПопытки;
	
	Элементы.ГруппаСозданаЗадача.Видимость = ЗаявкаУспешноСоздана;
	
	Если ЗаявкаУспешноСоздана Тогда
		СозданнаяЗадача = ЗадачаОбъект.Ссылка;
		ПроизвестиНачальноеЗаполнениеФормы(ПолучитьНастройки());
	КонецЕсли;
	
	Возврат ЗаявкаУспешноСоздана;
	
КонецФункции

&НаСервере
Функция СтруктураДанныхТрудозатрат()
	
	Результат = Новый Структура;
	Результат.Вставить("ЗатратыВремени", 0);
	Результат.Вставить("Услуга", Справочники.Услуги.ПустаяСсылка());
	Результат.Вставить("ВидДеятельности", Справочники.ВидыДеятельности.ПустаяСсылка());
	Результат.Вставить("Комментарий", "");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СформироватьНастройкиДляСохранения()
	
	Результат = Новый Структура;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьТипаЗадачи()
	
	ВидыЗадач = РегистрыСведений.ВидыЗадачФилиалов.ПолучитьВидыЗадач(ПараметрыСеанса.Филиал);
	Если ВидыЗадач.Количество() = 0 Тогда
		Элементы.ВидЗадачи.Видимость = Ложь;
	Иначе
		Для Каждого СсылкаВидаЗадачи Из ВидыЗадач Цикл
			Элементы.ВидЗадачи.СписокВыбора.Добавить(СсылкаВидаЗадачи);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеДополнительногоРеквизита(Знач Ссылка)
	
	РегистрыСведений.ЗначенияДополнительныхРеквизитовОбъектов.УстановитьЗначениеДополнительногоРеквизита(Ссылка,
		ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.СозданЧерезБыстроеСозданиеЗадачи, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьСвойстваЮридическогоЛица(Знач Направление)
	
	Результат = Новый Структура;
	Результат.Вставить("ЮрЛицо", Справочники.ЮридическиеЛица.ПустаяСсылка());
	Результат.Вставить("СписокВыбора", Новый СписокЗначений);
	Результат.Вставить("ЮрЛицоВидимость", Ложь);
	
	Если НЕ ЗначениеЗаполнено(Направление) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыЮрЛица = Документы.ЗаявкаНаРазработку.ПараметрыЮрЛица(Направление);
	Результат.ЮрЛицо = ПараметрыЮрЛица.ОсновноеЮрЛицо;
	Результат.ЮрЛицоВидимость = ПараметрыЮрЛица.ВидимостьЮрЛица;
	
	Для Каждого Элемент Из ПараметрыЮрЛица.СписокЮрЛиц Цикл
		Результат.СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПроектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивСтатусов = ИнтерфейсПриложенияКлиент.ПолучитьОграниченияПоСтатусамДляПроекта(КэшВспомогательныхДанных.Статусы);
	
	ПараметрыОткрытия  = Новый Структура("ФиксированныеНастройки", Новый НастройкиКомпоновкиДанных);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборОснованияПроект", ЭтотОбъект);
					
	ОтборНеактуальный = ПараметрыОткрытия.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборНеактуальный.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборНеактуальный.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");
	ОтборНеактуальный.ПравоеЗначение = МассивСтатусов;
	ОтборНеактуальный.Использование  = Истина;
					
	ОткрытьФорму("Справочник.Проекты.ФормаВыбора", ПараметрыОткрытия, 
		ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры
	
&НаКлиенте
Процедура ОбработатьВыборОснованияПроект(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	Проект = Результат;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ТегиПослеВыбора(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") 
		ИЛИ НЕ Результат.Модифицированность Тогда
		
		Возврат;
	КонецЕсли;
	
	ТегиПослеВыбораНаСервере(Результат.СписокТегов);
	
КонецПроцедуры

&НаСервере
Процедура ТегиПослеВыбораНаСервере(Знач Список)
	
	НаборТегов = Новый СписокЗначений;
	
	Для Каждого Строка Из Список Цикл
		Если Строка.Тег.Пустая() Тогда 
			СсылкаНаТег = Справочники.Теги.Добавить(Строка.ТегПредставление);
			Строка.Тег = СсылкаНаТег;
		Иначе	
			СсылкаНаТег = Строка.Тег;
		КонецЕсли;
		
		НаборТегов.Добавить(СсылкаНаТег);
	КонецЦикла;
	
	Теги = НаборТегов;
	
	СписокТегов.Загрузить(Список.Выгрузить());	

КонецПроцедуры

#КонецОбласти
