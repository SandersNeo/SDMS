///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ОписаниеПеременных

// Хранит состояние объекта до записи
Перем ДанныеДоЗаписи;

// Признак, что изменился назначенный
Перем ИзменилсяНазначенный;

// Хранит признак, что у объекта изменился объект-основание
Перем ИзменилосьОснование;

// Хранит признак, что у объекта изменился проект
Перем ИзменилсяПроект;

// Признак, что изменился система учета
Перем ИзмениласьСистема;

// Признак, что изменился статус
Перем ИзменилсяСтатус;

// Признак, что изменился филиал
Перем ИзменилсяФилиал;

// Хранит задачу, из которой создается задача для автотеста
Перем ИзначальнаяЗадача;

// Хранит описание изменений объекта
Перем ОписаниеИзменений;

// Хранит признак изменения описания
Перем ОписаниеИзменилось;

// Хранит признак, указывающий, что объект еще не записан в БД
Перем ЭтоНовыйОбъект;

#КонецОбласти
	
#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	ЭтоНовыйОбъект = ЭтоНовый();

	РезультатПроверки = Документы.Задача.ПроверитьВозможностьСозданияЗадачи(ЭтоНовыйОбъект, ОбъектОснование, Отказ);
	
	Если НЕ РезультатПроверки.РазрешитьСоздание Тогда
		Возврат;
	КонецЕсли;
	
	// ДЕЙСТВИЯ, СВЯЗАННЫЕ С ОБРАЩЕНИЕМ К "СТАРЫМ" ЗНАЧЕНИЯМ РЕКВИЗИТОВ ОБЪЕКТА
	
	// Данные объекта до записи	
	ДанныеДоЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, 
		"Автор, Заказчик, Назначена, Направление, ОбъектОснование,
		|Описание, Порядок, Проект, ПроцентВыполнения, СистемаУчета, Статус, Филиал, КомандаРазработчиков");
	
	ИзменилсяСтатус = (Статус <> ДанныеДоЗаписи.Статус);
	ИзменилсяНазначенный = (Назначена <> ДанныеДоЗаписи.Назначена);
	ИзменилосьОснование = (ОбъектОснование <> ДанныеДоЗаписи.ОбъектОснование);
	ИзменилсяПроект = (Проект <> ДанныеДоЗаписи.Проект);
	ИзменилсяФилиал = (Филиал <> ДанныеДоЗаписи.Филиал);
	ИзмениласьСистема = (СистемаУчета <> ДанныеДоЗаписи.СистемаУчета);
		
	// Данные объекта до записи для фиксации изменений состояния в РС.ОчередьСобытийНаОбработку 
	ОписаниеИзменений = ОбщегоНазначения.ПолучитьСостояниеОбъектаДоЗаписи(Ссылка);
	
	Если ДополнительныеСвойства.Свойство("ОценкаТрудозатрат") Тогда
		ОписаниеИзменений.Значения.Реквизиты.Вставить("ОценкаТрудозатрат", ДополнительныеСвойства.ОценкаТрудозатрат);
	КонецЕсли; 
	
	Если ДополнительныеСвойства.Свойство("ОценкаТрудозатратТестирования") Тогда
		ОписаниеИзменений.Значения.Реквизиты.Вставить("ОценкаТрудозатратТестирования", ДополнительныеСвойства.ОценкаТрудозатратТестирования);
	КонецЕсли; 

	Если ДополнительныеСвойства.Свойство("ИзмененоОписаниеПримечаниеРазработчиков") Тогда
		ОписаниеИзменений.Вставить("ИзмененоПримечаниеРазработчиков", ДополнительныеСвойства.ИзмененоОписаниеПримечаниеРазработчиков);
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ИзмененоОписаниеПримечаниеТестировщиков") Тогда
		ОписаниеИзменений.Вставить("ИзмененоПримечаниеТестировщиков", ДополнительныеСвойства.ИзмененоОписаниеПримечаниеТестировщиков);
	КонецЕсли;
		
	ИнтеграцияДополнительныхПодсистем.ДополнитьОписаниеИзменения(ДополнительныеСвойства, ОписаниеИзменений);
		
	// ДЕЙСТВИЯ, СВЯЗАННЫЕ С ПРОВЕРКАМИ И ЗАПОЛНЕНИЕМ ЗНАЧЕНИЙ РЕКВИЗИТОВ ОБЪЕКТА
		
	// Заполнение реквизитов Автор и ДатаДобавления для новых строк чек-листа
	ЗаполнитьРеквизитыНовыхСтрокЧекЛиста();		
	
	ПредыдущаяОценкаТрудозатрат = УчетТрудозатрат.ПолучитьПлановыеТрудозатраты(Ссылка);
	ПредыдущаяОценкаТрудозатратТестирования = УчетТрудозатрат.ПолучитьПлановыеТрудозатраты(
		Ссылка, Перечисления.ТипыТрудозатрат.Тестирование);
	
	Если ДополнительныеСвойства.Свойство("ОценкаТрудозатрат") 
		И ДополнительныеСвойства.ОценкаТрудозатрат <> ПредыдущаяОценкаТрудозатрат Тогда
		
		ДополнительныеСвойства.Вставить("ИзмениласьОценкаТрудозатрат");
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ОценкаStoryPoint") Тогда
		ПредыдущаяОценкаStoryPoint = ПолучитьОценкуStoryPoint(Ссылка); 
		
		Если ДополнительныеСвойства.ОценкаStoryPoint <> ПредыдущаяОценкаStoryPoint Тогда
			ДополнительныеСвойства.Вставить("ИзмениласьОценкаStoryPoint");
		КонецЕсли; 
	КонецЕсли;
		
	Если ДополнительныеСвойства.Свойство("ОценкаТрудозатратТестирования") 
		И ДополнительныеСвойства.ОценкаТрудозатратТестирования <> ПредыдущаяОценкаТрудозатратТестирования Тогда
		
		ДополнительныеСвойства.Вставить("ИзмениласьОценкаТрудозатратТестирования");
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	
	// Изменение вида родительского проекта
	Если ИзменилосьОснование ИЛИ ИзменилсяПроект Тогда
		Если ЗначениеЗаполнено(ОбъектОснование) Тогда
			ВидРодительскогоПроекта = ОбщегоНазначения.ПолучитьВидРодительскогоПроекта(ОбъектОснование);
		Иначе
			ВидРодительскогоПроекта = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// Если объект изменен записываем дату изменения, и дату изменения в объект верхнего уровня
	Если ДополнительныеСвойства.Свойство("ОбновитьДатыПоследнихИзменений") Тогда
		ДатаПоследнегоИзменения = ТекущаяДата;
	КонецЕсли;
	
	// Если смена статуса происходила из формы задачи или заявки
	Если ДополнительныеСвойства.Свойство("ПроверкаИзмененияСтатусаПередЗаписью") Тогда
		// Проверка изменения статуса задачи
		ОбработатьИзмененияСтатусаЗадачи(ИзменилсяСтатус);
		
		// Если была создана задача от заявки в статусе "На рассмотрение" или "В реализацию"
	ИначеЕсли ИзменилсяСтатус Тогда
		ОбработатьИзменениеРеквизитовПриИзмененииСтатуса(Статус);
	КонецЕсли;
	
	Если ЭтоНовыйОбъект Тогда
		Если НЕ ЗначениеЗаполнено(Статус) Тогда
			Статус = Справочники.СтатусыОбъектов.Новый;
		КонецЕсли;
		
		ДатаИзмененияСтатуса = Дата;
		
		ЭтотОбъект.УстановитьНовыйНомер();
		КороткийНомер = ОбщегоНазначения.ПолучитьКороткийНомер(Номер, Документы.Задача.ПолучитьПрефикс());
		
		Если ТипЗнч(ОбъектОснование) = Тип("ДокументСсылка.ЗаявкаНаРазработку")
			И НЕ ДополнительныеСвойства.Свойство("СрокСдачи") Тогда
			
			СрокРеализацииЗаявки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектОснование, "СрокРеализации");
			
			Если ЗначениеЗаполнено(СрокРеализацииЗаявки) Тогда
				ДополнительныеСвойства.Вставить("СрокСдачи", СрокРеализацииЗаявки);
			КонецЕсли;
		КонецЕсли;
	Иначе	
		Если ИзменилсяСтатус Тогда
			ДатаИзмененияСтатуса = ТекущаяДата;
		КонецЕсли;
	КонецЕсли;
	
	// Проверка изменения ключевых свойств задачи
	ИзменилисьКлючевыеСвойстваЗадачи = (ИзменилсяСтатус 
		ИЛИ ИзменилсяНазначенный
		ИЛИ ИзменилсяФилиал
		ИЛИ Порядок <> ДанныеДоЗаписи.Порядок
		ИЛИ ПроцентВыполнения <> ДанныеДоЗаписи.ПроцентВыполнения);
		
	Если ИзменилисьКлючевыеСвойстваЗадачи Тогда
		ДополнительныеСвойства.Вставить("ЗаписатьИзмененияСвойствЗадачи");
	КонецЕсли;
		
	Если ИзменилсяСтатус И Статус = Справочники.СтатусыОбъектов.Решен Тогда
		ПроцентВыполнения = 100; // При переводе задачи в статус Решен нужно установить процент выполнения 100%
		
		// Если у задачи в истории нет даты публикации, тогда нужно ее добавить
		// (например, помимо доработок конфигурации есть еще разработка внешних
		// отчетов и обработок. Публикация этих инструментов не отслеживается.)
		ДатаПоследнейПубликации = РегистрыСведений.ИсторияПубликацииЗадач.ПолучитьДатуПоследнейПубликации(Ссылка);
		
		Если НЕ ЗначениеЗаполнено(ДатаПоследнейПубликации) Тогда
			//автоматически заносить дату публикации = Дате закрытия задачи + время
			РегистрыСведений.ИсторияПубликацииЗадач.Добавить(Ссылка, ТекущаяДата, ТекущаяДата);
		КонецЕсли;
	КонецЕсли;
	
	// 1) Если создается задача на написание автотеста, автоматически формируется заявка 
	//    и устанавливается в качестве объекта основания текущей задачи.
	// 2) Создается заявка-основание, если задача создана из рабочего стола тестировщика.
	Если ДополнительныеСвойства.Свойство("ЗадачаДляАвтотеста") Тогда
	
		ДополнительныеСвойства.Свойство("ИзначальнаяЗадача", ИзначальнаяЗадача);
		СоздатьЗаявкуОснование(Истина);
		
	ИначеЕсли ДополнительныеСвойства.Свойство("СоздатьЗаявкуОснование") Тогда
		СоздатьЗаявкуОснование();
	КонецЕсли;
	
	Если Назначение = Справочники.НазначенияЗадач.Ошибка И НЕ ЗначениеЗаполнено(СерьезностьОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Серьезность ошибки"" не заполнено", , , , Отказ);
		Возврат;
	КонецЕсли;
	
	ЕстьИзмененияОписания = Неопределено;	
	Если ДополнительныеСвойства.Свойство("ОписаниеИзменилось") Тогда
		ЕстьИзмененияОписания = ДополнительныеСвойства.ОписаниеИзменилось;
	КонецЕсли;

	// Задействование механизма сравнения истории описания объектов
	ОписаниеИзменилось = ИсторияИзменений.СравнитьОписанияОбъектаПриЗаписи(Ссылка, 
		ДанныеДоЗаписи.Описание, Описание, ЕстьИзмененияОписания);
		
	Если НЕ Отказ И (ОписаниеИзменилось ИЛИ ЭтоНовыйОбъект) Тогда
		ИндексируемоеОписание = РедакторОписания.ПолучитьИндексируемоеОписание(Описание);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	ОписаниеИзменений.Вставить("ОписаниеИзменилось", ОписаниеИзменилось);
	
	Если ДополнительныеСвойства.Свойство("ДополнительныеРеквизиты_ТаблицаРеквизитов") Тогда
		ДопРеквизиты = ДополнительныеСвойства.ДополнительныеРеквизиты_ТаблицаРеквизитов;
	Иначе
		ДопРеквизиты = Неопределено;
	КонецЕсли;
	
	// Сравнение состояния до и после записи
	Если ДополнительныеСвойства.Свойство("КомментарийСтатуса") Тогда
		ОбщегоНазначения.ОбработатьИзменениеОбъекта(Ссылка, ОписаниеИзменений, 
			ДопРеквизиты, ДополнительныеСвойства.КомментарийСтатуса);
	Иначе
		ОбщегоНазначения.ОбработатьИзменениеОбъекта(Ссылка, ОписаниеИзменений, ДопРеквизиты);
	КонецЕсли;
	
	// Выполнение "теневого" перехода задачи по служебным статусам
	ДанныеОбъекта = РаботаСПроцессами.ПолучитьСтруктуруДанныхОбъекта(Ссылка);
	ДанныеОбъекта.НовыйИсполнитель = Назначена;
	ДанныеОбъекта.НоваяСистема = СистемаУчета;
	ДанныеОбъекта.НовыйСтатус = Статус;
	ДанныеОбъекта.ОбъектОснование = ОбъектОснование;
	ДанныеОбъекта.Порядок = Порядок;
	ДанныеОбъекта.ПроцентВыполнения = ПроцентВыполнения;
	ДанныеОбъекта.СтараяСистема = ДанныеДоЗаписи.СистемаУчета;
	ДанныеОбъекта.СтарыйИсполнитель = ДанныеДоЗаписи.Назначена;
	ДанныеОбъекта.СтарыйСтатус = ДанныеДоЗаписи.Статус;
	ДанныеОбъекта.Филиал = Филиал;
	
	// Если есть комментарий
	Если ДополнительныеСвойства.Свойство("ПроверкаИзмененияСтатусаПередЗаписью") Тогда
		ПараметрыЗаписи = ДополнительныеСвойства.ПроверкаИзмененияСтатусаПередЗаписью;
		ДанныеОбъекта.КомментарийПриостановки = ПараметрыЗаписи.Комментарий.ТекстКомментария;
	ИначеЕсли ДополнительныеСвойства.Свойство("КомментарийСтатуса") Тогда
		ДанныеОбъекта.КомментарийПриостановки = ДополнительныеСвойства.КомментарийСтатуса.ТекстКомментария;
	КонецЕсли;
	
	РаботаСПроцессами.ИзменитьСтатус(Ссылка, ДанныеОбъекта);
	
	// Для нового документа СрокСдачи не записывался в регистр и его нужно записать
	Если ДополнительныеСвойства.Свойство("СрокСдачи") Тогда
		ОбщегоНазначенияВызовСервера.СохранитьСрокСдачи(Ссылка, ДополнительныеСвойства.СрокСдачи);
	КонецЕсли;
		
	Если ЭтоНовыйОбъект Тогда
		РегистрыСведений.ОбъектыВерхнегоУровняСтруктурыПодчиненности.Добавить(Ссылка);
		
		// Добавить наблюдателей для новой задачи
		Если НЕ ДополнительныеСвойства.Свойство("ЗадачаДляАвтотеста") Тогда
			УчастникиПроцессов.ДобавитьУчастниковИзОбъектаОснования(Ссылка);
		КонецЕсли;
	Иначе
		// Если изменили систему по задачи то надо удалить назначеного по новой системе.
		Если (ЗначениеЗаполнено(ДанныеДоЗаписи.СистемаУчета) И ИзмениласьСистема)
			ИЛИ ИзменилсяФилиал Тогда
			
			РегистрыСведений.СистемыЗаявокНазначеныеПользователю.Удалить(ОбъектОснование, СистемаУчета, Филиал);
		КонецЕсли;
	КонецЕсли;
	
	ПорядокСтатусаВРаботе = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтатусыОбъектов.ВРаботе, "Порядок");
	ПорядокТекущегоСтатуса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Статус, "Порядок");
	
	// Удаление назначенных в заявке по филиалу или команде задачи 
	// для команды и для филиала записи в регистре разные. Команду нужно удалять только если статус задачи не ниже чем "В работе" 
	Если ЗначениеЗаполнено(ОбъектОснование) Тогда
		Если ПорядокТекущегоСтатуса >= ПорядокСтатусаВРаботе Тогда
			Если ЗначениеЗаполнено(КомандаРазработчиков) И КомандаРазработчиков <> ДанныеДоЗаписи.КомандаРазработчиков Тогда
				РегистрыСведений.СистемыЗаявокНазначеныеПользователю.Удалить(ОбъектОснование, СистемаУчета, КомандаРазработчиков); 
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Филиал) И ИзменилсяФилиал Тогда
			РегистрыСведений.СистемыЗаявокНазначеныеПользователю.Удалить(ОбъектОснование, СистемаУчета, Филиал);
		КонецЕсли;		
	КонецЕсли;
	
	// Обработка изменения ключевых свойств задачи
	ОбработатьИзмененияСвойствЗадачи();
	
	// Сохранение связи задачи с заявкой на разработку
	РегистрыСведений.СвязьОбъектовСЗаявкамиНаРазработку.Добавить(Ссылка, ОбъектОснование);
	
	// Запись в регистр сведений высшего родителя для текущего объекта
	Если ЭтоНовыйОбъект ИЛИ ИзменилосьОснование ИЛИ ИзменилсяПроект Тогда				
		Если ЗначениеЗаполнено(ОбъектОснование) Тогда
			РегистрыСведений.ОбъектыВерхнегоУровняСтруктурыПодчиненности.Добавить(Ссылка, ОбъектОснование);
			РегистрыСведений.СтруктураПодчиненности.Добавить(Ссылка, ОбъектОснование, ДанныеДоЗаписи.ОбъектОснование);
			
			// Записать в заявку количество подчиненных
			Если ТипЗнч(ОбъектОснование) = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
				РегистрыСведений.ОчередьСобытийНаОбработку.ДобавитьЗаданиеЗаполнитьКоличествоПодчиненныхЗадач(ОбъектОснование);
			КонецЕсли;
		Иначе
			РегистрыСведений.ОбъектыВерхнегоУровняСтруктурыПодчиненности.Добавить(Ссылка);
			РегистрыСведений.СтруктураПодчиненности.Добавить(Ссылка, Неопределено, ДанныеДоЗаписи.ОбъектОснование);
		КонецЕсли; 
		
		Если ТипЗнч(ДанныеДоЗаписи.ОбъектОснование) = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
			РегистрыСведений.ОчередьСобытийНаОбработку.ДобавитьЗаданиеЗаполнитьКоличествоПодчиненныхЗадач(ДанныеДоЗаписи.ОбъектОснование);
		КонецЕсли;		
	КонецЕсли;
		
	Если ДополнительныеСвойства.Свойство("ОбновитьДатыПоследнихИзменений") Тогда
		ОбщегоНазначения.ДобавитьДатыИзмененияДляПроекта(Ссылка);
		ДополнительныеСвойства.Удалить("ОбновитьДатыПоследнихИзменений");
	КонецЕсли;
	
	ИнтеграцияДополнительныхПодсистем.АктуализироватьЗадачуВTrello(Ссылка);
	
	Если ДополнительныеСвойства.Свойство("ИзмениласьОценкаТрудозатрат") Тогда	
		УчетТрудозатрат.ЗаписатьПлановыеТрудозатраты(Ссылка, ДополнительныеСвойства.ОценкаТрудозатрат);  
	КонецЕсли;
		
	Если ДополнительныеСвойства.Свойство("ИзмениласьОценкаТрудозатратТестирования") Тогда	
		УчетТрудозатрат.ЗаписатьПлановыеТрудозатраты(Ссылка, 
			ДополнительныеСвойства.ОценкаТрудозатратТестирования, Перечисления.ТипыТрудозатрат.Тестирование);  
	КонецЕсли;
	
	РегистрыСведений.ОчередьСобытийНаОбработку.ДобавитьЗаданиеОбработатьЗадачуГруппаТестирования(Ссылка);

	Если ЭтоНовыйОбъект ИЛИ ИзменилсяСтатус ИЛИ ИзменилсяФилиал Тогда
		РегистрыСведений.ОчередьСобытийНаОбработку.ДобавитьЗаданиеОбработатьОбъектЭтапаКанбана(Ссылка);
	КонецЕсли;
	
	ВидыДополнительныхРеквизитов = ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов;
	Если ДополнительныеСвойства.Свойство("ЗадачаДляАвтотеста") Тогда						
		// Запись комментария для текущей задачи
		НомерИзначальнойЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИзначальнаяЗадача, "Номер");
		Шаблон = "Данная задача для автотеста создана для задачи: <a href=%1>%2</a>";
		Комментарий = СтрШаблон(Шаблон, ПолучитьНавигационнуюСсылку(ИзначальнаяЗадача), НомерИзначальнойЗадачи);
		РегистрыСведений.Комментарии.Добавить(Ссылка, , , Комментарий, , Истина);  			
			
		// Запись комментария для изначальной задачи
		Шаблон = "Создана задача для автотеста: <a href=%1>%2</a>";
		Комментарий = СтрШаблон(Шаблон, ПолучитьНавигационнуюСсылку(Ссылка), Номер);
		РегистрыСведений.Комментарии.Добавить(ИзначальнаяЗадача, , , Комментарий, , Истина);
		
		ЗаписатьДополнительныйРеквизит(ИзначальнаяЗадача, ВидыДополнительныхРеквизитов.ЗадачаНаАвтотесты, Ссылка);
	КонецЕсли;
			
	УчастникиПроцессов.ОбновитьУчастниковОбъекта(Ссылка, ДанныеДоЗаписи);
	
	Если ДополнительныеСвойства.Свойство("СложностьЗадачи") Тогда
		РегистрыСведений.СложностиЗадач.ДобавитьЗапись(Ссылка, ДополнительныеСвойства.СложностьЗадачи);
	КонецЕсли;
	
	Если ЕстьИзмененияДляЗаявкиОснования() Тогда
		ДополнительныеСвойства.Вставить("ЕстьИзмененияДляЗаявкиОснования");
	КонецЕсли;
	
	Если ЕстьИзмененияДляРабочегоСтола(ДополнительныеСвойства) Тогда
		ДополнительныеСвойства.Вставить("ЕстьИзмененияДляРабочегоСтола");
	КонецЕсли;
	
	СохранитьПримечание("ПримечаниеРазработчиков"); 
	СохранитьПримечание("ПримечаниеТестировщиков");
	
	Если НЕ Отказ И (ОписаниеИзменилось ИЛИ ЭтоНовыйОбъект) Тогда    
		РедакторОписания.ДополнительноОбработатьОписание(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДатаНачалаРассмотрения = Дата(1, 1, 1);
	ДатаПодтверждения = Дата(1, 1, 1);
	ДатаГотовностиРеализации = Дата(1, 1, 1);
	ДатаНачалаРазработки = Дата(1, 1, 1);
	ДатаПоследнегоТестирования = Дата(1, 1, 1);
	ДатаЗакрытия = Дата(1, 1, 1);
	
	Справочники.СерьезностьОшибок.ПриКопированииОбъекта(СерьезностьОшибки, Назначение);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипЗначенияДанных = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипЗначенияДанных = Тип("Структура") Тогда 
		ИсточникДанных = "";
		
	ИначеЕсли ТипЗначенияДанных = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
		ОбъектОснование = ДанныеЗаполнения;
		Направление = ДанныеЗаполнения.Направление;
		Заказчик = ДанныеЗаполнения.Автор;
		Наименование = ДанныеЗаполнения.Наименование;
		ВидРодительскогоПроекта = ДанныеЗаполнения.ВидРодительскогоПроекта;
		Назначение = ДанныеЗаполнения.Назначение;
		СерьезностьОшибки = ДанныеЗаполнения.СерьезностьОшибки;
		ВидПроцесса = ДанныеЗаполнения.ВидПроцесса;
		
		ОбъектОснованиеЗаявки = ДанныеЗаполнения.ОбъектОснование;
		
		Если ТипЗнч(ОбъектОснованиеЗаявки) = Тип("СправочникСсылка.Проекты") Тогда
			Проект = ОбъектОснованиеЗаявки;
		ИначеЕсли ЗначениеЗаполнено(ОбъектОснованиеЗаявки) Тогда
			Проект = РегистрыСведений.ОбъектыВерхнегоУровняСтруктурыПодчиненности.ПолучитьПоОбъекту(ОбъектОснованиеЗаявки);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьЗначенияИзНастроекЗаполненияПользователя();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьИзмененияДляЗаявкиОснования()

	ЕстьИзменения = (ЭтоНовыйОбъект 
		ИЛИ ИзменилсяСтатус
		ИЛИ ИзменилсяФилиал
		ИЛИ ИзмениласьСистема);
		
	Возврат ЕстьИзменения;
		
КонецФункции

Функция ЕстьИзмененияДляРабочегоСтола(Знач ДополнительныеСвойства)

	ЕстьИзменения = (ЭтоНовыйОбъект 
		ИЛИ ИзменилсяСтатус
		ИЛИ ИзменилсяФилиал
		ИЛИ ИзмениласьСистема
		ИЛИ ИзменилсяНазначенный
		ИЛИ ДополнительныеСвойства.Свойство("ИзмениласьОценкаТрудозатрат")
		ИЛИ ДополнительныеСвойства.Свойство("ИзмениласьОценкаТрудозатратТестирования")
		ИЛИ ДополнительныеСвойства.Свойство("ИзмениласьОценкаStoryPoint"));
		
	Возврат ЕстьИзменения;
		
КонецФункции

Процедура ЗаписатьДополнительныйРеквизит(ИсходнаяЗадача, ВидРеквизита, Результат)
	
	ОписаниеВидаРеквизита = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыДополнительныхРеквизитов");
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("ВидРеквизита", ОписаниеВидаРеквизита);
	ТаблицаЗначений.Колонки.Добавить("Значение", Новый ОписаниеТипов("ДокументСсылка.Задача"));
	
	НоваяСтрока = ТаблицаЗначений.Добавить();
	НоваяСтрока.ВидРеквизита = ВидРеквизита;
	НоваяСтрока.Значение = Результат;
	
	РегистрыСведений.ЗначенияДополнительныхРеквизитовОбъектов.ЗаписатьЗначенияРеквизитов(ИсходнаяЗадача, ТаблицаЗначений);
	
КонецПроцедуры

// Заполняет в табличной части ЧекЛист для новых строк реквизиты Автор и ДатаДобавления.
//
Процедура ЗаполнитьРеквизитыНовыхСтрокЧекЛиста()
	
	// У новых строк реквизит Автор и ДатаДобавления не заполнены. Поэтому можно
	// отбирать строки с незаполненным значением Автора.
	ОтборСтрок = Новый Структура("Автор", Справочники.Пользователи.ПустаяСсылка());
	НайденныеСтроки = ЧекЛист.НайтиСтроки(ОтборСтрок);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		АвторСтрокЧекЛиста = ПараметрыСеанса.ТекущийПользователь;
		ДатаДобавленияСтрок = ТекущаяДатаСеанса();
		
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			СтрокаТаблицы.Автор = АвторСтрокЧекЛиста;
			СтрокаТаблицы.ДатаДобавления = ДатаДобавленияСтрок;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИзменениеРеквизитовПриИзмененииСтатуса(Знач НовыйСтатус, Знач НазначенаНаПользователя = Неопределено)
	
	// Заполнение реквизитов текущей датой, если она не заполнена
	ТекущаяДата = ТекущаяДатаСеанса();
	
	// Если задача переводится в пользовательский статус, нужно получить
	// служебный статус, на котором основан пользовательский
	НовыйСтатус = РаботаСПроцессами.ПолучитьСсылкуНаСлужебныйСтатус(НовыйСтатус);
	
	НовыйСтатусРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовыйСтатус, "Родитель");
	
	Если НовыйСтатус = Справочники.СтатусыОбъектов.Тестирование
		ИЛИ НовыйСтатусРодитель = Справочники.СтатусыОбъектов.Тестирование Тогда
		
		ДатаПоследнегоТестирования = ТекущаяДата;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДатаНачалаРассмотрения) Тогда
		ДатаНачалаРассмотрения = ТекущаяДата;
	КонецЕсли;
	
	ЗаполнитьДатуПодтверждения = (НЕ ЗначениеЗаполнено(ДатаПодтверждения)
		И (НовыйСтатус = Справочники.СтатусыОбъектов.РевьюТребований
		ИЛИ НовыйСтатус = Справочники.СтатусыОбъектов.ВРеализацию
		ИЛИ НовыйСтатус = Справочники.СтатусыОбъектов.ВРаботе
		ИЛИ НовыйСтатус = Справочники.СтатусыОбъектов.Решен));
	
	Если ЗаполнитьДатуПодтверждения Тогда
		ДатаПодтверждения = ТекущаяДата;
	КонецЕсли;
	
	ЗаполнитьДатуГотовностиРеализации = (НЕ ЗначениеЗаполнено(ДатаГотовностиРеализации)
		И (НовыйСтатус = Справочники.СтатусыОбъектов.ВРеализацию
		ИЛИ НовыйСтатус = Справочники.СтатусыОбъектов.ВРаботе
		ИЛИ НовыйСтатус = Справочники.СтатусыОбъектов.Решен));
	
	Если ЗаполнитьДатуГотовностиРеализации Тогда
		ДатаГотовностиРеализации = ТекущаяДата;
	КонецЕсли;
	
	ЗаполнитьДатуНачалаРазработки = (НЕ ЗначениеЗаполнено(ДатаНачалаРазработки) 
		И (НовыйСтатус = Справочники.СтатусыОбъектов.ВРаботе));
	
	Если ЗаполнитьДатуНачалаРазработки Тогда
		ДатаНачалаРазработки = ТекущаяДата;
	КонецЕсли;
	
	Если НовыйСтатус = Справочники.СтатусыОбъектов.Решен И НЕ ЗначениеЗаполнено(ДатаПоследнегоТестирования) Тогда
		ДатаПоследнегоТестирования = ТекущаяДата;
	КонецЕсли;
	
	ЗаполнитьДатуЗакрытия = ((НовыйСтатус = Справочники.СтатусыОбъектов.Решен ИЛИ НовыйСтатус = Справочники.СтатусыОбъектов.Отклонен)
		И НЕ ЗначениеЗаполнено(ДатаЗакрытия));
		
	Если ЗаполнитьДатуЗакрытия Тогда
		ДатаЗакрытия = ТекущаяДата;
	КонецЕсли;
	
	Если НЕ ИнтеграцияДополнительныхПодсистем.ИзмененияИнициированыJira(ДополнительныеСвойства)
		И НЕ ДополнительныеСвойства.Свойство("АвтоматическоеИзменениеСтатуса") Тогда
		
		Если НазначенаНаПользователя = Неопределено Тогда
			Назначена = Документы.Задача.ОбновитьИсполнителя(Ссылка, НовыйСтатус, Заказчик, Назначена);
		Иначе
			Назначена = НазначенаНаПользователя;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИзмененияСвойствЗадачи()
	
	Если ДополнительныеСвойства.Свойство("ЗаписатьИзмененияСвойствЗадачи")
		И ЗначениеЗаполнено(ОбъектОснование) 
		И ТипЗнч(ОбъектОснование) = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
		
		РегистрыСведений.ОчередьСобытийНаОбработку.ДобавитьЗаданиеРассчитатьСтатусыПоФилиалам(ОбъектОснование);
		РегистрыСведений.ДатыАктуальностиЗаявокНаРазработку.УдалитьЗаявку(ОбъектОснование);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИзмененияСтатусаЗадачи(ИзменилсяСтатус)
	
	ПараметрыОперации = Неопределено;
	ТребуетсяУведомлениеОбИзмененииСтатуса = Истина;
	
	Если ДополнительныеСвойства.Свойство("ПроверкаИзмененияСтатусаПередЗаписью", ПараметрыОперации) Тогда
		
		// При изменении задачи из заявки заполним статус задачи
		Если ПараметрыОперации.Свойство("ИзменениеСтатусаЗадачиИзЗаявки") Тогда
			Статус = ПараметрыОперации.НовыйСтатус;
			ИзменилсяСтатус = Истина;
		КонецЕсли;
		
		Если ПараметрыОперации.Свойство("Назначена") Тогда
			ОбработатьИзменениеРеквизитовПриИзмененииСтатуса(ПараметрыОперации.НовыйСтатус, ПараметрыОперации.Назначена);
		Иначе
			ОбработатьИзменениеРеквизитовПриИзмененииСтатуса(ПараметрыОперации.НовыйСтатус);
		КонецЕсли;
		
		ТекстКомментария = ПараметрыОперации.Комментарий.ТекстКомментария;
		КомментарийБезТегов = ПараметрыОперации.Комментарий.КомментарийБезТегов;
		Общедоступный = ПараметрыОперации.Комментарий.Общедоступный;
		Служебный = (Статус = Справочники.СтатусыОбъектов.Отклонен);
		
		Если ПараметрыОперации.ВидОперации = Справочники.СтатусыОбъектов.Приостановлен Тогда
			Служебный = Истина;
		Иначе
			// Если есть незакрытый период приостановки задачи, необходимо его закрыть
			Если ПараметрыОперации["ЕстьНезакрытыйПериодПриостановки"] = Истина Тогда  				
				Комментарий = "<p>Работа над задачей возобновлена.</p>";
				Служебный = Истина;
				
				Если НЕ ПустаяСтрока(ТекстКомментария) Тогда
					ТекстКомментария = Комментарий + Символы.ПС + ТекстКомментария;
				Иначе
					ТекстКомментария = Комментарий;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстКомментария) Тогда
			ИдентификаторКомментария = ПараметрыОперации.Комментарий.Идентификатор;
			РегистрыСведений.Комментарии.Добавить(Ссылка, ИдентификаторКомментария, , ТекстКомментария, , Служебный, Общедоступный, КомментарийБезТегов);
			
			Если ПараметрыОперации.Свойство("ПричинаИзмененияСтатуса") Тогда
				СтатусДляЗаписи = РаботаСПроцессами.ПолучитьСсылкуНаСлужебныйСтатус(Статус);
				
				РегистрыСведений.ПричиныИзмененияСтатусаОбъектов.Добавить(Ссылка, СтатусДляЗаписи,
					ПараметрыОперации.ПричинаИзмененияСтатуса, ИдентификаторКомментария);
				ТребуетсяУведомлениеОбИзмененииСтатуса = ПараметрыОперации.НеобходимоОтправитьУведомление;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыОперации.Свойство("Трудозатраты") Тогда
			Трудозатраты = ПараметрыОперации.Трудозатраты;
			
			Если Трудозатраты.ЗатратыВремени > 0 И ЗначениеЗаполнено(Трудозатраты.ВидДеятельности) Тогда
				Пользователь = ПараметрыСеанса.ТекущийПользователь;
				
				ДанныеЗаполнения = Документы.Трудозатраты.НовыеПараметрыЗаполненияТрудозатрат();
				ДанныеЗаполнения.Дата = ОбщегоНазначения.ТекущаяДатаСоСдвигом();
				ДанныеЗаполнения.Объект = Ссылка;
				ДанныеЗаполнения.Затрата = Трудозатраты.ЗатратыВремени;
				ДанныеЗаполнения.ВидДеятельности = Трудозатраты.ВидДеятельности;
				ДанныеЗаполнения.Пользователь = Пользователь;
				ДанныеЗаполнения.Комментарий = Трудозатраты.Комментарий;
				ДанныеЗаполнения.Услуга = Трудозатраты.Услуга;
				ДанныеЗаполнения.Автор = Пользователь;
				ДанныеЗаполнения.Направление = Направление;
				
				Документы.Трудозатраты.ДобавитьТрудозатраты(ДанныеЗаполнения);
			КонецЕсли;
		КонецЕсли;
		
		ДополнительныеСвойства.Удалить("ПроверкаИзмененияСтатусаПередЗаписью");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПримечаниеВТаблицеДополнительныхРеквизитов(ТаблицаДопРеквизитов, Знач ВидПримечания, Знач ЭлементСправочника)
	
	Строка = ТаблицаДопРеквизитов.Найти(ВидПримечания, "ВидРеквизита");
	
	Если Строка = Неопределено Тогда
		Строка = ТаблицаДопРеквизитов.Добавить();
		Строка.ВидРеквизита = ВидПримечания;
	КонецЕсли;
	
	Строка.Значение = ЭлементСправочника;
	
КонецПроцедуры

Функция ПолучитьОценкуStoryPoint(Объект)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задача.ОценкаStoryPoint КАК ОценкаStoryPoint
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	Задача.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ОценкаВStoryPoint = Выборка.ОценкаStoryPoint;
	Иначе
		ОценкаВStoryPoint = 0;
	КонецЕсли;
	
	Возврат ОценкаВStoryPoint;	
	
КонецФункции

// Создает заявку, которая будет являться основанием для текущей задачи. Данное
// решение основано на том, что заявка без задачи не может существовать.
//
// Параметры:
//  НаписаниеАвтотеста - Булево - признак, указывающий, что создается задача на
//                       написание автотеста.
//
Процедура СоздатьЗаявкуОснование(Знач НаписаниеАвтотеста = Ложь)
	
	// Создание новой заявки, которая является основанием для текущей задачи.
	// Заполнение свойств заявки данными текущей задачи.
	ДокументЗаявка = Документы.ЗаявкаНаРазработку.СоздатьДокумент();
	ДокументЗаявка.ДополнительныеСвойства.Вставить("ЭтоСозданиеЗаявкиОснованиеЗадачи");
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ИсточникДанных", Документы.ЗаявкаНаРазработку.ИдентификаторСозданияИзЗадачи());
	ДанныеЗаполнения.Вставить("Наименование", Наименование);
	ДанныеЗаполнения.Вставить("Назначение", Назначение);
	ДанныеЗаполнения.Вставить("СерьезностьОшибки", СерьезностьОшибки);
	ДанныеЗаполнения.Вставить("Направление", Направление);
	ДанныеЗаполнения.Вставить("ВидПроцесса", ВидПроцесса);
	
	Если ДополнительныеСвойства.Свойство("СрокСдачи") Тогда
		ДанныеЗаполнения.Вставить("СрокРеализации", ДополнительныеСвойства.СрокСдачи);
	КонецЕсли;	
	
	// Если создается заявка на написание автоматического теста, описание подставляется
	// из объекта-основания. В противном случае подставляется описание текущей задачи.
	Если НаписаниеАвтотеста Тогда
		ДанныеЗаполнения.Вставить("Описание", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИзначальнаяЗадача, "Описание"));
	Иначе
		ДанныеЗаполнения.Вставить("Описание", Описание);
	КонецЕсли;	
	
	ДанныеЗаполнения.Вставить("СистемыРазработки", Новый Массив);
	// Заполнение таблицы систем учета
	ДанныеЗаполнения.СистемыРазработки.Добавить(СистемаУчета);
	
	ДокументЗаявка.Заполнить(ДанныеЗаполнения);
	ДокументЗаявка.ДополнительныеСвойства.Вставить("ОбновитьДатыИзмененийИКоличествоСистем");
	
	// Свойство указывает на то, что при записи заявки не нужно копировать наблюдателей
	ДокументЗаявка.ДополнительныеСвойства.Вставить("ЗаявкаДляЗадачиАвтотеста");
	ДокументЗаявка.Записать();
	
	ОбъектОснование = ДокументЗаявка.Ссылка;
	
КонецПроцедуры

Процедура СохранитьПримечание(ИмяРеквизита)
	
	ИмяСвойстваСсылка = Справочники.ДополнительныеОписанияОбъектов.ИмяДополнительногоСвойстваСсылка(ИмяРеквизита); 
	
	// В доп. свойствах будет информация о примечании только при интерактивной записи объекта.
	// Если это не новый объект и в доп. свойствах не передана информация о примечании, 
	// то этот случай - программное изменение существующего объекта.
	ЭтоПрограммноеИзменение = НЕ ЭтоНовыйОбъект И НЕ ДополнительныеСвойства.Свойство(ИмяСвойстваСсылка); 
	
	Если ЭтоПрограммноеИзменение Тогда
		// В этом случае с примечанием ничего делать не нужно, т.к. программно они не изменяются
		Возврат;
	КонецЕсли;
	
	ЭлементСправочника = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, ИмяСвойстваСсылка);
	
	Если ЗначениеЗаполнено(ЭлементСправочника) Тогда
		// Это интерактивная запись существующего объекта, в котором уже было создано примечание. 
		// В этом случае нужно обновить описание в примечании, если оно было изменено.
		ОбъектСправочник = ЭлементСправочника.ПолучитьОбъект(); 
	Иначе
		// Это программная или интерактивная запись нового объекта. 
		// В этом случае нужно создать новый элемент справочника.
		ОбъектСправочник = Справочники.ДополнительныеОписанияОбъектов.СоздатьЭлемент();
		ОбъектСправочник.Наименование = СтрШаблон("Задача %1. %2", Номер, ИмяРеквизита); 
	КонецЕсли;
	
	ИмяСвойстваИзмененоОписание = Справочники.ДополнительныеОписанияОбъектов.ИмяДополнительногоСвойстваИзмененоОписание(ИмяРеквизита);
	// Для интерактивной записи нового объекта признак того, что описание изменилось, будет равен Истина. 
	// Для программной записи нового объекта это доп. свойство не будет передано. 
	// В этом случае также присваиваем ему значение Истина. 
	// В результате Описание будет обработано: 
	//		- для всех новых объектов;
	//		- для существующих объектов, в которых оно было изменено интерактивно (из формы). 
    ОписаниеИзменилось = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, ИмяСвойстваИзмененоОписание, Истина);	
	Если ОписаниеИзменилось Тогда 
		ИмяСвойстваСодержаниеОписания = Справочники.ДополнительныеОписанияОбъектов.ИмяДополнительногоСвойстваСодержаниеОписания(ИмяРеквизита);
		СодержаниеОписания = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, ИмяСвойстваСодержаниеОписания, ""); 
	
		РезультатОбработки = РедакторОписания.ОбработатьОписание(Ссылка, СодержаниеОписания, ИмяРеквизита);
		СодержаниеОписания = РезультатОбработки.Описание;
		
		ОбъектСправочник.Описание = Новый ХранилищеЗначения(СодержаниеОписания, Новый СжатиеДанных(9));
		ОбъектСправочник.Записать();
				
		ЭлементСправочника = ОбъектСправочник.Ссылка;
		
		// Дополняем таблицу с доп. реквизитами созданным примечанием
		ИмяПредопределенного = СтрШаблон("ПланВидовХарактеристик.ВидыДополнительныхРеквизитов.%1", ИмяРеквизита);
		ВидПримечания = ПредопределенноеЗначение(ИмяПредопределенного);
	
		ОбновитьПримечаниеВТаблицеДополнительныхРеквизитов(ДополнительныеСвойства.ДополнительныеРеквизиты_ТаблицаРеквизитов, 
			ВидПримечания, ЭлементСправочника); 
		
		// Данные примечания нужны для интерактивной записи, чтобы обновить данные на форме
		ДополнительныеСвойства.Вставить(ИмяСвойстваСсылка, ЭлементСправочника);  
		ДополнительныеСвойства.Вставить(ИмяСвойстваСодержаниеОписания, СодержаниеОписания);
	КонецЕсли;
			
КонецПроцедуры

Процедура УстановитьЗначенияИзНастроекЗаполненияПользователя()
	
	ВидыНастроек = ПланыВидовХарактеристик.ВидыНастроекПользователя;
	НастройкиАвтозаполнения = РаботаСНастройками.ПолучитьНастройкиАвтозаполнения(ВидыНастроек.ЗаполнениеЗадачи);
	
	Если НЕ ЗначениеЗаполнено(Направление) Тогда
		Направление = НастройкиАвтозаполнения[ВидыНастроек.НаправлениеДляЗаполненияЗадачи];
	КонецЕсли;
	
	Если Направление = НастройкиАвтозаполнения[ВидыНастроек.НаправлениеДляЗаполненияЗадачи]
		И НЕ ЗначениеЗаполнено(ВидПроцесса) 
		И Справочники.НаправленияРазработки.ИспользуетВидыПроцессов(Направление) Тогда
		ВидПроцесса = НастройкиАвтозаполнения[ВидыНастроек.ВидПроцессаДляЗаполненияЗадачи];
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Назначение) Тогда
		Назначение = НастройкиАвтозаполнения[ВидыНастроек.НазначениеДляЗаполненияЗадачи];
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Заказчик) Тогда
		Заказчик = НастройкиАвтозаполнения[ВидыНастроек.ЗаказчикДляЗаполненияЗадачи];
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СистемаУчета) Тогда
		
		СистемаУчетаПоУмолчанию = НастройкиАвтозаполнения[ВидыНастроек.СистемаДляЗаполненияЗадачи];
		
		Если ЗначениеЗаполнено(ОбъектОснование) 
			И ТипЗнч(ОбъектОснование) = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
			
			СистемыЗаявки = Документы.ЗаявкаНаРазработку.ПолучитьСписокДоступныхСистем(ОбъектОснование);
			
			Если СистемыЗаявки.Найти(СистемаУчетаПоУмолчанию) <> Неопределено Тогда
				СистемаУчета = СистемаУчетаПоУмолчанию;
			КонецЕсли;
		Иначе
			СистемаУчета = СистемаУчетаПоУмолчанию;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
