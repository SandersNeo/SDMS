///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

// Храниит адрес пользовательского отбора 
&НаКлиенте
Перем АдресПользовательскихНастроек;

// Хранит пользовательские настройки колонок
&НаКлиенте
Перем НастройкиКолонок;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.КлючПользовательскихНастроек = "ЗаявкаНаРазработку";
	Параметры.КлючНазначенияИспользования = "ЗаявкаНаРазработку";
	
	Если Параметры.Свойство("ОткрытиеФормыДляОтбора") Тогда
		ИмяОтбора = Параметры.ОткрытиеФормыДляОтбора;
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("ФилиалПользователя", ПараметрыСеанса.Филиал);
	Список.Параметры.УстановитьЗначениеПараметра("ИндексКартинкиЧерновик", Справочники.СтатусыОбъектов.ИндексКартинкиЧерновик());
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДатаСеанса());
	
	// Установка ограничений по отбору, сортировке и группировке
	Документы.ЗаявкаНаРазработку.УстановитьОграниченияСписка(Список);
	
	ИнициализацияНастроекКолонок();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СлужебныеПодсистемы.НастройкиДинамическихСписков
	ОбщегоНазначенияКлиент.ВключитьПроверкуПользовательскихНастроекДинамическогоСписка(ЭтотОбъект);
	// Конец СлужебныеПодсистемы.НастройкиДинамическихСписков
		
	Если ИмяОтбора = "МоиЗаявкиНаДоработку" Тогда 
		ОбновитьВидимостьГруппыДействующийОтбор(Истина, "Мои заявки на доработку");
		ДанныеСчетчика = ПолучитьДанныеСчетчика();
		ИнструментыКлиент.ОбновитьЗначениеСчетчика(ДанныеСчетчика);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(АдресПользовательскихНастроек) Тогда 
		ПользовательскиеНастройки = ПолучитьИзВременногоХранилища(АдресПользовательскихНастроек);
		Список.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	Если Параметры.Свойство("ОткрытиеФормыДляОтбора") Тогда	
		СохранитьПользовательскиеОтборыСпискаНаСервере(Настройки);
		ОчиститьПользовательскиеНастройки(Настройки);
		Если Параметры.ОткрытиеФормыДляОтбора = "МоиЗаявкиНаДоработку" Тогда 	
			ПрименитьОтборМоиЗаявкиНаДоработкуНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	
	ОбновлениеПользовательскихНастроекДинамическогоСписка();
	
КонецПроцедуры

&НаСервере
Процедура СписокПриСохраненииПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	// СлужебныеПодсистемы.НастройкиДинамическихСписков
	НовыеСохраненныеНастройки = Истина;
	// Конец СлужебныеПодсистемы.НастройкиДинамическихСписков
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КопироватьВБуфер(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.КопироватьНавигационнуюСсылкуВБуферОбмена(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКолонок(Команда)
	
	Ключи = ПолучитьКлючиНастроек();
	НастройкиПоУмолчанию = НастройкиКолонокПоУмолчанию();
	НастройкиКолонок = ИнтерфейсПриложенияВызовСервера.ЗаполнитьПользовательскиеНастройки(НастройкиПоУмолчанию, Ключи);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДоступныеНастройки", НастройкиКолонок);
	ПараметрыОткрытия.Вставить("НастройкиПоУмолчанию", НастройкиПоУмолчанию);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеНастроекКолонок", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаКолонок", ПараметрыОткрытия, ЭтотОбъект,
		КлючУникальности, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОбновитьСписокПользовательскихНастроек(Команда)
	
	ОбновлениеПользовательскихНастроекДинамическогоСписка();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВариантыСсылок(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Свойство("Ссылка") Тогда
		ИнтерфейсПриложенияКлиент.ОткрытьОкноНавигационнойСсылки(ТекущиеДанные.Ссылка, ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекДинамическогоСписка(Команда)
	
	КлючХранилища = "Документ.ЗаявкаНаРазработку.Форма.ФормаСписка.Список";
	ПользовательскиеНастройки = Список.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	ПараметрыОткрытия = Новый Структура("КлючХранилища,ПользовательскиеНастройки" , КлючХранилища, ПользовательскиеНастройки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьСохранениеНастроек", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.НастройкиДинамическогоСписка", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	КонецПроцедуры
	
&НаКлиенте
Процедура ПрименитьОтборМоиЗаявкиНаДоработку(Команда)
	
	АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(Список.КомпоновщикНастроек.ПользовательскиеНастройки,
		УникальныйИдентификатор);
	ОбновитьВидимостьГруппыДействующийОтбор(Истина, "Мои заявки на доработку");
	ДанныеСчетчика = УдалитьПользовательскийНастройкиИПрименитьОтбор();
	ИнструментыКлиент.ОбновитьЗначениеСчетчика(ДанныеСчетчика);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПрименитьНастройкуДинамическогоСписка(Команда)
	
	ПрименениеНастройкиДинамическогоСписка(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОтборыСписка(Команда)
	
	ОбновитьВидимостьГруппыДействующийОтбор();
	ВосстановитьПользовательскиеНастройки();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

/////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для фиксированных отборов заявок
// - Отбор "Мои заявки на доработку"

&НаСервере
Процедура ВосстановитьПользовательскиеНастройки()
	
	КлючОбъекта =  "Документ.ЗаявкаНаРазработку.Форма.ФормаСписка.Список/ТекущиеПользовательскиеНастройки";
	КлючНастроек = "";
	ИмяПользователя = ИмяПользователя();
	
	Список.Отбор.Элементы.Очистить();
	
	ПользовательскиеНастройкиФормы = ОбщегоНазначенияВызовСервера.ЗагрузитьСистемнуюНастройку(КлючОбъекта,
		КлючНастроек, ИмяПользователя);	
		
	Если ПользовательскиеНастройкиФормы <> Неопределено Тогда
		Список.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройкиФормы);
		Элементы.Список.СоздатьЭлементыФормыПользовательскихНастроек(Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки, 
			РежимОтображенияНастроекКомпоновкиДанных.БыстрыйДоступ, 2);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьГруппыДействующийОтбор(Знач ВидимостьГруппы = Ложь, Знач Заголовок = Неопределено)
	 
	Элементы.ГруппаДействующийОтбор.Видимость = ВидимостьГруппы;
	Элементы.СписокКомпоновщикНастроекПользовательскиеНастройки.Видимость = НЕ ВидимостьГруппы;
	Элементы.НастроитьСписок.Доступность = НЕ ВидимостьГруппы;
	Элементы.ПользовательскиеНастройки.Доступность = НЕ ВидимостьГруппы; 

	Если Заголовок <> Неопределено Тогда
		Элементы.ИнформацияОтбора.Заголовок = Заголовок;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПрименитьОтборМоиЗаявкиНаДоработкуНаСервере()
	
	Список.Отбор.Элементы.Очистить();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Автор",
		ПараметрыСеанса.ТекущийПользователь, ВидСравненияКомпоновкиДанных.Равно);
			
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Справочники.СтатусыОбъектов.НаДоработку);
	СписокСтатусов.Добавить(Справочники.СтатусыОбъектов.ЗапросТребований);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Статус",
			СписокСтатусов, ВидСравненияКомпоновкиДанных.ВСписке);
	
КонецПроцедуры
		
&НаСервере
Процедура СохранитьПользовательскиеОтборыСпискаНаСервере(Знач Настройки)
	
	КлючОбъекта =  "Документ.ЗаявкаНаРазработку.Форма.ФормаСписка.Список/ТекущиеПользовательскиеНастройки";
	КлючНастроек = "";
	ИмяПользователя = ИмяПользователя();
	
	ОбщегоНазначенияВызовСервера.СохранитьСистемнуюНастройку(КлючОбъекта, КлючНастроек, Настройки, ИмяПользователя);	
		
КонецПроцедуры
		
&НаСервере
Функция УдалитьПользовательскийНастройкиИПрименитьОтбор()
	
	ОчиститьПользовательскиеНастройки(Список.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПрименитьОтборМоиЗаявкиНаДоработкуНаСервере();
	
	ДанныеСчетчика = ПолучитьДанныеСчетчика();
	
	Возврат ДанныеСчетчика;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ОбработатьСохранениеНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбновлениеПользовательскихНастроекДинамическогоСписка();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПользовательскиеНастройки(Настройки)
	
	Для Каждого Настройка Из Настройки.Элементы Цикл
		Если ТипЗнч(Настройка) = Тип("ОтборКомпоновкиДанных") Тогда
			Настройка.Элементы.Очистить();
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновлениеПользовательскихНастроекДинамическогоСписка()
	
	// СлужебныеПодсистемы.НастройкиДинамическихСписков
	ОбщегоНазначенияВызовСервера.ПользовательскиеНастройкиДинамическогоСписка(
		"Документ.ЗаявкаНаРазработку.Форма.ФормаСписка.Список", ВариантыНастроек, ЭтотОбъект,
		Элементы.ПользовательскиеНастройки);
	// Конец СлужебныеПодсистемы.НастройкиДинамическихСписков
	
КонецПроцедуры

// СлужебныеПодсистемы.НастройкиДинамическихСписков

&НаСервере
Процедура ПрименениеНастройкиДинамическогоСписка(Знач Идентификатор)
	
	// СлужебныеПодсистемы.НастройкиДинамическихСписков
	ОбщегоНазначенияВызовСервера.ПрименитьНастройкуДинамическогоСпискаНаСервере(
		"Документ.ЗаявкаНаРазработку.Форма.ФормаСписка.Список", ВариантыНастроек, Идентификатор,
		Список.КомпоновщикНастроек);
	// Конец СлужебныеПодсистемы.НастройкиДинамическихСписков
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверкаПользовательскихНастроекДинамическогоСписка()
	
	Если НовыеСохраненныеНастройки = Истина Тогда
		ОбновлениеПользовательскихНастроекДинамическогоСписка();
		НовыеСохраненныеНастройки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Конец СлужебныеПодсистемы.НастройкиДинамическихСписков

////////////////////////////////////////////////////////////////////////////////
// Настройка колонок

&НаСервере
Процедура ИнициализацияНастроекКолонок()
	
	Ключи = ПолучитьКлючиНастроек();
	НастройкиПоУмолчанию = НастройкиКолонокПоУмолчанию();
	НастройкиКолонок = ИнтерфейсПриложенияВызовСервера.ЗаполнитьПользовательскиеНастройки(НастройкиПоУмолчанию, Ключи);
		
	ИнтерфейсПриложенияКлиентСервер.ПрименитьПользовательскиеНастройки(Элементы, НастройкиКолонок);
	ОбновитьПорядокКолонок(НастройкиКолонок.Порядок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НастройкиКолонокПоУмолчанию()
		
	// Порядок колонок в коде влияет на заполнение по умолчанию
	Состав = Новый СписокЗначений; 
	Состав.Добавить("Автор", "Автор", Ложь);
	Состав.Добавить("ДатаИзмененияСтатуса", "Дата изменения статуса", Ложь);
	Состав.Добавить("Дата", "Дата создания", Истина);
	Состав.Добавить("ДнейВСтатусе", "Дней в статусе", Ложь);
	Состав.Добавить("НазначениеПредставление", "Назначение", Истина);
	Состав.Добавить("НаправлениеПредставление", "Направление", Ложь);
	Состав.Добавить("ОбъектОснование", "Основание", Истина);
	Состав.Добавить("Ответственный", "Ответственный", Ложь);
	Состав.Добавить("ПлановыеТрудозатраты", "План", Ложь); 
	Состав.Добавить("Система", "Система", Ложь);
	Состав.Добавить("СрокРеализации", "Срок реализации", Ложь);
	Состав.Добавить("Статус", "Статус", Истина);	
	Состав.Добавить("Тема", "Тема", Истина);
	Состав.Добавить("ФактическиеТрудозатратыЗадачи", "Факт (Задачи)", Ложь);
	Состав.Добавить("ФактическиеТрудозатратыЗаявки", "Факт (Заявки)", Ложь);	
	Состав.Добавить("ФактическиеТрудозатраты", "Факт (Общ.)", Ложь);
	Состав.Добавить("Целевая", "Целевая", Ложь);
		
	ПорядковыйНомер = 1;
	Порядок = Новый Соответствие;
	
	Для Каждого ЭлементСписка Из Состав Цикл
		СтруктураПоля = Новый Структура("Поле, Представление", ЭлементСписка.Значение, ЭлементСписка.Представление);
		Порядок.Вставить(ПорядковыйНомер, СтруктураПоля);
		
		ПорядковыйНомер = ПорядковыйНомер + 1;
	КонецЦикла;
	
	Результат = Новый Структура("Состав, Порядок", Состав, Порядок);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьПорядокКолонок(Знач Порядок)
	
	ИнтерфейсПриложения.ОбновитьПорядокКолонокНаСервере(Порядок, Элементы, Элементы.Список);
	
КонецПроцедуры

// Процедура для изменения таблицы формы
//
// Параметры:
//  Результат - Структура - Хранит результат выбора пользователя:
//  	* ИзменилсяПорядок - Булево - Проверка на изменения порядка
//  	* Состав - Соответсвие - Состав колонок таблицы
//  	* Порядок - СписокЗначения - Колонки для отображения
//  ДополнительныеПараметры	 - Структура - Передает сохраненные настройки
//
&НаКлиенте
Процедура ОбработатьИзменениеНастроекКолонок(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполняемыеСвойства = "Состав, Порядок";
	
	ЗаполнитьЗначенияСвойств(НастройкиКолонок, Результат, ЗаполняемыеСвойства);
	Ключи = ПолучитьКлючиНастроек();
			
	ИнтерфейсПриложенияКлиентСервер.ПрименитьПользовательскиеНастройки(Элементы, НастройкиКолонок);
	
	Если Результат.ИзменилсяПорядок Тогда
		ОбновитьПорядокКолонок(НастройкиКолонок.Порядок);
	КонецЕсли;
	
	// Сохранение пользовательских настроек
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(Ключи.Объект, Ключи.Настройка, НастройкиКолонок);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеСчетчика()
	
	ИдентификаторИнструмента = ИнструментыСервер.ПолучитьИдентификаторИнструмента(Метаданные.Документы.ЗаявкаНаРазработку.Команды.ЗаявкиНаДоработку);
	ДанныеСчетчика = Новый Структура("id, count", ИдентификаторИнструмента, 0);
	
	Если ЗначениеЗаполнено(ИдентификаторИнструмента) Тогда
		ДанныеСчетчика.count = Документы.ЗаявкаНаРазработку.РассчитатьЗначениеСчетчикаЗаявокНаДоработку(ПараметрыСеанса.ТекущийПользователь);
	КонецЕсли;
	
	Возврат ДанныеСчетчика;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКлючиНастроек()
	
	Ключи = Новый Структура;
	Ключи.Вставить("Объект", "Документы.ЗаявкаНаРазработку.ФормаСписка");
	Ключи.Вставить("Настройка", "НастройкаКолонок");
	
	Возврат Ключи;
	
КонецФункции

#КонецОбласти
