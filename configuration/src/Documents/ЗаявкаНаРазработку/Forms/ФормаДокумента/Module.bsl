///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

// Хранит список реквизитов, которые должны сохраняться при автосохранении
&НаКлиенте
Перем АвтосохраняемыеРеквизиты Экспорт;

// Структура дополнительных свойств формы
&НаКлиенте
Перем ДополнительныеСвойства Экспорт;

// Хранит признак неопубликованного комментария
&НаКлиенте
Перем ЕстьНеопубликованныйКомментарий Экспорт;

// Уникальный идентификатор формы без символа "-"
&НаКлиенте
Перем ИдентификаторФормы Экспорт;

&НаКлиенте
Перем КоличествоПодчиненныхЗадач;

// Хранит дополнительные данные для клиента, чтобы избежать постоянных обращений к серверу.
&НаКлиенте
Перем КэшДополнительныхДанных;

// Хранит название текущей вкладки
&НаКлиенте
Перем ПредыдущаяОткрытаяВкладка;

// Хранит описание присоединенного файла устава проекта.
&НаКлиенте
Перем СвойстваУставаПроекта;

// Хранит признак переноса данных (нужно для НЕ ОТКРЫТИЯ окна комментария)
&НаКлиенте
Перем ПереносВоВнутреннееЗадание;

// Хранит имя последней нажатой кнопки панели навигации
&НаКлиенте
Перем ИмяАктивнойКнопкиПанелиНавигации Экспорт;

// TODO: Для исключения ошибки "Cannot read property of undefined"
// (при записи основной формы в веб клиенте "протухают" подчиненные формы в массиве форм основного окна)
&НаКлиенте
Перем ИскатьПодчиненныеФормы Экспорт;

// Хранит положение курсора в текстовом документе для описания
&НаКлиенте
Перем ТекущееПоложениеКурсора Экспорт;

// Признак вопроса изменения направления
&НаКлиенте
Перем ЗадатьВопросИзмененияНаправления;

// Признак вопроса заполнения группы заказчиков
&НаКлиенте
Перем ЗадатьВопросЗаполнитьГруппу;

// Хранит предыдущий СрокРеализации (который был до изменения в поле СрокРеализации).
&НаКлиенте
Перем СрокРеализацииДоИзменения;

// Хранит состояние флага черновик записанного объекта
&НаКлиенте
Перем ЧерновикДоИзменения;

// Хранит состояние флага задавался ли вопрос по очистке спринтов задавался
&НаКлиенте
Перем ВопросПоОчисткеСпринтовЗадавался;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОпределитьДоступныеНаправленияРоли();
	ЗаполнитьДеревоФилиалПодчиненныеЗадачи();
	ЗаполнитьСистемыРазработкиДерево();
	
	// Обновляем таблицу безопасности и видимость элементов при перечитывании данных.
	// Адрес таблицы безопасностей не заполнен при открытии объекта 
	// и таблица будет заполнена при создании на сервере.
	Если ЗначениеЗаполнено(АдресТаблицыБезопасностей) Тогда
		Безопасность.НастроитьФормуПослеОткрытия(ЭтотОбъект);
	КонецЕсли;
	
	ЗаполнитьСтоимостьРеализацииЗаявки();
	ОбновитьОбщееВремяТрудозатрат();
	
	Параметры.Свойство("ИмяОткрываемойСтраницы", ИмяОткрываемойСтраницы);
	ПланТрудозатрат = УчетТрудозатрат.ПолучитьПлановыеТрудозатраты(Объект.Ссылка); 

	ЗапрещеноРедактирование = ИзменениеОписанияЗапрещено();
	РедакторОписания.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект, ЗапрещеноРедактирование);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Проверяем, разрешено ли открыть объект текущему пользователю. В том
	// числе флаг "Ограниченный просмотр". Сообщение пользователю поместим в
	// реквизит формы.
	ЗапретОткрытия = Ложь;
	Безопасность.НастроитьФормуПередОткрытием(ЭтотОбъект, ЗапретОткрытия);
	
	// Дополнительно проверяем, копируется ли объект. 
	// Необходимо проверить признак "Ограниченный просмотр".	
	Если ЗапретОткрытия ИЛИ ОбщегоНазначения.ПроверитьОбъектКопирования(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНовый = Параметры.Ключ.Пустая();
	
	Если ЭтоНовый Тогда
		// Проверим, что если основание - проект, что его статус корректен, для создания подчиненных.
		Результат = ОбщегоНазначенияВызовСервера.ПроверитьСтатусПроектаНаСервере(Параметры.Основание, Отказ);
		Если НЕ Результат.РазрешеноСоздавать Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		ПоказатьОписаниеНазначения = ОбщегоНазначения.НеобходимоПоказатьОписаниеНазначенияОбъектов(Параметры.Ключ);
		
		// Заполним пустой документ первоначальными данными
		ОбщегоНазначения.ЗаполнитьОбъектПервоначальнымиДанными(Объект);
		Если НЕ ЗначениеЗаполнено(Объект.ОбъектОснование) Тогда
			ЗаполнитьОбъектПереданнымиПараметрами();	
		КонецЕсли;
		
		// Определение ролей и доступных направлений пользователя
		ОпределитьДоступныеНаправленияРоли();
					
		СсылкаНаОбъектДляАвтосохранения = АвтосохраненияДанных.ПолучитьСсылкуНовогоОбъекта(Объект.Ссылка);
		
		Параметры.Свойство("ПрикрепитьКПлануПроекта", СозданоИзПлана);
	Иначе
		РегистрыСведений.ОчередьСобытийНаОбработку.ОтметитьПросмотренным(Объект.Ссылка);		
		
		// Сохранение исходного направления заявки
		ИсходноеНаправление = Объект.Направление;
		
		СсылкаНаОбъектДляАвтосохранения = Объект.Ссылка;	
	КонецЕсли;
	
	Параметры.Свойство("ОткрытьКомментарии", ОткрытьКомментарии);
	
	// Определение видимости поля Черновик
	УстановитьВидимостьПоляЧерновик();
	УстановитьВидимостьКнопкиСоздатьНаОсновании();
	
	// Создание элементов формы для отображения трудозатрат и получение трудозатрат по объекту
	УчетТрудозатрат.КонструкторИнтерфейсаУправленияТрудозатратами(ЭтотОбъект, Элементы.СтраницыДокумента);
	УчетТрудозатрат.ЗаполнитьТрудозатраты(ЭтотОбъект, ЭтоНовый);
	
	ПредыдущаяОткрытаяВкладка = "СтраницаОсновныеСвойства";
			
	// Запись количества новых комментариев
	Если Параметры.Свойство("КоличествоНовыхКомментариев") Тогда 
		КоличествоНовыхКомментариев = Параметры.КоличествоНовыхКомментариев;
	КонецЕсли;	
	
	// Запись числа изменений
	Если Параметры.Свойство("ЧислоПрочихИзменений") Тогда
		ЧислоПрочихИзменений = Параметры.ЧислоПрочихИзменений;
	КонецЕсли;	
	Если Параметры.Свойство("ЧислоВажныхИзменений") Тогда
		ЧислоВажныхИзменений = Параметры.ЧислоВажныхИзменений;
	КонецЕсли;
	
	ИнтерфейсПриложения.СформироватьЗаголовокОкнаОбъекта(Объект.ВидРодительскогоПроекта, Заголовок);

	// Заполнение списка выбора назначения и серьезности
	ОбщегоНазначения.ЗаполнитьСписокНазначений(Элементы.Назначение.СписокВыбора);
	ОбщегоНазначения.ЗаполнитьСписокСерьезностьОшибки(Элементы.СерьезностьОшибки.СписокВыбора);
	
	Если ЭтоНовый Тогда
		
		Если Элементы.Назначение.СписокВыбора.НайтиПоЗначению(Объект.Назначение) = Неопределено Тогда
			Объект.Назначение = Неопределено;
		КонецЕсли;
		
		//заполняем дерево если были получены системы разработки из настроек пользователя или параметров открытия формы
		Для Каждого Строка Из Объект.СистемыРазработки Цикл
			НоваяСтрока = СистемыРазработкиДерево.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Система = Строка.Система;
			НоваяСтрока.СистемаПредставление = Строка(Строка.Система);
			НоваяСтрока.ГруппаЗаказчиков = Строка.ГруппаЗаказчиков;
			НоваяСтрока.ГруппаЗаказчиковПредставление = Строка(Строка.ГруппаЗаказчиков);
			НоваяСтрока.ЭтоСтрокаСистема = Истина;
			НоваяСтрока.СистемаСохранена = Ложь;
			НоваяСтрока.ИндексКартинки = 1;
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщегоНазначения.УстановитьВидимостьСерьезности(Элементы.СерьезностьОшибки, Объект.Назначение);
	УстановитьСвойстваЮридическогоЛица(НЕ ЭтоНовый);
	
	ОбновитьВидимостьВидаПроцесса();
	
	РаботаСТегами.Заполнить(ЭтотОбъект, Элементы.ГруппаСтраницаСвойстваШапка.ЦветФона);
	
	ДополнительныеРеквизиты.ПодключитьДополнительныеРеквизиты(Объект.Ссылка, ЭтотОбъект, 
		"ГруппаДополнительныеРеквизиты", Элементы.ГруппаДопРеквизитыНаФорме.Имя);
	
	ИнтеграцияДополнительныхПодсистем.ДобавитьЭлементУстановкиЦелей(Объект.Ссылка, 
		ЭтотОбъект, Элементы.ГруппаОсновныеЛевая, Элементы.ВидПроцесса);
		
	ИнтеграцияДополнительныхПодсистем.ОбновитьВидимостьЦелейOKR(ЭтотОбъект, Объект.Направление);
	
	ПараметрыАвтосохранения = АвтосохраненияДанных.ПриСозданииНаСервере(ЭтотОбъект);
	
	ЗапрещеноРедактирование = ИзменениеОписанияЗапрещено();
	
	// Программное создание элементов формы для редактирования описания
	РедакторОписания.ПриСозданииНаСервере(ЭтотОбъект, Элементы.СтраницаОписание, ЗапрещеноРедактирование, ПараметрыАвтосохранения);

	// Установка признака гиперссылка ячейки в зависимости от того, является ли объект новым или черновиком.
	Элементы.СистемыРазработкиДеревоМеню.ГиперссылкаЯчейки = НЕ (ЭтоНовый ИЛИ Объект.Черновик);	
	УстановитьПредставлениеСтатуса();		
	ПанельНавигации.Создать(ЭтотОбъект);
		
	// Безопасность SDMS. Стандартный блок вызова процедур.	
	РазрешенаНастройкаПрав = Безопасность.ПроверитьДоступностьНастройкиПравОбъектов(Объект.Ссылка);
	Элементы.КнопкаНастройкаПравОбъектов.Видимость = РазрешенаНастройкаПрав;
	
	// Заблокируем ввод трудозатрат, если заявка черновик
	Элементы.ДобавитьФактическиеТрудозатраты.Доступность = НЕ Объект.Черновик;
		
	Безопасность.НастроитьФормуПослеОткрытия(ЭтотОбъект);       
	УчетТрудозатрат.ДобавитьВПросмотренныеЗаявки(Объект.Ссылка);	
	ЗаполнитьСписокСтатусовДляПереводаЗадач(); 

	НастроитьИЗаполнитьСпринт();
	
	Если Элементы.Найти("ЗапрещеноИзменениеОписанияЗаявки") <> Неопределено Тогда
		Элементы.ЗапрещеноИзменениеОписанияЗаявки.УстановитьДействие("ПриИзменении", "Подключаемый_ЗапрещеноИзменениеОписанияПриИзменении");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура НастроитьИЗаполнитьСпринт(Знач Перезаполнение = Ложь)
	
	Если Перезаполнение Тогда
		ПланТрудозатрат = УчетТрудозатрат.ПолучитьПлановыеТрудозатраты(Объект.Ссылка);
	КонецЕсли;
	
	СтатусыОбъектов = Справочники.СтатусыОбъектов;
	
	Если Статус = СтатусыОбъектов.Решен 
		ИЛИ Статус = СтатусыОбъектов.Отклонен 
		ИЛИ Объект.Черновик Тогда
		
		Элементы.Спринты.Доступность = Ложь;
	КонецЕсли;
	
	ИзменитьВводПлановыхТрудозатратДляСпринта();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Если заполнено сообщение пользователю, значит пользователю запрещено
	// просматривать объект. Заполняется при создании на сервере.
	Если ЗначениеЗаполнено(СообщениеПользователю) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, СообщениеПользователю);
		Возврат;
	КонецЕсли;
	
	Если ПоказатьОписаниеНазначения Тогда
		ПодключитьОбработчикОжидания("ОткрытьОписаниеНазначенияОбъектов", 0.5, Истина);
	КонецЕсли;
	
	// Вспомогательные данные с сервера
	КэшДополнительныхДанных = ДополнительныеДанныеДляХраненияНаКлиенте(Параметры.Ключ, 
		Объект.ОбъектОснование, ЗагруженоАвтосохранение, Объект.Продукт);
		
	КоличествоПодчиненныхЗадач = КэшДополнительныхДанных.КоличествоПодчиненныхЗадач;
	ОбновитьДоступностьВидаПроцесса();
	
	АвтосохраненияДанныхКлиент.ПриОткрытии(ЭтотОбъект, КэшДополнительныхДанных);
		
	// Инициализация хранилища дополнительных свойств формы
	ОбщегоНазначенияКлиент.ИнициализироватьДополнительныеСвойстваФормы(ДополнительныеСвойства);
	
	ОбщегоНазначенияКлиент.ДобавитьДополнительноеСвойствоФормы("АктивнаяСтраницаПанели", ДополнительныеСвойства, 
		Элементы.СтраницаОсновныеСвойства);
	
	Элементы.СоздатьЗадачу.Видимость = КэшДополнительныхДанных.РазрешениеСоздаватьЗадачи;
	
	ПредыдущаяОткрытаяВкладка = Элементы.СтраницыДокумента.ТекущаяСтраница;
	
	// Нужен для работы с программно-сформированными элементами формы
	ИдентификаторФормы = ОбщегоНазначенияКлиентСервер.СтрУникальныйИдентификатор(УникальныйИдентификатор);
		
	ЗадатьВопросИзмененияНаправления = Ложь;
	ЗадатьВопросЗаполнитьГруппу = Ложь;
	
	Если КоличествоНовыхКомментариев > 0 ИЛИ ОткрытьКомментарии Тогда
		ПодключитьОбработчикОжидания("ОткрытьНовыеКомментарии", 0.2, Истина);	
	КонецЕсли;
	
	Если ЧислоПрочихИзменений > 0 Или ЧислоВажныхИзменений > 0 Тогда
		ПодключитьОбработчикОжидания("ОткрытьНовыеИзменения", 0.2, Истина);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПодключитьОбработчикОжидания("ОбновитьКоличествоПодчиненныхЗадач", 60);
	КонецЕсли;
	
	// Храним срок для сравнения при изменении
	СрокРеализацииДоИзменения = Объект.СрокРеализации; 
	
	ЧерновикДоИзменения = Объект.Черновик;
	
	РазвернутьЗадачиСвязанныхФилиалов();	
	НастроитьГиперссылкиНазначенияПоСистеме();	
	УстановитьПризнакДляСистемРазработки();	
	ОбновитьВидимостьИЗначениеГруппыЗаказчиков();
	
	Если НЕ Параметры.Ключ.Пустая() 
			И ИнтерфейсПриложенияКлиент.ФормаОткрыта("Обработка.ГрупповоеВнесениеТрудозатрат.Форма.Форма") Тогда
		Оповестить(СобытияОповещенияКлиент.ИмяСобытияОбновленияПросмотренныхЗаявок(), Объект.Ссылка);
	КонецЕсли;
	
	ВыбратьСистемуПоУмолчанию();
	
	Если СтрДлина(СтатусПредставление) > 16 Тогда
		Элементы.НадписьСтатус.Высота = 2;
		Элементы.НадписьСтатус.РастягиватьПоВертикали = Истина;
	КонецЕсли;

	ПанельНавигацииКлиент.ПриОткрытии(Элементы);
	
	ВопросПоОчисткеСпринтовЗадавался = Ложь;
	
	Если ЗначениеЗаполнено(ИмяОткрываемойСтраницы) Тогда                 
		ПодключитьОбработчикОжидания("ОткрытьСтраницуПанелиНавигации", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	ПанельНавигацииКлиент.ПриПовторномОткрытии(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РедакторОписанияКлиент.ПередЗаписью(ЭтотОбъект, ПараметрыЗаписи, Отказ, Элементы.СтраницаОписание);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНовыйОбъект = Объект.Ссылка.Пустая();
	
	Если СистемыРазработкиДерево.ПолучитьЭлементы().Количество() = 0 Тогда
		ТекстОшибки = "Не введено ни одной строки в список ""Системы разработки""";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , Элементы.СистемыРазработкиДерево, , Отказ);
	Иначе
		Объект.СистемыРазработки.Очистить();
		
		Для Каждого Строка Из СистемыРазработкиДерево.ПолучитьЭлементы() Цикл
			НоваяСтрока = Объект.СистемыРазработки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка); 
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВопросСменыНаправления = (НЕ ЭтоНовыйОбъект
		И ЗадатьВопросИзмененияНаправления
		И Объект.Направление <> ИсходноеНаправление
		И (КоличествоПодчиненныхЗадач > 0 ИЛИ ФилиалыЗадачиДерево.ПолучитьЭлементы().Количество() > 0));
	
	Если ПоказатьВопросСменыНаправления Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросИзмененияНаправления", ЭтотОбъект);
		
		ТекстВопроса = 
		"При изменении направления в заявке на разработку произойдет изменение направления во всех подчиненных задачах.
		|Продолжить?";
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , "Изменение направления заявки");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЕстьНеопубликованныйКомментарий Тогда
		ОбщегоНазначенияКлиент.ЗадатьВопросОНеопубликованномКомментарии(ЭтотОбъект, ПараметрыЗаписи);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Элементы.ВидПроцесса.Видимость И НЕ ЗначениеЗаполнено(Объект.ВидПроцесса) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан вид процесса",
			Объект.Ссылка, "ВидПроцесса", "Объект.ВидПроцесса", Отказ);
		Возврат;
	КонецЕсли;
	
	ПереводИзЧерновика = (ЧерновикДоИзменения И НЕ Объект.Черновик);
	
	// Если для направления/системы есть группы заказчиков и группа не заполнена - уведомим пользователя
	Если (ЭтоНовыйОбъект ИЛИ ПереводИзЧерновика) 
		И Элементы.СистемыРазработкиДеревоГруппаЗаказчиков.Видимость 
		И ЗадатьВопросЗаполнитьГруппу Тогда
		
		Для Каждого Строка Из СистемыРазработкиДерево.ПолучитьЭлементы() Цикл
			// Колонка может быть видима по причине того, что у другой системы есть группы заказчиков
			ГруппыЗаказчиковСистемы = ПолучитьГруппыЗаказчиков(Объект.Направление, Строка.Система, КэшДополнительныхДанных.ГруппыЗаказчиков);
			
			Если (ЗначениеЗаполнено(Строка.ГруппаЗаказчиков) И Строка.ГруппаЗаказчиков <> КэшДополнительныхДанных.СсылкаПрочиеЗаказчики)  
				ИЛИ ГруппыЗаказчиковСистемы.Количество() = 0 Тогда	
				Продолжить;  
			КонецЕсли; 
			
			Шаблон = 
			"Создана заявка без указания группы заказчиков по системе %1.
			|Записать заявку без указания группы?";
			
			ТекстВопроса = СтрШаблон(Шаблон, Строка.Система); 
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, "Добавить группу заказчиков");
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, "Записать");
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросЗаполненияГруппыЗаказчиков", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок, , КодВозвратаДиалога.Да, "Предупреждение");
			Отказ = Истина;
			Возврат;
		КонецЦикла;	
	КонецЕсли;
	
	Если Объект.Черновик И НЕ ВопросПоОчисткеСпринтовЗадавался Тогда	
		ТекстВопросаИСписокСпринтов = ПолучитьТекстВопросаИСписокСпринтов(Объект.Ссылка);		
		
		ТекстВопроса = ТекстВопросаИСписокСпринтов.ТекстВопроса;
		СписокСпринтов = ТекстВопросаИСписокСпринтов.СписокСпринтов;
		
		ЗадатьВопросПриСохранении = ТекстВопроса <> Неопределено И СписокСпринтов.Количество() > 0;
		
		Если ЗадатьВопросПриСохранении Тогда
			ЗадатьВопросАсинх(ТекстВопроса, СписокСпринтов);  
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("УИДЗамера", ИнтеграцияДополнительныхПодсистемКлиент.НачатьЗамерВремени(Ложь, 
		"Документ.ЗаявкаНаРазработку.Запись"));
	
	Если Модифицированность Тогда
		ПараметрыЗаписи.Вставить("ОбновитьДатыИзмененийИКоличествоСистем");
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ОбработчикАвтосохраненияЗапущен", Истина);
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", ЭтоНовыйОбъект); 
	
	ВопросПоОчисткеСпринтовЗадавался = Ложь;

КонецПроцедуры
	
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Удалим из таблицы разрабатываемых систем дублирующие строки
	ТекущийОбъект.СистемыРазработки.Свернуть("Система, ГруппаЗаказчиков");
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОценкаТрудозатрат", ПланТрудозатрат); 

	// ИсторияИзменений.
	// Если заявка отклоняется по общей кнопке отклонить, то надо вставить комментарий
	// в доп. свойства, что бы его корректно обработать в модуле объекта
	Если НЕ ТекущийОбъект.Черновик Тогда                   
		Если ПараметрыЗаписи.Свойство("Комментарий") Тогда
			ТекущийОбъект.ДополнительныеСвойства.Вставить("Комментарий", ПараметрыЗаписи.Комментарий);	
		КонецЕсли;
	КонецЕсли;
	// Конец ИсторияИзменений	
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		ТекущийОбъект.УстановитьСсылкуНового(Документы.ЗаявкаНаРазработку.ПолучитьСсылку());
		СсылкаНаОбъект = ТекущийОбъект.ПолучитьСсылкуНового();
	Иначе
		СсылкаНаОбъект = ТекущийОбъект.Ссылка;
	КонецЕсли;	
	
	Если НовыйСтатус = ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Отклонен") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ИзменениеСтатусаЗаявки", ПараметрыЗаписи);
	КонецЕсли;
	
	// Если объект был изменен добавим дополнительное свойство
	Если ПараметрыЗаписи.Свойство("ОбновитьДатыИзмененийИКоличествоСистем") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОбновитьДатыИзмененийИКоличествоСистем");
	КонецЕсли;
	
	РедакторОписания.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, СсылкаНаОбъект);
		
	ДополнительныеРеквизиты.ПередЗаписьюОбъекта(ЭтотОбъект, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЭтоНовый = Параметры.Ключ.Пустая();
	
	Если ЭтоНовый Тогда
		РаботаСТегамиВызовСервера.Обработать(СписокТегов, ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ИзменилисьСистемыРазработки") Тогда
		ПараметрыЗаписи.Вставить("ИзменилисьСистемыРазработки");
	КонецЕсли;
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ИзменилосьНаправление") Тогда
		ПараметрыЗаписи.Вставить("ИзменилосьНаправление");
	КонецЕсли;
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ЕстьИзмененияДляРабочегоСтола") Тогда
		ПараметрыЗаписи.Вставить("ЕстьИзмененияДляРабочегоСтола");
	КонецЕсли;
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ИзмениласьОценкаТрудозатрат") Тогда
		ПараметрыЗаписи.Вставить("ИзмениласьОценкаТрудозатрат");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
		
	// Обновим список статусов заявки по филиалам и выведем при
	// необходимости кнопку для управления глобальным статусом.
	ЗаполнитьДеревоФилиалПодчиненныеЗадачи();
	
	ПанельНавигации.ОбновитьДоступность(ЭтотОбъект);
	
	// Определение видимости поля Черновик
	УстановитьВидимостьПоляЧерновик();
	УстановитьВидимостьКнопкиСоздатьНаОсновании();
	
	// Если из Таблицы формы СистемыРазработки удалили системы вместе с назначенным, нужно удалить запись о назначенном в РС
	ПроверитьНаличиеСистемыДляНазначенного();
		
	ЗаполнитьСистемыРазработкиДерево();
	
	//ПараметрыОграничения = РедактированиеОграничено();
	
	ЗапрещеноРедактирование = ИзменениеОписанияЗапрещено();
	РедакторОписания.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, ЗапрещеноРедактирование);
		
	// Формирование заголовка окна
	ИнтерфейсПриложения.СформироватьЗаголовокОкнаОбъекта(Объект.ВидРодительскогоПроекта, Заголовок);	
				
	Если ПараметрыЗаписи.ОбработчикАвтосохраненияЗапущен Тогда
		РегистрыСведений.АвтосохраненныеОписания.УдалитьЗаписиПоОбъекту(СсылкаНаОбъектДляАвтосохранения);
		СсылкаНаОбъектДляАвтосохранения = ТекущийОбъект.Ссылка;
	КонецЕсли;
	
	// Установка признака гиперссылка ячейки в зависимости от того, является ли объект черновиком.
	Элементы.СистемыРазработкиДеревоМеню.ГиперссылкаЯчейки = НЕ Объект.Черновик;
	
	// После записи объекта требуется обновить таблицу безопасностей и видимость элементов,
	// так как могли измениться некоторые данные объекта, которые влияют на разрешение/запрещение чего-либо.
	Безопасность.НастроитьФормуПослеОткрытия(ЭтотОбъект);
	
	Попытка
		РазблокироватьДанныеДляРедактирования(, УникальныйИдентификатор);
	Исключение // BSLLS:MissingCodeTryCatchEx-off
		// Обработка исключения не требуется
	КонецПопытки

КонецПроцедуры	

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОповеститьПослеЗаписи(ПараметрыЗаписи);
		
	Если ЗакрытьПослеЗаписи Тогда
		Закрыть();
	КонецЕсли;
	
	УстановитьВидимостьКнопкиСоздатьНаОсновании();
	
	КэшДополнительныхДанных.РольПользователяДляСистем = ПолучитьРольПользователяДляСистем(Объект.Ссылка);
	КэшДополнительныхДанных.ДоступныеДляНазначенияСистемы = ДоступныеДляНазначенияСистемы(Объект.Ссылка);
	
	НастроитьГиперссылкиНазначенияПоСистеме();
	
	// После записи заявки, нужно изменить значение реквизита "СистемаСохранена"
	УстановитьПризнакДляСистемРазработки();
		
	ИскатьПодчиненныеФормы = Ложь;
		
	Если ПараметрыЗаписи.ОбработчикАвтосохраненияЗапущен Тогда
		АвтосохраненияДанныхКлиент.ВыключитьАвтосохранениеОписания(ЭтотОбъект, КэшДополнительныхДанных);
		ДатаПоследнегоАвтосохранения = '00010101';
	КонецЕсли; 
	
	РедакторОписанияКлиент.ПослеЗаписи(ЭтотОбъект);
	
	РазвернутьДерево(СистемыРазработкиДерево, Элементы.СистемыРазработкиДерево);
	
	ЧерновикДоИзменения = Объект.Черновик;
	
	ИнтеграцияДополнительныхПодсистемКлиент.ЗавершитьЗамерВремени(ПараметрыЗаписи.УИДЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗавершениеРаботы И ЕстьНеопубликованныйКомментарий = Истина Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиент.ЗадатьВопросОНеопубликованномКомментарии(ЭтотОбъект);
	КонецЕсли;
	
	ДополнительныеРеквизитыКлиент.ПередЗакрытиемФормы(ЭтотОбъект, ЗавершениеРаботы);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы И ЗначениеЗаполнено(ДатаПоследнегоАвтосохранения) Тогда
		АвтосохраненияДанныхВызовСервера.УдалитьАвтосохраненноеОписание(СсылкаНаОбъектДляАвтосохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СписокСобытий = СтрРазделить(ИмяСобытия, ";");
	ЭтоМассив = СписокСобытий.Количество() > 1; 
	Счетчик = 0;
	
	Для Каждого Событие Из СписокСобытий Цикл	
		ПараметрСобытия = ?(ЭтоМассив, Параметр[Счетчик], Параметр);
			
		Если Событие = "Документ.ЗаявкаНаРазработку.ОбновитьСтатусыПоФилиалам" И ПараметрСобытия = Объект.Ссылка Тогда
			ЗаполнитьДеревоФилиалПодчиненныеЗадачи();
			УстановитьВидимостьПоляЧерновик();
			ОбновитьДоступностьВидаПроцесса();
			РазвернутьЗадачиСвязанныхФилиалов();	
			ЗаполнитьСистемыРазработкиДерево();
			НастроитьГиперссылкиНазначенияПоСистеме();
			РазвернутьДерево(СистемыРазработкиДерево, Элементы.СистемыРазработкиДерево);	
		ИначеЕсли Событие = "Документ.Задача.Форма.ФормаДокумента.ОбновлениеЗадачВЗаявке" И ПараметрСобытия = Объект.Ссылка Тогда
			ПриОбновленииЗадачВЗаявкеНаСервере();
			РазвернутьЗадачиСвязанныхФилиалов();
			НастроитьГиперссылкиНазначенияПоСистеме();	
		ИначеЕсли СобытияОповещенияКлиент.СобытиеИзмененияТаблицыСистемыРазработки(Событие) Тогда		
			СистемыПриИзменении(ПараметрСобытия);	
		ИначеЕсли СобытияОповещенияКлиент.СобытиеДобавленияТрудозатратПоОбъекту(Событие, Объект.Ссылка, ПараметрСобытия) Тогда
			УчетТрудозатратКлиент.ОбновитьОбщиеФактическиеТрудозатраты(ЭтотОбъект, , , Истина);
		ИначеЕсли Событие = СобытияОповещенияКлиент.ИмяСобытияОбновлениеСпринтовЗаявокНаРазработку() Тогда
			Если ПараметрСобытия.Найти(Объект.Ссылка) <> Неопределено Тогда 
				НастроитьИЗаполнитьСпринт(Истина);
			КонецЕсли;
		ИначеЕсли Событие = СобытияОповещенияКлиент.ИмяСобытияОбновлениеВводаПлановыхТрудозатрат() Тогда
			ИзменитьВводПлановыхТрудозатратДляСпринта();
		КонецЕсли;
		
		ПанельНавигацииКлиент.ОбработкаОповещения(ЭтотОбъект, Объект.Ссылка, Событие, ПараметрСобытия, Источник);
		
		Счетчик = Счетчик + 1;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АвторНажатие(Элемент, СтандартнаяОбработка)
	
	ИнтерфейсПриложенияКлиент.ОткрытьИнформациюОПользователе(ЭтотОбъект, Объект.Автор, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДатаНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.КопироватьТекстВБуферОбмена(Объект.Дата, "Дата создания скопирована в буфер обмена");
	
КонецПроцедуры

&НаКлиенте
Процедура ФилиалыЗадачиДеревоПриАктивизацииСтроки(Элемент)
	
	Перем ЗадачиНазначенныеПользователю;
	
	ВсеКнопкиСтатусов = Элементы.ПодменюУстановитьСтатус.ПодчиненныеЭлементы;
	ТекущиеДанные = Элементы.ФилиалыЗадачиДерево.ТекущиеДанные;	
	ЭтоГруппа = (ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ЭтоГруппа);	
	
	// Для группы скрываем видимость подменю.	
	Если ЭтоГруппа Тогда
		// Для группы не отображаем кнопки.
		Для Каждого Кнопка Из ВсеКнопкиСтатусов Цикл
			Кнопка.Видимость = Ложь;
		КонецЦикла;
		Элементы.КнопкаОткрытьЗадачу.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.КнопкаОткрытьЗадачу.Доступность = Истина;
	
	ХранилищеСтатусовЗадачи = ТекущиеДанные.ХранилищеСтатусовЗадачи;		
	ТекущиеИменаСтатусов = СтрРазделить(ХранилищеСтатусовЗадачи, ";", Ложь);
		
	Для Каждого Кнопка Из ВсеКнопкиСтатусов Цикл
		Кнопка.Видимость = Истина;
		КэшДополнительныхДанных.Свойство("СписокЗадачНазначенныхПользователю", ЗадачиНазначенныеПользователю);
		
		Если ЗадачиНазначенныеПользователю <> Неопределено Тогда
			ЗадачаНеНазначенаПользователю = (ЗадачиНазначенныеПользователю.НайтиПоЗначению(ТекущиеДанные.Ссылка) = Неопределено);
		Иначе
			ЗадачаНеНазначенаПользователю = Истина;
		КонецЕсли;
		
		Если ЗадачиНазначенныеПользователю = Неопределено ИЛИ ЗадачаНеНазначенаПользователю Тогда
			Кнопка.Видимость = Ложь;
		КонецЕсли;
		
		ИмяСтатуса = СтрЗаменить(Кнопка.Имя, "КнопкаСтатусаЗадачи_", "");
		ИндексСтатуса = ТекущиеИменаСтатусов.Найти(ИмяСтатуса);
		Если ИндексСтатуса = Неопределено Тогда
			Кнопка.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ФилиалыЗадачиДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
		
	Если Поле.Имя = "СвязанныеЗадачиИсполнитель" И ПросмотрКонтактнойИнформации Тогда	
		Если ЗначениеЗаполнено(ТекущиеДанные.Исполнитель) Тогда
			ИнтерфейсПриложенияКлиент.ОткрытьИнформациюОПользователе(ЭтотОбъект, ТекущиеДанные.Исполнитель, СтандартнаяОбработка);
		КонецЕсли;
	Иначе
		ОткрытьЗадачу();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначениеПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиент.УстановитьСерьезность(Элементы.СерьезностьОшибки, Объект.СерьезностьОшибки, Объект.Назначение);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Назначение) Тогда

		Шаблон = КэшДополнительныхДанных.ШаблоныОписания.Получить(Объект.Назначение);
		
		Если ЗначениеЗаполнено(Шаблон) Тогда
			Если ЭтотОбъект[РедакторОписанияКлиентСервер.ИмяРеквизитаИзмененоОписание()] Тогда
				ТекстВопроса = "Загрузить новый шаблон описания? Измененные данные в описании будут утеряны";
				ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодтвержденияЗагрузкиШаблона", ЭтотОбъект, Шаблон);	
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Иначе
				ПрименитьШаблонОписания(Шаблон);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеПриИзменении(Элемент)
	
	ЗадатьВопросИзмененияНаправления = Истина;
		
	НаправлениеПриИзмененииНаСервере();	
	
	ОбновитьДоступностьВидаПроцесса();
	ОбновитьВидимостьИЗначениеГруппыЗаказчиков();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.КопироватьТекстВБуферОбмена(Объект.Номер, "Номер скопирован в буфер обмена");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектОснованиеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтерфейсПриложенияКлиент.ОткрытьОбъектОснованиеВНовомОкне(Объект.ОбъектОснование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектОснованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ОбъектОснование) Тогда
		ОбработатьВыборОбъектаОснования(Объект.ОбъектОснование, Неопределено);
	Иначе
		ОбновитьДоступностьВидаПроцесса();	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОценкаТрудозатратПриИзменении(Элемент)
	
	Если ПланТрудозатрат < РаспределенныеТрудозатраты Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя установить плановое время меньше распределенного на спринты");
		ПланТрудозатрат = РаспределенныеТрудозатраты;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНажатииОценкаТрудозатрат(Элемент, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;                    
	УчетТрудозатратКлиент.ОткрытьФормуПлановогоВремениПоСпринтам(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродуктПриИзменении(Элемент)
	
	НаправлениеИзменено = ЗаполнитьДанныеПоПродукту();
	
	Если НаправлениеИзменено Тогда
		НаправлениеПриИзменении(Неопределено);
	Иначе
		ОбновитьВидимостьИЗначениеГруппыЗаказчиков();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СерьезностьОшибкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // По умолчанию защита от Ctrl + Shift + F4
	
КонецПроцедуры

&НаКлиенте
Процедура СерьезностьОшибкиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // По умолчанию защита от Shift + F4 
	
КонецПроцедуры

&НаКлиенте
Процедура СистемыРазработкиДеревоПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ НЕ ТекущиеДанные.ЭтоСтрокаСистема Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппыЗаказчиковСистемы = ПолучитьГруппыЗаказчиков(Объект.Направление, 
		ТекущиеДанные.Система, КэшДополнительныхДанных.ГруппыЗаказчиков);
	
	Если ГруппыЗаказчиковСистемы.Количество() = 0 Тогда	
		Элементы.СистемыРазработкиДеревоГруппаЗаказчиков.ТолькоПросмотр = Истина; 
		Элементы.СистемыРазработкиДеревоГруппаЗаказчиков.СписокВыбора.Очистить();
	Иначе
		Элементы.СистемыРазработкиДеревоГруппаЗаказчиков.ТолькоПросмотр = Ложь;
		Элементы.СистемыРазработкиДеревоГруппаЗаказчиков.СписокВыбора.ЗагрузитьЗначения(ГруппыЗаказчиковСистемы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СистемыРазработкиДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Объект.Черновик
		ИЛИ ТекущиеДанные = Неопределено
		ИЛИ Параметры.Ключ.Пустая() 
		ИЛИ ТекущиеДанные.ЭтоСтрокаСистема И НЕ ТекущиеДанные.СистемаСохранена Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "СистемыРазработкиДеревоМеню" Тогда	
		СписокКоманд = ПолучитьСписокКоманд(ТекущиеДанные);
		Оповещение = Новый ОписаниеОповещения("ОбработатьВыборИзМеню", ЭтотОбъект);
		ПоказатьВыборИзМеню(Оповещение, СписокКоманд, Элементы.СистемыРазработкиДеревоСистема);
				
	ИначеЕсли Поле.Имя = "СистемыРазработкиДеревоНазначена" Тогда
		СистемыРазработкиДеревоНазначенаВыбор(СтандартнаяОбработка, ТекущиеДанные);
		
	ИначеЕсли Поле.Имя = "СистемыРазработкиДеревоПорядокВОчереди" Тогда 
		СистемыРазработкиДеревоПорядокВОчередиВыбор(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СистемыРазработкиДеревоПорядокВОчередиВыбор(Знач ТекущиеДанные)
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Порядок) Тогда
		Возврат;
	КонецЕсли; 
	
	ДанныеЗаявки = Новый Структура;
	ДанныеЗаявки.Вставить("УправлениеПорядком", КэшДополнительныхДанных.УправлениеПорядкомЗаявокНаРазработку);
	ДанныеЗаявки.Вставить("ВидОчереди", ТекущиеДанные.ВидОчереди);
	ДанныеЗаявки.Вставить("ГруппаЗаказчиков", ТекущиеДанные.ГруппаЗаказчиков);
	ДанныеЗаявки.Вставить("Направление", Объект.Направление);  
	ДанныеЗаявки.Вставить("Статус", Статус);
	
	Разрешения = УправлениеИнструментамиРазработкиКлиент.ОчередьЗаявокРазрешения(ДанныеЗаявки, КэшДополнительныхДанных, КэшДополнительныхДанных);
		
	Если НЕ Разрешения.ВозможностьИзменять Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заявка", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Направление", Объект.Направление);
	ПараметрыОткрытия.Вставить("ВозможностьЗафиксировать", Разрешения.ВозможностьЗафиксировать);
	
	ПараметрыОткрытия.Вставить("КлючОчереди", ТекущиеДанные.КлючОчереди);
	ПараметрыОткрытия.Вставить("Система", ТекущиеДанные.Система);
	ПараметрыОткрытия.Вставить("ГруппаЗаказчиков", ТекущиеДанные.ГруппаЗаказчиков);
	ПараметрыОткрытия.Вставить("ИсходныйПорядок", ТекущиеДанные.Порядок);	
	ПараметрыОткрытия.Вставить("Зафиксирован", ТекущиеДанные.ПорядокЗафиксирован);	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыИзмененияПорядка", ЭтотОбъект, ТекущиеДанные);	
	
	ОткрытьФорму("РегистрСведений.ОчередиЗаявок.Форма.ИзменениеПорядкаЗаявки", 
		ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СистемыРазработкиДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СистемыРазработкиДеревоПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.СистемыРазработкиДерево.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ НЕ ТекущиеДанные.ЭтоСтрокаСистема Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
		
	ЗаявкаОтклонена = (ТекущиеДанные.Статус = ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Отклонен")); 
		
	Если ТекущиеДанные.ЕстьЗадачи ИЛИ ЗаявкаОтклонена Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(,"Запрещено удаление системы, по которой установлен запрет на создание задач");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СистемыРазработкиДеревоПослеУдаления(Элемент)
	
	ОбновитьВидимостьИЗначениеГруппыЗаказчиков();
	
КонецПроцедуры

&НаКлиенте
Процедура СистемыРазработкиДеревоГруппаЗаказчиковНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОтфильтрованныеГруппыЗаказчиков = ПолучитьГруппыЗаказчиков(Объект.Направление, 
		ТекущиеДанные.Система, КэшДополнительныхДанных.ГруппыЗаказчиков);
	
	ИнтерфейсПриложенияКлиент.ОткрытьФормуВыбораГруппыЗаказчиков(ЭтотОбъект, 
		ОтфильтрованныеГруппыЗаказчиков, Элементы.СистемыРазработкиДеревоГруппаЗаказчиков);
	
КонецПроцедуры

&НаКлиенте
Процедура СистемыРазработкиДеревоГруппаЗаказчиковОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ГруппаЗаказчиковОбработкаВыбора(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура СистемыРазработкиДеревоГруппаЗаказчиковОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.ГруппаЗаказчиков);
	
КонецПроцедуры

&НаКлиенте
Процедура СистемыРазработкиДеревоГруппаЗаказчиковОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СистемыРазработкиДерево.ТекущиеДанные;
	ТекущиеДанные.ГруппаЗаказчиков = КэшДополнительныхДанных.СсылкаПрочиеЗаказчики;
	ТекущиеДанные.ГруппаЗаказчиковПредставление = "";
	
КонецПроцедуры

&НаКлиенте
Процедура СистемыРазработкиДеревоНазначенаВыбор(СтандартнаяОбработка, ТекущиеДанные)
			
	Если ЗначениеЗаполнено(ТекущиеДанные.Пользователь) И НЕ ТекущиеДанные.ВозможностьНазначать Тогда
		ИнтерфейсПриложенияКлиент.ОткрытьИнформациюОПользователе(ЭтотОбъект, ТекущиеДанные.Пользователь, СтандартнаяОбработка);
	Иначе
		ОткрытьФормуВыбораНазначенного(ТекущиеДанные);	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СрокРеализацииПриИзменении(Элемент)
		
	РезультатПроверки = Новый Структура("Ошибка, ТекстОшибки", Ложь, "");
	
	Если Объект.СрокРеализации < НачалоДня(ОбщегоНазначенияВызовСервера.ТекущаяДатаСеансаНаСервере()) Тогда     
		РезультатПроверки.Ошибка = Истина;
		РезультатПроверки.ТекстОшибки = "Данные введены некорректно. Не допускается установка прошедшей даты.";
	Иначе
		СрокРеализацииДоИзменения = Объект.СрокРеализации;
	КонецЕсли;
	
	Если РезультатПроверки.Ошибка Тогда
		ПоказатьПредупреждение(, РезультатПроверки.ТекстОшибки);
		Объект.СрокРеализации = СрокРеализацииДоИзменения;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьЗаявкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяКоманды = СобытияОповещенияКлиент.ИмяСобытияНажатиеСтоимостьЗаявки();
	УчетТрудозатратКлиент.ОбработатьКомандуИнтерфейсаУправленияТрудозатратами(ЭтотОбъект, ИмяКоманды);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТегиHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РаботаСТегамиКлиент.ПриНажатии(ЭтотОбъект, ДанныеСобытия.Href);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧерновикПриИзменении(Элемент)
	
	СтатусТребуютсяДоработки = 10;
	
	Если НЕ Объект.Черновик Тогда
		ТекстВопроса = 
		"После отключения признака ""Черновик"" дата заявки изменится на текущую и заявка попадет на обработку в общую очередь заявок.
		|Отключить признак ""Черновик""?";
	
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьВопросИзмененияПоляЧерновик", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	ИначеЕсли ФактическиеЗатратыВремени > 0 Тогда
		Объект.Черновик = НЕ Объект.Черновик;
		
		Текст = "Запрещено переводить в черновик заявки, по которым были занесены трудозатраты.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		
	Иначе
		Элементы.ДобавитьФактическиеТрудозатраты.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.Спринты.Доступность = НЕ Объект.Черновик;
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическоеЛицоОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДелегироватьЗаявку(Команда)
	
	Если Модифицированность = Истина Тогда
		ПоказатьПредупреждение(, "Перед делегированием необходимо сохранить изменения в заявке.", , "Делегирование заявки");
		Возврат;
	КонецЕсли;
	
	// Откроем форму в которйо нельзя выбрать самого себя	
	ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных;
 
	ОтборПоСсылке = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборПоСсылке.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ОтборПоСсылке.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборПоСсылке.ПравоеЗначение = Объект.Автор;
	ОтборПоСсылке.Использование = Истина;
	
	ОтборПоСсылке.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФиксированныеНастройки", ФиксированныеНастройки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораПользователяДляДелегированияЗаявки", ЭтотОбъект, Объект.Автор);
	
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, 
		КлючУникальности, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗакрыть(Команда)
	
	ЗакрытьПослеЗаписи = Истина;
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьВБуфер(Команда)
		
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиент.КопироватьНавигационнуюСсылкуВБуферОбмена(Объект.Ссылка);
	Иначе
		ПоказатьПредупреждение(, "Данные еще не записаны. Копирование ссылки возможно только после записи данных.");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтекстноеКопироватьВБуфер(Команда)
	
	Если ТекущийЭлемент = Неопределено ИЛИ ТекущийЭлемент.ТекущиеДанные = Неопределено
		ИЛИ ТекущийЭлемент.ТекущиеДанные.ЭтоГруппа Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда	
		ОбщегоНазначенияКлиент.КопироватьНавигационнуюСсылкуВБуферОбмена(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстноеМенюВариантыСсылок(Команда)
	
	Если ТекущийЭлемент = Неопределено ИЛИ ТекущийЭлемент.ТекущиеДанные = Неопределено  
		ИЛИ ТекущийЭлемент.ТекущиеДанные.ЭтоГруппа Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда	
		ИнтерфейсПриложенияКлиент.ОткрытьОкноНавигационнойСсылки(ТекущиеДанные.Ссылка, ЭтотОбъект, КлючУникальности);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодчиненныеЗадачи(Команда)
	
	ЗаполнитьДеревоФилиалПодчиненныеЗадачи();
	РазвернутьЗадачиСвязанныхФилиалов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыПоСистемам(Команда)
	
	ЗаполнитьСистемыРазработкиДерево();
	НастроитьГиперссылкиНазначенияПоСистеме();
	РазвернутьДерево(СистемыРазработкиДерево, Элементы.СистемыРазработкиДерево);
	ОбновитьВидимостьИЗначениеГруппыЗаказчиков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВариантыСсылок(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ИнтерфейсПриложенияКлиент.ОткрытьОкноНавигационнойСсылки(Объект.Ссылка, ЭтотОбъект, УникальныйИдентификатор);
	Иначе
		ПоказатьПредупреждение(, "Данные еще не записаны. Копирование ссылки возможно только после записи данных.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачуВНовомОкне(Команда)
	
	ОткрытьЗадачу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСистем(Команда)
	
	ЗапретУстановлен = ЗапретДобавленияСистемРазработки(Объект.Ссылка);
	
	Если ЗапретУстановлен Тогда
		ПоказатьПредупреждение(,"Работы по данной заявке завершены. Создание новых задач невозможно.");
		Возврат;
	КонецЕсли;
	
	ИспользуемыеСистемы = Новый Массив;
	
	Для Каждого Строка Из СистемыРазработкиДерево.ПолучитьЭлементы() Цикл
		ИспользуемыеСистемы.Добавить(Строка.Система);
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура("СистемыРазработки", СистемыРазработкиДерево); 	
	ПараметрыОткрытия = ИнтерфейсПриложенияКлиент.СформироватьПараметрыОткрытия();
	
	ПараметрыОткрытия.Системы.Значение = ИспользуемыеСистемы;
	ПараметрыОткрытия.Системы.Использование = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияОкнаВыбораРазрабатываемыхСистем", ЭтотОбъект, ДополнительныеПараметры);
	
	ИнтерфейсПриложенияКлиент.ОткрытьФормуНастройкиИнструментов(ЭтотОбъект, ПараметрыОткрытия, ОписаниеОповещения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапретДобавленияСистемРазработки(Знач Заявка)
	
	Возврат РегистрыСведений.МинимальныеСтатусыЗаявок.РаботыПоЗаявкеЗавершены(Заявка);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияОкнаВыбораРазрабатываемыхСистем(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СистемыРазработки = ДополнительныеПараметры.СистемыРазработки;		
	
	Если Результат.ВыбранныеСистемы.Количество() > 0 Тогда
		ДобавленныеСистемы = Новый Массив;
		
		Для Каждого ЭлементКоллекции Из Результат.ВыбранныеСистемы Цикл
			Найден = Ложь;
			
			Для Каждого Строка Из СистемыРазработки.ПолучитьЭлементы() Цикл
				Если Строка.Система = ЭлементКоллекции.Значение Тогда
					Найден = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;   
			
			Если НЕ Найден Тогда
				НоваяСтрока = СистемыРазработки.ПолучитьЭлементы().Добавить();
				НоваяСтрока.Система = ЭлементКоллекции.Значение;
				НоваяСтрока.СистемаПредставление = Строка(ЭлементКоллекции.Значение);
				НоваяСтрока.ЭтоСтрокаСистема = Истина;
				НоваяСтрока.СистемаСохранена = Ложь;
				НоваяСтрока.ИндексКартинки = 1;
				
				ДобавленныеСистемы.Добавить(ЭлементКоллекции.Значение);
			КонецЕсли;	
		КонецЦикла; 
		
		Оповестить(СобытияОповещенияКлиент.ИмяСобытияОбновленияТаблицыСистемыРазработки(), ДобавленныеСистемы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкаПрав(Команда)

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ПолноеИмяФормы", ЭтотОбъект.ИмяФормы);
	ПараметрыОткрытия.Вставить("СсылкаНаОбъект", ЭтотОбъект.Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаПравОбъектов", ПараметрыОткрытия, ЭтотОбъект,
		ЭтотОбъект.УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельНавигацииНажатие(Команда)
	
	ПанельНавигацииКлиент.Нажатие(ЭтотОбъект, Команда);
			
КонецПроцедуры

&НаКлиенте
Процедура ПредоставитьДоступ(Команда)
	
	ПараметрыОткрытия = Новый Структура("Заявка", Объект.Ссылка);
	
	ОткрытьФорму("РегистрСведений.ДоступныеЧерновики.Форма.НастройкаДоступа", ПараметрыОткрытия, 
		ЭтотОбъект,	УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СистемыРазработкиУдалить(Команда)
	
	Отказ = Ложь;
	СистемыРазработкиДеревоПередУдалением(Элементы.СистемыРазработкиДерево, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СистемыРазработкиДерево.ТекущиеДанные;
	СистемыРазработкиДерево.ПолучитьЭлементы().Удалить(ТекущиеДанные);
	
	ОбновитьВидимостьИЗначениеГруппыЗаказчиков();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачуПоСистеме(Команда)
	
	Если Модифицированность ИЛИ Параметры.Ключ.Пустая() Тогда
		ПоказатьПредупреждение(, "Перед созданием задачи необходимо сохранить изменения в заявке.");
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СистемыРазработкиДерево.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	Если ТекущиеДанные.ЭтоСтрокаСистема Тогда
		ТекущиеДанныеСистема = ТекущиеДанные;
	Иначе
		ТекущиеДанныеСистема = ТекущиеДанные.ПолучитьРодителя();
	КонецЕсли;
	
	ЗаявкаОтклонена = (ТекущиеДанныеСистема.Статус = ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Отклонен"));
	ЗаявкаНаПроработке = (ТекущиеДанныеСистема.Статус = ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Проработка"));
	
	Если ЗаявкаОтклонена И НЕ ТекущиеДанныеСистема.ЕстьЗадачи Тогда
		ОчиститьСообщения();
		ПоказатьПредупреждение(,"Нельзя создавать задачи по отклоненной системе.");
		Возврат;
		
	ИначеЕсли ЗаявкаНаПроработке Тогда
		ОчиститьСообщения();
		ПоказатьПредупреждение(,"Нельзя создавать задачи по системе пока она находится в проработке.");
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ПроверитьВозможностьСозданияЗадачи(Объект.Ссылка);
	
	Если НЕ РезультатПроверки.РазрешитьСоздание Тогда
		ПоказатьПредупреждение(, РезультатПроверки.ТекстСообщения);
		Возврат;
	КонецЕсли;	
	
	Филиалы = ПолучитьФилиалыЗадачПоСистеме(Объект.Ссылка, ТекущиеДанныеСистема.Система);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Система", ТекущиеДанныеСистема.Система);
	ДополнительныеПараметры.Вставить("Основание", Объект.Ссылка);
	
	Если ТипЗнч(Команда) = Тип("СправочникСсылка.СтатусыОбъектов") Тогда
		ДополнительныеПараметры.Вставить("Статус", Команда);
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ЭтоСтрокаСистема Тогда
		ДополнительныеПараметры.Вставить("Филиал", ТекущиеДанные.Филиал);
	КонецЕсли;
	
	Если Филиалы.ЕстьФилиалы Тогда
		ИмяМетода = "ОбработатьОтветНаВопросСозданияЗадачи";
		ОписаниеОповещения = Новый ОписаниеОповещения(ИмяМетода, ЭтотОбъект, ДополнительныеПараметры);
		
		Шаблон = 
		"По указанной заявке уже производится работа другими филиалами: %1.
		|Вы действительно хотите создать задачу по данной заявке?";
		
		ТекстВопроса = СтрШаблон(Шаблон, Филиалы.СписокФилиалов);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , 
			КодВозвратаДиалога.Нет, "Создание задачи");
	Иначе
		ОбработатьОтветНаВопросСозданияЗадачи(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпринтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	       
		
	ПараметрыОткрытия = Новый Структура;	
	ПараметрыОткрытия.Вставить("ВидСпринта", ПредопределенноеЗначение("Перечисление.ВидыСпринта.Планирование")); 
	ПараметрыОткрытия.Вставить("Филиал", КэшДополнительныхДанных.ТекущийФилиалПользователя); 
	ПараметрыОткрытия.Вставить("ВыбранныеСпринты", Спринты); 
	
	УчетТрудозатратКлиент.ОткрытьФормуВыбораСпринта(ЭтотОбъект, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПоКнопке(Команда)
	
	// Для заявки остался только финальный статус отклонен.
	// Нет необходимости определять статус по имени кнопки.
	СтатусОтклонен = КэшДополнительныхДанных.Статус_Отклонен;
		
	Если ПереносВоВнутреннееЗадание Тогда
		СтруктураКомментарий = Новый Структура;
		СтруктураКомментарий.Вставить("ТекстКомментария", "Данные заявки на разработку импортированы во внутреннее задание.");
		СтруктураКомментарий.Вставить("Общедоступный", Истина);
		
		ПараметрыЗаписи = Новый Структура("Комментарий", СтруктураКомментарий);  
		ЗавершитьПрисвоениеСтатуса(ПараметрыЗаписи, Новый Структура("ЕстьПодчиненные", Ложь));
		ПереносВоВнутреннееЗадание = Ложь;
	Иначе
		// При отклонении заявки необходимо проверить изменение статусов по системам заявки и наличие подчиненных задач
		РезультатПроверки = ПроверитьВозможностьОтклоненияЗаявки(Объект.Ссылка, Объект.Автор);
		
		Если НЕ РезультатПроверки.ВсеЗадачиРешены Тогда
			ТекстПредупреждения =
			"Невозможно отклонить заявку. Существуют активные задачи, которые необходимо перевести в статусы ""Решена"" или ""Отклонена"".
			|Необходимо обсудить закрытие заявки с соответствующими исполнителями задач.";
			
			ПоказатьПредупреждение(, ТекстПредупреждения, , "Отклонение ""Заявки на разработку"""); 				
			
		ИначеЕсли РезультатПроверки.ДвиженияСтатусовПоСистемам Тогда
			ТекстВопроса =
			"Внимание! В филиалах уже идет работа над заявкой. Необходимо предупредить коллег. 
			|Продолжить отклонение всей заявки?";
			
			ПараметрыОповещения = Новый Структура("Статус", СтатусОтклонен);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросОтклоненияЗаявки", ЭтотОбъект, ПараметрыОповещения);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			НовыйСтатус = СтатусОтклонен;
			ДополнительныеПараметры = Новый Структура("Статус", СтатусОтклонен);
			ОткрытьФормуКомментарийСтатуса(ДополнительныеПараметры, Ложь);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗадачиПоКнопке(Команда)
	
	ТекущиеДанные = Элементы.ФилиалыЗадачиДерево.ТекущиеДанные;
	Результат = ПроверитьТекущийСтатусЗадачи(ТекущиеДанные.Ссылка, ТекущиеДанные.Статус);
	Если НЕ Результат.СтатусыСовпадают Тогда
		ПоказатьПредупреждение(, Результат.ТекстСообщения);
		Возврат;
	КонецЕсли;
		
	Идентификатор = СтрЗаменить(Команда.Имя, "УстановитьСтатусЗадачи_", "");
	
	ОтборСтрок = Новый Структура("Идентификатор", Идентификатор);
	НовыйСтатус = ИдентификаторыСтатусовЗадач.НайтиСтроки(ОтборСтрок).Получить(0).Статус;
	
	СтатусРешен = КэшДополнительныхДанных.Статусы["Решен"];
	
	ТребуетсяПубликация = Результат.ТребуетсяПубликация;
	Отказ = ОбщегоНазначенияКлиент.ПроверитьВозможностьУстановкиСтатуса(ТребуетсяПубликация, НовыйСтатус, СтатусРешен);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Получим необходимые данные для открытия формы ИзменениеСтатуса за один серверный вызов.
	ДанныеДляОткрытия = ДанныеДляОткрытияФормыИзменениеСтатуса(ТекущиеДанные.Ссылка, НовыйСтатус);
		
	ЕстьНезакрытыйПериод = ДанныеДляОткрытия.ЕстьНезакрытыйПериод;
	НовыйИсполнитель = ДанныеДляОткрытия.НовыйИсполнитель;
			
	ПараметрыОповещения  = Новый Структура;
	ПараметрыОповещения.Вставить("Ссылка", ТекущиеДанные.Ссылка);
	ПараметрыОповещения.Вставить("НовыйСтатус", НовыйСтатус);
	ПараметрыОповещения.Вставить("ЕстьНезакрытыйПериодПриостановки", ЕстьНезакрытыйПериод);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаПроверкиИзмененияСтатусаПередЗаписью",
		ЭтотОбъект, ПараметрыОповещения);
				
	// Параметры открытия форма изменения статуса (для добавления трудозатрат/комментария)	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Назначена", НовыйИсполнитель);
	ПараметрыОткрытия.Вставить("НовыйСтатус", НовыйСтатус);	
	ПараметрыОткрытия.Вставить("Объект", ТекущиеДанные.Ссылка);
	ПараметрыОткрытия.Вставить("ТребуетсяКомментарий", Ложь);
	ПараметрыОткрытия.Вставить("ПараметрыОповещения", ПараметрыОповещения);
	
	СлужебныйСтатус = РаботаСПроцессамиВызовСервера.ПолучитьСсылкуНаСлужебныйСтатус(НовыйСтатус);
	
	Если НовыйСтатус = КэшДополнительныхДанных.Статусы["Приостановлен"] Тогда
		Если НЕ ЕстьНезакрытыйПериод Тогда		
			ПараметрыОткрытия.ТребуетсяКомментарий = Истина;			
		КонецЕсли;
	Иначе	
		ПараметрыОткрытия.ТребуетсяКомментарий = (НовыйСтатус = КэшДополнительныхДанных.Статусы["Отклонен"]);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ИзменениеСтатуса", ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусСистемыПоКнопке(Команда)
	
	Если Модифицированность Тогда
		ПоказатьПредупреждение(, "Перед изменением статуса системы необходимо сохранить заявку на разработку.");
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СистемыРазработкиДерево.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Система = ТекущиеДанные.Система;
			
	Если НЕ СтатусАктуален(Объект.Ссылка, Система, ТекущиеДанные.Статус) Тогда
		ПоказатьПредупреждение(, "Статус заявки по выбранной системе был изменен");
		ЗаполнитьСистемыРазработкиДерево();
		НастроитьГиперссылкиНазначенияПоСистеме();	
		РазвернутьДерево(СистемыРазработкиДерево, Элементы.СистемыРазработкиДерево);
		Возврат;
	КонецЕсли;
	
	СтатусПеревода = ОпределитьСтатусПоКоманде(Команда.Имя);
		
	Если (СтатусПеревода = ПредопределенноеЗначение("Справочник.СтатусыОбъектов.НаДоработку")
		И ТекущиеДанные.Статус <> ПредопределенноеЗначение("Справочник.СтатусыОбъектов.ЗапросТребований"))
		ИЛИ СтатусПеревода = ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Отклонен") Тогда
		
		ОткрытьФормуКомментарийСтатусаПоСистеме(Система, СтатусПеревода);
	Иначе
		ДанныеСтруктура = Новый Структура("Событие, Система, Статус");
		ДанныеСтруктура.Событие = "ИзменениеСтатусаПоСистеме";
		ДанныеСтруктура.Система = Строка(Система);

		Если СтатусПеревода = ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Рассмотрение") Тогда
			СтатусПереводаПредставление = "На рассмотрении";
			
		ИначеЕсли СтатусПеревода = ПредопределенноеЗначение("Справочник.СтатусыОбъектов.РевьюТребований") Тогда
			СтатусПереводаПредставление = "Ревью требований";
			
		ИначеЕсли СтатусПеревода = ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Рассмотрен") Тогда
			СтатусПереводаПредставление = "Рассмотрен";
					
		ИначеЕсли СтатусПеревода = ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Новый") Тогда
			СтатусПереводаПредставление = "Новый";
			
		ИначеЕсли СтатусПеревода = ПредопределенноеЗначение("Справочник.СтатусыОбъектов.ЗапросТребований") Тогда
			СтатусПереводаПредставление = "Запрос требований";
			
		ИначеЕсли СтатусПеревода = ПредопределенноеЗначение("Справочник.СтатусыОбъектов.НаДоработку") Тогда
			СтатусПереводаПредставление = "На доработку";
			
		ИначеЕсли СтатусПеревода = ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Проработка") Тогда
			СтатусПереводаПредставление = "Проработка";

		Иначе
			Возврат;
		КонецЕсли;
		
		Шаблон = "Заявка на разработку переведена в статус <b>%1</b> по системе <b>%2</b>";
		Комментарий = СтрШаблон(Шаблон, СтатусПереводаПредставление, Система);
		ДанныеСтруктура.Статус = СтатусПереводаПредставление;
		УстановитьСтатусПоСистеме(Система, СтатусПеревода, Комментарий, ЗаписатьЗначениеJSON(ДанныеСтруктура));
	КонецЕсли;
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Учет трудозатрат

&НаКлиенте
Процедура ДобавитьФактическиеТрудозатраты(Команда)
	
	УчетТрудозатратКлиент.ОбработатьКомандуИнтерфейсаУправленияТрудозатратами(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоФактическимТрудозатратам(Команда)

	УчетТрудозатратКлиент.ОбработатьКомандуИнтерфейсаУправленияТрудозатратами(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокФактическихТрудозатрат(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ШаблонИмениКнопкиСтраницы = ПанельНавигацииКлиентСервер.ШаблонИмениКнопкиСтраницы();	
		ИмяКоманды = СтрШаблон(ШаблонИмениКнопкиСтраницы, Элементы["УправленияТрудозатратами_ОсновнаяСтраница"].Имя);	
		ПанельНавигацииКлиент.НажатиеВнеПанели(ЭтотОбъект, ИмяКоманды); 	
	Иначе
		Элементы.СтраницыДокумента.ТекущаяСтраница = Элементы["УправленияТрудозатратами_ОсновнаяСтраница"];
		СтраницыДокументаПриСменеСтраницы(Элементы.СтраницыДокумента, Элементы.СтраницыДокумента.ТекущаяСтраница); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыНажатие(Элемент, СтандартнаяОбработка)
	
	ДополнительныеСвойства.Вставить("Черновик", Объект.Черновик);
	УчетТрудозатратКлиент.ПереключитьНаВкладкуТрудозатрат(СтандартнаяОбработка, ЭтотОбъект, Элемент.Имя);	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыбратьСистемуПоУмолчанию()
	
	Если ЗначениеЗаполнено(КэшДополнительныхДанных.СистемаПоУмолчанию) Тогда
		Для Каждого Строка Из СистемыРазработкиДерево.ПолучитьЭлементы() Цикл
			Если Строка.Система = КэшДополнительныхДанных.СистемаПоУмолчанию Тогда
				Элементы.СистемыРазработкиДерево.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
				Возврат;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеДляОткрытияФормыИзменениеСтатуса(Знач Задача, Знач НовыйСтатус)
	
	ЕстьНезакрытыйПериод = ЕстьНезакрытыйПериодПриостановки(Задача);
	НовыйИсполнитель = РаботаСПроцессамиВызовСервера.ПолучитьНовогоИсполнителяЗадачи(Задача, НовыйСтатус);
	
	ДанныеДляОткрытия = Новый Структура;	
	ДанныеДляОткрытия.Вставить("ЕстьНезакрытыйПериод", ЕстьНезакрытыйПериод);
	ДанныеДляОткрытия.Вставить("НовыйИсполнитель", НовыйИсполнитель);
	
	Возврат ДанныеДляОткрытия;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьЗаписьВЖурналРегистрации(Знач ТекстСообщения, Знач Заявка)
	
	ЗаписьЖурналаРегистрации("ДокументЗаявкаНаРазработку.СтраницыДокументаПриСменеСтраницы", 
		УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЗаявкаНаРазработку, Заявка, ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуПанелиНавигации() Экспорт
	
	ПанельНавигацииКлиент.ОткрытьСтраницуНаФорме(ЭтотОбъект, ИмяОткрываемойСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапуститьАвтосохранениеОписания()
	
	АвтосохраненияДанныхКлиент.ЗапуститьАвтосохранениеОписания(ЭтотОбъект, КэшДополнительныхДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗадатьВопросВосстановленияОписания()
	
	АвтосохраненияДанныхКлиент.ЗадатьВопросОВосстановленииОписания(ЭтотОбъект, КэшДополнительныхДанных, "текущей заявки");
	
КонецПроцедуры

// Формирует набор дополнительных данных для клиента. Помогает избежать
//  множественного обращения к серверу за этими данными за счет кэширования на
//  клиенте. Не рекомендуется помещать большие объемы данных, т.к. это может
//  замедлить открытие формы на клиенте.
//
// Параметры:
//  Ссылка					 - ДокументСсылка.ЗаявкаНаРазработку	 - заявка
//  ОбъектОснование			 - ДокументСсылка.ВнутреннееЗадание, СправочникСсылка.Проекты	 - объект-основание заявки
//  АдресСхемы				 - Строка	 - адрес временного хранилища
//  ЗагруженоАвтосохранение	 - Булево	 - признак того, что автосохранение загружено
//  Продукт	 - СправочникСсылка.продукты	 - Продукт заявки
// 
// Возвращаемое значение:
//  Структура - данные для кеша
//
&НаСервереБезКонтекста
Функция ДополнительныеДанныеДляХраненияНаКлиенте(Знач Ссылка, Знач ОбъектОснование, Знач ЗагруженоАвтосохранение, Знач Продукт)
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь); 
	ДополнительныеДанные.Вставить("СвязанныеФилиалы", ПараметрыСеанса.СвязанныеФилиалы);	
	ДополнительныеДанные.Вставить("Статус_Новый_Ссылка", Справочники.СтатусыОбъектов.Новый);
	ДополнительныеДанные.Вставить("Статус_Новый_Представление", Строка(Справочники.СтатусыОбъектов.Новый));
	ДополнительныеДанные.Вставить("Статус_Отклонен", Справочники.СтатусыОбъектов.Отклонен);
	ДополнительныеДанные.Вставить("Статус_Приостановлен_Ссылка", Справочники.СтатусыОбъектов.Приостановлен);
	ДополнительныеДанные.Вставить("Статус_ВРаботе_Ссылка", Справочники.СтатусыОбъектов.ВРаботе);
	ДополнительныеДанные.Вставить("КоличествоПодчиненныхЗадач", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыОбъектов.Ссылка КАК Статус,
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексКартинки,
	|	СтатусыОбъектов.ИмяПредопределенныхДанных КАК ИмяДанных
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИндексКартинки";
	
	ИндексыКартинокСтатусов = Новый Соответствие;
	Статусы = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Статусы.Вставить(Выборка.ИмяДанных, Выборка.Статус);
		ИндексыКартинокСтатусов.Вставить(Выборка.Статус, Выборка.ИндексКартинки);
	КонецЦикла;
	
	ДополнительныеДанные.Вставить("Статусы", Статусы);
	ДополнительныеДанные.Вставить("ИндексыКартинокСтатусов", ИндексыКартинокСтатусов);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ДополнительныеДанные.Вставить("СписокЗадачНазначенныхПользователю", НайтиЗадачиНазначенныеПользователю(Ссылка));
		ДополнительныеДанные.Вставить("КоличествоПодчиненныхЗадач", 
			Документы.ЗаявкаНаРазработку.КоличествоПодчиненныхЗадач(Ссылка));
	КонецЕсли;
	
	РолиПользователяВОтделеIT = Новый Соответствие;
	РолиПользователяВОтделеIT.Вставить("Разработчик", Справочники.РолиПользователей.Разработчик);
	РолиПользователяВОтделеIT.Вставить("РуководительIT", Справочники.РолиПользователей.РуководительIT);
	РолиПользователяВОтделеIT.Вставить("Тестировщик", Справочники.РолиПользователей.Тестировщик);
	РолиПользователяВОтделеIT.Вставить("СтаршийРазработчик", Справочники.РолиПользователей.СтаршийРазработчик);
	РолиПользователяВОтделеIT.Вставить("РуководительНаправленияIT", Справочники.РолиПользователей.РуководительНаправленияIT);
	РолиПользователяВОтделеIT.Вставить("ДиректорIT", Справочники.РолиПользователей.ДиректорIT);
	РолиПользователяВОтделеIT.Вставить("ПустаяСсылка", Справочники.РолиПользователей.ПустаяСсылка());
	
	// Системы, которые доступны пользователю
	ДополнительныеДанные.Вставить("СистемыПользователя", ПараметрыСеанса.РазрабатываемыеСистемы);	
	ДополнительныеДанные.Вставить("РольПользователяДляСистем", ПолучитьРольПользователяДляСистем(Ссылка));
	ДополнительныеДанные.Вставить("РазрешениеСоздаватьЗадачи", Пользователи.ПринадлежитIT());
	ДополнительныеДанные.Вставить("РольВОтделеIT", ПараметрыСеанса.РольВОтделеIT);
	ДополнительныеДанные.Вставить("РолиПользователейВОтделеIT", РолиПользователяВОтделеIT);
	ДополнительныеДанные.Вставить("ПустаяСсылка_РолиПользователей", Справочники.РолиПользователей.ПустаяСсылка());
	
	СистемаПоУмолчанию = Справочники.Пользователи.СистемаПоУмолчанию(ПараметрыСеанса.ТекущийПользователь);
	ДополнительныеДанные.Вставить("СистемаПоУмолчанию", СистемаПоУмолчанию);
	
	РазрешеноИзменятьПорядокЗаявок = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("УправлениеПорядкомЗаявокНаРазработку");
	
	ДополнительныеДанные.Вставить("ТекущийФилиалПользователя", ПараметрыСеанса.Филиал); 
	ДополнительныеДанные.Вставить("ДоступныеДляНазначенияСистемы", ДоступныеДляНазначенияСистемы(Ссылка));
	ДополнительныеДанные.Вставить("УправлениеПорядкомЗаявокНаРазработку", РазрешеноИзменятьПорядокЗаявок);
	
	ТипФилиала = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСеанса.Филиал, "ТипФилиала");
	ПользовательПринадлежитIT = (ТипФилиала <> Перечисления.ТипыФилиалов.НеIT);
	ДополнительныеДанные.Вставить("ПользовательПринадлежитIT", ПользовательПринадлежитIT);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РолиПользователейПоНаправлениям.НаправлениеРазработки КАК Направление,
	|	РолиПользователейПоНаправлениям.Роль КАК РольПользователя
	|ПОМЕСТИТЬ РолиПользователя
	|ИЗ
	|	РегистрСведений.РолиПользователейПоНаправлениям КАК РолиПользователейПоНаправлениям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаправленияРазработки КАК НаправленияРазработки
	|		ПО РолиПользователейПоНаправлениям.НаправлениеРазработки = НаправленияРазработки.Ссылка
	|ГДЕ
	|	РолиПользователейПоНаправлениям.Пользователь = &Пользователь
	|	И НаправленияРазработки.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаправленияРазработки.Ссылка КАК Направление,
	|	ЕСТЬNULL(РолиПользователя.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) КАК РольПользователя,
	|	ВЫБОР
	|		КОГДА НаправленияРазработкиОтветственные.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Ответственный
	|ИЗ
	|	Справочник.НаправленияРазработки КАК НаправленияРазработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РолиПользователя КАК РолиПользователя
	|		ПО НаправленияРазработки.Ссылка = РолиПользователя.Направление
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияРазработки.Ответственные КАК НаправленияРазработкиОтветственные
	|		ПО НаправленияРазработки.Ссылка = НаправленияРазработкиОтветственные.Ссылка
	|			И (НаправленияРазработкиОтветственные.Сотрудник = &Пользователь)
	|ГДЕ
	|	НЕ НаправленияРазработки.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыЗаказчиковНаправлений.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ГруппыЗаказчиковНаправленийЗаказчики.Пользователь ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Заказчик,
	|	ЕСТЬNULL(ГруппыЗаказчиковНаправленийЗаказчики.Ответственный, ЛОЖЬ) КАК Ответственный
	|ИЗ
	|	Справочник.ГруппыЗаказчиковНаправлений КАК ГруппыЗаказчиковНаправлений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыЗаказчиковНаправлений.Заказчики КАК ГруппыЗаказчиковНаправленийЗаказчики
	|		ПО ГруппыЗаказчиковНаправлений.Ссылка = ГруппыЗаказчиковНаправленийЗаказчики.Ссылка
	|			И (ГруппыЗаказчиковНаправленийЗаказчики.Пользователь = &Пользователь)";
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Пакеты = Запрос.ВыполнитьПакет();
	Направления = Пакеты[1];
	ГруппыЗаказчиковПользователя = Пакеты[2];
	
	Выборка = Направления.Выбрать();	
	ДоступныеНаправления = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		ЭтоРуководительНаправления = (Выборка.РольПользователя = Справочники.РолиПользователей.РуководительНаправления);
		
		ОписаниеСвойств = Новый Структура;
		ОписаниеСвойств.Вставить("Ответственный", Выборка.Ответственный);
		ОписаниеСвойств.Вставить("РольПользователя", Выборка.РольПользователя);
		ОписаниеСвойств.Вставить("Руководитель", ЭтоРуководительНаправления);
		
		ДоступныеНаправления.Вставить(Выборка.Направление, ОписаниеСвойств);
	КонецЦикла;
	
	ДополнительныеДанные.Вставить("ДоступныеНаправления", ДоступныеНаправления);
	
	// Формирование списка групп заказчиков, где текущий пользователь является ответственным
	ДоступныеГруппыЗаказчиков = Новый Соответствие;
	ВыборкаГруппаЗаказчиков = ГруппыЗаказчиковПользователя.Выбрать();
	
	Пока ВыборкаГруппаЗаказчиков.Следующий() Цикл
		ДанныеГруппыЗаказчиков = Новый Структура("Ответственный, Заказчик", 
			ВыборкаГруппаЗаказчиков.Ответственный, ВыборкаГруппаЗаказчиков.Заказчик);		
		ДоступныеГруппыЗаказчиков.Вставить(ВыборкаГруппаЗаказчиков.Ссылка, ДанныеГруппыЗаказчиков);	
	КонецЦикла;
	
	ДополнительныеДанные.Вставить("ДоступныеГруппыЗаказчиков", ДоступныеГруппыЗаказчиков);
	
	СсылкаПрочиеЗаказчики = Справочники.ГруппыЗаказчиковНаправлений.ПрочиеЗаказчики;
	ДополнительныеДанные.Вставить("СсылкаПрочиеЗаказчики", СсылкаПрочиеЗаказчики);
	
	АвтосохраненияДанных.ДобавитьПараметрыДляАвтосохранения(ДополнительныеДанные,
		Ссылка, ОбъектОснование, ЗагруженоАвтосохранение);
	
	ГруппыЗаказчиков = ИнтерфейсПриложения.ПолучитьСписокГруппЗаказчиков();
	ДополнительныеДанные.Вставить("ГруппыЗаказчиков", ГруппыЗаказчиков);
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		ШаблоныОписания = РегистрыСведений.ШаблоныОписанияДляФилиалов.ПолучитьШаблоныОписания();
		ДополнительныеДанные.Вставить("ШаблоныОписания", ШаблоныОписания);
	КонецЕсли;
	
	Возврат ДополнительныеДанные;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДоступныеДляНазначенияСистемы(Заявка)
	
	ДоступныеДляНазначенияСистемы = Новый Соответствие;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкаНаРазработкуСистемыРазработки.Система КАК Система
	|ИЗ
	|	Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ЗаявкаНаРазработкуСистемыРазработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы.РазрабатываемыеСистемы КАК ФилиалыРазрабатываемыеСистемы
	|		ПО ЗаявкаНаРазработкуСистемыРазработки.Система = ФилиалыРазрабатываемыеСистемы.Система
	|			И (ФилиалыРазрабатываемыеСистемы.Ссылка = &Филиал)
	|ГДЕ
	|	ЗаявкаНаРазработкуСистемыРазработки.Ссылка = &Заявка";
			 
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("Филиал", ПараметрыСеанса.Филиал);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДоступныеДляНазначенияСистемы.Вставить(Выборка.Система, Истина);
	КонецЦикла;
	
	Возврат ДоступныеДляНазначенияСистемы;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьОперациюДелегированияЗаявки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Результат = ВыполнитьОперациюДелегированияЗаявкиНаСервере(Объект.Ссылка, 
			Объект.Автор, ДополнительныеПараметры.Пользователь);
			
		Если НЕ Результат.ЕстьОшибка Тогда			
			ПослеДелегированияЗаявки(КэшДополнительныхДанных.РольПользователяДляСистем);
		КонецЕсли;
		
		ПоказатьПредупреждение(, Результат.ТекстСообщения, , "Делегирование заявки");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьОперациюДелегированияЗаявкиНаСервере(Знач Заявка, Знач Автор, Знач НовыйАвтор)
	
	Возврат Документы.ЗаявкаНаРазработку.ДелегироватьЗаявку(Заявка, Автор, НовыйАвтор);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьНезакрытыйПериодПриостановки(Ссылка)
	
	Возврат ОбщегоНазначения.ЕстьНезакрытыйПериодПриостановкиЗадачи(Ссылка);
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьУстановкуСтатусаСистемы(Знач Система, Знач СтатусПеревода, Знач Назначенные, Знач Комментарий, Знач Данные, 
		Знач ПричиныИзменения = Неопределено, Знач ИдентификаторКомментария = "")
	
	УстановитьСтатусСистемыНаСервере(Система, СтатусПеревода, Назначенные, Комментарий, Данные,
		ПричиныИзменения, ИдентификаторКомментария);
		
	НастроитьГиперссылкиНазначенияПоСистеме();
	
	РазвернутьДерево(СистемыРазработкиДерево, Элементы.СистемыРазработкиДерево);
	
	Оповестить(СобытияОповещенияКлиент.ИмяСобытияОбновлениеСписковИнструментов());
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗадатьВопросАсинх(ТекстВопроса, СписокСпринтов)
		
	Если ТекстВопроса <> Неопределено Тогда
		Результат = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				
		Если Результат = КодВозвратаДиалога.Да Тогда	
			Спринты.Очистить();
			УдалитьЗаявкуИзСпринтаИПланируемыхТрудозатратПоСпринтам(Объект.Ссылка, СписокСпринтов);
			ВопросПоОчисткеСпринтовЗадавался = Истина;
			Записать();
		ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда 
			Объект.Черновик = Ложь; 
			Элементы.Спринты.Доступность = Истина;
		КонецЕсли; 	 	
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНазначенныеСистемы(НазначенныеСистемы) 
	
	Для Каждого Элемент Из НазначенныеСистемы Цикл	
		РегистрыСведений.СистемыЗаявокНазначеныеПользователю.Добавить(Объект.Ссылка, 
			Элемент.Система, Элемент.Филиал, Неопределено, "");
	КонецЦикла;	
	
	ЗаполнитьСистемыРазработкиДерево();  
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДанныеПоПродукту()
	
	НаправлениеИзменено = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Продукт) Тогда
		Возврат НаправлениеИзменено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Продукты.Направление КАК Направление
	|ИЗ
	|	Справочник.Продукты КАК Продукты
	|ГДЕ
	|	Продукты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Продукт);
	Выборка = Запрос.Выполнить().Выбрать();	
		
	Если Выборка.Количество() > 0 Тогда 
		
		Выборка.Следующий(); 
		НужноМенятьНаправление = ЗначениеЗаполнено(Выборка.Направление) И 
			Выборка.Направление <> Объект.Направление;
			
		Если НужноМенятьНаправление И 
				Элементы.Направление.СписокВыбора.НайтиПоЗначению(Выборка.Направление) <> Неопределено Тогда
			Объект.Направление = Выборка.Направление;
			НаправлениеИзменено = Истина;
		КонецЕсли;	
	КонецЕсли;  
	
	Возврат НаправлениеИзменено;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокКомандЗаказчика(СписокКоманд, Знач Статусы, Знач СтатусСистемы)
	
	Если СтатусСистемы = Статусы.Получить("НаДоработку") Тогда
		СписокКоманд.Добавить("УстановитьСтатусСистемы_Рассмотрение", "Доработано", , БиблиотекаКартинок.СтатусРешен);
		СписокКоманд.Добавить("УстановитьСтатусСистемы_ЗапросТребований", "Запрос требований", , БиблиотекаКартинок.СтатусЗапросТребований);
		
	ИначеЕсли СтатусСистемы = Статусы.Получить("ЗапросТребований") Тогда
		СписокКоманд.Добавить("УстановитьСтатусСистемы_НаДоработку", "Информация предоставлена", , БиблиотекаКартинок.СтатусРешен);
		СписокКоманд.Добавить("УстановитьСтатусСистемы_Рассмотрение", "На рассмотрение", , БиблиотекаКартинок.СтатусРассмотрение);

	ИначеЕсли СтатусСистемы = Статусы.Получить("Проработка") Тогда
		СписокКоманд.Добавить("УстановитьСтатусСистемы_Новый", "Новый", , БиблиотекаКартинок.СтатусНовый);

	ИначеЕсли КэшДополнительныхДанных.ПользовательПринадлежитIT Тогда
		Если СтатусСистемы = Статусы.Получить("Рассмотрение") Тогда
			СписокКоманд.Добавить("УстановитьСтатусСистемы_РевьюТребований", 
				"Ревью требований", , БиблиотекаКартинок.СтатусРевьюТребований);
			СписокКоманд.Добавить("УстановитьСтатусСистемы_Рассмотрен", 
				"Рассмотрен", , БиблиотекаКартинок.СтатусРассмотрен);
		Иначе
			СписокКоманд.Добавить("УстановитьСтатусСистемы_Рассмотрение", 
				"На рассмотрение", , БиблиотекаКартинок.СтатусРассмотрение);
		КонецЕсли;
		
		Если СтатусСистемы = Статусы.Получить("РевьюТребований") Тогда
			СписокКоманд.Добавить("УстановитьСтатусСистемы_Рассмотрен", 
				"Рассмотрен", , БиблиотекаКартинок.СтатусРассмотрен);		
		КонецЕсли;
	КонецЕсли;
	
	Если СтатусСистемы <> Статусы.Получить("Отклонен") Тогда
		СписокКоманд.Добавить("УстановитьСтатусСистемы_Отклонен", 
			"Отклонен", , БиблиотекаКартинок.СтатусОтклонен);	
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокКомандРазработчика(СписокКоманд, Знач Статусы, Знач СтатусСистемы, Знач ВсеДействия = Ложь)
	
	Если СтатусСистемы = Статусы.Получить("Новый") Тогда
		СписокКоманд.Добавить("УстановитьСтатусСистемы_Рассмотрение", 
			"На рассмотрение", , БиблиотекаКартинок.СтатусРассмотрение);					
		
	ИначеЕсли СтатусСистемы = Статусы.Получить("Проработка") Тогда
		СписокКоманд.Добавить("УстановитьСтатусСистемы_Новый", "Новый", , БиблиотекаКартинок.СтатусНовый);

	ИначеЕсли СтатусСистемы = Статусы.Получить("НаДоработку") И ВсеДействия Тогда
		СписокКоманд.Добавить("УстановитьСтатусСистемы_Рассмотрение", 
			"Доработано", , БиблиотекаКартинок.СтатусРешен);
		
	ИначеЕсли СтатусСистемы = Статусы.Получить("Рассмотрение") Тогда
		СписокКоманд.Добавить("УстановитьСтатусСистемы_Новый", 
			"Новый", , БиблиотекаКартинок.СтатусНовый);
		СписокКоманд.Добавить("УстановитьСтатусСистемы_НаДоработку", 
			"На доработку", , БиблиотекаКартинок.СтатусНаДоработку);
		СписокКоманд.Добавить("УстановитьСтатусСистемы_РевьюТребований", 
			"Ревью требований", , БиблиотекаКартинок.СтатусРевьюТребований);	
		СписокКоманд.Добавить("УстановитьСтатусСистемы_Рассмотрен", 
			"Рассмотрен", , БиблиотекаКартинок.СтатусРассмотрен);
		
	ИначеЕсли СтатусСистемы = Статусы.Получить("РевьюТребований") Тогда
		СписокКоманд.Добавить("УстановитьСтатусСистемы_Рассмотрение", 
			"На рассмотрение", , БиблиотекаКартинок.СтатусРассмотрение);
		СписокКоманд.Добавить("УстановитьСтатусСистемы_Рассмотрен", 
			"Рассмотрен", , БиблиотекаКартинок.СтатусРассмотрен);
		
	ИначеЕсли СтатусСистемы = Статусы.Получить("Рассмотрен") Тогда
		СписокКоманд.Добавить("УстановитьСтатусСистемы_Рассмотрение", 
			"На рассмотрение", , БиблиотекаКартинок.СтатусРассмотрение);
	КонецЕсли;
	
	Если СтатусСистемы <> Статусы.Получить("Отклонен") Тогда
		СписокКоманд.Добавить("УстановитьСтатусСистемы_Отклонен", 
			"Отклонен", , БиблиотекаКартинок.СтатусОтклонен);	
	КонецЕсли;	
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСтатусовДляПереводаЗадач()
	
	ОсновныеСтатусы = Новый Массив;
	ОсновныеСтатусы.Добавить(Справочники.СтатусыОбъектов.Рассмотрение);
	ОсновныеСтатусы.Добавить(Справочники.СтатусыОбъектов.ВРеализацию);
	
	ДанныеСтатусов = РаботаСПроцессами.ПолучитьСтатусыАналогичныеОсновным(ПараметрыСеанса.Филиал, ОсновныеСтатусы, 
		Справочники.ТипыОбъектовВладельцев.Документ_ЗаявкаНаРазработку);
	
	Для Каждого ДанныеСтатуса Из ДанныеСтатусов Цикл
		ИмяКартинки = СтрШаблон("Статус%1", ДанныеСтатуса.ИмяКартинки);
		КартинкаСтатуса = БиблиотекаКартинок[ИмяКартинки];
		
		НовыйЭлемент = СписокСтатусовДляПереводаЗадач.Добавить();
		НовыйЭлемент.Значение = ДанныеСтатуса.Ссылка;
		НовыйЭлемент.Представление = ДанныеСтатуса.Наименование;
		НовыйЭлемент.Картинка = КартинкаСтатуса;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтоимостьРеализацииЗаявки()
	
	// Получение из регистра накопления стоимости реализации заявки
	Если ЗначениеЗаполнено(Объект.ЮридическоеЛицо) Тогда
		СтоимостьЗаявки = УчетТрудозатрат.ПолучитьСтоимостьРеализацииЗаявки(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗафиксироватьПорядокЗаявки(Знач Заявка, Знач Система, Знач КлючОчереди)
		
	Если ЗначениеЗаполнено(КлючОчереди) Тогда
		Возврат РегистрыСведений.ОчередиЗаявок.ИзменитьФиксациюПоКлючу(Заявка, КлючОчереди);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ИзменитьСтатусЗадачиНаСервере(Ссылка, ПараметрыЗаписиЗадачи)
		
	ЗадачаОбъект = Ссылка.ПолучитьОбъект();
	ЗадачаОбъект.ДополнительныеСвойства.Вставить("ОбновитьДатыПоследнихИзменений");
	ЗадачаОбъект.ДополнительныеСвойства.Вставить("ПроверкаИзмененияСтатусаПередЗаписью", ПараметрыЗаписиЗадачи);
	Если ПараметрыЗаписиЗадачи.Свойство("Комментарий") Тогда
		ЗадачаОбъект.ДополнительныеСвойства.Вставить("КомментарийСтатуса", ПараметрыЗаписиЗадачи.Комментарий);
	КонецЕсли;
	ЗадачаОбъект.Записать();
	
	ЗаполнитьДеревоФилиалПодчиненныеЗадачи();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиЗадачиНазначенныеПользователю(Знач Ссылка, ВернутьСписок = Истина)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Задача.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	(ВЫРАЗИТЬ(Задача.ОбъектОснование КАК Документ.ЗаявкаНаРазработку)) = &ОбъектОснование
	|	И Задача.Назначена = &Пользователь";
	
	Запрос.УстановитьПараметр("ОбъектОснование", Ссылка);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Если ВернутьСписок Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		СписокЗадачПользователя  = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			СписокЗадачПользователя.Добавить(Выборка.Ссылка);
		КонецЦикла;
	Иначе
		СписокЗадачПользователя = Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	Возврат СписокЗадачПользователя;
		
КонецФункции

&НаСервере
Процедура НаправлениеПриИзмененииНаСервере()
	
	УстановитьСвойстваЮридическогоЛица();

	ОбновитьВидимостьВидаПроцесса();
	ИнтеграцияДополнительныхПодсистем.ОбновитьВидимостьЦелейOKR(ЭтотОбъект, Объект.Направление);
	
	Если Элементы.ВидПроцесса.Видимость Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ВидПроцесса) И ЗначениеЗаполнено(Объект.ОбъектОснование) Тогда
			Объект.ВидПроцесса = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ОбъектОснование, "ВидПроцесса");
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры
	
&НаСервере
Функция ИзменениеОписанияЗапрещено()
	
	ДанныеЗапрета = ПолучитьДанныеЗапретаРедактированияОписания(Объект.Ссылка);
	
	ЗапрещеноИзменениеОписанияЗаявки = ДанныеЗапрета.Значение;	
	ПравоЗапрета = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("УстановкаОграниченияРедактированияОписанияЗаявки");
	
	Если ЗапрещеноИзменениеОписанияЗаявки И НЕ ПравоЗапрета Тогда
		
		ШаблонНадписи = "Доступ к редактированию описания был ограничен пользователем ""%1"".";
		
		Элементы.НадписьЗапретРедактирования.Заголовок = СтрШаблон(ШаблонНадписи, ДанныеЗапрета.Автор);
		Элементы.НадписьЗапретРедактирования.Видимость = Истина;
	Иначе
		Элементы.НадписьЗапретРедактирования.Видимость = Ложь;
	КонецЕсли;
	
	ЕстьПравоРедактированияОписания = (ПравоЗапрета
		ИЛИ УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("Администратор")
		ИЛИ УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("ПолныеПрава"));
		
	Если Статус = Справочники.СтатусыОбъектов.Отклонен Тогда
		РедактированиеЗапрещено = Истина;
	Иначе
		РедактированиеЗапрещено = (ТолькоПросмотрОписания ИЛИ (ЗапрещеноИзменениеОписанияЗаявки И НЕ ЕстьПравоРедактированияОписания));
	КонецЕсли;
	
	Возврат РедактированиеЗапрещено;
	
КонецФункции

&НаСервере
Процедура ОбновитьВидимостьВидаПроцесса()
	
	Элементы.ВидПроцесса.Видимость = ЗначениеЗаполнено(Объект.Направление) 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Направление, "ИспользоватьВидыПроцессов");
		
	Если НЕ Элементы.ВидПроцесса.Видимость Тогда
		Объект.ВидПроцесса = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьВидаПроцесса()
	
	Если ЗначениеЗаполнено(Объект.ВидПроцесса) Тогда
		Элементы.ВидПроцесса.ТолькоПросмотр = (КоличествоПодчиненныхЗадач > 0) 
			ИЛИ (ЗначениеЗаполнено(Объект.ОбъектОснование) И ТипЗнч(Объект.ОбъектОснование) <> Тип("СправочникСсылка.Проекты"))
			ИЛИ (ФилиалыЗадачиДерево.ПолучитьЭлементы().Количество() > 0);
	Иначе
		Элементы.ВидПроцесса.ТолькоПросмотр = Ложь;
	КонецЕсли;
		 
КонецПроцедуры

&НаСервере
Процедура ОбновитьОбщееВремяТрудозатрат()
	
	ФактическиеТрудозатратыОбщие = УчетТрудозатрат.ПолучитьОбщееКоличествоЧасов(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросИзмененияНаправления(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	ЗадатьВопросИзмененияНаправления = Ложь;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Объект.Направление = ИсходноеНаправление;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеПлановогоВремениПоСпринтам(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	УчетТрудозатратКлиент.ОбработатьЗакрытиеПлановогоВремениПоСпринтам(Результат, ЭтотОбъект, ПланТрудозатрат);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПользователяДляДелегированияЗаявки(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		НовыйПользователь = Результат;
		
		Шаблон = 
		"Текущая заявка и подчиненные ей задачи будут делегированы пользователю ""%1"".
		|Выполнить делегирование?";
		
		ТекстВопроса = СтрШаблон(Шаблон, Строка(НовыйПользователь));
		
		ПараметрыОповещения = Новый Структура("Пользователь", НовыйПользователь);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОперациюДелегированияЗаявки", ЭтотОбъект, ПараметрыОповещения);
		
		ЗаголовокВопроса = "Делегирование заявки";
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, ЗаголовокВопроса);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДобавлениеКомментарияПриСменеСтатусаПоСистеме(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Комментарий = Результат.Комментарий.ТекстКомментария;  
	ИдентификаторКомментария = Результат.Комментарий.Идентификатор;

	ПричинаИзмененияСтатуса = Неопределено;       
	Результат.Свойство("ПричинаИзмененияСтатуса", ПричинаИзмененияСтатуса);
	
	УстановитьСтатусПоСистеме(ДопПараметры.Система, ДопПараметры.Статус, Комментарий, Результат.Данные,
		ПричинаИзмененияСтатуса, ИдентификаторКомментария);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОповеститьПослеЗаписи(Знач ПараметрыЗаписи)

	// Обновляет список выбор поля СистемаУчета подчиненных задач
	МассивСистем = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из Объект.СистемыРазработки Цикл
		МассивСистем.Добавить(СтрокаТаблицы.Система);
	КонецЦикла;	
	
	Операции = Новый Массив;  
	ПараметрыОповещения = Новый Массив;

	ПараметрыОповещения.Вставить(Операции.Количество(), МассивСистем); 
	Операции.Добавить("Документ.ЗаявкаНаРазработку.ИзменениеСистемРазработки");
	
	Если ПараметрыЗаписи.Свойство("ИзменилосьНаправление") Тогда
		ПараметрыОповещения.Вставить(Операции.Количество(), Объект.Направление); 
		Операции.Добавить(СобытияОповещенияКлиент.ИмяСобытияИзменениеНаправленияЗаявки());
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЕстьИзмененияДляРабочегоСтола") Тогда
		ПараметрыОповещения.Вставить(Операции.Количество(), Неопределено); 
		Операции.Добавить(СобытияОповещенияКлиент.ИмяСобытияОбновлениеСписковИнструментов());
	КонецЕсли;

	Если ПараметрыЗаписи.Свойство("ИзмениласьОценкаТрудозатрат") Тогда
		ПараметрыОповещения.Вставить(Операции.Количество(), Неопределено); 
		Операции.Добавить(СобытияОповещенияКлиент.ИмяСобытияОбновлениеВводаПлановыхТрудозатрат());
	КонецЕсли;
	
	Если СозданоИзПлана Тогда
		Статус = ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Новый");
		СтатусПредставление = "Новый";
		Если Объект.Черновик Тогда
			СтатусПредставление = СтрШаблон("%1 (черновик)", СтатусПредставление);
		КонецЕсли;
		
		ДокументПредставление = СтрШаблон("%1. %2", Объект.Номер, Объект.Наименование);
		
		СтруктураДляПлана = Новый Структура("Ссылка, ДокументПредставление, Статус, СтатусПредставление, Ответственный", 
			Объект.Ссылка, ДокументПредставление, Статус, СтатусПредставление, Объект.Автор);
		ПараметрыОповещения.Вставить(Операции.Количество(), СтруктураДляПлана); 
		Операции.Добавить("ПрикрепитьКПлануПроекта");
		
		СозданоИзПлана = Ложь;
	КонецЕсли;
	
	Оповестить(СтрСоединить(Операции, ";"), ПараметрыОповещения, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДоступныеНаправленияРоли()
	
	ТаблицаНаправленийРолей = Пользователи.ТаблицаНаправленийРолейПользователя(Объект.Направление);
	Элементы.Направление.СписокВыбора.ЗагрузитьЗначения(ТаблицаНаправленийРолей.СписокНаправлений.ВыгрузитьЗначения());
	РольПользователя = ТаблицаНаправленийРолей.РольПользователя;
	
КонецПроцедуры	

&НаКлиенте
Функция ОпределитьСтатусПоКоманде(Знач ИмяКоманды)
	
	НазваниеСтатуса = СтрЗаменить(ИмяКоманды, "УстановитьСтатусСистемы_", "");
	
	Возврат ПредопределенноеЗначение(СтрШаблон("Справочник.СтатусыОбъектов.%1", НазваниеСтатуса));
	
КонецФункции

&НаСервере
Функция ПереводИзЧерновика()
		
	Возврат (НЕ Объект.Черновик И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Черновик"));
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПослеПодтвержденияВыбораОтсутствующего(Знач ДопПараметры) Экспорт
	
	ЗавершитьУстановкуСтатусаСистемы(ДопПараметры.Система, ДопПараметры.СтатусПеревода, 
		ДопПараметры.Назначенные, ДопПараметры.Комментарий, ДопПараметры.Данные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриНажатииПоляHTMLДокумента(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РедакторОписанияКлиент.ПриНажатииПоляHTMLДокумента(ЭтотОбъект, ДанныеСобытия, СтандартнаяОбработка, КэшДополнительныхДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьВыборОтсутствующегоПользователя(Знач Данные, Знач Система, Знач СтатусПеревода, Знач Комментарий, Знач ДанныеДляИстории)
	
	Назначенный = Данные.Назначенные[0].Пользователь;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма", ЭтотОбъект);
	ДопПараметры.Вставить("Система", Система);
	ДопПараметры.Вставить("СтатусПеревода", СтатусПеревода);
	ДопПараметры.Вставить("Назначенные", Данные.Назначенные);
	ДопПараметры.Вставить("Комментарий", Комментарий);
	ДопПараметры.Вставить("Данные", ДанныеДляИстории);
	
	ИнтерфейсПриложенияКлиент.ПодтвердитьВыборОтсутствующегоПользователя(Назначенный, Данные.ДанныеОтсутствия, ДопПараметры);
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Функция ПолучитьГруппыЗаказчиков(Знач Направление, Знач Система, Знач ГруппыЗаказчиков)

	Результат = Новый Массив;
	
	ЭлементНаправление = ГруппыЗаказчиков.Получить(Направление);
	
	Если ЭлементНаправление <> Неопределено Тогда
		ЭлементСистема = ЭлементНаправление.Получить(Система);
		
		Если ЭлементСистема <> Неопределено Тогда
			Результат = ЭлементСистема;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеЗапретаРедактированияОписания(Знач Объект)
	
	Результат = Новый Структура("Значение, Автор", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗначенияДополнительныхРеквизитовОбъектов.Значение КАК Значение,
	|	ЗначенияДополнительныхРеквизитовОбъектов.Автор КАК Автор
	|ИЗ
	|	РегистрСведений.ЗначенияДополнительныхРеквизитовОбъектов КАК ЗначенияДополнительныхРеквизитовОбъектов
	|ГДЕ
	|	ЗначенияДополнительныхРеквизитовОбъектов.Объект = &Объект
	|	И ЗначенияДополнительныхРеквизитовОбъектов.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДополнительныхРеквизитов.ЗапрещеноИзменениеОписанияЗаявки)";
	
	Запрос.УстановитьПараметр("Объект", Объект);	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРольПользователяДляСистем(Знач Заявка)
	
	// Получим второстепенные данные
	ДанныеЗаявки = Новый Структура("Автор, Направление, Куратор");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаРазработку.Автор КАК Автор,
	|	ЗаявкаНаРазработку.Направление КАК Направление,
	|	ЕСТЬNULL(ЗначенияРеквизитовКуратор.Значение, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Куратор
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияДополнительныхРеквизитовОбъектов КАК ЗначенияРеквизитовКуратор
	|		ПО (ЗначенияРеквизитовКуратор.Объект = ЗаявкаНаРазработку.Ссылка)
	|			И (ЗначенияРеквизитовКуратор.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДополнительныхРеквизитов.Куратор))
	|ГДЕ
	|	ЗаявкаНаРазработку.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Заявка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеЗаявки, Выборка); 		
	КонецЦикла;
	
	Направление = ДанныеЗаявки.Направление;
	
	РольПользователя = "";
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ЗаместительРуководителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСеанса.Филиал, "ЗаместительРуководителя");
	СистемыПользователя = ПараметрыСеанса.РазрабатываемыеСистемы;
	
	РегистрСведений = РегистрыСведений.РолиПользователейПоНаправлениям;
	РольПользователяПоНаправлению = РегистрСведений.ПолучитьРольПользователяПоНаправлению(Направление, ТекущийПользователь);
	ЭтоСтаршийПрограммист = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("СтаршийПрограммист");
	ЭтоЗаместительРуководителя = (ЗаместительРуководителя = ТекущийПользователь);
	ДоступнаРольРуководительIT = (РольПользователяПоНаправлению = Справочники.РолиПользователей.РуководительIT);
	ДоступнаРольРазработчик = (РольПользователяПоНаправлению = Справочники.РолиПользователей.Разработчик);
	
	Если ЗначениеЗаполнено(Направление) Тогда
		Руководитель = ПолучитьРуководителяНаправления(Направление);		
	Иначе
		Руководитель = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	ЭтоЗаказчик = (ДанныеЗаявки.Автор = ТекущийПользователь 
		ИЛИ ДанныеЗаявки.Куратор = ТекущийПользователь 
		ИЛИ Руководитель = ТекущийПользователь);
		
	ЭтоРазработчик = (ЭтоСтаршийПрограммист
		ИЛИ ДоступнаРольРуководительIT
		ИЛИ (ЭтоЗаместительРуководителя
			И ДоступнаРольРазработчик));
	
	Если ЭтоЗаказчик Тогда
		РольПользователя = "Заказчик";	
	ИначеЕсли ЭтоРазработчик Тогда
		РольПользователя = "Разработчик";
	КонецЕсли;
	
	Возврат РольПользователя;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФамилиюИнициалыПользователя(Знач Пользователь)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФИО");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФилиалыЗадачПоСистеме(Знач Заявка, Знач Система)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(Задача.Филиал) КАК Филиал
	|ИЗ
	|	РегистрСведений.СтруктураПодчиненности КАК СтруктураПодчиненности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК Задача
	|		ПО СтруктураПодчиненности.Объект = Задача.Ссылка
	|			И (СтруктураПодчиненности.Родитель = &Заявка)
	|ГДЕ
	|	Задача.СистемаУчета = &СистемаУчета
	|	И Задача.Филиал <> &Филиал
	|
	|СГРУППИРОВАТЬ ПО
	|	Задача.Филиал";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("СистемаУчета", Система);
	Запрос.УстановитьПараметр("Филиал", ПараметрыСеанса.Филиал);
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура("ЕстьФилиалы", Ложь);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Результат.ЕстьФилиалы = Истина;
		Филиалы = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Филиал");
		Результат.Вставить("СписокФилиалов", СтрСоединить(Филиалы, ", "));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПослеДелегированияЗаявки(РольПользователяДляСистем)
	
	Прочитать(); 	
	УстановитьВидимостьПоляЧерновик();
	РольПользователяДляСистем = ПолучитьРольПользователяДляСистем(Объект.Ссылка); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияЗагрузкиШаблона(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПрименитьШаблонОписания(ДопПараметры);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьШаблонОписания(Описание)
	
	ЭтотОбъект[РедакторОписанияКлиентСервер.ИмяРеквизитаАктуальноеОписание()] = Описание;
	ЭтотОбъект[РедакторОписанияКлиентСервер.ИмяРеквизитаИзмененоОписание()] = Истина;
	ЭтотОбъект[РедакторОписанияКлиентСервер.ИмяРеквизита()] = РедакторОписанияВызовСервера.ПолучитьРедактор(Описание);
	
КонецПроцедуры

&НаСервере
Процедура ПриОбновленииЗадачВЗаявкеНаСервере()
	
	ЗаполнитьДеревоФилиалПодчиненныеЗадачи();
	БезопасностьПереопределяемый.ПрименитьПравоОтклоненияЗаявки(ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьБезопасностьНаСервере()
	
	ТаблицаПравоВидРазрешения = ПолучитьИзВременногоХранилища(АдресТаблицыБезопасностей);
	Безопасность.НастроитьИнтерактивнуюБезопасность(ЭтотОбъект, ТаблицаПравоВидРазрешения); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВозможностьСозданияЗадачи(Знач ОбъектОснование)
	
	РезультатПроверки = Документы.Задача.ПроверитьВозможностьСозданияЗадачи(Истина, ОбъектОснование);
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервере
Функция ПроставитьАвтоматическиФилиал(Системы)   
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СистемыУчета.Ссылка КАК Система,
	|	ФилиалыРазрабатываемыеСистемы.Ссылка КАК Филиал
	|ПОМЕСТИТЬ СистемаФилиалы
	|ИЗ
	|	Справочник.СистемыУчета КАК СистемыУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияДополнительныхРеквизитовОбъектов КАК ЗначенияДополнительныхРеквизитовОбъектов
	|		ПО (ЗначенияДополнительныхРеквизитовОбъектов.Объект = СистемыУчета.Ссылка)
	|			И (ЗначенияДополнительныхРеквизитовОбъектов.Значение = ИСТИНА)
	|			И (ЗначенияДополнительныхРеквизитовОбъектов.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДополнительныхРеквизитов.АвтоматическоеНазначениеФилиала))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы.РазрабатываемыеСистемы КАК ФилиалыРазрабатываемыеСистемы
	|		ПО (ФилиалыРазрабатываемыеСистемы.Система = СистемыУчета.Ссылка)
	|ГДЕ
	|	СистемыУчета.Ссылка В(&Системы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СистемаФилиалы.Система КАК Система,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СистемаФилиалы.Филиал) КАК Филиал
	|ПОМЕСТИТЬ КоличествоФилиалов
	|ИЗ
	|	СистемаФилиалы КАК СистемаФилиалы
	|
	|СГРУППИРОВАТЬ ПО
	|	СистемаФилиалы.Система
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СистемаФилиалы.Филиал) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СистемаФилиалы.Система КАК Система,
	|	СистемаФилиалы.Филиал КАК Филиал
	|ИЗ
	|	СистемаФилиалы КАК СистемаФилиалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоличествоФилиалов КАК КоличествоФилиалов
	|		ПО (КоличествоФилиалов.Система = СистемаФилиалы.Система)";
	
	Запрос.УстановитьПараметр("Системы", Системы);
	Результат = Запрос.Выполнить();
	НазначенныеСистемы = Новый Массив;
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл      
			Структура = Новый Структура("Система, Филиал", Выборка.Система, Выборка.Филиал);
			НазначенныеСистемы.Добавить(Структура);
		КонецЦикла;	
	КонецЕсли; 
	
	Возврат НазначенныеСистемы;
	
КонецФункции

&НаКлиенте
Процедура РазвернутьЗадачиСвязанныхФилиалов()
	
	КорневыеСтроки = ФилиалыЗадачиДерево.ПолучитьЭлементы();
	
	Для Каждого Строка Из КорневыеСтроки Цикл
		Если КэшДополнительныхДанных.СвязанныеФилиалы.Найти(Строка.Филиал) <> Неопределено Тогда
			Элементы.ФилиалыЗадачиДерево.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВводПлановыхТрудозатратДляСпринта()
	
	Спринты = РегистрыСведений.СоставСпринтов.ПолучитьАктивныеСпринтыОбъекта(Объект.Ссылка, Истина);
	
	ЕстьАктивныеСпринты = (Спринты.Количество() > 0);
	
	Элементы.ОценкаТрудозатратНадпись.Видимость = ЕстьАктивныеСпринты;
	Элементы.ОценкаТрудозатрат.Видимость = НЕ ЕстьАктивныеСпринты;
	
	Если НЕ ЕстьАктивныеСпринты Тогда
		Спринты = РегистрыСведений.СоставСпринтов.ПолучитьТекущийСпринтОбъекта(Объект.Ссылка, Истина);
	КонецЕсли;
	
	СпринтЗаполнен = Спринты.Количество() > 0;
	
	Элементы.Спринты.Видимость = СпринтЗаполнен;
	
	Если НЕ ЕстьАктивныеСпринты И СпринтЗаполнен Тогда
		ПлановоеВремя = РегистрыСведений.ПланируемыеТрудозатратыПоСпринтам.ПолучитьПодсказкуПлановогоВремени(Объект.Ссылка);
		
		Элементы.ОценкаТрудозатрат.Подсказка = ПлановоеВремя.Подсказка; 
		
		РаспределенныеТрудозатраты = ПлановоеВремя.Трудозатраты;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьТекстВопросаИСписокСпринтов(Ссылка)	
	
	СтруктураДанных = Новый Структура;
	
	СписокСпринтов = РегистрыСведений.СоставСпринтов.ПолучитьАктивныеСпринтыОбъекта(Ссылка, Истина);
	Спринт = "";
	
	СтруктураДанных.Вставить("СписокСпринтов", СписокСпринтов);
	
	Спринт = СтрСоединить(СписокСпринтов.ВыгрузитьЗначения(), Символы.ПС);
	
	Если СписокСпринтов.Количество() > 0 Тогда
		СтруктураДанных.Вставить("ТекстВопроса", СтрШаблон(
		"Заявка будет исключена из спринта 
		| %1
		| Установить признак ""Черновик""?",
		Спринт));
	Иначе
		СтруктураДанных.Вставить("ТекстВопроса", Неопределено);
	КонецЕсли; 
	
	Возврат СтруктураДанных;
	
КонецФункции 

&НаСервере
Процедура УдалитьЗаявкуИзСпринтаИПланируемыхТрудозатратПоСпринтам(Знач Объект, Знач СписокСпринтов)   
	
   	НаборЗаписейСоставСпринтов = РегистрыСведений.СоставСпринтов.СоздатьНаборЗаписей();	
	НаборЗаписейСоставСпринтов.Отбор.Объект.Установить(Объект); 
	
	Для Каждого Спринт Из СписокСпринтов Цикл	
		НаборЗаписейСоставСпринтов.Отбор.Спринт.Установить(Спринт.Значение);
		НаборЗаписейСоставСпринтов.Записать(); 
		
		РегистрыСведений.ПланируемыеТрудозатратыПоСпринтам.Удалить(Объект, Спринт.Значение);
	КонецЦикла;  
	
	ПланТрудозатрат = УчетТрудозатрат.ПолучитьПлановыеТрудозатраты(Объект);
	НастроитьИЗаполнитьСпринт();

КонецПроцедуры

// Проверяет разрешение на открытие заявки с признаком ограниченный просмотр.
//  Открытие заявки разрешено пользователям групп разработки, по которым созданы задачи от заявки.
//
// Параметры:
//  Ссылка	 - ДокументСсылка.ЗаявкаНаРазработку - заявка
//	Направление 	 - СправочникСсылка.НаправленияРазработки	 - направление заявки
// 
// Возвращаемое значение:
//   - Булево
//
&НаСервереБезКонтекста
Функция РазрешитьОткрытие(Знач Ссылка, Знач Направление)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК Разрешен
	|ИЗ
	|	Документ.Задача КАК ДокументЗадача
	|ГДЕ
	|	(ВЫРАЗИТЬ(ДокументЗадача.ОбъектОснование КАК Документ.ЗаявкаНаРазработку)) = &Ссылка
	|	И ДокументЗадача.Филиал = &Филиал
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Справочник.НаправленияРазработки.Ответственные КАК НаправленияРазработкиОтветственные
	|ГДЕ
	|	НаправленияРазработкиОтветственные.Ссылка = &Направление
	|	И НаправленияРазработкиОтветственные.Сотрудник = &Пользователь
	|	И НаправленияРазработкиОтветственные.Руководитель = ИСТИНА";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Филиал", ПараметрыСеанса.Филиал);
	Запрос.УстановитьПараметр("Направление", Направление);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиенте
Процедура СистемыПриИзменении(МассивСистем)
	
	НазначенныеСистемы = ПроставитьАвтоматическиФилиал(МассивСистем);
	
	Если НазначенныеСистемы.Количество() > 0 Тогда  
		Записать();                 
		ЗаписатьНазначенныеСистемы(НазначенныеСистемы);
	КонецЕсли;   
	
	РазвернутьДерево(СистемыРазработкиДерево, Элементы.СистемыРазработкиДерево);
	ОбновитьВидимостьИЗначениеГруппыЗаказчиков(МассивСистем);
	НастроитьГиперссылкиНазначенияПоСистеме();
	
КонецПроцедуры

&НаКлиенте
Процедура СпринтОбработкаВыбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		Спринты.Очистить();
		
		Для Каждого Строка Из РезультатЗакрытия.АктивныеСпринты Цикл
			Спринты.Добавить(Строка);   
		КонецЦикла;  
		
		ПланТрудозатрат = РезультатЗакрытия.Трудозатраты;
		
		ИзменитьВводПлановыхТрудозатратДляСпринта();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТегиHTMLПослеНажатия(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") 
		ИЛИ НЕ Результат.Модифицированность Тогда
		
		Возврат;
	КонецЕсли;
	
	ТегиHTMLПослеНажатияНаСервере(Результат.СписокТегов);
	
КонецПроцедуры

&НаСервере
Процедура ТегиHTMLПослеНажатияНаСервере(Знач СписокТегов)

	РаботаСТегамиВызовСервера.Обновить(ЭтотОбъект, СписокТегов, Элементы.ГруппаСтраницаСвойстваШапка.ЦветФона);	

КонецПроцедуры

// Формирует и устанавливает представление статуса заявки и его картинку
//
&НаСервере
Процедура УстановитьПредставлениеСтатуса(Знач СтруктураСтатуса = Неопределено)
	
	Если Объект.Черновик И НЕ ЗначениеЗаполнено(Объект.ФинальныйСтатус) Тогда
		СтатусПредставление = "Черновик";
		ИндексКартинкиСтатуса = Справочники.СтатусыОбъектов.ИндексКартинкиЧерновик();
		Возврат;
	КонецЕсли;
		
	Если СтруктураСтатуса = Неопределено Тогда
		СтруктураСтатуса = ПолучитьСтатусЗаявки(Объект.Ссылка); 
	КонецЕсли;
	
	Статус = СтруктураСтатуса.Статус;
	СтатусПредставление = СтруктураСтатуса.ПредставлениеСтатуса;
	ИндексКартинкиСтатуса = СтруктураСтатуса.ИндексКартинки;
		
КонецПроцедуры	

&НаСервере
Процедура УстановитьСвойстваЮридическогоЛица(Знач ОткрытиеДокумента = Ложь)
	
	// Очистка списка выбора юридических лиц
	СписокВыбора = Элементы.ЮридическоеЛицо.СписокВыбора;
	СписокВыбора.Очистить();
	
	// Получение юридического лица объекта основания
	Если ЗначениеЗаполнено(Объект.ОбъектОснование) Тогда
		ЮрЛицоОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ОбъектОснование, "ЮридическоеЛицо");
	Иначе
		ЮрЛицоОснования = Неопределено;
	КонецЕсли;
	
	Если НЕ ОткрытиеДокумента И ЗначениеЗаполнено(Объект.ЮридическоеЛицо) Тогда
		ЮридическоеЛицоНастроек = Объект.ЮридическоеЛицо;
	Иначе
		ЮридическоеЛицоНастроек = Неопределено;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.Направление) Тогда
		
		ВидыНастроек = ПланыВидовХарактеристик.ВидыНастроекПользователя;
		НастройкиАвтозаполнения = РаботаСНастройками.ПолучитьНастройкиАвтозаполнения(ВидыНастроек.ЗаполнениеЗаявки);
		
		Если ЗначениеЗаполнено(НастройкиАвтозаполнения[ВидыНастроек.ЮрЛицоДляЗаполненияЗаявки]) Тогда
			Объект.Направление = НастройкиАвтозаполнения[ВидыНастроек.НаправлениеДляЗаполненияЗаявки];
			
			Если РегистрыСведений.ИспользованиеЮридическихЛицНаправлений.Использует(Объект.Направление) Тогда
				ЮридическоеЛицоНастроек = НастройкиАвтозаполнения[ВидыНастроек.ЮрЛицоДляЗаполненияЗаявки];
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Получения списка юридических лиц направления, основного юридического лица и признака видимости поля юридического лица
	ПараметрыЮридическогоЛица = Документы.ЗаявкаНаРазработку.ПараметрыЮрЛица(Объект.Направление);
		
	ВидимостьЮрЛица = ПараметрыЮридическогоЛица.ВидимостьЮрЛица;
	ОсновноеЮрЛицо = ПараметрыЮридическогоЛица.ОсновноеЮрЛицо;
	
	// Заполнение списка выбора юридических лиц
	Для Каждого Элемент Из ПараметрыЮридическогоЛица.СписокЮрЛиц Цикл
		СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
	КонецЦикла;
	
	// Если открывается существующий документ
	Если ОткрытиеДокумента Тогда
		
		// Если юридическое лицо не заполнено, то добавляется пункт "Не выбрано"
		Если НЕ ЗначениеЗаполнено(Объект.ЮридическоеЛицо) Тогда
			СписокВыбора.Добавить(Справочники.ЮридическиеЛица.ПустаяСсылка(), "Не выбрано");
		Иначе
			ВидимостьЮрЛица = Истина;
		КонецЕсли;
		
		ЮридическоеЛицоЗаявки = Объект.ЮридическоеЛицо;
		
		// Если юридическое лицо заявки отсутствует в списке выбора, то оно добавляется в список
		Если ВидимостьЮрЛица И СписокВыбора.НайтиПоЗначению(ЮридическоеЛицоЗаявки) = Неопределено Тогда
			СписокВыбора.Добавить(ЮридическоеЛицоЗаявки);
		КонецЕсли;
		
	// Если создается новый документ и заполнено юридическое лицо в объекте основания,
	// то оно будет установлено в качестве юридического лица текущего объекта
	ИначеЕсли ЗначениеЗаполнено(ЮрЛицоОснования)
		И СписокВыбора.НайтиПоЗначению(ЮрЛицоОснования) <> Неопределено Тогда
		ЮридическоеЛицоЗаявки = ЮрЛицоОснования;
	ИначеЕсли ЗначениеЗаполнено(ЮридическоеЛицоНастроек)
		И СписокВыбора.НайтиПоЗначению(ЮридическоеЛицоНастроек) <> Неопределено Тогда
		
		ЮридическоеЛицоЗаявки = ЮридическоеЛицоНастроек;
	Иначе
		ЮридическоеЛицоЗаявки = ОсновноеЮрЛицо;
	КонецЕсли;
	
	Объект.ЮридическоеЛицо = ЮридическоеЛицоЗаявки;
	Элементы.ЮридическоеЛицо.Видимость = ВидимостьЮрЛица;
	Элементы.СтоимостьЗаявки.Видимость = ВидимостьЮрЛица;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПоСистеме(Знач Система, Знач СтатусПеревода, Знач Комментарий, Знач ДанныеДляИстории,
	Знач ПричиныИзменения = Неопределено, Знач ИдентификаторКомментария = "")
	
	Данные = ПолучитьНазначенных(Объект.Ссылка, Система, СтатусПеревода, Объект.Автор); 
	ДанныеОтсутствия = Данные.ДанныеОтсутствия; 
	
	Если ДанныеОтсутствия <> Неопределено И ДанныеОтсутствия.Отсутствует Тогда
		ПодтвердитьВыборОтсутствующегоПользователя(Данные, Система, СтатусПеревода, Комментарий, ДанныеДляИстории);	
	Иначе
		ЗавершитьУстановкуСтатусаСистемы(Система, СтатусПеревода, Данные.Назначенные, Комментарий, 
			ДанныеДляИстории, ПричиныИзменения, ИдентификаторКомментария);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНазначенных(Знач Заявка, Знач Система, Знач Статус, Знач Автор)
	
	Назначенные = Новый Массив; 
	СоответствиеСтатусов = Новый Соответствие;
	СоответствиеСтатусов.Вставить(Справочники.СтатусыОбъектов.Рассмотрение, Справочники.СтатусыОбъектов.Рассмотрение);
	СоответствиеСтатусов.Вставить(Справочники.СтатусыОбъектов.Рассмотрен, Справочники.СтатусыОбъектов.Рассмотрение);
	СоответствиеСтатусов.Вставить(Справочники.СтатусыОбъектов.РевьюТребований, Справочники.СтатусыОбъектов.РевьюТребований);  
	ИскомыйСтатус = СоответствиеСтатусов.Получить(Статус);
		
	Если ИскомыйСтатус <> Неопределено Тогда
		// При переводе в новый статус, нам нужно получить назначенных,
		// действительных на момент перехода из рассмотрение в следующий статус.
		//
		// 1. Находим дату последнего искомого статуса по системе
		// 2. Находим дату следующего за ним статуса по системе
		// 3. Получаем последние записи истории назначенных на эту дату
		// 4. Выбираем записи, имеющие на эту дату вид операции добавление
			
		Запрос = Новый Запрос;
		Запрос.Текст =
		#Область ТекстЗапроса
		"ВЫБРАТЬ
		|	ИсторияСтатусовЗаявокПоСистемам.Заявка КАК Заявка,
		|	ИсторияСтатусовЗаявокПоСистемам.Система КАК Система,
		|	МАКСИМУМ(ИсторияСтатусовЗаявокПоСистемам.Период) КАК Период
		|ПОМЕСТИТЬ ПериодПоследнегоСтатусаРассмотрение
		|ИЗ
		|	РегистрСведений.ИсторияСтатусовЗаявокПоСистемам КАК ИсторияСтатусовЗаявокПоСистемам
		|ГДЕ
		|	ИсторияСтатусовЗаявокПоСистемам.Заявка = &Заявка
		|	И ИсторияСтатусовЗаявокПоСистемам.Система = &Система
		|	И ИсторияСтатусовЗаявокПоСистемам.Статус = &ИскомыйСтатус
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияСтатусовЗаявокПоСистемам.Заявка,
		|	ИсторияСтатусовЗаявокПоСистемам.Система
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодПоследнегоСтатусаРассмотрение.Заявка КАК Заявка,
		|	ПериодПоследнегоСтатусаРассмотрение.Система КАК Система,
		|	ЕСТЬNULL(МИНИМУМ(ИсторияСтатусовЗаявокПоСистемам.Период), &ТекущаяДата) КАК Период
		|ПОМЕСТИТЬ ПериодСледующегоСтатуса
		|ИЗ
		|	ПериодПоследнегоСтатусаРассмотрение КАК ПериодПоследнегоСтатусаРассмотрение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаявокПоСистемам КАК ИсторияСтатусовЗаявокПоСистемам
		|		ПО ПериодПоследнегоСтатусаРассмотрение.Заявка = ИсторияСтатусовЗаявокПоСистемам.Заявка
		|			И ПериодПоследнегоСтатусаРассмотрение.Система = ИсторияСтатусовЗаявокПоСистемам.Система
		|			И ПериодПоследнегоСтатусаРассмотрение.Период < ИсторияСтатусовЗаявокПоСистемам.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодПоследнегоСтатусаРассмотрение.Заявка,
		|	ПериодПоследнегоСтатусаРассмотрение.Система
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодСледующегоСтатуса.Заявка КАК Заявка,
		|	ПериодСледующегоСтатуса.Система КАК Система,
		|	ИсторияНазначенныхЗаявокПоСистемам.Филиал КАК Филиал,
		|	МАКСИМУМ(ИсторияНазначенныхЗаявокПоСистемам.Период) КАК Период
		|ПОМЕСТИТЬ ПоследниеЗаписи
		|ИЗ
		|	ПериодСледующегоСтатуса КАК ПериодСледующегоСтатуса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияНазначенныхЗаявокПоСистемам КАК ИсторияНазначенныхЗаявокПоСистемам
		|		ПО ПериодСледующегоСтатуса.Заявка = ИсторияНазначенныхЗаявокПоСистемам.Заявка
		|			И ПериодСледующегоСтатуса.Система = ИсторияНазначенныхЗаявокПоСистемам.Система
		|			И ПериодСледующегоСтатуса.Период > ИсторияНазначенныхЗаявокПоСистемам.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодСледующегоСтатуса.Заявка,
		|	ПериодСледующегоСтатуса.Система,
		|	ИсторияНазначенныхЗаявокПоСистемам.Филиал
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоследниеЗаписи.Филиал КАК Филиал,
		|	ИсторияНазначенныхЗаявокПоСистемам.ТекущийИсполнитель КАК ТекущийИсполнитель
		|ИЗ
		|	ПоследниеЗаписи КАК ПоследниеЗаписи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияНазначенныхЗаявокПоСистемам КАК ИсторияНазначенныхЗаявокПоСистемам
		|		ПО ПоследниеЗаписи.Период = ИсторияНазначенныхЗаявокПоСистемам.Период
		|			И ПоследниеЗаписи.Заявка = ИсторияНазначенныхЗаявокПоСистемам.Заявка
		|			И ПоследниеЗаписи.Система = ИсторияНазначенныхЗаявокПоСистемам.Система
		|			И ПоследниеЗаписи.Филиал = ИсторияНазначенныхЗаявокПоСистемам.Филиал
		|			И (ИсторияНазначенныхЗаявокПоСистемам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацииНазначенияПоСистеме.Добавление))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторияНазначенныхЗаявокПоСистемам.Филиал КАК Филиал,
		|	ИсторияНазначенныхЗаявокПоСистемам.ТекущийИсполнитель КАК ТекущийИсполнитель
		|ИЗ
		|	РегистрСведений.ИсторияСтатусовЗаявокПоСистемам.СрезПоследних(
		|			&ТекущаяДата,
		|			Заявка = &Заявка
		|				И Система = &Система) КАК ИсторияСтатусовЗаявокПоСистемамСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияНазначенныхЗаявокПоСистемам КАК ИсторияНазначенныхЗаявокПоСистемам
		|		ПО (ИсторияНазначенныхЗаявокПоСистемам.Заявка = ИсторияСтатусовЗаявокПоСистемамСрезПоследних.Заявка)
		|			И (ИсторияНазначенныхЗаявокПоСистемам.Система = ИсторияСтатусовЗаявокПоСистемамСрезПоследних.Система)
		|			И (ИсторияНазначенныхЗаявокПоСистемам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацииНазначенияПоСистеме.Добавление))
		|ГДЕ
		|	ИсторияСтатусовЗаявокПоСистемамСрезПоследних.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый)";
		#КонецОбласти
		
		Запрос.УстановитьПараметр("Заявка", Заявка);
		Запрос.УстановитьПараметр("Система", Система);		
		Запрос.УстановитьПараметр("ИскомыйСтатус", ИскомыйСтатус);		
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());		
		
		Пакеты = Запрос.ВыполнитьПакет();
		КоличествоПакетов = Пакеты.ВГраница();
		ПредыдущиеНазначенные = Пакеты.Получить(КоличествоПакетов - 1);
		
		Если ПредыдущиеНазначенные.Пустой() Тогда
			Если Статус = Справочники.СтатусыОбъектов.Рассмотрение ИЛИ Статус = Справочники.СтатусыОбъектов.Новый Тогда
				ВыборкаНазначенные = Пакеты[КоличествоПакетов].Выбрать();
				
				Пока ВыборкаНазначенные.Следующий() Цикл
					Назначенные.Добавить(Новый Структура("Филиал, Пользователь", 
						ВыборкаНазначенные.Филиал, ВыборкаНазначенные.ТекущийИсполнитель));
				КонецЦикла;
				Назначенные.Добавить(Новый Структура("Филиал, Пользователь", ПараметрыСеанса.Филиал, ПараметрыСеанса.ТекущийПользователь));	
			КонецЕсли;
		Иначе
			Выборка = ПредыдущиеНазначенные.Выбрать();
				
			Пока Выборка.Следующий() Цикл
				Назначенные.Добавить(Новый Структура("Филиал, Пользователь", Выборка.Филиал, Выборка.ТекущийИсполнитель));
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
	Если Назначенные.Количество() = 1 И ЗначениеЗаполнено(Назначенные[0].Пользователь) Тогда
		ДанныеОтсутствия = ПользователиВызовСервера.ДанныеОтсутствия(Назначенные[0].Пользователь);
	Иначе
		ДанныеОтсутствия = Неопределено;
	КонецЕсли;
	
	НазначенныеПользователи = Новый Структура;
	НазначенныеПользователи.Вставить("Назначенные", Назначенные);
	НазначенныеПользователи.Вставить("ДанныеОтсутствия", ДанныеОтсутствия);

	Возврат НазначенныеПользователи;
	
КонецФункции

&НаСервере
Процедура УстановитьСтатусСистемыНаСервере(Знач Система, Знач Статус, Знач Назначенные, Знач Комментарий,
		Знач Данные, Знач ПричиныИзменения, Знач ИдентификаторКомментария)
		
	Успешно = Истина;
	
	НачатьТранзакцию();
	Попытка
		РегистрыСведений.СтатусыЗаявокПоСистемам.УстановитьСтатусЗаявкиПоСистеме(
			Объект.Ссылка, Система, Статус, Комментарий, Данные);	
		РегистрыСведений.СистемыЗаявокНазначеныеПользователю.Удалить(Объект.Ссылка, Система);
		
		Для Каждого Назначенный Из Назначенные Цикл 
			РегистрыСведений.СистемыЗаявокНазначеныеПользователю.Добавить(Объект.Ссылка, 
				Система, Назначенный.Филиал, Назначенный.Пользователь);
		КонецЦикла;
			
		Если ПричиныИзменения <> Неопределено Тогда
			РегистрыСведений.ПричиныИзмененияСтатусаОбъектов.Добавить(Объект.Ссылка, Статус, ПричиныИзменения, ИдентификаторКомментария, Система);
		КонецЕсли;
		
		Если Статус = Справочники.СтатусыОбъектов.Отклонен ИЛИ Статус = Справочники.СтатусыОбъектов.НаДоработку Тогда		
			РегистрыСведений.Комментарии.Добавить(Объект.Ссылка, ИдентификаторКомментария, , Комментарий, , Истина);
		КонецЕсли;
	
		ЗафиксироватьТранзакцию();			
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("УстановитьСтатусЗаявкиПоСистеме", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		Успешно = Ложь;
	КонецПопытки; 
	
	Если НЕ Успешно Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось изменить статус по системе");
		Возврат;
	КонецЕсли;
		
	ЗаполнитьСистемыРазработкиДерево();
	УстановитьВидимостьПоляЧерновик();
	
	СтатусЗаявки = ПолучитьСтатусЗаявки(Объект.Ссылка);
	УстановитьПредставлениеСтатуса(СтатусЗаявки);
	
	Если Статус = Справочники.СтатусыОбъектов.Отклонен 
		ИЛИ Статус = Справочники.СтатусыОбъектов.НаДоработку Тогда
		
		УстановитьВидимостьКнопкиСоздатьНаОсновании(СтатусЗаявки.Статус);
		НовыйСтатус = Статус;
		
		// Переинициализируем безопасность
		// (запустится процедура, которая перерисует кнопку Отклонить)
		Безопасность.НастроитьФормуПослеОткрытия(ЭтотОбъект);
	КонецЕсли;
			
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// Обработчики оповещений

&НаКлиенте
Процедура ГруппаЗаказчиковОбработкаВыбора(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат <> Неопределено Тогда
		ТекущиеДанные = Элементы.СистемыРазработкиДерево.ТекущиеДанные;
		ТекущиеДанные.ГруппаЗаказчиков = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПрисвоениеСтатуса(Результат, ДополнительныеПараметры) Экспорт
	
	// Процедура используется для отклонения заявки по общей кнопке Отклонить
	Если Результат <> Неопределено Тогда
		Объект.ФинальныйСтатус = НовыйСтатус;
		
		Записать(Результат);
	КонецЕсли;
	
	НовыйСтатус = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросЗаполненияГруппыЗаказчиков(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	// Окно с сообщением закрывается, заявка записывается без указания Группы заказчиков
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ЗадатьВопросЗаполнитьГруппу = Ложь;
		Записать(); 
	Иначе 
		ШаблонИмениКнопкиСтраницы = ПанельНавигацииКлиентСервер.ШаблонИмениКнопкиСтраницы();
		ИмяКоманды = СтрШаблон(ШаблонИмениКнопкиСтраницы, Элементы.СтраницаОсновныеСвойства.Имя);
		ПанельНавигацииКлиент.НажатиеВнеПанели(ЭтотОбъект, ИмяКоманды);    
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросОтклоненияЗаявки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		ИЛИ Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуКомментарийСтатуса(ДополнительныеПараметры, Истина);		
	НовыйСтатус = ДополнительныеПараметры.Статус;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыИзмененияПорядка(Результат, ТекущиеДанные) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если Результат.ИсходныйПорядок <> Результат.НовыйПорядок Тогда
		ДанныеЗаявки = Новый Структура;
		ДанныеЗаявки.Вставить("Заявка", Объект.Ссылка);
		ДанныеЗаявки.Вставить("Направление", Объект.Направление);
		ДанныеЗаявки.Вставить("Продукт", Объект.Продукт);
		ДанныеЗаявки.Вставить("Система", ТекущиеДанные.Система);
		ДанныеЗаявки.Вставить("ГруппаЗаказчиков", ТекущиеДанные.ГруппаЗаказчиков);
		ДанныеЗаявки.Вставить("Порядок", ТекущиеДанные.Порядок);
		
		ПараметрыПеремещения = УправлениеИнструментамиРазработкиКлиент.ОчередьЗаявокПараметрыПеремещения(ДанныеЗаявки, ТекущиеДанные.ВидОчереди);	
		
		РезультатИзменения = УправлениеИнструментамиРазработкиВызовСервера.ОчередьЗаявокИзменитьПорядок(ПараметрыПеремещения, 
			Результат.НовыйПорядок, Результат.Зафиксирован);
		
		Если РезультатИзменения.Успешно Тогда
			ТекущиеДанные.ПорядокЗафиксирован = Результат.Зафиксирован;
		Иначе
			ПоказатьПредупреждение(, РезультатИзменения.ТекстОшибки);
		КонецЕсли;	
	ИначеЕсли ТекущиеДанные.ПорядокЗафиксирован <> Результат.Зафиксирован Тогда
		ЗафиксироватьПорядокЗаявки(Объект.Ссылка, ТекущиеДанные.Система, ТекущиеДанные.КлючОчереди);
		ТекущиеДанные.ПорядокЗафиксирован = Результат.Зафиксирован;
	КонецЕсли;
	
	ТекущиеДанные.Порядок = Результат.НовыйПорядок;
	ТекущиеДанные.ПорядокВОчереди = Результат.НовыйПорядок;
	
	Оповестить(СобытияОповещенияКлиент.ИмяСобытияИзмененияЗаявкиВОчереди(), , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветНаВопросСозданияЗадачи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьФорму("Документ.Задача.Форма.ФормаДокумента", ДополнительныеПараметры, ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПроверкиИзмененияСтатусаПередЗаписью(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат.Свойство("ПереоткрытиеФормы") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписиЗадачи = Новый Структура;
	
	Если ЗначениеЗаполнено(Результат.НазначитьНа) Тогда
		ПараметрыЗаписиЗадачи.Вставить("Назначена", Результат.НазначитьНа);
	КонецЕсли;
	
	ПараметрыЗаписиЗадачи.Вставить("НовыйСтатус", ДополнительныеПараметры.НовыйСтатус);
	ПараметрыЗаписиЗадачи.Вставить("ИзменениеСтатусаЗадачиИзЗаявки");
	ПараметрыЗаписиЗадачи.Вставить("ВидОперации", Неопределено);
	ПараметрыЗаписиЗадачи.Вставить("Комментарий", Результат.Комментарий);
	ПараметрыЗаписиЗадачи.Вставить("ЕстьНезакрытыйПериодПриостановки", ДополнительныеПараметры.ЕстьНезакрытыйПериодПриостановки);
	ПараметрыЗаписиЗадачи.Вставить("Трудозатраты", Результат.Трудозатраты);
	ПараметрыЗаписиЗадачи.Вставить("ОбновитьДатыПоследнихИзменений");
				
	Если НовыйСтатус = КэшДополнительныхДанных.Статусы["Приостановлена"] Тогда
		ПараметрыЗаписиЗадачи.ВидОперации = КэшДополнительныхДанных.Статусы["Приостановлена"];		
	ИначеЕсли НовыйСтатус = КэшДополнительныхДанных.Статусы["ВРаботе"] Тогда		
		ПараметрыЗаписиЗадачи.ВидОперации = КэшДополнительныхДанных.Статусы["ВРаботе"];
	КонецЕсли;
		
	СменитьСтатусЗадачиНаСервере(ДополнительныеПараметры.Ссылка, ПараметрыЗаписиЗадачи);
	
	РазвернутьЗадачиСвязанныхФилиалов();
	РазвернутьДерево(СистемыРазработкиДерево, Элементы.СистемыРазработкиДерево);
	
	ОбновитьВидимостьИЗначениеГруппыЗаказчиков();
	
	Оповестить(СобытияОповещенияКлиент.ИмяСобытияИзмененияСтатусаЗадачи());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборИзМеню(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипЗначенияВыбранногоЭлемента = ТипЗнч(ВыбранныйЭлемент.Значение);
	
	Если ТипЗначенияВыбранногоЭлемента = Тип("Строка") Тогда
		Если ВыбранныйЭлемент.Значение = "НазначитьПоСистеме" Тогда
			ОткрытьФормуВыбораНазначенного(Элементы.СистемыРазработкиДерево.ТекущиеДанные);
		Иначе
			Команда = Новый Структура;
			Команда.Вставить("Имя", ВыбранныйЭлемент.Значение);
			
			УстановитьСтатусСистемыПоКнопке(Команда);
		КонецЕсли;
	Иначе
		СоздатьЗадачуПоСистеме(ВыбранныйЭлемент.Значение);
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для code review

&НаСервере
Процедура ЗаполнитьДеревоФилиалПодчиненныеЗадачи()
	
	УстановитьПредставлениеСтатуса();
	
	Если Объект.Черновик Тогда	
		Возврат;
	КонецЕсли;
	
	Куратор = РегистрыСведений.ЗначенияДополнительныхРеквизитовОбъектов.ЗначениеДополнительногоРеквизита(Объект.Ссылка, 
			ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.Куратор);
	
	ФилиалыЗадачиДерево.ПолучитьЭлементы().Очистить();	
	
	Если ЗначениеЗаполнено(ПараметрыСеанса.РольВОтделеIT) Тогда
		РольПользователяСтатус = ПараметрыСеанса.РольВОтделеIT;
	Иначе
		// Получаем необходимые реквизиты филиала.
		// Проверка нужна для того, чтобы не получать значения реквизитов для "пустой ссылки".
		// (если у пользователя не заполнен филиал).
		ФилиалПользователя = ПараметрыСеанса.Филиал;
		Если ЗначениеЗаполнено(ФилиалПользователя) Тогда
			СтруктураРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФилиалПользователя, "ТипФилиала, Руководитель");
		Иначе
			СтруктураРеквизиты = Новый Структура("ТипФилиала, Руководитель", 
				Перечисления.ТипыФилиалов.ПустаяСсылка(), Справочники.Пользователи.ПустаяСсылка());
		КонецЕсли;
		
		Если СтруктураРеквизиты.ТипФилиала = Перечисления.ТипыФилиалов.IT 
			ИЛИ СтруктураРеквизиты.ТипФилиала = Перечисления.ТипыФилиалов.QA Тогда		
			
			Если СтруктураРеквизиты.Руководитель = ПараметрыСеанса.ТекущийПользователь Тогда
				РольПользователяСтатус = Справочники.РолиПользователей.РуководительIT;
			Иначе
				РольПользователяСтатус = Справочники.РолиПользователей.Разработчик;
			КонецЕсли;
		Иначе	
			Если Объект.Автор = ПараметрыСеанса.ТекущийПользователь
				ИЛИ Куратор = ПараметрыСеанса.ТекущийПользователь Тогда
				
				РольПользователяСтатус = Справочники.РолиПользователей.Заказчик;
			Иначе
				РольПользователяСтатус = РольПользователя;
				Если НЕ НайтиЗадачиНазначенныеПользователю(Параметры.Ключ, Ложь) Тогда
					РольПользователяСтатус = Справочники.РолиПользователей.Заказчик;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст =	
	#Область ТекстЗапроса	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(СтруктураПодчиненности.Объект КАК Документ.Задача) КАК Задача,
	|	ДокументЗадача.Номер КАК Номер,
	|	ДокументЗадача.Статус КАК Статус,
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексКартинки,
	|	СтатусыОбъектов.Порядок КАК Порядок,
	|	ДокументЗадача.Наименование КАК Тема,
	|	ДокументЗадача.Назначена КАК Исполнитель,
	|	ЕСТЬNULL(ПланируемыеТрудозатраты.Трудозатраты, 0) КАК ПлановоеВремя,
	|	ДокументЗадача.Дата КАК Дата,
	|	ДокументЗадача.Филиал КАК Филиал,
	|	ДокументЗадача.КомандаРазработчиков КАК КомандаРазработчиков,
	|	ДокументЗадача.ОценкаStoryPoint КАК ОценкаStoryPoint,
	|	ДокументЗадача.ПроцентВыполнения КАК ПроцентВыполнения,
	|	ДокументЗадача.СистемаУчета КАК СистемаУчета
	|ПОМЕСТИТЬ ТаблицаПодчиненныхЗадач
	|ИЗ
	|	РегистрСведений.СтруктураПодчиненности КАК СтруктураПодчиненности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО ((ВЫРАЗИТЬ(СтруктураПодчиненности.Объект КАК Документ.Задача)) = ДокументЗадача.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (ДокументЗадача.Статус = СтатусыОбъектов.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
	|		ПО (ДокументЗадача.Ссылка = ПланируемыеТрудозатраты.Объект)
	|			И (ПланируемыеТрудозатраты.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
	|ГДЕ
	|	(ВЫРАЗИТЬ(СтруктураПодчиненности.Родитель КАК Документ.ЗаявкаНаРазработку)) = &Заявка
	|	И СтруктураПодчиненности.Объект ССЫЛКА Документ.Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПодчиненныхЗадач.Задача КАК Задача,
	|	МАКСИМУМ(ДокументСпринт.ДатаОкончания) КАК ДатаОкончанияСпринта
	|ПОМЕСТИТЬ ДатаОкончанияТекущегоСпринта
	|ИЗ
	|	ТаблицаПодчиненныхЗадач КАК ТаблицаПодчиненныхЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ПО ТаблицаПодчиненныхЗадач.Задача = СоставСпринтов.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|		ПО (СоставСпринтов.Спринт = ДокументСпринт.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПодчиненныхЗадач.Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатаОкончанияТекущегоСпринта.Задача КАК Задача,
	|	СоставСпринтов.Спринт КАК Спринт
	|ПОМЕСТИТЬ ТекущийСпринтЗадачи
	|ИЗ
	|	ДатаОкончанияТекущегоСпринта КАК ДатаОкончанияТекущегоСпринта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ПО ДатаОкончанияТекущегоСпринта.Задача = СоставСпринтов.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|		ПО (СоставСпринтов.Спринт = ДокументСпринт.Ссылка)
	|			И ДатаОкончанияТекущегоСпринта.ДатаОкончанияСпринта = ДокументСпринт.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПодчиненныхЗадач.Задача КАК Задача,
	|	СУММА(ЕСТЬNULL(Трудозатраты.Затрата, 0)) КАК Трудозатраты
	|ПОМЕСТИТЬ ТаблицаТрудозатрат
	|ИЗ
	|	ТаблицаПодчиненныхЗадач КАК ТаблицаПодчиненныхЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК Трудозатраты
	|		ПО ТаблицаПодчиненныхЗадач.Задача = Трудозатраты.Объект
	|			И (Трудозатраты.ITСтруктура)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПодчиненныхЗадач.Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПодчиненныхЗадач.Филиал КАК Филиал,
	|	ДокументЗаявка.ФинальныйСтатус КАК ФинальныйСтатус,
	|	МИНИМУМ(ТаблицаПодчиненныхЗадач.Порядок) КАК Порядок
	|ПОМЕСТИТЬ ПорядокСтатусаФилиала
	|ИЗ
	|	ТаблицаПодчиненныхЗадач КАК ТаблицаПодчиненныхЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ДокументЗаявка
	|		ПО (ДокументЗаявка.Ссылка = &Заявка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПодчиненныхЗадач.Филиал,
	|	ДокументЗаявка.ФинальныйСтатус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорядокСтатусаФилиала.Филиал КАК Филиал,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ПорядокСтатусаФилиала.ФинальныйСтатус <> ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ПустаяСсылка)
	|				ТОГДА ПорядокСтатусаФилиала.ФинальныйСтатус
	|			ИНАЧЕ ТаблицаПодчиненныхЗадач.Статус
	|		КОНЕЦ) КАК Статус
	|ПОМЕСТИТЬ СтатусыФилиала
	|ИЗ
	|	ПорядокСтатусаФилиала КАК ПорядокСтатусаФилиала
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПодчиненныхЗадач КАК ТаблицаПодчиненныхЗадач
	|		ПО (ТаблицаПодчиненныхЗадач.Филиал = ПорядокСтатусаФилиала.Филиал)
	|			И (ТаблицаПодчиненныхЗадач.Порядок = ПорядокСтатусаФилиала.Порядок)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокСтатусаФилиала.Филиал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПодчиненныхЗадач.Задача КАК Задача,
	|	ПРЕДСТАВЛЕНИЕ(ПричиныИзмененияСтатусаОбъектовСрезПоследних.ПричинаИзмененияСтатуса) КАК ПричинаИзмененияСтатуса
	|ИЗ
	|	ТаблицаПодчиненныхЗадач КАК ТаблицаПодчиненныхЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПричиныИзмененияСтатусаОбъектов.СрезПоследних(
	|				,
	|				ВЫРАЗИТЬ(Объект КАК Документ.Задача) В
	|					(ВЫБРАТЬ
	|						ТаблицаПодчиненныхЗадач.Задача КАК Задача
	|					ИЗ
	|						ТаблицаПодчиненныхЗадач)) КАК ПричиныИзмененияСтатусаОбъектовСрезПоследних
	|		ПО ТаблицаПодчиненныхЗадач.Задача = ПричиныИзмененияСтатусаОбъектовСрезПоследних.Объект
	|			И ТаблицаПодчиненныхЗадач.Статус = ПричиныИзмененияСтатусаОбъектовСрезПоследних.Статус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПодчиненныхЗадач.Задача КАК Ссылка,
	|	ТаблицаПодчиненныхЗадач.ИндексКартинки КАК ИндексКартинки,
	|	ТаблицаПодчиненныхЗадач.Тема КАК Тема,
	|	ТаблицаПодчиненныхЗадач.Номер КАК Номер,
	|	ТаблицаПодчиненныхЗадач.Филиал КАК Филиал,
	|	ТаблицаПодчиненныхЗадач.КомандаРазработчиков КАК КомандаРазработчиков,
	|	ТаблицаПодчиненныхЗадач.Статус КАК Статус,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаПодчиненныхЗадач.Статус) КАК ПредставлениеСтатуса,
	|	ТаблицаПодчиненныхЗадач.СистемаУчета КАК СистемаУчета,
	|	Филиалы.Наименование КАК НаименованиеФилиал,
	|	СтатусыФилиала.Статус КАК СтатусФилиал,
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексКартинкиФилиал,
	|	ВЫБОР
	|		КОГДА СтатусыФилиала.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаявкаОтклонена,
	|	ЕСТЬNULL(Пользователи.ФИО, """") КАК Исполнитель,
	|	ЕСТЬNULL(ТекущийСпринтЗадачи.Спринт, ЗНАЧЕНИЕ(Документ.Спринт.ПустаяСсылка)) КАК Спринт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НастройкиФилиалов.Значение, ЛОЖЬ) = ИСТИНА
	|			ТОГДА ТаблицаПодчиненныхЗадач.ОценкаStoryPoint
	|		ИНАЧЕ ТаблицаПодчиненныхЗадач.ПлановоеВремя
	|	КОНЕЦ КАК ОценкаТрудозатрат,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НастройкиФилиалов.Значение, ЛОЖЬ) = ИСТИНА
	|			ТОГДА ТаблицаПодчиненныхЗадач.ОценкаStoryPoint * (ТаблицаПодчиненныхЗадач.ПроцентВыполнения / 100)
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаТрудозатрат.Трудозатраты, 0)
	|	КОНЕЦ КАК ФактическиеТрудозатраты,
	|	ЕСТЬNULL(НастройкиФилиалов.Значение, ЛОЖЬ) КАК ОцениватьЗадачиВStoryPoint
	|ИЗ
	|	ТаблицаПодчиненныхЗадач КАК ТаблицаПодчиненныхЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО ТаблицаПодчиненныхЗадач.Филиал = Филиалы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатусыФилиала КАК СтатусыФилиала
	|		ПО ТаблицаПодчиненныхЗадач.Филиал = СтатусыФилиала.Филиал
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (СтатусыФилиала.Статус = СтатусыОбъектов.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиФилиалов КАК НастройкиФилиалов
	|		ПО (Филиалы.Ссылка = НастройкиФилиалов.Филиал)
	|			И (НастройкиФилиалов.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.ОцениватьЗадачиВStoryPoint))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ТаблицаПодчиненныхЗадач.Исполнитель = Пользователи.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекущийСпринтЗадачи КАК ТекущийСпринтЗадачи
	|		ПО ТаблицаПодчиненныхЗадач.Задача = ТекущийСпринтЗадачи.Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТрудозатрат КАК ТаблицаТрудозатрат
	|		ПО ТаблицаПодчиненныхЗадач.Задача = ТаблицаТрудозатрат.Задача
	|
	|УПОРЯДОЧИТЬ ПО
	|	Филиалы.Наименование,
	|	Номер
	|ИТОГИ ПО
	|	Филиал";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Заявка", Объект.Ссылка);
	Результат = Запрос.ВыполнитьПакет();
	РезультатЗапроса = Результат[Результат.ВГраница()];
		
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ПричиныИзменения = Результат[Результат.ВГраница() - 1].Выгрузить();
		ОписаниеТипаСтрока255 = ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(255);
		
		ТаблицаЗначенийСтатусы = Новый ТаблицаЗначений;
		ТаблицаЗначенийСтатусы.Колонки.Добавить("Статус", Новый ОписаниеТипов("СправочникСсылка.СтатусыОбъектов"));
		ТаблицаЗначенийСтатусы.Колонки.Добавить("НаименованиеСтатуса", ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(50));
		ТаблицаЗначенийСтатусы.Колонки.Добавить("Порядок", ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(10));
		ТаблицаЗначенийСтатусы.Колонки.Добавить("Идентификатор", ОписаниеТипаСтрока255);
		ТаблицаЗначенийСтатусы.Колонки.Добавить("ИмяПредопределенныхДанных", ОписаниеТипаСтрока255);
		
		// Признак, что хоть 1 задача в списке в статусе тестирование
		ЗадачиТребуютУчастия = Ложь;
		КоллекцияФилиалов = ФилиалыЗадачиДерево.ПолучитьЭлементы();
		
		ВыборкаФилиал = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаФилиал.Следующий() Цикл
			НовыйФилиал = КоллекцияФилиалов.Добавить();
			НовыйФилиал.Филиал = ВыборкаФилиал.Филиал;
			НовыйФилиал.ЭтоГруппа = Истина;
			
			СуммаОценкаТрудозатрат = 0;
			СуммаФактТрудозатраты = 0;
			
			КоллекцияЭлементовФилиал = НовыйФилиал.ПолучитьЭлементы();
			
			Выборка = ВыборкаФилиал.Выбрать();
			Пока Выборка.Следующий() Цикл       
				
				МассивПричин = Новый Массив;
				
				Для Каждого Строка Из ПричиныИзменения.НайтиСтроки(Новый Структура("Задача", Выборка.Ссылка)) Цикл
					МассивПричин.Добавить(Строка.ПричинаИзмененияСтатуса);
				КонецЦикла;
				
				ХранилищеСтатусовЗадачи = Новый Массив;
				
				СуммаОценкаТрудозатрат = СуммаОценкаТрудозатрат + Выборка.ОценкаТрудозатрат;
				СуммаФактТрудозатраты = СуммаФактТрудозатраты + Выборка.ФактическиеТрудозатраты;

				НомерЗадачиБезПрефикса = ОбщегоНазначения.ПолучитьНомерОбъектаБезПрефикса(Выборка.Ссылка, Выборка.Номер);
				
				НомерБезПрефикса = Формат(Число(НомерЗадачиБезПрефикса), "ЧГ=0");
				
				ПредставлениеЗадачи = СтрШаблон("%1. %2", НомерБезПрефикса, Выборка.Тема);				
				
				СтрокаТаблицы = КоллекцияЭлементовФилиал.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
				СтрокаТаблицы.ФилиалТема = ПредставлениеЗадачи;
				
				ОцениватьЗадачиВStoryPoint = Выборка.ОцениватьЗадачиВStoryPoint;
				
				Если ОцениватьЗадачиВStoryPoint Тогда
					ИсходнаяСтрока = "; %1 поинт;; %1 поинта; %1 поинтов; %1 поинта";
				Иначе
					ИсходнаяСтрока = "; %1 час;; %1 часа; %1 часов; %1 часа";
				КонецЕсли;
				
				ОценкаТрудозатрат = ПолучитьСтрокуСЧислом(ИсходнаяСтрока, Выборка.ОценкаТрудозатрат);
				СтрокаТаблицы.ОценкаТрудозатрат = СтрШаблон("План: %1", ОценкаТрудозатрат);
				ФактТрудозатрат = ПолучитьСтрокуСЧислом(ИсходнаяСтрока, Выборка.ФактическиеТрудозатраты);
				СтрокаТаблицы.ФактическиеТрудозатраты = СтрШаблон("Факт: %1", ФактТрудозатрат);
										
				Если МассивПричин.Количество() > 0 Тогда
					Шаблон = 
					"%1
					|%2";
					СтрокаТаблицы.ПредставлениеСтатуса = СтрШаблон(Шаблон, Выборка.ПредставлениеСтатуса,
						СтрСоединить(МассивПричин, ", "));
				КонецЕсли;
				
				НовыйФилиал.ФилиалТема = СтрШаблон("%1 - %2", Выборка.НаименованиеФилиал, Выборка.СтатусФилиал);
				НовыйФилиал.ИндексКартинки = Выборка.ИндексКартинкиФилиал;
				
				СтатусДляПроверки = РаботаСПроцессами.ПолучитьСсылкуНаСлужебныйСтатус(Выборка.Статус);
				ЗадачиТребуютУчастия = (ЗадачиТребуютУчастия ИЛИ (СтатусДляПроверки = Справочники.СтатусыОбъектов.Тестирование));
				
				ДоступныеПереходы = РаботаСПроцессами.ПолучитьСписокСтатусовДляПерехода(Выборка.Ссылка,
					Выборка.Статус, РольПользователяСтатус, Выборка.Филиал, Выборка.КомандаРазработчиков);
					
				Для Каждого Строка Из ДоступныеПереходы Цикл
					Идентификатор = Строка.Ссылка.УникальныйИдентификатор();
					Идентификатор = ОбщегоНазначенияКлиентСервер.СтрУникальныйИдентификатор(Идентификатор);
					
					Если Выборка.Статус <> Строка.Ссылка Тогда
						ХранилищеСтатусовЗадачи.Добавить(Идентификатор);
					КонецЕсли;
					
					СтатусВСписке = ТаблицаЗначенийСтатусы.Найти(Строка.Ссылка, "Статус");
					Если СтатусВСписке = Неопределено Тогда
						НоваяСтрока = ТаблицаЗначенийСтатусы.Добавить();
						НоваяСтрока.Статус = Строка.Ссылка;
						НоваяСтрока.НаименованиеСтатуса = Строка.Представление;
						НоваяСтрока.Порядок = Строка.Порядок;
						НоваяСтрока.Идентификатор = Идентификатор;
						НоваяСтрока.ИмяПредопределенныхДанных = Строка.ИмяПредопределенныхДанных;
						
						СтрокаИдентификатора = ИдентификаторыСтатусовЗадач.Добавить();
						СтрокаИдентификатора.Идентификатор = Идентификатор;
						СтрокаИдентификатора.Статус = Строка.Ссылка;
					КонецЕсли;
				КонецЦикла;
				
				СтрокаТаблицы.ХранилищеСтатусовЗадачи = СтрСоединить(ХранилищеСтатусовЗадачи, ";");
			КонецЦикла;	
			
			Если ОцениватьЗадачиВStoryPoint Тогда
				НовыйФилиал.ФилиалТема = НовыйФилиал.ФилиалТема 
					+ " (План: " + СуммаОценкаТрудозатрат + " п. Факт: " + СуммаФактТрудозатраты + " п.)";
			Иначе
				НовыйФилиал.ФилиалТема = НовыйФилиал.ФилиалТема 
					+ " (План: " + СуммаОценкаТрудозатрат + " ч. Факт: " + СуммаФактТрудозатраты + " ч.)";
			КонецЕсли;
				
		КонецЦикла;
		
		// Изменяем заголовок таблицы связанные задачи
		Если ЗадачиТребуютУчастия Тогда
			Элементы.НадписьЗадачи.Заголовок = "ЗАДАЧИ ПО ФИЛИАЛАМ (ТРЕБУЕТСЯ УЧАСТИЕ)";
			Элементы.НадписьЗадачи.ЦветТекста = WebЦвета.Красный;
			Элементы.НадписьЗадачи.ЦветРамки = WebЦвета.Красный;
		Иначе
			Элементы.НадписьЗадачи.Заголовок = "ЗАДАЧИ ПО ФИЛИАЛАМ";
			Элементы.НадписьЗадачи.ЦветТекста = Новый Цвет;
			Элементы.НадписьЗадачи.ЦветРамки = Новый Цвет;
		КонецЕсли;
		
		// Добавляем команды и кнопки из списка статусов
		ТаблицаЗначенийСтатусы.Сортировать("Порядок");
		Для Каждого Строка Из ТаблицаЗначенийСтатусы Цикл		
			ИмяСтатуса = Строка.ИмяПредопределенныхДанных;
			
			Попытка
				Картинка = БиблиотекаКартинок["Статус" + ИмяСтатуса];
			Исключение
				Картинка = Новый Картинка;
			КонецПопытки;
			
			ИмяКоманды = "УстановитьСтатусЗадачи_" + Строка.Идентификатор;
			КомандаФормы = Команды.Найти(ИмяКоманды);
			Если КомандаФормы = Неопределено Тогда
				КомандаФормы = Команды.Добавить(ИмяКоманды);
				КомандаФормы.Действие = "УстановитьСтатусЗадачиПоКнопке";
			КонецЕсли;
			
			ИмяКнопки = "КнопкаСтатусаЗадачи_" + Строка.Идентификатор;
			НоваяКнопка = Элементы.Найти(ИмяКнопки);
			Если НоваяКнопка = Неопределено Тогда
				НоваяКнопка = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), Элементы.ПодменюУстановитьСтатус);
				НоваяКнопка.Заголовок = Строка.НаименованиеСтатуса;
				НоваяКнопка.ИмяКоманды = КомандаФормы.Имя;
				НоваяКнопка.Картинка = Картинка;
				НоваяКнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;
			КонецЕсли;		
		КонецЦикла;		
	КонецЕсли;	
	
	// Удалим программно созданные команды и элементы формы
	Если НЕ ПустаяСтрока(ХранилищеСтатусов) Тогда
		МассивСтатусов = СтрРазделить(ХранилищеСтатусов, ",", Ложь);
		Для Н = 0 По МассивСтатусов.ВГраница() Цикл
			Элементы.Удалить(Элементы["КнопкаСтатуса_" + МассивСтатусов[Н]]);
			Команды.Удалить(Команды.Найти("УстановитьСтатус_" + МассивСтатусов[Н]));
		КонецЦикла;
		
		ХранилищеСтатусов = "";
	КонецЕсли;
	
	// Если по заявке уже есть задачи или мин. статус заявки НЕ "На доработку" изменять содержимое заявки запрещено
	СтатусЗаявки = ОбщегоНазначения.ПолучитьМинимальныйСтатусЗаявки(Объект.Ссылка);
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	ЗаказчикДорабатываетЗаявку = 
		((СтатусЗаявки = Справочники.СтатусыОбъектов.НаДоработку ИЛИ СтатусЗаявки = Справочники.СтатусыОбъектов.Новый)
		И (Объект.Автор = ТекущийПользователь ИЛИ Куратор = ТекущийПользователь));
	
	ТолькоПросмотрОписания = НЕ (ФилиалыЗадачиДерево.ПолучитьЭлементы().Количество() = 0 ИЛИ ЗаказчикДорабатываетЗаявку);
	
	ИнтеграцияДополнительныхПодсистем.СоздатьЗаполнитьКолонкуНомерИнцидентаJira(ЭтотОбъект, "ФилиалыЗадачиДерево", 
		Элементы.ФилиалыЗадачиДеревоГруппаТема);
									
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВопросИзмененияПоляЧерновик(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Объект.Черновик = Истина;
	Иначе
		Элементы.ДобавитьФактическиеТрудозатраты.Доступность = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Элементы.ПредоставитьДоступ.Видимость = Объект.Черновик;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбъектПереданнымиПараметрами()
	
	Если Параметры.Свойство("Назначение") Тогда
		Объект.Назначение = Параметры.Назначение;
	КонецЕсли;
	
	Если Параметры.Свойство("Направление") Тогда
		Объект.Направление = Параметры.Направление;
		
		//очищаем если группа заполнена из настроек
		Для Каждого Строка Из Объект.СистемыРазработки Цикл
			Строка.ГруппаЗаказчиков = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("Система") Тогда
		Объект.СистемыРазработки.Очистить();
		Объект.СистемыРазработки.Добавить().Система = Параметры.Система;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКомментарийСтатуса(Знач ДополнительныеПараметры, Знач КомментарийОбязателен)

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьПрисвоениеСтатуса", ЭтотОбъект, ДополнительныеПараметры);	
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Объект", Объект.Ссылка);
	ПараметрыОткрытияФормы.Вставить("Статус", ДополнительныеПараметры.Статус);
	ПараметрыОткрытияФормы.Вставить("КомментарийОбязателен", КомментарийОбязателен);
	
	ОткрытьФорму("ОбщаяФорма.КомментарийСтатуса", ПараметрыОткрытияФормы, ЭтотОбъект, УникальныйИдентификатор, , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
КонецПроцедуры
	
&НаКлиенте
Процедура ОткрытьФормуКомментарийСтатусаПоСистеме(Знач Система, Знач СтатусПеревода)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Система", Система);
	ПараметрыОповещения.Вставить("Статус", СтатусПеревода);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьДобавлениеКомментарияПриСменеСтатусаПоСистеме", 
		ЭтотОбъект, ПараметрыОповещения); 		
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Объект", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Система", Система);
	ПараметрыОткрытия.Вставить("Статус", СтатусПеревода);
	ПараметрыОткрытия.Вставить("КомментарийОбязателен", Истина);
	
	ОткрытьФорму("ОбщаяФорма.КомментарийСтатуса", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор, , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ПеревестиПодчиненныеЗадачиНаРассмотрение(Знач МассивЗадач, Знач ПараметрыЗаписиЗадачи)
	
	ПараметрыЗаписиЗаявки = Новый Структура("Комментарий", "");
	
	НачатьТранзакцию();
	Попытка
		Для Каждого Задача Из МассивЗадач Цикл
			ЗадачаОбъект = Задача.ПолучитьОбъект();
		
			ЗадачаОбъект.ДополнительныеСвойства.Вставить("ОбновитьДатыПоследнихИзменений");
			ЗадачаОбъект.ДополнительныеСвойства.Вставить("ПроверкаИзмененияСтатусаПередЗаписью", ПараметрыЗаписиЗадачи);
			ЗадачаОбъект.Записать();
		КонецЦикла;

		Записать(ПараметрыЗаписиЗаявки);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Произошла ошибка при записи заявки.");
	КонецПопытки;
	
	ЗаполнитьДеревоФилиалПодчиненныеЗадачи();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтатусЗаявки(Знач Ссылка)
	
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	0 КАК ПриоритетСтроки,
	|	МИНИМУМ(СтатусыЗаявокПоСистемам.Статус.Порядок) КАК СтатусПорядок
	|ПОМЕСТИТЬ СтатусыМинимимальныйПриоритет
	|ИЗ
	|	РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|ГДЕ
	|	СтатусыЗаявокПоСистемам.Заявка = &Объект
	|	И СтатусыЗаявокПоСистемам.Система В(&Системы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	МинимальныеСтатусыЗаявок.Статус.Порядок
	|ИЗ
	|	РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
	|ГДЕ
	|	МинимальныеСтатусыЗаявок.Заявка = &Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтатусыОбъектов.Ссылка КАК Ссылка,
	|	СтатусыОбъектов.Наименование КАК Статус,
	|	СтатусыОбъектов.ИмяКартинкиВБиблиотеке КАК ИмяПредопределенныхДанных,
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексКартинки
	|ИЗ
	|	СтатусыМинимимальныйПриоритет КАК СтатусыМинимимальныйПриоритет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО СтатусыМинимимальныйПриоритет.СтатусПорядок = СтатусыОбъектов.Порядок
	|ГДЕ
	|	СтатусыОбъектов.Предопределенный
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыМинимимальныйПриоритет.ПриоритетСтроки";
	
	Запрос.УстановитьПараметр("Объект", Ссылка);
	Запрос.УстановитьПараметр("Системы", ПараметрыСеанса.РазрабатываемыеСистемы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат.Вставить("Статус", Выборка.Ссылка);
		Результат.Вставить("ПредставлениеСтатуса", Выборка.Статус);
		Результат.Вставить("ИмяПредопределенныхДанных", Выборка.ИмяПредопределенныхДанных);
		Результат.Вставить("ИндексКартинки", Выборка.ИндексКартинки);
	Иначе
		Результат.Вставить("Статус", Справочники.СтатусыОбъектов.Новый);
		Результат.Вставить("ПредставлениеСтатуса", Строка(Справочники.СтатусыОбъектов.Новый));
		Результат.Вставить("ИмяПредопределенныхДанных", "Новый");
		Результат.Вставить("ИндексКартинки", Справочники.СтатусыОбъектов.Новый.ИндексКартинки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьСтрокуСЧислом(ИсходнаяСтрока, Значение)
	
	Возврат СтрокаСЧислом(ИсходнаяСтрока, Значение, ВидЧисловогоЗначения.Количественное, "ЧН=0");
	
КонецФункции

&НаСервере
Функция ПроверитьТекущийСтатусЗадачи(Знач Задача, Знач СтатусЗадачи)
	
	Результат = Новый Структура("СтатусыСовпадают, ТекстСообщения", Истина, "");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Задача.Статус <> &СтатусЗадачи
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусИзменен,
	|	Задача.ТребуетсяПубликация КАК ТребуетсяПубликация
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	Задача.Ссылка = &Задача";
	
	Запрос.УстановитьПараметр("Задача", Задача);
	Запрос.УстановитьПараметр("СтатусЗадачи", СтатусЗадачи);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.СтатусИзменен Тогда
			ЗаполнитьДеревоФилиалПодчиненныеЗадачи();
			Результат.СтатусыСовпадают = Ложь;
		 	Результат.ТекстСообщения = "Статус задачи был изменен. Данные автоматически обновлены";
		КонецЕсли;
		
		Результат.Вставить("ТребуетсяПубликация", Выборка.ТребуетсяПубликация);
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьВозможностьОтклоненияЗаявки(Знач Заявка, Знач АвторЗаявки)
	
	Результат = Новый Структура("ДвиженияСтатусовПоСистемам, ВсеЗадачиРешены", Ложь, Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(СистемыЗаявокНазначеныеПользователю.ТекущийИсполнитель, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) <> &АвторЗаявки
	|					И НЕ СтатусыЗаявокПоСистемам.Статус В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДвиженияСтатусовПоСистемам,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(Задача.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)) <> ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)
	|					И ЕСТЬNULL(Задача.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)) <> ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ВсеЗадачиРешены
	|ИЗ
	|	РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураПодчиненности КАК СтруктураПодчиненности
	|		ПО (СтатусыЗаявокПоСистемам.Заявка = (ВЫРАЗИТЬ(СтруктураПодчиненности.Родитель КАК Документ.ЗаявкаНаРазработку)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задача КАК Задача
	|		ПО ((ВЫРАЗИТЬ(СтруктураПодчиненности.Объект КАК Документ.Задача)) = Задача.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СистемыЗаявокНазначеныеПользователю КАК СистемыЗаявокНазначеныеПользователю
	|		ПО СтатусыЗаявокПоСистемам.Заявка = СистемыЗаявокНазначеныеПользователю.Заявка
	|			И СтатусыЗаявокПоСистемам.Система = СистемыЗаявокНазначеныеПользователю.Система
	|ГДЕ
	|	СтатусыЗаявокПоСистемам.Заявка = &Заявка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатусыЗаявокПоСистемам.Заявка";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("АвторЗаявки", АвторЗаявки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(Результат, Выборка); 	
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура УстановитьВидимостьПоляЧерновик()
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	МассивПользователей = РегистрыСведений.ДоступныеЧерновики.ПолучитьСписокПользователей(Объект.Ссылка);
	РазрешенПросмотрЧерновика = (МассивПользователей.Найти(ТекущийПользователь) <> Неопределено);
	ПодчиненныеЭлементыДерева = ФилиалыЗадачиДерево.ПолучитьЭлементы();
	
	ЭтоАвтор = (Объект.Автор = ТекущийПользователь);
	НетЗадач = (ПодчиненныеЭлементыДерева.Количество() = 0);
	ЭтоНоваяЗаявка = Параметры.Ключ.Пустая();
				
	Если ЭтоНоваяЗаявка Тогда
		Элементы.ПредоставитьДоступ.Видимость = Ложь;
		Элементы.Черновик.Доступность = Истина;
	Иначе 
		СтатусЗаявки = ПолучитьСтатусЗаявки(Объект.Ссылка);
		Если ЭтоАвтор И (Объект.Черновик ИЛИ НетЗадач) И СтатусЗаявки.Статус = Справочники.СтатусыОбъектов.Новый Тогда
			Элементы.ПредоставитьДоступ.Видимость = Объект.Черновик;
			Элементы.Черновик.Доступность = Истина;
		Иначе
			Элементы.ПредоставитьДоступ.Видимость = Ложь;
			Элементы.Черновик.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ОформлениеСвойстваЧерновик.Видимость = Объект.Черновик ИЛИ Элементы.Черновик.Доступность;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКнопкиСоздатьНаОсновании(Знач СтатусЗаявки = Неопределено)
	
	ПроверяемыйСтатусЗаявки = ?(ЗначениеЗаполнено(СтатусЗаявки), СтатусЗаявки, Объект.ФинальныйСтатус); 
	
	Если НЕ ПроверяемыйСтатусЗаявки.Пустая() 
		И ПроверяемыйСтатусЗаявки = Справочники.СтатусыОбъектов.Отклонен Тогда
		Элементы.СоздатьЗадачу.Видимость = Ложь;
	Иначе
		Элементы.СоздатьЗадачу.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКоличествоПодчиненныхЗадач() Экспорт
	
	КоличествоПодчиненныхЗадач = ОбновитьКоличествоПодчиненныхЗадачСервер(Объект.Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьКоличествоПодчиненныхЗадачСервер(Ссылка)  
	
	Возврат Документы.ЗаявкаНаРазработку.КоличествоПодчиненныхЗадач(Ссылка);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОписаниеНазначенияОбъектов()
	
	ИнтерфейсПриложенияКлиент.ОткрытьОписаниеНазначенияОбъектов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНовыеКомментарии() Экспорт
	
	ШаблонИмениКнопки = ПанельНавигацииКлиентСервер.ШаблонИмениКнопки();	
	ИмяКоманды = СтрШаблон(ШаблонИмениКнопки, "Комментарии");
	
	ПанельНавигацииКлиент.НажатиеВнеПанели(ЭтотОбъект, ИмяКоманды);
	
	Если КоличествоНовыхКомментариев > 0 Тогда
		Оповестить("Документ.ЗаявкаНаРазработку.Форма.ФормаДокумента.ОткрытьНовыеКомментарии");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНовыеИзменения() Экспорт
	
	ШаблонИмениКнопки = ПанельНавигацииКлиентСервер.ШаблонИмениКнопки();	
	ИмяКоманды = СтрШаблон(ШаблонИмениКнопки, "История");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЧислоПрочихИзменений", ЧислоПрочихИзменений);
	ДополнительныеПараметры.Вставить("ЧислоВажныхИзменений", ЧислоВажныхИзменений);
	
	ПанельНавигацииКлиент.НажатиеВнеПанели(ЭтотОбъект, ИмяКоманды, ДополнительныеПараметры);
		
	Оповестить("Документ.ЗаявкаНаРазработку.Форма.ФормаДокумента.ОткрытьНовыеИзменения");	
		
КонецПроцедуры

// Стандартное событие возникающее при переключении с одной страницы на другую
//
// Параметры:
//  Элемент			 - ГруппаФормы - Страницы формы
//  ТекущаяСтраница	 - ГруппаФормы - Текущая страница формы 
//
&НаКлиенте
Процедура СтраницыДокументаПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	
	ДополнительныеСвойства.Вставить("Черновик", Объект.Черновик);
	
	РедакторОписанияКлиент.ПриСменеСтраницы(ЭтотОбъект, ПредыдущаяОткрытаяВкладка, Элементы.СтраницаОписание);
	УчетТрудозатратКлиент.ПриПереключенииСтраницПанели(ЭтотОбъект, Элементы.СтраницыДокумента, ДополнительныеСвойства);	
	
	ПредыдущаяОткрытаяВкладка = Элементы.СтраницыДокумента.ТекущаяСтраница;

КонецПроцедуры

&НаСервере
Процедура СменитьСтатусЗадачиНаСервере(Знач Ссылка, Знач ПараметрыЗаписи)
	
	ИзменитьСтатусЗадачиНаСервере(Ссылка, ПараметрыЗаписи);
	ЗаполнитьСистемыРазработкиДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить("Проект", "Проект");
	СписокТипов.Добавить("ВнутреннееЗадание", "Внутреннее задание");
	
	Если ТипЗнч(Объект.ОбъектОснование) = Тип("Неопределено")
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ОбъектОснование) Тогда
		АктивныйЭлемент = Неопределено;
	Иначе
		ТипОбъектаОснования = СтрЗаменить(ТРег(ТипЗнч(Объект.ОбъектОснование)), " ", "");
		АктивныйЭлемент = СписокТипов.НайтиПоЗначению(ТипОбъектаОснования);
	КонецЕсли;	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборТипаОбъектаОснования", ЭтотОбъект);
	СписокТипов.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выбор типа данных", АктивныйЭлемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборТипаОбъектаОснования(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия 	= Новый Структура("ФиксированныеНастройки", Новый НастройкиКомпоновкиДанных);
	ОписаниеОповещения 	= Новый ОписаниеОповещения("ОбработатьВыборОбъектаОснования", ЭтотОбъект);
	
	ОтборТекущийОбъект = ПараметрыОткрытия.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборТекущийОбъект.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборТекущийОбъект.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка");
	ОтборТекущийОбъект.ПравоеЗначение = Объект.Ссылка;
	ОтборТекущийОбъект.Использование  = Истина;
	
	МассивСтатусов = ИнтерфейсПриложенияКлиент.ПолучитьОграниченияПоСтатусамДляПроекта(КэшДополнительныхДанных.Статусы, Ложь);
	
	ОтборСтатус = ПараметрыОткрытия.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборСтатус.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборСтатус.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");
	ОтборСтатус.ПравоеЗначение = МассивСтатусов;
	ОтборСтатус.Использование  = Истина;

	Если ВыбранныйЭлемент.Значение = "Проект" Тогда		
		ОткрытьФорму("Справочник.Проекты.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект, , , , 
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	ИначеЕсли ВыбранныйЭлемент.Значение = "ВнутреннееЗадание" Тогда	
		ОткрытьФорму("Документ.ВнутреннееЗадание.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборОбъектаОснования(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПодчиненные = (КоличествоПодчиненныхЗадач > 0) 
		ИЛИ (ФилиалыЗадачиДерево.ПолучитьЭлементы().Количество() > 0);
	
	Результат = ОбработатьВыборОбъектаОснованияНаСервере(ЕстьПодчиненные, РезультатЗакрытия, Объект.ВидПроцесса);
	
	Если НЕ Результат.Успешно Тогда
		Объект.ОбъектОснование = Неопределено;
		ПоказатьПредупреждение( , Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Объект.ОбъектОснование = РезультатЗакрытия;
	Модифицированность = Истина;
	
	НаправлениеИзменено = ПриИзмененииОбъектОснования();
	
	Если НаправлениеИзменено Тогда
		НаправлениеПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПриИзмененииОбъектОснования() 
	
	НаправлениеИзменено = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ОбъектОснование) Тогда
		ДанныеОснования = ОбщегоНазначенияВызовСервера.ПолучитьДанныеОбъектаОснования(Объект.ОбъектОснование);
		
		// Заполнение юридического лица
		ЮридическоеЛицоОснования = ДанныеОснования.ЮридическоеЛицо;
		
		Если ЗначениеЗаполнено(ЮридическоеЛицоОснования)
			И Элементы.ЮридическоеЛицо.СписокВыбора.НайтиПоЗначению(ЮридическоеЛицоОснования) <> Неопределено Тогда
			
			Объект.ЮридическоеЛицо = ЮридическоеЛицоОснования;
		КонецЕсли;
		
		// Заполнение вида процесса
		Если Элементы.ВидПроцесса.Видимость 
			И ЗначениеЗаполнено(ДанныеОснования.ВидПроцесса) 
			И НЕ КоличествоПодчиненныхЗадач > 0 Тогда
			
			Объект.ВидПроцесса = ДанныеОснования.ВидПроцесса;
		КонецЕсли;
				
		Если ЗначениеЗаполнено(ДанныеОснования.Продукт) И Объект.Продукт <> ДанныеОснования.Продукт Тогда
			Объект.Продукт = ДанныеОснования.Продукт;
			НаправлениеИзменено = ЗаполнитьДанныеПоПродукту();	
		КонецЕсли;
		
		Элементы.Продукт.ТолькоПросмотр = ЗначениеЗаполнено(ДанныеОснования.Продукт);		
	Иначе
		Элементы.Продукт.ТолькоПросмотр = Ложь;  
	КонецЕсли;  
	
	ОбновитьДоступностьВидаПроцесса(); 	
	
	Возврат НаправлениеИзменено;

КонецФункции

&НаСервереБезКонтекста
Функция ОбработатьВыборОбъектаОснованияНаСервере(Знач ЕстьПодчиненные, Знач ОбъектОснование, Знач ВидПроцесса)
	
	Результат = Новый Структура("Успешно, ТекстОшибки", Истина, "");
		
	ТипОснования = ТипЗнч(ОбъектОснование);
	
	Если ТипЗнч(ОбъектОснование) <> Тип("СправочникСсылка.Проекты") Тогда
		ВидПроцессаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектОснование, "ВидПроцесса");
		
		Если ЗначениеЗаполнено(ВидПроцесса) И ЗначениеЗаполнено(ВидПроцессаОснования) 
			И ВидПроцесса <> ВидПроцессаОснования 
			И ЕстьПодчиненные > 0 Тогда
			
			Результат.Успешно = Ложь;
			Результат.ТекстОшибки = "Вид процесса объекта основания должен соответствовать виду процесса текущего объекта";
			Возврат Результат;
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

// Функция - Получает руководителя переданного направления
//
// Параметры:
//  Направление	 - 	 СправочникСсылка.НаправленияРазработки - Направление, руководителя которого требуется получить 
// 
// Возвращаемое значение:
//   СправочникСсылка.Пользователи 
//
&НаСервереБезКонтекста 
Функция ПолучитьРуководителяНаправления(Знач Направление)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаправленияРазработкиОтветственные.Сотрудник КАК Руководитель
	|ИЗ
	|	Справочник.НаправленияРазработки.Ответственные КАК НаправленияРазработкиОтветственные
	|ГДЕ
	|	НаправленияРазработкиОтветственные.Ссылка = &Направление
	|	И НаправленияРазработкиОтветственные.Руководитель = ИСТИНА";
	
	Запрос.УстановитьПараметр("Направление", Направление);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Руководитель = Выборка.Руководитель;
	Иначе
		Руководитель = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Руководитель;
	
КонецФункции	

&НаКлиенте
Процедура ОткрытьЗадачу()
	
	ТекущиеДанные = Элементы.ФилиалыЗадачиДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Ссылка);
	ОткрытьФорму("Документ.Задача.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСистемыРазработкиДерево()

	СтрокиСистемыРазработкиДерево = СистемыРазработкиДерево.ПолучитьЭлементы();	
	СтрокиСистемыРазработкиДерево.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ЗаявкаНаРазработкуСистемыРазработки.НомерСтроки КАК НомерСтроки,
	|	ЗаявкаНаРазработкуСистемыРазработки.Система КАК Система,
	|	ЗаявкаНаРазработкуСистемыРазработки.ГруппаЗаказчиков КАК ГруппаЗаказчиков,
	|	ЕСТЬNULL(СтатусыЗаявокПоСистемам.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый)) КАК Статус,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(Задача.Ссылка) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьЗадачи
	|ПОМЕСТИТЬ СистемыРазработки
	|ИЗ
	|	Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ЗаявкаНаРазработкуСистемыРазработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|		ПО (СтатусыЗаявокПоСистемам.Заявка = ЗаявкаНаРазработкуСистемыРазработки.Ссылка)
	|			И (СтатусыЗаявокПоСистемам.Система = ЗаявкаНаРазработкуСистемыРазработки.Система)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задача КАК Задача
	|		ПО ЗаявкаНаРазработкуСистемыРазработки.Ссылка = Задача.ОбъектОснование
	|			И ЗаявкаНаРазработкуСистемыРазработки.Система = Задача.СистемаУчета
	|ГДЕ
	|	ЗаявкаНаРазработкуСистемыРазработки.Ссылка = &Заявка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкаНаРазработкуСистемыРазработки.НомерСтроки,
	|	ЗаявкаНаРазработкуСистемыРазработки.Система,
	|	ЗаявкаНаРазработкуСистемыРазработки.ГруппаЗаказчиков,
	|	ЕСТЬNULL(СтатусыЗаявокПоСистемам.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОчередиЗаявок.КлючОчередиОбъекта КАК КлючОчереди,
	|	ОчередиЗаявок.Порядок КАК Порядок,
	|	ОчередиЗаявок.Зафиксирован КАК Зафиксирован,
	|	КлючОчереди.ВидОчереди КАК ВидОчереди,
	|	КлючОчереди.Система КАК Система
	|ПОМЕСТИТЬ ОчередьЗаявок
	|ИЗ
	|	РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО ОчередиЗаявок.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|			И (КлючОчереди.ВидОчереди В (ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистемаГруппаЗаказчиков), ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Продукт), ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ПродуктСистема)))
	|ГДЕ
	|	ОчередиЗаявок.Заявка = &Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СистемыРазработки.Система КАК Система,
	|	СистемыРазработки.ГруппаЗаказчиков КАК ГруппаЗаказчиков,
	|	СистемыРазработки.Статус КАК Статус,
	|	СистемыРазработки.ЕстьЗадачи КАК ЕстьЗадачи,
	|	СистемыУчета.Наименование КАК СистемаПредставление,
	|	ЕСТЬNULL(ГруппыЗаказчиковНаправлений.Наименование, """") КАК ГруппаЗаказчиковПредставление,
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексКартинки,
	|	ЕСТЬNULL(ОчередьЗаявок.ВидОчереди, ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ПустаяСсылка)) КАК ВидОчереди,
	|	ЕСТЬNULL(ОчередьЗаявок.КлючОчереди, ЗНАЧЕНИЕ(Справочник.КлючОчереди.ПустаяСсылка)) КАК КлючОчереди,
	|	ЕСТЬNULL(ОчередьЗаявок.Порядок, 0) КАК Порядок,
	|	ЕСТЬNULL(ОчередьЗаявок.Порядок, 0) КАК ПорядокВОчереди,
	|	ЕСТЬNULL(ОчередьЗаявок.Зафиксирован, ЛОЖЬ) КАК ПорядокЗафиксирован,
	|	ЕСТЬNULL(СистемыЗаявокНазначеныеПользователю.Филиал, ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК Филиал,
	|	ЕСТЬNULL(СистемыЗаявокНазначеныеПользователю.ТекущийИсполнитель, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Пользователь,
	|	ЕСТЬNULL(Филиалы.Наименование, """") КАК ФилиалПредставление,
	|	ЕСТЬNULL(Пользователи.ФИО, """") КАК ПользовательПредставление
	|ИЗ
	|	СистемыРазработки КАК СистемыРазработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СистемыУчета КАК СистемыУчета
	|		ПО (СистемыУчета.Ссылка = СистемыРазработки.Система)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (СтатусыОбъектов.Ссылка = СистемыРазработки.Статус)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыЗаказчиковНаправлений КАК ГруппыЗаказчиковНаправлений
	|		ПО (ГруппыЗаказчиковНаправлений.Ссылка = СистемыРазработки.ГруппаЗаказчиков)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОчередьЗаявок КАК ОчередьЗаявок
	|		ПО (ВЫБОР
	|				КОГДА ОчередьЗаявок.Система <> ЗНАЧЕНИЕ(Справочник.СистемыУчета.ПустаяСсылка)
	|					ТОГДА ОчередьЗаявок.Система = СистемыРазработки.Система
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СистемыЗаявокНазначеныеПользователю КАК СистемыЗаявокНазначеныеПользователю
	|		ПО (СистемыЗаявокНазначеныеПользователю.Заявка = &Заявка)
	|			И СистемыРазработки.Система = СистемыЗаявокНазначеныеПользователю.Система
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО (СистемыЗаявокНазначеныеПользователю.Филиал = Филиалы.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (СистемыЗаявокНазначеныеПользователю.ТекущийИсполнитель = Пользователи.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СистемыРазработки.НомерСтроки
	|ИТОГИ
	|	МИНИМУМ(ГруппаЗаказчиков),
	|	МИНИМУМ(Статус),
	|	МИНИМУМ(ЕстьЗадачи),
	|	МИНИМУМ(СистемаПредставление),
	|	МИНИМУМ(ГруппаЗаказчиковПредставление),
	|	МИНИМУМ(ИндексКартинки),
	|	МИНИМУМ(ВидОчереди),
	|	МИНИМУМ(КлючОчереди),
	|	МИНИМУМ(Порядок),
	|	МИНИМУМ(ПорядокВОчереди),
	|	МИНИМУМ(ПорядокЗафиксирован),
	|	МИНИМУМ(Пользователь),
	|	МИНИМУМ(ФилиалПредставление),
	|	МИНИМУМ(ПользовательПредставление)
	|ПО
	|	Система,
	|	Филиал";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Заявка", Объект.Ссылка);	
	
	ВыборкаСистема = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	Пока ВыборкаСистема.Следующий() Цикл
		НоваяСтрокаСистема = СтрокиСистемыРазработкиДерево.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСистема, ВыборкаСистема, , "Филиал, Пользователь");
		
		НоваяСтрокаСистема.ЭтоСтрокаСистема = Истина;
		НоваяСтрокаСистема.СистемаСохранена = Истина;
		
		ВыборкаФилиал = ВыборкаСистема.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаФилиал.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаФилиал.Филиал) Тогда
				НоваяСтрокаФилиал = НоваяСтрокаСистема.ПолучитьЭлементы().Добавить();	
				ЗаполнитьЗначенияСвойств(НоваяСтрокаФилиал, ВыборкаФилиал, "Система, Статус, Филиал, Пользователь, ЕстьЗадачи");
				
				НоваяСтрокаФилиал.ИндексКартинки = 99; // Сброс картинки статуса для строки назначенного
				
				Если ЗначениеЗаполнено(ВыборкаФилиал.Пользователь) Тогда
					НоваяСтрокаФилиал.Назначена = СтрШаблон("%1, %2", 
						ВыборкаФилиал.ФилиалПредставление, ВыборкаФилиал.ПользовательПредставление);
				Иначе
					НоваяСтрокаФилиал.Назначена = ВыборкаФилиал.ФилиалПредставление;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла; 
		
КонецПроцедуры

&НаКлиенте
Функция КоличествоНазначенныхПользователей(Знач ТекущиеДанные)

	КоличествоПользователей = 0;

	Если ТекущиеДанные.ЭтоСтрокаСистема Тогда
		СтрокиНазначенных = ТекущиеДанные.ПолучитьЭлементы();
	Иначе
		СтрокиНазначенных = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
	КонецЕсли;
	
	КоличествоФилиалов = СтрокиНазначенных.Количество();
			
	Для Каждого Строка Из СтрокиНазначенных Цикл
		Если ЗначениеЗаполнено(Строка.Пользователь) Тогда 
			КоличествоПользователей = КоличествоПользователей + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("Филиалы, Пользователи", КоличествоФилиалов, КоличествоПользователей);
		
КонецФункции

&НаКлиенте
Процедура НастроитьГиперссылкиНазначенияПоСистеме()
	
	Статусы = КэшДополнительныхДанных.Статусы;
	ДоступныеДляНазначенияСистемы = КэшДополнительныхДанных.ДоступныеДляНазначенияСистемы;

	Для Каждого СтрокаСистемы Из СистемыРазработкиДерево.ПолучитьЭлементы() Цикл
		СтрокаСистемы.ВозможностьНазначать = Ложь;	
		РазрешеноРаботатьССистемой = (ДоступныеДляНазначенияСистемы.Получить(СтрокаСистемы.Система) = Истина);
		
		Если НЕ СтрокаСистемы.ЕстьЗадачи Тогда
			Если СтрокаСистемы.Статус = Статусы.Получить("Новый") 
				ИЛИ СтрокаСистемы.Статус = Статусы.Получить("Рассмотрение")
				ИЛИ СтрокаСистемы.Статус = Статусы.Получить("РевьюТребований")
				ИЛИ СтрокаСистемы.Статус = Статусы.Получить("Рассмотрен")
				ИЛИ СтрокаСистемы.Статус = Статусы.Получить("Проработка") Тогда
				
				ПоСистемеКорректныйСтатус = Истина;
			Иначе
				ПоСистемеКорректныйСтатус = Ложь;
			КонецЕсли;
					
			СтрокаСистемы.ВозможностьНазначать = (РазрешеноРаботатьССистемой И ПоСистемеКорректныйСтатус);			
		КонецЕсли; 
		
		Для Каждого СтрокаФилиал Из СтрокаСистемы.ПолучитьЭлементы() Цикл
			Если СтрокаФилиал.Пользователь = КэшДополнительныхДанных.ТекущийПользователь 
				ИЛИ (ЗначениеЗаполнено(СтрокаФилиал.Пользователь) И РазрешеноРаботатьССистемой) Тогда 
				
				СтрокаФилиал.ВозможностьНазначать = Истина;
				
			ИначеЕсли СтрокаСистемы.ВозможностьНазначать Тогда
				Если ЗначениеЗаполнено(СтрокаФилиал.Пользователь) Тогда
					ФилиалПользователя = ОбщегоНазначенияВызовСервера.ФилиалПользователя(СтрокаФилиал.Пользователь);
					
					Если КэшДополнительныхДанных.СвязанныеФилиалы.Найти(ФилиалПользователя) <> Неопределено Тогда
						СтрокаФилиал.ВозможностьНазначать = Истина;
					КонецЕсли;
				Иначе
					СтрокаФилиал.ВозможностьНазначать = Истина;
				КонецЕсли;
			Иначе 
				СтрокаФилиал.ВозможностьНазначать = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьИЗначениеГруппыЗаказчиков(ДобавленныеСистемы = Неопределено)
	
	ЕстьГруппыЗаказчиков = Ложь;
	ПараметрыОтбора = Новый Структура;
	
	Для Каждого Строка Из СистемыРазработкиДерево.ПолучитьЭлементы() Цикл
		ОтобранныеГруппы = ПолучитьГруппыЗаказчиков(Объект.Направление, Строка.Система, 
			КэшДополнительныхДанных.ГруппыЗаказчиков);
		
		Если ОтобранныеГруппы.Количество() > 0 И НЕ ЗначениеЗаполнено(Объект.Продукт) Тогда
			ЕстьГруппыЗаказчиков = Истина;	
			СписокПользователя = ПолучитьСписокВыбораГруппЗаказчиковПользователя(Объект.Направление, Строка.Система);
			
			СписокВыбора = Элементы.СистемыРазработкиДеревоГруппаЗаказчиков.СписокВыбора;	
			СписокВыбора.Очистить();
			
			Если СписокПользователя.Количество() > 0 Тогда
				СписокВыбора.ЗагрузитьЗначения(СписокПользователя);
			Иначе
				СписокВыбора.ЗагрузитьЗначения(ОтобранныеГруппы);
			КонецЕсли;
			
			Если ДобавленныеСистемы <> Неопределено
				И ДобавленныеСистемы.Найти(Строка.Система) <> Неопределено
				И СписокПользователя.Количество() = 1 Тогда					
				
					Строка.ГруппаЗаказчиков = СписокПользователя[0];
					Строка.ГруппаЗаказчиковПредставление = Строка(СписокПользователя[0]);
			КонецЕсли; 
			
			Если ОтобранныеГруппы.Найти(Строка.ГруппаЗаказчиков) = Неопределено Тогда
				Строка.ГруппаЗаказчиков = КэшДополнительныхДанных.СсылкаПрочиеЗаказчики;
				Строка.ГруппаЗаказчиковПредставление = "";
			КонецЕсли;	
		Иначе
			Строка.ГруппаЗаказчиков = Неопределено;
			Строка.ГруппаЗаказчиковПредставление = "";
		КонецЕсли;
	КонецЦикла;
			
	Если ЕстьГруппыЗаказчиков Тогда
		// При сохранении, если группа заказчиков для системы не будет заполнена, нужно задать вопрос.
		ЗадатьВопросЗаполнитьГруппу = Истина;

		Элементы.СистемыРазработкиДеревоГруппаЗаказчиков.Видимость = Истина;
		Элементы.ГруппаСистемыРазработки.Ширина = 54;
		Элементы.СистемыРазработкиДерево.Ширина = 54;
	Иначе
		Элементы.СистемыРазработкиДеревоГруппаЗаказчиков.Видимость = Ложь;
		Элементы.ГруппаСистемыРазработки.Ширина = 40;
		Элементы.СистемыРазработкиДерево.Ширина = 40;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьВыборНазначенного(НачальныеДанные, Знач Назначенный, Знач КоличествоНазначенных, СменитьСтатус)
	
	Система = НачальныеДанные.Система;
	Статус = НачальныеДанные.Статус;
	НазначенаДо = НачальныеДанные.Назначена;
	ФилиалДо = НачальныеДанные.Филиал;
	ПользовательДо = НачальныеДанные.Пользователь; 
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("ТекстСообщения", "");
		
	Филиал = Назначенный.Филиал;
	Пользователь = Назначенный.Пользователь;
	
	Если Филиал = ФилиалДо И Пользователь = ПользовательДо 
		И (ЗначениеЗаполнено(Филиал) ИЛИ ЗначениеЗаполнено(ФилиалДо)) Тогда
		
		Возврат Результат;
	КонецЕсли;
	
	Если СтатусАктуален(Объект.Ссылка, Система, Статус) Тогда
		НовыйСтатусПоСистеме = Неопределено;
		Комментарий = Неопределено;
		Данные = "";
		ДанныеСтруктура = Новый Структура("Событие, Система, Назначенный, Добавлен");
		ДанныеСтруктура.Событие = "ИзменениеНазначенногоПоСистеме";
		СтрокаСистема = Строка(Система);
		
		Если ЗначениеЗаполнено(Филиал) Тогда			
			Если ЗначениеЗаполнено(Пользователь) Тогда				
				Назначена = СтрШаблон("%1, %2", Строка(Филиал), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФИО"));
				Комментарий = СтрШаблон("Заявка по системе <b>%1</b> назначена на %2", СтрокаСистема, Назначена);
				ДанныеСтруктура.Система = СтрокаСистема;
				ДанныеСтруктура.Назначенный = Назначена;
				ДанныеСтруктура.Добавлен = Истина;
				
				Данные = ЗаписатьЗначениеJSON(ДанныеСтруктура);
				
				Если КоличествоНазначенных.Пользователи = 0 И Статус = Справочники.СтатусыОбъектов.Новый Тогда
					НовыйСтатусПоСистеме = Справочники.СтатусыОбъектов.Рассмотрение;
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(ПользовательДо) Тогда
				Комментарий = СтрШаблон("По системе <b>%1</b> был удален назначенный %2", СтрокаСистема, НазначенаДо);	
				ДанныеСтруктура.Система = СтрокаСистема;
				ДанныеСтруктура.Назначенный = НазначенаДо;
				ДанныеСтруктура.Добавлен = Ложь;
				
				Данные = ЗаписатьЗначениеJSON(ДанныеСтруктура);
			КонецЕсли;
	
			НачатьТранзакцию();
			Попытка 
				Если НовыйСтатусПоСистеме <> Неопределено Тогда	
					РегистрыСведений.СтатусыЗаявокПоСистемам.УстановитьСтатусЗаявкиПоСистеме(Объект.Ссылка, 
						Система, НовыйСтатусПоСистеме);
				КонецЕсли;
				 
				РегистрыСведений.СистемыЗаявокНазначеныеПользователю.Добавить(Объект.Ссылка, 
					Система, Филиал, Пользователь, Комментарий, Данные);
				
				Если ЗначениеЗаполнено(ФилиалДо) И ФилиалДо <> Филиал Тогда
					РегистрыСведений.СистемыЗаявокНазначеныеПользователю.Удалить(Объект.Ссылка, Система, ФилиалДо, Комментарий, Данные); 
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Пользователь) Тогда
					РегистрыСведений.Участники.Добавить(Объект.Ссылка, Пользователь, Справочники.РолиУчастников.Наблюдатель); 
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				Результат.Ошибка = Истина;
				Результат.ТекстСообщения = "При добавлении назначенного произошла непредвиденная ошибка";
			КонецПопытки;	
		Иначе
			Если ЗначениеЗаполнено(ПользовательДо) Тогда
				Комментарий = СтрШаблон("По системе <b>%1</b> был удален назначенный %2", СтрокаСистема, НазначенаДо);
				
				ДанныеСтруктура.Система = СтрокаСистема;
				ДанныеСтруктура.Назначенный = НазначенаДо;
				ДанныеСтруктура.Добавлен = Ложь;
				
				Данные = ЗаписатьЗначениеJSON(ДанныеСтруктура);
			КонецЕсли;
			
			Если СменитьСтатус И Статус = Справочники.СтатусыОбъектов.Рассмотрение Тогда
				НовыйСтатусПоСистеме = Справочники.СтатусыОбъектов.Новый;
			КонецЕсли;
			
			НачатьТранзакцию();	
			Попытка  
				Если НовыйСтатусПоСистеме <> Неопределено Тогда
					РегистрыСведений.СтатусыЗаявокПоСистемам.УстановитьСтатусЗаявкиПоСистеме(Объект.Ссылка, 
						Система, НовыйСтатусПоСистеме);
				КонецЕсли;
					
				РегистрыСведений.СистемыЗаявокНазначеныеПользователю.Удалить(Объект.Ссылка, Система, ФилиалДо, Комментарий, Данные);
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				Результат.Ошибка = Истина;
				Результат.ТекстСообщения = "При удалении назначенного произошла непредвиденная ошибка";
			КонецПопытки;
		КонецЕсли;
	Иначе
		Результат.Ошибка = Истина;
		Результат.ТекстСообщения = "Статус заявки по выбранной системе был изменен";
	КонецЕсли;
		
	ЗаполнитьСистемыРазработкиДерево();
	УстановитьПредставлениеСтатуса();	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьВыбранныеФилиалы(Знач ТекущиеДанные)  
	
	ФилиалыИсключение = Новый Массив;
		
	Если ТекущиеДанные.ЭтоСтрокаСистема Тогда
		Для Каждого СтрокаФилиал Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			ФилиалыИсключение.Добавить(СтрокаФилиал.Филиал);
		КонецЦикла;
	Иначе
		ТекущийФилиал = ТекущиеДанные.Филиал;
		
		Для Каждого СтрокаФилиал Из ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы() Цикл
			Если СтрокаФилиал.Филиал <> ТекущийФилиал Тогда
				ФилиалыИсключение.Добавить(СтрокаФилиал.Филиал);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ФилиалыИсключение; 
	
КонецФункции
	
&НаКлиенте
Процедура ОткрытьФормуВыбораНазначенного(ТекущиеДанные)  
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Система", ТекущиеДанные.Система);
	ПараметрыОткрытия.Вставить("Филиал", ТекущиеДанные.Филиал);
	ПараметрыОткрытия.Вставить("Пользователь", ТекущиеДанные.Пользователь);
	ПараметрыОткрытия.Вставить("ВозможностьНазначать", ТекущиеДанные.ВозможностьНазначать);
	
	// передаем параметр откуда открывается форма, для дальнейшей обработки статуса при выборе филиала "Не назначена"
	// если филиал заполнен, то открывается по ссылке, иначе по кнопке "Назначить"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыборПоСсылке", ЗначениеЗаполнено(ТекущиеДанные.Филиал));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СистемыРазработкиНазначенаОбработкаВыбора", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.ЗаявкаНаРазработку.Форма.ВыборНазначенного", ПараметрыОткрытия, ЭтотОбъект, , , , 
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокВыбораГруппЗаказчиковПользователя(Знач Направление, Знач Система)
	
	Результат = Новый Массив;
	
	ЭлементНаправление = КэшДополнительныхДанных.ГруппыЗаказчиков.Получить(Направление);
	
	Если ЭлементНаправление <> Неопределено Тогда
		ЭлементСистема = ЭлементНаправление.Получить(Система);
		
		Если ЭлементСистема <> Неопределено Тогда
			Для Каждого Элемент Из КэшДополнительныхДанных.ДоступныеГруппыЗаказчиков Цикл
				Если Элемент.Значение.Заказчик И ЭлементСистема.Найти(Элемент.Ключ) <> Неопределено Тогда
					Результат.Добавить(Элемент.Ключ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Результат;
		
КонецФункции

&НаКлиенте
Функция ПолучитьСписокКоманд(Знач ТекущиеДанные)
	
	СписокКоманд = Новый СписокЗначений;
	 
	Если ТекущиеДанные.Статус = ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Отклонен") Тогда
    	Возврат СписокКоманд;
	КонецЕсли;
	
	СтатусСистемы = ТекущиеДанные.Статус;
	Статусы = КэшДополнительныхДанных.Статусы;

	Если НЕ ТекущиеДанные.ЕстьЗадачи Тогда	
		Система = ТекущиеДанные.Система;
		РольПользователяСистемы = КэшДополнительныхДанных.РольПользователяДляСистем;
		РолиIT = КэшДополнительныхДанных.РолиПользователейВОтделеIT;
				
		Если КэшДополнительныхДанных.РольВОтделеIT = РолиIT.Получить("ДиректорIT") Тогда
			ЗаполнитьСписокКомандРазработчика(СписокКоманд, Статусы, СтатусСистемы, Истина);
			
		ИначеЕсли РольПользователяСистемы = "Разработчик" 
			И КэшДополнительныхДанных.СистемыПользователя.Найти(Система) <> Неопределено Тогда
			
			ЗаполнитьСписокКомандРазработчика(СписокКоманд, Статусы, СтатусСистемы);
			
		ИначеЕсли РольПользователяСистемы = "Заказчик" Тогда	
			ЗаполнитьСписокКомандЗаказчика(СписокКоманд, Статусы, СтатусСистемы);	
		КонецЕсли;
		
		Если СтатусСистемы = Статусы.Получить("Новый") 
			ИЛИ СтатусСистемы = Статусы.Получить("Рассмотрение")
			ИЛИ СтатусСистемы = Статусы.Получить("РевьюТребований")
			ИЛИ СтатусСистемы = Статусы.Получить("Рассмотрен") 
			ИЛИ СтатусСистемы = Статусы.Получить("Проработка") Тогда
			
			СписокКоманд.Добавить("НазначитьПоСистеме", "Назначить", , БиблиотекаКартинок.ГруппаПользователей);	
		КонецЕсли;
		
		Если СтатусСистемы = Статусы.Получить("Новый") Тогда
			СписокКоманд.Добавить("УстановитьСтатусСистемы_Проработка", "Проработать", , БиблиотекаКартинок.СтатусПроработка);
		КонецЕсли;
	КонецЕсли;
	
	Если КэшДополнительныхДанных.РазрешениеСоздаватьЗадачи И СтатусСистемы <> Статусы.Получить("Проработка") Тогда
		Для Каждого ЭлементСписка Из СписокСтатусовДляПереводаЗадач Цикл
			ПредставлениеЭлемента = СтрШаблон("Создать задачу (%1)", ЭлементСписка.Представление);
			СписокКоманд.Добавить(ЭлементСписка.Значение, ПредставлениеЭлемента, , ЭлементСписка.Картинка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокКоманд;
	
КонецФункции

&НаСервере
Процедура ПроверитьНаличиеСистемыДляНазначенного()
	
	Заявка = Объект.Ссылка;
	
	// Если пользователь удалил систему вместе с назначенным, нужно удалить запись о назначенном для такой системы
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СистемыЗаявокНазначеныеПользователю.Система КАК Система
	|ИЗ
	|	РегистрСведений.СистемыЗаявокНазначеныеПользователю КАК СистемыЗаявокНазначеныеПользователю
	|ГДЕ
	|	СистемыЗаявокНазначеныеПользователю.Заявка = &Заявка";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НайденныеСтроки = Объект.СистемыРазработки.НайтиСтроки(Новый Структура("Система", Выборка.Система));
			Если НайденныеСтроки.Количество() = 0 Тогда 
				РегистрыСведений.СистемыЗаявокНазначеныеПользователю.Удалить(Заявка, Выборка.Система);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(Реквизит, Элемент)
	
	Строки = Реквизит.ПолучитьЭлементы();
	
	Для Каждого Строка Из Строки Цикл
		Элемент.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СистемыРазработкиНазначенаОбработкаВыбора(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;      
	
	ТекущиеДанные = Элементы.СистемыРазработкиДерево.ТекущиеДанные; 

	КоличествоНазначенных = КоличествоНазначенныхПользователей(ТекущиеДанные);
	
	НачальныеДанные = Новый Структура;
	НачальныеДанные.Вставить("Система", ТекущиеДанные.Система);
	НачальныеДанные.Вставить("Статус", ТекущиеДанные.Статус);
	НачальныеДанные.Вставить("Назначена", ТекущиеДанные.Назначена);
	НачальныеДанные.Вставить("Филиал", ТекущиеДанные.Филиал);
	НачальныеДанные.Вставить("Пользователь", ТекущиеДанные.Пользователь);

	// если будут удалены все назначенные филиалы, то нужно сменить статус на "новый"
	СменитьСтатусПриУдаленииНазначенных = НЕ ПараметрыОповещения.ВыборПоСсылке 
		ИЛИ (ПараметрыОповещения.ВыборПоСсылке И КоличествоНазначенных.Филиалы = 1);

	РезультатНазначения = ОбработатьВыборНазначенного(НачальныеДанные, Результат, 
		КоличествоНазначенных, СменитьСтатусПриУдаленииНазначенных);
		
	Если РезультатНазначения.Ошибка Тогда
		ПоказатьПредупреждение(, РезультатНазначения.ТекстСообщения);
	КонецЕсли;     
	
	НастроитьГиперссылкиНазначенияПоСистеме();	
	РазвернутьДерево(СистемыРазработкиДерево, Элементы.СистемыРазработкиДерево);
	
	Оповестить(СобытияОповещенияКлиент.ИмяСобытияОбновлениеСписковИнструментов());
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция СтатусАктуален(Знач Заявка, Знач Система, Знач Статус)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыЗаявокПоСистемам.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|ГДЕ
	|	СтатусыЗаявокПоСистемам.Заявка = &Заявка
	|	И СтатусыЗаявокПоСистемам.Система = &Система";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("Система", Система);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Результат = (Статус = Выборка.Статус);
	Иначе
		Результат = (Статус = Справочники.СтатусыОбъектов.Новый);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПризнакДляСистемРазработки()
	
	Для Каждого СтрокаТаблицы Из Объект.СистемыРазработки Цикл
		СтрокаТаблицы.СистемаСохранена = Истина;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеМеханизмы_Трудозатраты

////////////////////////////////////////////////////////////////////////////////
// Управление трудозатратами

&НаКлиенте
Процедура Подключаемый_УправлениеТрудозатратамиПриНажатииHTML(Элемент, ДанныеСобытия, СтандартнаяОбработка)
 
    УчетТрудозатратКлиент.ПриНажатииПоляHTMLУправленияТрудозатратами(ЭтотОбъект, ДанныеСобытия, СтандартнаяОбработка);
 
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеРеквизиты

&НаКлиенте
Процедура Подключаемый_ОткрытьДополнительныеРеквизиты(Команда)
	
	АдресДополнительныхРеквизитов = ЭтотОбъект[ДополнительныеРеквизитыКлиентСервер.ИмяРеквизитаАдреса()];
	
	ДополнительныеРеквизитыВызовСервера.НастроитьБезопасность(АдресДополнительныхРеквизитов, Объект.Направление, Объект.Автор);
	ДополнительныеРеквизитыКлиент.ОткрытьФормуДополнительныхРеквизитов(Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ЗапрещеноИзменениеОписанияПриИзменении(Элемент)

	 Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииЦелиOKR(Элемент)
	
	ИнтеграцияДополнительныхПодсистемКлиент.ПриИзмененииЦелиOKR(ЭтотОбъект, Объект.Направление);
	
КонецПроцедуры

#Область ИнициализацияПеременных

#Если Клиент Тогда
	ЕстьНеопубликованныйКомментарий = Ложь;
	ИскатьПодчиненныеФормы = Ложь;
	ПереносВоВнутреннееЗадание = Ложь;
#КонецЕсли

#КонецОбласти
