///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда
	
#Область ОписаниеПеременных

// Хранит состояние объекта до записи
Перем ДанныеДоЗаписи;

// Хранит признак, что у объекта изменилось направление
Перем ИзменилосьНаправление;

// Хранит описание изменений объекта
Перем ОписаниеИзменений;

// Хранит признак изменения описания
Перем ОписаниеИзменилось;

// Содержит программное перечисление для проверки статусов нахождения в черновике
Перем Состояния;

// Хранит признак, указывающий, что объект еще не записан в БД
Перем ЭтоНовыйОбъект;

#КонецОбласти
	
#Область ОбработчикиСобытий 

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНовыйОбъект = ЭтоНовый();
	
	// ДЕЙСТВИЯ, СВЯЗАННЫЕ С ОБРАЩЕНИЕМ К "СТАРЫМ" ЗНАЧЕНИЯМ РЕКВИЗИТОВ ОБЪЕКТА
	
	// Данные объекта до записи
	ДанныеДоЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, 
		"Автор, Направление, ОбъектОснование, Описание, Черновик, ЮридическоеЛицо, СрокРеализации, ФинальныйСтатус, ВидРодительскогоПроекта");
	
	ДобавитьДанныеДоЗаписиТабличнойЧастиСистемы(ДанныеДоЗаписи);
	
	ИзменилосьНаправление = Направление <> ДанныеДоЗаписи.Направление;
	
	// Определенные данные объекта до записи,
	// для фиксации изменений состояния в РС.ОчередьСобытийНаОбработку 
	ОписаниеИзменений = ОбщегоНазначения.ПолучитьСостояниеОбъектаДоЗаписи(Ссылка);
	
	// Проверка для интеграции с Jira
	ИгнорироватьПроверкуСозданиеИнцидентаВJira = ДополнительныеСвойства.Свойство("ИгнорироватьПроверкуСозданиеИнцидентаВJira");
	ОписаниеИзменений.Вставить("ИгнорироватьПроверкуСозданиеИнцидентаВJira", ИгнорироватьПроверкуСозданиеИнцидентаВJira);
	
	Если ДополнительныеСвойства.Свойство("ОценкаТрудозатрат") Тогда
		ОписаниеИзменений.Значения.Реквизиты.Вставить("ОценкаТрудозатрат", ДополнительныеСвойства.ОценкаТрудозатрат);
	КонецЕсли;
	
	// ДЕЙСТВИЯ, СВЯЗАННЫЕ С ПРОВЕРКАМИ И ЗАПОЛНЕНИЕМ ЗНАЧЕНИЙ РЕКВИЗИТОВ ОБЪЕКТА
		
	// Формирование строки для представления систем заявки
	Документы.ЗаявкаНаРазработку.ЗаполнитьПредставлениеСистем(ЭтотОбъект);
	
	// Плановые трудозатраты
	ПредыдущаяОценкаТрудозатрат = УчетТрудозатрат.ПолучитьПлановыеТрудозатраты(Ссылка);
	
	Если ДополнительныеСвойства.Свойство("ОценкаТрудозатрат") 
		И ДополнительныеСвойства.ОценкаТрудозатрат <> ПредыдущаяОценкаТрудозатрат Тогда
		
		ДополнительныеСвойства.Вставить("ИзмениласьОценкаТрудозатрат");
	КонецЕсли;
	
	// Инициализация программного перечисления нахождения заявки в статусе черновика
	Состояния = Новый Структура;
	Состояния.Вставить("ПереводИзЧерновика", "ПереводИзЧерновика");
	Состояния.Вставить("ПереводВЧерновик", "ПереводВЧерновик");	
	
	// При переводе заявки из статуса "Черновик" в реквизит Дата присваивается значение текущей
	// даты. Поэтому реквизит ДатаСоздания хранит реальную дату создания заявки.
	Если НЕ ЗначениеЗаполнено(ДатаСоздания) Тогда
		ДатаСоздания = Дата;
	КонецЕсли;
	
	// Если объект изменен интерактивно пользователем, обновляются реквизиты ДатаПоследнегоИзменения
	// и КоличествоСистемРазработки. ВНИМАНИЕ! Это свойство используется в обработчики события ПриЗаписи.
	// Поэтому этот участок кода изменять нельзя.
	Если ДополнительныеСвойства.Свойство("ОбновитьДатыИзмененийИКоличествоСистем") Тогда
		ДатаПоследнегоИзменения = ТекущаяДатаСеанса();
		КоличествоСистемРазработки = СистемыРазработки.Количество();
	КонецЕсли;	
	
	// Хранит текущее состояние заявки по реквизиту "Черновик"
	ДополнительныеСвойства.Вставить("СостояниеЧерновика", "");
	
	// Проверка изменения списка систем заявки или группы заказчиков по системе
	ДополнительныеСвойства.Вставить("СписокСистемИлиГруппаЗаказчиковИзменились", Ложь);
	
	Если НЕ ЭтоНовыйОбъект Тогда
		Если НЕ Черновик Тогда
			// Получение для заявки количества подчиненных объектов
			РегистрыСведений.ОчередьСобытийНаОбработку.ДобавитьЗаданиеЗаполнитьКоличествоПодчиненныхЗадач(Ссылка);
		КонецЕсли;
		
		// Проверка перехода заявки из состояния черновика или наоборот, переход в состояние черновика
		Если ДанныеДоЗаписи.Черновик = Истина И Черновик = Ложь Тогда
			ДополнительныеСвойства.СостояниеЧерновика = Состояния.ПереводИзЧерновика;
			
		ИначеЕсли ДанныеДоЗаписи.Черновик = Ложь И Черновик = Истина Тогда
			ДополнительныеСвойства.СостояниеЧерновика = Состояния.ПереводВЧерновик;
		КонецЕсли;
				
		Если ДополнительныеСвойства.СостояниеЧерновика = Состояния.ПереводВЧерновик Тогда 
			Если Документы.ЗаявкаНаРазработку.ЕстьПодчиненныеЗадачи(Ссылка) Тогда	
				ТекстСообщения = "Есть подчиненные задачи. Перевод в черновик не возможен.";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
				Возврат;
			ИначеЕсли РегистрыСведений.Трудозатраты.ЕстьТрудозатраты(Ссылка) Тогда	
				ТекстСообщения = "Запрещено переводить в черновик заявки, по которым были занесены трудозатраты.";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
				Возврат;
			КонецЕсли;
		КонецЕсли;
			
		ДополнительныеСвойства.СписокСистемИлиГруппаЗаказчиковИзменились = СписокСистемИлиГруппаЗаказчиковИзменились();
		
		// Если заявка переводится из состояния черновика, дата документа обновляется на текущую
		Если ДополнительныеСвойства.СостояниеЧерновика = Состояния.ПереводИзЧерновика Тогда
			Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Если ДанныеДоЗаписи.ОбъектОснование <> ОбъектОснование Тогда
			Если ЗначениеЗаполнено(ОбъектОснование) Тогда
				ВидРодительскогоПроекта = ОбщегоНазначения.ПолучитьВидРодительскогоПроекта(ОбъектОснование);
			Иначе
				ВидРодительскогоПроекта = Неопределено;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЭтотОбъект.УстановитьНовыйНомер();
		КороткийНомер = ОбщегоНазначения.ПолучитьКороткийНомер(Номер, Документы.ЗаявкаНаРазработку.ПолучитьПрефикс());
	КонецЕсли;
	
	Если ЭтоНовыйОбъект ИЛИ Автор <> ДанныеДоЗаписи.Автор ИЛИ ИзменилосьНаправление Тогда
		ЗаполнитьЗаказчика();
	КонецЕсли; 
	
	// Если не заполнен продукт и в поле "ГруппаЗаказчиков" пустая ссылка, но для системы-направления 
	// есть группы заказчиков - установим битую ссылку в поле "ГруппаЗаказчиков". 	
	Если НЕ ЗначениеЗаполнено(Продукт) Тогда
		Если ДополнительныеСвойства.Свойство("ГруппыЗаказчиков") Тогда
			ГруппыЗаказчиков = ДополнительныеСвойства.ГруппыЗаказчиков;
		Иначе
			ГруппыЗаказчиков = Справочники.ГруппыЗаказчиковНаправлений.ПолучитьГруппыЗаказчиков();
		КонецЕсли;
		
		Для Каждого Строка Из СистемыРазработки Цикл
			ПараметрыОтбора = Новый Структура("Система, Направление", Строка.Система, Направление);
			
			Если ГруппыЗаказчиков.НайтиСтроки(ПараметрыОтбора).Количество() <> 0 
				И НЕ ЗначениеЗаполнено(Строка.ГруппаЗаказчиков) Тогда
				
				Строка.ГруппаЗаказчиков = Справочники.ГруппыЗаказчиковНаправлений.ПрочиеЗаказчики;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОперации = Неопределено;
	Если ДополнительныеСвойства.Свойство("ИзменениеСтатусаЗаявки", ПараметрыОперации) Тогда
		Если ПараметрыОперации.Свойство("Комментарий") И НЕ ПустаяСтрока(ПараметрыОперации.Комментарий.ТекстКомментария) Тогда
			ИдентификаторКомментария = ПараметрыОперации.Комментарий.Идентификатор;
			
			РегистрыСведений.Комментарии.Добавить(Ссылка, ИдентификаторКомментария, , 
				ПараметрыОперации.Комментарий.ТекстКомментария, , Истина, , ПараметрыОперации.Комментарий.КомментарийБезТегов);
				
			Если ПараметрыОперации.Свойство("ПричинаИзмененияСтатуса") Тогда
				РегистрыСведений.ПричиныИзмененияСтатусаОбъектов.Добавить(Ссылка, Справочники.СтатусыОбъектов.Отклонен, 
					ПараметрыОперации.ПричинаИзмененияСтатуса, ИдентификаторКомментария);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Назначение = Справочники.НазначенияЗадач.Ошибка И НЕ ЗначениеЗаполнено(СерьезностьОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Серьезность ошибки"" не заполнено", , , , Отказ);
		Возврат;
	КонецЕсли;
	
	ЕстьИзмененияОписания = Неопределено;
	Если ДополнительныеСвойства.Свойство("ОписаниеИзменилось") Тогда
		ЕстьИзмененияОписания = ДополнительныеСвойства.ОписаниеИзменилось;
	КонецЕсли;
	
	ОписаниеИзменилось = ИсторияИзменений.СравнитьОписанияОбъектаПриЗаписи(Ссылка, 
		ДанныеДоЗаписи.Описание, Описание, ЕстьИзмененияОписания);
		
	Если НЕ Отказ Тогда
		Если ДополнительныеСвойства.СостояниеЧерновика = Состояния.ПереводВЧерновик Тогда
			ИндексируемоеОписание = Неопределено;
		ИначеЕсли НЕ Черновик 
			И (ОписаниеИзменилось 
				ИЛИ ЭтоНовыйОбъект 
				ИЛИ ДополнительныеСвойства.СостояниеЧерновика = Состояния.ПереводИзЧерновика) Тогда
				
			ИндексируемоеОписание = РедакторОписания.ПолучитьИндексируемоеОписание(Описание);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ДополнительныеРеквизиты_ТаблицаРеквизитов") Тогда
		ДопРеквизиты = ДополнительныеСвойства.ДополнительныеРеквизиты_ТаблицаРеквизитов;
	Иначе
		ДопРеквизиты = Неопределено;
	КонецЕсли;
	
	// Сравнение состояния до и после записи
	Если ДополнительныеСвойства.Свойство("Комментарий") Тогда
		ОбщегоНазначения.ОбработатьИзменениеОбъекта(Ссылка, ОписаниеИзменений, 
			ДопРеквизиты, ДополнительныеСвойства.Комментарий);
	Иначе
		ОбщегоНазначения.ОбработатьИзменениеОбъекта(Ссылка, ОписаниеИзменений, ДопРеквизиты);
	КонецЕсли;
	
	Если ЭтоНовыйОбъект Тогда
		УчетТрудозатрат.ДобавитьВПросмотренныеЗаявки(Ссылка);
	КонецЕсли;
		
	Если НЕ Черновик ИЛИ ЗначениеЗаполнено(ФинальныйСтатус) Тогда
		// Пересчет статусов заявки по группам разработки и системам
		РегистрыСведений.СтатусыЗаявокПоГруппамРазработки.РассчитатьСтатусыПоФилиалам(Ссылка);
		РегистрыСведений.СтатусыЗаявокПоСистемам.РассчитатьСтатусыПоСистемам(Ссылка);
		
		// Если заявка переводится из состояния "Черновик", необходимо удалить записи
		// регистра сведений ДоступныеЧерновики.
		Если ДополнительныеСвойства.СостояниеЧерновика = Состояния.ПереводИзЧерновика
			ИЛИ ЭтоНовыйОбъект ИЛИ ИзменилосьНаправление Тогда			
				
			Если ДополнительныеСвойства.СостояниеЧерновика = Состояния.ПереводИзЧерновика Тогда
				РегистрыСведений.ДоступныеЧерновики.Удалить(Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		Если ИзменилосьНаправление И НЕ ЭтоНовыйОбъект Тогда
			СистемыЗаявки = СистемыРазработки.ВыгрузитьКолонку("Система");
			РегистрыСведений.НаправленияИСистемыИзмененныхЗаявок.ДобавитьЗапись(ДанныеДоЗаписи.Направление, СистемыЗаявки);
			РегистрыСведений.НаправленияИСистемыИзмененныхЗаявок.ДобавитьЗапись(Направление, СистемыЗаявки);
			
			// Если было изменено направление, то нужно изменить направление у подчиненных задач
			Попытка
				ИзменитьНаправлениеПодчиненныхЗадач(Направление);
			Исключение
				Отказ = Истина;
				Возврат;
			КонецПопытки;
		КонецЕсли;
		
		Если НЕ ДополнительныеСвойства.Свойство("ЭтоСозданиеЗаявкиОснованиеЗадачи") Тогда
			ОбновитьНазначенныхПоГруппамЗаказчиков();
		КонецЕсли;
	Иначе
		Если ДополнительныеСвойства.СостояниеЧерновика = Состояния.ПереводВЧерновик Тогда
			ОчиститьРегистрыСведений();
		КонецЕсли;
	КонецЕсли;
	
	// Добавление наблюдателей для заявки.
	// Проверяем, что заявка не является родителем задачи-автотеста и черновиком.
	Если ЭтоНовыйОбъект И НЕ Черновик
		И НЕ ДополнительныеСвойства.Свойство("ЗаявкаДляЗадачиАвтотеста") Тогда
		УчастникиПроцессов.ДобавитьУчастниковИзОбъектаОснования(Ссылка);
	КонецЕсли;
	
	// Сохранение связи заявки с документом основания в регистре сведений
	РегистрыСведений.СвязьОбъектовСЗаявкамиНаРазработку.Добавить(Ссылка, ОбъектОснование);
	
	// Запись в регистр сведений высшего родителя для текущего объекта
	Если ЭтоНовыйОбъект ИЛИ (ОбъектОснование <> ДанныеДоЗаписи.ОбъектОснование) Тогда
		Если НЕ ЗначениеЗаполнено(ОбъектОснование) Тогда
			ОбъектОснование = Неопределено;
		КонецЕсли;
		
		РегистрыСведений.ОбъектыВерхнегоУровняСтруктурыПодчиненности.Добавить(Ссылка, ОбъектОснование);
		РегистрыСведений.СтруктураПодчиненности.Добавить(Ссылка, ОбъектОснование, ДанныеДоЗаписи.ОбъектОснование);
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ИзмениласьОценкаТрудозатрат") Тогда	
		УчетТрудозатрат.ЗаписатьПлановыеТрудозатраты(Ссылка, ДополнительныеСвойства.ОценкаТрудозатрат);
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ОбновитьДатыИзмененийИКоличествоСистем") Тогда
		ОбщегоНазначения.ДобавитьДатыИзмененияДляПроекта(Ссылка);
		ДополнительныеСвойства.Удалить("ОбновитьДатыИзмененийИКоличествоСистем");
	КонецЕсли;
	
	Если (ЭтоНовыйОбъект И НЕ Черновик) ИЛИ (ДополнительныеСвойства.СостояниеЧерновика = Состояния.ПереводИзЧерновика) Тогда
		Если НЕ ОграниченныйПросмотр Тогда
			РегистрыСведений.ОчередьЗаявокНаОповещениеПользователей.Добавить(Ссылка);
		КонецЕсли;
		
		Если Назначение = Справочники.НазначенияЗадач.Ошибка Тогда
			РегистрыСведений.ОчередьСобытийНаОбработку.СоздатьОбработкуЭскалацииОшибок(Ссылка, Дата);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбъектОснование <> ДанныеДоЗаписи.ОбъектОснование Тогда
		РегистрыСведений.ОчередьСобытийНаОбработку.ДобавитьЗаданиеОбновитьПроектВОчередиЗаявок(Ссылка); 
	КонецЕсли;
	
	// Если изменился вид родительского проекта, нужно обновить его и у подчиненных объектов
	Если НЕ ЭтоНовыйОбъект И (ВидРодительскогоПроекта <> ДанныеДоЗаписи.ВидРодительскогоПроекта) Тогда 
		РегистрыСведений.ОчередьСобытийНаОбработку.ДобавитьЗаданиеОбновитьВидРодительскогоПроекта(Ссылка, ВидРодительскогоПроекта);
	КонецЕсли;
	
	// Если изменили основание объекта, то нужно перебросить общие фактические трудозатраты со старого основания на новое
	Если НЕ ЭтоНовыйОбъект И (ОбъектОснование <> ДанныеДоЗаписи.ОбъектОснование) Тогда
		УчетТрудозатрат.ОбработатьТрудозатратыПриИзмененииОснованияОбъекта(Ссылка, ОбъектОснование, ДанныеДоЗаписи.ОбъектОснование);
	КонецЕсли;
	
	УчастникиПроцессов.ОбновитьУчастниковОбъекта(Ссылка, ДанныеДоЗаписи);
	УчетТрудозатрат.ПроверкаНеобходимостиПересчетаТрудозатрат(ЭтотОбъект, ЭтоНовыйОбъект, ДанныеДоЗаписи);
	
	Если ДанныеДоЗаписи.ЮридическоеЛицо <> ЮридическоеЛицо Тогда
		РегистрыСведений.ИсторияИзмененийЮрЛицОбъектов.ДобавитьЗапись(Ссылка, ЮридическоеЛицо);
	КонецЕсли;
	
	Если ДанныеДоЗаписи.ФинальныйСтатус <> ФинальныйСтатус 
		И ФинальныйСтатус = Справочники.СтатусыОбъектов.Отклонен Тогда
		
		РегистрыСведений.СистемыЗаявокНазначеныеПользователю.Удалить(Ссылка);
	КонецЕсли;

	Если НЕ ИнтеграцияДополнительныхПодсистем.ИзмененияИнициированыJira(ДополнительныеСвойства) Тогда
		ИнтеграцияДополнительныхПодсистем.ДобавитьЗаданиеСинхронизироватьСJira(Ссылка);
	КонецЕсли;
	
	ИнтеграцияДополнительныхПодсистем.ДобавитьЗаданиеАктуализироватьВTrello(Ссылка);
	
	Если ИзменилосьНаправление Тогда
		ДополнительныеСвойства.Вставить("ИзменилосьНаправление");
	КонецЕсли;
	
	Если ЕстьИзмененияДляРабочегоСтола() Тогда
		ДополнительныеСвойства.Вставить("ЕстьИзмененияДляРабочегоСтола");
	КонецЕсли;
	
	Если НЕ Отказ И (ОписаниеИзменилось ИЛИ ЭтоНовыйОбъект) Тогда    
		РедакторОписания.ДополнительноОбработатьОписание(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Автор = Неопределено;
	ДатаСоздания = Неопределено;
	ИмпортированаИзRedmine = Ложь;
	СрокРеализации = Неопределено;
	ФинальныйСтатус = Неопределено;
	Черновик = Ложь;
	
	Если НЕ НаправлениеАктуально(ОбъектКопирования.Направление) Тогда
		Направление = Неопределено; 
		ВидПроцесса = Неопределено;
	КонецЕсли;
	
	Справочники.СерьезностьОшибок.ПриКопированииОбъекта(СерьезностьОшибки, Назначение);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		ИсточникДанных = "";
		
		Если ДанныеЗаполнения.Свойство("ИсточникДанных", ИсточникДанных) Тогда 		
			Если ИсточникДанных = Документы.ЗаявкаНаРазработку.ИдентификаторСозданияИзЗадачи()
				ИЛИ ИсточникДанных = "API" Тогда
				
				// Сначала заполним те параметры, которые можно заполнить средствами платформы
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
				
				// Далее заполним параметры, которые нужно заполнить по-другому
				Дата = ТекущаяДатаСеанса();
				
				Если НЕ ЗначениеЗаполнено(Автор) Тогда
					Автор = ПараметрыСеанса.ТекущийПользователь;
				КонецЕсли;
				
				ТаблицаГруппЗаказчиков = ПолучитьГруппыЗаказчиковДляСистем(ДанныеЗаполнения.СистемыРазработки);
				
				Для Каждого ЭлементМассива Из ДанныеЗаполнения.СистемыРазработки Цикл
					НоваяСтрока = СистемыРазработки.Добавить();
					НоваяСтрока.Система = ЭлементМассива;
					НайденнаяГруппа = ТаблицаГруппЗаказчиков.Найти(НоваяСтрока.Система, "Система");
					Если НайденнаяГруппа <> Неопределено Тогда
						НоваяСтрока.ГруппаЗаказчиков = НайденнаяГруппа.ГруппаЗаказчиков;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ИсточникДанных = Обработки.МассовоеСозданиеЗаявок.ИдентификаторСоздания() Тогда
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
				
				Для Каждого ЭлементМассива Из ДанныеЗаполнения.СистемыРазработки Цикл
					СистемыРазработки.Добавить().Система = ЭлементМассива;
				КонецЦикла;
			КонецЕсли;
			
			// Создание из вкладки "План проекта"
		ИначеЕсли ДанныеЗаполнения.Свойство("ИсполнитьДо") И ДанныеЗаполнения.Свойство("Наименование") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
			
			Если ТипЗнч(ДанныеЗаполнения.ОбъектОснование) <> Тип("СправочникСсылка.Проекты")
					И ТипЗнч(ДанныеЗаполнения.ОбъектОснование) <> Тип("ДокументСсылка.ВнутреннееЗадание") Тогда
				ЭтотОбъект.Направление = ДанныеЗаполнения.НаправлениеРазработки;
			КонецЕсли;
		КонецЕсли;
			
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.Проекты") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Проекты.Ссылка КАК ОбъектОснование,
		|	ЗНАЧЕНИЕ(Справочник.НазначенияЗадач.НоваяЗадача) КАК Назначение,
		|	Проекты.Наименование КАК Наименование,
		|	Проекты.ВидПроекта КАК ВидРодительскогоПроекта,
		|	Проекты.ЮридическоеЛицо КАК ЮридическоеЛицо,
		|	Проекты.Продукт КАК Продукт,
		|	Проекты.ВидПроцесса КАК ВидПроцесса
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.Ссылка = &Проект";
		
		Запрос.УстановитьПараметр("Проект", ДанныеЗаполнения);
		
		// Заполнение реквизитов документа
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ВнутреннееЗадание") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВнутреннееЗадание.Ссылка КАК ОбъектОснование,
		|	ВнутреннееЗадание.Наименование КАК Наименование,
		|	ВнутреннееЗадание.Направление КАК Направление,
		|	ВнутреннееЗадание.ВидРодительскогоПроекта КАК ВидРодительскогоПроекта,
		|	ВнутреннееЗадание.Назначение КАК Назначение,
		|	ВнутреннееЗадание.Продукт КАК Продукт,
		|	ВнутреннееЗадание.СерьезностьОшибки КАК СерьезностьОшибки,
		|	ВнутреннееЗадание.ЮридическоеЛицо КАК ЮридическоеЛицо,
		|	ВнутреннееЗадание.ВидПроцесса КАК ВидПроцесса
		|ИЗ
		|	Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
		|ГДЕ
		|	ВнутреннееЗадание.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьЗначенияИзНастроекЗаполненияПользователя();
	
	Если ЮридическоеЛицо.Пустая() И НЕ Направление.Пустая() Тогда
		ПараметрыЮридическогоЛица = Документы.ЗаявкаНаРазработку.ПараметрыЮрЛица(Направление);
		ЮридическоеЛицо = ПараметрыЮридическогоЛица.ОсновноеЮрЛицо;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	// Проверка удаления из списка тех систем, которые уже использованы в задачах 
	ПроверитьУдалениеИспользуемыхСистем(Отказ);
	
	// Проверка доступности текущего пользователя к направлению из заявки
	ПроверитьДоступностьНаправления(Отказ);
	
	Если НЕ РегистрыСведений.ИспользованиеЮридическихЛицНаправлений.Использует(Направление) Тогда
		ИндексРеквизита = ПроверяемыеРеквизиты.Найти("ЮридическоеЛицо");
		Если ИндексРеквизита <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ИндексРеквизита);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьДанныеДоЗаписиТабличнойЧастиСистемы(ДанныеДоЗаписи)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаРазработкуСистемыРазработки.Система КАК Система,
	|	ЗаявкаНаРазработкуСистемыРазработки.ГруппаЗаказчиков КАК ГруппаЗаказчиков
	|ИЗ
	|	Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ЗаявкаНаРазработкуСистемыРазработки
	|ГДЕ
	|	ЗаявкаНаРазработкуСистемыРазработки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);	
	
	ДанныеДоЗаписи.Вставить("СистемыРазработки", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Функция ЕстьИзмененияДляРабочегоСтола()

	ЕстьИзменения = (ЭтоНовыйОбъект 
		ИЛИ ИзменилосьНаправление);
		
	Возврат ЕстьИзменения;
		
КонецФункции

Процедура ЗаполнитьЗаказчика()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ЮридическиеЛица.ЯвляетсяИТОрганизацией, ЛОЖЬ) КАК ЯвляетсяИТОрганизацией
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО Пользователи.Филиал = Филиалы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЮридическиеЛица КАК ЮридическиеЛица
	|		ПО (Филиалы.ЮридическоеЛицо = ЮридическиеЛица.Ссылка)
	|ГДЕ
	|	Пользователи.Ссылка = &Автор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаправленияРазработкиЗаказчики.НомерСтроки КАК НомерСтроки,
	|	НаправленияРазработкиЗаказчики.Заказчик КАК Заказчик
	|ИЗ
	|	Справочник.НаправленияРазработки.Заказчики КАК НаправленияРазработкиЗаказчики
	|ГДЕ
	|	НаправленияРазработкиЗаказчики.Ссылка = &Направление";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Автор", Автор);
	Запрос.УстановитьПараметр("Направление", Направление);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Выборка = РезультатыЗапроса[0].Выбрать();
	Выборка.Следующий();
	
	ПакетЗаказчики = РезультатыЗапроса[1];
	
	Если Выборка.ЯвляетсяИТОрганизацией И НЕ ПакетЗаказчики.Пустой() Тогда
		ВыборкаЗаказчиков = ПакетЗаказчики.Выбрать();
		
		ГСЧ = Новый ГенераторСлучайныхЧисел;
		НомерСтроки = ГСЧ.СлучайноеЧисло(1, ВыборкаЗаказчиков.Количество());
		Отбор = Новый Структура("НомерСтроки", НомерСтроки);
		
		ВыборкаЗаказчиков.НайтиСледующий(Отбор);
		Заказчик = ВыборкаЗаказчиков.Заказчик;
	Иначе
		Заказчик = Автор;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьНаправлениеПодчиненныхЗадач(Знач Направление)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СвязьОбъектовСЗаявкамиНаРазработку.Объект КАК Документ.Задача) КАК Ссылка
	|ИЗ
	|	РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку КАК СвязьОбъектовСЗаявкамиНаРазработку
	|ГДЕ
	|	СвязьОбъектовСЗаявкамиНаРазработку.Объект ССЫЛКА Документ.Задача
	|	И СвязьОбъектовСЗаявкамиНаРазработку.Заявка_Новая = &ОбъектОснование"; 
	
	Запрос.УстановитьПараметр("ОбъектОснование", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		// Установка блокировки и изменение направлений подчиненных задач
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.Задача");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Выборка = РезультатЗапроса.Выбрать();
		Попытка
			БлокировкаДанных.Заблокировать();
			
			Пока Выборка.Следующий() Цикл
				ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ЗадачаОбъект.Направление = Направление;
				ЗадачаОбъект.Записать();
			КонецЦикла;
		Исключение
			ВызватьИсключение СтрШаблон("Не удалось изменить направление заявки по причине:
			|""%1"" - открыта для редактирования пользователем.", ЗадачаОбъект.Ссылка);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Функция НаправлениеАктуально(Направление)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаправленияРазработки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НаправленияРазработки КАК НаправленияРазработки
	|ГДЕ
	|	НаправленияРазработки.Ссылка = &Направление
	|	И НЕ НаправленияРазработки.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Направление", Направление);
	
	Возврат НЕ Запрос.Выполнить().Пустой();	
	
КонецФункции

Процедура ОбновитьНазначенныхПоГруппамЗаказчиков()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	СтарыеЗначения.Система КАК Система,
	|	СтарыеЗначения.ГруппаЗаказчиков КАК ГруппаЗаказчиков
	|ПОМЕСТИТЬ СтарыеЗначения
	|ИЗ
	|	&СтарыеЗначения КАК СтарыеЗначения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеЗначения.Система КАК Система,
	|	НовыеЗначения.ГруппаЗаказчиков КАК ГруппаЗаказчиков
	|ПОМЕСТИТЬ НовыеЗначения
	|ИЗ
	|	&НовыеЗначения КАК НовыеЗначения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеЗначения.Система КАК Система,
	|	ГруппыЗаказчиковНаправлений.ФилиалIT КАК Филиал
	|ИЗ
	|	НовыеЗначения КАК НовыеЗначения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыЗаказчиковНаправлений КАК ГруппыЗаказчиковНаправлений
	|		ПО (ГруппыЗаказчиковНаправлений.Ссылка = НовыеЗначения.ГруппаЗаказчиков)
	|			И (ГруппыЗаказчиковНаправлений.ФилиалIT <> ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтарыеЗначения КАК СтарыеЗначения
	|		ПО НовыеЗначения.Система = СтарыеЗначения.Система
	|			И НовыеЗначения.ГруппаЗаказчиков = СтарыеЗначения.ГруппаЗаказчиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО (ДокументЗадача.ОбъектОснование = &Заявка)
	|			И НовыеЗначения.Система = ДокументЗадача.СистемаУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СистемыЗаявокНазначеныеПользователю КАК СистемыЗаявокНазначеныеПользователю
	|		ПО (СистемыЗаявокНазначеныеПользователю.Заявка = &Заявка)
	|			И (СистемыЗаявокНазначеныеПользователю.Система = НовыеЗначения.Система)
	|			И (СистемыЗаявокНазначеныеПользователю.Филиал = ГруппыЗаказчиковНаправлений.ФилиалIT)
	|ГДЕ
	|	СтарыеЗначения.Система ЕСТЬ NULL
	|	И ДокументЗадача.Ссылка ЕСТЬ NULL
	|	И СистемыЗаявокНазначеныеПользователю.Филиал ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтарыеЗначения.Система КАК Система,
	|	ГруппыЗаказчиковНаправлений.ФилиалIT КАК Филиал
	|ИЗ
	|	СтарыеЗначения КАК СтарыеЗначения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыЗаказчиковНаправлений КАК ГруппыЗаказчиковНаправлений
	|		ПО (ГруппыЗаказчиковНаправлений.Ссылка = СтарыеЗначения.ГруппаЗаказчиков)
	|			И (ГруппыЗаказчиковНаправлений.ФилиалIT <> ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СистемыЗаявокНазначеныеПользователю КАК СистемыЗаявокНазначеныеПользователю
	|		ПО (СистемыЗаявокНазначеныеПользователю.Заявка = &Заявка)
	|			И (СистемыЗаявокНазначеныеПользователю.Система = СтарыеЗначения.Система)
	|			И (СистемыЗаявокНазначеныеПользователю.Филиал = ГруппыЗаказчиковНаправлений.ФилиалIT)
	|			И (СистемыЗаявокНазначеныеПользователю.ТекущийИсполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеЗначения КАК НовыеЗначения
	|		ПО СтарыеЗначения.Система = НовыеЗначения.Система
	|			И СтарыеЗначения.ГруппаЗаказчиков = НовыеЗначения.ГруппаЗаказчиков
	|ГДЕ
	|	НовыеЗначения.Система ЕСТЬ NULL";
	#КонецОбласти
	
	СистемыРазработкиДоЗаписи = ДанныеДоЗаписи.СистемыРазработки;
	
	Если ДополнительныеСвойства.СостояниеЧерновика = Состояния.ПереводИзЧерновика Тогда
		// при переводе в черновик мы очищаем назначенных по системам,
		// поэтому при выводе из черновика будем считать, 
		// что все записи табличной части новые
		
		СистемыРазработкиДоЗаписи.Очистить();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Заявка", Ссылка);
	Запрос.УстановитьПараметр("СтарыеЗначения", СистемыРазработкиДоЗаписи);
	Запрос.УстановитьПараметр("НовыеЗначения", СистемыРазработки.Выгрузить()); 
		
	Пакеты = Запрос.ВыполнитьПакет();
	КоличествоПакетов = Пакеты.ВГраница();
		
	ПакетДобавленные = Пакеты[КоличествоПакетов - 1];
	ПакетУдаленные = Пакеты[КоличествоПакетов];
		
	ВыборкаДобавленные = ПакетДобавленные.Выбрать();
	
	Пока ВыборкаДобавленные.Следующий() Цикл
		РегистрыСведений.СистемыЗаявокНазначеныеПользователю.Добавить(Ссылка, 
			ВыборкаДобавленные.Система, ВыборкаДобавленные.Филиал); 
	КонецЦикла;
		
	ВыборкаУдаленные = ПакетУдаленные.Выбрать();
	
	Пока ВыборкаУдаленные.Следующий() Цикл
		РегистрыСведений.СистемыЗаявокНазначеныеПользователю.Удалить(Ссылка, 
			ВыборкаУдаленные.Система, ВыборкаУдаленные.Филиал); 
	КонецЦикла;
		
КонецПроцедуры

// Если заявка переводится в состояние черновика, необходимо очистить все связанные 
// регистры сведений.
//
Процедура ОчиститьРегистрыСведений()
	
	РегистрыСведений.СтатусыЗаявокПоСистемам.УдалитьЗаписиПоЗаявке(Ссылка);
	РегистрыСведений.ИсторияСтатусовЗаявокПоСистемам.УдалитьЗаписиПоЗаявке(Ссылка);
	РегистрыСведений.МинимальныеСтатусыЗаявок.УдалитьЗаписиПоЗаявке(Ссылка);
	РегистрыСведений.СтатусыЗаявокПоСистемамФилиалов.УдалитьЗаписиПоЗаявке(Ссылка);
	ОчиститьСистемыЗаявокНазначенныеПользователю();
	
	// При переводе в черновик удаляем заявку из очереди на актуализацию
	РегистрыСведений.ДатыАктуальностиЗаявокНаРазработку.УдалитьЗаявку(Ссылка);
	
	// Нужно удалить все данные по габаритному планированию
	ИнтеграцияДополнительныхПодсистем.УдалитьПланированиеРесурсовПоОбъекту(Ссылка);
	
КонецПроцедуры

// Очищает системы заявки от назначенных пользователей при переводе её в черновик
//
Процедура ОчиститьСистемыЗаявокНазначенныеПользователю()
	
	Для Каждого Строка Из СистемыРазработки Цикл
		РегистрыСведений.СистемыЗаявокНазначеныеПользователю.Удалить(Ссылка, Строка.Система);			
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьГруппыЗаказчиковДляСистем(СистемыРазработки)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГруппыЗаказчиковНаправленийСистемы.Система КАК Система,
	|	ГруппыЗаказчиковНаправленийСистемы.Ссылка КАК ГруппаЗаказчиков
	|ПОМЕСТИТЬ СистемаСГруппойЗаказчика
	|ИЗ
	|	Справочник.ГруппыЗаказчиковНаправлений.Направления КАК ГруппыЗаказчиковНаправленийНаправления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыЗаказчиковНаправлений.Системы КАК ГруппыЗаказчиковНаправленийСистемы
	|		ПО ГруппыЗаказчиковНаправленийНаправления.Ссылка = ГруппыЗаказчиковНаправленийСистемы.Ссылка
	|			И (ГруппыЗаказчиковНаправленийНаправления.Направление = &Направление)
	|ГДЕ
	|	ГруппыЗаказчиковНаправленийСистемы.Система В(&Системы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СистемаСГруппойЗаказчика.Система КАК Система
	|ПОМЕСТИТЬ ДоступныеСистемы
	|ИЗ
	|	СистемаСГруппойЗаказчика КАК СистемаСГруппойЗаказчика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыЗаказчиковНаправлений.Заказчики КАК ГруппыЗаказчиковНаправленийЗаказчики
	|		ПО (ГруппыЗаказчиковНаправленийЗаказчики.Пользователь = &Пользователь)
	|			И СистемаСГруппойЗаказчика.ГруппаЗаказчиков = ГруппыЗаказчиковНаправленийЗаказчики.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СистемаСГруппойЗаказчика.Система
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(СистемаСГруппойЗаказчика.ГруппаЗаказчиков) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СистемаСГруппойЗаказчика.Система КАК Система,
	|	ЗНАЧЕНИЕ(Справочник.ГруппыЗаказчиковНаправлений.ПрочиеЗаказчики) КАК ГруппаЗаказчиков
	|ИЗ
	|	СистемаСГруппойЗаказчика КАК СистемаСГруппойЗаказчика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоступныеСистемы КАК ДоступныеСистемы
	|		ПО (ДоступныеСистемы.Система = СистемаСГруппойЗаказчика.Система)
	|ГДЕ
	|	ДоступныеСистемы.Система ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СистемаСГруппойЗаказчика.Система,
	|	СистемаСГруппойЗаказчика.ГруппаЗаказчиков
	|ИЗ
	|	СистемаСГруппойЗаказчика КАК СистемаСГруппойЗаказчика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДоступныеСистемы КАК ДоступныеСистемы
	|		ПО (ДоступныеСистемы.Система = СистемаСГруппойЗаказчика.Система)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыЗаказчиковНаправлений.Заказчики КАК ГруппыЗаказчиковНаправленийЗаказчики
	|		ПО (ГруппыЗаказчиковНаправленийЗаказчики.Пользователь = &Пользователь)
	|			И СистемаСГруппойЗаказчика.ГруппаЗаказчиков = ГруппыЗаказчиковНаправленийЗаказчики.Ссылка";
	
	Запрос.УстановитьПараметр("Пользователь", Автор);
	Запрос.УстановитьПараметр("Направление", Направление);
	Запрос.УстановитьПараметр("Системы", СистемыРазработки);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ПроверитьДоступностьНаправления(Отказ)
	
	Пользователь = ПараметрыСеанса.ТекущийПользователь;
	
	// Если автором заявки является текущий пользователь, то нет необходимости
	// проверять направление.
	Если НЕ ЭтоНовый() И Автор = Пользователь Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Направление) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИСТИНА КАК Разрешено
		|ИЗ
		|	РегистрСведений.ДоступныеЧерновики КАК ДоступныеЧерновики
		|ГДЕ
		|	ДоступныеЧерновики.Заявка = &Заявка
		|	И ДоступныеЧерновики.Пользователь = &Пользователь
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.РолиПользователейПоНаправлениям КАК РолиПоНаправлениям
		|ГДЕ
		|	РолиПоНаправлениям.НаправлениеРазработки = &Направление
		|	И РолиПоНаправлениям.Пользователь = &Пользователь";
		
		Запрос.УстановитьПараметр("Заявка", Ссылка);
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Запрос.УстановитьПараметр("Направление", Направление);
		
		Если Запрос.Выполнить().Пустой() Тогда
			Отказ = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Поле        = "Направление";
			Сообщение.ПутьКДанным = "Объект";
			Сообщение.Текст       = СтрШаблон("Отсутствует доступ к направлению ""%1"".", Строка(Направление));
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

// Проверка удаления из заявки тех систем, которые уже используются в задачах.
//
// Параметры:
//  Отказ - Булево - признак обнаружения некорректного заполнения данных.
//
Процедура ПроверитьУдалениеИспользуемыхСистем(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТекущиеСистемыЗаявки.Система КАК Система
	|ПОМЕСТИТЬ ТекущиеСистемыЗаявки
	|ИЗ
	|	&ТекущиеСистемыЗаявки КАК ТекущиеСистемыЗаявки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументЗаявка.Ссылка КАК Заявка,
	|	ДокументЗаявка.Система КАК Система
	|ПОМЕСТИТЬ УдаленныеСистемы
	|ИЗ
	|	Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ДокументЗаявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеСистемыЗаявки КАК ТекущиеСистемыЗаявки
	|		ПО ДокументЗаявка.Система = ТекущиеСистемыЗаявки.Система
	|ГДЕ
	|	ДокументЗаявка.Ссылка = &Заявка
	|	И ТекущиеСистемыЗаявки.Система ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПРЕДСТАВЛЕНИЕ(Задача.СистемаУчета) КАК Система
	|ИЗ
	|	УдаленныеСистемы КАК УдаленныеСистемы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК Задача
	|		ПО (УдаленныеСистемы.Заявка = (ВЫРАЗИТЬ(Задача.ОбъектОснование КАК Документ.ЗаявкаНаРазработку)))
	|			И УдаленныеСистемы.Система = Задача.СистемаУчета";
	
	Запрос.УстановитьПараметр("Заявка", Ссылка);  
	Запрос.УстановитьПараметр("ТекущиеСистемыЗаявки", СистемыРазработки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Отказ = Истина;
		СписокСистем = "";
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокСистем = СписокСистем + Выборка.Система + ", ";
		КонецЦикла;
		
		// Отсечение последней запятой и пробела
		СписокСистем = Сред(СписокСистем, 1, СтрДлина(СписокСистем) - 2);
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("Системы <%1> нельзя удалить из заявки, т.к. они используются в связанных задачах.", СписокСистем);
		Сообщение.ПутьКДанным = "Объект.СистемыРазработки";
		Сообщение.Сообщить();
	КонецЕсли;	
	
КонецПроцедуры

// Проверяет текущий список систем заявки и сравнивает его с версией в БД.
//
// Возвращаемое значение:
//  Истина - список систем изменился. Ложь - в противном случае.
//
Функция СписокСистемИлиГруппаЗаказчиковИзменились()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументЗаявка.Система КАК Система,
	|	ДокументЗаявка.ГруппаЗаказчиков КАК ГруппаЗаказчиков
	|ПОМЕСТИТЬ ПредыдущиеСистемыЗаявки
	|ИЗ
	|	Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ДокументЗаявка
	|ГДЕ
	|	ДокументЗаявка.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущиеСистемыЗаявки.Система КАК Система,
	|	ТекущиеСистемыЗаявки.ГруппаЗаказчиков КАК ГруппаЗаказчиков
	|ПОМЕСТИТЬ ТекущиеСистемыЗаявки
	|ИЗ
	|	&ТекущиеСистемыЗаявки КАК ТекущиеСистемыЗаявки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредыдущиеСистемыЗаявки.Система КАК Система
	|ИЗ
	|	ПредыдущиеСистемыЗаявки КАК ПредыдущиеСистемыЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеСистемыЗаявки КАК ТекущиеСистемыЗаявки
	|		ПО ПредыдущиеСистемыЗаявки.Система = ТекущиеСистемыЗаявки.Система
	|			И ПредыдущиеСистемыЗаявки.ГруппаЗаказчиков = ТекущиеСистемыЗаявки.ГруппаЗаказчиков
	|ГДЕ
	|	ТекущиеСистемыЗаявки.Система ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТекущиеСистемыЗаявки.Система
	|ИЗ
	|	ТекущиеСистемыЗаявки КАК ТекущиеСистемыЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПредыдущиеСистемыЗаявки КАК ПредыдущиеСистемыЗаявки
	|		ПО ТекущиеСистемыЗаявки.Система = ПредыдущиеСистемыЗаявки.Система
	|			И ТекущиеСистемыЗаявки.ГруппаЗаказчиков = ПредыдущиеСистемыЗаявки.ГруппаЗаказчиков
	|ГДЕ
	|	ПредыдущиеСистемыЗаявки.Система ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТекущиеСистемыЗаявки", СистемыРазработки);
	
	Возврат НЕ Запрос.Выполнить().Пустой();	
	
КонецФункции

Процедура УстановитьЗначенияИзНастроекЗаполненияПользователя()
	
	ВидыНастроек = ПланыВидовХарактеристик.ВидыНастроекПользователя;
	НастройкиАвтозаполнения = РаботаСНастройками.ПолучитьНастройкиАвтозаполнения(ВидыНастроек.ЗаполнениеЗаявки);
	
	Если НЕ ЗначениеЗаполнено(Направление) Тогда
		Направление = НастройкиАвтозаполнения[ВидыНастроек.НаправлениеДляЗаполненияЗаявки];
	КонецЕсли;
	
	Если Направление = НастройкиАвтозаполнения[ВидыНастроек.НаправлениеДляЗаполненияЗаявки] Тогда
		
		Если РегистрыСведений.ИспользованиеЮридическихЛицНаправлений.Использует(Направление) Тогда
			ЮридическоеЛицо = НастройкиАвтозаполнения[ВидыНастроек.ЮрЛицоДляЗаполненияЗаявки];
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВидПроцесса) 
			И Справочники.НаправленияРазработки.ИспользуетВидыПроцессов(Направление) Тогда
			ВидПроцесса = НастройкиАвтозаполнения[ВидыНастроек.ВидПроцессаДляЗаполненияЗаявки];
		КонецЕсли;

	КонецЕсли;
	
	Если СистемыРазработки.Количество() = 0 Тогда
		
		Система = НастройкиАвтозаполнения[ВидыНастроек.СистемаДляЗаполненияЗаявки];
		ГруппаЗаказчиков = НастройкиАвтозаполнения[ВидыНастроек.ГруппаЗаказчиковДляЗаполненияЗаявки];
		
		//группа заказчиков в настройках не может быть настроена без системы, поэтому не проверяем
		Если ЗначениеЗаполнено(Система) Тогда
			
			НоваяСтрока = СистемыРазработки.Добавить();
			НоваяСтрока.Система = Система;
			Если Направление = НастройкиАвтозаполнения[ВидыНастроек.НаправлениеДляЗаполненияЗаявки] Тогда
				НоваяСтрока.ГруппаЗаказчиков = ГруппаЗаказчиков;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Назначение) Тогда
		Назначение = НастройкиАвтозаполнения[ВидыНастроек.НазначениеДляЗаполненияЗаявки];
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Продукт) Тогда
		Продукт = НастройкиАвтозаполнения[ВидыНастроек.ПродуктДляЗаполненияЗаявки];
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
