///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает список подключаемых команды панели навигации
// 
// Возвращаемое значение:
//   Список значенией - список подключаемых команды панели навигации
//
Функция КомандыПанелиНавигации() Экспорт

	Команды = Новый СписокЗначений;   
	Команды.Добавить("История", "История", , БиблиотекаКартинок.ПанельНавигацииИстория);
	Команды.Добавить("Участники", "Участники", , БиблиотекаКартинок.Участники);	
	Команды.Добавить("Комментарии", "Комментарии", , БиблиотекаКартинок.Комментарии);
	Команды.Добавить("Файлы", "Файлы", , БиблиотекаКартинок.Файлы);
	Команды.Добавить("Связи", "Связи", , БиблиотекаКартинок.Связи);
	Команды.Добавить("СтруктураПодчиненности", "Структура подчиненности", , БиблиотекаКартинок.СтруктураПодчиненности);
	
	Возврат Команды;
	
КонецФункции

Функция СозданиеЗаявки(Знач ДанныеЗаполнения, Знач ТаблицаОписанияФайлов = Неопределено) Экспорт
	
	Результат = Новый Структура("Успешно, ДокументОбъект, ТекстОшибки", Истина);
	
	НачатьТранзакцию();
	
	Попытка
		СсылкаНаДокумент = Документы.ЗаявкаНаРазработку.ПолучитьСсылку();
		ТекстОписания = ДанныеЗаполнения.Описание;
		
		Если ТаблицаОписанияФайлов <> Неопределено Тогда
			РаботаСФайламиСервер.СохранитьФайлыНаСервере(СсылкаНаДокумент, ТаблицаОписанияФайлов);
			РедакторОписания.ЗаменитьСсылкиХранилищаНаВнутренние(ТекстОписания, ТаблицаОписанияФайлов);
		КонецЕсли;
		
		ДанныеЗаполнения.Описание = Новый ХранилищеЗначения(ТекстОписания, Новый СжатиеДанных(9));
		
		НовыйДокумент = Документы.ЗаявкаНаРазработку.СоздатьДокумент();
		НовыйДокумент.УстановитьСсылкуНового(СсылкаНаДокумент);
		НовыйДокумент.Заполнить(ДанныеЗаполнения);
		
		// Дополнительное свойство для записи даты последнего изменения
		НовыйДокумент.ДополнительныеСвойства.Вставить("ОбновитьДатыИзмененийИКоличествоСистем");
		НовыйДокумент.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Результат.Успешно = Ложь;
		НовыйДокумент = Неопределено;
		Результат.ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Результат.ДокументОбъект = НовыйДокумент;
	
	Возврат Результат;
	
КонецФункции

// Формирует строковое представление из всех систем заявки и помещает его в 
// реквизит ПредставлениеСистем. Используется в рабочих столах пользователей
// для быстрого отображения списка систем, участвующих в заявке.
//
// Параметры:
//  Заявка - ДокументОбъект.ЗаявкаНаРазработку - заявка, для которой необходимо
//           сформировать представление списка систем.
//
Процедура ЗаполнитьПредставлениеСистем(Заявка) Экспорт
	
	// Если системы не заполнены, представление очищается
	Если Заявка.СистемыРазработки.Количество() = 0 Тогда
		Заявка.ПредставлениеСистем = "";
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СистемыУчета.Наименование КАК Наименование
	|ИЗ
	|	Справочник.СистемыУчета КАК СистемыУчета
	|ГДЕ
	|	СистемыУчета.Ссылка В(&СписокСистем)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("СписокСистем", Заявка.СистемыРазработки.ВыгрузитьКолонку("Система"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		НаименованиеСистем = Новый Массив;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаименованиеСистем.Добавить(Выборка.Наименование);
		КонецЦикла;
		
		Заявка.ПредставлениеСистем = СтрСоединить(НаименованиеСистем, "; ");
	КонецЕсли;
	
КонецПроцедуры

Функция ДелегироватьЗаявку(Знач Заявка, Знач АвторЗаявки, Знач НовыйАвтор) Экспорт
	
	Результат = Новый Структура("ЕстьОшибка, ТекстСообщения", Ложь, "");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументЗадача.Ссылка КАК Задача
	|ИЗ
	|	Документ.Задача КАК ДокументЗадача
	|ГДЕ
	|	ДокументЗадача.Заказчик = &АвторЗаявки
	|	И (ВЫРАЗИТЬ(ДокументЗадача.ОбъектОснование КАК Документ.ЗаявкаНаРазработку)) = &Заявка";
	
	Запрос.УстановитьПараметр("АвторЗаявки", АвторЗаявки);
	Запрос.УстановитьПараметр("Заявка", Заявка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.ЗаявкаНаРазработку");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Заявка);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.Задача");
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Задача");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	ЗаявкаОбъект = Заявка.ПолучитьОбъект();
	ЗаявкаОбъект.Автор = НовыйАвтор;
	
	ШаблонСсылки = ОбщегоНазначения.ПолучитьШаблонНавигационнойСсылки(Заявка);
	
	ШаблоныПисьма = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма();
	
	ШаблонСообщения = "Пользователь <b>%1</b> делегировал(-а) Вам заявку: %2";
	
	СсылкаНаОбъект = СтрЗаменить(ШаблоныПисьма.АктивнаяСсылка, "<!-- link -->", ШаблонСсылки);
	СсылкаНаОбъект = СтрЗаменить(СсылкаНаОбъект, "<!-- title_link -->", Строка(Заявка));
	
	ШаблонСообщения = СтрШаблон(ШаблонСообщения, Строка(АвторЗаявки), СсылкаНаОбъект);
	
	ТекстПисьма = СтрЗаменить(ШаблоныПисьма.БлокДвеТаблицы, "<!-- left_table_1 -->", ШаблонСообщения);
	
	Если НЕ ТранзакцияАктивна() Тогда
		НачатьТранзакцию();
	КонецЕсли;

	Попытка
		ЗаявкаОбъект.Записать();
		
		РегистрыСведений.ДатыАктуальностиЗаявокНаРазработку.СменитьАвтора(ЗаявкаОбъект.Ссылка, ЗаявкаОбъект.Автор);
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗадачаОбъект = Выборка.Задача.ПолучитьОбъект();
			ЗадачаОбъект.Заказчик = НовыйАвтор;
			
			Если ЗадачаОбъект.Назначена = АвторЗаявки Тогда
				ЗадачаОбъект.Назначена = НовыйАвтор;
			КонецЕсли;
			
			ЗадачаОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Результат.ЕстьОшибка = Истина;
		Результат.ТекстСообщения = "Делегирование заявки не выполнено по причине: " + ОписаниеОшибки();
	КонецПопытки;
	
	Если НЕ Результат.ЕстьОшибка Тогда
		Результат.ТекстСообщения = "Делегирование заявки выполнено успешно.";
		
		// Отправка оповещения по установленным настройкам
		Сообщение = Новый Структура("ТекстСообщения, СообщениеSDMS, КатегорияСообщения, Инициатор", ТекстПисьма, " делегировал(-а) Вам заявку.",
			Перечисления.КатегорииСообщенийПользователя.ДоступКОбъекту, АвторЗаявки);
		
		РегистрыСведений.ОчередьСобытийНаОбработку.ОтправитьОповещениеФиксированныеПолучателям(Заявка, НовыйАвтор, Сообщение, АвторЗаявки);
		
		// Добавление информации о делегированиии в историю объекта 
		ОтправитьИсториюДелегирования(Заявка, НовыйАвтор, АвторЗаявки);
	КонецЕсли;
	
	Возврат Результат;	
	
КонецФункции

// Возвращает признак есть ли подчиненные задачи
//
// Параметры:
//  Ссылка	 - ДокументСсылка.ЗаявкаНаРазработку - Ссылка на документ
// 
// Возвращаемое значение:
//   Булево - Истина, если есть задачи, иначе ложь 
//
Функция ЕстьПодчиненныеЗадачи(Знач Ссылка) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Задача.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	Задача.ОбъектОснование = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();	
	
	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции

Функция КлючПользовательскихНастроекДинамическогоСписка() Экспорт
	
	Возврат "Документ.ЗаявкаНаРазработку.Форма.ФормаСписка.Список";
	
КонецФункции

// Возвращает количество подчиненных задач заявки
//
// Параметры:
//  Ссылка	 - Документ.ЗаявкаНаРазработку	 - Заявка
// 
// Возвращаемое значение:
//   Число - Количество задач 
//
Функция КоличествоПодчиненныхЗадач(Ссылка) Экспорт
	
	ЗначенияДополнительныхРеквизитовОбъектов = РегистрыСведений.ЗначенияДополнительныхРеквизитовОбъектов;
	Возврат ЗначенияДополнительныхРеквизитовОбъектов.ЗначениеДополнительногоРеквизита(Ссылка, 
		ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.КоличествоПодчиненныхЗадач);

КонецФункции

Функция ПараметрыЮрЛица(Знач Направление) Экспорт
	
	ВидимостьЮрЛица = Ложь;
	ОсновноеЮрЛицо = Неопределено;
	СписокЮрЛиц = Новый СписокЗначений();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИспользованиеЮридическихЛицНаправленийСрезПоследних.Использование КАК Использование
	|ИЗ
	|	РегистрСведений.ИспользованиеЮридическихЛицНаправлений.СрезПоследних(, Направление = &Направление) КАК ИспользованиеЮридическихЛицНаправленийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаправленияРазработкиЮридическиеЛица.ЮридическоеЛицо КАК ЮридическоеЛицо,
	|	ПРЕДСТАВЛЕНИЕ(НаправленияРазработкиЮридическиеЛица.ЮридическоеЛицо) КАК ЮридическоеЛицоПредставление,
	|	НаправленияРазработки.ОсновноеЮридическоеЛицо = НаправленияРазработкиЮридическиеЛица.ЮридическоеЛицо КАК ОсновноеЮрЛицо
	|ИЗ
	|	Справочник.НаправленияРазработки.ЮридическиеЛица КАК НаправленияРазработкиЮридическиеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаправленияРазработки КАК НаправленияРазработки
	|		ПО (НаправленияРазработки.Ссылка = НаправленияРазработкиЮридическиеЛица.Ссылка)
	|			И (НаправленияРазработки.Ссылка = &Направление)
	|ГДЕ
	|	НаправленияРазработки.Ссылка = &Направление
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновноеЮрЛицо УБЫВ,
	|	ЮридическоеЛицо";
	
	Запрос.УстановитьПараметр("Направление", Направление);
	Пакет = Запрос.ВыполнитьПакет();
	
	Если НЕ Пакет[0].Пустой() Тогда
		Выборка = Пакет[0].Выбрать();
		Выборка.Следующий();
		
		Если Выборка.Использование И НЕ Пакет[1].Пустой() Тогда
			Выборка = Пакет[1].Выбрать();
			
			Пока Выборка.Следующий() Цикл
				СписокЮрЛиц.Добавить(Выборка.ЮридическоеЛицо, Выборка.ЮридическоеЛицоПредставление);
				
				Если Выборка.ОсновноеЮрЛицо Тогда
					ОсновноеЮрЛицо = Выборка.ЮридическоеЛицо;
				КонецЕсли;
			КонецЦикла;
			
			ВидимостьЮрЛица = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЮрЛица = Новый Структура("ВидимостьЮрЛица, ОсновноеЮрЛицо, СписокЮрЛиц", ВидимостьЮрЛица, ОсновноеЮрЛицо, СписокЮрЛиц);
	
	Возврат ПараметрыЮрЛица;
	
КонецФункции
	
Функция ПолучитьПрефикс() Экспорт
	
	Возврат "ЗР";
	
КонецФункции

Функция ПолучитьСписокДоступныхСистем(Знач Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаРазработкуСистемыРазработки.Система КАК Система,
	|	ЗаявкаНаРазработкуСистемыРазработки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТекущаяЗаявкаИСистема
	|ИЗ
	|	Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ЗаявкаНаРазработкуСистемыРазработки
	|ГДЕ
	|	ЗаявкаНаРазработкуСистемыРазработки.Ссылка = &Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТекущаяЗаявкаИСистема.Система КАК Система
	|ИЗ
	|	ТекущаяЗаявкаИСистема КАК ТекущаяЗаявкаИСистема
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|		ПО ТекущаяЗаявкаИСистема.Ссылка = СтатусыЗаявокПоСистемам.Заявка
	|			И ТекущаяЗаявкаИСистема.Система = СтатусыЗаявокПоСистемам.Система
	|			И (СтатусыЗаявокПоСистемам.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК Задача
	|		ПО ТекущаяЗаявкаИСистема.Ссылка = Задача.ОбъектОснование
	|			И ТекущаяЗаявкаИСистема.Система = Задача.СистемаУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТекущаяЗаявкаИСистема.Система
	|ИЗ
	|	ТекущаяЗаявкаИСистема КАК ТекущаяЗаявкаИСистема
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|		ПО ТекущаяЗаявкаИСистема.Ссылка = СтатусыЗаявокПоСистемам.Заявка
	|			И ТекущаяЗаявкаИСистема.Система = СтатусыЗаявокПоСистемам.Система
	|			И (СтатусыЗаявокПоСистемам.Статус <> ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))";
	
	Запрос.УстановитьПараметр("Заявка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Система"); 

КонецФункции

// Создает подчиненную задачу по системе
//
// Параметры:
//  ЗаявкаНаРазработку	 - ДокументСсылка.ЗаявкаНаРазработку - ссылка на документ заявка на разработку
//  Параметры				 - Структура								 - данные задачи
// 
// Возвращаемое значение:
//  Структура - структура с данными о результате работы функции
//  * Успешно - Булево	- Ложь, если была ошибка, иначе Истина.
//  * ТекстОшибки - Строка - Описание возникшей ошибки.
//  * Задача - ДокументСсылка.Задача - Ссылка на созданный документ.
//
Функция СоздатьЗадачуПоСистеме(Знач ЗаявкаНаРазработку, Знач Параметры) Экспорт
	
	Результат = Новый Структура("Успешно, ТекстОшибки", Истина, "");
	
	ТекущаяДата = ТекущаяДатаСеанса();
	Автор = ПараметрыСеанса.ТекущийПользователь;
	
	РезультатПолученияДанныхАвтора = Пользователи.ПолучитьДанныеПользователя(Автор);

	Если НЕ РезультатПолученияДанныхАвтора.Успешно Тогда
		ЗаполнитьЗначенияСвойств(Результат, РезультатПолученияДанныхАвтора);
		Возврат Результат;
	КонецЕсли;
	
	ДанныеАвтора = РезультатПолученияДанныхАвтора.Данные;
	
	ПринадлежитIT = (ДанныеАвтора.ITСтруктура ИЛИ ДанныеАвтора.ПринадлежитITОтделу);
	
	Если НЕ ПринадлежитIT Тогда
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = "Автором задачи может быть только сотрудник IT-отдела.";
		Возврат Результат;
	КонецЕсли;
	
	РезультатПолученияДанныхЗаявки = ПолучитьДанныеЗаявкиПоСистеме(ЗаявкаНаРазработку, Параметры.СистемаУчета);
	
	Если НЕ РезультатПолученияДанныхЗаявки.Успешно Тогда
		ЗаполнитьЗначенияСвойств(Результат, РезультатПолученияДанныхЗаявки);
		Возврат Результат;
	КонецЕсли;
	
	ДанныеЗаявки = РезультатПолученияДанныхЗаявки.Данные;
	
	Если ДанныеЗаявки.Черновик Тогда
	    Результат.Успешно = Ложь;
		Результат.ТекстОшибки = "Нельзя создавать задачи на основании заявки со статусом ""Черновик"".";
		Возврат Результат;
	ИначеЕсли ДанныеЗаявки.СтатусПоСистеме = Справочники.СтатусыОбъектов.Отклонен Тогда
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = "Нельзя создавать задачи по отклоненной системе.";
		Возврат Результат;
	КонецЕсли;
	
	СрокСдачи = ?(ЗначениеЗаполнено(Параметры.СрокСдачи), Параметры.СрокСдачи, ДанныеЗаявки.СрокРеализации);
	Заказчик = ?(ЗначениеЗаполнено(Параметры.Заказчик), Параметры.Заказчик, ДанныеЗаявки.Автор);
	
	Если ЗначениеЗаполнено(СрокСдачи) И СрокСдачи <= НачалоДня(ТекущаяДата) Тогда
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = "Срок сдачи должен быть больше текущей даты.";
		Возврат Результат;
	КонецЕсли;
		
	РезультатПроверки = Документы.Задача.ПроверитьВозможностьСозданияЗадачи(Истина, ЗаявкаНаРазработку);
	
	Если НЕ РезультатПроверки.РазрешитьСоздание Тогда
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = РезультатПроверки.ТекстСообщения;
		Возврат Результат;
	КонецЕсли;	
					
	// Если прошли все проверки создаем задачу	
	НоваяЗадача = Документы.Задача.СоздатьДокумент();
	НоваяЗадача.УстановитьСсылкуНового(Документы.Задача.ПолучитьСсылку());
	НоваяЗадача.УстановитьНовыйНомер(Документы.Задача.ПолучитьПрефикс());
		
	НоваяЗадача.Дата = ТекущаяДата;	
	НоваяЗадача.Статус = Справочники.СтатусыОбъектов.Новый;
	НоваяЗадача.Назначение = ДанныеЗаявки.Назначение;
	НоваяЗадача.СерьезностьОшибки = ДанныеЗаявки.СерьезностьОшибки;
	НоваяЗадача.СистемаУчета = Параметры.СистемаУчета;
	НоваяЗадача.ОбъектОснование = ЗаявкаНаРазработку;
	НоваяЗадача.Заказчик = Заказчик;
	НоваяЗадача.Наименование = ДанныеЗаявки.Наименование;
	НоваяЗадача.Направление = ДанныеЗаявки.Направление;
	НоваяЗадача.Описание = ДанныеЗаявки.Описание;
	НоваяЗадача.ВидПроцесса = ДанныеЗаявки.ВидПроцесса;
	НоваяЗадача.Автор = Автор;
	НоваяЗадача.Филиал = ДанныеАвтора.Филиал;
	НоваяЗадача.КомандаРазработчиков = ДанныеАвтора.Команда;
	
	Если ЗначениеЗаполнено(СрокСдачи) Тогда
		НоваяЗадача.ДополнительныеСвойства.Вставить("СрокСдачи", СрокСдачи);
	КонецЕсли;
		
	Попытка	
		НоваяЗадача.Записать();	
	Исключение
		ЗаписьЖурналаРегистрации("ЗаявкаНаРазработку.СоздатьЗадачуПоСистеме", УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = "Не удалось записать задачу.";
		Возврат Результат;
	КонецПопытки;
		
	Результат.Вставить("Задача", НоваяЗадача.Ссылка);
	
	Возврат Результат;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИСТОРИЯ ИЗМЕНЕНИЙ ОБЪЕКТА, ОПОВЕЩЕНИЕ ПОЛЬЗОВАТЕЛЕЙ

// Возвращает структуру проверяемых данных
// 
// Возвращаемое значение:
//   - Структура
//		* Реквизиты	 - Массив	 - названия реквизитов которые требуют проверки
//		* ТабличныеЧасти	 - Структура	 - табличные части и их реквизиты которые требуют проверки.
//			Ключ - название табличной части
//			Значение - реквизит табличной части который требуется проверить
//
Функция ПроверяемыеСвойстваОбъекта() Экспорт
	
	Результат = Новый Структура("Реквизиты, ТабличныеЧасти", Новый Массив, Новый Структура);
	
	// Названия реквизитов объекта
	Результат.Реквизиты.Добавить("Назначение");
	Результат.Реквизиты.Добавить("Направление");
	Результат.Реквизиты.Добавить("Наименование");
	Результат.Реквизиты.Добавить("ОбъектОснование");
	Результат.Реквизиты.Добавить("Описание");
	Результат.Реквизиты.Добавить("ФинальныйСтатус");
	Результат.Реквизиты.Добавить("Черновик");
	Результат.Реквизиты.Добавить("ЮридическоеЛицо");
	Результат.Реквизиты.Добавить("СрокРеализации");
	
	ПоляТабличнойЧасти = Новый Массив;
	ПоляТабличнойЧасти.Добавить("Система");
	ПоляТабличнойЧасти.Добавить("ГруппаЗаказчиков");
	
	ДанныеТабличнойЧасти = Новый Структура;
	ДанныеТабличнойЧасти.Вставить("Поля", ПоляТабличнойЧасти);
	ДанныеТабличнойЧасти.Вставить("КлючевоеПоле", "Система");
	
	Результат.ТабличныеЧасти.Вставить("СистемыРазработки", ДанныеТабличнойЧасти);
	
	Возврат Результат;
	
КонецФункции

// Массив имен реквизитов, тексты которых подвергаются семантическому контролю
// 
// Возвращаемое значение:
//   - Массив
//
Функция РеквизитыСемантическогоАнализа() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить("Описание");
	Массив.Добавить("Наименование");
	
	Возврат Массив;
	
КонецФункции

Функция АвтосохраняемыеРеквизиты() Экспорт
	
	СохраняемыеДанные = Новый Структура;
	
	СохраняемыеДанные.Вставить("РеквизитыОбъекта", Новый Массив);
	СохраняемыеДанные.Вставить("ТабличныеЧасти", Новый Структура);
	СохраняемыеДанные.Вставить("РеквизитыФормы", Новый Массив);
	
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("Наименование");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("Назначение");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("СерьезностьОшибки");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("ВидПроцесса");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("Направление");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("ОбъектОснование");
	
	СохраняемыеДанные.ТабличныеЧасти.Вставить("СистемыРазработки", "Система, ГруппаЗаказчиков");
	
	Возврат СохраняемыеДанные;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ИдентификаторСозданияИзЗадачи() Экспорт
	
	Возврат "Документ.Задача";
	
КонецФункции

// Рассчитать значение счетчика для API.ПолучитьСчетчикиИнструментов()
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь
// 
// Возвращаемое значение:
//  Число - количество заявок на доработку
Функция РассчитатьЗначениеСчетчикаЗаявокНаДоработку(Знач Пользователь) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументЗаявка.Ссылка) КАК Количество
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ДокументЗаявка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО Пользователи.Ссылка = ДокументЗаявка.Автор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
	|		ПО ДокументЗаявка.Ссылка = МинимальныеСтатусыЗаявок.Заявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемамФилиалов КАК СтатусыЗаявокПоСистемамФилиалов
	|		ПО ДокументЗаявка.Ссылка = СтатусыЗаявокПоСистемамФилиалов.Заявка
	|		И СтатусыЗаявокПоСистемамФилиалов.Филиал = Пользователи.Филиал
	|ГДЕ
	|	ДокументЗаявка.Автор = &Пользователь
	|	И ЕСТЬNULL(СтатусыЗаявокПоСистемамФилиалов.Статус, МинимальныеСтатусыЗаявок.Статус) В
	|	(ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.НаДоработку), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ЗапросТребований))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Количество;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

// Системный обработчик получения полей для представления объекта или ссылки.
//
// Параметры:
//  Поля                 - Массив - имена полей, которые нужны для формирования 
//                         представления объекта или ссылки.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) 
//                         обработки события.
//
Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Номер");
	Поля.Добавить("Наименование");	
	
КонецПроцедуры

// Системный обработчик получения представления объекта или ссылки.
//
// Параметры:
//  Данные               - Структура - значения полей, из которых формируется 
//                         представление.
//  Представление        - Строка - строка, в которую нужно поместить представление 
//                         объекта или ссылки.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) 
//                         обработки события.
//
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = СтрШаблон("Заявка на разработку %1. %2", Данные.Номер, Данные.Наименование);
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ЭтоАдминистратор = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("Администратор");
	
	Если НЕ ЭтоАдминистратор И ВидФормы = "ФормаОбъекта" И Параметры.Свойство("Ключ") Тогда
		РезультатПроверки = ПолнотекстовыйПоискВызовСервера.ПолучитьДоступностьЗаявки(Параметры.Ключ.УникальныйИдентификатор());
		
		Если ТипЗнч(РезультатПроверки) = Тип("Структура") Тогда
			СтандартнаяОбработка = Ложь;
			
			// Напрямую установить параметру Параметры значения РезультатПроверки не удалось
			Для Каждого Параметр Из РезультатПроверки Цикл
				Параметры.Вставить(Параметр.Ключ, Параметр.Значение);
			КонецЦикла;
			
			ВыбраннаяФорма = "ОбщаяФорма.ПопыткаПросмотраЧерновика";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ДополнитьНомерЗаявки(Знач НомерЗаявки) Экспорт
	
	Если СтрДлина(НомерЗаявки) < Метаданные.Документы.ЗаявкаНаРазработку.ДлинаНомера Тогда
		ОписаниеТипаЧисло = ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный);
		НомерЗаявки = Документы.ЗаявкаНаРазработку.ПолучитьПрефикс() + Формат(ОписаниеТипаЧисло.ПривестиЗначение(НомерЗаявки), "ЧЦ=10; ЧВН=; ЧГ=");
	КонецЕсли;
	
	Возврат НомерЗаявки;
	
КонецФункции

// Процедура - добавляет записи в регистр для отправки уведомлений пользователям
//
// Параметры:
//  Заявка			 - ДокумантСсылка.ЗаявкаНаРазработку - заявка, в которую добавлены системы
//  СистемыУчета	 - СписокЗначений - список добавленных систем
//  АвторИзменений	 - СправочникСсылка.Пользователи - кто добавил системы
//  ДатаИзменения	 - Дата - когда добавлены системы
//
Процедура ОповеститьОДобавленииСистемы(Знач Заявка, Знач СистемыУчета, Знач АвторИзменений, ДатаИзменения) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаРазработку.Ссылка КАК Заявка,
	|	ЗаявкаНаРазработку.Направление КАК Направление,
	|	ЗаявкаНаРазработкуСистемыРазработки.Система КАК Система,
	|	ЗаявкаНаРазработкуСистемыРазработки.ГруппаЗаказчиков КАК ГруппаЗаказчиков
	|ПОМЕСТИТЬ НаправлениеСистемаАвторЗаявки
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ЗаявкаНаРазработкуСистемыРазработки
	|		ПО (ЗаявкаНаРазработкуСистемыРазработки.Ссылка = ЗаявкаНаРазработку.Ссылка)
	|			И (ЗаявкаНаРазработкуСистемыРазработки.Система В (&ДобавленныеСистемы))
	|ГДЕ
	|	ЗаявкаНаРазработку.Ссылка = &Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиУведомленийПользователей.Пользователь КАК Пользователь,
	|	НастройкиУведомленийПользователей.Система КАК Система
	|ИЗ
	|	НаправлениеСистемаАвторЗаявки КАК НаправлениеСистемаАвторЗаявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУведомленийПользователей КАК НастройкиУведомленийПользователей
	|		ПО (НастройкиУведомленийПользователей.ВидУведомления = ЗНАЧЕНИЕ(Перечисление.ВидУведомления.СозданиеЗаявок))
	|			И НаправлениеСистемаАвторЗаявки.Направление = НастройкиУведомленийПользователей.Направление
	|			И НаправлениеСистемаАвторЗаявки.Система = НастройкиУведомленийПользователей.Система
	|			И НаправлениеСистемаАвторЗаявки.ГруппаЗаказчиков = НастройкиУведомленийПользователей.ГруппаЗаказчиков
	|			И (НастройкиУведомленийПользователей.Пользователь <> &АвторИзменений)
	|ИТОГИ ПО
	|	Система";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("ДобавленныеСистемы", СистемыУчета);
	Запрос.УстановитьПараметр("АвторИзменений", АвторИзменений);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	ВыборкаСистема = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСистема.Следующий() Цикл
		МассивПользователей = Новый Массив;
		
		Выборка = ВыборкаСистема.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МассивПользователей.Добавить(Выборка.Пользователь);
		КонецЦикла;
		
		ТекстСообщения = 
		"<table>
		|	<tr><td style = ""font-family: Verdana, Arial, sans-serif; font-weight: normal; padding: 0; margin: 0; word-wrap: normal; word-break: keep-all; -webkit-hyphens: auto; -moz-hyphens: auto; hyphens: auto; vertical-align: top; text-align: left; font-size: 14px; line-height: 14px;""><!-- event_date --> <strong style = ""margin-left: 5px;""><!-- event_user --></strong> добавил(-а) систему <strong style = ""margin-left: 5px;""><!-- event_system --></strong>.</td></tr>
		|</table>";
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "<!-- event_date -->", Формат(ДатаИзменения, "ДФ='dd.MM.yyyy ЧЧ:мм'"));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "<!-- event_user -->", АвторИзменений);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "<!-- event_system -->", ВыборкаСистема.Система);

		СообщениеПользователям = Новый Структура("ТекстСообщения, КатегорияСообщения", ТекстСообщения);
			
		РегистрыСведений.ПодготовленныеСообщенияПользователяПоКатегориям.Добавить(
			МассивПользователей, Заявка, СообщениеПользователям);
	КонецЦикла;
		
КонецПроцедуры

// Устанавливает ограничения использования полей в динамических списках 
// документа "Задача".
//
// Параметры:
//  Список - ДинамическийСписок - динамический список.
//
Процедура УстановитьОграниченияСписка(Список) Экспорт
	
	// Поля, исключаемые из группировки
	ИсключаемыеПоля = Новый Массив;    
	ИсключаемыеПоля.Добавить("Ссылка");
	ИсключаемыеПоля.Добавить("ИндексКартинки");
	ИсключаемыеПоля.Добавить("ПометкаУдаления");
	ИсключаемыеПоля.Добавить("Проведен");
	ИсключаемыеПоля.Добавить("Ответственный");
	ИсключаемыеПоля.Добавить("ИмпортированаИзRedmine");
	ИсключаемыеПоля.Добавить("НомерЗадачиRedmine");
	ИсключаемыеПоля.Добавить("Заказчик");
	
	Список.УстановитьОграниченияИспользованияВГруппировке(ИсключаемыеПоля);
	
	// Поля, исключаемые из сортировки 
	ИсключаемыеПоля = Новый Массив;    
	ИсключаемыеПоля.Добавить("Ссылка");
	ИсключаемыеПоля.Добавить("ИндексКартинки");
	ИсключаемыеПоля.Добавить("ПометкаУдаления");
	ИсключаемыеПоля.Добавить("Проведен");
	ИсключаемыеПоля.Добавить("Ответственный");
	ИсключаемыеПоля.Добавить("ИмпортированаИзRedmine");
	ИсключаемыеПоля.Добавить("НомерЗадачиRedmine");
	ИсключаемыеПоля.Добавить("Заказчик");
	ИсключаемыеПоля.Добавить("Основание");	
	Список.УстановитьОграниченияИспользованияВПорядке(ИсключаемыеПоля);
	
	// Поля, исключаемые из отбора
	ИсключаемыеПоля = Новый Массив;    
	ИсключаемыеПоля.Добавить("ИндексКартинки");
	ИсключаемыеПоля.Добавить("ПометкаУдаления");
	ИсключаемыеПоля.Добавить("Проведен");
	ИсключаемыеПоля.Добавить("Ответственный");
	ИсключаемыеПоля.Добавить("ИмпортированаИзRedmine");
	ИсключаемыеПоля.Добавить("НомерЗадачиRedmine");
	ИсключаемыеПоля.Добавить("Заказчик");
	ИсключаемыеПоля.Добавить("ФинальныйСтатус");
	ИсключаемыеПоля.Добавить("ПараметрыДанных");
	
	Список.УстановитьОграниченияИспользованияВОтборе(ИсключаемыеПоля);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОтправитьИсториюДелегирования(Знач Заявка, Знач НовыйАвтор, Знач АвторЗаявки)
	
	СтруктураСообщение = ИсторияИзменений.СформироватьШаблонИсторииДелегирования(Заявка, НовыйАвтор, АвторЗаявки);
		
	РегистрыСведений.ИсторияИзмененийОбъектовПоСобытиям.Добавить(Заявка, СтруктураСообщение);
	
КонецПроцедуры	

Функция ПолучитьДанныеЗаявкиПоСистеме(Знач ЗаявкаНаРазработку, Знач Система)
	
	Результат = Новый Структура("Успешно, ТекстОшибки", Истина, "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ЗаявкаНаРазработкуСистемыРазработки.Ссылка КАК Ссылка,
	|	ЗаявкаНаРазработку.СрокРеализации КАК СрокРеализации,
	|	ЗаявкаНаРазработку.Автор КАК Автор,
	|	ЗаявкаНаРазработку.Наименование КАК Наименование,
	|	ЗаявкаНаРазработку.Направление КАК Направление,
	|	ЗаявкаНаРазработку.Описание КАК Описание,
	|	ЗаявкаНаРазработку.ВидПроцесса КАК ВидПроцесса,
	|	ЗаявкаНаРазработку.Назначение КАК Назначение,
	|	ЗаявкаНаРазработку.СерьезностьОшибки КАК СерьезностьОшибки,
	|	ЗаявкаНаРазработку.Черновик КАК Черновик,
	|	ЕСТЬNULL(СтатусыЗаявокПоСистемам.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый)) КАК СтатусПоСистеме
	|ИЗ
	|	Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ЗаявкаНаРазработкуСистемыРазработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО ЗаявкаНаРазработкуСистемыРазработки.Ссылка = ЗаявкаНаРазработку.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|		ПО ЗаявкаНаРазработкуСистемыРазработки.Ссылка = СтатусыЗаявокПоСистемам.Заявка
	|			И ЗаявкаНаРазработкуСистемыРазработки.Система = СтатусыЗаявокПоСистемам.Система
	|ГДЕ
	|	ЗаявкаНаРазработкуСистемыРазработки.Ссылка = &ЗаявкаНаРазработку
	|	И ЗаявкаНаРазработкуСистемыРазработки.Система = &Система";	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ЗаявкаНаРазработку", ЗаявкаНаРазработку);
	Запрос.УстановитьПараметр("Система", Система);	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		СтруктураЗаявки = Новый Структура;
		СтруктураЗаявки.Вставить("Ссылка", ЗаявкаНаРазработку);
		СтруктураЗаявки.Вставить("Автор", Выборка.Автор);
		СтруктураЗаявки.Вставить("ВидПроцесса", Выборка.ВидПроцесса);	
		СтруктураЗаявки.Вставить("Назначение", Выборка.Назначение);
		СтруктураЗаявки.Вставить("Наименование", Выборка.Наименование);
		СтруктураЗаявки.Вставить("Направление", Выборка.Направление);
		СтруктураЗаявки.Вставить("Описание", Выборка.Описание);
		СтруктураЗаявки.Вставить("СрокРеализации", Выборка.СрокРеализации);	
		СтруктураЗаявки.Вставить("СерьезностьОшибки", Выборка.СерьезностьОшибки);
		СтруктураЗаявки.Вставить("Черновик", Выборка.Черновик);
		СтруктураЗаявки.Вставить("СтатусПоСистеме", Выборка.СтатусПоСистеме);
					
		Результат.Вставить("Данные", СтруктураЗаявки); 
	Иначе
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = "В заявке отсутствует указанная система.";
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
