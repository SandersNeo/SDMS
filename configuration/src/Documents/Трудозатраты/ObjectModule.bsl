///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ВнешнееСоединение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда

#Область ОписаниеПеременных

// Управляет проверкой запрета на изменение объекта 
// (реквизит ИзменениеЗапрещено и проверка даты запрета изменения)
Перем ОтключитьПроверкуЗапретаИзменения Экспорт;

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ИзменениеЗапрещено И НЕ ОтключитьПроверкуЗапретаИзменения Тогда  
		ВызватьИсключение "Документ недоступен для изменения.";  
	КонецЕсли;  
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	Если ДополнительныеСвойства.Свойство("Собрание") И ЗначениеЗаполнено(ДополнительныеСвойства.Собрание) Тогда	 
		ИнтеграцияДополнительныхПодсистем.ОбработатьСобраниеВТрудозатратах(ЭтотОбъект, ДополнительныеСвойства.Собрание, Объект);		    		
		ДополнительныеСвойства.Вставить("Объект", Объект);		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект) Тогда  
		ВызватьИсключение "Не заполнен ""Объект""";  
	КонецЕсли;
	
	ОбщегоНазначения.ПроверитьДатуЗапретаИзмененияДанных(Дата, ОтключитьПроверкуЗапретаИзменения);
	
	Если Ссылка.Пустая() Тогда
		Автор = ПараметрыСеанса.ТекущийПользователь;
		ЗаполнитьРеквизитыТрудозатраты(); 
	КонецЕсли;     
	
	ДанныеСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Затрата, Объект, Услуга, Дата");
	
	Цена = 0;
	ПредыдущаяСтоимость = 0;
	Стоимость = 0;
	Если ЗначениеЗаполнено(ЮридическоеЛицо) Тогда 
		Если ЗначениеЗаполнено(Услуга) Тогда
			Цена = РегистрыСведений.СтоимостьУслуг.ПолучитьСтоимость(Услуга, ЮридическоеЛицо, Дата); 
			Стоимость = Цена * Затрата;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеСсылки.Услуга) Тогда
			Если (ДанныеСсылки.Услуга = Услуга) И (ДанныеСсылки.Дата = Дата) Тогда
				ПредыдущаяЦена = Цена;
			Иначе
				ПредыдущаяЦена = РегистрыСведений.СтоимостьУслуг.ПолучитьСтоимость(ДанныеСсылки.Услуга, ЮридическоеЛицо, ДанныеСсылки.Дата);	
			КонецЕсли; 
			
			ПредыдущаяСтоимость = ПредыдущаяЦена * ДанныеСсылки.Затрата;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("Цена", Цена);
	
	ДанныеПересчета = Новый Массив;
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда 
		Если Объект <> ДанныеСсылки.Объект Тогда
			ДанныеПересчета.Добавить(Новый Структура("Затрата, Стоимость, Объект", -Затрата, -Стоимость, ДанныеСсылки.Объект)); 
		Иначе
			ДанныеПересчета.Добавить(Новый Структура("Затрата, Стоимость, Объект", -Затрата, -Стоимость, Объект));
		КонецЕсли;
	ИначеЕсли Ссылка.Пустая() Тогда 
		ДанныеПересчета.Добавить(Новый Структура("Затрата, Стоимость, Объект", Затрата, Стоимость, Объект));
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение И Объект <> ДанныеСсылки.Объект Тогда 
		// С одного документа убрать, на другой добавить
		ДанныеПересчета.Добавить(Новый Структура("Затрата, Стоимость, Объект", -Затрата, -Стоимость, ДанныеСсылки.Объект));
		ДанныеПересчета.Добавить(Новый Структура("Затрата, Стоимость, Объект", Затрата, Стоимость, Объект));
	ИначеЕсли НЕ Ссылка.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 
		ДанныеПересчета.Добавить(Новый Структура("Затрата, Стоимость, Объект", Затрата, Стоимость, Объект));
	ИначеЕсли (Затрата <> ДанныеСсылки.Затрата) ИЛИ (Стоимость <> ПредыдущаяСтоимость) Тогда 
		ДанныеПересчета.Добавить(Новый Структура("Затрата, Стоимость, Объект", 
													Затрата - ДанныеСсылки.Затрата, Стоимость - ПредыдущаяСтоимость, Объект));
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ДанныеПересчета", ДанныеПересчета); 
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
		Автор = ПараметрыСеанса.ТекущийПользователь;
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		ВызватьИсключение "Неверный тип данных заполнения";
	КонецЕсли;
	
	ТипИсточника = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипИсточника = Тип("Структура") Тогда	
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
		Если ЗначениеЗаполнено(Объект) Тогда
			ТипОбъекта = ТипЗнч(Объект);
			
			Если ТипОбъекта = Тип("ДокументСсылка.Задача") Тогда
				// Получаем заявку к которой относится задача
				Заявка = РегистрыСведений.СвязьОбъектовСЗаявкамиНаРазработку.ПолучитьЗаявку(Объект);
				
				Если ЗначениеЗаполнено(Заявка) Тогда
					ЮридическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заявка, "ЮридическоеЛицо");
				КонецЕсли;	
			ИначеЕсли ТипОбъекта <> Тип("ДокументСсылка.ВнутренниеТрудозатраты") Тогда
				// Заполнение юридического лица не требуется только для внутренних трудозатрат
				ЮридическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ЮридическоеЛицо");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
#Область Движения_Трудозатраты
	
	ДвиженияТрудозатрат = Движения.Трудозатраты;
	ДвиженияТрудозатрат.Очистить();
	ДвиженияТрудозатрат.Записывать = Истина;
	
	НоваяТрудозатрата = ДвиженияТрудозатрат.Добавить();
	НоваяТрудозатрата.Регистратор = Ссылка;
	НоваяТрудозатрата.Период = Дата;
	НоваяТрудозатрата.Объект = Объект;
	НоваяТрудозатрата.Затрата = Затрата;
	НоваяТрудозатрата.ВидДеятельности = ВидДеятельности;
	НоваяТрудозатрата.Пользователь = Пользователь;
	НоваяТрудозатрата.Комментарий = Комментарий;
	НоваяТрудозатрата.Услуга = Услуга;
	НоваяТрудозатрата.ITСтруктура = ITСтруктура;
	НоваяТрудозатрата.Автор = ПараметрыСеанса.ТекущийПользователь;
	НоваяТрудозатрата.ДатаИзменения = ТекущаяДатаСеанса();
	НоваяТрудозатрата.Филиал = Филиал;
	НоваяТрудозатрата.РольПользователя = Справочники.РолиПользователей.ПолучитьРольПользователя(Пользователь, Дата);
	
#КонецОбласти

#Область Движения_ОказанныеУслуги

	// Если заполнена услуга, юридическое лицо и трудозатраты относятся к задаче
	// или заявке, то нужно сделать движения по регистру накопления ОказанныеУслуги
	
	ДвиженияУслуг = Движения.ОказанныеУслуги;
	ДвиженияУслуг.Очистить();
	ДвиженияУслуг.Записывать = Истина;
	
	Если ЗначениеЗаполнено(ЮридическоеЛицо) И ЗначениеЗаполнено(Услуга) Тогда
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.Задача") Тогда
			ОбъектОснование = РегистрыСведений.СвязьОбъектовСЗаявкамиНаРазработку.ПолучитьЗаявку(Объект);
		Иначе
			ОбъектОснование = Объект;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектОснование) Тогда
			Цена = ДополнительныеСвойства.Цена;
			
			Если Цена > 0 Тогда
				НоваяОказаннаяУслуга = ДвиженияУслуг.Добавить();
				НоваяОказаннаяУслуга.Регистратор = Ссылка;
				НоваяОказаннаяУслуга.Период = Дата;
				НоваяОказаннаяУслуга.Направление = Направление;
				НоваяОказаннаяУслуга.ЮридическоеЛицо = ЮридическоеЛицо;
				НоваяОказаннаяУслуга.Услуга = Услуга;
				НоваяОказаннаяУслуга.Исполнитель = Пользователь;
				НоваяОказаннаяУслуга.Филиал = Филиал;
				НоваяОказаннаяУслуга.ОбъектОснование = ОбъектОснование;
				НоваяОказаннаяУслуга.Количество = Затрата;
				НоваяОказаннаяУслуга.Цена = Цена;
				НоваяОказаннаяУслуга.Сумма = Затрата * Цена;
				НоваяОказаннаяУслуга.ДатаПоследнегоПроведения = ТекущаяДатаСеанса();
				НоваяОказаннаяУслуга.Автор = ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

#КонецОбласти

	ЗафиксироватьПересчетТрудозатрат();
	
	Если ДополнительныеСвойства.Свойство("Собрание") И ЗначениеЗаполнено(ДополнительныеСвойства.Собрание) Тогда	 
		ИнтеграцияДополнительныхПодсистем.СохранитьСобраниеВТрудозатратах(Ссылка, ДополнительныеСвойства.Собрание);		    		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ) 
	
	ЗафиксироватьПересчетТрудозатрат(); 
	РегистрыСведений.РаспределенныеТрудозатраты.Удалить(Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьНаправление()
	
	Если ТипЗнч(Объект) <> Тип("ДокументСсылка.ВнутренниеТрудозатраты") Тогда
		Направление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Направление");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыТрудозатраты()
	
	// Заполнение юридического лица
	Если НЕ ЗначениеЗаполнено(ЮридическоеЛицо) Тогда
		ЗаполнитьЮридическоеЛицо();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Направление) Тогда
		ЗаполнитьНаправление();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЛичныеДела.Данные КАК Справочник.Филиалы) КАК Филиал,
	|	ЛичныеДела.Сотрудник КАК Пользователь
	|ПОМЕСТИТЬ ФилиалИПользователь
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(
	|			&Дата,
	|			Сотрудник = &Пользователь
	|				И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДела
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Филиалы.ТипФилиала, ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.ПустаяСсылка)) КАК ТипФилиала,
	|	ФилиалИПользователь.Филиал КАК Филиал
	|ИЗ
	|	ФилиалИПользователь КАК ФилиалИПользователь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ФилиалИПользователь.Пользователь = Пользователи.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО ФилиалИПользователь.Филиал = Филиалы.Ссылка";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ITСтруктура = (Выборка.ТипФилиала <> Перечисления.ТипыФилиалов.НеIT);
		Филиал = Выборка.Филиал;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЮридическоеЛицо()
	
	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("ДокументСсылка.Задача") Тогда
		ОбъектОснование = РегистрыСведений.СвязьОбъектовСЗаявкамиНаРазработку.ПолучитьЗаявку(Объект);
	ИначеЕсли ТипОбъекта <> Тип("ДокументСсылка.ВнутренниеТрудозатраты") Тогда 
		ОбъектОснование = Объект;
	Иначе
		ОбъектОснование = Неопределено;
	КонецЕсли;
	
	Если ОбъектОснование <> Неопределено Тогда
		ЮридическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектОснование, "ЮридическоеЛицо");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьПересчетТрудозатрат()
	
	Если ДополнительныеСвойства.Свойство("ДанныеПересчета") Тогда
		Для Каждого Строка Из ДополнительныеСвойства.ДанныеПересчета Цикл		
			Если (Строка.Затрата <> 0) ИЛИ (Строка.Стоимость <> 0) Тогда				
				Данные = Новый Структура;
				Данные.Вставить("Затрата", Строка.Затрата);
				Данные.Вставить("Стоимость", Строка.Стоимость);
				РегистрыСведений.ОчередьСобытийНаОбработку.ПересчитатьФактическиеТрудозатраты(Строка.Объект, Данные);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ОтключитьПроверкуЗапретаИзменения = Ложь;

#КонецОбласти

#КонецЕсли
