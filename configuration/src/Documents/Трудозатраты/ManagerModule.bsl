///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ВнешнееСоединение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда

#Область ПрограммныйИнтерфейс

// Создает новый документ трудозатрат и выполняет его проведение
//
// Параметры:
//  ДанныеЗаполнения	 - Структура - структура данных документа, полученная методом НовыеПараметрыЗаполненияТрудозатрат()
// 
// Возвращаемое значение:
//  ДокументСсылка.Трудозатраты - ссылка на созданный документ
//
Функция ДобавитьТрудозатраты(Знач ДанныеЗаполнения) Экспорт
	
	Ссылка = Неопределено;
	
	НовыеТрудозатраты = Документы.Трудозатраты.СоздатьДокумент();
	НовыеТрудозатраты.Заполнить(ДанныеЗаполнения);  
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДополнительныеСвойства") 
		 И ТипЗнч(ДанныеЗаполнения.ДополнительныеСвойства) = Тип("Структура") Тогда
		Для Каждого Строка Из ДанныеЗаполнения.ДополнительныеСвойства Цикл
			НовыеТрудозатраты.ДополнительныеСвойства.Вставить(Строка.Ключ, Строка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если НовыеТрудозатраты.ПроверитьЗаполнение() Тогда
		НовыеТрудозатраты.Записать(РежимЗаписиДокумента.Проведение);
		
		Если НовыеТрудозатраты.ДополнительныеСвойства.Свойство("Объект") Тогда
			ДанныеЗаполнения.Вставить("Объект", НовыеТрудозатраты.ДополнительныеСвойства.Объект);
		КонецЕсли;
		
		Ссылка = НовыеТрудозатраты.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

// Возвращает структуру данных для заполнения документа
// 
// Возвращаемое значение:
//   - Структура
//
Функция НовыеПараметрыЗаполненияТрудозатрат() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Дата");
	Результат.Вставить("Объект");
	Результат.Вставить("Затрата");
	Результат.Вставить("ВидДеятельности");
	Результат.Вставить("Услуга");
	Результат.Вставить("Автор");
	Результат.Вставить("Пользователь");
	Результат.Вставить("Филиал");
	Результат.Вставить("ЮридическоеЛицо");
	Результат.Вставить("ITСтруктура");
	Результат.Вставить("ДополнительныеСвойства");
	Результат.Вставить("Комментарий");
	Результат.Вставить("Направление");
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие трудозатрат, у которых направление и юридическое лицо не совпадает
// с теми, что указаны в объекте трудозатрат и отправляет сообщение в технический канал группы
//
Процедура ПроверитьРасхождениеКлючевыхИзмеренийТрудозатрат() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ДокументТрудозатраты.Ссылка КАК Документ,
	|	ДокументТрудозатраты.Объект КАК Объект,
	|	ДокументТрудозатраты.Направление КАК Направление,
	|	ДокументТрудозатраты.ЮридическоеЛицо КАК ЮридическоеЛицо
	|ПОМЕСТИТЬ ОтобранныеДокументы
	|ИЗ
	|	Документ.Трудозатраты КАК ДокументТрудозатраты
	|ГДЕ
	|	ДокументТрудозатраты.Проведен
	|	И ДокументТрудозатраты.Дата >= &ПредполагаемаяДатаЗапретаИзмененияДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаНаРазработку.Ссылка КАК Объект,
	|	ОтобранныеДокументы.Направление КАК НаправлениеТрудозатрат,
	|	ОтобранныеДокументы.ЮридическоеЛицо КАК ЮридическоеЛицоТрудозатрат,
	|	ЗаявкаНаРазработку.Направление КАК НаправлениеОбъекта,
	|	ЗаявкаНаРазработку.ЮридическоеЛицо КАК ЮридическоеЛицоОбъекта,
	|	ЗаявкаНаРазработку.Номер КАК Номер,
	|	ЗаявкаНаРазработку.Наименование КАК Наименование
	|ИЗ
	|	ОтобранныеДокументы КАК ОтобранныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО ((ВЫРАЗИТЬ(ОтобранныеДокументы.Объект КАК Документ.ЗаявкаНаРазработку)) = ЗаявкаНаРазработку.Ссылка)
	|ГДЕ
	|	(ОтобранныеДокументы.Направление <> ЗаявкаНаРазработку.Направление
	|			ИЛИ ОтобранныеДокументы.ЮридическоеЛицо <> ЗаявкаНаРазработку.ЮридическоеЛицо)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗаявкаНаРазработку.Ссылка,
	|	ОтобранныеДокументы.Направление,
	|	ОтобранныеДокументы.ЮридическоеЛицо,
	|	ЗаявкаНаРазработку.Направление,
	|	ЗаявкаНаРазработку.ЮридическоеЛицо,
	|	ЗаявкаНаРазработку.Номер,
	|	ЗаявкаНаРазработку.Наименование
	|ИЗ
	|	ОтобранныеДокументы КАК ОтобранныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку КАК СвязьОбъектовСЗаявкамиНаРазработку
	|		ПО ((ВЫРАЗИТЬ(ОтобранныеДокументы.Объект КАК Документ.Задача)) = (ВЫРАЗИТЬ(СвязьОбъектовСЗаявкамиНаРазработку.Объект КАК Документ.Задача)))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО (СвязьОбъектовСЗаявкамиНаРазработку.Заявка_Новая = ЗаявкаНаРазработку.Ссылка)
	|ГДЕ
	|	(ОтобранныеДокументы.Направление <> ЗаявкаНаРазработку.Направление
	|			ИЛИ ОтобранныеДокументы.ЮридическоеЛицо <> ЗаявкаНаРазработку.ЮридическоеЛицо)";
	#КонецОбласти
	
	ДатаЗапретаИзмененияДанных = КонецДня(Константы.ДатаЗапретаИзмененияДанных.Получить());
	Запрос.УстановитьПараметр("ПредполагаемаяДатаЗапретаИзмененияДанных", ДатаЗапретаИзмененияДанных);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
		
	ШаблонОбъекта = Символы.ПС + "[%1 %2](%3)" + Символы.ПС;
	ШаблонРазличия = 
	"Различаются *%1*:
	|Заявка - %2
	|Трудозатраты - %3" + Символы.ПС;
	
	СтрокиСообщения = Новый Массив;
	СтрокиСообщения.Добавить(":information_source: *Проверка расхождения направлений и юридических лиц в трудозатратах*");
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаОбъета = СтрШаблон(ШаблонОбъекта, Выборка.Номер, Выборка.Наименование, 
			ОбщегоНазначения.ПолучитьHTTPСсылкуНаОбъект(Выборка.Объект));
		
		СтрокиСообщения.Добавить(СтрокаОбъета);
		
		Если Выборка.НаправлениеОбъекта <> Выборка.НаправлениеТрудозатрат Тогда
			СтрокаРазличия = СтрШаблон(ШаблонРазличия, "направления", Выборка.НаправлениеОбъекта, Выборка.НаправлениеТрудозатрат);
			СтрокиСообщения.Добавить(СтрокаРазличия);
		КонецЕсли;
		
		Если Выборка.ЮридическоеЛицоОбъекта <> Выборка.ЮридическоеЛицоТрудозатрат Тогда
			СтрокаРазличия = СтрШаблон(ШаблонРазличия, "юридические лица", Выборка.ЮридическоеЛицоОбъекта, Выборка.ЮридическоеЛицоТрудозатрат);
			СтрокиСообщения.Добавить(СтрокаРазличия);
		КонецЕсли;
	КонецЦикла;
	
	ТекстСообщения = СтрСоединить(СтрокиСообщения);
	
	РегистрыСведений.БуферСообщений.Добавить(Перечисления.СпособыОтправкиСообщений.Мессенджер, 
		Перечисления.ТипыСлужебногоКанала.СообщениеОбОшибках, ТекстСообщения,, 
		Перечисления.ТипыСообщенийМессенджера.РасхождениеКлючевыхИзмеренийТрудозатрат);
	
КонецПроцедуры

// Выполняет пометку на удаление документа трудозатрат
//
// Параметры:
//  ДокументСсылка	 - ДокументСсылка.Трудозатраты	 - документ, трудозатраты по которому требуется удалить
//
Процедура УдалитьТрудозатраты(Знач ДокументСсылка) Экспорт
	
	Если ЗначениеЗаполнено(ДокументСсылка) И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Трудозатраты") Тогда
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		
		Если ДокументОбъект <> Неопределено Тогда
			
			УспешноЗаблокирован = Истина;
			Попытка
				ДокументОбъект.Заблокировать();
			Исключение
				УспешноЗаблокирован = Ложь;
				ЗаписьЖурналаРегистрации("Документ.Трудозатраты.Удаление трудозатрат", УровеньЖурналаРегистрации.Предупреждение,
					Метаданные.Документы.Трудозатраты, ДокументСсылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Трудозатраты заблокированы другим пользователем.");
			КонецПопытки;
			
			Если УспешноЗаблокирован Тогда
				ДокументОбъект.ПометкаУдаления = Истина;
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
