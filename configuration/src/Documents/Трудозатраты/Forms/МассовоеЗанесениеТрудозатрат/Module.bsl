///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Заголовок = "Трудозатраты: добавление";
	Период = ОбщегоНазначения.ТекущаяДатаСоСдвигом();
	Объект = Параметры.Объект;
	Сотрудники = Параметры.Сотрудники;
	
	ДеревоЗначений = СписокСотрудников.ПолучитьЭлементы();
	
	Если Сотрудники.Количество() > 2 Тогда
		ЗаполнитьСотрудников(ДеревоЗначений, Сотрудники);
	Иначе
		Для Каждого Сотрудник Из Сотрудники Цикл
			НоваяСтрока = ДеревоЗначений.Добавить();
			НоваяСтрока.Представление = Сотрудник.Представление;
			НоваяСтрока.Сотрудник = Сотрудник.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ВидДеятельности) Тогда
			Объект.ВидДеятельности = Документы.ВнутренниеТрудозатраты.ПолучитьВидДеятельностиДокумента(Объект);
		КонецЕсли;		
		ВидДеятельности = Объект.ВидДеятельности;
		Элементы.ВидДеятельности.ТолькоПросмотр = Истина;
		
	ИначеЕсли Параметры.Свойство("ВидДеятельности") Тогда	
		Если (ТипЗнч(Параметры.ВидДеятельности) = Тип("Массив")
			ИЛИ ТипЗнч(Параметры.ВидДеятельности) = Тип("ФиксированныйМассив")) Тогда
			
			ВидДеятельности = Параметры.ВидДеятельности[0];       
			Элементы.ВидДеятельности.РежимВыбораИзСписка = Истина; 
			Элементы.ВидДеятельности.ТолькоПросмотр = Ложь;
			
			Для Каждого Элемент Из Параметры.ВидДеятельности Цикл 
				Элементы.ВидДеятельности.СписокВыбора.Добавить(Элемент);	
			КонецЦикла;		
		Иначе 
			ВидДеятельности = Параметры.ВидДеятельности;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Собрание") Тогда
		Собрание = Параметры.Собрание;
	КонецЕсли;
	
	Если Параметры.Свойство("Затрата") Тогда
		Затрата = Параметры.Затрата;
	КонецЕсли;
	
	Если Параметры.Свойство("Период") Тогда
		Период = Параметры.Период;
	Иначе
		Период = ОбщегоНазначения.ТекущаяДатаСоСдвигом();
	КонецЕсли;
	
	РазрешенныйПериод = УчетТрудозатратВызовСервера.ПолучитьРазрешенныйПериодДобавленияТрудозатрат();
	УстановитьДоступностьСдвигДатыВперед(Элементы.СдвигДатыНазад, Элементы.СдвигДатыВперед, 
		НачалоДня(Период), РазрешенныйПериод);	
	
	Элементы.ГруппаДата.Подсказка = УчетТрудозатратКлиентСервер.ТекстПредупрежденияОграниченияПериодаТрудозатрат(
		РазрешенныйПериод);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	РазрешенныйПериод = УчетТрудозатратВызовСервера.ПолучитьРазрешенныйПериодДобавленияТрудозатрат();
	
	УчетТрудозатратКлиент.ПроверитьКорректностьДаты(ЭтотОбъект, Элементы.Период, Период, РазрешенныйПериод); 
	
	УстановитьДоступностьСдвигДатыВперед(Элементы.СдвигДатыНазад, Элементы.СдвигДатыВперед, 
		НачалоДня(Период), РазрешенныйПериод);
	
КонецПроцедуры	

&НаКлиенте
Процедура СписокСотрудниковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НайденнаяСтрока = СписокСотрудников.НайтиПоИдентификатору(ВыбраннаяСтрока);	
	НайденнаяСтрока.Пометка = ?(НайденнаяСтрока.Пометка = 0, 1, 0);
	
	УстановитьПометки(НайденнаяСтрока);	
	
КонецПроцедуры

&НаКлиенте         
Процедура СписокСотрудниковПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокСотрудников.ТекущиеДанные;
	
	Если ТекущиеДанные.Пометка = 2 Тогда
		ТекущиеДанные.Пометка = 0;
	КонецЕсли;   
	
	УстановитьПометки(ТекущиеДанные);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если ОбязательныеРеквизитыЗаполнены() Тогда
		ПараметрыЗаполнения = ПодготовитьПараметрыЗаполнения();
		СозданныеДокументы = ЗаписатьТрудозатраты(ПараметрыЗаполнения);
		
		Если СозданныеДокументы.Количество() > 0 Тогда
			Закрыть(СозданныеДокументы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьДату(Команда)
	
	НаправлениеСдвига = ?(Команда.Имя = "СдвинутьДатуВперед", 1, -1);
	СдвинутьДатуНаОдинДень(НаправлениеСдвига, Период);
	
	РазрешенныйПериод = УчетТрудозатратВызовСервера.ПолучитьРазрешенныйПериодДобавленияТрудозатрат();
	
	УстановитьДоступностьСдвигДатыВперед(Элементы.СдвигДатыНазад, Элементы.СдвигДатыВперед, 
		НачалоДня(Период), РазрешенныйПериод);
		
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	ИзменитьПометки(СписокСотрудников.ПолучитьЭлементы(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	ИзменитьПометки(СписокСотрудников.ПолучитьЭлементы(), Истина);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ЗаписатьТрудозатраты(Знач ПараметрыЗаполнения)
	
	СозданныеДокументы = Новый Массив;
	
	НачатьТранзакцию();
	
	Попытка
		Для Каждого Сотрудник Из ПараметрыЗаполнения.Сотрудники Цикл
			ДанныеЗаполнения = Документы.Трудозатраты.НовыеПараметрыЗаполненияТрудозатрат();
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ПараметрыЗаполнения);
			ДанныеЗаполнения.Пользователь = Сотрудник;
			ДанныеЗаполнения.Автор = ПараметрыСеанса.ТекущийПользователь;
			
			ОбъектЗаполнен = ЗначениеЗаполнено(ДанныеЗаполнения.Объект);
			Ссылка = Документы.Трудозатраты.ДобавитьТрудозатраты(ДанныеЗаполнения);
			СозданныеДокументы.Добавить(Ссылка);     
			
			Если НЕ ОбъектЗаполнен И ЗначениеЗаполнено(ДанныеЗаполнения.Объект) Тогда
				// Во время записи трудозатрат был создан документ, его нужно заполнить в ПараметрыЗаполнения       
				ПараметрыЗаполнения.Вставить("Объект", ДанныеЗаполнения.Объект); 
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("Документ.Трудозатраты.Массовое занесение", УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.Трудозатраты, , ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать трудозатраты.");
		СозданныеДокументы.Очистить();
	КонецПопытки;
	
	Возврат СозданныеДокументы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСотрудников(ДеревоЗначений, Сотрудники)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Трудозатраты.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ПользователиТрудозатрат
	|ИЗ
	|	РегистрСведений.Трудозатраты КАК Трудозатраты
	|ГДЕ
	|	Трудозатраты.Объект = &Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Сотрудник,
	|	Пользователи.Наименование КАК СотрудникПредставление,
	|	Филиалы.Ссылка КАК Филиал,
	|	Филиалы.Наименование КАК ФилиалПредставление,
	|	ВЫБОР
	|		КОГДА Пользователи.Филиал = &ТекущийФилиал
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СотрудникФилиала,
	|	ВЫБОР
	|		КОГДА ПользователиТрудозатрат.Пользователь ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьТрудозатраты
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО Пользователи.Филиал = Филиалы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПользователиТрудозатрат КАК ПользователиТрудозатрат
	|		ПО (ПользователиТрудозатрат.Пользователь = Пользователи.Ссылка)
	|ГДЕ
	|	Пользователи.Ссылка В(&Список)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователи.Филиал = &ТекущийФилиал УБЫВ,
	|	Пользователи.Наименование
	|ИТОГИ ПО
	|	Филиал";
	
	Запрос.УстановитьПараметр("Список", Сотрудники);
	Запрос.УстановитьПараметр("ТекущийФилиал", ПараметрыСеанса.Филиал);
	Запрос.УстановитьПараметр("Объект", Объект);

	ВыборкаФилиал = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КоличествоФилиалов = ВыборкаФилиал.Количество();
	
	Пока ВыборкаФилиал.Следующий() Цикл
		Родитель = ДеревоЗначений;
		КоличествоПометок = 0;
		
		Если КоличествоФилиалов > 1 Тогда
			НоваяСтрока = Родитель.Добавить();			
			НоваяСтрока.Представление = ВыборкаФилиал.ФилиалПредставление;
			НоваяСтрока.Филиал = ВыборкаФилиал.Филиал;
			
			Родитель = НоваяСтрока.ПолучитьЭлементы();	
		КонецЕсли;
		
		ВыборкаСотрудники = ВыборкаФилиал.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСотрудники.Следующий() Цикл
			НоваяСтрокаСотрудник = Родитель.Добавить();
			НоваяСтрокаСотрудник.Представление = ВыборкаСотрудники.СотрудникПредставление;
			НоваяСтрокаСотрудник.Сотрудник = ВыборкаСотрудники.Сотрудник; 
			НоваяСтрокаСотрудник.ЕстьТрудозатраты = ВыборкаСотрудники.ЕстьТрудозатраты;
			НоваяСтрокаСотрудник.Пометка = (ВыборкаСотрудники.СотрудникФилиала И НЕ ВыборкаСотрудники.ЕстьТрудозатраты);
			
			Если НоваяСтрокаСотрудник.Пометка = Истина Тогда
				КоличествоПометок = КоличествоПометок + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если НоваяСтрока <> Неопределено Тогда	
			Если КоличествоПометок = 0 Тогда
				НоваяСтрока.Пометка = 0;
			ИначеЕсли КоличествоПометок = ВыборкаСотрудники.Количество() Тогда
				НоваяСтрока.Пометка = 1;
			Иначе
				НоваяСтрока.Пометка = 2;
			КонецЕсли; 
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометки(Строки, Пометка)
		
	Для Каждого СтрокаТаблицы Из Строки Цикл  
		СтрокаТаблицы.Пометка = Пометка;
		
		ПодчиненныеСотрудники = СтрокаТаблицы.ПолучитьЭлементы();
		
		Если ПодчиненныеСотрудники.Количество() > 0 Тогда
			ИзменитьПометки(ПодчиненныеСотрудники, Пометка);
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОбязательныеРеквизитыЗаполнены()
	
	РеквизитыЗаполнены = Истина;
	
	СотрудникиВыбраны = Ложь;
	Для Каждого ЭлементСписка Из СписокСотрудников.ПолучитьЭлементы() Цикл
		ПодчиненныеСотрудники = ЭлементСписка.ПолучитьЭлементы();
		
		Если ПодчиненныеСотрудники.Количество() > 0 Тогда
			Для Каждого Сотрудник Из ПодчиненныеСотрудники Цикл
				СотрудникиВыбраны = СотрудникиВыбраны ИЛИ Сотрудник.Пометка;
			КонецЦикла;
		Иначе
			СотрудникиВыбраны = СотрудникиВыбраны ИЛИ ЭлементСписка.Пометка;
		КонецЕсли;
	КонецЦикла; 
	
	Если НЕ СотрудникиВыбраны Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сотрудники не выбраны.");
		РеквизитыЗаполнены = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Затрата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Затраты"" не заполнено.");
		РеквизитыЗаполнены = Ложь;
	КонецЕсли;
	
	Возврат РеквизитыЗаполнены;
	
КонецФункции

&НаКлиенте
Функция ПодготовитьПараметрыЗаполнения()
	
	Сотрудники = Новый Массив;
	ПолучитьОтмеченныхСотрудников(СписокСотрудников.ПолучитьЭлементы(), Сотрудники);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата", Период);
	ПараметрыЗаполнения.Вставить("Объект", Объект);	
	ПараметрыЗаполнения.Вставить("Затрата", Затрата);
	ПараметрыЗаполнения.Вставить("ВидДеятельности", ВидДеятельности);
	ПараметрыЗаполнения.Вставить("Сотрудники", Сотрудники);
	ПараметрыЗаполнения.Вставить("Комментарий", Комментарий);
	
	Если ЗначениеЗаполнено(Собрание) Тогда
		ДополнительныеСвойства = Новый Структура;        
		ДополнительныеСвойства.Вставить("Собрание", Собрание);
		ПараметрыЗаполнения.Вставить("ДополнительныеСвойства", ДополнительныеСвойства);	
	КонецЕсли;

	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьОтмеченныхСотрудников(Строки, ОтмеченныеСотрудники)
	
	Для Каждого Элемент Из Строки Цикл
		Если Элемент.Пометка > 0 Тогда
			ПолученныеСтроки = Элемент.ПолучитьЭлементы();
			
			Если ПолученныеСтроки.Количество() > 0 Тогда
				ПолучитьОтмеченныхСотрудников(ПолученныеСтроки, ОтмеченныеСотрудники);
			Иначе
				ОтмеченныеСотрудники.Добавить(Элемент.Сотрудник);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры	
	
&НаКлиенте
Процедура ПроставитьПометкуПодчиненным(Строка)   
		
	МаксПометка = 0;
	МинПометка = 1;
	
	Для Каждого Элемент Из Строка.ПолучитьЭлементы() Цикл 
		МаксПометка = Макс(МаксПометка, Элемент.Пометка);
		МинПометка = Мин(МинПометка, Элемент.Пометка);
	КонецЦикла;
	
	Строка.Пометка = ?(МинПометка = МаксПометка, МаксПометка, 2);
	
КонецПроцедуры

// Сдвигает дату на один день. Направление сдвига задается параметром Направление.
//
// Параметры:
//  НаправлениеСдвига	 - Число - направление сдвига даты. 1 - вперед. -1 - назад.
//  Дата				 - Дата	 - сдвигаемая дата.
//
&НаКлиенте
Процедура СдвинутьДатуНаОдинДень(Знач НаправлениеСдвига, Дата)
	
	Дата = Дата + (86400 * НаправлениеСдвига);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьСдвигДатыВперед(СдвигДатыНазад, СдвигДатыВперед, Знач Дата, Знач РазрешенныйПериод)
	
	СледующаяДата = Дата + 86400;
	ПредыдущаяДата = Дата - 86400;

	СдвигДатыНазад.Доступность = (ПредыдущаяДата >= РазрешенныйПериод.НачалоПериода);
	СдвигДатыВперед.Доступность = (СледующаяДата <= РазрешенныйПериод.КонецПериода);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(ТекущиеДанные)
	
	СотрудникиФилиала = ТекущиеДанные.ПолучитьЭлементы();
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	
	Если СотрудникиФилиала.Количество() > 0 Тогда
		Для Каждого Элемент Из СотрудникиФилиала Цикл 
			Элемент.Пометка = ТекущиеДанные.Пометка;
		КонецЦикла;
	ИначеЕсли Родитель <> Неопределено Тогда
		ПроставитьПометкуПодчиненным(Родитель);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
