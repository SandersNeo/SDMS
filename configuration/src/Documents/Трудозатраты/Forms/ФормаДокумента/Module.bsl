///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

// Соответствие идентификатора строки списка выбора виду деятельности и услуге
&НаКлиенте
Перем ХэшВидДеятельностиУслуга;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Копирование трудозатрат запрещено.");
		Возврат;
	КонецЕсли;

	Собрание = ИнтеграцияДополнительныхПодсистем.ПолучитьСобраниеТрудозатраты(Объект.Ссылка);
	
	Если НЕ Параметры.Ключ.Пустая() Тогда
		Заголовок = "Трудозатраты: изменение";
		
	ИначеЕсли Параметры.Свойство("ПараметрыЗанесенияТрудозатрат") Тогда
		// Заполнение документа через стандартный метод объекта документа
		ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.Трудозатраты"));
		ДокументОбъект.Заполнить(Параметры.ПараметрыЗанесенияТрудозатрат);
		ЗначениеВДанныеФормы(ДокументОбъект, Объект);
        ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры.ПараметрыЗанесенияТрудозатрат,, "Объект");
	Иначе
		Если Параметры.Свойство("Дата") Тогда   
			Объект.Дата = Параметры.Дата; 
		Иначе
			Объект.Дата = ОбщегоНазначения.ТекущаяДатаСоСдвигом();   
		КонецЕсли; 
		
		Если Параметры.Свойство("ИдентификаторОбъекта") И ТипЗнч(Параметры.ИдентификаторОбъекта) = Тип("УникальныйИдентификатор") Тогда
			Если Параметры.ТипКанбана = Перечисления.ТипыКанбана.ЗадачаНовый Тогда
				Объект.Объект = Документы.Задача.ПолучитьСсылку(Параметры.ИдентификаторОбъекта);
			ИначеЕсли Параметры.ТипКанбана = Перечисления.ТипыКанбана.ВнутреннееЗаданиеНовый Тогда
				Объект.Объект = Документы.ВнутреннееЗадание.ПолучитьСсылку(Параметры.ИдентификаторОбъекта);
			ИначеЕсли Параметры.ТипКанбана = Перечисления.ТипыКанбана.ЗаявкиМоегоФилиала Тогда
				Объект.Объект = Документы.ЗаявкаНаРазработку.ПолучитьСсылку(Параметры.ИдентификаторОбъекта);
			ИначеЕсли Параметры.ТипКанбана = Перечисления.ТипыКанбана.ПулЗаявокНовый Тогда
				Объект.Объект = Документы.ЗаявкаНаРазработку.ПолучитьСсылку(Параметры.ИдентификаторОбъекта);
			Иначе
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		Иначе	
			Объект.Объект = Параметры.Объект;
		КонецЕсли;
		
		Объект.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		Заголовок = "Трудозатраты: добавление";
	КонецЕсли;
	
	// Вычислим Направление объекта, если у Направления объекта включено 
	// использование юр лиц и есть основное юридическое лицо,
	// нужно будет вывести список видов деятельности с услугами.
	ТипОбъекта = ТипЗнч(Объект.Объект);
	
	Если ТипОбъекта = Тип("ДокументСсылка.ЗаявкаНаРазработку") И ЗаявкаЧерновик(Объект.Объект) Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заявка переведена в черновик. Добавление трудозатрат запрещено.");
		Возврат;
	КонецЕсли;
	
	ВидыДеятельностиЗаполнены = Ложь;

	Если ТипОбъекта <> Тип("ДокументСсылка.ВнутренниеТрудозатраты") Тогда
		Объект.Направление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Объект, "Направление");	
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Объект) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ВидДеятельности) Тогда
			Объект.ВидДеятельности = Документы.ВнутренниеТрудозатраты.ПолучитьВидДеятельностиДокумента(Объект.Объект);
		КонецЕсли;
		Элементы.ВидДеятельности.ТолькоПросмотр = Истина;
		Элементы.ВидДеятельности.СписокВыбора.Добавить(XMLСтрока(Объект.ВидДеятельности), Объект.ВидДеятельности);
		ВидыДеятельностиЗаполнены = Истина;
		
	ИначеЕсли Параметры.Свойство("ВидДеятельности") Тогда
		Если (ТипЗнч(Параметры.ВидДеятельности) = Тип("Массив")
				ИЛИ ТипЗнч(Параметры.ВидДеятельности) = Тип("ФиксированныйМассив")) Тогда
				
			Объект.ВидДеятельности = Параметры.ВидДеятельности[0]; 
			ВидыДеятельностиЗаполнены = Истина;
			ХэшВидДеятельностиУслуга = Новый Соответствие;
			
			Для Каждого Элемент Из Параметры.ВидДеятельности Цикл    
				ИдентификаторСтроки = XMLСтрока(Элемент);
				Элементы.ВидДеятельности.СписокВыбора.Добавить(ИдентификаторСтроки, Элемент);
				Данные = Новый Структура("ВидДеятельности, Услуга", Элемент);
				ХэшВидДеятельностиУслуга.Вставить(ИдентификаторСтроки, Данные);
			КонецЦикла;	
		Иначе 
			Объект.ВидДеятельности = Параметры.ВидДеятельности;    			
			Элементы.ВидДеятельности.ТолькоПросмотр = Истина;
			Элементы.ВидДеятельности.СписокВыбора.Добавить(XMLСтрока(Объект.ВидДеятельности), Объект.ВидДеятельности);
		КонецЕсли;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Собрание) И ТипОбъекта <> Тип("ДокументСсылка.ВнутренниеТрудозатраты") Тогда
		Элементы.Исполнитель.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ЗаполнитьСписокИсполнителей(ТипОбъекта);
	
	Элементы.Задача.Видимость = НЕ Параметры.СкрытьСлужебныеПоля;
	Элементы.Автор.Видимость = НЕ Параметры.СкрытьСлужебныеПоля; 
	
	Если Параметры.Свойство("ПоказатьОбъект") Тогда
		Элементы.Задача.Видимость = Истина;
		Элементы.Задача.ТолькоПросмотр = Параметры.СкрытьСлужебныеПоля;
		Элементы.Задача.КнопкаВыбора = НЕ Элементы.Задача.ТолькоПросмотр;
	КонецЕсли;
	
	Если Параметры.Свойство("ОграничитьИзменениеПериода") Тогда
		Элементы.ГруппаДата.Доступность = Ложь;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.ВидДеятельности) Тогда
		ПредставлениеВидаДеятельности = УчетТрудозатрат.ПолучитьИдентификаторВидаДеятельности(
			Объект.ВидДеятельности, Объект.Услуга);
	КонецЕсли;
		
	РазрешенныйПериод = УчетТрудозатратВызовСервера.ПолучитьРазрешенныйПериодДобавленияТрудозатрат();
	УстановитьДоступностьСдвигДатыВперед(Элементы.СдвигДатыНазад, Элементы.СдвигДатыВперед, 
		НачалоДня(Объект.Дата), РазрешенныйПериод);	
	
	Элементы.ГруппаДата.Подсказка = УчетТрудозатратКлиентСервер.ТекстПредупрежденияОграниченияПериодаТрудозатрат(
		РазрешенныйПериод);
		
	// Кэш данных для клиента
	Если НЕ ВидыДеятельностиЗаполнены Тогда
		ХэшВидДеятельностиУслуга = УчетТрудозатрат.ДополнитьВидыДеятельностиУслугами(Элементы.ВидДеятельности, 
			Объект.Направление, Объект.Пользователь, Объект.Дата, Собрание);
			
		Если НЕ ЗначениеЗаполнено(ПредставлениеВидаДеятельности) 
			И ЗначениеЗаполнено(Объект.ВидДеятельности) 
			И ЗначениеЗаполнено(Объект.Услуга)  Тогда
				
			ПредставлениеВидаДеятельности = Строка(Новый УникальныйИдентификатор);
			НаименованиеВидДеятельностиУслуга = СформироватьНаименованиеВидДеятельностиУслуга(Объект.Услуга, Объект.ВидДеятельности);
			
			Данные = Новый Структура("ВидДеятельности, Услуга", Объект.ВидДеятельности, Объект.Услуга);	
			ХэшВидДеятельностиУслуга.Вставить(ПредставлениеВидаДеятельности, Данные);
				
			Элементы.ВидДеятельности.СписокВыбора.Добавить(ПредставлениеВидаДеятельности, НаименованиеВидДеятельностиУслуга, , 
				БиблиотекаКартинок.ПустаяКартинка); 
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Собрание) И Элементы.ВидДеятельности.СписокВыбора.Количество() > 0 Тогда
			ПредставлениеВидаДеятельности = Элементы.ВидДеятельности.СписокВыбора[0].Значение;
			ДанныеСтроки = ХэшВидДеятельностиУслуга.Получить(ПредставлениеВидаДеятельности);
			
			Если ДанныеСтроки <> Неопределено Тогда
				Объект.ВидДеятельности = ДанныеСтроки.ВидДеятельности;
				Объект.Услуга = ДанныеСтроки.Услуга;
				Элементы.ВидДеятельности.ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
			
	АдресХранилища = ПоместитьВоВременноеХранилище(ХэшВидДеятельностиУслуга, УникальныйИдентификатор);
	
	Если Объект.ИзменениеЗапрещено Тогда
		ЗапретитьИзменениеДанныхФормы();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Кэш данных для клиента
	ХэшВидДеятельностиУслуга = ПолучитьИзВременногоХранилища(АдресХранилища);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// При модифицированности формы и вызове стандартной команды 
	// "закрыть" формы (нажатие крестика или кнопки "отмена")
	// стандартный механизм платформы задает вопрос "Сохранить изменения?" 
	// и при положительном ответе производит запись в режиме записать 
	// без проверки заполнения и обработки проведения, что для нас недопустимо.
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Собрание", Собрание);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЗначениеЗаполнено(ПредставлениеВидаДеятельности) Тогда
		ПроверяемыеРеквизиты.Очистить();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Деятельность"" не заполнено", , 
			"ПредставлениеВидаДеятельности", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить(СобытияОповещенияКлиент.ИмяСобытияДобавленияТрудозатрат(), Объект.Объект, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВидДеятельностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УчетТрудозатратКлиент.ОбработатьВыборВидаДеятельности(ВыбранноеЗначение, Объект.ВидДеятельности,
		Объект.Услуга, ХэшВидДеятельностиУслуга);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	РазрешенныйПериод = УчетТрудозатратВызовСервера.ПолучитьРазрешенныйПериодДобавленияТрудозатрат();
	
	УчетТрудозатратКлиент.ПроверитьКорректностьДаты(ЭтотОбъект, Элементы.Период, Объект.Дата, РазрешенныйПериод); 
	
	УстановитьДоступностьСдвигДатыВперед(Элементы.СдвигДатыНазад, Элементы.СдвигДатыВперед, 
		НачалоДня(Объект.Дата), РазрешенныйПериод);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	ХэшВидДеятельностиУслуга = ПолучитьСоответствиеВидовДеятельности();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьСправкуТрудозатрат(Команда)
	
	ПерейтиПоНавигационнойСсылке(
		ОбщегоНазначенияВызовСервера.ПолучитьКонстанту("КорневойURL") + "/docs/elapsed-time/elapsed-time-adding/");
	
КонецПроцедуры

&НаКлиенте
Процедура СдвинутьДату(Команда)
	
	НаправлениеСдвига = ?(Команда.Имя = "СдвинутьДатуВперед", 1, -1);
	СдвинутьДатуНаОдинДень(НаправлениеСдвига, Объект.Дата);
	
	РазрешенныйПериод = УчетТрудозатратВызовСервера.ПолучитьРазрешенныйПериодДобавленияТрудозатрат();
	
	УстановитьДоступностьСдвигДатыВперед(Элементы.СдвигДатыНазад, Элементы.СдвигДатыВперед, 
		НачалоДня(Объект.Дата), РазрешенныйПериод);
		
	КонецПроцедуры    

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокИсполнителей(Знач ТипОбъекта)
	
	Если ТипОбъекта = Тип("ДокументСсылка.ВнутренниеТрудозатраты") Тогда
		АвторДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Объект, "Автор");
		ЭтоАвтор = (ПараметрыСеанса.ТекущийПользователь = АвторДокумента);
		Элементы.Исполнитель.Видимость = ЭтоАвтор;
		
		Если ЭтоАвтор Тогда
			ДоступныеПользователи = ПолучитьУчастниковВнутреннихТрудозатрат(Объект.Объект);
			
			Если ДоступныеПользователи.Количество() <> 0 Тогда
				СписокВыбора = Элементы.Исполнитель.СписокВыбора;
				
				Для Каждого Пользователь Из ДоступныеПользователи Цикл
					СписокВыбора.Добавить(Пользователь, Строка(Пользователь), , БиблиотекаКартинок.Пользователь);
				КонецЦикла;
				
				СписокВыбора.СортироватьПоПредставлению();
				Элементы.Исполнитель.РежимВыбораИзСписка = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе		
		ЭтоАдминистратор = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("Администратор");
		
		ЭтоРуководительИТ = (Параметры.Свойство("РольПользователя") 
			И Параметры.РольПользователя = Справочники.РолиПользователей.РуководительIT);
		
		Если ЭтоАдминистратор Тогда
			Элементы.Исполнитель.Видимость = Истина;
			
		ИначеЕсли ЭтоРуководительИТ Тогда
			ДоступныеПользователи = РегистрыСведений.Трудозатраты.ПолучитьПользователейТрудозатрат();
			
			Если ДоступныеПользователи.Количество() = 0 Тогда
				Элементы.Исполнитель.Видимость = Ложь;
			Иначе
				Элементы.Исполнитель.Видимость = Истина;
				Элементы.Исполнитель.РежимВыбораИзСписка = Истина;
				
				СписокВыбора = Элементы.Исполнитель.СписокВыбора;
				
				Для Каждого Пользователь Из ДоступныеПользователи Цикл
					СписокВыбора.Добавить(Пользователь, Строка(Пользователь), , БиблиотекаКартинок.Пользователь);
				КонецЦикла;
				
				Если ЗначениеЗаполнено(Объект.Пользователь) 
					И СписокВыбора.НайтиПоЗначению(Объект.Пользователь) = Неопределено Тогда
					
					СписокВыбора.Добавить(Объект.Пользователь, Строка(Объект.Пользователь), , 
						БиблиотекаКартинок.Пользователь);
				КонецЕсли;
				
				СписокВыбора.СортироватьПоПредставлению();	
			КонецЕсли;
		Иначе
			Элементы.Исполнитель.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСоответствиеВидовДеятельности()
	
	Элементы.ВидДеятельности.СписокВыбора.Добавить(XMLСтрока(Объект.ВидДеятельности), Объект.ВидДеятельности);	
	
	ХэшВидДеятельностиУслуга = УчетТрудозатрат.ДополнитьВидыДеятельностиУслугами(Элементы.ВидДеятельности, 
		Объект.Направление, Объект.Пользователь, Объект.Дата, Собрание);
		
	Возврат ХэшВидДеятельностиУслуга;
	
КонецФункции

&НаСервере
Функция ПолучитьУчастниковВнутреннихТрудозатрат(Знач Ссылка)
	
	ДоступныеПользователи = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчастникиВнутреннихТрудозатрат.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.УчастникиВнутреннихТрудозатрат КАК УчастникиВнутреннихТрудозатрат
	|ГДЕ
	|	УчастникиВнутреннихТрудозатрат.Объект = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ДоступныеПользователи = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Пользователь");
	КонецЕсли;
	
	Возврат ДоступныеПользователи;

КонецФункции

&НаСервереБезКонтекста
Функция ЗаявкаЧерновик(Знач Заявка)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаявкаНаРазработку.Черновик КАК Черновик
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|ГДЕ
	|	ЗаявкаНаРазработку.Ссылка = &Заявка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Заявка", Заявка);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Черновик;
	
КонецФункции

// Сдвигает дату на один день. Направление сдвига задается параметром Направление.
//
// Параметры:
//  НаправлениеСдвига	 - Число - направление сдвига даты. 1 - вперед. -1 - назад.
//  Дата				 - Дата	 - сдвигаемая дата.
//
&НаКлиенте
Процедура СдвинутьДатуНаОдинДень(Знач НаправлениеСдвига, Дата)
	
	Дата = Дата + (86400 * НаправлениеСдвига);	
	
КонецПроцедуры

Функция СформироватьНаименованиеВидДеятельностиУслуга(Знач Услуга, Знач ВидДеятельности)
	
	КраткоеНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Услуга, "КраткоеНаименование");
	НаименованиеВидаДеятельности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДеятельности, "Наименование");
	
	Возврат СтрШаблон("%1: %2", КраткоеНаименование, НаименованиеВидаДеятельности);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьСдвигДатыВперед(СдвигДатыНазад, СдвигДатыВперед, Знач Дата, Знач РазрешенныйПериод)
	
	СледующаяДата = Дата + 86400;
	ПредыдущаяДата = Дата - 86400;

	СдвигДатыНазад.Доступность = (ПредыдущаяДата >= РазрешенныйПериод.НачалоПериода);
	СдвигДатыВперед.Доступность = (СледующаяДата <= РазрешенныйПериод.КонецПериода);

КонецПроцедуры

&НаСервере
Процедура ЗапретитьИзменениеДанныхФормы()
	
	ЭтотОбъект.ТолькоПросмотр = Истина;
		
	Элементы.СдвигДатыВперед.Доступность = Ложь;
	Элементы.СдвигДатыНазад.Доступность = Ложь;
	
КонецПроцедуры

#КонецОбласти
