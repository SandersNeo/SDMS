///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ВнешнееСоединение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
	
#Область ПрограммныйИнтерфейс 

// Готовит рассылку интересанту информации по изменению IT спирнта
//
// Параметры:
//  Спринт	 - ДокументСсылка.Спринт - Измененный спринт
//  Период	 - Дата	 - Период изменения спринта
//
Процедура ОтправитьИзмененияПоСпринтам(Знач Спринт, Знач Период) Экспорт 
	
	Запрос = Новый запрос;
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	СпринтПланирование.Ссылка КАК СпринтПланирование,
	|	ПРЕДСТАВЛЕНИЕ(СпринтПланирование.Ссылка) КАК СпринтПланированиеПредставление,
	|	ЗаявкаНаРазработку.Ссылка КАК Заявка,
	|	ЗаявкаНаРазработку.Наименование КАК ЗаявкаНаименование,
	|	ЗаявкаНаРазработку.Номер КАК НомерЗаявки,
	|	ИсторияУчастияОбъектовВСпринтах.Автор КАК Автор,
	|	ДокументЗадача.Ссылка КАК Задача,
	|	ДокументЗадача.Наименование КАК ЗадачаНаименование,
	|	ДокументЗадача.Номер КАК НомерЗадачи,
	|	ИсторияУчастияОбъектовВСпринтах.ВидДействия КАК ВидДействия,
	|	ИсторияУчастияОбъектовВСпринтах.Период КАК Период,
	|	Пользователи.Почта КАК АдресПочты
	|ИЗ
	|	РегистрСведений.ИсторияУчастияОбъектовВСпринтах КАК ИсторияУчастияОбъектовВСпринтах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК СпринтIT
	|		ПО ИсторияУчастияОбъектовВСпринтах.Спринт = СпринтIT.Ссылка
	|			И (ИсторияУчастияОбъектовВСпринтах.Период = &Период)
	|			И (ИсторияУчастияОбъектовВСпринтах.Спринт = &Спринт)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК СпринтПланирование
	|		ПО (СпринтIT.ДокументОснование = СпринтПланирование.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО (ДокументЗадача.Ссылка = ИсторияУчастияОбъектовВСпринтах.Объект)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО (ДокументЗадача.ОбъектОснование = ЗаявкаНаРазработку.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (Пользователи.Ссылка = СпринтПланирование.Автор)
	|ИТОГИ
	|	МАКСИМУМ(Автор),
	|	МАКСИМУМ(Период),
	|	МАКСИМУМ(АдресПочты)
	|ПО
	|	СпринтПланирование,
	|	Заявка";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Спринт", Спринт);
	Запрос.УстановитьПараметр("Период", Период);
	
	РегистрОчередьОтправки = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем;
	
	ШаблоныПисьма = РегистрОчередьОтправки.ШаблоныЭлектронногоПисьма();
	
	ВыборкаСпринт = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТемаПисьма = "Изменения в связных спринтах";
	ВажностьСообщения = Перечисления.ВажностьСообщения.Обычная;
	
	Пока ВыборкаСпринт.Следующий() Цикл
		
		ЧастиСообщения = Новый Массив;
		
		СсылкаНаОбъект = ОбщегоНазначения.ПолучитьШаблонНавигационнойСсылки(ВыборкаСпринт.СпринтПланирование);
		СсылкаНаОбъект = СтрЗаменить(ШаблоныПисьма.АктивнаяСсылка, "<!-- link -->", СсылкаНаОбъект);
		СсылкаНаОбъект = СтрЗаменить(СсылкаНаОбъект, "<!-- title_link -->", ВыборкаСпринт.СпринтПланированиеПредставление);
		
		ШаблонПисьма = СтрЗаменить(ШаблоныПисьма.ШапкаСЛоготипом, "<!-- right_table_1 -->", СсылкаНаОбъект);
		
		ЧастиСообщения.Добавить(ШаблонПисьма);
		
		ЧастиСообщения.Добавить(ШаблоныПисьма.РазделительнаяЛиния);
		
		ШаблонПисьма = ШаблоныПисьма.БлокОсновногоТекста;
		
		ТекстШаблона = СтрЗаменить(ШаблоныПисьма.ЗаголовокСобытия, "<!-- event_date -->", Формат(ВыборкаСпринт.Период, ШаблоныПисьма.ФорматДаты));
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- user_name -->", ВыборкаСпринт.Автор);
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- event -->", "внес(-ла) изменения:");
		
		ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- content -->", ТекстШаблона);
		ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- font_size -->", "14px");
		
		ЧастиСообщения.Добавить(ШаблонПисьма);
		
		ВыборкаЗаявка = ВыборкаСпринт.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаЗаявка.Следующий() Цикл
			
			СсылкаНаОбъект = ОбщегоНазначения.ПолучитьШаблонНавигационнойСсылки(ВыборкаЗаявка.Заявка);
			СсылкаНаОбъект = СтрЗаменить(ШаблоныПисьма.АктивнаяСсылка, "<!-- link -->", СсылкаНаОбъект);
			СсылкаНаОбъект = СтрЗаменить(СсылкаНаОбъект, "<!-- title_link -->", ВыборкаЗаявка.НомерЗаявки);
			
			ШаблонПисьма = ШаблоныПисьма.БлокОсновногоТекста;
			
			ТекстШаблона = "Заявка на разработку: %1.<br>%2";
			ТекстШаблона = СтрШаблон(ТекстШаблона, СсылкаНаОбъект, ВыборкаЗаявка.ЗаявкаНаименование);
			
			ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- content -->", ТекстШаблона);
			ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- font_size -->", "14px");
			
			ЧастиСообщения.Добавить(ШаблонПисьма);
			
			Выборка = ВыборкаЗаявка.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				СсылкаНаОбъект = ОбщегоНазначения.ПолучитьШаблонНавигационнойСсылки(Выборка.Задача);
				СсылкаНаОбъект = СтрЗаменить(ШаблоныПисьма.АктивнаяСсылка, "<!-- link -->", СсылкаНаОбъект);
				СсылкаНаОбъект = СтрЗаменить(СсылкаНаОбъект, "<!-- title_link -->", Выборка.НомерЗадачи);
				
				Если Выборка.ВидДействия = 1 Тогда 
					ШаблонЗначения = ШаблоныПисьма.НовоеЗначение;
				Иначе
					ШаблонЗначения = ШаблоныПисьма.СтароеЗначение;
				КонецЕсли;
				
				ПредставлениеЗадачи = СтрЗаменить(ШаблонЗначения, "<!-- value -->", Выборка.ЗадачаНаименование);
				
				ТекстШаблона = СтрШаблон("Задача: %1.<br>%2", СсылкаНаОбъект, ПредставлениеЗадачи);
				
				ШаблонПисьма = СтрЗаменить(ШаблоныПисьма.БлокДвеТаблицы, "<!-- left_table_1 -->", ТекстШаблона);
				
				ЧастиСообщения.Добавить(ШаблонПисьма);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ЧастиСообщения.Добавить(ШаблоныПисьма.РазделительнаяЛиния);
		ЧастиСообщения.Добавить(ШаблоныПисьма.ПодвалПисьма);
		
		ТекстСообщения = СтрСоединить(ЧастиСообщения, Символы.ПС);
		
		РегистрОчередьОтправки.Добавить(ВыборкаСпринт.АдресПочты, ТемаПисьма, ТекстСообщения, ВажностьСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция - Получить доступное время спринтов
//
// Параметры:
//  Спринты	 - СписокЗначений, Массив, ДокументСсылка.Спринт - Ссылки на спринты, по которым нужно получить доступное время
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с данными времени по спринтам
//		* ДокументСсылка.Спринт
//		* Число
//
Функция ПолучитьДоступноеВремяСпринтов(Знач Спринты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ДоступноеВремяСпринтов.Спринт КАК Спринт,
	|	ДоступноеВремяСпринтов.Пользователь КАК Пользователь,
	|	ДоступноеВремяСпринтов.Время КАК Время
	|ПОМЕСТИТЬ ДоступноеВремяСпринтов
	|ИЗ
	|	РегистрСведений.ДоступноеВремяСпринтов КАК ДоступноеВремяСпринтов
	|ГДЕ
	|	ДоступноеВремяСпринтов.Спринт В(&СписокСпринтов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументСпринт.Ссылка КАК Спринт,
	|	ДокументСпринт.Филиал КАК Филиал,
	|	ДокументСпринт.Команда КАК Команда,
	|	ДокументСпринт.ДатаНачала КАК ДатаНачала,
	|	ДокументСпринт.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ПериодСпринтов
	|ИЗ
	|	Документ.Спринт КАК ДокументСпринт
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоступноеВремяСпринтов КАК ДоступноеВремяСпринтов
	|		ПО ДокументСпринт.Ссылка = ДоступноеВремяСпринтов.Спринт
	|ГДЕ
	|	ДокументСпринт.Ссылка В(&СписокСпринтов)
	|	И ДоступноеВремяСпринтов.Спринт ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодСпринтов.Филиал КАК Филиал
	|ПОМЕСТИТЬ ФилиалыСпринтов
	|ИЗ
	|	ПериодСпринтов КАК ПериодСпринтов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛичныеДела.Сотрудник КАК Сотрудник,
	|	ЛичныеДела.Период КАК Период,
	|	ВЫРАЗИТЬ(ЛичныеДела.Данные КАК Справочник.Филиалы) КАК Филиал
	|ПОМЕСТИТЬ ПериодУстройстваСотрудникаНаФилиал
	|ИЗ
	|	РегистрСведений.ЛичныеДела КАК ЛичныеДела
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФилиалыСпринтов КАК ФилиалыСпринтов
	|		ПО (ЛичныеДела.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение))
	|			И ЛичныеДела.Данные = ФилиалыСпринтов.Филиал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодУстройстваСотрудникаНаФилиал.Сотрудник КАК Сотрудник,
	|	ПериодУстройстваСотрудникаНаФилиал.Период КАК ДатаНачала,
	|	ПериодУстройстваСотрудникаНаФилиал.Филиал КАК Филиал,
	|	ЕСТЬNULL(МИНИМУМ(ЛичныеДела.Период), &ТекущаяДата) КАК ДатаОкончания
	|ПОМЕСТИТЬ ПериодыНахожденияВФилиале
	|ИЗ
	|	ПериодУстройстваСотрудникаНаФилиал КАК ПериодУстройстваСотрудникаНаФилиал
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела КАК ЛичныеДела
	|		ПО ПериодУстройстваСотрудникаНаФилиал.Сотрудник = ЛичныеДела.Сотрудник
	|			И (ЛичныеДела.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение))
	|			И ПериодУстройстваСотрудникаНаФилиал.Период < ЛичныеДела.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодУстройстваСотрудникаНаФилиал.Сотрудник,
	|	ПериодУстройстваСотрудникаНаФилиал.Период,
	|	ПериодУстройстваСотрудникаНаФилиал.Филиал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодСпринтов.Спринт КАК Спринт,
	|	ПериодыНахожденияВФилиале.Сотрудник КАК Сотрудник,
	|	ПериодСпринтов.ДатаНачала КАК ДатаНачала,
	|	ПериодСпринтов.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ СотрудникиФилиалаВПериодСпринта
	|ИЗ
	|	ПериодыНахожденияВФилиале КАК ПериодыНахожденияВФилиале
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодСпринтов КАК ПериодСпринтов
	|		ПО ПериодыНахожденияВФилиале.Филиал = ПериодСпринтов.Филиал
	|			И ПериодыНахожденияВФилиале.ДатаНачала < ПериодСпринтов.ДатаОкончания
	|			И ПериодыНахожденияВФилиале.ДатаОкончания > ПериодСпринтов.ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛичныеДела.Сотрудник КАК Сотрудник,
	|	ВЫРАЗИТЬ(ЛичныеДела.Данные КАК Справочник.Филиалы) КАК Команда,
	|	ЛичныеДела.Период КАК Период
	|ПОМЕСТИТЬ ИсторияКомандаСотрудника
	|ИЗ
	|	РегистрСведений.ЛичныеДела КАК ЛичныеДела
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодыНахожденияВФилиале КАК ПериодыНахожденияВФилиале
	|		ПО ЛичныеДела.Сотрудник = ПериодыНахожденияВФилиале.Сотрудник
	|			И (ЛичныеДела.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВКоманду))
	|			И (ЛичныеДела.Период МЕЖДУ ПериодыНахожденияВФилиале.ДатаНачала И ПериодыНахожденияВФилиале.ДатаОкончания)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЛичныеДела.Сотрудник,
	|	ВЫРАЗИТЬ(ЛичныеДела.Данные КАК Справочник.Филиалы),
	|	ЛичныеДела.Период
	|ИЗ
	|	РегистрСведений.ЛичныеДела КАК ЛичныеДела
	|ГДЕ
	|	ЛичныеДела.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВКастомнуюКоманду)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияКомандаСотрудника.Сотрудник КАК Сотрудник,
	|	ИсторияКомандаСотрудника.Команда КАК Команда,
	|	ИсторияКомандаСотрудника.Период КАК ДатаНачала,
	|	ЕСТЬNULL(МИНИМУМ(ИсторияКомандаСотрудника1.Период), &ТекущаяДата) КАК ДатаОкончания
	|ПОМЕСТИТЬ ПериодыНахожденияВКоманде
	|ИЗ
	|	ИсторияКомандаСотрудника КАК ИсторияКомандаСотрудника
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсторияКомандаСотрудника КАК ИсторияКомандаСотрудника1
	|		ПО ИсторияКомандаСотрудника.Сотрудник = ИсторияКомандаСотрудника1.Сотрудник
	|			И ИсторияКомандаСотрудника.Период < ИсторияКомандаСотрудника1.Период
	|ГДЕ
	|	ИсторияКомандаСотрудника.Команда <> ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияКомандаСотрудника.Сотрудник,
	|	ИсторияКомандаСотрудника.Команда,
	|	ИсторияКомандаСотрудника.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодСпринтов.Спринт КАК Спринт,
	|	ПериодыНахожденияВКоманде.Команда КАК Команда,
	|	ПериодыНахожденияВКоманде.Сотрудник КАК Сотрудник,
	|	ПериодСпринтов.ДатаНачала КАК ДатаНачала,
	|	ПериодСпринтов.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ СотрудникиКомандыВПериодСпринта
	|ИЗ
	|	ПериодыНахожденияВКоманде КАК ПериодыНахожденияВКоманде
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодСпринтов КАК ПериодСпринтов
	|		ПО ПериодыНахожденияВКоманде.Команда = ПериодСпринтов.Команда
	|			И ПериодыНахожденияВКоманде.ДатаНачала < ПериодСпринтов.ДатаОкончания
	|			И ПериодыНахожденияВКоманде.ДатаОкончания > ПериодСпринтов.ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря,
	|	ПроизводственныйКалендарь.КоличествоРабочихЧасов КАК КоличествоРабочихЧасов,
	|	СотрудникиФилиалаВПериодСпринта.Сотрудник КАК Сотрудник,
	|	СотрудникиФилиалаВПериодСпринта.Спринт КАК Спринт,
	|	ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка) КАК Команда
	|ПОМЕСТИТЬ ПользователиСДнямиКалендаря
	|ИЗ
	|	РегистрСведений.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СотрудникиФилиалаВПериодСпринта КАК СотрудникиФилиалаВПериодСпринта
	|		ПО (ПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ СотрудникиФилиалаВПериодСпринта.ДатаНачала И СотрудникиФилиалаВПериодСпринта.ДатаОкончания)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодСпринтов КАК ПериодСпринтов
	|		ПО (СотрудникиФилиалаВПериодСпринта.Спринт = ПериодСпринтов.Спринт)
	|			И (ПериодСпринтов.Команда = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПроизводственныйКалендарь.ДатаКалендаря,
	|	ПроизводственныйКалендарь.КоличествоРабочихЧасов,
	|	СотрудникиКомандыВПериодСпринта.Сотрудник,
	|	СотрудникиКомандыВПериодСпринта.Спринт,
	|	СотрудникиКомандыВПериодСпринта.Команда
	|ИЗ
	|	РегистрСведений.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СотрудникиКомандыВПериодСпринта КАК СотрудникиКомандыВПериодСпринта
	|		ПО (ПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ СотрудникиКомандыВПериодСпринта.ДатаНачала И СотрудникиКомандыВПериодСпринта.ДатаОкончания)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодСпринтов КАК ПериодСпринтов
	|		ПО (СотрудникиКомандыВПериодСпринта.Спринт = ПериодСпринтов.Спринт)
	|			И (СотрудникиКомандыВПериодСпринта.Команда = ПериодСпринтов.Команда)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремени.Дата КАК Дата,
	|	ТабельУчетаРабочегоВремени.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ТабельУчетаРабочегоВремени.ПриоритетДляТабеля) КАК ПриоритетДляТабеля
	|ПОМЕСТИТЬ АктуальныеЗаписиТабеля
	|ИЗ
	|	РегистрСведений.ТабельУчетаРабочегоВремени КАК ТабельУчетаРабочегоВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СотрудникиФилиалаВПериодСпринта КАК СотрудникиФилиалаВПериодСпринта
	|		ПО ТабельУчетаРабочегоВремени.Сотрудник = СотрудникиФилиалаВПериодСпринта.Сотрудник
	|			И (ТабельУчетаРабочегоВремени.Дата МЕЖДУ СотрудникиФилиалаВПериодСпринта.ДатаНачала И СотрудникиФилиалаВПериодСпринта.ДатаОкончания)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабельУчетаРабочегоВремени.Дата,
	|	ТабельУчетаРабочегоВремени.Сотрудник
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремени.Дата,
	|	ТабельУчетаРабочегоВремени.Сотрудник,
	|	МАКСИМУМ(ТабельУчетаРабочегоВремени.ПриоритетДляТабеля)
	|ИЗ
	|	РегистрСведений.ТабельУчетаРабочегоВремени КАК ТабельУчетаРабочегоВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СотрудникиКомандыВПериодСпринта КАК СотрудникиКомандыВПериодСпринта
	|		ПО ТабельУчетаРабочегоВремени.Сотрудник = СотрудникиКомандыВПериодСпринта.Сотрудник
	|			И (ТабельУчетаРабочегоВремени.Дата МЕЖДУ СотрудникиКомандыВПериодСпринта.ДатаНачала И СотрудникиКомандыВПериодСпринта.ДатаОкончания)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабельУчетаРабочегоВремени.Дата,
	|	ТабельУчетаРабочегоВремени.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремени.Дата КАК Дата,
	|	ТабельУчетаРабочегоВремени.Сотрудник КАК Сотрудник,
	|	ТабельУчетаРабочегоВремени.ОтработаноЧасов КАК ОтработаноЧасов,
	|	ТабельУчетаРабочегоВремени.ВидВремени КАК ВидВремени
	|ПОМЕСТИТЬ ПриведенныйТабельУчетаРабочегоВремени
	|ИЗ
	|	РегистрСведений.ТабельУчетаРабочегоВремени КАК ТабельУчетаРабочегоВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеЗаписиТабеля КАК АктуальныеЗаписиТабеля
	|		ПО ТабельУчетаРабочегоВремени.Дата = АктуальныеЗаписиТабеля.Дата
	|			И ТабельУчетаРабочегоВремени.Сотрудник = АктуальныеЗаписиТабеля.Сотрудник
	|			И ТабельУчетаРабочегоВремени.ПриоритетДляТабеля = АктуальныеЗаписиТабеля.ПриоритетДляТабеля
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПользователиСДнямиКалендаря.Спринт КАК Спринт,
	|	ВЫРАЗИТЬ(СУММА(ВЫБОР
	|				КОГДА НЕ ОтсутствияСотрудниковНаРабочемМесте.Сотрудник ЕСТЬ NULL
	|					ТОГДА 0
	|				КОГДА НЕ ТабельУчетаРабочегоВремени.Сотрудник ЕСТЬ NULL
	|					ТОГДА ВЫБОР
	|							КОГДА КлассификаторИспользованияРабочегоВремени.РабочееВремя
	|								ТОГДА ТабельУчетаРабочегоВремени.ОтработаноЧасов
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ПользователиСДнямиКалендаря.КоличествоРабочихЧасов
	|			КОНЕЦ) * 0.8 КАК ЧИСЛО(10, 1)) КАК Время
	|ИЗ
	|	ПользователиСДнямиКалендаря КАК ПользователиСДнямиКалендаря
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтсутствияСотрудниковНаРабочемМесте КАК ОтсутствияСотрудниковНаРабочемМесте
	|		ПО ПользователиСДнямиКалендаря.ДатаКалендаря = ОтсутствияСотрудниковНаРабочемМесте.ДатаОтсутствия
	|			И ПользователиСДнямиКалендаря.Сотрудник = ОтсутствияСотрудниковНаРабочемМесте.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПриведенныйТабельУчетаРабочегоВремени КАК ТабельУчетаРабочегоВремени
	|		ПО (ТабельУчетаРабочегоВремени.Дата = ПользователиСДнямиКалендаря.ДатаКалендаря)
	|			И (ТабельУчетаРабочегоВремени.Сотрудник = ПользователиСДнямиКалендаря.Сотрудник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторИспользованияРабочегоВремени КАК КлассификаторИспользованияРабочегоВремени
	|		ПО (ТабельУчетаРабочегоВремени.ВидВремени = КлассификаторИспользованияРабочегоВремени.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПользователиСДнямиКалендаря.Спринт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоступноеВремяСпринтов.Спринт,
	|	СУММА(ДоступноеВремяСпринтов.Время)
	|ИЗ
	|	ДоступноеВремяСпринтов КАК ДоступноеВремяСпринтов
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступноеВремяСпринтов.Спринт";
	#КонецОбласти

	Запрос.УстановитьПараметр("СписокСпринтов", Спринты);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Функция - Получить ключ настроек
//
// Параметры:
//  НазваниеТаблицы	 - 	Строка - название нужной таблицы настроек
// 
// Возвращаемое значение:
//  Структура - настройки конкретной таблицы
//
Функция ПолучитьКлючНастроек(НазваниеТаблицы) Экспорт
	
	Возврат Новый Структура("Ключ, Значение", "Документ.Спринт",
		СтрШаблон("Спринт_%1_НастройкиСКД_Спринт", НазваниеТаблицы));

КонецФункции
		
// Возвращает представление спринта
//
// Параметры:
//  Номер			 - Число - Номер спринта 
//  ДатаНачала		 - Дата - Дата начала спринта
//  ДатаОкончания	 - Дата - Дата окночания спринта 
//  Наименование	 - Строка - Наименование спринта 
//  Филиал			 - СправочникСсылка.Филиалы - Филиал спринта
//  Команда			 - СправочникСсылка.Филиалы - Команда спринта
// 
// Возвращаемое значение:
//   Строка - сформированное представление спринта 
//
Функция ПолучитьПредставление(Знач Номер, Знач ДатаНачала, Знач ДатаОкончания, Знач Наименование, Знач Филиал, Знач Команда) Экспорт
	
	ДатаНачала = Формат(ДатаНачала, "ДФ=dd.MM.yyyy");
	ДатаОкончания = Формат(ДатаОкончания, "ДФ=dd.MM.yyyy");   
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		НаименованиеСпринта = Наименование;
	ИначеЕсли ЗначениеЗаполнено(Команда) Тогда
		НаименованиеСпринта = СтрШаблон("%1 (%2)", Строка(Филиал), Строка(Команда));
	Иначе
		НаименованиеСпринта = Строка(Филиал);
	КонецЕсли;
	
	Возврат СтрШаблон("#%1 %2 (%3 - %4)", Номер, НаименованиеСпринта, ДатаНачала, ДатаОкончания);
	
КонецФункции

// Применяет настройки компановки к таблице объекта
//
// Параметры:
//  АдресТаблицыОбъектов - Строка								 - Адрес таблицы объектов
//  КомпоновщикНастроек	 - КомпоновщикНастроекКомпоновкиДанных	 - Компановщик с настройками для таблицы
//  АдресСхемыКомпоновки - Строка								 - Адрес схемы компановки
// 
// Возвращаемое значение:
//  Результат - Структура с данными
//
Функция ПрименитьНастройкиКомпоновкиДанных(Знач АдресТаблицыОбъектов, КомпоновщикНастроек, Знач АдресСхемыКомпоновки = "", Знач ЭтоОбъектыВРеализацию = Ложь) Экспорт    
	
	ОбъектыСпринта = ПолучитьИзВРеменногоХранилища(АдресТаблицыОбъектов);
	СпринтПоЗаявкам = ОбъектыСпринта.Количество() > 0 И ТипЗнч(ОбъектыСпринта[0].Ссылка) = Тип("ДокументСсылка.ЗаявкаНаРазработку"); 
		
	Если СпринтПоЗаявкам Тогда 
		ОбъектыСпринта = ПредобработкаТаблицыДляЗаявок(ОбъектыСпринта, КомпоновщикНастроек, АдресСхемыКомпоновки, ЭтоОбъектыВРеализацию); 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСхемыКомпоновки) И ЭтоАдресВременногоХранилища(АдресСхемыКомпоновки) Тогда
		СхемаКомпоновки = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновки);
	Иначе
		СхемаКомпоновки = Документы.Спринт.ПолучитьМакет("СхемаКомпоновкиОбъектыСпринта");	
		ДобавитьПоляВНаборДанных(СхемаКомпоновки.НаборыДанных.НаборДанных1.Поля, КомпоновщикНастроек, ОбъектыСпринта);
	КонецЕсли;
		
	ДанныеРасшифровкиНовые = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	// Копирование настроек из компоновщика в схему
	СкопироватьНастройкиИзКомпоновщикаНастроек(КомпоновщикНастроек, СхемаКомпоновки.НастройкиПоУмолчанию, ?(СпринтПоЗаявкам, 2, 0));
	
	ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, СхемаКомпоновки.НастройкиПоУмолчанию,
		ДанныеРасшифровкиНовые, , ТипГенератора);
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ВнешняяТаблицаДанных", ОбъектыСпринта);

	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровкиНовые);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ДеревоПостроенноеСКД = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоПостроенноеСКД);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 
	
	Если КомпоновщикНастроек.Настройки.Структура.Количество() > 0 Тогда
		СформироватьДеревоПриНаличииГруппировок(ДеревоПостроенноеСКД, КомпоновщикНастроек.Настройки.Структура, СпринтПоЗаявкам);
	КонецЕсли;
	
	// Из-за особенностей работы СКД придется сортировать дерево вручную...
	Если СхемаКомпоновки.НастройкиПоУмолчанию.Порядок.Элементы.Количество() > 0 Тогда
		СтрокаСортировки = ПолучитьСтрокуСортировки(СхемаКомпоновки.НастройкиПоУмолчанию.Порядок.Элементы);
		ДеревоПостроенноеСКД.Строки.Сортировать(СтрокаСортировки, Истина);
	КонецЕсли;
	
	АдресДерева = ПоместитьВоВременноеХранилище(ДеревоПостроенноеСКД, АдресТаблицыОбъектов);		
		
	// Для того чтобы корректно сформировались настройки, нужно еще раз настройки схемы заполнить.
	СкопироватьНастройкиИзКомпоновщикаНастроек(КомпоновщикНастроек, СхемаКомпоновки.НастройкиПоУмолчанию, 4);
		
	Результат = Новый Структура;
	Результат.Вставить("АдресВХранилище", АдресДерева);
	Результат.Вставить("НастройкиКомпоновки", СхемаКомпоновки.НастройкиПоУмолчанию);
	Результат.Вставить("ОценкаТрудозатрат", ОбъектыСпринта.Итог("ОценкаТрудозатрат"));
	Результат.Вставить("ОценкаТрудозатратБезЗакрытых", ОбъектыСпринта.Итог("ОценкаТрудозатратБезЗакрытых"));
	Результат.Вставить("ОценкаТрудозатратЗадачITСпринтов", ОбъектыСпринта.Итог("ОценкаТрудозатратЗадачITСпринтов"));
	Результат.Вставить("ОценкаТрудозатратЗадачITСпринтовБезЗакрытых", ОбъектыСпринта.Итог("ОценкаТрудозатратЗадачITСпринтовБезЗакрытых"));
	Результат.Вставить("ПланируемыеТрудозатраты", ОбъектыСпринта.Итог("ПланируемыеТрудозатраты"));
	Результат.Вставить("ФактическиеТрудозатраты", ОбъектыСпринта.Итог("ФактическиеТрудозатраты"));
	Результат.Вставить("ФактическиеТрудозатратыЗаПериодСпринта", ОбъектыСпринта.Итог("ФактическиеТрудозатратыЗаПериодСпринта"));
	Результат.Вставить("ПланируемыеТрудозатратыПодчиненные", ОбъектыСпринта.Итог("ПланируемыеТрудозатратыПодчиненные"));
	Результат.Вставить("ФактическиеТрудозатратыПодчиненные", ОбъектыСпринта.Итог("ФактическиеТрудозатратыПодчиненные"));
	Результат.Вставить("ФактическиеТрудозатратыЗадачITСпринтов", ОбъектыСпринта.Итог("ФактическиеТрудозатратыЗадачITСпринтов"));
	Результат.Вставить("ФактическиеТрудозатратыЗадачITСпринтовЗаПериодСпринта", ОбъектыСпринта.Итог("ФактическиеТрудозатратыЗадачITСпринтовЗаПериодСпринта"));	
	
	Результат.Вставить("СвободныеТрудозатраты", ОбъектыСпринта.Итог("СвободныеТрудозатраты"));
	Результат.Вставить("ОценкаТрудозатратТестирование", ОбъектыСпринта.Итог("ОценкаТрудозатратТестирование"));
	Результат.Вставить("ОценкаТрудозатратТестированиеБезЗакрытых", ОбъектыСпринта.Итог("ОценкаТрудозатратТестированиеБезЗакрытых"));
	Результат.Вставить("ПланируемыеТрудозатратыТестирование", ОбъектыСпринта.Итог("ПланируемыеТрудозатратыТестирование"));
	Результат.Вставить("ФактическиеТрудозатратыТестирование", ОбъектыСпринта.Итог("ФактическиеТрудозатратыТестирование"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Номер");
	Поля.Добавить("ДатаНачала");
	Поля.Добавить("ДатаОкончания");
	Поля.Добавить("Наименование");
	Поля.Добавить("Филиал");
	Поля.Добавить("Команда");
		
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;  
	
	Представление = ПолучитьПредставление(Данные.Номер, Данные.ДатаНачала, Данные.ДатаОкончания, 
		Данные.Наименование, Данные.Филиал, Данные.Команда);
	
КонецПроцедуры

#КонецОбласти

#Область КомпоновкаДанных

Процедура ДобавитьВыбранныеПоляВКомпоновщик(Настройки, ВыбранныеПоля)
	
	Настройки.Выбор.Элементы.Очистить();
	
	Для Каждого Поле Из ВыбранныеПоля Цикл
		ДобавленноеПоле = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ДобавленноеПоле.Использование = Истина;
		ДобавленноеПоле.Заголовок = Поле.Имя;
		ДобавленноеПоле.Поле = Новый ПолеКомпоновкиДанных(Поле.Имя);
	КонецЦикла;
		
КонецПроцедуры

Процедура ДобавитьПоляВНаборДанных(КоллекцияПолейНабораДанных, КомпоновщикНастроек, ОбъектыСпринта) Экспорт
	
	// Получим исключаемые поля - их не будем отображать в отборе и сортировке
	ИсключаемыеПоля = ПолучитьПоляИсключаемыеИзОтбораСортировки();
	СоответствиеПолеСиноним = ПолучитьСинонимыПолей();
	
	ОписаниеТипаСтрока = ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(0);
	
	ДопустимыеПоляВыбора = Новый ТаблицаЗначений;
	ДопустимыеПоляВыбора.Колонки.Добавить("Имя", ОписаниеТипаСтрока);
	ДопустимыеПоляВыбора.Колонки.Добавить("Заголовок", ОписаниеТипаСтрока);
	ДопустимыеПоляВыбора.Колонки.Добавить("ОписаниеТипов");
	ТипNULL = Тип("Null");
				
	Если ОбъектыСпринта <> Неопределено Тогда
		Для Каждого Колонка Из ОбъектыСпринта.Колонки Цикл
			
			МассивТипов = Колонка.ТипЗначения.Типы();
			ПозицияNULL =  МассивТипов.Найти(ТипNULL); 
			
			Если ПозицияNULL <> Неопределено Тогда
				МассивТипов.Удалить(ПозицияNULL);
			КонецЕсли;
			
			Строка = ДопустимыеПоляВыбора.Добавить();
			Строка.Имя = Колонка.Имя;
			Строка.Заголовок = Колонка.Заголовок;
			Строка.ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		КонецЦикла;
	КонецЕсли;
	
	КоллекцияПолейНабораДанных.Очистить();
	
	Для Каждого Поле Из ДопустимыеПоляВыбора Цикл
		
		СинонимПоля = СоответствиеПолеСиноним.Получить(Поле.Имя);
		Если СинонимПоля = Неопределено Тогда
			СинонимПоля = Поле.Имя;
		КонецЕсли;
		
		ПолеНабора = КоллекцияПолейНабораДанных.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабора.Поле = Поле.Имя;
		ПолеНабора.Заголовок = СинонимПоля;
		ПолеНабора.ПутьКДанным = Поле.Имя;
		ПолеНабора.ТипЗначения = Поле.ОписаниеТипов;
		
		НайденноеПоле = ИсключаемыеПоля.Найти(Поле.Имя);
		
		// Скроем из отбора и сортировки лишние поля
		Если НайденноеПоле <> Неопределено Тогда 
			ПолеНабора.ОграничениеИспользования.Условие = Истина;
			ПолеНабора.ОграничениеИспользования.Порядок = Истина;
		КонецЕсли;
		
		ПолеНабора.ОграничениеИспользованияРеквизитов.Порядок = Истина;
	КонецЦикла;
	
	НастройкиКомпоновщика = КомпоновщикНастроек.ПолучитьНастройки();
	ДобавитьВыбранныеПоляВКомпоновщик(НастройкиКомпоновщика, ДопустимыеПоляВыбора);
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновщика);
	
КонецПроцедуры

Функция ПолучитьПоляИсключаемыеИзОтбораСортировки()
	
	ИсключаемыеПоля = Новый Массив;
	ИсключаемыеПоля.Добавить("ИндексКартинки");
	ИсключаемыеПоля.Добавить("ЭтоГруппа");
	ИсключаемыеПоля.Добавить("ПользовательНаименование");
	ИсключаемыеПоля.Добавить("НаправлениеНаименование");	
	ИсключаемыеПоля.Добавить("НазначениеИмяКартинки");	
	ИсключаемыеПоля.Добавить("Представление");	
	ИсключаемыеПоля.Добавить("КраткоеИмяПроекта");	
	ИсключаемыеПоля.Добавить("СпринтПредставление");
	ИсключаемыеПоля.Добавить("ОценкаТрудозатрат");
	ИсключаемыеПоля.Добавить("ОценкаТрудозатратБезЗакрытых");
	ИсключаемыеПоля.Добавить("ОценкаТрудозатратЗадачITСпринтов");
	ИсключаемыеПоля.Добавить("ОценкаТрудозатратЗадачITСпринтовБезЗакрытых");
	ИсключаемыеПоля.Добавить("ПланируемыеТрудозатраты");
	ИсключаемыеПоля.Добавить("ФактическиеТрудозатраты");
	ИсключаемыеПоля.Добавить("ФактическиеТрудозатратыЗаПериодСпринта");
	ИсключаемыеПоля.Добавить("ПланируемыеТрудозатратыПодчиненные");
	ИсключаемыеПоля.Добавить("ФактическиеТрудозатратыПодчиненные");
	ИсключаемыеПоля.Добавить("ПланируемыеТрудозатратыПредставление");	
	ИсключаемыеПоля.Добавить("ФактическиеТрудозатратыПредставление");
	ИсключаемыеПоля.Добавить("ФактическиеТрудозатратыПредставлениеДоступные");
	ИсключаемыеПоля.Добавить("ФактическиеТрудозатратыЗадачITСпринтов");
	ИсключаемыеПоля.Добавить("ФактическиеТрудозатратыЗадачITСпринтовЗаПериодСпринта");
	
	Возврат ИсключаемыеПоля;
	
КонецФункции

Функция ПолучитьСинонимыПолей()
	
	СоответствиеПолеСиноним = Новый Соответствие;
	СоответствиеПолеСиноним.Вставить("Ссылка", "Объект");
	СоответствиеПолеСиноним.Вставить("БылаВСпринте", "Количество участий в прошлых спринтах");
	СоответствиеПолеСиноним.Вставить("ОбъектОснование", "Объект основание");
	СоответствиеПолеСиноним.Вставить("ОграниченныйПросмотр", "Ограниченный просмотр");
	СоответствиеПолеСиноним.Вставить("КомандаРазработчиков", "Команда разработчиков");
	СоответствиеПолеСиноним.Вставить("ГруппаЗаказчиков", "Группа заказчиков");
	СоответствиеПолеСиноним.Вставить("СрокРеализации", "Срок реализации");
		
	Возврат СоответствиеПолеСиноним;
		
КонецФункции

Функция ПолучитьСтрокуСортировки(ЭлементыСортировки)
	
	ПоляСортировки = Новый Массив;
	
	Для Каждого ЭлементСортировки Из ЭлементыСортировки Цикл
		
		Если Не ЭлементСортировки.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементСортировки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр Тогда
			ТипУпорядочивания = "ВОЗР";
		Иначе
			ТипУпорядочивания = "УБЫВ";
		КонецЕсли;
		
		ИмяПоля = СтрШаблон("%1 %2", ЭлементСортировки.Поле, ТипУпорядочивания);
		ПоляСортировки.Добавить(ИмяПоля);
	КонецЦикла;
	
	Возврат СтрСоединить(ПоляСортировки, ", ");
	
КонецФункции

Функция ПредобработкаТаблицыДляЗаявок(Знач ОбъектыСпринта, КомпоновщикНастроек, Знач АдресСхемыКомпоновки, Знач ЭтоОбъектыВРеализацию = Ложь)
	
	// В спринте моогут быть задачи и заявки. Задачи имеет одну систему и группу заказчика, у заявок их может быть много.
	// Но в документе в ТЗ, которая сюда передается, должна быть одна строчка, а следовательно у системы и группы заказчиков
	// занчение Неопределено. Поэтому действую так:
	// 1) Если есть отбор, то заявки в таблице дозаполняются системами и группой заказчика,  
	//    таким образом получаются дубли строк. 
	// 2) СКД разбивается на два блока: отбор и группировка. Сначала отбираются нужные записи.
	// 3) Из полученной таблицы вычищаются дубли заявок, если такие есть.
	// 4) Таблица окончательно группируется и сортируется.   
	
	НовыйОбъектыСпринта = ДозаполнитьОбъектыСпринтаСистемой(ОбъектыСпринта, ЭтоОбъектыВРеализацию); 
	
	Если ЗначениеЗаполнено(АдресСхемыКомпоновки) И ЭтоАдресВременногоХранилища(АдресСхемыКомпоновки) Тогда
		СхемаКомпоновки = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновки);
	Иначе
		СхемаКомпоновки = Документы.Спринт.ПолучитьМакет("СхемаКомпоновкиОбъектыСпринта");	
		ДобавитьПоляВНаборДанных(СхемаКомпоновки.НаборыДанных.НаборДанных1.Поля, КомпоновщикНастроек, НовыйОбъектыСпринта);
	КонецЕсли;
	
	ДанныеРасшифровкиНовые = Новый ДанныеРасшифровкиКомпоновкиДанных;	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	СкопироватьНастройкиИзКомпоновщикаНастроек(КомпоновщикНастроек, СхемаКомпоновки.НастройкиПоУмолчанию, 1);
	ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, СхемаКомпоновки.НастройкиПоУмолчанию,
		ДанныеРасшифровкиНовые, , ТипГенератора);
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ВнешняяТаблицаДанных", НовыйОбъектыСпринта);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровкиНовые);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаСКД = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаСКД);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);   
	
	// Теперь удалю системы и группы заказчика у заявок
		
	ОчищаемыеКолонки = Новый Массив;
	
	НоваяТаблицаСКД = ТаблицаСКД.Скопировать(); 
	НоваяТаблицаСКД.Очистить();
	Внесенные = Новый Соответствие; 
	
	// Если есть группировки по системе или группе заказчиков, то нужны все заявки 
	СписокГруппировок = Новый СписокЗначений;
	ДобавитьГруппировкиВСписокЗначений(СписокГруппировок, КомпоновщикНастроек.Настройки.Структура);
	ГруппировкаПоСистеме = СписокГруппировок.НайтиПоЗначению("Система") <> Неопределено;
	ГруппировкаПоГруппаЗаказчиков = СписокГруппировок.НайтиПоЗначению("ГруппаЗаказчиков") <> Неопределено;
	
	Если НЕ ГруппировкаПоСистеме Тогда
		ОчищаемыеКолонки.Добавить("Система");	
	КонецЕсли;

	Если НЕ ГруппировкаПоГруппаЗаказчиков Тогда
		ОчищаемыеКолонки.Добавить("ГруппаЗаказчиков");	
	КонецЕсли;

	ОчищаемыеКолонки = СтрСоединить(ОчищаемыеКолонки, ","); 
		
	Для Каждого Строка Из ТаблицаСКД Цикл  
		
		Ключ = "" + Строка.Ссылка.УникальныйИдентификатор();  
		
		Если ГруппировкаПоСистеме Тогда
			Ключ = Ключ + Строка.Система.УникальныйИдентификатор();	
		КонецЕсли;
		
		Если ГруппировкаПоГруппаЗаказчиков Тогда
			Ключ = Ключ + Строка.ГруппаЗаказчиков.УникальныйИдентификатор();	
		КонецЕсли;
		
		Если Внесенные.Получить(Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяТаблицаСКД.Добавить(), Строка,, ОчищаемыеКолонки);  
		Внесенные.Вставить(Ключ, "");
	КонецЦикла;                  
	
	Возврат НоваяТаблицаСКД;
	
КонецФункции

Процедура СформироватьНастройкиГруппировки(СтруктураКомпоновки, СтруктураНастроекКомпоновкиДанных)
	
	Если СтруктураНастроекКомпоновкиДанных.Количество() = 0 Тогда
		// Детальные записи
		ЭлементСтруктуры = СтруктураКомпоновки.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ЭлементСтруктуры.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Включен;		
		ВыбранноеПолеДляГруппировки = ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПолеДляГруппировки.Использование = Истина;
		Возврат;
	КонецЕсли;
	
	ЭлементСписка = СтруктураНастроекКомпоновкиДанных.Получить(0);
	
	Если НЕ ЗначениеЗаполнено(ЭлементСписка.Имя) Тогда
		// Детальные записи
		ЭлементСтруктуры = СтруктураКомпоновки.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ЭлементСтруктуры.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Включен;		
		ВыбранноеПолеДляГруппировки = ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПолеДляГруппировки.Использование = Истина;
		Возврат;
	КонецЕсли;

	ЭлементСтруктуры = СтруктураКомпоновки.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ЭлементСтруктуры.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Включен;
	ЭлементСтруктуры.Имя = ЭлементСписка.Имя;

	ЭлементГруппировки = ЭлементСтруктуры.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ЭлементГруппировки.Использование = Истина;
	ЭлементГруппировки.Поле = Новый ПолеКомпоновкиДанных(ЭлементСписка.Имя);
	ЭлементГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	
	ВыбранноеПолеДляГруппировки = ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПолеДляГруппировки.Использование = Истина;

	Если ЭлементСписка.Структура.Количество() > 0 Тогда
		СформироватьНастройкиГруппировки(ЭлементСтруктуры.Структура, ЭлементСписка.Структура);
	КонецЕсли;
			
КонецПроцедуры

Процедура СкопироватьНастройкиИзКомпоновщикаНастроек(Знач КомпоновщикНастроек, НастройкиСхемаКомпоновки, Знач Вариант = 0)
	
	// Из-за того, что нужно разделить отбор и группировку в спринте, должны заполняться разные настройки
	// Есть четрые варианта заполнения:                                              
	// 	0 - заполняется все, кроме отбора по виду очереди
	// 	1 - заполняется только отбор, кроме отбора по виду очереди
	// 	2 - заполняется группировка и порядок.
	//  4 - заполняется все
	
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
	
	КоллекцияЭлементов = НастройкиКомпоновки.Выбор.Элементы;	
	НастройкиСхемаКомпоновки.Выбор.Элементы.Очистить();
	Для Каждого Элемент Из КоллекцияЭлементов Цикл
		ВыбранноеПоле = НастройкиСхемаКомпоновки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	   ВыбранноеПоле.Поле = Элемент.Поле;
	КонецЦикла;
	
	// Отбор
	КоллекцияЭлементовОтбор = НастройкиКомпоновки.Отбор.Элементы;
	НастройкиСхемаКомпоновки.Отбор.Элементы.Очистить(); 
	
	// Группировки
	СтруктураКомпоновки = НастройкиСхемаКомпоновки.Структура;
	СтруктураКомпоновки.Очистить(); 
	НастройкиСхемаКомпоновки.Структура.Очистить();
	
	// Сортировка
	КоллекцияЭлементовПорядок = НастройкиКомпоновки.Порядок.Элементы;	
	НастройкиСхемаКомпоновки.Порядок.Элементы.Очистить();
	
	Если Вариант <> 2 Тогда    
		                               
		СкопироватьОтборИзКомпоновщикаНастроек(КоллекцияЭлементовОтбор, НастройкиСхемаКомпоновки.Отбор, Вариант);
		
		Если Вариант = 1 Тогда   
			// Сброс группировки, если заполняется только отбор.
			СформироватьНастройкиГруппировки(СтруктураКомпоновки, Новый Структура);
		КонецЕсли;
	КонецЕсли;
	
	Если Вариант <> 1 Тогда    
	    
		Для Каждого Элемент Из КоллекцияЭлементовПорядок Цикл
			ЭлементПорядка = НастройкиСхемаКомпоновки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ЭлементПорядка, Элемент);
		КонецЦикла;	
		
		// Сформируем группировки из списка значений
		СформироватьНастройкиГруппировки(СтруктураКомпоновки, НастройкиКомпоновки.Структура);
	КонецЕсли;

КонецПроцедуры

Процедура СкопироватьОтборИзКомпоновщикаНастроек(ЭлементыОтбораКомпновщика, ОтборСхемы, Вариант)
	
	Для Каждого ЭлементОтбораКомпоновщика Из ЭлементыОтбораКомпновщика Цикл   
		
		ТипЗначенияЭлементаОтбораКомпоновщика = ТипЗнч(ЭлементОтбораКомпоновщика);
		НовыйЭлементОтбора = ОтборСхемы.Элементы.Добавить(ТипЗначенияЭлементаОтбораКомпоновщика); 
		
		ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбораКомпоновщика);
		Если ТипЗначенияЭлементаОтбораКомпоновщика = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьОтборИзКомпоновщикаНастроек(ЭлементОтбораКомпоновщика.Элементы, НовыйЭлементОтбора, Вариант);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДеревоПриНаличииГруппировок(ДеревоБезГруппировок, Знач СтруктураНастроекКомпоновкиДанных, Знач СпринтПоЗаявкам) Экспорт
	
	ЭлементСписка = СтруктураНастроекКомпоновкиДанных.Получить(0);
	
	Если НЕ ЗначениеЗаполнено(ЭлементСписка.Имя) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяГруппировки = ЭлементСписка.Имя;	
	КоллекцияСтрокДерева = ДеревоБезГруппировок.Строки;
	
	Для Каждого Строка Из КоллекцияСтрокДерева Цикл
		ИндексКартинки_Группа = Справочники.СтатусыОбъектов.ИндексКартинкиГруппа();
		
		Строка.Представление = Строка[ИмяГруппировки];
		Строка.ИндексКартинки = ИндексКартинки_Группа;
		Строка.ЭтоГруппа = Истина;
		
		СформироватьДеревоПриНаличииГруппировок(Строка, ЭлементСписка.Структура, СпринтПоЗаявкам);
		
		Строка.ОценкаТрудозатрат = Строка.Строки.Итог("ОценкаТрудозатрат");
		Строка.ОценкаТрудозатратБезЗакрытых = Строка.Строки.Итог("ОценкаТрудозатратБезЗакрытых");
		Строка.ОценкаТрудозатратЗадачITСпринтов = Строка.Строки.Итог("ОценкаТрудозатратЗадачITСпринтов");
		Строка.ОценкаТрудозатратЗадачITСпринтовБезЗакрытых = Строка.Строки.Итог("ОценкаТрудозатратЗадачITСпринтовБезЗакрытых");
		Строка.ПланируемыеТрудозатраты = Строка.Строки.Итог("ПланируемыеТрудозатраты");
		Строка.ФактическиеТрудозатраты = Строка.Строки.Итог("ФактическиеТрудозатраты");		
		Строка.СвободныеТрудозатраты = Строка.Строки.Итог("СвободныеТрудозатраты");
		Строка.ФактическиеТрудозатратыЗаПериодСпринта = Строка.Строки.Итог("ФактическиеТрудозатратыЗаПериодСпринта");
		Строка.ПланируемыеТрудозатратыПодчиненные = Строка.Строки.Итог("ПланируемыеТрудозатратыПодчиненные");
		Строка.ФактическиеТрудозатратыПодчиненные = Строка.Строки.Итог("ФактическиеТрудозатратыПодчиненные");
		Строка.ФактическиеТрудозатратыЗадачITСпринтов = Строка.Строки.Итог("ФактическиеТрудозатратыЗадачITСпринтов");
		Строка.ФактическиеТрудозатратыЗадачITСпринтовЗаПериодСпринта = Строка.Строки.Итог("ФактическиеТрудозатратыЗадачITСпринтовЗаПериодСпринта");
			
		Строка.ПланируемыеТрудозатратыПредставление = СтрШаблон("%1 / %2", 
			Строка.ПланируемыеТрудозатраты, Строка.ПланируемыеТрудозатратыПодчиненные);
			
		Если СпринтПоЗаявкам Тогда
			Строка.ФактическиеТрудозатратыПредставление = СтрШаблон("%1 / %2", 
				Строка.ФактическиеТрудозатратыЗадачITСпринтовЗаПериодСпринта, Строка.ФактическиеТрудозатратыЗадачITСпринтов);
		Иначе
			Строка.ФактическиеТрудозатратыПредставление = СтрШаблон("%1 / %2", 
				Строка.ФактическиеТрудозатратыЗаПериодСпринта, Строка.ФактическиеТрудозатраты);
		КонецЕсли;
			
		Строка.ФактическиеТрудозатратыПредставлениеДоступные = СтрШаблон("%1 / %2", 
			Строка.ФактическиеТрудозатраты, Строка.ФактическиеТрудозатратыПодчиненные);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДобавитьГруппировкиВСписокЗначений(Список, СтруктураКомпоновки)
	
	Для Каждого Элемент Из СтруктураКомпоновки Цикл
		Если ЗначениеЗаполнено(Элемент.Имя) Тогда 
			Список.Добавить(Элемент.Имя, Элемент.Имя, Истина);
			ДобавитьГруппировкиВСписокЗначений(Список, Элемент.Структура);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДозаполнитьОбъектыСпринтаСистемой(ОбъектыСпринтаИсходная, Знач ЭтоОбъектыВРеализацию = Ложь)
	
	// Для заявок нужно заполнить системы и группы заказчиков, отобрать нужные объекты, и снова убрать.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаСистемыРазработки.Система, ЗНАЧЕНИЕ(Справочник.СистемыУчета.ПустаяСсылка)) КАК Система,
	|	ЕСТЬNULL(ТаблицаСистемыРазработки.ГруппаЗаказчиков, ЗНАЧЕНИЕ(Справочник.ГруппыЗаказчиковНаправлений.ПустаяСсылка)) КАК ГруппаЗаказчиков,
	|	Таблица.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ ОчередьЗаявокПродукт.Порядок ЕСТЬ NULL
	|			ТОГДА ЕСТЬNULL(ОчередьЗаявокПродукт.Порядок, 0)
	|		КОГДА НЕ ОчередьЗаявокПродуктСистема.Порядок ЕСТЬ NULL
	|			ТОГДА ЕСТЬNULL(ОчередьЗаявокПродуктСистема.Порядок, 0)
	|		ИНАЧЕ ЕСТЬNULL(ОчередьЗаявокСистема.Порядок, 0)
	|	КОНЕЦ КАК Порядок,
	|	СтатусыЗаявокПоСистемам.Статус КАК Статус,
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексКартинки
	|ИЗ
	|	Таблица КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО (ЗаявкаНаРазработку.Ссылка = Таблица.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ТаблицаСистемыРазработки
	|		ПО (ТаблицаСистемыРазработки.Ссылка = Таблица.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|		ПО (СтатусыЗаявокПоСистемам.Заявка = ЗаявкаНаРазработку.Ссылка)
	|			И (СтатусыЗаявокПоСистемам.Система = ТаблицаСистемыРазработки.Система)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (СтатусыЗаявокПоСистемам.Статус = СтатусыОбъектов.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Продукты КАК Продукты
	|		ПО (Продукты.Ссылка = ЗаявкаНаРазработку.Продукт)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиЗаявок КАК ОчередьЗаявокСистема
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|			ПО (КлючОчереди.Ссылка = ОчередьЗаявокСистема.КлючОчередиОбъекта)
	|				И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистемаГруппаЗаказчиков))
	|		ПО Таблица.Ссылка = ОчередьЗаявокСистема.Заявка
	|			И (КлючОчереди.Система = ЕСТЬNULL(ТаблицаСистемыРазработки.Система, ЗНАЧЕНИЕ(Справочник.СистемыУчета.ПустаяСсылка)))
	|			И (КлючОчереди.ГруппаЗаказчиков = ЕСТЬNULL(ТаблицаСистемыРазработки.ГруппаЗаказчиков, ЗНАЧЕНИЕ(Справочник.ГруппыЗаказчиковНаправлений.ПустаяСсылка)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиЗаявок КАК ОчередьЗаявокПродукт
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчередиПродукт
	|			ПО (КлючОчередиПродукт.Ссылка = ОчередьЗаявокПродукт.КлючОчередиОбъекта)
	|				И (КлючОчередиПродукт.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Продукт))
	|		ПО Таблица.Ссылка = ОчередьЗаявокПродукт.Заявка
	|			И (ЕСТЬNULL(Продукты.Ссылка, НЕОПРЕДЕЛЕНО) = КлючОчередиПродукт.Продукт)
	|			И (ЕСТЬNULL(Продукты.ВидОчереди, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Продукт))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиЗаявок КАК ОчередьЗаявокПродуктСистема
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчередиПродуктСистема
	|			ПО (КлючОчередиПродуктСистема.Ссылка = ОчередьЗаявокПродуктСистема.КлючОчередиОбъекта)
	|				И (КлючОчередиПродуктСистема.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ПродуктСистема))
	|		ПО Таблица.Ссылка = ОчередьЗаявокПродуктСистема.Заявка
	|			И (КлючОчередиПродуктСистема.Система = ЕСТЬNULL(ТаблицаСистемыРазработки.Система, ЗНАЧЕНИЕ(Справочник.СистемыУчета.ПустаяСсылка)))
	|			И (ЕСТЬNULL(Продукты.ВидОчереди, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ПродуктСистема))
	|			И (ЕСТЬNULL(Продукты.Ссылка, НЕОПРЕДЕЛЕНО) = КлючОчередиПродуктСистема.Продукт)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ЭтоОбъектыВРеализацию
	|				ТОГДА СтатусыЗаявокПоСистемам.Статус <> ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)
	|						И СтатусыЗаявокПоСистемам.Статус <> ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаявкаНаРазработку.Номер";
	
	Запрос.УстановитьПараметр("ЭтоОбъектыВРеализацию", ЭтоОбъектыВРеализацию);
	Запрос.УстановитьПараметр("Таблица", ОбъектыСпринтаИсходная);
	Результат = Запрос.Выполнить(); 
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		ОбъектыСпринта = ОбъектыСпринтаИсходная.Скопировать();
		ОбъектыСпринта.Очистить();
		
		Данные = Новый Соответствие;
		МассивСистем = Новый Массив;
		Заявка = Неопределено;
		
		Пока Выборка.Следующий() Цикл      
			Структура = Новый Структура("Система, ГруппаЗаказчиков, Порядок, Статус, ИндексКартинки");
			ЗаполнитьЗначенияСвойств(Структура, Выборка);
			
			Если Заявка <> Выборка.Ссылка Тогда
				МассивСистем = Новый Массив;
			КонецЕсли;
			
			МассивСистем.Добавить(Структура);
			Данные.Вставить(Выборка.Ссылка, МассивСистем);
			Заявка = Выборка.Ссылка;
		КонецЦикла;
		
		Для Каждого Строка Из ОбъектыСпринтаИсходная Цикл  
			
			ЕстьДанные = Ложь;
			Запись = Данные.Получить(Строка.Ссылка);
			
			Если Запись <> Неопределено Тогда				
				Для Каждого Значение Из Запись Цикл
					НоваяСтрока = ОбъектыСпринта.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Значение);
					ЕстьДанные = Истина;
					Данные.Удалить(Строка.Ссылка);
				КонецЦикла;
			КонецЕсли;
			
			Если НЕ ЕстьДанные Тогда
				НоваяСтрока = ОбъектыСпринта.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка); 
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОбъектыСпринта = ОбъектыСпринтаИсходная;			
	КонецЕсли;
	
	Возврат ОбъектыСпринта; 
	
КонецФункции

#КонецОбласти 

#КонецЕсли
