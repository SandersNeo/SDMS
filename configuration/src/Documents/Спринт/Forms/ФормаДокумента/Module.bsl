///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ИнициализацияПеременных

// Хранит идентификаторы задач на уточнение времени из задач в реализацию
&НаКлиенте
Перем ИдентификаторыОбъектовНаУточнение;

// Нужен для хранения источника переноса
&НаКлиенте
Перем ИсточникПеретаскивания;

// Хранит дополнительные данные для клиента, чтобы избежать постоянных обращений к серверу
&НаКлиенте
Перем КэшДанных;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если Объект.ВидСпринта = Перечисления.ВидыСпринта.Планирование Тогда
		СписокНаправлений.ЗагрузитьЗначения(Объект.Направления.Выгрузить().ВыгрузитьКолонку("Направление"));    
		
		Если СписокНаправлений.Количество() = 0 Тогда 
			ЗаполнитьНаправлениеПоУмолчанию(СписокНаправлений, Объект.Филиал);
		КонецЕсли; 	
	КонецЕсли; 	
	
	// Пользовательские настройки для компоновщиков настроек
	Настройки = ПолучитьПользовательскиеНастройки();
	КомпоновщикНастроекОбъектыСпринта.ЗагрузитьНастройки(Настройки.НастройкиКомпоновщикаОбъектыСпринта);
	КомпоновщикНастроекДоступныеОбъекты.ЗагрузитьНастройки(Настройки.НастройкиКомпоновщикаДоступныеОбъекты);

	ОбщееВремяЗаПериод = ПолучитьДоступноеВремяСпринта(ТекущийОбъект.Ссылка);
	
	ЗаполнитьРеквизитыФормы();	
	ЗаполнитьСписокОбъектовСпринта();
	ОбновитьОбъектыСпринта();
	УстановитьДоступностьЭлементовПоДате();
	
	Если Элементы.ОбъектыВРеализацию.Доступность Тогда
		ОбновитьОбъектыВРеализацию();
	КонецЕсли;     
		
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоНовый = Параметры.Ключ.Пустая();
	
	Если ЭтоНовый Тогда
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;
		Объект.Филиал = ПараметрыСеанса.Филиал;
		
		ЗаполнитьРеквизитыФормы(Истина);
		
		Если Объект.ВидСпринта = Перечисления.ВидыСпринта.Планирование Тогда
			СписокНаправлений.ЗагрузитьЗначения(Объект.Направления.Выгрузить().ВыгрузитьКолонку("Направление"));    
			
			Если СписокНаправлений.Количество() = 0 Тогда 
				ЗаполнитьНаправлениеПоУмолчанию(СписокНаправлений, Объект.Филиал);
			КонецЕсли; 	
		КонецЕсли; 
		
		// Пользовательские настройки для компоновщиков настроек
		Настройки = ПолучитьПользовательскиеНастройки();
		КомпоновщикНастроекОбъектыСпринта.ЗагрузитьНастройки(Настройки.НастройкиКомпоновщикаОбъектыСпринта);
		КомпоновщикНастроекДоступныеОбъекты.ЗагрузитьНастройки(Настройки.НастройкиКомпоновщикаДоступныеОбъекты);
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			ЗаполнитьСписокОбъектовСпринта(Объект.ДокументОснование);
			ОбновитьОбъектыСпринта();
		Иначе
			ЗаполнитьУсловноеОформлениеТеги("ОбъектыСпринтаДерево", "ОбъектыСпринта"); 
		КонецЕсли;
		
		ОбновитьОбъектыВРеализацию();
	Иначе
		// Блокируем изменение филиала и команды для записанного объекта
		Элементы.Филиал.ТолькоПросмотр = Истина;
		Элементы.Команда.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораКоманд();	
	
	Элементы.ДокументОснование.Видимость = ЗначениеЗаполнено(Объект.ДокументОснование);
	
	НастроитьФормуПоВидуСпринта();	
	
	НастроитьПодсветкуПриПриближенииСрокаРеализации();	
	
	УстановитьЗаголовокТрудозатрат();   
	ИнициализацияНастроекКолонок();    
	
	ДополнительныеПараметры = Новый Структура("КлючХранилища, ВариантыНастроек, ГруппаНастроек",
		ПолучитьКлючХранилища("ДоступныеОбъекты"), "ВариантыНастроекДоступныеОбъекты", "ДоступныеОбъекты_ПользовательскиеНастройки");  
		
	ОбновлениеПользовательскихНастроек(ДополнительныеПараметры);    
	
	ДополнительныеПараметры = Новый Структура("КлючХранилища, ВариантыНастроек, ГруппаНастроек", 
		ПолучитьКлючХранилища("ОбъектыСпринта"), "ВариантыНастроекОбъектыСпринта", "ОбъектыСпринта_ПользовательскиеНастройки");
	
	ОбновлениеПользовательскихНастроек(ДополнительныеПараметры);
	
	Если Метаданные.Отчеты.Найти("ГрафикСгоранияЗадач") = Неопределено Тогда
		Элементы.ОткрытьГрафикСгоранияСпринта.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КэшДанных = ПолучитьКэшДанных();
	ПодключитьОбработчикОжидания("СохранитьПользовательскиеНастройкиНаКлиенте", 300);
		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)  
	
	ТекущийОбъект.Направления.Очистить();
	
	Для Каждого Строка Из СписокНаправлений Цикл
		НоваяСтрока = ТекущийОбъект.Направления.Добавить();
		НоваяСтрока.Направление = Строка.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбработатьОбъектыСДобавленнымиТрудозатратами();
	ТаблицаОбъектыСДобавленнымиТрудозатратами.Очистить();
	
	ОбъектыСоСпринтами = ПолучитьТекущиеСпринтыПоСпискуОбъектов(ТекущийОбъект.Ссылка, СписокОбъектыСпринта);
	
	Для Каждого ЭлементСписка Из СписокОбъектыСпринта Цикл
		// Проверяем изменение спринта (если изменение есть - отправляем сообщения)
		СтарыйСпринт = ОбъектыСоСпринтами.Получить(ЭлементСписка.Значение);
		
		Если СтарыйСпринт <> Неопределено Тогда	
			ПроверитьИзменениеСпринта(СтарыйСпринт, ТекущийОбъект.Ссылка, ЭлементСписка.Значение);
		КонецЕсли;			
	КонецЦикла;
	
	СвободныеЧасыОбъектов = РегистрыСведений.ПланируемыеТрудозатраты.ПолучитьНераспределенноеВремяОбъектов(
		СписокОбъектыСпринта, ТекущийОбъект.Ссылка);
	
	Для Каждого Запись Из СвободныеЧасыОбъектов Цикл 	
		РегистрыСведений.ПланируемыеТрудозатратыПоСпринтам.Добавить(
			Запись.Ключ, ТекущийОбъект.Ссылка, Перечисления.ТипыТрудозатрат.Разработка, Запись.Значение.Трудозатраты);
			
		Если Запись.Значение.ТрудозатратыТестирования > 0 Тогда
			РегистрыСведений.ПланируемыеТрудозатратыПоСпринтам.Добавить(Запись.Ключ, 
				ТекущийОбъект.Ссылка, Перечисления.ТипыТрудозатрат.Тестирование, Запись.Значение.ТрудозатратыТестирования);
		КонецЕсли;
	КонецЦикла;	
	
	РегистрыСведений.СоставСпринтов.Добавить(ТекущийОбъект.Ссылка, СписокОбъектыСпринта); 
		
	// если что-то было убрано из спринта, и есть время, то нужно удалить его
	Запрос = Новый Запрос; 
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланируемыеТрудозатратыПоСпринтам.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.ПланируемыеТрудозатратыПоСпринтам КАК ПланируемыеТрудозатратыПоСпринтам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ПО ПланируемыеТрудозатратыПоСпринтам.Объект = СоставСпринтов.Объект
	|			И ПланируемыеТрудозатратыПоСпринтам.Спринт = СоставСпринтов.Спринт
	|ГДЕ
	|	ПланируемыеТрудозатратыПоСпринтам.Спринт = &Спринт
	|	И СоставСпринтов.Объект ЕСТЬ NULL";  
	
	Запрос.УстановитьПараметр("Спринт", ТекущийОбъект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл  
		РегистрыСведений.ПланируемыеТрудозатратыПоСпринтам.Удалить(Выборка.Объект, ТекущийОбъект.Ссылка);	
	КонецЦикла;
	
	УстановитьДоступностьЭлементовПоДате();   
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	РегистрыСведений.ИсторияУчастияОбъектовВСпринтах.Добавить(ТекущийОбъект.Ссылка, СписокОбъектыСпринта, ТекущаяДатаСеанса);

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда 
		РегистрыСведений.ОчередьСобытийНаОбработку.ДобавитьЗаданиеОтправитьИзмененияПоСпринтам(ТекущийОбъект.Ссылка, ТекущаяДатаСеанса);	
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Блокируем изменение филиала и команды для записанного объекта
	Элементы.Филиал.ТолькоПросмотр = Истина;
	Элементы.Команда.ТолькоПросмотр = Истина;
	ОбновитьОбъектыВРеализацию();
	УстановитьВидимостьПредупрежденияОСохранении();
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Оповестить(СобытияОповещенияКлиент.ИмяСобытияЗаписиПодчиненногоСпринта(), Объект.ДокументОснование);
	КонецЕсли;
	
	Если ИзмененныеОбъекты.Количество() > 0 Тогда
		
		Если Объект.ВидСпринта = ПредопределенноеЗначение("Перечисление.ВидыСпринта.IT") Тогда 
			Оповестить(СобытияОповещенияКлиент.ИмяСобытияОбновлениеСпринтовЗадач(), 
				ИзмененныеОбъекты.ВыгрузитьЗначения(), Объект.Ссылка);
		ИначеЕсли Объект.ВидСпринта = ПредопределенноеЗначение("Перечисление.ВидыСпринта.Планирование") Тогда 
			Оповестить(СобытияОповещенияКлиент.ИмяСобытияОбновлениеСпринтовЗаявокНаРазработку(), 
				ИзмененныеОбъекты.ВыгрузитьЗначения(), Объект.Ссылка);
		КонецЕсли;
		
		ИзмененныеОбъекты.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Отчет.ДоступноеВремяСпринта.Форма.ФормаОтчета" Тогда     
		ОбщееВремяЗаПериод = ВыбранноеЗначение;
		ПересчитатьИтогиОбъектыВРеализацию(ЭтотОбъект, КэшПоказателейОбъектыВРеализацию);
		ПересчитатьИтогиОбъектыСпринта(ЭтотОбъект, КэшПоказателейОбъектыСпринта, ОцениватьВStoryPoint);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СписокСобытий = СтрРазделить(ИмяСобытия, ";");
	ЭтоМассив = СписокСобытий.Количество() > 1; 
	Счетчик = 0;
	
	Для Каждого Событие Из СписокСобытий Цикл	
		ПараметрСобытия = ?(ЭтоМассив, Параметр[Счетчик], Параметр);
			
		Если (Событие = "Документ.Задача.ИзмениласьОценкаТрудозатрат" ИЛИ Событие = "Документ.Задача.ИзмениласьОценкаStoryPoint") 
			И Объект.ВидСпринта = ПредопределенноеЗначение("Перечисление.ВидыСпринта.IT") Тогда
			
			ОбновитьОбъектСпринта(Источник);
			ОбновитьОбъектВРеализацию(Источник);
			
		ИначеЕсли Событие = "Документ.ВнутреннееЗадание.ИзмениласьОценкаТрудозатрат" 
			И Объект.ВидСпринта = ПредопределенноеЗначение("Перечисление.ВидыСпринта.ВнутреннееЗадание") Тогда
				
			ОбновитьОбъектСпринта(Источник);
			ОбновитьОбъектВРеализацию(Источник);
			
		ИначеЕсли СобытияОповещенияКлиент.СобытиеЗаписиПодчиненногоСпринта(Событие, Объект.Ссылка, ПараметрСобытия) Тогда
			СуществуетСпринтПоЗадачам = Истина;
			ОбновитьОбъектыСпринта();
			ОбновитьОбъектыВРеализацию();
		КонецЕсли; 
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДекорацияЕстьИзмененияНажатие(Элемент)
		
	МассивОбъектов = ПолучитьНевыбранныеЗаявки(Объект.Ссылка, СписокОбъектыСпринта);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("МассивОбъектов", МассивОбъектов); 
	ПараметрыОткрытия.Вставить("Вид", "Невыбранные");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьДобавлениеОбъектов", ЭтотОбъект); 
	
	ОткрытьФорму("Документ.Спринт.Форма.ФормаОбъектыСпринтов", ПараметрыОткрытия, 
		ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ПериодПриИзменении();	

КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ПериодПриИзменении();
	
КонецПроцедуры 
	
&НаКлиенте
Процедура КомандаПриИзменении(Элемент)
	
	ФилиалКомандаПриИзменении();	
	
КонецПроцедуры 

&НаКлиенте
Процедура СписокНаправленийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	Если СписокНаправлений.Количество() = 0 Тогда 
		ЗаполнитьНаправлениеПоУмолчанию(СписокНаправлений, Объект.Филиал);               
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий таблицы "ОбъектыВРеализацию"

&НаКлиенте
Процедура ОбъектыВРеализациюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ЭтоГруппа Тогда
		Если Элементы.ОбъектыВРеализацию.Развернут(ВыбраннаяСтрока) Тогда
			Элементы.ОбъектыВРеализацию.Свернуть(ВыбраннаяСтрока);
		Иначе
			Элементы.ОбъектыВРеализацию.Развернуть(ВыбраннаяСтрока);
		КонецЕсли;
	Иначе 
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыВРеализациюПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыВРеализациюПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыВРеализациюПриАктивизацииСтроки(Элемент)    
	
	ТекущаяСтрока = Элементы.ОбъектыВРеализацию.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ТекущаяСтрока = ОбъектыВРеализацию.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ТекущаяСтрока.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;

	ТекущийОбъектОбъектыВРеализацию = ТекущаяСтрока.Ссылка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыВРеализациюНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	МассивОбъектов = Новый Массив;
	ВыделенныеСтроки = Элементы.ОбъектыВРеализацию.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьОбъектыИзВыделенныхСтрокДерева(МассивОбъектов, ВыделенныеСтроки, ОбъектыВРеализацию);
	
	ПараметрыПеретаскивания.Значение = МассивОбъектов;	
	ИсточникПеретаскивания = Элемент.Имя;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыВРеализациюПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.Имя = ИсточникПеретаскивания Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыВРеализациюПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	Если Элемент.Имя <> ИсточникПеретаскивания Тогда
		СтандартнаяОбработка = Ложь;
		МассивОбъектов = ПараметрыПеретаскивания.Значение;
		
		Если МассивОбъектов.Количество() > 0 Тогда
			ДобавитьОбъектыВРеализацию(МассивОбъектов);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий таблицы "ОбъектыСпринтаДерево"

&НаКлиенте
Процедура ОбъектыСпринтаДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ОбъектыСпринтаДерево.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		Если Элементы.ОбъектыСпринтаДерево.Развернут(ВыбраннаяСтрока) Тогда
			Элементы.ОбъектыСпринтаДерево.Свернуть(ВыбраннаяСтрока);
		Иначе
			Элементы.ОбъектыСпринтаДерево.Развернуть(ВыбраннаяСтрока);
		КонецЕсли;
	Иначе 
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСпринтаДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСпринтаДеревоПередУдалением(Элемент, Отказ)
	
	ОбработатьУдалениеОбъектовИзТекущегоСпринта();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСпринтаДеревоПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.ОбъектыСпринтаДерево.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяСтрока =  ОбъектыСпринтаДерево.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ТекущаяСтрока.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийОбъектОбъектыСпринта = ТекущаяСтрока.Ссылка;

КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСпринтаДеревоНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	МассивОбъектов = Новый Массив;
	ВыделенныеСтроки = Элементы.ОбъектыСпринтаДерево.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьОбъектыИзВыделенныхСтрокДерева(МассивОбъектов, ВыделенныеСтроки, ОбъектыСпринтаДерево);
	
	ПараметрыПеретаскивания.Значение = МассивОбъектов;
	ИсточникПеретаскивания = Элемент.Имя;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСпринтаДеревоПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.Имя = ИсточникПеретаскивания Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСпринтаДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	// Формируем массив объектов и обработаем добавление
	Если Элемент.Имя <> ИсточникПеретаскивания Тогда
		СтандартнаяОбработка = Ложь;
		МассивОбъектов = ПараметрыПеретаскивания.Значение;

		Если МассивОбъектов.Количество() > 0 Тогда
			ДобавитьОбъектыТекущийСпринт(МассивОбъектов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФилиалПриИзменении(Элемент)
	
	Объект.Команда = Неопределено;
	
	ЗаполнитьСписокВыбораКоманд();
	
	ФилиалКомандаПриИзменении();
			
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыгрузитьВTrello(Команда)
	
	КоллекцияЭлементов = ОбъектыСпринтаДерево.ПолучитьЭлементы();
	
	Если КоллекцияЭлементов.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Список объектов пуст.");
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветНаЗаписьОбъекта", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Документ не записан. Записать?", РежимДиалогаВопрос.ДаНет);
	Иначе		
		МассивОбъектов = ПолучитьМассивОбъектовТекущегоСпринта(Истина);
		ИнтеграцияДополнительныхПодсистемКлиент.ВыгрузитьВTrello(Объект.Филиал, МассивОбъектов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВсе(Команда)
	
	Массив = Новый Массив;	
	
	СтрокиВерхнегоУровня = ОбъектыВРеализацию.ПолучитьЭлементы();
	
	Для Каждого СтрокаВерхнегоУровня Из СтрокиВерхнегоУровня Цикл
		ПолучитьВсеСтрокиОбъектовИзГруппы(СтрокаВерхнегоУровня, Массив);
	КонецЦикла;
	
	ДобавитьОбъектыТекущийСпринт(Массив);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСпринт(Команда)
			
	ВыделенныеСтроки = Элементы.ОбъектыВРеализацию.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Массив = Новый Массив;
	ПолучитьОбъектыИзВыделенныхСтрокДерева(Массив, ВыделенныеСтроки, ОбъектыВРеализацию);	
	
	ДобавитьОбъектыТекущийСпринт(Массив);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьОбъектыВРеализацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпринт(Команда = Неопределено)
	
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Перед обновлением спринта требуется сохранить изменения.");
		Возврат;
	КонецЕсли;
	
	ОбновитьСпринтНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГрафикВыполненияЗадач(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(, "Для выполнения отчета нужно сохранить спринт.");
		Возврат;
	КонецЕсли;
	
	Если ОбъектыСпринтаДерево.ПолучитьЭлементы().Количество() > 0 Тогда
		ПараметрыОткрытия = Новый Структура("Спринт", Объект.Ссылка);
		ОткрытьФорму("Отчет.ГрафикВыполненияЗадач.ФормаОбъекта", ПараметрыОткрытия, , УникальныйИдентификатор);
	Иначе
		ПоказатьПредупреждение(, "Нет текущих задач в спринте.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГрафикСгоранияСпринта(Команда)  
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(, "Для выполнения отчета нужно сохранить спринт.");
		Возврат;
	КонецЕсли;
	
	Если ОбъектыСпринтаДерево.ПолучитьЭлементы().Количество() > 0 Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Спринт", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("ДатаНачала", Объект.ДатаНачала);
		ПараметрыОткрытия.Вставить("ДатаОкончания", Объект.ДатаОкончания);
		
		ОткрытьФорму("Отчет.ГрафикСгоранияЗадач.ФормаОбъекта", ПараметрыОткрытия, , УникальныйИдентификатор);
	Иначе
		ПоказатьПредупреждение(, "Нет текущих объектов в спринте.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбъектВРеализацию(Команда) 
	
	ТекущиеДанные = Элементы.ОбъектыВРеализацию.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТекущиеДанные.ЭтоГруппа Тогда
		
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбъектТекущегоСпринта(Команда)
	
	ТекущиеДанные = Элементы.ОбъектыСпринтаДерево.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТекущиеДанные.ЭтоГруппа Тогда
		
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетДоступноеВремя(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(, "Для выполнения отчета нужно сохранить спринт.");
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Филиал", Объект.Филиал);
	ПараметрыОткрытия.Вставить("Команда", Объект.Команда);
	ПараметрыОткрытия.Вставить("ДатаНачала", Объект.ДатаНачала);
	ПараметрыОткрытия.Вставить("ДатаОкончания", Объект.ДатаОкончания);
	ПараметрыОткрытия.Вставить("НомерСпринта", Объект.Номер);
	ПараметрыОткрытия.Вставить("Спринт", Объект.Ссылка);        
	
	ОткрытьФорму("Отчет.ДоступноеВремяСпринта.ФормаОбъекта", ПараметрыОткрытия, 
		ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСправочнуюИнформацию(Команда)
	
	ПерейтиПоНавигационнойСсылке(ОбщегоНазначенияВызовСервера.ПолучитьКонстанту("КорневойURL") + "/docs/navigation-list/sprint/");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетСтатистикаСпринта(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(, "Для выполнения отчета нужно сохранить спринт.");
		Возврат;
	КонецЕсли;
		
	МассивОбъектов = ПолучитьМассивОбъектовТекущегоСпринта(, Истина); 
	
	Если МассивОбъектов.Количество() = 0 Тогда 
		ПоказатьПредупреждение(, "Нет текущих объектов в спринте.");
	Иначе	
		ПараметрыОткрытия = Новый Структура;  
		ПараметрыОткрытия.Вставить("Спринт", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("МассивОбъектов", МассивОбъектов);	
			
		ОткрытьФорму("Отчет.СтатистикаСпринтов.Форма.ФормаОтчета", ПараметрыОткрытия, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТрудозатратыСпринта(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(, "Для выполнения отчета нужно сохранить спринт.");
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;  
	ПараметрыОткрытия.Вставить("Спринт", Объект.Ссылка);
	
	ОткрытьФорму("Отчет.ТрудозатратыСпринта.Форма.ФормаОтчета", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ПараметрыОткрытия = Новый Структура("Адрес, ИдентификаторФормы, КомпоновщикНастроек, НазваниеТаблицы");
	
	Если Команда.Имя = "ОткрытьФормуНастроек_ОбъектыСпринта" Тогда
		ИмяТаблицы = "ОбъектыСпринта";
		
		ПараметрыОткрытия.НазваниеТаблицы = ИмяТаблицы;
		ПараметрыОткрытия.КомпоновщикНастроек = КомпоновщикНастроекОбъектыСпринта;
		
		ПараметрыОткрытия.Адрес = ПодготовитьТаблицуОбъектов(ИмяТаблицы, СписокОбъектыСпринта, Объект.Ссылка, 
			Объект.ВидСпринта, ОцениватьВStoryPoint, УникальныйИдентификатор, Объект.Филиал);
			
	ИначеЕсли Команда.Имя = "ОткрытьФормуНастроек_ДоступныеОбъекты" Тогда
		ИмяТаблицы = "ДоступныеОбъекты";
		ПараметрыОткрытия.НазваниеТаблицы = ИмяТаблицы;
		ПараметрыОткрытия.КомпоновщикНастроек = КомпоновщикНастроекДоступныеОбъекты;		
		ПараметрыОткрытия.Адрес = ПодготовитьТаблицуОбъектов(ИмяТаблицы, СписокОбъектыСпринта, Объект.Ссылка, 
			Объект.ВидСпринта, ОцениватьВStoryPoint, УникальныйИдентификатор, Объект.Филиал, Объект.Команда, СписокНаправлений);	
	КонецЕсли;
	
	ПараметрыОткрытия.ИдентификаторФормы = УникальныйИдентификатор;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПрименениеНастроекОбъектыСпринта", ЭтотОбъект, ПараметрыОткрытия.Адрес); 

	ОткрытьФорму("Документ.Спринт.Форма.ФормаНастроек", ПараметрыОткрытия, ЭтотОбъект, , , , 
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПеревестиВсеОбъектыВРеализацию(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(, "Перед переводом в статус ""В реализацию"" требуется сохранить спринт");
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ТекстВопроса = 
		"Перед переводом в статус ""В реализацию"" требуется выполнить сохранение спринта.
		|Сохранить спринт?";
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросЗаписиСпринта", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , "Сохранение спринта");
	Иначе
		ВыполнитьПереводОбъектовВСтатусВРеализацию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Перенести(Команда)
	
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Перед переносом Объектов, необходимо соранить изменения");	
		Возврат;
	КонецЕсли;

	ОбъектыПредыдущихСпринтов.Очистить();
	
	// Формирование массива объектов не взятых в работу из предыдущих спринтов
	МассивОбъектыПредыдущихСпринтов = ПолучитьОбъектыПредыдущихСпринтов(СписокОбъектыСпринта, 
		Объект.ВидСпринта, Объект.Филиал, Объект.Команда, ОцениватьВStoryPoint, СписокНаправлений);

	Для Каждого ОбъектСпринта Из МассивОбъектыПредыдущихСпринтов Цикл
		НоваяСтрока = ОбъектыПредыдущихСпринтов.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбъектСпринта);
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура("ОбъектыПредыдущихСпринтов", ОбъектыПредыдущихСпринтов);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПереносОбъектов", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыОткрытия = Новый Структура("МассивОбъектов, Вид", МассивОбъектыПредыдущихСпринтов, "Предыдущие");
	
	ОткрытьФорму("Документ.Спринт.Форма.ФормаОбъектыСпринтов", ПараметрыОткрытия, ЭтотОбъект, , , , 
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСпринтПоЗадачам(Команда)
	
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Перед созданием нового спринта требуется сохранить изменения.");
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ДокументОснование", Объект.Ссылка); 
	ПараметрыЗаполнения.Вставить("ВидСпринта", ПредопределенноеЗначение("Перечисление.ВидыСпринта.IT"));	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);
	
	ОткрытьФорму("Документ.Спринт.ФормаОбъекта", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзСпринта(Команда)
		
	ВыделенныеСтроки = Элементы.ОбъектыСпринтаДерево.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	ПолучитьОбъектыИзВыделенныхСтрокДерева(МассивОбъектов, ВыделенныеСтроки, ОбъектыСпринтаДерево);	
	
	ДобавитьОбъектыВРеализацию(МассивОбъектов);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсе(Команда)
	
	Массив = Новый Массив;	
	
	СтрокиВерхнегоУровня = ОбъектыСпринтаДерево.ПолучитьЭлементы();
	
	Для Каждого СтрокаВерхнегоУровня Из СтрокиВерхнегоУровня Цикл
		ПолучитьВсеСтрокиОбъектовИзГруппы(СтрокаВерхнегоУровня, Массив);
	КонецЦикла;
	
	ДобавитьОбъектыВРеализацию(Массив);	
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтандартныеНастройки(Команда)
	
	Если Команда.Имя = "УстановитьСтандартныеНастройки_ОбъектыСпринта" Тогда
		КомпоновщикНастроекОбъектыСпринта.Настройки.Отбор.Элементы.Очистить();
		КомпоновщикНастроекОбъектыСпринта.Настройки.Порядок.Элементы.Очистить();
		КомпоновщикНастроекОбъектыСпринта.Настройки.Структура.Очистить();
		
		ОбновитьОбъектыСпринта();
	ИначеЕсли Команда.Имя = "УстановитьСтандартныеНастройки_ДоступныеОбъекты" Тогда
		КомпоновщикНастроекДоступныеОбъекты.Настройки.Отбор.Элементы.Очистить();
		КомпоновщикНастроекДоступныеОбъекты.Настройки.Порядок.Элементы.Очистить();
		КомпоновщикНастроекДоступныеОбъекты.Настройки.Структура.Очистить();
		
		ОбновитьОбъектыВРеализацию();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сохранение настроек динамических списков

&НаКлиенте
Процедура ОткрытьФормуСохраненныхНастроек_ДоступныеОбъекты(Команда)

	КлючХранилища = ПолучитьКлючХранилища("ДоступныеОбъекты");    
	ОткрытьФормуСохраненныхНастроек(КлючХранилища, КомпоновщикНастроекДоступныеОбъекты, 
		"ВариантыНастроекДоступныеОбъекты", "ДоступныеОбъекты_ПользовательскиеНастройки");
 
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСохраненныхНастроек_ОбъектыСпринта(Команда)
	
	КлючХранилища = ПолучитьКлючХранилища("ОбъектыСпринта");    
	ОткрытьФормуСохраненныхНастроек(КлючХранилища, КомпоновщикНастроекОбъектыСпринта,
		"ВариантыНастроекОбъектыСпринта", "ОбъектыСпринта_ПользовательскиеНастройки");
   
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкуДинамическогоСписка(Команда)   
		
	ПрименитьНастройкуДинамическогоСпискаНаСервере(Команда.Имя);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройка колонок

&НаКлиенте
Процедура НастройкаКолонокОбъектыВРеализацию(Команда)
	
	Дерево = "ОбъектыВРеализацию";
	ОткрытьНастройкуКолонок(Дерево);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКолонокОбъектыСпринта(Команда)
	
	Дерево = "ОбъектыСпринтаДерево";
	ОткрытьНастройкуКолонок(Дерево);
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиОповещений

&НаКлиенте
Процедура ОбработатьВопросЗаписиСпринта(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
		ВыполнитьПереводОбъектовВСтатусВРеализацию();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросУстановкиВремениДляОбъектов(Результат, ДополнительныеПараметры) Экспорт
		
	Если Результат = Неопределено 
		ИЛИ Результат = КодВозвратаДиалога.Нет Тогда
		
		ИдентификаторыОбъектовНаУточнение.Очистить();
		
		Если ДополнительныеПараметры.Свойство("ВыбранныеОбъекты") Тогда
			ОбновитьТрудозатратыДляПеренесенныхОбъектов(ДополнительныеПараметры.ВыбранныеОбъекты);
		КонецЕсли;
	Иначе	
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Объекты", ДополнительныеПараметры.ОбъектыДляУточнения);
		ПараметрыОткрытия.Вставить("ВидСпринта", Объект.ВидСпринта);
		ПараметрыОткрытия.Вставить("ОцениватьВStoryPoint", ОцениватьВStoryPoint);
		ПараметрыОткрытия.Вставить("ЭтоСпринтТестирования", ЭтоСпринтТестирования);
		
		Если ДополнительныеПараметры.Свойство("ВыбранныеОбъекты") Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьУстановкуВремениПеремещяемыхОбъектов", 
				ЭтотОбъект, ДополнительныеПараметры.ВыбранныеОбъекты);
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьУстановкуВремениОбъектов", ЭтотОбъект);
		КонецЕсли;
		
		ОткрытьФорму("Документ.Спринт.Форма.ФормаУстановкаВремениОбъекта", ПараметрыОткрытия, ЭтотОбъект, 
			КлючУникальности, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДобавлениеОбъектов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено 
		ИЛИ Результат.Объекты.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Если КонецДня(Объект.ДатаОкончания) < ТекущаяДата() И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В закрытый спринт невозможно добавить объекты.");
		Возврат;
	КонецЕсли;	
	
	МассивСсылок = Новый Массив;
	Для Каждого ВыбранныйОбъект Из Результат.Объекты Цикл
		МассивСсылок.Добавить(ВыбранныйОбъект.Ключ);
	КонецЦикла;
			
	МассивСтрок = Новый Массив;
	НайтиСтрокиВДеревеПоСсылке(ОбъектыВРеализацию, МассивСсылок, МассивСтрок);
		
	ДобавитьОбъектыТекущийСпринт(МассивСтрок);
	
	Если МассивСсылок.Количество() > 0 Тогда
		ШаблонСообщения = "Объект %1 не найден в таблице доступных. Возможно установлен пользовательский отбор";
		
		Для Каждого Ссылка Из МассивСсылок Цикл
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(Ссылка)); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПереносОбъектов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат.Объекты.Количество() = 0 Тогда		
		Возврат;
	КонецЕсли;
	
	Если КонецДня(Объект.ДатаОкончания) < ТекущаяДата() И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В закрытый спринт невозможно добавить объекты.");
		Возврат;
	КонецЕсли;	
	
	МассивОбъектовДляУточнения = Новый массив;
	
	Для Каждого Строка Из ОбъектыПредыдущихСпринтов Цикл
		Если Результат.Объекты.Получить(Строка.Объект) <> Неопределено Тогда
			Если Строка.ФактическиеТрудозатраты > 0	ИЛИ Строка.ПланируемыеТрудозатраты = 0 Тогда				
				МассивОбъектовДляУточнения.Добавить(Строка.Объект);
				Результат.Объекты.Удалить(Строка.Объект);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение планируемого времени выполнения объектов
	Если МассивОбъектовДляУточнения.Количество() > 0 Тогда
		УточнитьВремя(МассивОбъектовДляУточнения, Результат.Объекты);
	Иначе
		ОбновитьТрудозатратыДляПеренесенныхОбъектов(Результат.Объекты);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУстановкуВремениПеремещяемыхОбъектов(Результат, ДополнительныеПараметры) Экспорт
	
	ОбъектыСоСпринтами = ДополнительныеПараметры;
	
	Если Результат <> Неопределено Тогда
		Для Каждого Строка Из Результат Цикл
			ОбъектыСоСпринтами.Вставить(Строка.Ключ);
			Трудозатраты = Строка.Значение;
			
			НовыйОбъектСпринта = ТаблицаОбъектыСДобавленнымиТрудозатратами.Добавить();
			НовыйОбъектСпринта.Объект = Строка.Ключ;
			НовыйОбъектСпринта.Трудозатраты = Трудозатраты.Время;
			НовыйОбъектСпринта.ТрудозатратыТестирования = Трудозатраты.ВремяТестирования;
		КонецЦикла;	
	КонецЕсли;
	
	ОбновитьТрудозатратыДляПеренесенныхОбъектов(ОбъектыСоСпринтами);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОбработатьУстановкуВремениОбъектов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ИдентификаторыОбъектовНаУточнение.Очистить();
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	
	Для Каждого Идентификатор Из ИдентификаторыОбъектовНаУточнение Цикл
		Строка = ОбъектыВРеализацию.НайтиПоИдентификатору(Идентификатор);
		
		Если Строка <> Неопределено Тогда
			ДобавленныеТрудозатраты = Результат.Получить(Строка.Ссылка);
			
			Строка.СвободныеТрудозатраты = ДобавленныеТрудозатраты.Время;
			Строка.ПланируемыеТрудозатраты = Строка.ПланируемыеТрудозатраты + ДобавленныеТрудозатраты.Время;
			Строка.ОценкаТрудозатратТестирование = ДобавленныеТрудозатраты.ВремяТестирования;
			
			НовыйОбъектСпринта = ТаблицаОбъектыСДобавленнымиТрудозатратами.Добавить();
			НовыйОбъектСпринта.Объект = Строка.Ссылка;
			НовыйОбъектСпринта.Трудозатраты = ДобавленныеТрудозатраты.Время;
			НовыйОбъектСпринта.ТрудозатратыТестирования = ДобавленныеТрудозатраты.ВремяТестирования;
			
			МассивСтрок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	ИдентификаторыОбъектовНаУточнение.Очистить();
	
	ИгнорироватьПустоеВремя = (ОцениватьВStoryPoint 
		ИЛИ Объект.ВидСпринта = ПредопределенноеЗначение("Перечисление.ВидыСпринта.Планирование")
		ИЛИ Объект.ВидСпринта = ПредопределенноеЗначение("Перечисление.ВидыСпринта.ВнутреннееЗадание"));
		
	ДобавитьОбъектыТекущийСпринт(МассивСтрок, ИгнорироватьПустоеВремя);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

&НаКлиенте
Процедура ВыполнитьПереводОбъектовВСтатусВРеализацию()
	
	МассивОбъектов = ПолучитьМассивОбъектовТекущегоСпринта(Истина);
	
	Если МассивОбъектов.Количество() > 0 Тогда
		// Объектам в статусе "Новый" и "На рассмотрении" установим статус "В реализацию" и обновим таблицы
		ОбработатьИзменениеСтатусовОбъектов(МассивОбъектов);	
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В спринте нет задач.");		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьОбъектНаСервере()
	
	Результат = Новый Структура("ТекстОшибки", Неопределено, "");	
	
	Попытка
		Записать();
	Исключение
		Результат.ТекстОшибки = "Не удалось записать объект.";
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоФормы(ДанныеФормыДерево, Знач ДеревоЗначений)

	ЭлементыФормыДерево = ДанныеФормыДерево.ПолучитьЭлементы();	
	ЭлементыФормыДерево.Очистить();

	ЗаполнитьСтрокиДереваФормы(ЭлементыФормыДерево, ДеревоЗначений.Строки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьКэшПоказателей(КэшПоказателей, Знач Данные, Знач Инициализация = Ложь)
	
	Если КэшПоказателей = Неопределено Тогда		
		Структура = Новый Структура;		
	ИначеЕсли Инициализация Тогда
		Возврат;
	Иначе
		Структура = КэшПоказателей;
	КонецЕсли;	
	
	Для Каждого Строка Из Данные Цикл 
		Если ТипЗнч(Строка.Значение) = Тип("Число") Тогда
			Структура.Вставить(Строка.Ключ, ?(Инициализация, 0, Строка.Значение));
		КонецЕсли;
	КонецЦикла;

	Если КэшПоказателей = Неопределено Тогда		
		КэшПоказателей = Структура;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьНаправлениеПоУмолчанию(СписокНаправлений, Знач Филиал)
	
	СписокНаправлений.Очистить();
	
	Если ЗначениеЗаполнено(Филиал) Тогда
		Направление = РегистрыСведений.НастройкиФилиалов.ЗначениеНастройки(Филиал, 
			ПланыВидовХарактеристик.ВидыНастроекФилиалов.НаправлениеРазработки);	
		
		СписокНаправлений.Добавить(Направление);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормы(Знач ЭтоНовый = Ложь)
			
	Если Объект.ВидСпринта = Перечисления.ВидыСпринта.Планирование И НЕ ЭтоНовый Тогда
		СуществуетСпринтПоЗадачам = СуществуетСпринтПоЗадачам(Объект.Ссылка);	
	ИначеЕсли Объект.ВидСпринта = Перечисления.ВидыСпринта.IT Тогда
		ОцениватьВStoryPoint = РегистрыСведений.НастройкиФилиалов.ЗначениеНастройки(Объект.Филиал, 
			ПланыВидовХарактеристик.ВидыНастроекФилиалов.ОцениватьЗадачиВStoryPoint);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораКоманд()
	
	Если Объект.ВидСпринта = Перечисления.ВидыСпринта.ВнутреннееЗадание Тогда
		Элементы.Команда.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Элементы.Команда.СписокВыбора;	
	СписокВыбора.Очистить();
	
	КомандыРазработчиков = Справочники.Филиалы.ПолучитьКомандыРазработки(Объект.Филиал);
		
	Если КомандыРазработчиков.Количество() > 0 Тогда	
		СписокВыбора.Добавить(Справочники.Филиалы.ПустаяСсылка(), "Без команды");      
		
		Для Каждого Элемент Из КомандыРазработчиков Цикл
			СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЦикла;	
	КонецЕсли;
	
	КастомныеКоманды = Справочники.Филиалы.ПолучитьКастомныеКомандыПользователя();
		
	Если КастомныеКоманды.Количество() > 0 Тогда
		Если Элементы.Команда.СписокВыбора.Количество() = 0 Тогда
			СписокВыбора.Добавить(Справочники.Филиалы.ПустаяСсылка(), "Без команды");      
		КонецЕсли;
		
		Для Каждого Элемент Из КастомныеКоманды Цикл
			Если СписокВыбора.НайтиПоЗначению(Элемент.Значение) = Неопределено Тогда
				СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);     
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Элементы.Команда.Видимость = СписокВыбора.Количество() > 0;
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокОбъектовСпринта(ДокументОснование = Неопределено)
	
	СписокОбъектыСпринта.Очистить();
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументЗадача.Ссылка КАК Объект
		|ИЗ
		|	РегистрСведений.СтруктураПодчиненности КАК СтруктураПодчиненности
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтов
		|		ПО СтруктураПодчиненности.Родитель = СоставСпринтов.Объект
		|			И (СоставСпринтов.Спринт = &Спринт)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
		|		ПО (ДокументЗадача.Ссылка = СтруктураПодчиненности.Объект)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
		|		ПО (ДокументЗадача.Статус = СтатусыОбъектов.Ссылка)
		|ГДЕ
		|	ДокументЗадача.Филиал = &Филиал
		|	И ВЫБОР
		|			КОГДА СтатусыОбъектов.Ссылка В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
		|				ТОГДА ЛОЖЬ
		|			КОГДА СтатусыОбъектов.Родитель В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
		Запрос.УстановитьПараметр("Спринт", ДокументОснование);	
		Запрос.УстановитьПараметр("Филиал", Объект.Филиал);		
	Иначе	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СоставСпринтов.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.СоставСпринтов КАК СоставСпринтов
		|ГДЕ
		|	СоставСпринтов.Спринт = &Спринт";
		
		Запрос.УстановитьПараметр("Спринт", Объект.Ссылка);	
	КонецЕсли; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокОбъектыСпринта.Добавить(Выборка.Объект);
	КонецЦикла;    
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиДереваФормы(ЭлементыФормыДерево, Знач СтрокиДерева)

	Для Каждого Строка Из СтрокиДерева Цикл
		НоваяСтрока = ЭлементыФормыДерево.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		Если ЗначениеЗаполнено(Строка.НазначениеИмяКартинки) Тогда
			НоваяСтрока.Назначение = БиблиотекаКартинок[Строка.НазначениеИмяКартинки];
		КонецЕсли;
		
		ЗаполнитьСтрокиДереваФормы(НоваяСтрока.ПолучитьЭлементы(), Строка.Строки);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьТегиОбъекта(Строка, Знач ТаблицаТеги)

	Теги = Новый Массив;
	
	ПараметрыОтбора = Новый Структура("Объект", Строка.Ссылка);
	НайденныеСтрокиТеги = ТаблицаТеги.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаТеги Из НайденныеСтрокиТеги Цикл
		Теги.Добавить(СтрокаТеги.Тег);
	КонецЦикла;
	
	Строка.Теги = СтрСоединить(Теги, ";");	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьТрудозатратыОбъектов(ТаблицаОбъектов, Знач Спринт, Знач ВидСпринта, Знач ОцениватьВStoryPoint, Знач Филиал) 
	
	ОписаниеТипаЧисло = ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(15, 2);
	ОписаниеТипаСтрока20 = ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(20);

	ТаблицаОбъектов.Колонки.Добавить("ОценкаТрудозатрат", ОписаниеТипаЧисло);
	ТаблицаОбъектов.Колонки.Добавить("ОценкаТрудозатратБезЗакрытых", ОписаниеТипаЧисло);
	ТаблицаОбъектов.Колонки.Добавить("ОценкаТрудозатратЗадачITСпринтов", ОписаниеТипаЧисло);
	ТаблицаОбъектов.Колонки.Добавить("ОценкаТрудозатратЗадачITСпринтовБезЗакрытых", ОписаниеТипаЧисло);
	ТаблицаОбъектов.Колонки.Добавить("ПланируемыеТрудозатраты", ОписаниеТипаЧисло);
	ТаблицаОбъектов.Колонки.Добавить("ФактическиеТрудозатраты", ОписаниеТипаЧисло);
	ТаблицаОбъектов.Колонки.Добавить("ФактическиеТрудозатратыЗаПериодСпринта", ОписаниеТипаЧисло);	
	ТаблицаОбъектов.Колонки.Добавить("ПланируемыеТрудозатратыПодчиненные", ОписаниеТипаЧисло);
	ТаблицаОбъектов.Колонки.Добавить("ФактическиеТрудозатратыПодчиненные", ОписаниеТипаЧисло);
	ТаблицаОбъектов.Колонки.Добавить("ФактическиеТрудозатратыЗадачITСпринтов", ОписаниеТипаЧисло);
	ТаблицаОбъектов.Колонки.Добавить("ФактическиеТрудозатратыЗадачITСпринтовЗаПериодСпринта", ОписаниеТипаЧисло);	
	ТаблицаОбъектов.Колонки.Добавить("ПланируемыеТрудозатратыПредставление", ОписаниеТипаСтрока20);
	ТаблицаОбъектов.Колонки.Добавить("ФактическиеТрудозатратыПредставление", ОписаниеТипаСтрока20);
	ТаблицаОбъектов.Колонки.Добавить("ФактическиеТрудозатратыПредставлениеДоступные", ОписаниеТипаСтрока20);
	
	ТаблицаОбъектов.Колонки.Добавить("ПланируемыеТрудозатратыТестирование", ОписаниеТипаЧисло);
	ТаблицаОбъектов.Колонки.Добавить("ФактическиеТрудозатратыТестирование", ОписаниеТипаЧисло);
	ТаблицаОбъектов.Колонки.Добавить("СвободныеТрудозатраты", ОписаниеТипаЧисло);
	ТаблицаОбъектов.Колонки.Добавить("ОценкаТрудозатратТестирование", ОписаниеТипаЧисло);
	ТаблицаОбъектов.Колонки.Добавить("ОценкаТрудозатратТестированиеБезЗакрытых", ОписаниеТипаЧисло);

	Запрос = Новый Запрос;
	
	Разделитель = 
	";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если ВидСпринта = Перечисления.ВидыСпринта.Планирование Тогда
		Запрос.Текст = 
		#Область ТекстЗапроса
		"ВЫБРАТЬ
		|	ТаблицаОбъектов.Ссылка КАК Объект
		|ПОМЕСТИТЬ ТаблицаОбъектов
		|ИЗ
		|	&ТаблицаОбъектов КАК ТаблицаОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОбъектов.Объект КАК Объект,
		|	СУММА(Трудозатраты.Затрата) КАК Затрата
		|ПОМЕСТИТЬ ФактическиеТрудозатраты
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК Трудозатраты
		|		ПО ТаблицаОбъектов.Объект = Трудозатраты.Объект
		|			И (Трудозатраты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОбъектов.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоставСпринтов.Объект КАК Задача,
		|	ДокументЗадача.ОбъектОснование КАК Объект
		|ПОМЕСТИТЬ ЗадачиITСпринтов
		|ИЗ
		|	Документ.Спринт КАК ДокументСпринт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтов
		|		ПО ДокументСпринт.Ссылка = СоставСпринтов.Спринт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
		|		ПО (СоставСпринтов.Объект = ДокументЗадача.Ссылка)
		|ГДЕ
		|	ДокументСпринт.ДокументОснование = &Спринт
		|	И ДокументСпринт.ДокументОснование <> ЗНАЧЕНИЕ(Документ.Спринт.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадачиITСпринтов.Объект КАК Объект,
		|	СУММА(ЕСТЬNULL(ПланируемыеТрудозатратыПоСпринтам.Трудозатраты, ЕСТЬNULL(ПланируемыеТрудозатраты.Трудозатраты, 0))) КАК Трудозатраты,
		|	СУММА(ВЫБОР
		|			КОГДА ДокументЗадача.Статус В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
		|				ТОГДА 0
		|			ИНАЧЕ ЕСТЬNULL(ПланируемыеТрудозатратыПоСпринтам.Трудозатраты, ЕСТЬNULL(ПланируемыеТрудозатраты.Трудозатраты, 0))
		|		КОНЕЦ) КАК ТрудозатратыБезЗакрытых
		|ПОМЕСТИТЬ ПланируемыеТрудозатратыЗадачITСпринтов
		|ИЗ
		|	ЗадачиITСпринтов КАК ЗадачиITСпринтов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
		|		ПО ЗадачиITСпринтов.Задача = ПланируемыеТрудозатраты.Объект
		|			И (ПланируемыеТрудозатраты.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатратыПоСпринтам КАК ПланируемыеТрудозатратыПоСпринтам
		|		ПО ЗадачиITСпринтов.Задача = ПланируемыеТрудозатратыПоСпринтам.Объект
		|			И (ПланируемыеТрудозатратыПоСпринтам.Спринт = &Спринт)
		|			И (ПланируемыеТрудозатратыПоСпринтам.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
		|		ПО ЗадачиITСпринтов.Задача = ДокументЗадача.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗадачиITСпринтов.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадачиITСпринтов.Объект КАК Объект,
		|	СУММА(Трудозатраты.Затрата) КАК Затрата,
		|	СУММА(ВЫБОР
		|			КОГДА Трудозатраты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|				ТОГДА Трудозатраты.Затрата
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЗатратаЗаПериодСпринта,
		|	СУММА(ВЫБОР
		|			КОГДА ДокументЗадача.Статус В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
		|				ТОГДА 0
		|			ИНАЧЕ Трудозатраты.Затрата
		|		КОНЕЦ) КАК ЗатратаБезЗакрытых
		|ПОМЕСТИТЬ ФактическиеТрудозатратыЗадачITСпринтов
		|ИЗ
		|	ЗадачиITСпринтов КАК ЗадачиITСпринтов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК Трудозатраты
		|		ПО ЗадачиITСпринтов.Задача = Трудозатраты.Объект
		|			И (Трудозатраты.ITСтруктура)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
		|		ПО ЗадачиITСпринтов.Задача = ДокументЗадача.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗадачиITСпринтов.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОбъектов.Объект КАК Объект,
		|	СУММА(ПланируемыеТрудозатратыПоСпринтам.Трудозатраты) КАК Трудозатраты
		|ПОМЕСТИТЬ РаспределенныеТрудозатраты
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатратыПоСпринтам КАК ПланируемыеТрудозатратыПоСпринтам
		|		ПО ТаблицаОбъектов.Объект = ПланируемыеТрудозатратыПоСпринтам.Объект
		|			И (ПланируемыеТрудозатратыПоСпринтам.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОбъектов.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОбъектов.Объект КАК Объект,
		|	ЕСТЬNULL(ПланируемыеТрудозатратыПоСпринтам.Трудозатраты, 0) КАК ПланируемыеТрудозатраты,
		|	ЕСТЬNULL(ФактическиеТрудозатраты.Затрата, 0) КАК ФактическиеТрудозатраты,
		|	ЕСТЬNULL(ПланируемыеТрудозатраты.Трудозатраты, 0) - ЕСТЬNULL(РаспределенныеТрудозатраты.Трудозатраты, 0) КАК СвободныеТрудозатраты,
		|	ЕСТЬNULL(ПланируемыеТрудозатратыЗадачITСпринтов.Трудозатраты, 0) КАК ПланируемыеТрудозатратыЗадачITСпринтов,
		|	ЕСТЬNULL(ПланируемыеТрудозатратыЗадачITСпринтов.ТрудозатратыБезЗакрытых, 0) КАК ПланируемыеТрудозатратыЗадачITСпринтовБезЗакрытых,
		|	ЕСТЬNULL(ФактическиеТрудозатратыЗадачITСпринтов.Затрата, 0) КАК ФактическиеТрудозатратыЗадачITСпринтов,
		|	ЕСТЬNULL(ФактическиеТрудозатратыЗадачITСпринтов.ЗатратаЗаПериодСпринта, 0) КАК ФактическиеТрудозатратыЗадачITСпринтовЗаПериодСпринта,
		|	ЕСТЬNULL(ФактическиеТрудозатратыЗадачITСпринтов.ЗатратаБезЗакрытых, 0) КАК ФактическиеТрудозатратыЗадачITСпринтовБезЗакрытых
		|ПОМЕСТИТЬ ДанныеОбъектов
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатратыПоСпринтам КАК ПланируемыеТрудозатратыПоСпринтам
		|		ПО ТаблицаОбъектов.Объект = ПланируемыеТрудозатратыПоСпринтам.Объект
		|			И (ПланируемыеТрудозатратыПоСпринтам.Спринт = &Спринт)
		|			И (ПланируемыеТрудозатратыПоСпринтам.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
		|		ПО ТаблицаОбъектов.Объект = ПланируемыеТрудозатраты.Объект
		|			И (ПланируемыеТрудозатраты.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РаспределенныеТрудозатраты КАК РаспределенныеТрудозатраты
		|		ПО ТаблицаОбъектов.Объект = РаспределенныеТрудозатраты.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
		|		ПО ТаблицаОбъектов.Объект = ФактическиеТрудозатраты.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланируемыеТрудозатратыЗадачITСпринтов КАК ПланируемыеТрудозатратыЗадачITСпринтов
		|		ПО ТаблицаОбъектов.Объект = ПланируемыеТрудозатратыЗадачITСпринтов.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ ФактическиеТрудозатратыЗадачITСпринтов КАК ФактическиеТрудозатратыЗадачITСпринтов
		|		ПО ТаблицаОбъектов.Объект = ФактическиеТрудозатратыЗадачITСпринтов.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОбъектов.Объект КАК Объект,
		|	СУММА(ПланируемыеТрудозатраты.Трудозатраты) КАК Значение
		|ПОМЕСТИТЬ ЗначенияПлановыеТрудозатраты
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
		|		ПО ТаблицаОбъектов.Объект = ДокументЗадача.ОбъектОснование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
		|		ПО (ДокументЗадача.Ссылка = (ВЫРАЗИТЬ(ПланируемыеТрудозатраты.Объект КАК Документ.Задача)))
		|			И (ПланируемыеТрудозатраты.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОбъектов.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеОбъектов.Объект КАК Ссылка,
		|	ДанныеОбъектов.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты,
		|	ДанныеОбъектов.ФактическиеТрудозатраты КАК ФактическиеТрудозатраты,
		|	ВЫБОР
		|		КОГДА ДанныеОбъектов.СвободныеТрудозатраты > 0
		|			ТОГДА ДанныеОбъектов.СвободныеТрудозатраты
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СвободныеТрудозатраты,
		|	ДанныеОбъектов.ФактическиеТрудозатратыЗадачITСпринтов КАК ФактическиеТрудозатратыЗадачITСпринтов,
		|	ДанныеОбъектов.ФактическиеТрудозатратыЗадачITСпринтовЗаПериодСпринта КАК ФактическиеТрудозатратыЗадачITСпринтовЗаПериодСпринта,
		|	ВЫБОР
		|		КОГДА ДанныеОбъектов.ПланируемыеТрудозатраты > ДанныеОбъектов.ФактическиеТрудозатраты + ДанныеОбъектов.ФактическиеТрудозатратыЗадачITСпринтов
		|			ТОГДА ДанныеОбъектов.ПланируемыеТрудозатраты - ДанныеОбъектов.ФактическиеТрудозатраты - ДанныеОбъектов.ФактическиеТрудозатратыЗадачITСпринтов
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОценкаТрудозатрат,
		|	ВЫБОР
		|		КОГДА ДанныеОбъектов.ПланируемыеТрудозатратыЗадачITСпринтов > ДанныеОбъектов.ФактическиеТрудозатратыЗадачITСпринтов
		|			ТОГДА ДанныеОбъектов.ПланируемыеТрудозатратыЗадачITСпринтов - ДанныеОбъектов.ФактическиеТрудозатратыЗадачITСпринтов
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОценкаТрудозатратЗадачITСпринтов,
		|	ВЫБОР
		|		КОГДА ДанныеОбъектов.ПланируемыеТрудозатратыЗадачITСпринтовБезЗакрытых > ДанныеОбъектов.ФактическиеТрудозатратыЗадачITСпринтовБезЗакрытых
		|			ТОГДА ДанныеОбъектов.ПланируемыеТрудозатратыЗадачITСпринтовБезЗакрытых - ДанныеОбъектов.ФактическиеТрудозатратыЗадачITСпринтовБезЗакрытых
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОценкаТрудозатратЗадачITСпринтовБезЗакрытых,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ЗначенияПлановыеТрудозатраты.Значение, 0) КАК ЧИСЛО(15, 2)) КАК ПланируемыеТрудозатратыПодчиненные,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ЗначенияФактическиеТрудозатраты.Значение, 0) КАК ЧИСЛО(15, 2)) КАК ФактическиеТрудозатратыПодчиненные
		|ИЗ
		|	ДанныеОбъектов КАК ДанныеОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияДополнительныхРеквизитовОбъектов КАК ЗначенияФактическиеТрудозатраты
		|		ПО ДанныеОбъектов.Объект = ЗначенияФактическиеТрудозатраты.Объект
		|			И (ЗначенияФактическиеТрудозатраты.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДополнительныхРеквизитов.ФактическиеТрудозатраты))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПлановыеТрудозатраты КАК ЗначенияПлановыеТрудозатраты
		|		ПО ДанныеОбъектов.Объект = ЗначенияПлановыеТрудозатраты.Объект";
		#КонецОбласти
	ИначеЕсли ВидСпринта = Перечисления.ВидыСпринта.IT Тогда
		Запрос.Текст =
		// ФактическиеТрудозатратыЗаПериодСпринта при использовании оценки в StoryPoint считаем = 0
		// т.к. пока не добавлена логика расчета изменения % выполнения за период спринта
		#Область ТекстЗапроса
		"ВЫБРАТЬ
		|	ТаблицаОбъектов.Ссылка КАК Объект
		|ПОМЕСТИТЬ ТаблицаОбъектов
		|ИЗ
		|	&ТаблицаОбъектов КАК ТаблицаОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОбъектов.Объект КАК Объект,
		|	СУММА(Трудозатраты.Затрата) КАК Затрата,
		|	СУММА(ВЫБОР
		|			КОГДА Трудозатраты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|				ТОГДА Трудозатраты.Затрата
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЗатратаЗаПериодСпринта,
		|	СУММА(ВЫБОР
		|			КОГДА Трудозатраты.РольПользователя <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.Тестировщик)
		|				ТОГДА Трудозатраты.Затрата
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЗатратаРазработка,
		|	СУММА(ВЫБОР
		|			КОГДА Трудозатраты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|					И Трудозатраты.РольПользователя <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.Тестировщик)
		|				ТОГДА Трудозатраты.Затрата
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЗатратаРазработкаЗаПериодСпринта,
		|	СУММА(ВЫБОР
		|			КОГДА Трудозатраты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|					И Трудозатраты.РольПользователя = ЗНАЧЕНИЕ(Справочник.РолиПользователей.Тестировщик)
		|				ТОГДА Трудозатраты.Затрата
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЗатратаТестирование
		|ПОМЕСТИТЬ ФактическиеТрудозатраты
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК Трудозатраты
		|		ПО ТаблицаОбъектов.Объект = Трудозатраты.Объект
		|			И (Трудозатраты.ITСтруктура)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОбъектов.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОбъектов.Объект КАК Объект,
		|	СУММА(ПланируемыеТрудозатратыПоСпринтам.Трудозатраты) КАК Трудозатраты,
		|	ПланируемыеТрудозатратыПоСпринтам.ТипТрудозатрат КАК ТипТрудозатрат
		|ПОМЕСТИТЬ РаспределенныеТрудозатраты
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатратыПоСпринтам КАК ПланируемыеТрудозатратыПоСпринтам
		|		ПО ТаблицаОбъектов.Объект = ПланируемыеТрудозатратыПоСпринтам.Объект
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОбъектов.Объект,
		|	ПланируемыеТрудозатратыПоСпринтам.ТипТрудозатрат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОбъектов.Объект КАК Объект,
		|	ДокументЗадача.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА &ОцениватьВStoryPoint
		|			ТОГДА ДокументЗадача.ОценкаStoryPoint
		|		ИНАЧЕ ЕСТЬNULL(ПланируемыеТрудозатраты.Трудозатраты, 0) - ЕСТЬNULL(РаспределенныеТрудозатраты.Трудозатраты, 0)
		|	КОНЕЦ КАК ПланируемыеТрудозатраты,
		|	ВЫБОР
		|		КОГДА &ОцениватьВStoryPoint
		|			ТОГДА ДокументЗадача.ОценкаStoryPoint
		|		ИНАЧЕ ЕСТЬNULL(ПланируемыеТрудозатратыПоСпринтам.Трудозатраты, 0)
		|	КОНЕЦ КАК ПланируемыеТрудозатратыПоСпринту,
		|	ВЫБОР
		|		КОГДА &ОцениватьВStoryPoint
		|			ТОГДА ДокументЗадача.ОценкаStoryPoint * (ДокументЗадача.ПроцентВыполнения / 100)
		|		ИНАЧЕ ЕСТЬNULL(ФактическиеТрудозатраты.Затрата, 0)
		|	КОНЕЦ КАК ФактическиеТрудозатраты,
		|	ВЫБОР
		|		КОГДА &ОцениватьВStoryPoint
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(ФактическиеТрудозатраты.ЗатратаЗаПериодСпринта, 0)
		|	КОНЕЦ КАК ФактическиеТрудозатратыЗаПериодСпринта,
		|	ВЫБОР
		|		КОГДА &ОцениватьВStoryPoint
		|			ТОГДА ДокументЗадача.ОценкаStoryPoint * (ДокументЗадача.ПроцентВыполнения / 100)
		|		ИНАЧЕ ЕСТЬNULL(ФактическиеТрудозатраты.ЗатратаРазработка, 0)
		|	КОНЕЦ КАК ФактическиеТрудозатратыРазработка,
		|	ВЫБОР
		|		КОГДА &ОцениватьВStoryPoint
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(ФактическиеТрудозатраты.ЗатратаРазработкаЗаПериодСпринта, 0)
		|	КОНЕЦ КАК ФактическиеТрудозатратыРазработкаЗаПериодСпринта,
		|	ВЫБОР
		|		КОГДА &ОцениватьВStoryPoint
		|			ТОГДА ДокументЗадача.ОценкаStoryPoint
		|		ИНАЧЕ ЕСТЬNULL(ПланируемыеТрудозатратыПоСпринтамТестирование.Трудозатраты, 0)
		|	КОНЕЦ КАК ПланируемыеТрудозатратыТестирование,
		|	ВЫБОР
		|		КОГДА &ОцениватьВStoryPoint
		|			ТОГДА ДокументЗадача.ОценкаStoryPoint * (ДокументЗадача.ПроцентВыполнения / 100)
		|		ИНАЧЕ ЕСТЬNULL(ФактическиеТрудозатраты.ЗатратаТестирование, 0)
		|	КОНЕЦ КАК ФактическиеТрудозатратыТестирование
		|ПОМЕСТИТЬ ДанныеОбъектов
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
		|		ПО ТаблицаОбъектов.Объект = ДокументЗадача.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатратыПоСпринтам КАК ПланируемыеТрудозатратыПоСпринтам
		|		ПО ТаблицаОбъектов.Объект = ПланируемыеТрудозатратыПоСпринтам.Объект
		|			И (ПланируемыеТрудозатратыПоСпринтам.Спринт = &Спринт)
		|			И (ПланируемыеТрудозатратыПоСпринтам.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатратыПоСпринтам КАК ПланируемыеТрудозатратыПоСпринтамТестирование
		|		ПО ТаблицаОбъектов.Объект = ПланируемыеТрудозатратыПоСпринтамТестирование.Объект
		|			И (ПланируемыеТрудозатратыПоСпринтамТестирование.Спринт = &Спринт)
		|			И (ПланируемыеТрудозатратыПоСпринтамТестирование.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Тестирование))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
		|		ПО ТаблицаОбъектов.Объект = ПланируемыеТрудозатраты.Объект
		|			И (ПланируемыеТрудозатраты.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РаспределенныеТрудозатраты КАК РаспределенныеТрудозатраты
		|		ПО ТаблицаОбъектов.Объект = РаспределенныеТрудозатраты.Объект
		|			И (РаспределенныеТрудозатраты.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
		|		ПО ТаблицаОбъектов.Объект = ФактическиеТрудозатраты.Объект";
		
		Если НЕ ЭтоСпринтТестирования(Филиал) Тогда
			Запрос.Текст = Запрос.Текст + Разделитель + 		
			"ВЫБРАТЬ
			|	ДанныеОбъектов.Объект КАК Ссылка,
			|	ДанныеОбъектов.ПланируемыеТрудозатраты КАК СвободныеТрудозатраты,
			|	ДанныеОбъектов.ПланируемыеТрудозатратыПоСпринту КАК ПланируемыеТрудозатраты,
			|	ДанныеОбъектов.ФактическиеТрудозатратыРазработка КАК ФактическиеТрудозатраты,
			|	ДанныеОбъектов.ФактическиеТрудозатратыРазработкаЗаПериодСпринта КАК ФактическиеТрудозатратыЗаПериодСпринта,
			|	ВЫБОР
			|		КОГДА &ОцениватьВStoryPoint
			|			ТОГДА ДанныеОбъектов.ПланируемыеТрудозатраты - ДанныеОбъектов.ФактическиеТрудозатраты
			|		КОГДА ДанныеОбъектов.ПланируемыеТрудозатратыПоСпринту > ДанныеОбъектов.ФактическиеТрудозатратыРазработкаЗаПериодСпринта
			|			ТОГДА ДанныеОбъектов.ПланируемыеТрудозатратыПоСпринту - ДанныеОбъектов.ФактическиеТрудозатратыРазработкаЗаПериодСпринта
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ОценкаТрудозатрат,
			|	ВЫБОР
			|		КОГДА ДанныеОбъектов.Статус В (ЗНАЧЕНИЕ(Справочник.Статусыобъектов.Решен), ЗНАЧЕНИЕ(Справочник.Статусыобъектов.Отклонен))
			|			ТОГДА 0
			|		КОГДА ДанныеОбъектов.ПланируемыеТрудозатратыПоСпринту > ДанныеОбъектов.ФактическиеТрудозатратыРазработкаЗаПериодСпринта
			|			ТОГДА ДанныеОбъектов.ПланируемыеТрудозатратыПоСпринту - ДанныеОбъектов.ФактическиеТрудозатратыРазработкаЗаПериодСпринта
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ОценкаТрудозатратБезЗакрытых,
			|	ДанныеОбъектов.ПланируемыеТрудозатратыТестирование КАК ПланируемыеТрудозатратыТестирование,
			|	ДанныеОбъектов.ФактическиеТрудозатратыТестирование КАК ФактическиеТрудозатратыТестирование,
			|	ВЫБОР
			|		КОГДА ДанныеОбъектов.ПланируемыеТрудозатратыТестирование > ДанныеОбъектов.ФактическиеТрудозатратыТестирование
			|			ТОГДА ДанныеОбъектов.ПланируемыеТрудозатратыТестирование - ДанныеОбъектов.ФактическиеТрудозатратыТестирование
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ОценкаТрудозатратТестирование,
			|	ВЫБОР
			|		КОГДА ДанныеОбъектов.Статус В (ЗНАЧЕНИЕ(Справочник.Статусыобъектов.Решен), ЗНАЧЕНИЕ(Справочник.Статусыобъектов.Отклонен))
			|			ТОГДА 0
			|		КОГДА ДанныеОбъектов.ПланируемыеТрудозатратыТестирование > ДанныеОбъектов.ФактическиеТрудозатратыТестирование
			|			ТОГДА ДанныеОбъектов.ПланируемыеТрудозатратыТестирование - ДанныеОбъектов.ФактическиеТрудозатратыТестирование
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ОценкаТрудозатратТестированиеБезЗакрытых
			|ИЗ
			|	ДанныеОбъектов КАК ДанныеОбъектов";
		Иначе
			Запрос.Текст = Запрос.Текст + Разделитель +		
			"ВЫБРАТЬ
			|	ДанныеОбъектов.Объект КАК Ссылка,
			|	ДанныеОбъектов.ПланируемыеТрудозатраты КАК СвободныеТрудозатраты,
			|	ДанныеОбъектов.ПланируемыеТрудозатратыПоСпринту КАК ПланируемыеТрудозатраты,
			|	ДанныеОбъектов.ФактическиеТрудозатраты КАК ФактическиеТрудозатраты,
			|	ДанныеОбъектов.ФактическиеТрудозатратыЗаПериодСпринта КАК ФактическиеТрудозатратыЗаПериодСпринта,
			|	ВЫБОР
			|		КОГДА ДанныеОбъектов.ПланируемыеТрудозатратыПоСпринту > ДанныеОбъектов.ФактическиеТрудозатратыЗаПериодСпринта
			|			ТОГДА ДанныеОбъектов.ПланируемыеТрудозатратыПоСпринту - ДанныеОбъектов.ФактическиеТрудозатратыЗаПериодСпринта
			|	КОНЕЦ КАК ОценкаТрудозатрат,
			|	ВЫБОР
			|		КОГДА ДанныеОбъектов.Статус В (ЗНАЧЕНИЕ(Справочник.Статусыобъектов.Решен), ЗНАЧЕНИЕ(Справочник.Статусыобъектов.Отклонен))
			|			ТОГДА 0
			|		КОГДА ДанныеОбъектов.ПланируемыеТрудозатратыПоСпринту > ДанныеОбъектов.ФактическиеТрудозатратыЗаПериодСпринта
			|			ТОГДА ДанныеОбъектов.ПланируемыеТрудозатратыПоСпринту - ДанныеОбъектов.ФактическиеТрудозатратыЗаПериодСпринта
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ОценкаТрудозатратБезЗакрытых
			|ИЗ
			|	ДанныеОбъектов КАК ДанныеОбъектов";
		КонецЕсли;
		#КонецОбласти
		
		Запрос.УстановитьПараметр("ОцениватьВStoryPoint", ОцениватьВStoryPoint);
	Иначе
		// ВидыСпринта.ВнутреннееЗадание
		Запрос.Текст =
		#Область ТекстЗапроса
		"ВЫБРАТЬ
		|	ТаблицаОбъектов.Ссылка КАК Объект
		|ПОМЕСТИТЬ ТаблицаОбъектов
		|ИЗ
		|	&ТаблицаОбъектов КАК ТаблицаОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОбъектов.Объект КАК Объект,
		|	СУММА(Трудозатраты.Затрата) КАК Затрата,
		|	СУММА(ВЫБОР
		|			КОГДА Трудозатраты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|				ТОГДА Трудозатраты.Затрата
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЗатратаЗаПериодСпринта
		|ПОМЕСТИТЬ ФактическиеТрудозатраты
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК Трудозатраты
		|		ПО ТаблицаОбъектов.Объект = Трудозатраты.Объект
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОбъектов.Объект
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОбъектов.Объект КАК Объект,
		|	СУММА(ПланируемыеТрудозатратыПоСпринтам.Трудозатраты) КАК Трудозатраты
		|ПОМЕСТИТЬ РаспределенныеТрудозатраты
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатратыПоСпринтам КАК ПланируемыеТрудозатратыПоСпринтам
		|		ПО ТаблицаОбъектов.Объект = ПланируемыеТрудозатратыПоСпринтам.Объект
		|			И (ПланируемыеТрудозатратыПоСпринтам.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОбъектов.Объект
		|;	
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОбъектов.Объект КАК Объект,
		|	ДокументВнутреннееЗадание.Статус КАК Статус,
		|	ЕСТЬNULL(ПланируемыеТрудозатраты.Трудозатраты, 0) - ЕСТЬNULL(РаспределенныеТрудозатраты.Трудозатраты, 0) КАК СвободныеТрудозатраты,
		|	ЕСТЬNULL(ПланируемыеТрудозатратыПоСпринтам.Трудозатраты, 0) КАК ПланируемыеТрудозатраты,
		|	ЕСТЬNULL(ФактическиеТрудозатраты.Затрата, 0) КАК ФактическиеТрудозатраты,
		|	ЕСТЬNULL(ФактическиеТрудозатраты.ЗатратаЗаПериодСпринта, 0) КАК ФактическиеТрудозатратыЗаПериодСпринта
		|ПОМЕСТИТЬ ДанныеОбъектов
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееЗадание КАК ДокументВнутреннееЗадание
		|		ПО ТаблицаОбъектов.Объект = ДокументВнутреннееЗадание.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатратыПоСпринтам КАК ПланируемыеТрудозатратыПоСпринтам
		|		ПО (ДокументВнутреннееЗадание.Ссылка = (ВЫРАЗИТЬ(ПланируемыеТрудозатратыПоСпринтам.Объект КАК Документ.ВнутреннееЗадание)))
		|			И (ПланируемыеТрудозатратыПоСпринтам.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
		|		ПО (ДокументВнутреннееЗадание.Ссылка = (ВЫРАЗИТЬ(ПланируемыеТрудозатраты.Объект КАК Документ.ВнутреннееЗадание)))
		|			И (ПланируемыеТрудозатраты.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
		|		ПО ТаблицаОбъектов.Объект = ФактическиеТрудозатраты.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РаспределенныеТрудозатраты КАК РаспределенныеТрудозатраты
		|		ПО ТаблицаОбъектов.Объект = РаспределенныеТрудозатраты.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеОбъектов.Объект КАК Ссылка,
		|	ДанныеОбъектов.СвободныеТрудозатраты КАК СвободныеТрудозатраты,
		|	ДанныеОбъектов.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты,
		|	ДанныеОбъектов.ФактическиеТрудозатраты КАК ФактическиеТрудозатраты,
		|	ДанныеОбъектов.ФактическиеТрудозатратыЗаПериодСпринта КАК ФактическиеТрудозатратыЗаПериодСпринта,
		|	ВЫБОР
		|		КОГДА ДанныеОбъектов.ПланируемыеТрудозатраты > ДанныеОбъектов.ФактическиеТрудозатратыЗаПериодСпринта
		|			ТОГДА ДанныеОбъектов.ПланируемыеТрудозатраты - ДанныеОбъектов.ФактическиеТрудозатратыЗаПериодСпринта
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОценкаТрудозатрат,
		|	ВЫБОР
		|		КОГДА ДанныеОбъектов.Статус В (ЗНАЧЕНИЕ(Справочник.Статусыобъектов.Решен), ЗНАЧЕНИЕ(Справочник.Статусыобъектов.Отклонен))
		|			ТОГДА 0
		|		КОГДА ДанныеОбъектов.ПланируемыеТрудозатраты > ДанныеОбъектов.ФактическиеТрудозатратыЗаПериодСпринта
		|			ТОГДА ДанныеОбъектов.ПланируемыеТрудозатраты - ДанныеОбъектов.ФактическиеТрудозатратыЗаПериодСпринта
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОценкаТрудозатратБезЗакрытых
		|ИЗ
		|	ДанныеОбъектов КАК ДанныеОбъектов";
		#КонецОбласти
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Спринт) Тогда
		ДанныеСпринта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Спринт, "ДатаНачала, ДатаОкончания");
	Иначе
		ДанныеСпринта = Новый Структура("ДатаНачала, ДатаОкончания", '00010101', '00010101');
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектов);
	Запрос.УстановитьПараметр("Спринт", Спринт);
	Запрос.УстановитьПараметр("ДатаНачала", ДанныеСпринта.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДанныеСпринта.ДатаОкончания));

	Результат = Запрос.Выполнить();
	Колонки = Новый Массив;
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Колонки = СтрСоединить(Колонки, ",");
	
	Выборка = Результат.Выбрать();
	Данные = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл  
		Структура = Новый Структура(Колонки);  
		ЗаполнитьЗначенияСвойств(Структура, Выборка);
		Данные.Вставить(Выборка.Ссылка, Структура);
	КонецЦикла;	    
	
	Для Каждого Строка Из ТаблицаОбъектов Цикл
		
		Запись = Данные.Получить(Строка.Ссылка);
		
		Если Запись <> Неопределено Тогда  
			ЗаполнитьЗначенияСвойств(Строка, Запись);
			Данные.Удалить(Строка.Ссылка);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловноеОформлениеТеги(ИмяЭлемента, НазваниеТаблицы) 
	
	// Сначала удалить старое оформление
	Для Счетчик = -УсловноеОформление.Элементы.Количество() + 1 По 0 Цикл
		Элемент = УсловноеОформление.Элементы[-Счетчик];
		Если Найти(Строка(Элемент.Отбор), ИмяЭлемента + ".Теги") > 0 Тогда 
			УсловноеОформление.Элементы.Удалить(Элемент);	
		КонецЕсли;
	КонецЦикла;                                          
	
	КлючНастроек = Документы.Спринт.ПолучитьКлючНастроек(НазваниеТаблицы); 
	СтруктураНастроекСКД = ОбщегоНазначенияВызовСервера.ЗагрузитьОбщиеНастройки(КлючНастроек.Ключ, КлючНастроек.Значение); 
	
	Если СтруктураНастроекСКД <> Неопределено И СтруктураНастроекСКД.Свойство("Теги") Тогда
		// Заполнять нужно снизу вверх, так как приоритет тегов идет сверху вниз, а у условного оформления снизу вверх. 
		Для Счетчик = -СтруктураНастроекСКД.Теги.Количество() + 1 По 0 Цикл 
			
			Тег = СтруктураНастроекСКД.Теги[-Счетчик]; 
			
			Если НЕ Тег.Пометка Тогда
				Продолжить;
			КонецЕсли; 
			
			ЭлементУсловноеОформление = УсловноеОформление.Элементы.Добавить(); 	
			ИмяПоля = СтрШаблон("%1.Теги", ИмяЭлемента);
			
			ЭлементОтбора = ЭлементУсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
			ЭлементОтбора.ПравоеЗначение = Строка(Тег.Значение);
			ЭлементОтбора.Использование = Истина;
			
			Элемент = ЭлементУсловноеОформление.Поля.Элементы.Добавить();
			Элемент.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
			Элемент.Использование = Истина;
			
			ЭлементОформления = ЭлементУсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветФона"));
			ЭлементОформления.Значение = Тег.ЦветПодсветки;
			ЭлементОформления.Использование = Истина;
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОбъектыВДереве(КэшПоказателей, Знач ИмяРеквизита, Знач Ссылка)

	ДеревоЗначений = РеквизитФормыВЗначение(ИмяРеквизита);
	
	НайденнаяСтрока = ДеревоЗначений.Строки.Найти(Ссылка, "Ссылка", Истина);
	
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокОбъектов = Новый СписокЗначений;
	СписокОбъектов.Добавить(Ссылка);
	
	ТаблицаОбъектов = ПолучитьТаблицуОбъектов(СписокОбъектов);	
	ЗаполнитьТрудозатратыОбъектов(ТаблицаОбъектов, Объект.Ссылка, Объект.ВидСпринта, ОцениватьВStoryPoint, Объект.Филиал);
	
	СтрокаДанныеТрудозатрат = ТаблицаОбъектов[0];
		
	Для Каждого Показатель Из КэшПоказателей Цикл
		КэшПоказателей[Показатель.Ключ] = КэшПоказателей[Показатель.Ключ] 
			- НайденнаяСтрока[Показатель.Ключ] + СтрокаДанныеТрудозатрат[Показатель.Ключ];	
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаДанныеТрудозатрат); 
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, ИмяРеквизита); 
	
	Если ИмяРеквизита = "ОбъектыСпринтаДерево" Тогда
		ТекущийОбъект = ТекущийОбъектОбъектыСпринта;
		ПересчитатьИтогиОбъектыСпринта(ЭтотОбъект, КэшПоказателей, ОцениватьВStoryPoint); 	
	Иначе
		ТекущийОбъект = ТекущийОбъектОбъектыВРеализацию;
		ПересчитатьИтогиОбъектыВРеализацию(ЭтотОбъект, КэшПоказателей);
	КонецЕсли;
	
	Элементы[ИмяРеквизита].ТекущаяСтрока = ПолучитьТекущуюСтрокуДерева(ДеревоЗначений, ЭтотОбъект[ИмяРеквизита], ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСтатусыОбъектовВРеализацию(МассивОбъектов)
	
	// 1. Выберем объекты в статусе "Новый" и "На рассмотрении"
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Задача.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	Задача.Ссылка В(&СписокЗадач)
	|	И Задача.Статус В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Рассмотрение))";
	
	Запрос.УстановитьПараметр("СписокЗадач", МассивОбъектов);	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда	
		// 2. Установка блокировки и изменение статуса объектов	
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("Документ.Задача");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		
		Выборка = РезультатЗапроса.Выбрать();
		
		НачатьТранзакцию();
		Попытка
			БлокировкаДанных.Заблокировать();
			
			Пока Выборка.Следующий() Цикл	
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.Статус = Справочники.СтатусыОбъектов.ВРеализацию;
				ДокументОбъект.Записать();	
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = "Не удалось изменить статусы по причине: объект заблокирован для изменения.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
		КонецПопытки;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Отсутствуют объекты в статусах ""Новый"" и ""На рассмотрении"".");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиСтрокиВДеревеПоСсылке(Корень, МассивСсылок, МассивСтрок, ПоискЗавершен = Ложь)
	
	Для Каждого Элемент Из Корень.ПолучитьЭлементы() Цикл
		Если Элемент.ЭтоГруппа Тогда
			НайтиСтрокиВДеревеПоСсылке(Элемент, МассивСсылок, МассивСтрок, ПоискЗавершен);
			Если ПоискЗавершен Тогда
				Прервать;
			КонецЕсли;
		Иначе
			ИндексЭлемента = МассивСсылок.Найти(Элемент.Ссылка);
			
			Если ИндексЭлемента <> Неопределено Тогда
				МассивСтрок.Добавить(Элемент);
				МассивСсылок.Удалить(ИндексЭлемента);
				
				Если МассивСсылок.Количество() = 0 Тогда
					ПоискЗавершен = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
	
&НаСервере
Процедура НастроитьПодсветкуПриПриближенииСрокаРеализации()
	
	ОформляемыеТаблицы = Новый Массив;
	
	ОписаниеТаблицы = ОбщегоНазначения.ОписаниеОформляемойТаблицыФормы("ОбъектыВРеализацию", "ОбъектыВРеализацию");
	ОформляемыеТаблицы.Добавить(ОписаниеТаблицы);
	
	ОписаниеТаблицы = ОбщегоНазначения.ОписаниеОформляемойТаблицыФормы("ОбъектыСпринтаДерево", "ОбъектыСпринтаДерево");
	ОформляемыеТаблицы.Добавить(ОписаниеТаблицы);
	
	ОбщегоНазначения.НастроитьПодсветкуПриПриближенииСрокаРеализации(ЭтотОбъект, ОформляемыеТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоВидуСпринта()
	
	ЭтоСпринтПланирование = Объект.ВидСпринта = Перечисления.ВидыСпринта.Планирование;
	ЭтоСпринтIT = Объект.ВидСпринта = Перечисления.ВидыСпринта.IT;
	ЭтоСпринтВнутреннееЗадание = Объект.ВидСпринта = Перечисления.ВидыСпринта.ВнутреннееЗадание;	
	ЭтоСпринтТестирования = ЭтоСпринтТестирования(Объект.Филиал);
	
	Элементы.Команда.Видимость = ЭтоСпринтIT; 

	// Кнопки
	Элементы.ОткрытьТрудозатратыСпринта.Видимость = ЭтоСпринтIT;
	Элементы.ОткрытьГрафикСгоранияСпринта.Видимость = ЭтоСпринтIT;	
	Элементы.ОткрытьГрафикВыполненияЗадач.Видимость = ЭтоСпринтIT;
	Элементы.ПеревестиВсеОбъектыВРеализацию.Видимость = ЭтоСпринтIT;
	
	ИнтеграцияДополнительныхПодсистем.СоздатьКнопкуВыгрузкаВTrello(ЭтотОбъект, ЭтоСпринтВнутреннееЗадание);	
	Элементы.СоздатьСпринтПоЗадачам.Видимость = ЭтоСпринтПланирование;   
	Элементы.СписокНаправлений.Видимость = ЭтоСпринтПланирование;
	
	Видимость = ВидимостьЭлементовТаблицы(ЭтоСпринтПланирование, ЭтоСпринтIT, ЭтоСпринтТестирования, ОцениватьВStoryPoint);
	
	Для Каждого Строка Из Видимость Цикл
		Элементы[Строка.Ключ].Видимость	= Строка.Значение;
	КонецЦикла;
			
	Если ЭтоСпринтIT Тогда 
		Элементы.ДекорацияВРеализацию.Заголовок = "Доступные задачи";
		Элементы.ДекорацияОбъектыСпринта.Заголовок = "Задачи текущего спринта";
	ИначеЕсли ЭтоСпринтВнутреннееЗадание Тогда
		Элементы.ДекорацияВРеализацию.Заголовок = "Доступные внутренние задания";
		Элементы.ДекорацияОбъектыСпринта.Заголовок = "Внутренние задания текущего спринта";
		Элементы.Перенести.Видимость = Ложь;
	Иначе
		// ЭтоСпринтПланирование 	
		Элементы.ДекорацияВРеализацию.Заголовок = "Доступные заявки";
		Элементы.ДекорацияОбъектыСпринта.Заголовок = "Заявки текущего спринта"; 
		Элементы.Перенести.Видимость = Ложь;
		
		Элементы.Филиал.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив); 
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			МассивОбъектов = ПолучитьНевыбранныеЗаявки(Объект.Ссылка, СписокОбъектыСпринта);
			Элементы.ДекорацияЕстьИзменения.Видимость = МассивОбъектов.Количество() > 0;
		КонецЕсли;	
	КонецЕсли;
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоСпринтТестирования(Знач Филиал)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Филиалы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|ГДЕ
	|	Филиалы.Ссылка = &Ссылка
	|	И Филиалы.ТипФилиала = ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.QA)";
	
	Запрос.УстановитьПараметр("Ссылка", Филиал);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
		
КонецФункции

&НаКлиенте
Процедура ОбработатьОтветНаЗаписьОбъекта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Результат = ЗаписатьОбъектНаСервере();
		
		Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
			ПоказатьПредупреждение(, Результат.ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		МассивОбъектов = ПолучитьМассивОбъектовТекущегоСпринта(Истина);
		ИнтеграцияДополнительныхПодсистемКлиент.ВыгрузитьВTrello(Объект.Филиал, МассивОбъектов);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьОбъектВРеализацию(Знач ДокументСсылка)

	Если Элементы.ОбъектыВРеализацию.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;

	ИзменитьОбъектыВДереве(КэшПоказателейОбъектыВРеализацию, "ОбъектыВРеализацию", ДокументСсылка);
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьОбъектыВРеализацию()
	
	ИмяТаблицы = "ДоступныеОбъекты";	
	ЭтоОбъектыВРеализацию = Истина;
	
	АдресТаблицыВХранилище = ПодготовитьТаблицуОбъектов(ИмяТаблицы, СписокОбъектыСпринта, Объект.Ссылка, 
		Объект.ВидСпринта, ОцениватьВStoryPoint, УникальныйИдентификатор, Объект.Филиал, Объект.Команда, СписокНаправлений);
	
	СформированныеДанные = Документы.Спринт.ПрименитьНастройкиКомпоновкиДанных(АдресТаблицыВХранилище, 
		КомпоновщикНастроекДоступныеОбъекты, , ЭтоОбъектыВРеализацию);
		
	ДеревоЗначений = ПолучитьИзВременногоХранилища(СформированныеДанные.АдресВХранилище);	
		
	ЗаполнитьДеревоФормы(ОбъектыВРеализацию, ДеревоЗначений);
	
	ЗаполнитьКэшПоказателей(КэшПоказателейОбъектыВРеализацию, СформированныеДанные);
	ЗаполнитьКэшПоказателей(КэшПоказателейОбъектыСпринта, СформированныеДанные, Истина);
	
	ЗаполнитьУсловноеОформлениеТеги("ОбъектыВРеализацию", ИмяТаблицы); 
	
	Элементы.ОбъектыВРеализацию.ТекущаяСтрока = ПолучитьТекущуюСтрокуДерева(ДеревоЗначений, 
		ОбъектыВРеализацию, ТекущийОбъектОбъектыВРеализацию);
		
	ПересчитатьИтогиОбъектыВРеализацию(ЭтотОбъект, КэшПоказателейОбъектыВРеализацию);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОбъектСпринта(Знач ДокументСсылка)

	Если Элементы.ОбъектыСпринтаДерево.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьОбъектыВДереве(КэшПоказателейОбъектыСпринта, "ОбъектыСпринтаДерево", ДокументСсылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОбъектыСпринта(Знач ДокументСсылка = Неопределено)
	
	ИмяТаблицы = "ОбъектыСпринта";
	
	АдресТаблицыВХранилище = ПодготовитьТаблицуОбъектов(ИмяТаблицы, СписокОбъектыСпринта, Объект.Ссылка, 
		Объект.ВидСпринта, ОцениватьВStoryPoint, УникальныйИдентификатор, Объект.Филиал);
	
	СформированныеДанные = Документы.Спринт.ПрименитьНастройкиКомпоновкиДанных(АдресТаблицыВХранилище, 
		КомпоновщикНастроекОбъектыСпринта);
	
	ДеревоЗначений = ПолучитьИзВременногоХранилища(СформированныеДанные.АдресВХранилище);	
	
	ЗаполнитьДеревоФормы(ОбъектыСпринтаДерево, ДеревоЗначений);
	
	ЗаполнитьКэшПоказателей(КэшПоказателейОбъектыСпринта, СформированныеДанные);
	ЗаполнитьКэшПоказателей(КэшПоказателейОбъектыВРеализацию, СформированныеДанные, Истина);
	
	ЗаполнитьУсловноеОформлениеТеги("ОбъектыСпринтаДерево", ИмяТаблицы); 
	
	Элементы.ОбъектыСпринтаДерево.ТекущаяСтрока = ПолучитьТекущуюСтрокуДерева(ДеревоЗначений, 
		ОбъектыСпринтаДерево, ТекущийОбъектОбъектыСпринта);
		
	ПересчитатьИтогиОбъектыСпринта(ЭтотОбъект, КэшПоказателейОбъектыСпринта, ОцениватьВStoryPoint); 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСпринтНаСервере()
	
	ЗаполнитьСписокОбъектовСпринта();
	ОбновитьОбъектыСпринта();
	ОбновитьОбъектыВРеализацию();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТрудозатратыДляПеренесенныхОбъектов(СтарыеСпринтыОбъектов)
	
	Если СтарыеСпринтыОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьОбъектыСДобавленнымиТрудозатратами();
	
	СписокОбъеков = Новый СписокЗначений;
	
	Для Каждого Элемент Из СтарыеСпринтыОбъектов Цикл
		
		ПараметрыОтбора = Новый Структура("Объект", Элемент.Ключ);
		НайденнаяСтрока = ТаблицаОбъектыСДобавленнымиТрудозатратами.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденнаяСтрока.Количество() = 0 Тогда
			РегистрыСведений.ПланируемыеТрудозатратыПоСпринтам.Удалить(Элемент.Ключ, Элемент.Значение, Объект.Ссылка);
		КонецЕсли;
		
		СписокОбъеков.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	ТаблицаОбъектыСДобавленнымиТрудозатратами.Очистить();
	
	РегистрыСведений.СоставСпринтов.ДобавитьКСуществующим(Объект.Ссылка, СписокОбъеков); 
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	РегистрыСведений.ИсторияУчастияОбъектовВСпринтах.ДобавитьНовыйОбъект(Объект.Ссылка, СписокОбъеков, ТекущаяДатаСеанса);

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда 
		РегистрыСведений.ОчередьСобытийНаОбработку.ДобавитьЗаданиеОтправитьИзмененияПоСпринтам(Объект.Ссылка, ТекущаяДатаСеанса);	
	КонецЕсли; 
	
	ОбновитьСпринтНаСервере();
	
КонецПроцедуры	

&НаСервере
Процедура ОбработатьОбъектыСДобавленнымиТрудозатратами()
	
	Если ТаблицаОбъектыСДобавленнымиТрудозатратами.Количество() > 0 Тогда 		
		Если ОцениватьВStoryPoint Тогда  
			Для Каждого Строка Из ТаблицаОбъектыСДобавленнымиТрудозатратами Цикл
				ДокументОбъект = Строка.Объект.ПолучитьОбъект();     
				ДокументОбъект.ОценкаStoryPoint = Строка.Трудозатраты;
				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				ДокументОбъект.Записать();  
			КонецЦикла;
		Иначе
			ТрудозатратыОбъектов = ТаблицаОбъектыСДобавленнымиТрудозатратами.Выгрузить();
			УчетТрудозатрат.ЗаписатьНаборПлановыхТрудозатрат(ТрудозатратыОбъектов, Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСтатусовОбъектов(МассивОбъектов)
	
	ИзменитьСтатусыОбъектовВРеализацию(МассивОбъектов);
	ОбновитьОбъектыСпринта();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУдалениеОбъектовИзТекущегоСпринта()
	
	Массив = Новый Массив;
	ВыделенныеСтроки = Элементы.ОбъектыСпринтаДерево.ВыделенныеСтроки;
	ПолучитьОбъектыИзВыделенныхСтрокДерева(Массив, ВыделенныеСтроки, ОбъектыСпринтаДерево);
	УдалитьОбъектыИзДерева(Массив, ОбъектыСпринтаДерево, КэшПоказателейОбъектыСпринта, Истина);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПериодПриИзменении()
	
	ОбщееВремяЗаПериод = ПолучитьДоступноеВремяСпринта(Объект.Ссылка);
		
	ПересчитатьИтогиОбъектыСпринта(ЭтотОбъект, КэшПоказателейОбъектыСпринта, ОцениватьВStoryPoint);
	
	УстановитьВидимостьПредупрежденияОСохранении();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьИтогиОбъектыВРеализацию(ЭтотОбъект, КэшПоказателей)
	
	ВидСпринта = ЭтотОбъект.Объект.ВидСпринта;
	
	Если ВидСпринта = ПредопределенноеЗначение("Перечисление.ВидыСпринта.Планирование") Тогда
		ЭтотОбъект.ТрудозатратыДоступныхОбъектовПлан = СтрШаблон("%1 / %2", 
			Окр(КэшПоказателей.ПланируемыеТрудозатраты), Окр(КэшПоказателей.ПланируемыеТрудозатратыПодчиненные));
		ЭтотОбъект.ТрудозатратыДоступныхОбъектовФакт = СтрШаблон("%1 / %2", 
			Окр(КэшПоказателей.ФактическиеТрудозатраты), Окр(КэшПоказателей.ФактическиеТрудозатратыПодчиненные));
	Иначе
		ЭтотОбъект.ТрудозатратыДоступныхОбъектовПлан = КэшПоказателей.СвободныеТрудозатраты;
		ЭтотОбъект.ТрудозатратыДоступныхОбъектовФакт = КэшПоказателей.ФактическиеТрудозатраты;  
	КонецЕсли; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьИтогиОбъектыСпринта(ЭтотОбъект, КэшПоказателей, Знач ОцениватьВStoryPoint)
	
	ВидСпринта = ЭтотОбъект.Объект.ВидСпринта;
	
	Если ВидСпринта = ПредопределенноеЗначение("Перечисление.ВидыСпринта.Планирование") Тогда
		Если ЭтотОбъект.СуществуетСпринтПоЗадачам Тогда	
			ОстатокВремени = ЭтотОбъект.ОбщееВремяЗаПериод - КэшПоказателей.ОценкаТрудозатратЗадачITСпринтовБезЗакрытых 
				- КэшПоказателей.ФактическиеТрудозатратыЗадачITСпринтовЗаПериодСпринта;
			
			ЭтотОбъект.ТрудозатратыТекущихОстатокДоступноеВремя = СтрШаблон("Остаток времени: %1", ОстатокВремени);	

			Если ОстатокВремени < 0 Тогда
				ЭтотОбъект.Элементы.ОбъектыСпринтаДеревоПредставление.ЦветТекстаПодвала = WebЦвета.Красный;
			Иначе
				ЭтотОбъект.Элементы.ОбъектыСпринтаДеревоПредставление.ЦветТекстаПодвала = Новый Цвет;
			КонецЕсли;
		Иначе
			ЭтотОбъект.ТрудозатратыТекущихОстатокДоступноеВремя = "";
		КонецЕсли;
		
		ЭтотОбъект.ТрудозатратыПланируемыеЗаявки = КэшПоказателей.ПланируемыеТрудозатраты;
		ЭтотОбъект.ТрудозатратыФактическиеЗаявки = КэшПоказателей.ФактическиеТрудозатраты;		
		ЭтотОбъект.ТрудозатратыТекущихОбъектовОстаток = КэшПоказателей.ОценкаТрудозатратЗадачITСпринтовБезЗакрытых;
		
		ЭтотОбъект.ТрудозатратыТекущихОбъектовФакт = СтрШаблон("%1 / %2",
			КэшПоказателей.ФактическиеТрудозатратыЗадачITСпринтовЗаПериодСпринта, КэшПоказателей.ФактическиеТрудозатратыЗадачITСпринтов);
	Иначе		
		ОстатокВремени = ЭтотОбъект.ОбщееВремяЗаПериод - КэшПоказателей.ОценкаТрудозатратБезЗакрытых 
			- КэшПоказателей.ФактическиеТрудозатратыЗаПериодСпринта;
		
		ЭтотОбъект.ТрудозатратыТекущихОстатокДоступноеВремя = СтрШаблон("Остаток времени разработки: %1", ОстатокВремени);
		ЭтотОбъект.ТрудозатратыТекущихОбъектовПлан = СтрШаблон("План: %1", КэшПоказателей.ПланируемыеТрудозатраты);
		ЭтотОбъект.ТрудозатратыТекущихОбъектовОстаток = КэшПоказателей.ОценкаТрудозатрат;
		
		Если ОцениватьВStoryPoint Тогда
			ЭтотОбъект.ТрудозатратыТекущихОбъектовФакт = КэшПоказателей.ФактическиеТрудозатраты;	
		Иначе
			ЭтотОбъект.ТрудозатратыТекущихОбъектовФакт = СтрШаблон("%1 / %2",
				КэшПоказателей.ФактическиеТрудозатратыЗаПериодСпринта, КэшПоказателей.ФактическиеТрудозатраты);
		КонецЕсли;
			
		Если ВидСпринта = ПредопределенноеЗначение("Перечисление.ВидыСпринта.IT") Тогда
			ЭтотОбъект.ТрудозатратыТестированияОстаток = КэшПоказателей.ОценкаТрудозатратТестирование;
			
			ЭтотОбъект.ТрудозатратыТестированияФакт = КэшПоказателей.ФактическиеТрудозатратыТестирование;
		КонецЕсли;
	КонецЕсли; 
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоступноеВремяСпринта(Знач Спринт)
	
	ДоступноеВремя = Документы.Спринт.ПолучитьДоступноеВремяСпринтов(Спринт);
	
	Если ДоступноеВремя.Количество() = 0 Тогда
		Результат = 0;
	Иначе
		Результат = ДоступноеВремя[0].Время;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодготовитьТаблицуОбъектов(Знач ИмяТаблицы, Знач СписокОбъектыСпринта, Знач Спринт, Знач ВидСпринта, 
	Знач ОцениватьВStoryPoint, Знач ИдентификаторФормы, Знач Филиал, Знач Команда = Неопределено, Знач Направления = Неопределено)		
	
	Если ИмяТаблицы = "ОбъектыСпринта" Тогда
		ТаблицаОбъектов = ПолучитьТаблицуОбъектов(СписокОбъектыСпринта);

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаОбъектов.Ссылка КАК Объект
		|ПОМЕСТИТЬ ТаблицаОбъектов
		|ИЗ
		|	&ТаблицаОбъектов КАК ТаблицаОбъектов";
		
		Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектов);	
	Иначе
		ПостроительЗапроса = Новый ПостроительЗапроса;
		ПостроительЗапроса.Текст = 
		#Область ТекстЗапроса
		"ВЫБРАТЬ
		|	ДокументЗадача.Ссылка КАК Объект
		|ПОМЕСТИТЬ ТаблицаОбъектов
		|ИЗ
		|	Документ.Задача КАК ДокументЗадача
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
		|		ПО ДокументЗадача.Статус = СтатусыОбъектов.Ссылка
		|			И (НЕ СтатусыОбъектов.Родитель В (&ЗавершенныеСтатусы))
		|ГДЕ
		|	&ВидСпринта = ЗНАЧЕНИЕ(Перечисление.ВидыСпринта.IT)
		|	И ДокументЗадача.Филиал = &Филиал
		|	И НЕ ДокументЗадача.Ссылка В (&СписокОбъектыСпринта)
		|	И НЕ ДокументЗадача.Статус В (&ЗавершенныеСтатусы)
		|{ГДЕ
		|	ДокументЗадача.КомандаРазработчиков КАК КомандаРазработчиков,
		|	ДокументЗадача.Направление КАК Направление}
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДокументЗадача.Ссылка
		|ИЗ
		|	Документ.Задача КАК ДокументЗадача
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела.СрезПоследних(, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВКастомнуюКоманду)) КАК ЛичныеДелаСрезПоследних
		|		ПО (ЛичныеДелаСрезПоследних.Данные = ДокументЗадача.КомандаРазработчиков)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
		|		ПО ДокументЗадача.Статус = СтатусыОбъектов.Ссылка
		|			И (НЕ СтатусыОбъектов.Родитель В (&ЗавершенныеСтатусы))
		|ГДЕ
		|	&ВидСпринта = ЗНАЧЕНИЕ(Перечисление.ВидыСпринта.IT)
		|	И &ОтбиратьКастомныеКоманды
		|	И НЕ ДокументЗадача.Ссылка В (&СписокОбъектыСпринта)
		|	И НЕ ДокументЗадача.Статус В (&ЗавершенныеСтатусы)
		|{ГДЕ
		|	ДокументЗадача.КомандаРазработчиков КАК КомандаРазработчиков,
		|	ДокументЗадача.Направление КАК Направление}
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДокументВнутреннееЗадание.Ссылка
		|ИЗ
		|	Документ.ВнутреннееЗадание КАК ДокументВнутреннееЗадание
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
		|		ПО ДокументВнутреннееЗадание.Статус = СтатусыОбъектов.Ссылка
		|			И (НЕ СтатусыОбъектов.Родитель В (&ЗавершенныеСтатусы))
		|ГДЕ
		|	&ВидСпринта = ЗНАЧЕНИЕ(Перечисление.ВидыСпринта.ВнутреннееЗадание)
		|	И ДокументВнутреннееЗадание.Филиал = &Филиал
		|	И НЕ ДокументВнутреннееЗадание.Ссылка В (&СписокОбъектыСпринта)
		|	И НЕ ДокументВнутреннееЗадание.Статус В (&ЗавершенныеСтатусы)
		|{ГДЕ
		|	ДокументВнутреннееЗадание.Направление КАК Направление}
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗаявкаНаРазработку.Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
		|		ПО ЗаявкаНаРазработку.Ссылка = МинимальныеСтатусыЗаявок.Заявка
		|			И (НЕ МинимальныеСтатусыЗаявок.Статус В (&ЗавершенныеСтатусы))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемамФилиалов КАК СтатусыЗаявокПоСистемамФилиалов
		|		ПО ЗаявкаНаРазработку.Ссылка = СтатусыЗаявокПоСистемамФилиалов.Заявка
		|			И (СтатусыЗаявокПоСистемамФилиалов.Филиал = &Филиал)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
		|		ПО (ЕСТЬNULL(СтатусыЗаявокПоСистемамФилиалов.Статус, МинимальныеСтатусыЗаявок.Статус) = СтатусыОбъектов.Ссылка)
		|			И (НЕ СтатусыОбъектов.Ссылка В (&ЗавершенныеСтатусы))
		|			И (НЕ СтатусыОбъектов.Родитель В (&ЗавершенныеСтатусы))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиФилиалов КАК НастройкиФилиалов
		|		ПО (НастройкиФилиалов.Значение = ЗаявкаНаРазработку.Направление)
		|ГДЕ
		|	&ВидСпринта = ЗНАЧЕНИЕ(Перечисление.ВидыСпринта.Планирование)
		|	И НЕ ЗаявкаНаРазработку.Черновик
		|	И НЕ ЗаявкаНаРазработку.Ссылка В (&СписокОбъектыСпринта)
		|	И ВЫБОР
		|			КОГДА &ОтборПоНаправлению
		|				ТОГДА ЗаявкаНаРазработку.Направление В (&СписокНаправлений)
		|			ИНАЧЕ НастройкиФилиалов.Филиал = &Филиал
		|					И НастройкиФилиалов.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.НаправлениеРазработки)
		|		КОНЕЦ";
		#КонецОбласти
		
		ЗавершенныеСтатусы = Новый Массив;
		ЗавершенныеСтатусы.Добавить(Справочники.СтатусыОбъектов.Решен);
		ЗавершенныеСтатусы.Добавить(Справочники.СтатусыОбъектов.Отклонен);
		
		ПостроительЗапроса.Параметры.Вставить("Филиал", Филиал);
		ПостроительЗапроса.Параметры.Вставить("ОтбиратьКастомныеКоманды", ЗначениеЗаполнено(Команда));
		ПостроительЗапроса.Параметры.Вставить("СписокОбъектыСпринта", СписокОбъектыСпринта);	
		ПостроительЗапроса.Параметры.Вставить("ЗавершенныеСтатусы", ЗавершенныеСтатусы);    
		ПостроительЗапроса.Параметры.Вставить("ОтборПоНаправлению", Направления <> Неопределено И Направления.Количество() > 0);
		ПостроительЗапроса.Параметры.Вставить("СписокНаправлений", Направления);
		
		Если ЗначениеЗаполнено(Команда) Тогда
			ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("КомандаРазработчиков");
			ЭлементОтбора.ВидСравнения  = ВидСравнения.Равно;
			ЭлементОтбора.Значение      = Команда;
			ЭлементОтбора.Использование = Истина;
		КонецЕсли;
		
		Запрос = ПостроительЗапроса.ПолучитьЗапрос();
	КонецЕсли;
	
	Разделитель =
	"
	|;
	|/////////////////////////////////////////////////////////////
	|";
	
	ОбщаяЧастьЗапроса =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ТаблицаОбъектов.Объект КАК Объект,
	|	КОЛИЧЕСТВО(СоставСпринтов.Объект) КАК Количество
	|ПОМЕСТИТЬ СоставДругихСпринтов
	|ИЗ
	|	ТаблицаОбъектов КАК ТаблицаОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ПО (СоставСпринтов.Объект = ТаблицаОбъектов.Объект)
	|			И (СоставСпринтов.Спринт <> &Спринт)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбъектов.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбъектов.Объект КАК Объект,
	|	МАКСИМУМ(ДокументСпринт.ДатаОкончания) КАК ДатаОкончания
	|ПОМЕСТИТЬ МаксимальныеДатыОкончанияСпринтов
	|ИЗ
	|	ТаблицаОбъектов КАК ТаблицаОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ПО ТаблицаОбъектов.Объект = СоставСпринтов.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|		ПО (СоставСпринтов.Спринт = ДокументСпринт.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбъектов.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныеДатыОкончанияСпринтов.Объект КАК Объект,
	|	МАКСИМУМ(СоставСпринтов.Спринт) КАК Спринт
	|ПОМЕСТИТЬ ПоследнийСпринтОбъекта
	|ИЗ
	|	МаксимальныеДатыОкончанияСпринтов КАК МаксимальныеДатыОкончанияСпринтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ПО МаксимальныеДатыОкончанияСпринтов.Объект = СоставСпринтов.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|		ПО (СоставСпринтов.Спринт = ДокументСпринт.Ссылка)
	|			И МаксимальныеДатыОкончанияСпринтов.ДатаОкончания = ДокументСпринт.ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	МаксимальныеДатыОкончанияСпринтов.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СрокиСдачиЗадач.Задача КАК Задача,
	|	СрокиСдачиЗадач.СрокСдачи КАК СрокСдачи
	|ПОМЕСТИТЬ СрокиСдачиЗадач
	|ИЗ
	|	РегистрСведений.СрокиСдачиЗадач.СрезПоследних(
	|			,
	|			Задача В
	|				(ВЫБРАТЬ
	|					ТаблицаОбъектов.Объект
	|				ИЗ
	|					ТаблицаОбъектов)) КАК СрокиСдачиЗадач
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбъектов.Объект КАК Объект,
	|	ДокументЗадача.Назначение КАК Назначение,
	|	ДокументЗаявкаНаРазработку.Продукт КАК Продукт,
	|	ДокументЗадача.СерьезностьОшибки КАК СерьезностьОшибки,
	|	ДокументЗадача.Статус КАК Статус,
	|	ДокументЗадача.СистемаУчета КАК Система,
	|	ЗаявкаНаРазработкуСистемыРазработки.ГруппаЗаказчиков КАК ГруппаЗаказчиков,
	|	ДокументЗадача.Направление КАК Направление,
	|	""["" + ДокументЗадача.Номер + ""] "" + ДокументЗадача.Наименование КАК Представление,
	|	ДокументЗадача.Назначена КАК Назначена,
	|	ПРЕДСТАВЛЕНИЕ(ДокументЗадача.Назначена) КАК ПользовательНаименование,
	|	ДокументЗадача.ОбъектОснование КАК ОбъектОснование,
	|	ДокументЗадача.ОграниченныйПросмотр КАК ОграниченныйПросмотр,
	|	ДокументЗадача.КомандаРазработчиков КАК КомандаРазработчиков,
	|	ЕСТЬNULL(СрокиСдачиЗадач.СрокСдачи, ДАТАВРЕМЯ(1, 1, 1)) КАК СрокРеализации,
	|	ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка) КАК Проект,
	|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Автор,
	|	НЕОПРЕДЕЛЕНО КАК КраткоеИмяПроекта,
	|	ЕСТЬNULL(ОчередиЗаявок.Порядок, 0) КАК Порядок,
	|	ЕСТЬNULL(ЗначенияДополнительныхРеквизитовОбъектов.Значение, ЛОЖЬ) КАК ЦелеваяЗаявка
	|ПОМЕСТИТЬ ДанныеОбъектов
	|ИЗ
	|	ТаблицаОбъектов КАК ТаблицаОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО ТаблицаОбъектов.Объект = ДокументЗадача.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ДокументЗаявкаНаРазработку
	|		ПО (ДокументЗаявкаНаРазработку.Ссылка = ДокументЗадача.ОбъектОснование)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ЗаявкаНаРазработкуСистемыРазработки
	|		ПО (ЗаявкаНаРазработкуСистемыРазработки.Ссылка = ДокументЗаявкаНаРазработку.Ссылка)
	|			И (ЗаявкаНаРазработкуСистемыРазработки.Система = ДокументЗадача.СистемаУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СрокиСдачиЗадач КАК СрокиСдачиЗадач
	|		ПО (ДокументЗадача.Ссылка = СрокиСдачиЗадач.Задача)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|			ПО (КлючОчереди.Ссылка = ОчередиЗаявок.КлючОчередиОбъекта)
	|				И (КлючОчереди.ВидОчереди В (ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистемаГруппаЗаказчиков), ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Продукт), ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ПродуктСистема)))
	|		ПО (ОчередиЗаявок.Заявка = ДокументЗадача.ОбъектОснование)
	|			И (ВЫБОР
	|				КОГДА КлючОчереди.Система <> ЗНАЧЕНИЕ(Справочник.СистемыУчета.ПустаяСсылка)
	|					ТОГДА КлючОчереди.Система = ДокументЗадача.СистемаУчета
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА ДокументЗаявкаНаРазработку.Продукт <> ЗНАЧЕНИЕ(Справочник.Продукты.ПустаяСсылка)
	|					ТОГДА КлючОчереди.Продукт = ДокументЗаявкаНаРазработку.Продукт
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияДополнительныхРеквизитовОбъектов КАК ЗначенияДополнительныхРеквизитовОбъектов
	|		ПО (ДокументЗадача.ОбъектОснование = ЗначенияДополнительныхРеквизитовОбъектов.Объект)
	|			И (ЗначенияДополнительныхРеквизитовОбъектов.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДополнительныхРеквизитов.ЦелеваяЗаявка))
	|ГДЕ
	|	&ВидСпринта = ЗНАЧЕНИЕ(Перечисление.ВидыСпринта.IT)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаОбъектов.Объект,
	|	ДокументВнутреннееЗадание.Назначение,
	|	ДокументВнутреннееЗадание.Продукт,
	|	ДокументВнутреннееЗадание.СерьезностьОшибки,
	|	ДокументВнутреннееЗадание.Статус,
	|	ДокументВнутреннееЗадание.СистемаУчета,
	|	ЗНАЧЕНИЕ(Справочник.ГруппыЗаказчиковНаправлений.ПустаяСсылка),
	|	ДокументВнутреннееЗадание.Направление,
	|	""["" + ДокументВнутреннееЗадание.Номер + ""] "" + ДокументВнутреннееЗадание.Наименование,
	|	ДокументВнутреннееЗадание.Назначена,
	|	ПРЕДСТАВЛЕНИЕ(ДокументВнутреннееЗадание.Назначена),
	|	ДокументВнутреннееЗадание.ОбъектОснование,
	|	ЛОЖЬ,
	|	ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка),
	|	ВЫБОР
	|		КОГДА ДокументВнутреннееЗадание.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДокументВнутреннееЗадание.ИсполнитьДо
	|		ИНАЧЕ ДокументВнутреннееЗадание.ДатаЗакрытия
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка),
	|	"""",
	|	ДокументВнутреннееЗадание.Приоритет,
	|	ЛОЖЬ
	|ИЗ
	|	ТаблицаОбъектов КАК ТаблицаОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееЗадание КАК ДокументВнутреннееЗадание
	|		ПО ТаблицаОбъектов.Объект = ДокументВнутреннееЗадание.Ссылка
	|ГДЕ
	|	&ВидСпринта = ЗНАЧЕНИЕ(Перечисление.ВидыСпринта.ВнутреннееЗадание)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаОбъектов.Объект,
	|	ЗаявкаНаРазработку.Назначение,
	|	ЗаявкаНаРазработку.Продукт,
	|	ЗаявкаНаРазработку.СерьезностьОшибки,
	|	ЕСТЬNULL(СтатусыЗаявокПоСистемамФилиалов.Статус, МинимальныеСтатусыЗаявок.Статус),
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗаявкаНаРазработку.Направление,
	|	""["" + ЗаявкаНаРазработку.Номер + ""] "" + ЗаявкаНаРазработку.Наименование,
	|	НЕОПРЕДЕЛЕНО,
	|	"""",
	|	ЗаявкаНаРазработку.ОбъектОснование,
	|	ЗаявкаНаРазработку.ОграниченныйПросмотр,
	|	ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка),
	|	ЗаявкаНаРазработку.СрокРеализации,
	|	ЕСТЬNULL(Проекты.Ссылка, НЕОПРЕДЕЛЕНО),
	|	ЗаявкаНаРазработку.Автор,
	|	ЕСТЬNULL(Проекты.КороткоеНазвание, НЕОПРЕДЕЛЕНО),
	|	0,
	|	ЕСТЬNULL(ЗначенияДополнительныхРеквизитовОбъектов.Значение, ЛОЖЬ)
	|ИЗ
	|	ТаблицаОбъектов КАК ТаблицаОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО ТаблицаОбъектов.Объект = ЗаявкаНаРазработку.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
	|		ПО (МинимальныеСтатусыЗаявок.Заявка = ЗаявкаНаРазработку.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемамФилиалов КАК СтатусыЗаявокПоСистемамФилиалов
	|		ПО (СтатусыЗаявокПоСистемамФилиалов.Заявка = ЗаявкаНаРазработку.Ссылка)
	|			И (СтатусыЗаявокПоСистемамФилиалов.Филиал = &Филиал)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
	|		ПО (Проекты.Ссылка = ЗаявкаНаРазработку.ОбъектОснование)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияДополнительныхРеквизитовОбъектов КАК ЗначенияДополнительныхРеквизитовОбъектов
	|		ПО (ЗаявкаНаРазработку.Ссылка = ЗначенияДополнительныхРеквизитовОбъектов.Объект)
	|			И (ЗначенияДополнительныхРеквизитовОбъектов.Реквизит = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДополнительныхРеквизитов.ЦелеваяЗаявка))
	|ГДЕ
	|	&ВидСпринта = ЗНАЧЕНИЕ(Перечисление.ВидыСпринта.Планирование)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОбъектов.Объект КАК Ссылка,
	|	ДанныеОбъектов.Представление КАК Представление,
	|	ДанныеОбъектов.Автор КАК Автор,
	|	ДанныеОбъектов.Проект КАК Проект,
	|	ДанныеОбъектов.Направление КАК Направление,
	|	ДанныеОбъектов.КраткоеИмяПроекта КАК КраткоеИмяПроекта,
	|	ДанныеОбъектов.ЦелеваяЗаявка КАК ЦелеваяЗаявка,
	|	ДанныеОбъектов.Продукт КАК Продукт,
	|	ДанныеОбъектов.Система КАК Система,
	|	ДанныеОбъектов.Статус КАК Статус,
	|	ДанныеОбъектов.ГруппаЗаказчиков КАК ГруппаЗаказчиков,
	|	ДанныеОбъектов.Назначена КАК Назначена,
	|	ДанныеОбъектов.ПользовательНаименование КАК ПользовательНаименование,
	|	ДанныеОбъектов.ОбъектОснование КАК ОбъектОснование,
	|	ДанныеОбъектов.Порядок КАК Порядок,
	|	ДанныеОбъектов.ОграниченныйПросмотр КАК ОграниченныйПросмотр,
	|	ДанныеОбъектов.КомандаРазработчиков КАК КомандаРазработчиков,
	|	ДанныеОбъектов.СрокРеализации КАК СрокРеализации,
	|	ДанныеОбъектов.Назначение КАК Назначение,
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексКартинки,
	|	ЕСТЬNULL(СерьезностьОшибок.ИмяКартинки, НазначенияЗадач.ИмяКартинки) КАК НазначениеИмяКартинки,
	|	ЕСТЬNULL(ПоследнийСпринтОбъекта.Спринт, ЗНАЧЕНИЕ(Документ.Спринт.ПустаяСсылка)) КАК Спринт,
	|	ВЫБОР
	|		КОГДА ПоследнийСпринтОбъекта.Спринт ЕСТЬ NULL
	|			ТОГДА """"
	|		ИНАЧЕ ДокументСпринт.Номер
	|	КОНЕЦ КАК СпринтПредставление,
	|	ЕСТЬNULL(СоставДругихСпринтов.Количество, 0) КАК БылаВСпринте
	|ИЗ
	|	ДанныеОбъектов КАК ДанныеОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ДанныеОбъектов.Статус = СтатусыОбъектов.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НазначенияЗадач КАК НазначенияЗадач
	|		ПО ДанныеОбъектов.Назначение = НазначенияЗадач.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерьезностьОшибок КАК СерьезностьОшибок
	|		ПО ДанныеОбъектов.СерьезностьОшибки = СерьезностьОшибок.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследнийСпринтОбъекта КАК ПоследнийСпринтОбъекта
	|		ПО ДанныеОбъектов.Объект = ПоследнийСпринтОбъекта.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|		ПО (ДокументСпринт.Ссылка = ПоследнийСпринтОбъекта.Спринт)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СоставДругихСпринтов КАК СоставДругихСпринтов
	|		ПО ДанныеОбъектов.Объект = СоставДругихСпринтов.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеОбъектов.Представление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТегиОбъектов.Объект КАК Объект,
	|	ПРЕДСТАВЛЕНИЕ(ТегиОбъектов.Тег) КАК Тег
	|ИЗ
	|	ДанныеОбъектов КАК ДанныеОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТегиОбъектов КАК ТегиОбъектов
	|		ПО ДанныеОбъектов.Объект = ТегиОбъектов.Объект";
	#КонецОбласти
	
	Запрос.Текст = Запрос.Текст + Разделитель + ОбщаяЧастьЗапроса;
	
	Запрос.УстановитьПараметр("Спринт", Спринт);
	Запрос.УстановитьПараметр("ВидСпринта", ВидСпринта);
	Запрос.УстановитьПараметр("Филиал", Филиал);
	
	Пакеты = Запрос.ВыполнитьПакет();
	КоличествоПакетов = Пакеты.ВГраница();
	
	ТаблицаОбъектов = Пакеты[КоличествоПакетов - 1].Выгрузить();
	ТаблицаТеги = Пакеты[КоличествоПакетов].Выгрузить();
	
	ТаблицаОбъектов.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	ТаблицаОбъектов.Колонки.Добавить("Теги", ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(200));
	
	ЗаполнитьТрудозатратыОбъектов(ТаблицаОбъектов, Спринт, ВидСпринта, ОцениватьВStoryPoint, Филиал);
	
	Если ВидСпринта = Перечисления.ВидыСпринта.ВнутреннееЗадание Тогда
		ЗаголовокСрокаРеализации = "Окончание";	
	Иначе
		ЗаголовокСрокаРеализации = "Срок";
	КонецЕсли;
	
	СпринтПланирование = ВидСпринта = Перечисления.ВидыСпринта.Планирование;
	СпринтIT = ВидСпринта = Перечисления.ВидыСпринта.IT;
	
	Для Каждого Строка Из ТаблицаОбъектов Цикл	
		Если СпринтПланирование Тогда
			Автор = СтрШаблон("Автор: %1", ОбщегоНазначенияКлиентСервер.ПолучитьФамилиюИнициалыПользователя(Строка.Автор));
			Проект = ?(ЗначениеЗаполнено(Строка.КраткоеИмяПроекта), СтрШаблон(", Проект: %1", Строка.КраткоеИмяПроекта), "");   
			Строка.Представление = СтрШаблон("%1 (%2%3)", Строка.Представление, Автор, Проект); 	
			
			Строка.ПланируемыеТрудозатратыПредставление = СтрШаблон("%1 / %2", 
				Строка.СвободныеТрудозатраты, Строка.ПланируемыеТрудозатратыПодчиненные);
				
			Строка.ФактическиеТрудозатратыПредставлениеДоступные = СтрШаблон("%1 / %2", 
				Строка.ФактическиеТрудозатраты, Строка.ФактическиеТрудозатратыПодчиненные);
			
			Строка.ФактическиеТрудозатратыПредставление = СтрШаблон("%1 / %2", 
				Строка.ФактическиеТрудозатратыЗадачITСпринтовЗаПериодСпринта, Строка.ФактическиеТрудозатратыЗадачITСпринтов);
		Иначе
			Если ОцениватьВStoryPoint Тогда
				Строка.ФактическиеТрудозатратыПредставление = Строка.ФактическиеТрудозатраты;
			Иначе
				Строка.ФактическиеТрудозатратыПредставление = СтрШаблон("%1 / %2", 
					Строка.ФактическиеТрудозатратыЗаПериодСпринта, Строка.ФактическиеТрудозатраты);
			КонецЕсли;
		КонецЕсли;
					
		Если ЗначениеЗаполнено(Строка.СрокРеализации) Тогда
			СрокРеализации = Формат(Строка.СрокРеализации, "ДФ=dd.MM.yy");
			Строка.Представление = СтрШаблон("%1 (%2: %3)", Строка.Представление, ЗаголовокСрокаРеализации, СрокРеализации);
		КонецЕсли;
		
		ЗаполнитьТегиОбъекта(Строка, ТаблицаТеги);
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОбъектов, ИдентификаторФормы);
		
КонецФункции

// Получает ссылки на все задачи из дерева значений "ОбъектыСпринтаДерево"
//
// Параметры:
//  ТолькоСсылки				 - Булево	 - Истина - МассивОбъектов будет содержать только ссылки на задачи
//  ТолькоСсылкиИТрудозатраты	 - Булево	 - Истина - МассивОбъектов будет содержать Структура(Ссылка, ОценкаТрудозатрат)
// Возвращаемое значение:
//  МассивОбъектов - 'Массив' - массив ссылок на задачи или массив структур, содержащих ссылки и оценкутрудозатрат
//
&НаКлиенте
Функция ПолучитьМассивОбъектовТекущегоСпринта(Знач ТолькоСсылки = Ложь, Знач ТолькоСсылкиИТрудозатраты = Ложь)
	
	МассивОбъектов = Новый Массив;
	
	Для Каждого Элемент Из ОбъектыСпринтаДерево.ПолучитьЭлементы() Цикл
		ПолучитьВсеСтрокиОбъектовИзГруппы(Элемент, МассивОбъектов, ТолькоСсылки, ТолькоСсылкиИТрудозатраты);
	КонецЦикла;

	Возврат МассивОбъектов;
	
КонецФункции

// Получает все строки содержащие объекты
//
// Параметры:
//  Строка - ДанныеФормыЭлементДерева - обрабатываемая строка
//  МассивОбъектов - Массив - содержит результат выполнения. Если необязательные параметры не заданы, то содержит строки дерева
//  ТолькоСсылки - Булево - Истина - МассивОбъектов будет содержать только ссылки на задачи
//  ТолькоСсылкиИТрудозатраты - Булево - Истина - МассивОбъектов будет содержать Структура(Ссылка, ОценкаТрудозатрат)
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПолучитьВсеСтрокиОбъектовИзГруппы(Знач Строка, Знач МассивОбъектов, Знач ТолькоСсылки = Ложь,
		Знач ТолькоСсылкиИТрудозатраты = Ложь)
	
	Если Строка.ЭтоГруппа Тогда
		ДочерниеЭлементы = Строка.ПолучитьЭлементы();
		
		Для Каждого ДочерняяСтрока Из ДочерниеЭлементы Цикл
			ПолучитьВсеСтрокиОбъектовИзГруппы(ДочерняяСтрока, МассивОбъектов, ТолькоСсылки, ТолькоСсылкиИТрудозатраты);
		КонецЦикла;
	Иначе
		Если МассивОбъектов.Найти(Строка) = Неопределено Тогда
			Если ТолькоСсылки Тогда
				МассивОбъектов.Добавить(Строка.Ссылка);
			ИначеЕсли ТолькоСсылкиИТрудозатраты Тогда
				МассивОбъектов.Добавить(Новый Структура("Ссылка, ОценкаТрудозатрат", Строка.Ссылка, Строка.ОценкаТрудозатрат));
			Иначе
				МассивОбъектов.Добавить(Строка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТаблицуОбъектов(Знач СписокОбъектов)
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ВнутреннееЗадание"));
	МассивТипов.Добавить(Тип("ДокументСсылка.Задача"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаявкаНаРазработку"));
	
	ТаблицаОбъектов = Новый ТаблицаЗначений; 
	ТаблицаОбъектов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(МассивТипов));
	
	Для Каждого ЭлементСписка Из СписокОбъектов Цикл
		 ТаблицаОбъектов.Добавить().Ссылка = ЭлементСписка.Значение;
	 КонецЦикла;
	 
	 Возврат ТаблицаОбъектов;
	 
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНевыбранныеЗаявки(Спринт, СписокОбъектыСпринта)
	
	Массив = Новый Массив;

	Если НЕ ЗначениеЗаполнено(Спринт) Тогда
		Возврат Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументЗадача.ОбъектОснование КАК Заявка,
	|	МАКСИМУМ(ИсторияУчастияОбъектовВСпринтахСрезПоследних.Период) КАК Период,
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексКартинки
	|ИЗ
	|	Документ.Спринт КАК ДокументСпринт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтовIT
	|		ПО ДокументСпринт.Ссылка = СоставСпринтовIT.Спринт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|				ПО МинимальныеСтатусыЗаявок.Статус = СтатусыОбъектов.Ссылка
	|			ПО ДокументЗадача.ОбъектОснование = МинимальныеСтатусыЗаявок.Заявка
	|		ПО (ДокументЗадача.Ссылка = СоставСпринтовIT.Объект)
	|			И (НЕ ДокументЗадача.ОбъектОснование В (&Исключения))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияУчастияОбъектовВСпринтах.СрезПоследних(, ВидДействия = 1) КАК ИсторияУчастияОбъектовВСпринтахСрезПоследних
	|		ПО (ИсторияУчастияОбъектовВСпринтахСрезПоследних.Спринт = СоставСпринтовIT.Спринт)
	|			И (ИсторияУчастияОбъектовВСпринтахСрезПоследних.Объект = СоставСпринтовIT.Объект)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтовПланирования
	|		ПО (СоставСпринтовПланирования.Спринт = &Спринт)
	|			И (ДокументЗадача.ОбъектОснование = СоставСпринтовПланирования.Объект)
	|ГДЕ
	|	ДокументСпринт.ДокументОснование = &Спринт
	|	И СоставСпринтовПланирования.Спринт ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументЗадача.ОбъектОснование,
	|	СтатусыОбъектов.ИндексКартинки";   
	
	Запрос.УстановитьПараметр("Спринт", Спринт);
	Запрос.УстановитьПараметр("Исключения", СписокОбъектыСпринта);	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		Массив.Добавить(Новый Структура("Период, Объект, ИндексКартинки", Выборка.Период, Выборка.Заявка, Выборка.ИндексКартинки)); 
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

// Перебирает дерево и выполняет поиск строк, которые не являются группами
//
// Параметры:
//  МассивОбъектов		 - Массив	 - содержит результат поиска
//  ВыделенныеСтроки - Массив	 - идентификаторы строк дерева
//  Дерево			 - ДанныеФормыДерево	 - дерево по которому будет выполнен поиск
//
&НаКлиенте
Процедура ПолучитьОбъектыИзВыделенныхСтрокДерева(МассивОбъектов, Знач ВыделенныеСтроки, Знач Дерево)
	
	// Выделенные строки дерева могут быть как отдельными элементами,
	// так и группами. Если выделена группа, то она может содержать
	// N-ое количество уровней вложенности. Нужно обойти все уровни.
	
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		Строка = Дерево.НайтиПоИдентификатору(Идентификатор);
		ПолучитьВсеСтрокиОбъектовИзГруппы(Строка, МассивОбъектов);
	КонецЦикла;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОбъектыПредыдущихСпринтов(Знач СписокОбъектыСпринта, 
	Знач ВидСпринта, Знач Филиал, Знач Команда, Знач ОцениватьВStoryPoint, Знач Направления)
	
	Результат = Новый Массив;
	
	ПостроительЗапроса = Новый ПостроительЗапроса; 	
	
	ПостроительЗапроса.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументСпринт.Ссылка КАК Спринт,
	|	СоставСпринтов.Объект КАК Объект,
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексКартинки
	|ПОМЕСТИТЬ СтарыеОбъекты
	|ИЗ
	|	Документ.Спринт КАК ДокументСпринт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ПО ДокументСпринт.Ссылка = СоставСпринтов.Спринт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО (СоставСпринтов.Объект = ДокументЗадача.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (ДокументЗадача.Статус = СтатусыОбъектов.Ссылка)
	|ГДЕ
	|	&ВидСпринта = ЗНАЧЕНИЕ(Перечисление.ВидыСпринта.IT)
	|	И НЕ ДокументСпринт.ПометкаУдаления
	|	И ДокументСпринт.Филиал = &Филиал
	|	И ВЫБОР
	|			КОГДА СтатусыОбъектов.Порядок < &ПорядокСтатусаВРаботе
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|{ГДЕ
	|	ДокументЗадача.КомандаРазработчиков КАК КомандаРазработчиков}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументСпринт.Ссылка,
	|	СоставСпринтов.Объект,
	|	СтатусыОбъектов.ИндексКартинки
	|ИЗ
	|	Документ.Спринт КАК ДокументСпринт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ПО ДокументСпринт.Ссылка = СоставСпринтов.Спринт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееЗадание КАК ДокументВнутреннееЗадание
	|		ПО (СоставСпринтов.Объект = ДокументВнутреннееЗадание.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (ДокументВнутреннееЗадание.Статус = СтатусыОбъектов.Ссылка)
	|ГДЕ
	|	&ВидСпринта = ЗНАЧЕНИЕ(Перечисление.ВидыСпринта.ВнутреннееЗадание)
	|	И НЕ ДокументСпринт.ПометкаУдаления
	|	И ДокументСпринт.Филиал = &Филиал
	|	И ВЫБОР
	|			КОГДА ДокументВнутреннееЗадание.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ВРеализацию)
	|					ИЛИ СтатусыОбъектов.Родитель = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ВРеализацию)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументСпринт.Ссылка,
	|	СоставСпринтов.Объект,
	|	СтатусыОбъектов.ИндексКартинки
	|ИЗ
	|	Документ.Спринт КАК ДокументСпринт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ПО ДокументСпринт.Ссылка = СоставСпринтов.Спринт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО (СоставСпринтов.Объект = ЗаявкаНаРазработку.Ссылка)
	|			И (НЕ ЗаявкаНаРазработку.Черновик)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиФилиалов КАК НастройкиФилиалов
	|		ПО (НастройкиФилиалов.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.НаправлениеРазработки))
	|			И (ЗаявкаНаРазработку.Направление = НастройкиФилиалов.Значение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
	|		ПО (ЗаявкаНаРазработку.Ссылка = МинимальныеСтатусыЗаявок.Заявка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемамФилиалов КАК СтатусыЗаявокПоСистемамФилиалов
	|		ПО (ЗаявкаНаРазработку.Ссылка = СтатусыЗаявокПоСистемамФилиалов.Заявка)
	|			И (СтатусыЗаявокПоСистемамФилиалов.Филиал = &Филиал)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (ЕСТЬNULL(СтатусыЗаявокПоСистемамФилиалов.Статус, ЕСТЬNULL(МинимальныеСтатусыЗаявок.Статус, ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый))) = СтатусыОбъектов.Ссылка)
	|ГДЕ
	|	&ВидСпринта = ЗНАЧЕНИЕ(Перечисление.ВидыСпринта.Планирование)
	|	И НЕ ДокументСпринт.ПометкаУдаления
	|	И ДокументСпринт.Филиал = &Филиал
	|	И ВЫБОР
	|			КОГДА &ОтборПоНаправлению
	|				ТОГДА ЗаявкаНаРазработку.Направление В (&СписокНаправлений)
	|			ИНАЧЕ НастройкиФилиалов.Филиал = &Филиал
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА СтатусыОбъектов.Ссылка В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|					ИЛИ СтатусыОбъектов.Родитель В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтарыеОбъекты.Объект КАК Объект,
	|	МАКСИМУМ(ДокументСпринт.ДатаОкончания) КАК ДатаОкончания
	|ПОМЕСТИТЬ МаксимальныеДатыОкончанияСпринтов
	|ИЗ
	|	СтарыеОбъекты КАК СтарыеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|		ПО СтарыеОбъекты.Спринт = ДокументСпринт.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтарыеОбъекты.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтарыеОбъекты.Объект КАК Объект,
	|	МАКСИМУМ(СтарыеОбъекты.Спринт) КАК Спринт,
	|	СтарыеОбъекты.ИндексКартинки КАК ИндексКартинки
	|ПОМЕСТИТЬ ПоследнийСпринтОбъектов
	|ИЗ
	|	МаксимальныеДатыОкончанияСпринтов КАК МаксимальныеДатыОкончанияСпринтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтарыеОбъекты КАК СтарыеОбъекты
	|		ПО (СтарыеОбъекты.Объект = МаксимальныеДатыОкончанияСпринтов.Объект)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|		ПО (ДокументСпринт.ДатаОкончания = МаксимальныеДатыОкончанияСпринтов.ДатаОкончания)
	|			И (СтарыеОбъекты.Спринт = ДокументСпринт.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СтарыеОбъекты.Объект,
	|	СтарыеОбъекты.ИндексКартинки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоставСпринтов.Объект КАК Объект
	|ПОМЕСТИТЬ ОбъектСпринта
	|ИЗ
	|	РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|		ПО СоставСпринтов.Спринт = ДокументСпринт.Ссылка
	|			И (СоставСпринтов.Объект В (&СписокОбъектыСпринта))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоследнийСпринтОбъектов.Объект КАК Объект,
	|	ПоследнийСпринтОбъектов.Спринт КАК Спринт,
	|	ПоследнийСпринтОбъектов.ИндексКартинки КАК ИндексКартинки
	|ПОМЕСТИТЬ ОбъектыПредыдущихСпринтов
	|ИЗ
	|	ПоследнийСпринтОбъектов КАК ПоследнийСпринтОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектСпринта КАК ОбъектСпринта
	|		ПО ПоследнийСпринтОбъектов.Объект = ОбъектСпринта.Объект
	|ГДЕ
	|	ОбъектСпринта.Объект ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрСведенийТрудозатраты.Объект КАК Объект,
	|	СУММА(РегистрСведенийТрудозатраты.Затрата) КАК Затрата
	|ПОМЕСТИТЬ Трудозатраты
	|ИЗ
	|	ОбъектыПредыдущихСпринтов КАК ОбъектыПредыдущихСпринтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|		ПО ОбъектыПредыдущихСпринтов.Спринт = ДокументСпринт.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК РегистрСведенийТрудозатраты
	|		ПО ОбъектыПредыдущихСпринтов.Объект = РегистрСведенийТрудозатраты.Объект
	|			И (РегистрСведенийТрудозатраты.Период МЕЖДУ ДокументСпринт.ДатаНачала И КОНЕЦПЕРИОДА(ДокументСпринт.ДатаОкончания, ДЕНЬ))
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрСведенийТрудозатраты.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыПредыдущихСпринтов.Объект КАК Объект,
	|	ОбъектыПредыдущихСпринтов.Спринт КАК Спринт,
	|	ВЫБОР
	|		КОГДА &ОцениватьВStoryPoint
	|			ТОГДА ДокументЗадача.ОценкаStoryPoint
	|		ИНАЧЕ ЕСТЬNULL(ПланируемыеТрудозатратыПоСпринтам.Трудозатраты, 0)
	|	КОНЕЦ КАК ПланируемыеТрудозатраты,
	|	ВЫБОР
	|		КОГДА &ОцениватьВStoryPoint
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ТрудозатратыПоОбъектам.Затрата, 0)
	|	КОНЕЦ КАК ФактическиеТрудозатраты,
	|	ОбъектыПредыдущихСпринтов.ИндексКартинки КАК ИндексКартинки
	|ИЗ
	|	ОбъектыПредыдущихСпринтов КАК ОбъектыПредыдущихСпринтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО ОбъектыПредыдущихСпринтов.Объект = ДокументЗадача.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатратыПоСпринтам КАК ПланируемыеТрудозатратыПоСпринтам
	|		ПО ОбъектыПредыдущихСпринтов.Объект = ПланируемыеТрудозатратыПоСпринтам.Объект
	|			И ОбъектыПредыдущихСпринтов.Спринт = ПланируемыеТрудозатратыПоСпринтам.Спринт
	|			И (ПланируемыеТрудозатратыПоСпринтам.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Трудозатраты КАК ТрудозатратыПоОбъектам
	|		ПО ОбъектыПредыдущихСпринтов.Объект = ТрудозатратыПоОбъектам.Объект";
	#КонецОбласти
		
	ПорядокСтатусаВРаботе = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтатусыОбъектов.ВРаботе, "Порядок");
	
	ПостроительЗапроса.Параметры.Вставить("ТекущаяДата", ТекущаяДатаСеанса());
	ПостроительЗапроса.Параметры.Вставить("Филиал", Филиал); 
	ПостроительЗапроса.Параметры.Вставить("СписокОбъектыСпринта", СписокОбъектыСпринта); 
	ПостроительЗапроса.Параметры.Вставить("ВидСпринта", ВидСпринта); 
	ПостроительЗапроса.Параметры.Вставить("ПорядокСтатусаВРаботе", ПорядокСтатусаВРаботе); 
	ПостроительЗапроса.Параметры.Вставить("ОцениватьВStoryPoint", ОцениватьВStoryPoint);
	ПостроительЗапроса.Параметры.Вставить("ОтборПоНаправлению", Направления <> Неопределено И Направления.Количество() > 0);
	ПостроительЗапроса.Параметры.Вставить("СписокНаправлений", Направления);
	
	Если ЗначениеЗаполнено(Команда) Тогда
		ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("КомандаРазработчиков");
		ЭлементОтбора.ВидСравнения  = ВидСравнения.Равно;
		ЭлементОтбора.Значение      = Команда;
		ЭлементОтбора.Использование = Истина;
	КонецЕсли;
	
	ПостроительЗапроса.Выполнить();
			
	Выборка = ПостроительЗапроса.Результат.Выбрать();	
	
	Пока Выборка.Следующий() Цикл
		Структура = Новый Структура("Спринт, Объект, ПланируемыеТрудозатраты, ФактическиеТрудозатраты, ИндексКартинки"); 
		ЗаполнитьЗначенияСвойств(Структура, Выборка);
		Результат.Добавить(Структура);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКлючиНастроек()
	
	Возврат Новый Структура("Объект, Настройка", "Документ.Спринт.ФормаДокумента", "ПользовательскиеНастройкиКомпоновки");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКэшДанных()
			
	КэшДанных = Новый Структура();
	КэшДанных.Вставить("ИндексКартинки_Группа", Справочники.СтатусыОбъектов.ИндексКартинкиГруппа());
	
	Возврат КэшДанных;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПользовательскиеНастройки()
	
	Ключи = ПолучитьКлючиНастроек();
	Настройки = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(Ключи.Объект, Ключи.Настройка);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	Если Настройки = Неопределено Тогда
		// Настройки по умолчанию
		Настройки = Новый Структура;
		Настройки.Вставить("НастройкиКомпоновщикаОбъектыСпринта", КомпоновщикНастроек.ПолучитьНастройки());
		Настройки.Вставить("НастройкиКомпоновщикаДоступныеОбъекты", КомпоновщикНастроек.ПолучитьНастройки());
	Иначе
		ВерсияНастроек = Неопределено;
		Настройки.Свойство("Версия", ВерсияНастроек);
		
		Если ВерсияНастроек = Неопределено Тогда			
			// Настройки по умолчанию
			Настройки.Вставить("НастройкиКомпоновщикаОбъектыСпринта", КомпоновщикНастроек.ПолучитьНастройки());
			Настройки.Вставить("НастройкиКомпоновщикаДоступныеОбъекты", КомпоновщикНастроек.ПолучитьНастройки());
			
			// Возможно, в настройках есть данные предыдущего варианта настроек
			НастройкиКомпоновкиДанных = Неопределено;
			Настройки.Свойство("НастройкиКомпоновкиДанных", НастройкиКомпоновкиДанных);
			
			Если НастройкиКомпоновкиДанных <> Неопределено Тогда
				Настройки.Вставить("НастройкиКомпоновщикаОбъектыСпринта", НастройкиКомпоновкиДанных);
			КонецЕсли;
		Иначе	
			Если Настройки.Свойство("НастройкиКомпоновщикаДоступныеЗадачи") Тогда
				Настройки.Вставить("НастройкиКомпоновщикаДоступныеОбъекты", Настройки.НастройкиКомпоновщикаДоступныеЗадачи);
			   Настройки.Удалить("НастройкиКомпоновщикаДоступныеЗадачи");
			КонецЕсли;  
			
			Если Настройки.Свойство("НастройкиКомпоновщикаЗадачиСпринта") Тогда
				Настройки.Вставить("НастройкиКомпоновщикаОбъектыСпринта", Настройки.НастройкиКомпоновщикаЗадачиСпринта);
			   Настройки.Удалить("НастройкиКомпоновщикаЗадачиСпринта");
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции
		
&НаСервереБезКонтекста
Процедура СохранитьПользовательскиеНастройки(Знач КомпоновщикНастроекОбъектыСпринта, Знач КомпоновщикНастроекДоступныеОбъекты)
	
	Ключи = ПолучитьКлючиНастроек();
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("Версия", 1);
	СтруктураНастроек.Вставить("НастройкиКомпоновщикаОбъектыСпринта", КомпоновщикНастроекОбъектыСпринта.ПолучитьНастройки());
	СтруктураНастроек.Вставить("НастройкиКомпоновщикаДоступныеОбъекты", КомпоновщикНастроекДоступныеОбъекты.ПолучитьНастройки());
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(Ключи.Объект, Ключи.Настройка, СтруктураНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПользовательскиеНастройкиНаКлиенте()
	
	СохранитьПользовательскиеНастройки(КомпоновщикНастроекОбъектыСпринта, КомпоновщикНастроекДоступныеОбъекты);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СуществуетСпринтПоЗадачам(Знач Спринт)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументСпринт.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Спринт КАК ДокументСпринт
	|ГДЕ
	|	ДокументСпринт.ДокументОснование = &Спринт
	|	И НЕ ДокументСпринт.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Спринт", Спринт);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьПредупрежденияОСохранении()
	
	Если Модифицированность И Элементы.ГруппаПредупреждение.Видимость = Ложь Тогда
		Элементы.ГруппаПредупреждение.Видимость = Истина;
	ИначеЕсли НЕ Модифицированность И Элементы.ГруппаПредупреждение.Видимость Тогда
		Элементы.ГруппаПредупреждение.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьДоступностьЭлементовПоДате()
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Если ТекущаяДата > Объект.ДатаНачала Тогда
		Элементы.ДатаНачала.ТолькоПросмотр = Истина;
		Элементы.ДатаОкончания.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ТекущаяДата > КонецДня(Объект.ДатаОкончания) Тогда	
		Элементы.ОбъектыВРеализацию.Доступность = Ложь;
		Элементы.ОбъектыСпринтаДерево.ТолькоПросмотр = Истина;
		
		Элементы.ГруппаКнопкиПеремещений.Доступность = Ложь;
		Элементы.Перечитать.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокТрудозатрат()
				
	Если ОцениватьВStoryPoint Тогда
		Элементы.ОбъектыСпринтаДеревоГруппаТрудозатраты.Заголовок = "Story point";
		
		Элементы.ОбъектыВРеализациюТрудозатратыЗадачи.Заголовок = "Story point";
		Элементы.ОбъектыВРеализациюТрудозатратыЗадачи.ОтображатьВШапке = Истина;
		Элементы.ОбъектыВРеализациюСвободныеТрудозатраты.Подсказка = "Плановые трудозатраты";
	Иначе
		Элементы.ОбъектыСпринтаДеревоГруппаТрудозатраты.Заголовок = "Трудозатраты";
		Элементы.ОбъектыВРеализациюТрудозатратыЗадачи.ОтображатьВШапке = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФилиалКомандаПриИзменении() 
			
	ФилиалКомандаПриИзмененииНаСервере();		
	УстановитьВидимостьПредупрежденияОСохранении();
	
КонецПроцедуры 

&НаСервере
Процедура ФилиалКомандаПриИзмененииНаСервере()

	ДоступностьФилиала = Истина;
	
	Если ЗначениеЗаполнено(Объект.Команда) Тогда   
		КастомныеКоманды = ПредопределенноеЗначение("Справочник.Филиалы.КастомныеКоманды");
		Если ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Команда, "Родитель") = КастомныеКоманды 
				И КастомныеКоманды <> Объект.Филиал Тогда  
			Объект.Филиал = КастомныеКоманды;	
			ДоступностьФилиала = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Филиал.Доступность = ДоступностьФилиала;

	Если Объект.ВидСпринта = Перечисления.ВидыСпринта.IT Тогда
		ОцениватьВStoryPoint = РегистрыСведений.НастройкиФилиалов.ЗначениеНастройки(Объект.Филиал, 
			ПланыВидовХарактеристик.ВидыНастроекФилиалов.ОцениватьЗадачиВStoryPoint);	
	ИначеЕсли Объект.ВидСпринта = Перечисления.ВидыСпринта.Планирование Тогда
		ЗаполнитьНаправлениеПоУмолчанию(СписокНаправлений, Объект.Филиал);
	КонецЕсли;	
		
	ОбновитьОбъектыВРеализацию(); 
	
	ОбщееВремяЗаПериод = ПолучитьДоступноеВремяСпринта(Объект.Ссылка);
		
	УстановитьЗаголовокТрудозатрат();  
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработка перетаскивания

// Добавляет объект в дерево доступных объектов
//
// Параметры:
//  МассивСтрок	 - Массив	 - содержит строки дерева объектов текущего спринта
//
&НаКлиенте
Процедура ДобавитьОбъектыВРеализацию(Знач МассивСтрок)
		
	Отбор = КомпоновщикНастроекДоступныеОбъекты.Настройки.Отбор;
	
	Для Каждого ДобавляемаяСтрока Из МассивСтрок Цикл
		// Получение группировок компоновщика
		СтруктураГруппировок = КомпоновщикНастроекДоступныеОбъекты.Настройки.Структура;
		
		Если СтруктураГруппировок.Количество() = 0 Тогда
			КоллекцияЭлементовДерево = ОбъектыВРеализацию.ПолучитьЭлементы();
			ДобавитьЭлементВДерево(КоллекцияЭлементовДерево, КэшПоказателейОбъектыВРеализацию, ДобавляемаяСтрока, Истина);
		Иначе
			// Добавляем элемент в нужную группировку
			ДобавитьЭлементВДеревоПоГруппировкам(ОбъектыВРеализацию, СтруктураГруппировок, 
				ДобавляемаяСтрока, КэшПоказателейОбъектыВРеализацию, Истина);
		КонецЕсли;
	КонецЦикла;
	
	УдалитьОбъектыИзДерева(МассивСтрок, ОбъектыСпринтаДерево, КэшПоказателейОбъектыСпринта, Истина); 
	
	Массив = ПолучитьНевыбранныеЗаявки(Объект.Ссылка, СписокОбъектыСпринта);
	Элементы.ДекорацияЕстьИзменения.Видимость = Массив.Количество() > 0;

	УстановитьВидимостьПредупрежденияОСохранении();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОбъектыТекущийСпринт(Знач МассивСтрок, Знач ИгнорироватьПустоеВремя = Ложь)
	
	МассивСтрокНаУдаление = Новый Массив;
	МассивОбъектовДляУточнения = Новый Массив;
	
	СписокОбъектов = Новый СписокЗначений;
	
	Для Каждого Строка Из МассивСтрок Цикл
		СписокОбъектов.Добавить(Строка.Ссылка);
	КонецЦикла;
	
	СвободныеЧасыОбъектов = ПолучитьСвободныеЧасыОбъектов(СписокОбъектов);
	
	Для Каждого ДобавляемаяСтрока Из МассивСтрок Цикл	
		Если НЕ ОцениватьВStoryPoint Тогда
			СвободныеЧасы = СвободныеЧасыОбъектов.Получить(ДобавляемаяСтрока.Ссылка);
			Если СвободныеЧасы <> Неопределено Тогда
				ДобавляемаяСтрока.ПланируемыеТрудозатратыТестирование = СвободныеЧасы.ТрудозатратыТестирования;
			КонецЕсли;
		Иначе
			СвободныеЧасы = Новый Структура("Трудозатраты");
			СвободныеЧасы.Трудозатраты = ДобавляемаяСтрока.СвободныеТрудозатраты;
		КонецЕсли;
		
		Если (СвободныеЧасы = Неопределено ИЛИ СвободныеЧасы.Трудозатраты = 0) И НЕ ИгнорироватьПустоеВремя
			И НЕ ЭтоОбъектСДобавленнымиТрудозатратами(ДобавляемаяСтрока.Ссылка) Тогда

			// Добавим объект для уточнения примерного времени реализации
			МассивОбъектовДляУточнения.Добавить(ДобавляемаяСтрока.Ссылка);
			ИдентификаторыОбъектовНаУточнение.Добавить(ДобавляемаяСтрока.ПолучитьИдентификатор());
			Продолжить;
		КонецЕсли; 
	
		// Получение группировок компоновщика
		СтруктураГруппировок = КомпоновщикНастроекОбъектыСпринта.Настройки.Структура;
		
		Если СтруктураГруппировок.Количество() = 0 Тогда
			КоллекцияЭлементовДерево = ОбъектыСпринтаДерево.ПолучитьЭлементы();	
			ДобавитьЭлементВДерево(КоллекцияЭлементовДерево, КэшПоказателейОбъектыСпринта, ДобавляемаяСтрока);
		Иначе
			// Помещение строки в нужную группировку
			ДобавитьЭлементВДеревоПоГруппировкам(ОбъектыСпринтаДерево, СтруктураГруппировок, 
				ДобавляемаяСтрока, КэшПоказателейОбъектыСпринта);
		КонецЕсли;
			
		СписокОбъектыСпринта.Добавить(ДобавляемаяСтрока.Ссылка);
		МассивСтрокНаУдаление.Добавить(ДобавляемаяСтрока);  
		
		Если ИзмененныеОбъекты.НайтиПоЗначению(ДобавляемаяСтрока.Ссылка) = Неопределено Тогда   
			ИзмененныеОбъекты.Добавить(ДобавляемаяСтрока.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	УдалитьОбъектыИзДерева(МассивСтрокНаУдаление, ОбъектыВРеализацию, КэшПоказателейОбъектыВРеализацию);
		
	Если МассивОбъектовДляУточнения.Количество() > 0 Тогда
		УточнитьВремя(МассивОбъектовДляУточнения);
		Возврат;
	КонецЕсли;
	
	Элементы.Филиал.ТолькоПросмотр = Истина;
	Элементы.Команда.ТолькоПросмотр = Истина;
	
	УстановитьВидимостьПредупрежденияОСохранении();
	
	ПересчитатьИтогиОбъектыВРеализацию(ЭтотОбъект, КэшПоказателейОбъектыВРеализацию);
	ПересчитатьИтогиОбъектыСпринта(ЭтотОбъект, КэшПоказателейОбъектыСпринта, ОцениватьВStoryPoint); 
	
	Массив = ПолучитьНевыбранныеЗаявки(Объект.Ссылка, СписокОбъектыСпринта);
	Элементы.ДекорацияЕстьИзменения.Видимость = Массив.Количество() > 0;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСвободныеЧасыОбъектов(Знач СписокОбъектов)
		
	Возврат РегистрыСведений.ПланируемыеТрудозатраты.ПолучитьНераспределенноеВремяОбъектов(СписокОбъектов);
	
КонецФункции

&НаКлиенте
Процедура УточнитьВремя(МассивОбъектовДляУточнения, ВыбранныеОбъекты = Неопределено)
	
	// Заполнение планируемого времени выполнения объектов
	Если Объект.ВидСпринта = ПредопределенноеЗначение("Перечисление.ВидыСпринта.Планирование") Тогда
		ШаблонВопроса = 
		"Для %1 можно указать примерное время выполнения.
		|Продолжить?";
		Склонение = ";%1-ой заявки;%1-ух заявок;%1-ех заявок;%1-ти заявок;%1 заявок";
	ИначеЕсли ОцениватьВStoryPoint Тогда 
		ШаблонВопроса = 
		"Для %1 можно указать оценку в StoryPoint.
		|Продолжить?";
		Склонение = ";%1-ой задачи;%1-ух задач;%1-ех задач;%1-ти задач;%1 задач";
	Иначе
		ШаблонВопроса = 
		"Для %1 требуется указать примерное время выполнения.
		|Продолжить? (При отказе объекты не будут добавлены в спринт.)";
		Склонение = ";%1-ой задачи;%1-ух задач;%1-ех задач;%1-ти задач;%1 задач";
	КонецЕсли;
	
	КоличествоПрописью = СтрокаСЧислом(Склонение, 
		МассивОбъектовДляУточнения.Количество(), ВидЧисловогоЗначения.Количественное);
	ТекстВопроса = СтрШаблон(ШаблонВопроса, КоличествоПрописью);
	
	ПараметрыОповещения = Новый Структура("ОбъектыДляУточнения", МассивОбъектовДляУточнения);
	Если ВыбранныеОбъекты <> Неопределено Тогда
		ПараметрыОповещения.Вставить("ВыбранныеОбъекты", ВыбранныеОбъекты);	
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросУстановкиВремениДляОбъектов", ЭтотОбъект, ПараметрыОповещения); 
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры
				
&НаКлиенте
Процедура ДобавитьЭлементВДерево(КоллекцияЭлементов, КэшПоказателей, Знач ДобавляемаяСтрока, Знач УдалениеИзТекущихОбъектов = Ложь)	
	
	НоваяСтрока = КоллекцияЭлементов.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДобавляемаяСтрока);
	
	НоваяСтрока.ОценкаТрудозатрат = ДобавляемаяСтрока.СвободныеТрудозатраты;
	НоваяСтрока.ПланируемыеТрудозатраты = ДобавляемаяСтрока.СвободныеТрудозатраты;
	Если ДобавляемаяСтрока.ПланируемыеТрудозатратыТестирование > 0 Тогда
		НоваяСтрока.ОценкаТрудозатратТестирование = ДобавляемаяСтрока.ПланируемыеТрудозатратыТестирование;
	КонецЕсли;	
	Если УдалениеИзТекущихОбъектов И ЭтоОбъектСДобавленнымиТрудозатратами(НоваяСтрока.Ссылка) Тогда
		
		НоваяСтрока.ПланируемыеТрудозатраты = НоваяСтрока.ПланируемыеТрудозатраты - НоваяСтрока.ОценкаТрудозатрат;
		НоваяСтрока.ОценкаТрудозатрат = 0;
	КонецЕсли;
			
	Для Каждого Показатель Из КэшПоказателей Цикл
		КэшПоказателей[Показатель.Ключ] = КэшПоказателей[Показатель.Ключ] + НоваяСтрока[Показатель.Ключ];	
	КонецЦикла;
		
КонецПроцедуры

// Добавляет элемент с учётом группировок элемента приемника.
//  При необходимости создает отсутствующие группы.
//
// Параметры:
//  Дерево - ДанныеФормыДерево, ДанныеФормыЭлементДерева - дерево или строка в которое нужно обработать
//  СтруктураГруппировок - КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных - структура группировок приемника
//  ДобавляемаяСтрока - ДанныеФормыЭлементДерева - добавляемая строка
//  КэшПоказателей - Структура - Кэш для общих показателей деревьев
//
&НаКлиенте
Процедура ДобавитьЭлементВДеревоПоГруппировкам(Дерево, Знач СтруктураГруппировок, Знач ДобавляемаяСтрока, КэшПоказателей, Знач ОчиститьТрудозатраты = Ложь)
	
	КоллекцияЭлементов = Дерево.ПолучитьЭлементы();	
	КоличествоГруппировок = СтруктураГруппировок.Количество();
	Если КоличествоГруппировок <> 0 Тогда
		КоличествоПолейГруппировок = СтруктураГруппировок[0].ПоляГруппировки.Элементы.Количество();
	КонецЕсли;
		
	Если КоличествоГруппировок = 0 ИЛИ КоличествоПолейГруппировок = 0 Тогда
		ДобавитьЭлементВДерево(КоллекцияЭлементов, КэшПоказателей, ДобавляемаяСтрока, ОчиститьТрудозатраты);
	Иначе
		ИмяГруппировки = СтруктураГруппировок[0].Имя;
		ГруппировкаНайдена = Ложь;
		
		Если НЕ ЗначениеЗаполнено(ИмяГруппировки) Тогда
			ДобавитьЭлементВДерево(КоллекцияЭлементов, КэшПоказателей, ДобавляемаяСтрока, ОчиститьТрудозатраты);
			Возврат;
		КонецЕсли;
		
		Для Каждого Элемент Из КоллекцияЭлементов Цикл
			Если Элемент[ИмяГруппировки] = ДобавляемаяСтрока[ИмяГруппировки] Тогда
				ДобавитьЭлементВДеревоПоГруппировкам(Элемент, СтруктураГруппировок[0].Структура, 
					ДобавляемаяСтрока, КэшПоказателей, ОчиститьТрудозатраты);
				ГруппировкаНайдена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Добавим группу в дерево, если такой нет добавим в нее сам перетаскиваемый элемент
		Если НЕ ГруппировкаНайдена Тогда
			СтрокаГруппировка = КоллекцияЭлементов.Добавить();
			СтрокаГруппировка.Представление = ДобавляемаяСтрока[ИмяГруппировки];
			СтрокаГруппировка[ИмяГруппировки] = ДобавляемаяСтрока[ИмяГруппировки];
			СтрокаГруппировка.ИндексКартинки = КэшДанных.ИндексКартинки_Группа;
			СтрокаГруппировка.ЭтоГруппа = Истина;
			
			ДобавитьЭлементВДеревоПоГруппировкам(Дерево, СтруктураГруппировок, ДобавляемаяСтрока, КэшПоказателей);
		КонецЕсли;
	КонецЕсли;
			 		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОбъектыИзДерева(Знач МассивСтрок, Дерево, КэшПоказателей, Знач УдалениеИзТекущихОбъектов = Ложь)
	
	Если Элементы.ОбъектыСпринтаДерево.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	МассивРодителей = Новый Массив;
	
	Для Каждого Строка Из МассивСтрок Цикл		
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		НайденнаяСтрока = Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если НайденнаяСтрока <> Неопределено Тогда
			Если НЕ УдалениеИзТекущихОбъектов 
				И ЭтоОбъектСДобавленнымиТрудозатратами(НайденнаяСтрока.Ссылка) Тогда
				
				НайденнаяСтрока.ПланируемыеТрудозатраты = НайденнаяСтрока.ПланируемыеТрудозатраты - НайденнаяСтрока.ОценкаТрудозатрат;
				НайденнаяСтрока.ОценкаТрудозатрат = 0;
			КонецЕсли;
			
			Для Каждого Показатель Из КэшПоказателей Цикл
				КэшПоказателей[Показатель.Ключ] = КэшПоказателей[Показатель.Ключ] - НайденнаяСтрока[Показатель.Ключ];	
			КонецЦикла;
			
			Родитель = НайденнаяСтрока.ПолучитьРодителя(); 
			
			Если ТипЗнч(Родитель) = Тип("ДанныеФормыЭлементДерева") Тогда
				Если МассивРодителей.Найти(Родитель) = Неопределено Тогда
					// Добавление в массив. В дальнейшем проверим наличие
					// подчиненных элементов и удалим родителя если у него
					// нет подчиненныъ элементов.
					МассивРодителей.Добавить(Родитель);
				КонецЕсли;
				
				Родитель.ПолучитьЭлементы().Удалить(НайденнаяСтрока);
			Иначе
				// Если родителем является корневой узел дерева
				Дерево.ПолучитьЭлементы().Удалить(НайденнаяСтрока);
			КонецЕсли;
		КонецЕсли;
		
		Если УдалениеИзТекущихОбъектов Тогда
			ЭлементСписка = СписокОбъектыСпринта.НайтиПоЗначению(Строка.Ссылка);   
			
			Если ЭлементСписка <> Неопределено Тогда
				СписокОбъектыСпринта.Удалить(ЭлементСписка);
				
				ПараметрыОтбора = Новый Структура("Объект", Строка.Ссылка);
				НайденнаяСтрока = ТаблицаОбъектыСДобавленнымиТрудозатратами.НайтиСтроки(ПараметрыОтбора);
				
				Если НайденнаяСтрока.Количество() > 0 Тогда
					ТаблицаОбъектыСДобавленнымиТрудозатратами.Удалить(НайденнаяСтрока.Получить(0));
				КонецЕсли;
			КонецЕсли; 
			
			Если ИзмененныеОбъекты.НайтиПоЗначению(Строка.Ссылка) = Неопределено Тогда   
				ИзмененныеОбъекты.Добавить(Строка.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из МассивРодителей Цикл
		УдалитьПустогоРодителя(Строка, Дерево);
	КонецЦикла;
	
	Модифицированность = Истина;	
	
	УстановитьВидимостьПредупрежденияОСохранении();
	
	ПересчитатьИтогиОбъектыВРеализацию(ЭтотОбъект, КэшПоказателейОбъектыВРеализацию);
	ПересчитатьИтогиОбъектыСпринта(ЭтотОбъект, КэшПоказателейОбъектыСпринта, ОцениватьВStoryPoint);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустогоРодителя(Строка, Дерево)
	
	Если Строка.ПолучитьЭлементы().Количество() = 0 Тогда
		Родитель = Строка.ПолучитьРодителя();
		// Если родитель это корневой узел
		Если Родитель = Неопределено Тогда
			// Удаление пустого родителя
			Дерево.ПолучитьЭлементы().Удалить(Строка);
		Иначе
			// Если родителем является строка дерева, то
			// удалим строку у родителя и проверим наличие
			// подчиненных элементов у родителя строки
			Родитель.ПолучитьЭлементы().Удалить(Строка);
			УдалитьПустогоРодителя(Родитель, Дерево);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоОбъектСДобавленнымиТрудозатратами(Знач Ссылка)
	
	ПараметрыОтбора = Новый Структура("Объект", Ссылка);
	НайденнаяСтрока = ТаблицаОбъектыСДобавленнымиТрудозатратами.НайтиСтроки(ПараметрыОтбора);
	
	Возврат НайденнаяСтрока.Количество() > 0;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Обработка и работа с настройками

&НаКлиенте
Процедура ОбработатьПрименениеНастроекОбъектыСпринта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПрименитьНастройкиНаСервере(Результат);
		
		// Удалим из временного хранилища таблицу значений
		// которая была передана в форму настроек
		Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
			УдалитьИзВременногоХранилища(ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекущуюСтрокуДерева(Дерево, ДеревоФормы, ТекущийОбъект)
	
	СтрокаДереваЗначений = Дерево.Строки.Найти(ТекущийОбъект, "Ссылка", Истина);
	
	Если СтрокаДереваЗначений = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	СтэкУровнейДерева = Новый Массив;
	
	Пока СтрокаДереваЗначений.Родитель <> Неопределено Цикл		
		КоллекцияТекущейСтроки = СтрокаДереваЗначений.Родитель.Строки;			
		ИндексТекущейСтроки = КоллекцияТекущейСтроки.Индекс(СтрокаДереваЗначений);			
		СтэкУровнейДерева.Вставить(0, ИндексТекущейСтроки);			
		СтрокаДереваЗначений = СтрокаДереваЗначений.Родитель;			
	КонецЦикла;
	
    СтэкУровнейДерева.Вставить(0, Дерево.Строки.Индекс(СтрокаДереваЗначений));
	ИдентификаторПозиции  = Неопределено;
	ТекущаяКоллекцияФормы = ДеревоФормы.ПолучитьЭлементы();
	
	Для Каждого Индекс Из СтэкУровнейДерева Цикл 		
		ТекущаяСтрока = ТекущаяКоллекцияФормы[Индекс];
		ИдентификаторПозиции = ТекущаяСтрока.ПолучитьИдентификатор();			
		ТекущаяКоллекцияФормы = ТекущаяСтрока.ПолучитьЭлементы(); 		
	КонецЦикла;
	
	Возврат ИдентификаторПозиции;    	
	
КонецФункции

&НаСервере
Процедура ПрименитьНастройкиНаСервере(Знач РезультатНастройки)
	
	ДеревоЗначений = ПолучитьИзВременногоХранилища(РезультатНастройки.АдресВХранилище);
	
	Если РезультатНастройки.НазваниеТаблицы = "ОбъектыСпринта" Тогда	
		КомпоновщикНастроекОбъектыСпринта.ЗагрузитьНастройки(РезультатНастройки.НастройкиКомпоновки);	
		ЗаполнитьДеревоФормы(ОбъектыСпринтаДерево, ДеревоЗначений);	 
		ЗаполнитьУсловноеОформлениеТеги("ОбъектыСпринтаДерево", "ОбъектыСпринта"); 
		Элементы.ОбъектыСпринтаДерево.ТекущаяСтрока = ПолучитьТекущуюСтрокуДерева(ДеревоЗначений, ОбъектыСпринтаДерево, 
			ТекущийОбъектОбъектыСпринта);	
		
	ИначеЕсли РезультатНастройки.НазваниеТаблицы = "ДоступныеОбъекты" Тогда	
		КомпоновщикНастроекДоступныеОбъекты.ЗагрузитьНастройки(РезультатНастройки.НастройкиКомпоновки);
		ЗаполнитьДеревоФормы(ОбъектыВРеализацию, ДеревоЗначений);
		ЗаполнитьУсловноеОформлениеТеги("ОбъектыВРеализацию", "ДоступныеОбъекты"); 
		Элементы.ОбъектыВРеализацию.ТекущаяСтрока = ПолучитьТекущуюСтрокуДерева(ДеревоЗначений, ОбъектыВРеализацию, 
			ТекущийОбъектОбъектыВРеализацию);
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(РезультатНастройки.АдресВХранилище);	
	СохранитьПользовательскиеНастройки(КомпоновщикНастроекОбъектыСпринта, КомпоновщикНастроекДоступныеОбъекты);
		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработка формирования писем по измененным спринтам объектов

Функция ПолучитьТекущиеСпринтыПоСпискуОбъектов(Знач Спринт, Знач СписокОбъектов)
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставСпринтов.Спринт КАК Спринт,
	|	СоставСпринтов.Объект КАК Объект,
	|	ДокументСпринт.ДатаНачала КАК ДатаНачала
	|ПОМЕСТИТЬ ИнформацияПоСпринтам
	|ИЗ
	|	РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|		ПО СоставСпринтов.Спринт = ДокументСпринт.Ссылка
	|ГДЕ
	|	СоставСпринтов.Объект В(&СписокОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ИнформацияПоСпринтам.ДатаНачала) КАК ДатаНачала,
	|	ИнформацияПоСпринтам.Объект КАК Объект
	|ПОМЕСТИТЬ АктуальнаяДата
	|ИЗ
	|	ИнформацияПоСпринтам КАК ИнформацияПоСпринтам
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнформацияПоСпринтам.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнформацияПоСпринтам.Спринт КАК Спринт,
	|	ИнформацияПоСпринтам.Объект КАК Объект
	|ИЗ
	|	ИнформацияПоСпринтам КАК ИнформацияПоСпринтам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальнаяДата КАК АктуальнаяДата
	|		ПО (АктуальнаяДата.Объект = ИнформацияПоСпринтам.Объект)
	|			И (АктуальнаяДата.ДатаНачала = ИнформацияПоСпринтам.ДатаНачала)
	|ГДЕ
	|	НЕ ИнформацияПоСпринтам.Спринт = &Спринт";
	
	Запрос.УстановитьПараметр("СписокОбъектов", СписокОбъектов);
	Запрос.УстановитьПараметр("Спринт", Спринт);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Вставить(Выборка.Объект, Выборка.Спринт);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура предназначена для формирования сообщения пользователям, когда меняется спринт у объекта через Документ.Спринт
&НаСервере
Процедура ПроверитьИзменениеСпринта(Знач СтарыйСпринт, Знач НовыйСпринт, Знач Объект)
	
	ТекстСообщения = РегистрыСведений.ОчередьСобытийНаОбработку.ПолучитьШаблонИзмененияРеквизита("Спринт", 
		СтарыйСпринт, НовыйСпринт);
	ДанныеСтруктура = Новый Структура("Событие, Реквизит, СтароеЗначение, НовоеЗначение",
		"ИзменениеРеквизита", "Спринт", Строка(СтарыйСпринт), Строка(НовыйСпринт));

	Данные = ЗаписатьЗначениеJSON(ДанныеСтруктура);

	СтруктураЗаписиВИсторию = Новый Структура();
	СтруктураЗаписиВИсторию.Вставить("Данные", Данные);
	СтруктураЗаписиВИсторию.Вставить("Категория", Перечисления.КатегорииСобытийИсторияИзменений.Прочее);
	
	// При добавлении ссылки необходимо отправить уведомление пользователям
	СтруктураСообщенияПользователю = Новый Структура;
	СтруктураСообщенияПользователю.Вставить("ТекстСообщения", ТекстСообщения);
	СтруктураСообщенияПользователю.Вставить("СообщениеSDMS", " внес(-ла) изменения:");
	СтруктураСообщенияПользователю.Вставить("Данные", Данные);
	СтруктураСообщенияПользователю.Вставить("КатегорияСообщения",
		Перечисления.КатегорииСообщенийПользователя.ПрочиеИзмененияОбъекта);
	
	Получатели = Новый Массив;	
	РезультатЗапроса = РегистрыСведений.Участники.ПолучателиОповещения(Объект, Истина);
	Получатели = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Пользователь");
		
	РегистрыСведений.ИсторияИзмененийОбъектовПоСобытиям.Добавить(Объект, СтруктураЗаписиВИсторию);
	
	Если Получатели.Количество() > 0 Тогда
		РегистрыСведений.ПодготовленныеСообщенияПользователяПоКатегориям.Добавить(Получатели, Объект,
			СтруктураСообщенияПользователю, ПараметрыСеанса.ТекущийПользователь);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройка колонок

&НаКлиентеНаСервереБезКонтекста
Функция	ВидимостьЭлементовТаблицы(Знач ЭтоСпринтПланирование, Знач ЭтоСпринтIT, 
		Знач ЭтоСпринтТестирования, Знач ОцениватьВStoryPoint)
	
	Видимость = Новый Структура;
	
	// Таблица "Доступные объекты"	
	Видимость.Вставить("ОбъектыВРеализациюСтатус", НЕ ЭтоСпринтПланирование);
	Видимость.Вставить("ОбъектыВРеализациюТрудозатратыЗадачи", НЕ ЭтоСпринтПланирование);	
	Видимость.Вставить("ОбъектыВРеализациюТрудозатратыЗаявки", ЭтоСпринтПланирование);
	
	// Таблица "Текущие объекты"
	Видимость.Вставить("ОбъектыСпринтаДеревоПланируемыеТрудозатратыЗаявки", ЭтоСпринтПланирование);
	Видимость.Вставить("ОбъектыСпринтаДеревоФактическиеТрудозатратыЗаявки", ЭтоСпринтПланирование);
	Видимость.Вставить("ОбъектыСпринтаДеревоТрудозатратыЗаявки", ЭтоСпринтПланирование);	
	Видимость.Вставить("ОбъектыСпринтаДеревоНазначена", НЕ ЭтоСпринтПланирование);
	Видимость.Вставить("ОбъектыСпринтаДеревоТрудозатратыЗадачи", НЕ ЭтоСпринтПланирование);
	Видимость.Вставить("ОбъектыСпринтаДеревоОценкаТрудозатратТестирование", 
		ЭтоСпринтIT И НЕ ЭтоСпринтТестирования И НЕ ОцениватьВStoryPoint);
	Видимость.Вставить("ОбъектыСпринтаДеревоФактическиеТрудозатратыТестирование", 
		ЭтоСпринтIT И НЕ ЭтоСпринтТестирования И НЕ ОцениватьВStoryPoint);  
		
	Возврат Видимость;

КонецФункции

&НаСервере
Процедура ИнициализацияНастроекКолонок()
	
	Ключи = КлючиНастроекКолонок();
	СохраненныеНастройки = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(Ключи.Объект, Ключи.Настройка);   
	
	Если ТипЗнч(СохраненныеНастройки) <> Тип("Соответствие") Тогда
		СохраненныеНастройки = Новый Соответствие;
	КонецЕсли;      
	
	НастройкиКолонок = СохраненныеНастройки.Получить(Объект.ВидСпринта);
	
	Если НастройкиКолонок = Неопределено Тогда
		НастройкиКолонок = Новый Структура;
	КонецЕсли;                             
	
	Если НЕ НастройкиКолонок.Свойство("ОбъектыВРеализацию") Тогда
		НастройкиКолонок.Вставить("ОбъектыВРеализацию");
	КонецЕсли;
	
	Если НЕ НастройкиКолонок.Свойство("ОбъектыСпринтаДерево") Тогда
		НастройкиКолонок.Вставить("ОбъектыСпринтаДерево");
	КонецЕсли;   
	
	Для Каждого Настройка Из НастройкиКолонок Цикл         
		
		НастройкиКолонокПоУмолчанию = НастройкиКолонокПоУмолчанию(Настройка.Ключ, ЭтоСпринтПланирование, 
			ЭтоСпринтIT, ЭтоСпринтТестирования, ОцениватьВStoryPoint);  
		
		ТекущаяНастройка = ИнтерфейсПриложенияВызовСервера.ЗаполнитьСохраненныеНастройки(Настройка.Значение,
			НастройкиКолонокПоУмолчанию);
		
		ИнтерфейсПриложенияКлиентСервер.ПрименитьПользовательскиеНастройки(Элементы, ТекущаяНастройка);	
		
		ИнтерфейсПриложения.ОбновитьПорядокКолонокНаСервере(ТекущаяНастройка.Порядок, 
			Элементы, Элементы[Настройка.Ключ], Истина); 
			
		НастройкиКолонок.Вставить(Настройка.Ключ, ТекущаяНастройка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючиНастроекКолонок()
		
	Возврат Новый Структура("Объект, Настройка", "Документ.Спринт", "НастройкиКолонок");
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция НастройкиКолонокПоУмолчанию(Знач Дерево, Знач ЭтоСпринтПланирование, Знач ЭтоСпринтIT, 
		Знач ЭтоСпринтТестирования, Знач ОцениватьВStoryPoint)
	
	Состав = Новый СписокЗначений;
	ВсеКолонки = Новый СписокЗначений;
	
	Если Дерево = "ОбъектыВРеализацию" Тогда 		
		ВсеКолонки.Добавить("ОбъектыВРеализациюПредставлние", "Наименование", Истина);  
		ВсеКолонки.Добавить("ОбъектыВРеализациюСтатус", "Статус", Истина);
		ВсеКолонки.Добавить("ОбъектыВРеализациюТрудозатратыЗадачи", "Трудозатраты задачи", Истина);
		ВсеКолонки.Добавить("ОбъектыВРеализациюТрудозатратыЗаявки", "Трудозатраты заявки", Истина);
		ВсеКолонки.Добавить("ОбъектыВРеализациюНазначение", "Назначение", Истина);
		ВсеКолонки.Добавить("ОбъектыВРеализациюПорядок", "Порядок", Истина);
		ВсеКолонки.Добавить("ОбъектыВРеализациюБылаВСпринте", "Была в спринте", Истина);
		ВсеКолонки.Добавить("ОбъектыВРеализациюЦелеваяЗаявка", "Целевая заявка", Истина);
		ВсеКолонки.Добавить("ОбъектыВРеализациюСпринт", "Спринт", Истина);
	Иначе
		ВсеКолонки.Добавить("ОбъектыСпринтаДеревоПредставление", "Наименование", Истина);  
		ВсеКолонки.Добавить("ОбъектыСпринтаДеревоПланируемыеТрудозатратыЗаявки", "План заявки", Истина);
		ВсеКолонки.Добавить("ОбъектыСпринтаДеревоФактическиеТрудозатратыЗаявки", "Факт заявки", Истина);
		ВсеКолонки.Добавить("ОбъектыСпринтаДеревоНазначена", "Назначена", Истина);
		ВсеКолонки.Добавить("ОбъектыСпринтаДеревоТрудозатратыЗадачи", "Трудозатраты задачи", Истина);
		ВсеКолонки.Добавить("ОбъектыСпринтаДеревоОценкаТрудозатратТестирование", "Оценка трудозатрат тестирование", Истина);
		ВсеКолонки.Добавить("ОбъектыСпринтаДеревоФактическиеТрудозатратыТестирование", "Фактические трудозатраты тестирование", Истина);
		ВсеКолонки.Добавить("ОбъектыСпринтаДеревоТрудозатратыЗаявки", "Трудозатраты заявки", Истина);
		ВсеКолонки.Добавить("ОбъектыСпринтаДеревоНазначение", "Назначение", Истина);
		ВсеКолонки.Добавить("ОбъектыСпринтаДеревоПорядок", "Порядок", Истина); 	
		ВсеКолонки.Добавить("ОбъектыСпринтаДеревоЦелеваяЗаявка", "Целевая заявка", Истина);
	КонецЕсли;
	
	Видимость = ВидимостьЭлементовТаблицы(ЭтоСпринтПланирование, ЭтоСпринтIT, ЭтоСпринтТестирования, ОцениватьВStoryPoint);

	Для Каждого Колонка Из ВсеКолонки Цикл
		Если НЕ (Видимость.Свойство(Колонка.Значение) И НЕ Видимость[Колонка.Значение]) Тогда
			Состав.Добавить(Колонка.Значение, Колонка.Представление, Колонка.Пометка);
		КонецЕсли;
	КонецЦикла;
	
	ПорядковыйНомер = 1;
	Порядок = Новый Соответствие;
	
	Для Каждого ЭлементСписка Из Состав Цикл
		СтруктураПоля = Новый Структура("Поле, Представление", ЭлементСписка.Значение, ЭлементСписка.Представление);
		Порядок.Вставить(ПорядковыйНомер, СтруктураПоля);
		
		ПорядковыйНомер = ПорядковыйНомер + 1;
	КонецЦикла;
	
	Результат = Новый Структура("Состав, Порядок", Состав, Порядок);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеНастроекКолонок(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	             
	ЗаполняемыеСвойства = "Состав, Порядок";
	Настройки = НастройкиКолонок[ДополнительныеПараметры.Дерево];	
	ЗаполнитьЗначенияСвойств(Настройки, Результат, ЗаполняемыеСвойства);
		
	ИнтерфейсПриложенияКлиентСервер.ПрименитьПользовательскиеНастройки(Элементы, Настройки);
	
	Если Результат.ИзменилсяПорядок Тогда
		ОбновитьПорядокКолонок(ДополнительныеПараметры.Дерево, Настройки.Порядок);
	КонецЕсли;

	// Сохранение пользовательских настроек
	СохранитьНастройкиДанныхФормы();
	
КонецПроцедуры  

&НаСервере
Процедура ОбновитьПорядокКолонок(Знач Дерево, Знач Порядок)
	
	ТаблицаЭлемента = Элементы[Дерево];
	ИнтерфейсПриложения.ОбновитьПорядокКолонокНаСервере(Порядок, Элементы, ТаблицаЭлемента, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуКолонок(Дерево)

	НастройкиКолонокПоУмолчанию = НастройкиКолонокПоУмолчанию(Дерево, ЭтоСпринтПланирование, 
		ЭтоСпринтIT, ЭтоСпринтТестирования, ОцениватьВStoryPoint);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДоступныеНастройки", НастройкиКолонок[Дерево]);
	ПараметрыОткрытия.Вставить("НастройкиПоУмолчанию", НастройкиКолонокПоУмолчанию);
		
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Дерево", Дерево);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеНастроекКолонок", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаКолонок", ПараметрыОткрытия, ЭтотОбъект,
		КлючУникальности, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиДанныхФормы()
	
	Ключи = КлючиНастроекКолонок();	  
	
	СохраненныеНастройки = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(Ключи.Объект, Ключи.Настройка);   
	
	Если ТипЗнч(СохраненныеНастройки) <> Тип("Соответствие") Тогда
		СохраненныеНастройки = Новый Соответствие;
	КонецЕсли;
	
	СохраненныеНастройки.Вставить(Объект.ВидСпринта, НастройкиКолонок);
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(Ключи.Объект, Ключи.Настройка, СохраненныеНастройки);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сохранение настроек динамических списков

&НаСервере
Процедура ОбновлениеПользовательскихНастроек(ДополнительныеПараметры)
	
	Результат = Новый Структура("КлючНастройкиСписка, ПользовательскиеНастройкиСписка");	
	
	Результат.КлючНастройкиСписка = Новый Массив;
	Результат.КлючНастройкиСписка.Добавить(ДополнительныеПараметры.КлючХранилища);
		
	Результат.ПользовательскиеНастройкиСписка = Новый Массив;
	Результат.ПользовательскиеНастройкиСписка.Добавить(Элементы[ДополнительныеПараметры.ГруппаНастроек]);
		
	ОбщегоНазначенияВызовСервера.ПользовательскиеНастройкиДинамическогоСписка(
		Результат.КлючНастройкиСписка, ЭтотОбъект[ДополнительныеПараметры.ВариантыНастроек], ЭтотОбъект,
		Результат.ПользовательскиеНастройкиСписка);
	                                  
КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьСохранениеНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновлениеПользовательскихНастроек(ДополнительныеПараметры);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСохраненныхНастроек(КлючХранилища, Компоновщик, ВариантыНастроек, ГруппаНастроек) 
	
	ПользовательскиеНастройки = ПолучитьСохраняемыеПользовательскиеНастройки(Компоновщик);
		
	ПараметрыОткрытия = Новый Структура("КлючХранилища, ПользовательскиеНастройки", КлючХранилища, ПользовательскиеНастройки);  
	ДополнительныеПараметры = Новый Структура("КлючХранилища, ВариантыНастроек, ГруппаНастроек", 
		КлючХранилища, ВариантыНастроек, ГруппаНастроек); 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьСохранениеНастроек", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.НастройкиДинамическогоСписка", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКлючХранилища(Объект)
	
	Возврат СтрШаблон("Документ.Спринт.Настройки_%1", Объект);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСохраняемыеПользовательскиеНастройки(Компоновщик)
	
	Возврат Новый Структура("КомпоновщикНастроек", Компоновщик.ПолучитьНастройки());

КонецФункции

&НаСервере
Процедура ПрименитьНастройкуДинамическогоСпискаНаСервере(Идентификатор)
	
	// Здесь не видно контекста, настройка какой конкретно таблицы выбирается
	// Поэтому по таблице варинатов настроек узнаю, что конкретно обновлять.
	
	Ключ_ДоступныеОбъекты = ПолучитьКлючХранилища("ДоступныеОбъекты");
	Ключ_ОбъектыСпринта = ПолучитьКлючХранилища("ОбъектыСпринта");
	ИмяНастройки = "ДоступныеОбъекты";
	
	Настройки = ОбщегоНазначенияВызовСервера.ПолучитьНастройкиХранилищеНастроекДинамическихСписков(
		Ключ_ДоступныеОбъекты, ВариантыНастроекДоступныеОбъекты, Идентификатор);	 
		
	Если Настройки = Неопределено Тогда
		Настройки = ОбщегоНазначенияВызовСервера.ПолучитьНастройкиХранилищеНастроекДинамическихСписков(
			Ключ_ОбъектыСпринта, ВариантыНастроекОбъектыСпринта, Идентификатор);	 
		ИмяНастройки = "ОбъектыСпринта";
	КонецЕсли;
	
	Если Настройки <> Неопределено Тогда
		Если ИмяНастройки = "ДоступныеОбъекты" Тогда
			КомпоновщикНастроекДоступныеОбъекты.ЗагрузитьНастройки(Настройки.КомпоновщикНастроек);
			ОбновитьОбъектыВРеализацию();               
		Иначе
			КомпоновщикНастроекОбъектыСпринта.ЗагрузитьНастройки(Настройки.КомпоновщикНастроек);
			ОбновитьОбъектыСпринта();               
		КонецЕсли; 
		
		СохранитьПользовательскиеНастройки(КомпоновщикНастроекОбъектыСпринта, КомпоновщикНастроекДоступныеОбъекты);
	КонецЕсли;
	
КонецПроцедуры  

#КонецОбласти

#Область ОбъявлениеПеременных

#Если ТонкийКлиент ИЛИ ВебКлиент Тогда

ИдентификаторыОбъектовНаУточнение = Новый Массив;                    

#КонецЕсли

#КонецОбласти
