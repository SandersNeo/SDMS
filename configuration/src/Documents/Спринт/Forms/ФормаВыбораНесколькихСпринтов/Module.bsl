///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Параметры.Свойство("РежимВыбораОдного", РежимВыбораОдного);	
	Параметры.Свойство("Объект", Объект); 
	Параметры.Свойство("ВидСпринта", ВидСпринта);
	Параметры.Свойство("ВыбранныеСпринты", ВыбранныеСпринты);
	Параметры.Свойство("ФормаЗадачи", ОткрытиеИзФормыЗадачи);
	
	Если Параметры.Свойство("Филиал") Тогда
		Филиалы.Добавить(Параметры.Филиал);
		ОтборФилиал = Параметры.Филиал;
	КонецЕсли;
	
	Если Параметры.Свойство("Команда") И ЗначениеЗаполнено(Параметры.Команда) Тогда
		ОтборПоКоманде = Истина;
		ОтборФилиал = Параметры.Команда;
		
		КомандаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Команда, "Родитель");
		
		Если КомандаРодитель = Справочники.Филиалы.КастомныеКоманды Тогда
			Филиалы.Добавить(КомандаРодитель);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборФилиал) Тогда
		ИспользоватьОтбор = Истина;
  		Элементы.ГруппаОтбор.Видимость = (ТипЗнч(Объект) <> Тип("ДокументСсылка.Задача"));
	КонецЕсли;

	НачальныеСпринты = ВыбранныеСпринты.Скопировать();
	
	ЗаполнитьСпринтами();
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтборПоФилиалуПриИзменении(Элемент)
	
	ЗаполнитьСпринтами();
	
КонецПроцедуры
    
&НаКлиенте
Процедура ТаблицаСпринтовПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаСпринтов.ТекущиеДанные;	

	Если ТекущиеДанные.Пометка Тогда
		Если ВыбранныеСпринты.НайтиПоЗначению(ТекущиеДанные.Спринт) = Неопределено Тогда
			ОбработатьВыборОдного(ТекущиеДанные.Спринт);
			ВыбранныеСпринты.Добавить(ТекущиеДанные.Спринт); 
		КонецЕсли;
	Иначе                     
		Найденное = ВыбранныеСпринты.НайтиПоЗначению(ТекущиеДанные.Спринт);
		Если Найденное <> Неопределено Тогда
			ВыбранныеСпринты.Удалить(Найденное);        
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСпринтовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТаблицаСпринтовСпринт" Тогда
		ПоказатьЗначение(, ТаблицаСпринтов.НайтиПоИдентификатору(ВыбраннаяСтрока).Спринт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФилиалПриИзменении(Элемент)
	
	ЗаполнитьСпринтами();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сохранить(Команда)
	
	УточнитьВремя = Ложь;
	
	Для Каждого Спринт Из ВыбранныеСпринты Цикл
		Если НачальныеСпринты.НайтиПоЗначению(Спринт.Значение) = Неопределено Тогда
			УточнитьВремя = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УточнитьВремя Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВнесениеТрудозатрат", ЭтотОбъект); 
		
		ПараметрыОткрытия = Новый Структура();	
		ПараметрыОткрытия.Вставить("Объект", Объект); 
		ПараметрыОткрытия.Вставить("Спринты", ВыбранныеСпринты);
		ПараметрыОткрытия.Вставить("ПолучитьПлановыеТрудозатраты", Истина);
		ПараметрыОткрытия.Вставить("ОткрытиеИзФормыЗадачи", ОткрытиеИзФормыЗадачи);
			
		ОткрытьФорму("РегистрСведений.ПланируемыеТрудозатратыПоСпринтам.Форма.ФормаВнесенияТрудозатрат", ПараметрыОткрытия, ЭтотОбъект, 
		УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ЗавершитьСохранениеСпринтов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции   

&НаКлиенте
Процедура ЗавершитьСохранениеСпринтов()
		
	Если СохранитьСпринты() Тогда
		Закрыть(Новый Структура("АктивныеСпринты, Трудозатраты", ВыбранныеСпринты.ВыгрузитьЗначения(), Трудозатраты));
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьСпринтами() 
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ДокументСпринт.ДатаНачала КАК ДатаНачала,
	|	ДокументСпринт.Ссылка КАК Спринт,
	|	ДокументСпринт.Ссылка В (&ВыбранныеСпринты) КАК Пометка,
	|	ИСТИНА КАК Доступен
	|ИЗ
	|	Документ.Спринт КАК ДокументСпринт
	|ГДЕ
	|	НЕ ДокументСпринт.ПометкаУдаления
	|	И КОНЕЦПЕРИОДА(ДокументСпринт.ДатаОкончания, ДЕНЬ) >= &ДатаНачала
	|{ГДЕ
	|	ДокументСпринт.Филиал КАК Филиал,
	|	ДокументСпринт.Команда КАК Команда,
	|	ДокументСпринт.ВидСпринта КАК ВидСпринта}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументСпринт.ДатаНачала,
	|	СоставСпринтов.Спринт,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|		ПО (ДокументСпринт.Ссылка = СоставСпринтов.Спринт)
	|ГДЕ
	|	СоставСпринтов.Объект = &Объект
	|	И НЕ ДокументСпринт.ПометкаУдаления
	|	И КОНЕЦПЕРИОДА(ДокументСпринт.ДатаОкончания, ДЕНЬ) < &ДатаНачала
	|{ГДЕ
	|	ДокументСпринт.Филиал КАК Филиал,
	|	ДокументСпринт.Команда КАК Команда,
	|	ДокументСпринт.ВидСпринта КАК ВидСпринта}
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала";
	#КонецОбласти
		
	Если ОтборПоКоманде Тогда
		Если ИспользоватьОтбор Тогда
			ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ПостроительЗапроса,
				"Команда", ВидСравнения.Равно, ОтборФилиал);	
		КонецЕсли;
		
		ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ПостроительЗапроса,
			"Филиал", ВидСравнения.ВСписке, Филиалы);	
		
	ИначеЕсли ИспользоватьОтбор Тогда
		ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ПостроительЗапроса,
			"Филиал", ВидСравнения.Равно, ОтборФилиал);	
	КонецЕсли;

	ОбщегоНазначения.ДобавитьЭлементОтбораПостроителяЗапросов(ПостроительЗапроса,
		"ВидСпринта", ВидСравнения.Равно, ВидСпринта);
	
	ПостроительЗапроса.Параметры.Вставить("Объект", Объект);
	ПостроительЗапроса.Параметры.Вставить("ВыбранныеСпринты", ВыбранныеСпринты);
	ПостроительЗапроса.Параметры.Вставить("ДатаНачала", ТекущаяДатаСеанса());
	ПостроительЗапроса.Выполнить();		
	
	ТаблицаСпринтов.Очистить();
	
	Для Каждого Строка Из ПостроительЗапроса.Результат.Выгрузить() Цикл 
		ЗаполнитьЗначенияСвойств(ТаблицаСпринтов.Добавить(), Строка);  
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВнесениеТрудозатрат(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		ЗавершитьСохранениеСпринтов();
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не внесено плановое время");
	КонецЕсли;
		
КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьВыборОдного(Спринт)
	
	Если РежимВыбораОдного Тогда 
		ВыбранныеСпринты.Очистить();
		Для Каждого Строка Из ТаблицаСпринтов Цикл
			Если Строка.Спринт <> Спринт Тогда
				Строка.Пометка = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьПересечение(ВыбранныеСпринты) 
	
	Результат = Истина;
	
	Если ВыбранныеСпринты.Количество() > 1 Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Спринт.Ссылка КАК Ссылка,
		|	Спринт.ДатаНачала КАК ДатаНачала,
		|	Спринт.ДатаОкончания КАК ДатаОкончания,
		|	АВТОНОМЕРЗАПИСИ() КАК Ключ
		|ПОМЕСТИТЬ Спринты
		|ИЗ
		|	Документ.Спринт КАК Спринт
		|ГДЕ
		|	Спринт.Ссылка В(&Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Спринты.Ссылка КАК Ссылка,
		|	СпринтыПересечение.Ссылка КАК СсылкаПересечение
		|ИЗ
		|	Спринты КАК Спринты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Спринты КАК СпринтыПересечение
		|		ПО Спринты.Ключ < СпринтыПересечение.Ключ
		|ГДЕ
		|	(СпринтыПересечение.ДатаНачала МЕЖДУ Спринты.ДатаНачала И Спринты.ДатаОкончания
		|			ИЛИ СпринтыПересечение.ДатаОкончания МЕЖДУ Спринты.ДатаНачала И Спринты.ДатаОкончания
		|			ИЛИ Спринты.ДатаНачала МЕЖДУ СпринтыПересечение.ДатаНачала И СпринтыПересечение.ДатаОкончания)"; 
		
		Запрос.УстановитьПараметр("Ссылка", ВыбранныеСпринты);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Результат = Ложь;
			Выборка = РезультатЗапроса.Выбрать();   
			Массив = Новый Массив;
			Массив.Добавить("Нельзя сохранить спринты, так как пересекаются следующие спринты:");
			
			Пока Выборка.Следующий() Цикл 
				Массив.Добавить(СтрШаблон("%1 и %2", Выборка.Ссылка, Выборка.СсылкаПересечение));
			КонецЦикла;
			
			Сообщить(СтрСоединить(Массив, Символы.ПС));				
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СохранитьСпринты()
	
	Если ТипЗнч(Объект) <> Тип("ДокументСсылка.ЗаявкаНаРазработку") И НЕ ПроверитьПересечение(ВыбранныеСпринты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОписаниеИзменений = ОбщегоНазначения.ПолучитьСостояниеОбъектаДоЗаписи(Объект);
	ОписаниеИзменений.Вставить("ОписаниеИзменилось", Ложь);	
		
	Выборка = РегистрыСведений.СоставСпринтов.ПолучитьРазницуСпринтовОбъекта(Объект, ВыбранныеСпринты);
	
	Если НЕ Выборка.Пустой() Тогда	
		Спринты = РегистрыСведений.СоставСпринтов.ПолучитьАктивныеСпринтыОбъекта(Объект, Истина);
		
		РазницаСпринты = Новый Структура;
		РазницаСпринты.Вставить("СтарыйСпринт", СтрСоединить(Спринты.ВыгрузитьЗначения(), Символы.ПС));
		РазницаСпринты.Вставить("НовыйСпринт", СтрСоединить(ВыбранныеСпринты.ВыгрузитьЗначения(), ";"));
		ОписаниеИзменений.Значения.Реквизиты.Вставить("Спринт", РазницаСпринты);
			
		Таблица = Выборка.Выгрузить().НайтиСтроки(Новый Структура("Добавить", Ложь));
		Для Каждого Строка Из Таблица Цикл  
			
			НачатьТранзакцию();
			Попытка
				РегистрыСведений.ПланируемыеТрудозатратыПоСпринтам.Удалить(Объект, Строка.Спринт);  
				ЗафиксироватьТранзакцию();
			Исключение     
				ОтменитьТранзакцию();        
				
				ТекстОшибки = ОписаниеОшибки();
				ТекстОшибки = СтрШаблон("Не удалось очистить трудозатраты %1 у спринта %2 по причине: %3", 
					Объект, Строка.Спринт, ТекстОшибки);
				
				ЗаписьЖурналаРегистрации("ПланируемыеТрудозатратыПоСпринтам.Удалить", 
					УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ПланируемыеТрудозатратыПоСпринтам.Трудозатраты), 0) КАК Трудозатраты
	|ИЗ
	|	РегистрСведений.ПланируемыеТрудозатратыПоСпринтам КАК ПланируемыеТрудозатратыПоСпринтам
	|ГДЕ
	|	ПланируемыеТрудозатратыПоСпринтам.Объект = &Объект
	|	И ПланируемыеТрудозатратыПоСпринтам.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка)"; 
	
	Запрос.УстановитьПараметр("Объект", Объект);
	ВыборкаТрудозатраты = Запрос.Выполнить().Выбрать();
	ВыборкаТрудозатраты.Следующий();
	Трудозатраты = ВыборкаТрудозатраты.Трудозатраты;
		
	Если ВыбранныеСпринты.Количество() = 0 Тогда                                       
		РегистрыСведений.СоставСпринтов.ОбновитьСпринтОбъекта(Объект, Документы.Спринт.ПустаяСсылка());
	Иначе
		РегистрыСведений.СоставСпринтов.ОбновитьСпринтыОбъекта(Объект, ВыбранныеСпринты);		
	КонецЕсли;
	
	ОценкаТрудозатрат = УчетТрудозатрат.ПолучитьПлановыеТрудозатраты(Объект);

	Если Трудозатраты < ОценкаТрудозатрат Тогда
		Трудозатраты = ОценкаТрудозатрат;
	КонецЕсли;
	
	ОбщегоНазначения.ОбработатьИзменениеОбъекта(Объект, ОписаниеИзменений);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти
