///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если ЗапрещеноУправлениеСеансами() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупрежденияУправлениеНедоступно(), , , , Отказ);
		Возврат;
	КонецЕсли;
	
	ЭтоАдминистратор = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("Администратор");
	
	НастроитьОтображениеЭлементовФормы();
	
	ЗаполнитьТаблицуСеансов();
	
	Если ЭтоАдминистратор Тогда
		Пользователь = ИмяПользователя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		ИзменитьОтборСтрок();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НомерСеансаПриИзменении(Элемент)
	
	ИзменитьОтборСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	ИзменитьОтборСтрок();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	Если ЗапрещеноУправлениеСеансами() Тогда
		ПоказатьПредупреждение(, ТекстПредупрежденияУправлениеНедоступно());
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуСеансов();	
	
КонецПроцедуры
	
&НаКлиенте
Процедура Отключить(Команда)
	
	Если ЗапрещеноУправлениеСеансами() Тогда
		ПоказатьПредупреждение(, ТекстПредупрежденияУправлениеНедоступно());
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Сеансы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТекущийСеанс Тогда
		ПоказатьПредупреждение(, "Текущий сеанс отключить нельзя.");
		Возврат;
	КонецЕсли;
	
	НомерСеанса = ТекущиеДанные.НомерСеанса;
	
	ПараметрыОповещения = Новый Структура("НомерСеанса", НомерСеанса);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПодтвержденияОтключенияСеанса", ЭтотОбъект, ПараметрыОповещения);
	ТекстВопроса = "Выбранный сеанс будет отключен, а несохраненные данные потеряны. Продолжить?";
	
    ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , 
		КодВозвратаДиалога.Да, "Предупреждение");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСправочнуюИнформацию(Команда)
	
	ОткрытьСправкуВоВнешнемИсточнике();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДобавитьСеанс(Сеанс, ПредставлениеТипаКлиента, СписокВыбора, ТекущийНомерСеанса)
	
	НовыйСеанс = Сеансы.Добавить();
	НовыйСеанс.НомерСеанса = Сеанс.НомерСеанса;
	НовыйСеанс.Клиент = ПредставлениеТипаКлиента;
	НовыйСеанс.Пользователь = Сеанс.UserName;
	
	Если Сеанс.НомерСеанса = ТекущийНомерСеанса Тогда
		НовыйСеанс.ТекущийСеанс = Истина;
		НовыйСеанс.Клиент = СтрШаблон("%1 (текущий сеанс)", ПредставлениеТипаКлиента);
	КонецЕсли;
	
	Если СписокВыбора.НайтиПоЗначению(Сеанс.UserName) = Неопределено Тогда
		СписокВыбора.Добавить(Сеанс.UserName);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтборСтрок()
	
	ЗначенияОтбора = Новый Соответствие;
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		ЗначенияОтбора.Вставить("Пользователь", Пользователь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерСеанса) Тогда
		ЗначенияОтбора.Вставить("НомерСеанса", НомерСеанса);
	КонецЕсли;
	
	Если ЗначенияОтбора.Количество() > 0 Тогда
		СтруктураОтбора = Новый Структура;
		
		Для Каждого ЭлементСоответствия Из ЗначенияОтбора Цикл
			СтруктураОтбора.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
		КонецЦикла;
		
		ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	Иначе
		ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.Сеансы.ОтборСтрок = ОтборСтрок;
	
КонецПроцедуры

&НаСервере
Функция ИмяСобытия()

	Возврат "Обработка.ОтключениеСеансов";	

КонецФункции

&НаСервере
Процедура ЗакончитьЗамерВремени(Знач ВремяНачала, Знач НомерСеанса)

	Если НомерСеанса = Неопределено Тогда
		КлючеваяОперация = "Обработка.ОтключениеСеансов.ЗаполнитьСеансы";
	Иначе
		КлючеваяОперация = "Обработка.ОтключениеСеансов.ОтключитьСеанс";
	КонецЕсли;
	
    ИнтеграцияДополнительныхПодсистем.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСеансов()
	
	Сеансы.Очистить();
	ОбработатьСеансы();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапрещеноУправлениеСеансами()
	
	Возврат Константы.ЗапретитьУправлениеСеансами.Получить();
	 
КонецФункции

&НаСервере
Процедура НастроитьОтображениеЭлементовФормы()
	
	Элементы.ГруппаДляАдминистраторов.Видимость = ЭтоАдминистратор;
	Элементы.СеансыПользователь.Видимость = ЭтоАдминистратор;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьСеансы(НомерСеанса = Неопределено)
	
	ВремяНачала = ИнтеграцияДополнительныхПодсистем.НачатьЗамерВремени();	
			
	Обработка = Обработки.АдминистрированиеИнформационнойБазы.Создать();
	База = Обработка.ПолучитьБазу();   
	
	Если База = Неопределено Тогда
		ЗакончитьЗамерВремени(ВремяНачала, НомерСеанса);
		Возврат Ложь;
	КонецЕсли;
	
	СписокСеансы = База.ПолучитьСеансы(); 
	
	СписокВыбора = Элементы.Пользователь.СписокВыбора;
	СписокВыбора.Очистить();   
	Сеансы.Очистить();
	
	ТекущийПользовательСистемы = ИмяПользователя();
	ТекущийНомерСеанса = НомерСеансаИнформационнойБазы();
	
	ВидыКлиентов = ОтключаемыеВидыКлиентов();
	
	Для Каждого Сеанс Из СписокСеансы Цикл
		Если Сеанс.UserName = ТекущийПользовательСистемы ИЛИ ЭтоАдминистратор Тогда
			ПредставлениеТипаКлиента = ВидыКлиентов.Получить(Сеанс.ИмяПриложения);
			
			Если ПредставлениеТипаКлиента <> Неопределено Тогда
				Если НомерСеанса <> Сеанс.НомерСеанса Тогда
					ДобавитьСеанс(Сеанс, ПредставлениеТипаКлиента, СписокВыбора, ТекущийНомерСеанса);	
				Иначе    
					Попытка
						Сеанс.ЗавершитьСеанс();  
						СеансОтключен = Истина;
					Исключение             
						Ошибка = СтрШаблон("При удалении сеанса ошибка: %1", ОписаниеОшибки());
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка);
						ДобавитьСеанс(Сеанс, ПредставлениеТипаКлиента, СписокВыбора, ТекущийНомерСеанса);
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	СписокВыбора.СортироватьПоЗначению();	
	Сеансы.Сортировать("НомерСеанса Возр");
	ЗакончитьЗамерВремени(ВремяНачала, НомерСеанса);
	
	Возврат СеансОтключен;
	
КонецФункции

&НаСервере
Функция ОтключаемыеВидыКлиентов()

	ВидыКлиентов = Новый Соответствие;
	ВидыКлиентов.Вставить("WebClient", "Веб-клиент");
	ВидыКлиентов.Вставить("1CV8C", "Тонкий клиент");

	Если ЭтоАдминистратор Тогда
		ВидыКлиентов.Вставить("Designer", "Конфигуратор");
		ВидыКлиентов.Вставить("1CV8", "Толстый клиент");
	КонецЕсли;

	Возврат ВидыКлиентов;

КонецФункции

&НаСервере
Функция ОтключитьСеанс(Знач НомерСеанса)
	
	СеансОтключен = ОбработатьСеансы(НомерСеанса);
	Возврат СеансОтключен;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьСправкуВоВнешнемИсточнике()
	
	ПерейтиПоНавигационнойСсылке(
		ОбщегоНазначенияВызовСервера.ПолучитьКонстанту("КорневойURL") + "/docs/common/my-active-sessions/");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСвойстваСоединения()
	
    СтрокаСоединения = СтрокаСоединенияИнформационнойБазы(); 
	
    // Проверка того, что текущая база работает в клиент-серверном режиме  
    ИмяСервера = НСтр(СтрокаСоединения, "Srvr");  
    ИмяБазы = НСтр(СтрокаСоединения, "Ref");  

	Если ПустаяСтрока(ИмяСервера) ИЛИ ПустаяСтрока(ИмяБазы) Тогда 
		ТекстОшибки = "Не удалось получить свойства соединения.";
        ЗаписьЖурналаРегистрации(ИмяСобытия(), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);          
        Возврат Неопределено;  
    КонецЕсли;  

    СвойстваСоединения = Новый Структура;  
    СвойстваСоединения.Вставить("ИмяСервера", "");  
    СвойстваСоединения.Вставить("ИмяБазы", "");  
	СвойстваСоединения.Вставить("ПортКластера", 1541);
	
    // Обработка варианта, когда используется несколько серверов. В этом случае  
    // достаточно взять первый сервер.  
    СписокСерверов = СтрРазделить(ИмяСервера, ",");  
    ИмяСервера = СписокСерверов[0];

    СвойстваСоединения.ИмяСервера = ИмяСервера;  
    СвойстваСоединения.ИмяБазы = СокрЛП(ИмяБазы);  

    Возврат СвойстваСоединения;  

КонецФункции

&НаКлиенте
Процедура ПослеПодтвержденияОтключенияСеанса(Результат, Параметры) Экспорт
 
	Если Результат = КодВозвратаДиалога.Да Тогда
		СеансОтключен = ОтключитьСеанс(Параметры.НомерСеанса);
		
		Если НЕ СеансОтключен Тогда    
			Почта = ОбщегоНазначенияВызовСервера.ПолучитьПочтуТехПоддержки();
			Текст = СтрШаблон("Не удалось отключить сеанс, обратитесь в техническую поддержку на почту %1", Почта);
			ПоказатьПредупреждение(, Текст);
		КонецЕсли;
	КонецЕсли;
 
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПредупрежденияУправлениеНедоступно()
	
	Почта = ОбщегоНазначенияВызовСервера.ПолучитьПочтуТехПоддержки();   
	
	Возврат СтрШаблон("Управление сеансами недоступно, обратитесь в техническую поддержку на почту %1", Почта);
	
КонецФункции

#КонецОбласти
