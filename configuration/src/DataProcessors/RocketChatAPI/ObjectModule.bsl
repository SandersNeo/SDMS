///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

Перем НастройкиПодключения;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Отправляет сообщение в RocketChat в указанный канал.
//
// Параметры:
//  ТекстСообщения - Строка - текст сообщения, который будет отправлен.
//  Канал          - Строка - имя канала в Rocket.Chat. Указывается без символа "решетка".
//                   Если не указан, используется кана "1c-web-client-tech".
//
Процедура ОтправитьСообщение(Знач ТекстСообщения, Знач Канал = "1c-web-client-tech") Экспорт
		
	HTTPСоединение = ПолучитьHTTPСоединение(); 
	Если HTTPСоединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовкиЗапроса = Новый Соответствие;
	ЗаголовкиЗапроса.Вставить("Content-type", "application/json");
	
	Данные = ПолучитьДанныеДляАвторизации();
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	РезультатАвторизации = ВыполнитьАвторизацию(HTTPСоединение, ЗаголовкиЗапроса, Данные);
	
	Если РезультатАвторизации.Успешно Тогда
		ДанныеСервера = РезультатАвторизации.Данные;
		
		Если ДанныеСервера.status = "success" Тогда
			ЗаголовкиЗапроса.Вставить("X-Auth-Token", ДанныеСервера.data.authToken);
			ЗаголовкиЗапроса.Вставить("X-User-Id", ДанныеСервера.data.userId); 
			
			// Имя канала указывается с символом "решетки"
			Канал = "#" + Канал;
			
			JSONЗапрос = ПолучитьТелоЗапроса(Канал, ТекстСообщения);
			
			HTTPЗапрос = Новый HTTPЗапрос("/api/v1/chat.postMessage", ЗаголовкиЗапроса);
			HTTPЗапрос.УстановитьТелоИзСтроки(JSONЗапрос);
			
			Попытка
				HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
			Исключение
				Комментарий = СтрШаблон("Не удалось отправить сообщение.
					|
					|Текст сообщения: %1
					|Ошибка: %2", ТекстСообщения, ОписаниеОшибки());
				
				ЗаписатьСобытие(УровеньЖурналаРегистрации.Ошибка, Комментарий, "ОтправитьСообщение");
			КонецПопытки;
			
			ЗакрытьАвторизацию(HTTPСоединение, ЗаголовкиЗапроса);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Отправляет сообщения пользователям RocketChat
//
// Параметры:
//  ТаблицаСообщений - ТаблицаЗначений	 - таблица сообщений и получателей
//		* Получатель	 - Строка	 - имя пользователя RocketChat вместе с префиксом "@"
//		* ТестСообщения	 - Строка	 - текст сообщения
//
Процедура ОтправитьСообщенияПользователям(Знач ТаблицаСообщений) Экспорт
	
	ПодстрокаЗаменыДляВебКлиента = WebОкружениеВызовСервера.АдресПубликацииИнформационнойБазы();
	
	// Получение соединения
	HTTPСоединение = ПолучитьHTTPСоединение(); 
	Если HTTPСоединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовкиЗапроса = Новый Соответствие;
	ЗаголовкиЗапроса.Вставить("Content-type", "application/json");
	
	ДанныеДляАвторизации = ПолучитьДанныеДляАвторизации();
	Если ДанныеДляАвторизации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатАвторизации = ВыполнитьАвторизацию(HTTPСоединение, ЗаголовкиЗапроса, ДанныеДляАвторизации);
	
	Если РезультатАвторизации.Успешно Тогда
		ДанныеСервера = РезультатАвторизации.Данные;
		
		Если ДанныеСервера.status = "success" Тогда
			ЗаголовкиЗапроса.Вставить("X-Auth-Token", ДанныеСервера.data.authToken);
			ЗаголовкиЗапроса.Вставить("X-User-Id", ДанныеСервера.data.userId);
			
			Для Каждого СтрокаТаблицы Из ТаблицаСообщений Цикл
				ТекстСообщения = СтрЗаменить(СтрокаТаблицы.ТекстСообщения, "<!-- sdms_link_prefix -->", ПодстрокаЗаменыДляВебКлиента);
				JSONЗапрос = ПолучитьТелоЗапроса(СтрокаТаблицы.Получатель, ТекстСообщения);
				
				HTTPЗапрос = Новый HTTPЗапрос("/api/v1/chat.postMessage", ЗаголовкиЗапроса);
				HTTPЗапрос.УстановитьТелоИзСтроки(JSONЗапрос);
				
				Попытка
					HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
				Исключение
					Комментарий = СтрШаблон("Не удалось отправить сообщение.
						|
						|Текст сообщения: %1
						|Ошибка: %2", ТекстСообщения, ОписаниеОшибки());
					
					ЗаписатьСобытие(УровеньЖурналаРегистрации.Ошибка, Комментарий, "ОтправитьСообщенияПользователям");
				КонецПопытки;
			КонецЦикла;
			
			ЗакрытьАвторизацию(HTTPСоединение, ЗаголовкиЗапроса);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьIDПользователя(Знач Почта) Экспорт
	
	Результат = Новый Структура("Успешно, Сообщение, Данные", Истина, "", Новый Структура);
	
	HTTPСоединение = ПолучитьHTTPСоединение(); 
	Если HTTPСоединение = Неопределено Тогда 
		Результат.Успешно = Ложь;
		Результат.Сообщение = "Не удалось установить соединение с Rocket.Chat";
		Возврат Результат;
	КонецЕсли;
	
	ЗаголовкиЗапроса = ПолучитьЗаголовкиАвторизацииАдминистратора();
	
	Если ЗаголовкиЗапроса <> Неопределено Тогда
		ЗаголовкиЗапроса.Вставить("Content-type", "application/json");
		
		ТекстЗапроса = СтрШаблон("/api/v1/users.list?query={""emails.address"":{""$regex"":""^%1$"",""$options"":""i""}}&fields={""username"":1}", Почта);
		HTTPЗапрос = Новый HTTPЗапрос(ТекстЗапроса, ЗаголовкиЗапроса);
		
		Попытка
			HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
		Исключение
			Результат.Успешно = Ложь;
			Результат.Сообщение = "Не удалось авторизоваться на сервере Rocket.Chat по причине:" + ОписаниеОшибки();
		КонецПопытки;
		
		Если Результат.Успешно И HTTPОтвет.КодСостояния <> 200 Тогда
			Результат.Успешно = Ложь;
			Результат.Сообщение = "Не удалось авторизоваться на сервере Rocket.Chat. Код ответа: " + Строка(HTTPОтвет.КодСостояния);
		КонецЕсли;
		
		Если Результат.Успешно Тогда
			Попытка
				СтрокаJSON = HTTPОтвет.ПолучитьТелоКакСтроку();
				Данные = ОбщегоНазначения.ПрочитатьСодержимоеJSON(СтрокаJSON);
			Исключение
				Результат.Успешно = Ложь;
				Результат.Сообщение = "Не удалось прочитать JSON.
				|СтрокаJSON: " + СтрокаJSON;
			КонецПопытки;
			
			Если Результат.Успешно И Данные.success = Истина Тогда
				Если Данные.count = 1 Тогда
					Результат.Данные =  Новый Структура("Адрес, Идентификатор", Данные.users[0].username, "");
				КонецЕсли;
			ИначеЕсли Результат.Успешно Тогда
				Результат.Успешно = Ложь;
				Результат.Сообщение = "Не удалось получить данные по причине: " + Данные.error;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Результат.Успешно = Ложь;
		Результат.Сообщение = "Не удалось получить из безопасного хранилища параметры подключения к серверу Rocket.Chat";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьИдентификаторыПользователейSDMS(ПочтаПользователь) Экспорт
	
	HTTPСоединение = ПолучитьHTTPСоединение(); 
	Если HTTPСоединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовкиЗапроса = ПолучитьЗаголовкиАвторизацииАдминистратора();
	
	Если ЗаголовкиЗапроса <> Неопределено Тогда
		ЗаголовкиЗапроса.Вставить("Content-type", "application/json");
		
		ВыгруженыВсеЗаписи = Ложь;
		Количество = 500;
		Сдвиг = 0;
		КоличествоИзмененных = 0;
		КоличествоНеудачныхПопыток = 0;
		
		Пока НЕ ВыгруженыВсеЗаписи Цикл
			Успешно = Истина;
			АдресРесурса = СтрШаблон("/api/v1/users.list?count=%1&offset=%2&query={""username"":{""$regex"":"".""},""type"":""user""}&fields={""username"":1,""emails"":1}", Формат(Количество, "ЧГ=0"), Формат(Сдвиг, "ЧГ=0"));
			HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, ЗаголовкиЗапроса);
			
			Попытка
				HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
			Исключение
				Успешно = Ложь;
				ЗаписатьСобытие(УровеньЖурналаРегистрации.Ошибка,
					"Не удалось авторизоваться на сервере Rocket.Chat по причине:" + ОписаниеОшибки(), "ОбновитьИдентификаторыПользователейSDMS");
				КоличествоНеудачныхПопыток = КоличествоНеудачныхПопыток + 1;
			КонецПопытки;
			
			Если Успешно И HTTPОтвет.КодСостояния <> 200 Тогда
				Успешно = Ложь;
				ЗаписатьСобытие(УровеньЖурналаРегистрации.Ошибка,
					"Не удалось авторизоваться на сервере Rocket.Chat. Код ответа: " + Строка(HTTPОтвет.КодСостояния), "ОбновитьИдентификаторыПользователейSDMS");
				КоличествоНеудачныхПопыток = КоличествоНеудачныхПопыток + 1;
			КонецЕсли;
			
			Если Успешно Тогда
				Попытка
					СтрокаJSON = HTTPОтвет.ПолучитьТелоКакСтроку();
					Данные = ОбщегоНазначения.ПрочитатьСодержимоеJSON(СтрокаJSON);
				Исключение
					Успешно = Ложь;
					ЗаписатьСобытие(УровеньЖурналаРегистрации.Ошибка,
						"Не удалось прочитать JSON.
						|СтрокаJSON: " + СтрокаJSON, "ОбновитьИдентификаторыПользователейSDMS");
					КоличествоНеудачныхПопыток = КоличествоНеудачныхПопыток + 1;
				КонецПопытки;
				
				Если Успешно И Данные.success = Истина Тогда
					Сдвиг = Сдвиг + Количество;
					
					Для Каждого Пользователь Из Данные.users Цикл
						АдресПочты = НРег(Пользователь.emails[0].address);
						Адрес = СтрШаблон("@%1", Пользователь.username);
							
						ПользовательSDMS = ПочтаПользователь.Получить(АдресПочты);
						
						Если ПользовательSDMS <> Неопределено И ПользовательSDMS.Адрес <> Адрес Тогда
							РегистрыСведений.АдресаПолучателей.Добавить(ПользовательSDMS.Ссылка, 
								Справочники.Мессенджеры.RocketChat, Адрес, "");
							КоличествоИзмененных = КоличествоИзмененных + 1;
						КонецЕсли;
					КонецЦикла;
					
					ВыгруженыВсеЗаписи = (Сдвиг >= Данные.total);
				ИначеЕсли Успешно Тогда
					ЗаписатьСобытие(УровеньЖурналаРегистрации.Ошибка,
						"Не удалось получить данные по причине: " + Данные.error, "ОбновитьИдентификаторыПользователейSDMS");
					КоличествоНеудачныхПопыток = КоличествоНеудачныхПопыток + 1;
				КонецЕсли;
			КонецЕсли;
			
			Если КоличествоНеудачныхПопыток = 3 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ВыгруженыВсеЗаписи Тогда
			ЗаписатьСобытие(УровеньЖурналаРегистрации.Информация,
				"Успешное завершение задания. RocketChatID пользователей изменено: " + КоличествоИзмененных,
				"ОбновитьИдентификаторыПользователейSDMS");
		Иначе
			ЗаписатьСобытие(УровеньЖурналаРегистрации.Информация,
				"Выполнение задания прервано. RocketChatID пользователей изменено: " + КоличествоИзмененных,
				"ОбновитьИдентификаторыПользователейSDMS");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет попытку авторизации на сервере RocketChat и возвращает токены
//
// Параметры:
//  HTTPСоединение	 - HTTPСоединение	 - соединение, которое будет использовано для отправки запроса
//  ЗаголовкиЗапроса - Соответствие	 - заголовки запроса
//  Данные			 - Структура	 - авторизационные данные
// 
// Возвращаемое значение:
//   - Структура
//		* Успешно	 - Булево	 - признак успешности авторизации
//		* Данные	 - Структура	 - данные тела ответа
//
Функция ВыполнитьАвторизацию(Знач HTTPСоединение, Знач ЗаголовкиЗапроса, Знач Данные)
	
	Результат = Новый Структура("Успешно, Данные", Истина, Неопределено);
	
	// Подключение к серверу Rocket.Chat и попытка авторизации
	JSONЗапрос = СтрШаблон("{""username"": ""%1"", ""password"": ""%2""}",
		Данные.Пользователь, Данные.Пароль);
	
	HTTPЗапрос = Новый HTTPЗапрос("/api/v1/login", ЗаголовкиЗапроса);
	HTTPЗапрос.УстановитьТелоИзСтроки(JSONЗапрос);
	
	Попытка
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос); 
	Исключение
		Результат.Успешно = Ложь;
		
		ЗаписатьСобытие(УровеньЖурналаРегистрации.Ошибка, 
			"Не удалось авторизоваться на сервере Rocket.Chat по причине:" + ОписаниеОшибки());
	КонецПопытки;
	
	// Если не удалось авторизоваться, алгоритм завершается
	Если Результат.Успешно И HTTPОтвет.КодСостояния <> 200 Тогда
		Результат.Успешно = Ложь;
		
		ЗаписатьСобытие(УровеньЖурналаРегистрации.Ошибка, 
			"Не удалось авторизоваться на сервере Rocket.Chat. Код ответа: " + Строка(HTTPОтвет.КодСостояния));
	КонецЕсли;
	
	Если Результат.Успешно Тогда
		Результат.Данные = ОбщегоНазначения.ПрочитатьСодержимоеJSON(HTTPОтвет.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Завершает авторизованную сессию
//
// Параметры:
//  HTTPСоединение	 - HTTPСоединение	 - соединение для отправки запроса
//  ЗаголовкиЗапроса - Соответствие	 - заголовки запроса
//
Процедура ЗакрытьАвторизацию(Знач HTTPСоединение, Знач ЗаголовкиЗапроса)
	
	// Отключение от сервера Rocket.Chat
	HTTPЗапрос = Новый HTTPЗапрос("/api/v1/logout", ЗаголовкиЗапроса);
	
	Попытка
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ЗаписатьСобытие(УровеньЖурналаРегистрации.Ошибка, 
			"Не удалось закрыть авторизацию на сервере Rocket.Chat по причине:" + ОписаниеОшибки());			
	КонецПопытки;
	
КонецПроцедуры

// Добавляет информацию в журнал регистрации.
//
// Параметры:
//  Уровень     - УровеньЖурналаРегистрации - тип события.
//  Комментарий - Строка - комментарий события.
//
Процедура ЗаписатьСобытие(Знач Уровень, Знач Комментарий, Знач ИмяМетода = Неопределено)
	
	ИмяМетода = ?(ИмяМетода = Неопределено, "Обработка.RocketChatAPI", СтрШаблон("Обработка.RocketChatAPI.%1", ИмяМетода));
	ЗаписьЖурналаРегистрации(ИмяМетода, Уровень, , , Комментарий);
	
КонецПроцедуры

// Возвращает соединение для работы с RocketChat
// 
// Возвращаемое значение:
//   - HTTPСоединение
//
Функция ПолучитьHTTPСоединение()

	СоединениеHTTP = Неопределено;
	
	Если ЗначениеЗаполнено(НастройкиПодключения.АдресСервера) Тогда
		СоединениеHTTP = Новый HTTPСоединение(НастройкиПодключения.АдресСервера, НастройкиПодключения.Порт, , , , 
												НастройкиПодключения.Таймаут, НастройкиПодключения.ЗащищенноеСоединение);
	Иначе
		Комментарий = "Не удалось определить адрес сервера мессенджера Rocket.Chat.";
		ЗаписатьСобытие(УровеньЖурналаРегистрации.Ошибка, Комментарий, "ПолучитьHTTPСоединение");
	КонецЕсли;
	
	Возврат СоединениеHTTP;
	
КонецФункции

// Получает авторизационные данные из безопасного хранилища
// 
// Возвращаемое значение:
//   - Структура
//
Функция ПолучитьДанныеДляАвторизации()
	
	// Получение данных подключения из информационной базы
	УстановитьПривилегированныйРежим(Истина);
	
	Данные = РегистрыСведений.БезопасноеХранилищеДанных.ПолучитьДанные(
		Перечисления.НазначенияДанныхБезопасногоХранилища.НастройкиПодключенияКRocketChat);
		
	УстановитьПривилегированныйРежим(Ложь);
		
	// Если не удалось получить параметры подключения, выполняется прерывание выполнения
	Если Данные = Неопределено Тогда
		ЗаписатьСобытие(УровеньЖурналаРегистрации.Ошибка, 
			"Не удалось получить из безопасного хранилища параметры подключения к серверу Rocket.Chat");
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

// Получает заголовки запроса из безопасного хранилища для авторизации от администратора
// 
// Возвращаемое значение:
//   - Соответствие
//
Функция ПолучитьЗаголовкиАвторизацииАдминистратора()
	
	// Получение данных подключения из информационной базы
	УстановитьПривилегированныйРежим(Истина);
	
	Данные = РегистрыСведений.БезопасноеХранилищеДанных.ПолучитьДанные(
		Перечисления.НазначенияДанныхБезопасногоХранилища.ЗаголовкиЗапросаRocketChatАдминистратора);
		
	УстановитьПривилегированныйРежим(Ложь);
		
	// Если не удалось получить параметры подключения, выполняется прерывание выполнения
	Если Данные = Неопределено Тогда
		ЗаписатьСобытие(УровеньЖурналаРегистрации.Ошибка,
			"Не удалось получить из безопасного хранилища заголовки авторизации к серверу Rocket.Chat");
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

// Формирует JSON-строку тела запроса
//
// Параметры:
//  Получатель		 - Строка	 - имя пользователя RocketChat с префиксом "@"
//  ТекстСообщения	 - Строка	 - текст сообщения
// 
// Возвращаемое значение:
//   - Строка
//
Функция ПолучитьТелоЗапроса(Знач Получатель, Знач ТекстСообщения)
	
	ТекстСообщения = ОбщегоНазначения.ЭкранироватьСимволыJSON(ТекстСообщения);
	
	Возврат СтрШаблон("{""channel"": ""%1"", ""text"": ""%2""}", Получатель, ТекстСообщения);
	
КонецФункции

#КонецОбласти

#Область Инициализация

НастройкиПодключения = Справочники.Мессенджеры.НастройкиПодключения(Справочники.Мессенджеры.RocketChat);
	
#КонецОбласти
