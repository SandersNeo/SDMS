///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура ПолучитьДанныеСписок_ТекущиеРазработкиПоЗаявкам(НастройкиСписка, АдресРезультата, УИДЗамера) Экспорт
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ДанныеДерева = СформироватьСписокТекущиеРазработкиПоЗаявкам(НастройкиСписка);
	ИнструментыСервер.ОповеститьИнструментОбОбновлении(ДанныеДерева, АдресРезультата, УИДЗамера);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремениТехнологический("Обработки.ПулНаТестирование.ПолучитьДанныеПулНаТестирование.ВыполнениеФонового", ВремяНачала, , Строка(УИДЗамера));
	
КонецПроцедуры

// Дополнительно обрабатывает строки дерева, при универсальной обработке
//
// Параметры:
//  НоваяСтрока			 - СтрокаДереваЗначений	 - текущая строка дерева
//  ТекущаяВыборка		 - ВыборкаИзРезультатаЗапроса	 - выбока данных
//  ДополнительныеДанные - Структура					 - дополнительные данные
//  Уровень				 - Число						 - уровень иерархии
//
Процедура ДополнительнаяОбработкаСтрокиДерева(НоваяСтрока, ТекущаяВыборка, ДополнительныеДанные, Уровень) Экспорт
	
	Если Уровень = "Детали" Тогда
		НоваяСтрока.ТрудозатратыОценкаФакт = СтрШаблон("%1 / %2", ТекущаяВыборка.ТрудозатратыОценка, ТекущаяВыборка.ТрудозатратыФакт);
		Дельта = 86400;      
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		ДатаПубликации = ТекущаяВыборка.ДатаПубликации;
		
		Если НачалоДня(ДатаПубликации) = НачалоДня(ТекущаяДатаСеанса) Тогда
			ДатаПубликации = "Сегодня";
		ИначеЕсли НачалоДня(ДатаПубликации) = НачалоДня(ТекущаяДатаСеанса - Дельта) Тогда
			ДатаПубликации = "Вчера";
		Иначе
			ДатаПубликации = Формат(ДатаПубликации, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаПубликации) Тогда
			НоваяСтрока.ПоследняяПубликация = ?(ТекущаяВыборка.ВсеЗадачиОпубликованы, "Все", "Часть") +
				СтрШаблон(" [%1]", ДатаПубликации);
		КонецЕсли;
		
		Если СтрНайти(ТекущаяВыборка.Назначена, "На мне") <> 0 Тогда
			НоваяСтрока.НазначенаНаМеня = БиблиотекаКартинок.Пользователь;
		КонецЕсли; 
	КонецЕсли;    
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 
Функция СформироватьСписокТекущиеРазработкиПоЗаявкам(Знач НастройкиСписка)
	
	КолонкиИнструмента = Новый Массив;
	КолонкиИнструмента.Добавить("Направление");
	КолонкиИнструмента.Добавить("Система");
	КолонкиИнструмента.Добавить("Заявка");
	КолонкиИнструмента.Добавить("Моя");
	КолонкиИнструмента.Добавить("Назначена");
	КолонкиИнструмента.Добавить("СтартРазработки");
	КолонкиИнструмента.Добавить("ТрудозатратыОценкаФакт");
	КолонкиИнструмента.Добавить("ПоследняяПубликация");
	КолонкиИнструмента.Добавить("Порядок");
	КолонкиИнструмента.Добавить("Наименование");
	КолонкиИнструмента.Добавить("ИндексКартинки");
	КолонкиИнструмента.Добавить("UID");
	КолонкиИнструмента.Добавить("ЭтоГруппа");
	КолонкиИнструмента.Добавить("НазначенаНаМеня");
	КолонкиИнструмента.Добавить("НаправлениеПредставление");
	КолонкиИнструмента.Добавить("СистемаПредставление");
	КолонкиИнструмента.Добавить("ПорядокСтатуса");
		
	ДеревоЗначений = Новый ДеревоЗначений;
	Для Каждого Колонка Из КолонкиИнструмента Цикл
		ДеревоЗначений.Колонки.Добавить(Колонка);
	КонецЦикла;
	
	ДоступныеНаправления = Новый Массив;
	Для Каждого ЭлементКоллекции Из НастройкиСписка.ДоступныеНаправления Цикл
		Если ЭлементКоллекции.Значение.Использование = Истина Тогда
			ДоступныеНаправления.Добавить(ЭлементКоллекции.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	ДоступныеСистемы = Новый Массив;
	Для Каждого ЭлементКоллекции Из НастройкиСписка.ДоступныеСистемы Цикл
		Если ЭлементКоллекции.Значение.Использование = Истина Тогда
			ДоступныеСистемы.Добавить(ЭлементКоллекции.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	ДоступныеГруппыЗаказчиков = Новый Массив;
	Для Каждого ЭлементКоллекции Из НастройкиСписка.ДоступныеГруппыЗаказчиков Цикл
		Если ЭлементКоллекции.Значение.Использование = Истина Тогда
			ДоступныеГруппыЗаказчиков.Добавить(ЭлементКоллекции.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	ДоступныеПродукты = Новый Массив;
	Для Каждого ЭлементКоллекции Из НастройкиСписка.ДоступныеПродукты Цикл
		Если ЭлементКоллекции.Значение.Использование = Истина Тогда
			ДоступныеПродукты.Добавить(ЭлементКоллекции.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =   	
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ЗаявкаНаРазработку.Ссылка КАК Заявка,
	|	""["" + ЗаявкаНаРазработку.Номер + ""] "" + ЗаявкаНаРазработку.Наименование КАК ЗаявкаПредставление,
	|	ЗаявкаНаРазработку.Направление КАК Направление,
	|	ЗаявкаНаРазработкуСистемыРазработки.Система КАК Система,
	|	ВЫБОР ЗаявкаНаРазработку.Автор
	|		КОГДА &Пользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Моя,
	|	ЕСТЬNULL(СтатусыОбъектов.Порядок, 0) КАК ПорядокСтатуса,
	|	ЕСТЬNULL(СтатусыОбъектов.ИндексКартинки, 0) КАК ИндексКартинки,
	|	ВЫБОР
	|		КОГДА НЕ ОчередьЗаявокПродуктСистема.Порядок ЕСТЬ NULL
	|			ТОГДА ЕСТЬNULL(ОчередьЗаявокПродуктСистема.Порядок, 0)
	|		КОГДА НЕ ОчередьЗаявокПродукт.Порядок ЕСТЬ NULL
	|			ТОГДА ЕСТЬNULL(ОчередьЗаявокПродукт.Порядок, 0)
	|		ИНАЧЕ ЕСТЬNULL(ОчередьЗаявок.Порядок, 0)
	|	КОНЕЦ КАК ПорядокВОчереди
	|ПОМЕСТИТЬ ОтобранныеЗаявки
	|ИЗ
	|	Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ЗаявкаНаРазработкуСистемыРазработки
	|		ПО ЗаявкаНаРазработку.Ссылка = ЗаявкаНаРазработкуСистемыРазработки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|		ПО ЗаявкаНаРазработку.Ссылка = СтатусыЗаявокПоСистемам.Заявка
	|			И (ЗаявкаНаРазработкуСистемыРазработки.Система = СтатусыЗаявокПоСистемам.Система)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (СтатусыЗаявокПоСистемам.Статус = СтатусыОбъектов.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиЗаявок КАК ОчередьЗаявок
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|			ПО (КлючОчереди.Ссылка = ОчередьЗаявок.КлючОчередиОбъекта)
	|				И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.НаправлениеСистемаГруппаЗаказчиков))
	|		ПО ЗаявкаНаРазработку.Ссылка = ОчередьЗаявок.Заявка
	|			И (ЗаявкаНаРазработкуСистемыРазработки.Система = КлючОчереди.Система)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Продукты КАК Продукты
	|		ПО (Продукты.Ссылка = ЗаявкаНаРазработку.Продукт)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиЗаявок КАК ОчередьЗаявокПродукт
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчередиПродукт
	|			ПО (КлючОчередиПродукт.Ссылка = ОчередьЗаявокПродукт.КлючОчередиОбъекта)
	|				И (КлючОчередиПродукт.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Продукт))
	|		ПО ЗаявкаНаРазработку.Ссылка = ОчередьЗаявокПродукт.Заявка
	|			И (ЕСТЬNULL(Продукты.Ссылка, НЕОПРЕДЕЛЕНО) = КлючОчередиПродукт.Продукт)
	|			И (ЕСТЬNULL(Продукты.ВидОчереди, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.Продукт))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиЗаявок КАК ОчередьЗаявокПродуктСистема
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчередиПродуктСистема
	|			ПО (КлючОчередиПродуктСистема.Ссылка = ОчередьЗаявокПродуктСистема.КлючОчередиОбъекта)
	|				И (КлючОчередиПродуктСистема.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ПродуктСистема))
	|		ПО ЗаявкаНаРазработку.Ссылка = ОчередьЗаявокПродуктСистема.Заявка
	|			И (ЕСТЬNULL(Продукты.ВидОчереди, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ПродуктСистема))
	|			И (КлючОчередиПродуктСистема.Система = ЗаявкаНаРазработкуСистемыРазработки.Система)
	|			И (ЕСТЬNULL(Продукты.Ссылка, НЕОПРЕДЕЛЕНО) = КлючОчередиПродуктСистема.Продукт)
	|ГДЕ
	|	ЕСТЬNULL(СтатусыОбъектов.Порядок, 0) >= &ПорядокСтатусаВРеализацию
	|	И ЕСТЬNULL(СтатусыОбъектов.Порядок, 0) <= &ПорядокСтатусаCodeReview
	|	И ВЫБОР
	|			КОГДА &ОтборПоНаправлениям
	|				ТОГДА ЗаявкаНаРазработку.Направление В (&Направления)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ОтборПоСистемам
	|				ТОГДА ЗаявкаНаРазработкуСистемыРазработки.Система В (&Системы)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И (ВЫБОР
	|				КОГДА &ОтборПоЗаказчикам
	|					ТОГДА ЗаявкаНаРазработкуСистемыРазработки.ГруппаЗаказчиков В (&ГруппыЗаказчиков)
	|				ИНАЧЕ НЕ &ОтборПоПродуктам
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА &ОтборПоПродуктам
	|					ТОГДА ЗаявкаНаРазработку.Продукт В (&Продукты)
	|				ИНАЧЕ НЕ &ОтборПоЗаказчикам
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтобранныеЗаявки.Заявка КАК Заявка
	|ПОМЕСТИТЬ ЗаявкиБезПовторов
	|ИЗ
	|	ОтобранныеЗаявки КАК ОтобранныеЗаявки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛичныеДелаСрезПоследних.Сотрудник КАК Пользователь,
	|	ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы) КАК Филиал
	|ПОМЕСТИТЬ ЛичныеДелаФилиалы
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(&ТекущаяДата, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкиБезПовторов.Заявка КАК Заявка,
	|	ДокументЗадача.Ссылка КАК Задача,
	|	ВЫБОР
	|		КОГДА ДокументЗадача.Назначена = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА """"
	|		КОГДА ДокументЗадача.Назначена = &Пользователь
	|			ТОГДА ""На мне""
	|		КОГДА ДокументЗадача.Назначена = ДокументЗадача.Заказчик
	|				ИЛИ РолиПользователейПоНаправлениям.Роль = ЗНАЧЕНИЕ(Справочник.РолиПользователей.Заказчик)
	|			ТОГДА ""Заказчик""
	|		КОГДА Филиалы.ТипФилиала <> ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.НеIT)
	|			ТОГДА ""IT""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Назначена,
	|	ДокументЗадача.ДатаНачалаРазработки КАК ДатаНачалаРазработки,
	|	ЕСТЬNULL(ПланируемыеТрудозатраты.Трудозатраты, 0) КАК ТрудозатратыОценка,
	|	ЕСТЬNULL(ИсторияПубликацииЗадач.ДатаИсторииХранилища, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаПубликации
	|ПОМЕСТИТЬ ОтобранныеЗадачи
	|ИЗ
	|	ЗаявкиБезПовторов КАК ЗаявкиБезПовторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО ЗаявкиБезПовторов.Заявка = ДокументЗадача.ОбъектОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЛичныеДелаФилиалы КАК ЛичныеДелаФилиалы
	|		ПО (ДокументЗадача.Назначена = ЛичныеДелаФилиалы.Пользователь)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО (ЛичныеДелаФилиалы.Филиал = Филиалы.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПубликацииЗадач.СрезПоследних(&ТекущаяДата, ) КАК ИсторияПубликацииЗадач
	|		ПО (ДокументЗадача.Ссылка = ИсторияПубликацииЗадач.Задача)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиПользователейПоНаправлениям КАК РолиПользователейПоНаправлениям
	|		ПО (ДокументЗадача.Назначена = РолиПользователейПоНаправлениям.Пользователь)
	|			И (ДокументЗадача.Направление = РолиПользователейПоНаправлениям.НаправлениеРазработки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
	|		ПО (ДокументЗадача.Ссылка = ПланируемыеТрудозатраты.Объект)
	|			И (ПланируемыеТрудозатраты.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеЗадачи.Задача КАК Задача,
	|	СУММА(ЕСТЬNULL(Трудозатраты.Затрата, 0)) КАК ТрудозатратыФакт
	|ПОМЕСТИТЬ ТрудозатратыПоЗадачам
	|ИЗ
	|	ОтобранныеЗадачи КАК ОтобранныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК Трудозатраты
	|		ПО ОтобранныеЗадачи.Задача = Трудозатраты.Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтобранныеЗадачи.Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеЗадачи.Заявка КАК Заявка,
	|	МИНИМУМ(ОтобранныеЗадачи.ДатаНачалаРазработки) КАК ДатаНачалаРазработки
	|ПОМЕСТИТЬ ДатыНачалаРазработкиЗаявок
	|ИЗ
	|	ОтобранныеЗадачи КАК ОтобранныеЗадачи
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтобранныеЗадачи.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеЗаявки.Заявка КАК Заявка,
	|	ОтобранныеЗаявки.ЗаявкаПредставление КАК ЗаявкаПредставление,
	|	ОтобранныеЗаявки.Направление КАК Направление,
	|	ПРЕДСТАВЛЕНИЕ(ОтобранныеЗаявки.Направление) КАК НаправлениеПредставление,
	|	ОтобранныеЗаявки.Система КАК Система,
	|	ПРЕДСТАВЛЕНИЕ(ОтобранныеЗаявки.Система) КАК СистемаПредставление,
	|	ОтобранныеЗаявки.Моя КАК Моя,
	|	ОтобранныеЗаявки.ПорядокВОчереди КАК ПорядокВОчереди,
	|	ОтобранныеЗаявки.ПорядокСтатуса КАК ПорядокСтатуса,
	|	ОтобранныеЗаявки.ИндексКартинки КАК ИндексКартинки,
	|	ОтобранныеЗадачи.Задача КАК Задача,
	|	ОтобранныеЗадачи.Назначена КАК Назначена,
	|	ОтобранныеЗадачи.ДатаПубликации КАК ДатаПубликации,
	|	ОтобранныеЗадачи.ТрудозатратыОценка КАК ТрудозатратыОценка,
	|	ОтобранныеЗадачи.ДатаНачалаРазработки КАК ДатаНачалаРазработки,
	|	ЕСТЬNULL(ТрудозатратыПоЗадачам.ТрудозатратыФакт, 0) КАК ТрудозатратыФакт
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	ОтобранныеЗаявки КАК ОтобранныеЗаявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтобранныеЗадачи КАК ОтобранныеЗадачи
	|		ПО ОтобранныеЗаявки.Заявка = ОтобранныеЗадачи.Заявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТрудозатратыПоЗадачам КАК ТрудозатратыПоЗадачам
	|		ПО (ОтобранныеЗадачи.Задача = ТрудозатратыПоЗадачам.Задача)";
	#КонецОбласти
	
	ПорядокСтатусаВРеализацию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтатусыОбъектов.ВРеализацию, "Порядок");
	ПорядокСтатусаCodeReview = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтатусыОбъектов.CodeReview, "Порядок");
	
	Запрос.УстановитьПараметр("ПорядокСтатусаВРеализацию", ПорядокСтатусаВРеализацию);
	Запрос.УстановитьПараметр("ПорядокСтатусаCodeReview", ПорядокСтатусаCodeReview); 
	
	Запрос.УстановитьПараметр("ГруппыЗаказчиков", ДоступныеГруппыЗаказчиков);
	Запрос.УстановитьПараметр("Направления", ДоступныеНаправления);
	Запрос.УстановитьПараметр("Системы", ДоступныеСистемы);    
	Запрос.УстановитьПараметр("Продукты", ДоступныеПродукты);    
	Запрос.УстановитьПараметр("ОтборПоЗаказчикам", ДоступныеГруппыЗаказчиков.Количество() > 0);
	Запрос.УстановитьПараметр("ОтборПоНаправлениям", ДоступныеНаправления.Количество() > 0);
	Запрос.УстановитьПараметр("ОтборПоСистемам", ДоступныеСистемы.Количество() > 0);
	Запрос.УстановитьПараметр("ОтборПоПродуктам", ДоступныеПродукты.Количество() > 0);
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());	
	Запрос.Выполнить();
	
	ТаблицаНазначена = ТекущиеРазработкиПоЗаявкам_ПолучитьТаблицаНазначена(Запрос, НастройкиСписка.ФильтрНазначена_ТекущиеРазработки);
	
	Запрос.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	Таблица.Заявка КАК Заявка,
	|	Таблица.Назначена КАК Назначена,
	|	Таблица.ВсеЗадачиОпубликованы КАК ВсеЗадачиОпубликованы
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Заявка КАК Заявка,
	|	Данные.ЗаявкаПредставление КАК Наименование,
	|	Данные.Направление КАК Направление,
	|	Данные.НаправлениеПредставление КАК НаправлениеПредставление,
	|	Данные.Система КАК Система,
	|	Данные.СистемаПредставление КАК СистемаПредставление,
	|	Данные.ПорядокВОчереди КАК ПорядокВОчереди,
	|	Данные.ПорядокСтатуса КАК ПорядокСтатуса,
	|	Данные.ИндексКартинки КАК ИндексКартинки,
	|	СУММА(Данные.ТрудозатратыОценка) КАК ТрудозатратыОценка,
	|	МИНИМУМ(Данные.ДатаНачалаРазработки) КАК ДатаНачалаРазработки,
	|	МАКСИМУМ(Данные.ДатаПубликации) КАК ДатаПубликации,
	|	Максимум(Данные.Моя) КАК Моя,
	|	СУММА(Данные.ТрудозатратыФакт) КАК ТрудозатратыФакт
	|ПОМЕСТИТЬ ГруппированныеДанные
	|ИЗ
	|	Данные КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.Заявка,
	|	Данные.ЗаявкаПредставление,
	|	Данные.Направление,
	|	Данные.НаправлениеПредставление,
	|	Данные.Система,
	|	Данные.СистемаПредставление,
	|	Данные.ПорядокВОчереди,
	|	Данные.ПорядокСтатуса,
	|	Данные.ИндексКартинки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппированныеДанные.Заявка КАК Заявка,
	|	ГруппированныеДанные.Наименование КАК Наименование,
	|	ГруппированныеДанные.Направление КАК Направление,
	|	ГруппированныеДанные.НаправлениеПредставление КАК НаправлениеПредставление,
	|	ГруппированныеДанные.Система КАК Система,
	|	ГруппированныеДанные.СистемаПредставление КАК СистемаПредставление,
	|	ГруппированныеДанные.ПорядокВОчереди КАК Порядок,
	|	ГруппированныеДанные.ПорядокСтатуса КАК ПорядокСтатуса,
	|	ГруппированныеДанные.ИндексКартинки КАК ИндексКартинки,
	|	ГруппированныеДанные.ТрудозатратыОценка КАК ТрудозатратыОценка,
	|	ГруппированныеДанные.ДатаНачалаРазработки КАК СтартРазработки,
	|	ГруппированныеДанные.ДатаПубликации КАК ДатаПубликации,
	|	ГруппированныеДанные.ТрудозатратыФакт КАК ТрудозатратыФакт,
	|	ГруппированныеДанные.Моя КАК Моя,
	|	Таблица.Назначена КАК Назначена,
	|	Таблица.ВсеЗадачиОпубликованы КАК ВсеЗадачиОпубликованы
	|ИЗ
	|	Таблица КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГруппированныеДанные КАК ГруппированныеДанные
	|		ПО Таблица.Заявка = ГруппированныеДанные.Заявка";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Таблица", ТаблицаНазначена);
	Результат = Запрос.Выполнить();
	
	ИсточникДанных = Новый ОписаниеИсточникаДанных(Результат);	
	ИсточникДанных.Колонки.Направление.Измерение = Истина; 
	ИсточникДанных.Колонки.Система.Измерение = Истина;
	ИсточникДанных.Колонки.Заявка.Измерение = Истина;
		
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = ИсточникДанных;
	
	ПостроительЗапроса.Измерения.Очистить();
	ПостроительЗапроса.Измерения.Добавить("Направление");
	ПостроительЗапроса.Измерения.Добавить("Система");
		
	ПостроительЗапроса.Порядок.Добавить("НаправлениеПредставление");  
	ПостроительЗапроса.Порядок.Добавить("СистемаПредставление");  
	ПостроительЗапроса.Порядок.Добавить("Порядок");  
	ПостроительЗапроса.Порядок.Добавить("ПорядокСтатуса", , , НаправлениеСортировки.Убыв);  
	ПостроительЗапроса.Порядок.Добавить("СтартРазработки", , , НаправлениеСортировки.Убыв);  
	
	ПостроительЗапроса.Выполнить();
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("Измерения", ПостроительЗапроса.Измерения); 
	ДополнительныеДанные.Вставить("СтрокиКСортировке", Новый Соответствие); 
	ДополнительныеДанные.Вставить("Объект", Неопределено); 
	ДополнительныеДанные.Вставить("Перезаполнение", Ложь); 
	ДополнительныеДанные.Вставить("ВидДерева", "ТекущиеРазработкиПоЗаявкам");  
	ДополнительныеДанные.Вставить("ИндексКартинки_Группа", Справочники.СтатусыОбъектов.ИндексКартинкиГруппа()); 	
	ДополнительныеДанные.Вставить("ПолеОбъекта", "Заявка"); 	
	ДополнительныеДанные.Вставить("ПолеПредставлениеОбъекта", "Наименование"); 	
		
	УправлениеИнструментамиРазработки.ОбработатьВыборку(ПостроительЗапроса.Результат, ДеревоЗначений, 
		Новый Структура, ДеревоЗначений, 0, ДополнительныеДанные); 
	УправлениеИнструментамиРазработки.ОтсортироватьДерево(ДополнительныеДанные.СтрокиКСортировке, 
		ДеревоЗначений, ПостроительЗапроса.Порядок);
	
	ДанныеДерева = ИнструментыСервер.ПодготовитьДанныеИнструментаДляКлиента(ДеревоЗначений, КолонкиИнструмента);

	Возврат ДанныеДерева;
	
КонецФункции

Функция ТекущиеРазработкиПоЗаявкам_ПолучитьТаблицаНазначена(Запрос, ФильтрНазначена_ТекущиеРазработки)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Данные.Заявка КАК Заявка,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК Назначена,
	|	ЛОЖЬ КАК ВсеЗадачиОпубликованы
	|ИЗ
	|	Данные КАК Данные
	|ГДЕ
	|	ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Заявка КАК Заявка,
	|	Данные.Назначена КАК Назначена,
	|	Данные.ДатаПубликации КАК ДатаПубликации,
	|	Данные.Моя КАК Моя
	|ИЗ
	|	Данные КАК Данные
	|ИТОГИ
	|	МАКСИМУМ(Моя)
	|ПО
	|	Заявка";    
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаНазначена = Результат[0].Выгрузить();
	ВыборкаЗаявки = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗаявки.Следующий() Цикл
		
		ВсеЗадачиОпубликованы = Истина;
		Назначена = "";
		НаМне = Ложь;
		НаЗаказчике = Ложь;
		МояЗадача = ВыборкаЗаявки.Моя;
		
		// Перебираем задачи
		ВыборкаЗадачи = ВыборкаЗаявки.Выбрать();
		
		Пока ВыборкаЗадачи.Следующий() Цикл
			// Формирование значения "Назначена"
			Если СтрНайти(Назначена, ВыборкаЗадачи.Назначена) = 0 Тогда
				Назначена = Назначена + ?(ПустаяСтрока(Назначена), "", " / ") + ВыборкаЗадачи.Назначена;
			КонецЕсли;
			НаМне = (НаМне ИЛИ (ВыборкаЗадачи.Назначена = "На мне"));
			НаЗаказчике = (НаЗаказчике ИЛИ (ВыборкаЗадачи.Назначена = "Заказчик"));
			
			// Определение закрытия всех задач
			Если НЕ ЗначениеЗаполнено(ВыборкаЗадачи.ДатаПубликации) Тогда
				ВсеЗадачиОпубликованы = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если ФильтрНазначена_ТекущиеРазработки = 1 И НЕ НаЗаказчике Тогда
			Продолжить;
		ИначеЕсли ФильтрНазначена_ТекущиеРазработки = 2 И НЕ НаМне Тогда
			Продолжить;
		ИначеЕсли ФильтрНазначена_ТекущиеРазработки = 3 И НЕ МояЗадача Тогда
			Продолжить;
		КонецЕсли;  
		
		НоваяСтрока = ТаблицаНазначена.Добавить();
		НоваяСтрока.Заявка = ВыборкаЗаявки.Заявка;
		НоваяСтрока.Назначена = Назначена;
		НоваяСтрока.ВсеЗадачиОпубликованы = ВсеЗадачиОпубликованы;
	КонецЦикла;
	
	Возврат ТаблицаНазначена;
	
КонецФункции
 

#КонецОбласти
