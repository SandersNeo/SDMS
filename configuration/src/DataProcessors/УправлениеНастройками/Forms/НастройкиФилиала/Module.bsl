///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбъявлениеПеременных

// Хранит имена измененных реквизитов между циклами сохранения
&НаКлиенте
Перем ИменаИзмененныхРеквизитов;

// Хранит дополнительную информацию при перетаскивании элементов
// в дереве настроек видов деятельности услуг
&НаКлиенте
Перем ДополнительныеДанныеПеретаскивания;

// Содержит ссылки на удаляемые команды
&НаКлиенте
Перем УдаляемыеКоманды;  

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Отказ Тогда
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Филиал) Тогда
		Филиал = Параметры.Филиал;
	Иначе
		Филиал = ПараметрыСеанса.Филиал;
	КонецЕсли;
	
	РаботаСНастройками.НастроитьОтображениеПоляФилиал(ЭтотОбъект);
	РаботаСНастройками.СформироватьЭлементыФормы(ЭтотОбъект);
	РаботаСНастройками.ОбновитьНастройкиФилиала(ЭтотОбъект);
	
	Параметры.Свойство("ОткрываемыйРаздел", ОткрываемаяСтраница);
	
	ОбновитьУсловноеОформление();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Мессенджеры.ИмяПредопределенныхДанных КАК Имя,
	|	Мессенджеры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Мессенджеры КАК Мессенджеры";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Данные = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		Данные.Вставить(Выборка.Имя, Выборка.Ссылка);
	КонецЦикла;
	
	Мессенджеры = Новый ФиксированноеСоответствие(Данные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РаботаСНастройкамиКлиент.НастроитьДоступностьЗависимыхЭлементов(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ОткрываемаяСтраница) Тогда
		РаботаСНастройкамиКлиент.ПереключитьсяНаСтраницуНастроек(ЭтотОбъект, ОткрываемаяСтраница);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ТребуетсяСохранение = (ИменаИзмененныхРеквизитов.Количество() > 0);
	Если НЕ ЗавершениеРаботы И ТребуетсяСохранение Тогда
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура("Закрытие", Истина);
		ИмяПроцедуры = "ОбработатьВопросСохраненияНастроекПриЗакрытии";
		ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедуры, ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = "Есть несохраненные изменения. Сохранить?";
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , , "Сохранение настроек");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ИмяСобытияОповещения = РаботаСНастройкамиКлиент.ИмяСобытияОповещения();
	
	Если ИмяСобытия = ИмяСобытияОповещения Тогда
		ОбработатьПереключениеНастроекФилиала(Параметр); 
	
	ИначеЕсли ИмяСобытия = СобытияОповещенияКлиент.ИмяСобытияПометкиУдаленияВидаЗадачи() Тогда
		ЭлементСписка = ТипыЗадач.НайтиПоЗначению(Параметр);
		
		Если ЭлементСписка <> Неопределено Тогда
			ТипыЗадач.Удалить(ЭлементСписка);
		КонецЕсли;
		
	// Из формы команды разработки отправляем событие обновления списка команд.
	ИначеЕсли ИмяСобытия = СобытияОповещенияКлиент.ИмяСобытияОбновленияСпискаКоманд() Тогда
		КомандыРазработчиков = ПолучитьКомандыРазработчиков(Филиал);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте       
Процедура ДеревоРазделовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоРазделов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		НайденнаяСтраница = Элементы.Найти(ТекущиеДанные.Идентификатор);
		Если НайденнаяСтраница <> Неопределено Тогда
			Элементы.ГруппаСтраницыНастроек.ТекущаяСтраница = НайденнаяСтраница;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзмении для всех программно сгенерированных реквизитов
//
// Параметры:
//  Элемент	 - ПолеФормы	 - измененный элемент
//
&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаФормы(Элемент)
	
	ПриИзмененииРеквизитаФормы(Элемент);
	РаботаСНастройкамиКлиент.ПослеИзмененияЭлементаФормы(ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерезаполнитьСписокВыбораТиповЗадач(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	Для Каждого ЭлементСписка Из ТипыЗадач Цикл
		ЗаполнитьЗначенияСвойств(Элемент.СписокВыбора.Добавить(), ЭлементСписка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ШаблоныЗаявокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура("ВыбранныеШаблоны", ЭтотОбъект.ШаблоныЗаявок);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборШаблонов", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ШаблоныОписанияДокументов.Форма.ВыборШаблонов", 
		ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);

КонецПроцедуры	

&НаКлиенте
Процедура РазрабатываемыеСистемыПриИзменении(Элемент)
	
	ПриИзмененииРеквизитаФормы("ИзмененыСвойстваОбъекта");
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваОбъектаПриИзменении(Элемент)
	
	ПриИзмененииРеквизитаФормы("ИзмененыСвойстваОбъекта");
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеФилиалыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные.Филиал = Филиал Тогда
		Отказ = Истина;
		ПоказатьПредупреждение( , "Нельзя выбирать филиал, являющийся владельцем связанных филиалов.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФилиалОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТребуетсяСохранение = (ИменаИзмененныхРеквизитов.Количество() > 0);
	
	СтандартнаяОбработка = Ложь;
	
	Если ТребуетсяСохранение Тогда
		ДополнительныеПараметры = Новый Структура("НовыйФилиал", ВыбранноеЗначение);
		ИмяПроцедуры = "ОбработатьВопросСохраненияНастроекПриСменеФилиала";
		ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедуры, ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = "Есть несохраненные изменения. Сохранить?";
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , , "Сохранение настроек");
	Иначе
		Филиал = ВыбранноеЗначение;
		
		ОбновитьНастройкиФилиала();
		РаботаСНастройкамиКлиент.НастроитьДоступностьЗависимыхЭлементов(ЭтотОбъект);
		РаботаСНастройкамиКлиент.АктуализироватьТекущийВыбранныйРаздел(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФилиалОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФилиалПриИзменении(Элемент)
	
	ОбновитьНастройкиФилиала();
	РаботаСНастройкамиКлиент.НастроитьДоступностьЗависимыхЭлементов(ЭтотОбъект);
	РаботаСНастройкамиКлиент.АктуализироватьТекущийВыбранныйРаздел(ЭтотОбъект);
		
КонецПроцедуры

#Область ВидыДеятельностиУслуг

&НаКлиенте
Процедура ДеревоВидовДеятельностиУслугИспользованиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоВидовДеятельностиУслуг.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		ЧастичноВыбрано = 2;
		Если ТекущиеДанные.Использование = ЧастичноВыбрано Тогда
			ТекущиеДанные.Использование = 0;
		КонецЕсли;
		
		ОбновитьИспользованиеВидовДеятельностейУслуг(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВидовДеятельностиУслугНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ЕстьВидыДеятельности = Ложь;
	ЕстьУслуги = Ложь;
	Родитель = Неопределено;
	
	Для Каждого ВыделеннаяСтрока Из Элемент.ВыделенныеСтроки Цикл
		НайденнаяСтрока = ДеревоВидовДеятельностиУслуг.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если НайденнаяСтрока <> Неопределено Тогда
			Если НайденнаяСтрока.ЭтоУслуга Тогда
				ЕстьУслуги = Истина;
			Иначе
				ЕстьВидыДеятельности = Истина;
				Родитель = НайденнаяСтрока.ПолучитьРодителя();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьВидыДеятельности И ЕстьУслуги Тогда
		Выполнение = Ложь;
	Иначе
		ДополнительныеДанныеПеретаскивания = Новый Структура;
		ДополнительныеДанныеПеретаскивания.Вставить("ЭтоУслуга", ЕстьУслуги);
		ДополнительныеДанныеПеретаскивания.Вставить("Родитель", Родитель);
		
		ПараметрыПеретаскивания.Значение = Элемент.ВыделенныеСтроки;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВидовДеятельностиУслугПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВидовДеятельностиУслугПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВидовДеятельностиУслугПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	НайденнаяСтрока = ДеревоВидовДеятельностиУслуг.НайтиПоИдентификатору(Строка);
	Если НайденнаяСтрока <> Неопределено Тогда
		Родитель = НайденнаяСтрока.ПолучитьРодителя();
		
		Если Родитель = Неопределено Тогда
			Родитель = ДеревоВидовДеятельностиУслуг;
		КонецЕсли;
		
		КоллекцияЭлементовРодителя = Родитель.ПолучитьЭлементы();
		ПозицияДляВставки = КоллекцияЭлементовРодителя.Индекс(НайденнаяСтрока);
		
		Для Каждого ИдентификаторСтроки Из ПараметрыПеретаскивания.Значение Цикл
			НайденнаяСтрока = ДеревоВидовДеятельностиУслуг.НайтиПоИдентификатору(ИдентификаторСтроки);
			
			Если НайденнаяСтрока <> Неопределено Тогда
				ИндексНайденнойСтроки = КоллекцияЭлементовРодителя.Индекс(НайденнаяСтрока);
				КоллекцияЭлементовРодителя.Сдвинуть(ИндексНайденнойСтроки, ПозицияДляВставки - ИндексНайденнойСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВидовДеятельностиУслугПриИзменении(Элемент)
	
	ПриИзмененииРеквизитаФормы(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВидовДеятельностиУслугПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка = Неопределено Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрокаПриемник = ДеревоВидовДеятельностиУслуг.НайтиПоИдентификатору(Строка);
	
	Если НайденнаяСтрокаПриемник <> Неопределено Тогда
		Если ДополнительныеДанныеПеретаскивания.ЭтоУслуга Тогда
			Если НЕ НайденнаяСтрокаПриемник.ЭтоУслуга Тогда
				ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
			КонецЕсли;
		Иначе
			НовыйРодитель = НайденнаяСтрокаПриемник.ПолучитьРодителя();
			Если НовыйРодитель <> ДополнительныеДанныеПеретаскивания.Родитель Тогда
				ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДиапазоныСложностиЗадач

&НаКлиенте
Процедура ДиапазоныСложностиЗадачМинимальнаяСложностьПриИзменении(Элемент)
	
	ИдентификаторФормы = ОбщегоНазначенияКлиентСервер.СтрУникальныйИдентификатор(УникальныйИдентификатор);
	ИмяЭлемента = СтрШаблон("%1_%2", "ДиапазоныСложностиЗадач", ИдентификаторФормы);
	ТекущиеДанные = Элементы[ИмяЭлемента].ТекущиеДанные;
	
	Если ТекущиеДанные.МинимальнаяСложность > ТекущиеДанные.МаксимальнаяСложность Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Минимальная сложность должна быть меньше максимальной");
		ТекущиеДанные.МинимальнаяСложность = ТекущиеДанные.МаксимальнаяСложность - 1;
	Иначе
		ПриИзмененииРеквизитаФормы("ДиапазоныСложностиЗадач");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиапазоныСложностиЗадачМаксимальнаяСложностьПриИзменении(Элемент)
	
	ИдентификаторФормы = ОбщегоНазначенияКлиентСервер.СтрУникальныйИдентификатор(УникальныйИдентификатор);
	ИмяЭлемента = СтрШаблон("%1_%2", "ДиапазоныСложностиЗадач", ИдентификаторФормы);
	ТекущиеДанные = Элементы[ИмяЭлемента].ТекущиеДанные;
	
	Если ТекущиеДанные.МинимальнаяСложность > ТекущиеДанные.МаксимальнаяСложность Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Максимальная сложность должна быть больше минимальной");
		ТекущиеДанные.МаксимальнаяСложность = ТекущиеДанные.МинимальнаяСложность + 1;
	Иначе
		ПриИзмененииРеквизитаФормы("ДиапазоныСложностиЗадач");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИсполнителиCodeReview

&НаКлиенте
Процедура ИсполнителиCodeReviewРевьюерПриИзменении(Элемент)
	
	ПриИзмененииРеквизитаФормы("ИсполнителиCodeReview");
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ТипыЗадачПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ОтборЭлементов = Новый Структура("ПометкаУдаления", Ложь);
	ПараметрыОткрытия = Новый Структура("Отбор", ОтборЭлементов);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыВыбораВидаЗадачи", ЭтотОбъект);
	ОткрытьФорму("Справочник.ВидыЗадач.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект, КлючУникальности, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипыЗадачПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ТипыЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	// Удаляем тип задачи из реквизита формы.
	ЭлементСписка = ТипыЗадач.НайтиПоЗначению(ТекущиеДанные.Значение);
	Если ЭлементСписка <> Неопределено Тогда
		ТипыЗадач.Удалить(ЭлементСписка);
	КонецЕсли;
	
	ПриИзмененииРеквизитаФормы("ТипыЗадач");

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СотрудникиФилиалаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыИзменения = Новый Структура;
		ПараметрыИзменения.Вставить("Ключ", ТекущиеДанные.Сотрудник);
		ПараметрыИзменения.Вставить("Направления", Новый Массив);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ИзменениеПользователя", ПараметрыИзменения);
		ПараметрыОткрытия.Вставить("Ключ", ТекущиеДанные.Сотрудник);
		
		ОткрытьФорму("Справочник.Пользователи.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект, КлючУникальности,
			, , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура Перезапустить(Команда)
	
	ПерезапуститьСеанс();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоУмолчанию(Команда)
	
	Если Элементы.Филиал.Видимость Тогда
		ТекстПредупреждения =
		"Настройки использования услуг для филиала """ + Филиал + """ будут сброшены.
		|Продолжить?";
		
	Иначе
		ТекстПредупреждения =
		"Настройки использования услуг будут сброшены.
		|Продолжить?";
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросСбросаНастроекВидовДеятельности", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстПредупреждения, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	ОбработатьИзменениеРеквизитов();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьИспользованиеВидовДеятельностейУслуг(СтрокаДерева)
	
	Если СтрокаДерева.ЭтоУслуга Тогда
		ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
		Для Каждого Строка Из ПодчиненныеСтроки Цикл
			Строка.Использование = СтрокаДерева.Использование;
		КонецЦикла;
	Иначе
		РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
		
		Включено = 0;
		Выключено = 0;
		
		ПодчиненныеСтроки = РодительскаяСтрока.ПолучитьЭлементы();
		Для Каждого Строка Из ПодчиненныеСтроки Цикл
			Если Строка.Использование Тогда
				Включено = Включено + 1;
			Иначе
				Выключено = Выключено + 1;
			КонецЕсли;
		КонецЦикла;
		
		ОбщееКоличество = ПодчиненныеСтроки.Количество();
		РодительскаяСтрока.Использование = ПолучитьИспользованиеРодительскойСтроки(ОбщееКоличество, Включено, Выключено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиФилиала()
	
	РаботаСНастройками.ОбновитьНастройкиФилиала(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросСбросаНастроекВидовДеятельности(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УстановитьВидыДеятельностиУслугПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросСохраненияНастроекПриЗакрытии(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбработатьИзменениеРеквизитов();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ИменаИзмененныхРеквизитов.Очистить();
	Иначе
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросСохраненияНастроекПриСменеФилиала(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбработатьИзменениеРеквизитов();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ИменаИзмененныхРеквизитов.Очистить();
		УдаляемыеКоманды.Очистить(); 
	Иначе
		Возврат;
	КонецЕсли;
	
	Филиал = ДополнительныеПараметры.НовыйФилиал;
	
	ОбновитьНастройкиФилиала();
	РаботаСНастройкамиКлиент.НастроитьДоступностьЗависимыхЭлементов(ЭтотОбъект);
	РаботаСНастройкамиКлиент.АктуализироватьТекущийВыбранныйРаздел(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборШаблонов(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.ШаблоныЗаявок = Результат;
	
	ПриИзмененииРеквизитаФормы(Элементы.ШаблоныЗаявок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыВыбораВидаЗадачи(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	ВидыЗадачНаУдаление = ПолучитьВидыЗадачНаУдаление(ТипыЗадач.ВыгрузитьЗначения());
	Если ВидыЗадачНаУдаление.Количество() > 0 Тогда
		Для Каждого ВидЗадачи Из ВидыЗадачНаУдаление Цикл
			ТипыЗадач.Удалить(ТипыЗадач.НайтиПоЗначению(ВидЗадачи));
		КонецЦикла;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипыЗадач.НайтиПоЗначению(Результат) = Неопределено Тогда
		ТипыЗадач.Добавить(Результат);
		ПриИзмененииРеквизитаФормы("ТипыЗадач");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеРеквизитов()
	
	Если ИменаИзмененныхРеквизитов.Количество() > 0 Тогда
		НовыеЗначения = РаботаСНастройкамиКлиент.ПолучитьСохраняемыеНастройки(ЭтотОбъект, ИменаИзмененныхРеквизитов, 
			УдаляемыеКоманды, ТипыЗадач.ВыгрузитьЗначения());
		
		Если НовыеЗначения.Количество() > 0 Тогда
			СохранитьНастройки(Филиал, НовыеЗначения);
			РаботаСНастройкамиКлиент.ПослеСохраненияНастроек(ЭтотОбъект, ИменаИзмененныхРеквизитов);
			УдаляемыеКоманды.Очистить();   
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПереключениеНастроекФилиала(Знач ПараметрыОповещения)  
		
	НовыйФилиал = ПараметрыОповещения.Филиал;
	
	Если НЕ ЗначениеЗаполнено(НовыйФилиал) Тогда
		Возврат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Филиал) И Филиал <> НовыйФилиал Тогда
		ФилиалОбработкаВыбора(Элементы.Филиал, НовыйФилиал, Истина);
	КонецЕсли;
	
	Раздел = Неопределено;
	Если ПараметрыОповещения.Свойство("ОткрываемыйРаздел", Раздел) Тогда
		РаботаСНастройкамиКлиент.ПереключитьсяНаСтраницуНастроек(ЭтотОбъект, Раздел);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезапуститьСеанс()
	
	ПрекратитьРаботуСистемы(Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИспользованиеРодительскойСтроки(Знач Всего, Знач Включено, Знач Выключено)
	
	Если Включено = Всего Тогда
		Результат = 1;
	ИначеЕсли Выключено = Всего Тогда
		Результат = 0;
	Иначе
		Результат = 2;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииРеквизитаФормы(Элемент)
	
	ТипЭлемента = ТипЗнч(Элемент);
	Если ТипЭлемента = Тип("Строка") Тогда
		ИмяРеквизита = Элемент;
	Иначе
		ИмяРеквизита = Элемент.Имя;
	КонецЕсли;
	
	НайденныйЭлемент = ИменаИзмененныхРеквизитов.Найти(ИмяРеквизита);
	Если НайденныйЭлемент = Неопределено Тогда
		ИменаИзмененныхРеквизитов.Добавить(ИмяРеквизита);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройки(Знач Филиал, Знач НовыеЗначения)
	
	РаботаСНастройками.СохранитьИзмененныеНастройки(Филиал, НовыеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидыДеятельностиУслугПоУмолчанию()
	
	РаботаСНастройками.УстановитьВидыДеятельностиУслугПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандыРазработчиковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьДействиеСКомандойРазработчиков("Открыть");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандыРазработчиковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ОбработатьДействиеСКомандойРазработчиков("Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандыРазработчиковПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОбработатьДействиеСКомандойРазработчиков("Открыть");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандыРазработчиковПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ДобавитьКомандуДляУдаления();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомандуДляУдаления()
	
	ТекущиеДанные = Элементы.КомандыРазработчиков.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Добавляем команду в массив для последующего удаления.
	УдаляемыеКоманды.Добавить(ТекущиеДанные.Значение);
	
	// Удаляем команду из реквизита формы.
	ЭлементСписка = КомандыРазработчиков.НайтиПоЗначению(ТекущиеДанные.Значение);
	Если ЭлементСписка <> Неопределено Тогда
		КомандыРазработчиков.Удалить(ЭлементСписка);
	КонецЕсли;
	
	ПриИзмененииРеквизитаФормы("УдаленыКомандыРазработчиков");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьУсловноеОформление()
	
	// Условное оформление Диапозонов сложности 
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ИндетификаторФормыСтрока = ОбщегоНазначенияКлиентСервер.СтрУникальныйИдентификатор(УникальныйИдентификатор, Истина);
	ИмяТаблицы = СтрШаблон("%1_%2", "ДиапазоныСложностиЗадач", ИндетификаторФормыСтрока);
	
	ИмяКолонкиДолжность = СтрШаблон("%1_%2", ИмяТаблицы, "Должность");
	ИмяКолонкиМаксимальнаяМложность = СтрШаблон("%1_%2", ИмяТаблицы, "МаксимальнаяСложность");
	ИмяКолонкиМинимальнаяСложность = СтрШаблон("%1_%2", ИмяТаблицы, "МинимальнаяСложность");
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонкиДолжность);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонкиМаксимальнаяМложность);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонкиМинимальнаяСложность);
		
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДиапазоныСложностиЗадач.МаксимальнаяСложность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.ДымчатоБелый);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
	Элемент.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДействиеСКомандойРазработчиков(Знач ИмяСобытия)
	
	ПараметрыОткрытия = Новый Структура;
	
	Если ИмяСобытия = "Открыть" Тогда
		ТекущиеДанные = Элементы.КомандыРазработчиков.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыОткрытия.Вставить("Ключ", ТекущиеДанные.Значение);
	Иначе
		ПараметрыОткрытия.Вставить("Родитель", Филиал);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Филиалы.Форма.ФормаЭлементаКоманды", ПараметрыОткрытия, ЭтотОбъект, КлючУникальности);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВидыЗадачНаУдаление(Знач ТипыЗадачНаФорме)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыЗадач.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыЗадач КАК ВидыЗадач
	|ГДЕ
	|	ВидыЗадач.Ссылка В(&Ссылка)
	|	И ВидыЗадач.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Ссылка", ТипыЗадачНаФорме);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКомандыРазработчиков(Знач Филиал)
	
	КомандыРазработчиков = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Филиалы.Ссылка КАК Ссылка,
	|	Филиалы.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|ГДЕ
	|	Филиалы.Родитель = &Родитель
	|	И НЕ Филиалы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Родитель", Филиал);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КомандыРазработчиков.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	
	Возврат КомандыРазработчиков;
	
КонецФункции

#КонецОбласти

#Область ИнициализацияПеременных

#Если ТонкийКлиент ИЛИ ВебКлиент Тогда

ИменаИзмененныхРеквизитов = Новый Массив;
УдаляемыеКоманды = Новый Массив;
УдаляемыеТипыЗадач = Новый Массив;

#КонецЕсли

#КонецОбласти
