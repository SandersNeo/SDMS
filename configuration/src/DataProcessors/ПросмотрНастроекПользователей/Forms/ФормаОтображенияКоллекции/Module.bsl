///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АдресВременногоХранилищаКоллекции") Тогда
		ВывестиКоллекциюВТабличноеПоле(ПолучитьИзВременногоХранилища(Параметры.АдресВременногоХранилищаКоллекции));
	ИначеЕсли Параметры.Свойство("ТекстНастройки") Тогда
		СформироватьПолеВвода(Параметры.ТекстНастройки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДанныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.Найти("ДанныеТаблицыТехИнформация_КлючУникальностиЗаписи") <> Неопределено Тогда
		Ключ = Элемент.ТекущиеДанные.ТехИнформация_КлючУникальностиЗаписи;
		
	ИначеЕсли Элементы.Найти("ДанныеДереваТехИнформация_УникальныйИдентификаторСтроки") <> Неопределено Тогда
		Ключ = "Ключ_" + Элемент.ТекущиеДанные.ТехИнформация_УникальныйИдентификаторСтроки + "_" + Поле.Имя;
		
	ИначеЕсли Элементы.Найти("ДанныеТаблицыТехИнформация_УникальныйИдентификаторСтроки") <> Неопределено Тогда
		Ключ = "Ключ_" + Элемент.ТекущиеДанные.ТехИнформация_УникальныйИдентификаторСтроки + "_" + Поле.Имя;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыНовойФормы(Ключ, АдресВременногоХранилищаСоответствий);
	
	Если ПараметрыФормы.Свойство("АдресВременногоХранилищаКоллекции") Тогда
		ОткрытьФорму(ИмяФормы, ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ОтобразитьКоллекцию(Команда)
	
	Если ТипЗнч(ТекущийЭлемент) = Тип("ТаблицаФормы") Тогда
		ДанныеВыбор(ТекущийЭлемент, ТекущийЭлемент.ТекущаяСтрока, ТекущийЭлемент.ТекущийЭлемент, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Преобразовывает полученную коллекцию в таблицу значений или дерево значений. 
// Если в полях таблицы есть другие коллекции, добавляет в соответствие это значение.
// Вызывает процедуру СформироватьТабличноеПолеИВспомогательныеКнопки.
// 
// Параметры:
//  КоллекцияДляВывода	 - ЛюбаяКоллекция - коллекция которую необходимо вывести на форму.
//
&НаСервере
Процедура ВывестиКоллекциюВТабличноеПоле(КоллекцияДляВывода)
	
	СоответствиеДанныхСИдентификатором = Новый Соответствие;
	ТаблицаЗначенийДляВывода = Новый ТаблицаЗначений;
	
	Если ТипЗнч(КоллекцияДляВывода) = Тип("ТаблицаЗначений") Тогда
		ТаблицаЗначенийДляВывода = КоллекцияДляВывода.СкопироватьКолонки();
		ТаблицаЗначенийДляВывода.Колонки.Добавить("ТехИнформация_УникальныйИдентификаторСтроки");
		
		Для каждого Строка из КоллекцияДляВывода Цикл
			НоваяСтрока = ТаблицаЗначенийДляВывода.Добавить();
			НоваяСтрока.ТехИнформация_УникальныйИдентификаторСтроки = Новый УникальныйИдентификатор;
			
			Для каждого Колонка из КоллекцияДляВывода.Колонки Цикл
				ИндексКолонки = КоллекцияДляВывода.Колонки.Индекс(Колонка);
				Значение = Строка.Получить(ИндексКолонки);
				
				Если ЭтоКоллекция(Значение) Тогда
					КлючСоответсвия = "Ключ_" + НоваяСтрока.ТехИнформация_УникальныйИдентификаторСтроки + "_ДанныеТаблицы" + Колонка.Имя;
					СоответствиеДанныхСИдентификатором.Вставить(КлючСоответсвия, Значение);
					НоваяСтрока.Установить(ИндексКолонки, Строка(ТипЗнч(Значение)));
				Иначе
					НоваяСтрока.Установить(ИндексКолонки,Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(КоллекцияДляВывода) = Тип("Структура") ИЛИ ТипЗнч(КоллекцияДляВывода) = Тип("Соответствие") Тогда
		ТаблицаЗначенийДляВывода.Колонки.Добавить("Ключ");
		ТаблицаЗначенийДляВывода.Колонки.Добавить("Значение");
		ТаблицаЗначенийДляВывода.Колонки.Добавить("ТехИнформация_КлючУникальностиЗаписи");
		
		Для каждого Строка из КоллекцияДляВывода Цикл
			НоваяСтрока = ТаблицаЗначенийДляВывода.Добавить();
			НоваяСтрока.Ключ = Строка.Ключ;
			НоваяСтрока.ТехИнформация_КлючУникальностиЗаписи = Новый УникальныйИдентификатор;
			
			Если ЭтоКоллекция(Строка.Значение) Тогда
				СоответствиеДанныхСИдентификатором.Вставить(НоваяСтрока.ТехИнформация_КлючУникальностиЗаписи, Строка.Значение);
				НоваяСтрока.Значение = Строка(ТипЗнч(Строка.Значение));
			Иначе
				НоваяСтрока.Значение = Строка.Значение;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(КоллекцияДляВывода) = Тип("Массив") Тогда
		ТаблицаЗначенийДляВывода.Колонки.Добавить("Значение");
		ТаблицаЗначенийДляВывода.Колонки.Добавить("ТехИнформация_КлючУникальностиЗаписи");
		
		Для каждого Элемент из КоллекцияДляВывода Цикл
			НоваяСтрока = ТаблицаЗначенийДляВывода.Добавить();
			НоваяСтрока.ТехИнформация_КлючУникальностиЗаписи = Новый УникальныйИдентификатор;
			
			Если ЭтоКоллекция(Элемент) Тогда
				СоответствиеДанныхСИдентификатором.Вставить(НоваяСтрока.ТехИнформация_КлючУникальностиЗаписи, Элемент);
				НоваяСтрока.Значение = Строка(ТипЗнч(Элемент));
			Иначе
				НоваяСтрока.Значение = Элемент;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(КоллекцияДляВывода) = Тип("СписокЗначений") Тогда
		ТаблицаЗначенийДляВывода.Колонки.Добавить("Значение");
		ТаблицаЗначенийДляВывода.Колонки.Добавить("Представление");
		ТаблицаЗначенийДляВывода.Колонки.Добавить("Пометка");
		ТаблицаЗначенийДляВывода.Колонки.Добавить("ТехИнформация_КлючУникальностиЗаписи");
		
		Для каждого Строка из КоллекцияДляВывода Цикл
			НоваяСтрока = ТаблицаЗначенийДляВывода.Добавить();
			НоваяСтрока.Представление = Строка.Представление;
			НоваяСтрока.Пометка = Строка.Пометка;
			
			Если ЭтоКоллекция(Строка.Значение) Тогда			
				СоответствиеДанныхСИдентификатором.Вставить(НоваяСтрока.ТехИнформация_КлючУникальностиЗаписи, Строка.Значение);
				НоваяСтрока.Значение = Строка(ТипЗнч(Строка.Значение));
			Иначе
				НоваяСтрока.Значение = Строка.Значение;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(КоллекцияДляВывода) = Тип("ДеревоЗначений") Тогда
		ТаблицаЗначенийДляВывода = Новый ДеревоЗначений;
		ТаблицаЗначенийДляВывода = КоллекцияДляВывода.Скопировать();
		ТаблицаЗначенийДляВывода.Колонки.Добавить("ТехИнформация_УникальныйИдентификаторСтроки");
		ПроверитьДерево(ТаблицаЗначенийДляВывода, ТаблицаЗначенийДляВывода.Колонки, СоответствиеДанныхСИдентификатором);
		
	ИначеЕсли ТипЗнч(КоллекцияДляВывода) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда		
		ТаблицаЗначенийДляВывода.Колонки.Добавить("ТипНастройки");
		ТаблицаЗначенийДляВывода.Колонки.Добавить("Значение");			
		
		Для Каждого Элемент Из КоллекцияДляВывода.Элементы Цикл
			НоваяСтрока = ТаблицаЗначенийДляВывода.Добавить();
			НоваяСтрока.Значение = Элемент;
			НоваяСтрока.ТипНастройки = Строка(ТипЗнч(Элемент));
		КонецЦикла;		
	Иначе 
		СформироватьПолеВвода(КоллекцияДляВывода);
		Возврат;
	КонецЕсли;
	
	СформироватьТабличноеПолеИВспомогательныеКнопки(ТаблицаЗначенийДляВывода);
	АдресВременногоХранилищаСоответствий = ПоместитьВоВременноеХранилище(СоответствиеДанныхСИдентификатором, УникальныйИдентификатор);
	
КонецПроцедуры

// Возвращает структуру, в которой хранятся параметры для открытия выбранной коллекции. 
//
// Параметры:
//  ИдентификаторДанных						 - Строка - Идентификатор, по которому можно выбрать требуемую коллекцию.
//  АдресСоответствийДанныхСИдентификатором	 - Строка - Адрес временного хранилища соответствия в котором хранятся коллекции.
// 
// Возвращаемое значение:
// Структура - Параметры для открытия новой формы. Внутри адрес временного хранилища в котором хранится коллекция для вывода.
//
&НаСервереБезКонтекста
Функция ПолучитьПараметрыНовойФормы(ИдентификаторДанных, АдресСоответствийДанныхСИдентификатором)
	
	Параметры = Новый Структура;
	Соответствия = ПолучитьИзВременногоХранилища(АдресСоответствийДанныхСИдентификатором);
	КоллекцияДляВывода = Соответствия.Получить(ИдентификаторДанных);
	
	Если КоллекцияДляВывода <> Неопределено Тогда
		Параметры.Вставить("АдресВременногоХранилищаКоллекции", ПоместитьВоВременноеХранилище(КоллекцияДляВывода, Новый УникальныйИдентификатор));
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Выполняет проверку на наличие коллекций в дереве.
//
// Параметры:
//  ЭлементДерева						 - ДеревоЗначений, СтрокаДереваЗначений - Дерево или строка дерева, которую нужно обработать.
//  Колонки								 - КолонкиДереваЗначений - Набор колонок дерева значений.
//  СоответствиеДанныхСИдентификатором	 - Соответствие - Соответствие в котором хранятся коллекции, найденые в коллекции для вывода.
//
&НаСервереБезКонтекста
Процедура ПроверитьДерево(Знач ЭлементДерева, Знач Колонки, СоответствиеДанныхСИдентификатором)
	
	Для каждого Строка из ЭлементДерева.Строки Цикл
		Строка.ТехИнформация_УникальныйИдентификаторСтроки = Новый УникальныйИдентификатор;
		
		Для каждого Колонка из Колонки Цикл
			ИндексКолонки = Колонки.Индекс(Колонка);
			Значение = Строка[ИндексКолонки];
			
			Если ЭтоКоллекция(Значение) Тогда
				КлючСоответсвия = "Ключ_" + Строка.ТехИнформация_УникальныйИдентификаторСтроки + "_ДанныеДерева" + Колонка.Имя;
				СоответствиеДанныхСИдентификатором.Вставить(КлючСоответсвия, Значение);
				Строка[ИндексКолонки] = Строка(ТипЗнч(Значение));
			КонецЕсли;
		КонецЦикла;
		
		ПроверитьДерево(Строка, Колонки, СоответствиеДанныхСИдентификатором);
	КонецЦикла;
	
КонецПроцедуры

// Создает на форме табличное поле, необходимые колонки и вспомогательные кнопки.
//
// Параметры:
//  КоллекцияДляВывода	 - ЛюбаяКоллекция - коллекция которую необходимо вывести на форму.
//
&НаСервере
Процедура СформироватьТабличноеПолеИВспомогательныеКнопки(КоллекцияДляВывода)
	
	Если ТипЗнч(КоллекцияДляВывода) = Тип("ДеревоЗначений") Тогда
		ИмяРеквизитаФормы = "ДанныеДерева";	
	Иначе
		ИмяРеквизитаФормы = "ДанныеТаблицы";
	КонецЕсли;
	
	ЭлементТабличноеПоле = Элементы.Добавить(ИмяРеквизитаФормы, Тип("ТаблицаФормы"), Элементы.Группа);
	ЭлементТабличноеПоле.ПутьКДанным = ИмяРеквизитаФормы;
	
	Если ТипЗнч(КоллекцияДляВывода) = Тип("ДеревоЗначений") Тогда
		ЭлементТабличноеПоле.Отображение = ОтображениеТаблицы.Дерево;
	Иначе
		ЭлементТабличноеПоле.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
	
	МассивКолонокТабличногоПоля = Новый Массив;
	
	Для Каждого Колонка ИЗ КоллекцияДляВывода.Колонки Цикл
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Неопределено"));
		НоваяКолонка = Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов(МассивТипов), ИмяРеквизитаФормы);
		МассивКолонокТабличногоПоля.Добавить(НоваяКолонка);
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивКолонокТабличногоПоля); 
	ЗначениеВРеквизитФормы(КоллекцияДляВывода, ИмяРеквизитаФормы);
	
	Для Каждого Колонка ИЗ КоллекцияДляВывода.Колонки Цикл
		НоваяКолонкаТабличногоПоля = Элементы.Добавить(ИмяРеквизитаФормы + Колонка.Имя, Тип("ПолеФормы"), ЭлементТабличноеПоле);
		НоваяКолонкаТабличногоПоля.Вид = ВидПоляФормы.ПолеВвода;
		НоваяКолонкаТабличногоПоля.ПутьКДанным = ИмяРеквизитаФормы + "." + Колонка.Имя;
		
		Если Колонка.Имя = "ТехИнформация_КлючУникальностиЗаписи" ИЛИ Колонка.Имя = "ТехИнформация_УникальныйИдентификаторСтроки" Тогда
			НоваяКолонкаТабличногоПоля.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементТабличноеПоле.ТолькоПросмотр = Истина;
	ЭлементТабличноеПоле.УстановитьДействие("Выбор", "ДанныеВыбор");
	
	КнопкаКонтекстногоМеню = Элементы.Добавить("ОтобразитьКоллекцию", Тип("КнопкаФормы"), ЭлементТабличноеПоле.КонтекстноеМеню);
	КнопкаКонтекстногоМеню.Заголовок = "Отобразить коллекцию";
	КнопкаКонтекстногоМеню.ИмяКоманды = "ОтобразитьКоллекцию";
	КнопкаКонтекстногоМеню.Картинка = БиблиотекаКартинок.Найти;
	
	КнопкаКоманднойПанели = Элементы.Добавить("ОтобразитьКоллекцию1", Тип("КнопкаФормы"), ЭлементТабличноеПоле.КоманднаяПанель);
	КнопкаКоманднойПанели.Заголовок = "Отобразить коллекцию";
	КнопкаКоманднойПанели.ИмяКоманды = "ОтобразитьКоллекцию";
	КнопкаКоманднойПанели.Картинка = БиблиотекаКартинок.Найти;
	
КонецПроцедуры

// Создает на форме поле ввода.
//
// Параметры:
//  Значение - ЛюбоеЗначение - Значение, которое необходимо вывести на форму.
//
&НаСервере
Процедура СформироватьПолеВвода(Значение)
	
	ЭлементТекст = Элементы.Добавить("Поле", Тип("ПолеФормы"), Элементы.Группа);
	ЭлементТекст.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементТекст.ПутьКДанным = "ДанныеПоля";
	ЭлементТекст.МногострочныйРежим = Истина;
	ЭлементТекст.ТолькоПросмотр = Истина;
	ЭлементТекст.КнопкаВыбора = "Нет";
	ЭлементТекст.АвтоМаксимальнаяШирина = Ложь;
	ЭлементТекст.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ДанныеПоля = Значение;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоКоллекция(Элемент) 
	
	ТипЭлемента = ТипЗнч(Элемент);
	
	Возврат ТипЭлемента = Тип("ТаблицаЗначений")
				ИЛИ ТипЭлемента = Тип("ДеревоЗначений")
				ИЛИ ТипЭлемента = Тип("Массив")
				ИЛИ ТипЭлемента = Тип("СписокЗначений")
				ИЛИ ТипЭлемента = Тип("Соответствие")
				ИЛИ ТипЭлемента = Тип("Структура");
				
КонецФункции

#КонецОбласти
