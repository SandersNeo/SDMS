///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

// Пользовательские настройки
&НаКлиенте
Перем НастройкиФормы Экспорт;

// Хранит пользовательские настройки колонок 
&НаКлиенте
Перем НастройкиКолонокКонтроль;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ИнтеграцияДополнительныхПодсистем.НачатьЗамерВремени();
	
	НастройкиФормы = ПолучитьНастройкиФормы();
	ИнициализацияНастроекКолонок();
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(НастройкиФормы);
	
	ОбновлениеПользовательскихНастроекДинамическогоСписка();
	
	ИнструментыСервер.ПриСозданииНаСервере(ЭтотОбъект, Элементы.Список_Контроль.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтоАдресВременногоХранилища(АдресВоВременномХранилище) Тогда
		НастройкиФормы = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	КонецЕсли;
	
	ИнструментыКлиент.ПриОткрытии(ЭтотОбъект);

	ИнтеграцияДополнительныхПодсистем.ЗакончитьЗамерВремени("КонтрольЗадач.ОткрытиеФормы", ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ИнструментыКлиент.ПриЗакрытии(ЗавершениеРаботы, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СписокСобытий = СтрРазделить(ИмяСобытия, ";");
	ЭтоМассив = СписокСобытий.Количество() > 1; 
	Счетчик = 0;
	
	Для Каждого Событие Из СписокСобытий Цикл
		
		ПараметрСобытия = ?(ЭтоМассив, Параметр[Счетчик], Параметр);
		
		Если СобытияОповещенияКлиент.СобытиеОбновлениеСписковИнструментов(Событие) Тогда
			
			ИнструментыКлиент.УстановитьПризнакНеобходимостиОбновления(ЭтотОбъект);
			
		КонецЕсли; 
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	ИнструментыКлиент.ОбработкаОповещения(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура Контроль_ИсполнителиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВыбранныеПользователи", Контроль_Исполнители);

	ОткрытьФорму("Справочник.Пользователи.Форма.МножественныйВыбор", ПараметрыОткрытия, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура Контроль_ИсполнителиОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	Контроль_Исполнители.ЗагрузитьЗначения(ВыбранноеЗначение);
	НастройкиФормы.Контроль_Исполнители = Контроль_Исполнители;
	ОбновитьДанныеИнструмента();
	
КонецПроцедуры

&НаКлиенте
Процедура Контроль_ИсполнителиОчистка(Элемент, СтандартнаяОбработка)
	
	НастройкиФормы.Контроль_Исполнители.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура Контроль_ИсполнителиПриИзменении(Элемент)
	
	ОбновитьДанныеИнструмента();
	
КонецПроцедуры

&НаКлиенте
Процедура Контроль_ФилиалITНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтметкиЭлементов_Контроль_Филиалы", ЭтотОбъект);

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВыбранныеФилиалы", Контроль_ФилиалIT);
	ПараметрыОткрытия.Вставить("ITСтруктура", Истина);
	ПараметрыОткрытия.Вставить("ВключаяКоманды", Истина);	
		
	ОткрытьФорму("Справочник.Филиалы.Форма.МножественныйВыбор", ПараметрыОткрытия, ЭтотОбъект, КлючУникальности, , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
		
&НаКлиенте
Процедура Список_КонтрольВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список_Контроль.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Задача) Тогда
		ОткрытьФорму("Документ.Задача.Форма.ФормаДокумента", Новый Структура("Ключ", ТекущиеДанные.Задача));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Список_КонтрольПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Список_Контроль.ТекущиеДанные;
		
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.Список_КонтрольКонтекстноеМенюКопироватьВБуфер.Видимость = НЕ ТекущиеДанные.ЭтоГруппа;
		Элементы.Список_КонтрольКонтекстноеМенюОткрытьВариантыСсылок.Видимость = НЕ ТекущиеДанные.ЭтоГруппа;
		Элементы.Список_КонтрольКонтекстноеМенюОткрытьЗаявкуВыделеннойЗадачи.Видимость = НЕ ТекущиеДанные.ЭтоГруппа;
	КонецЕсли;
		
	УправлениеИнструментамиРазработкиКлиент.ОбработкаАктивизацииСтрокиДанныхФормы(Элемент,
		НастройкиФормы.Список_Контроль.ВыделеннаяСтрока);
		
КонецПроцедуры

&НаКлиенте
Процедура Список_КонтрольПередРазворачиванием(Элемент, Строка, Отказ)
	
	УправлениеИнструментамиРазработкиКлиент.ПередРазворачиваниемУзлаДерева(Список_Контроль, Строка, НастройкиФормы.Список_Контроль.РазвернутыеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Список_КонтрольПередСворачиванием(Элемент, Строка, Отказ)
	
	УправлениеИнструментамиРазработкиКлиент.ПередСворачиваниемУзлаДерева(Список_Контроль, Строка, НастройкиФормы.Список_Контроль.РазвернутыеСтроки);
	
КонецПроцедуры
	
#КонецОбласти	

#Область ОбработчикиКоманд

&НаКлиенте
Процедура Контроль_НастройкаКолонок(Команда)
	
	Ключи = ПолучитьКлючиНастроекКолонокКонтроль();
	НастройкиПоУмолчанию = НастройкиКолонокКонтрольПоУмолчанию();
	НастройкиКолонокКонтроль = ИнтерфейсПриложенияВызовСервера.ЗаполнитьПользовательскиеНастройки(НастройкиПоУмолчанию, Ключи);
		
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДоступныеНастройки", НастройкиКолонокКонтроль);
	ПараметрыОткрытия.Вставить("НастройкиПоУмолчанию", НастройкиПоУмолчанию);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИмяТаблицы", "Список_Контроль");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеНастроекКолонок", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаКолонок", ПараметрыОткрытия, ЭтотОбъект,
		КлючУникальности, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура КопироватьВБуфер(Команда)
	
	Если ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;                              
	
	ОбъектСсылка = Неопределено;
	
	Если ТекущийЭлемент.ТекущиеДанные <> Неопределено Тогда 
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		
		Если ТекущиеДанные.Свойство("Задача") Тогда
			ОбъектСсылка = ТекущиеДанные.Задача;
		КонецЕсли; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		ОбщегоНазначенияКлиент.КопироватьНавигационнуюСсылкуВБуферОбмена(ОбъектСсылка);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСписок(Команда)
	
	ОтборГруппыЗаказчиков = НастройкиФормы.Отбор_Контроль.ГруппаЗаказчиков;
	ГруппыЗаказчиков = ОтборГруппыЗаказчиков.ВыгрузитьЗначения();
	Системы = НастройкиФормы.Отбор_Контроль.Система; 
	Продукты = НастройкиФормы.Отбор_Контроль.Продукт;
	Статусы = НастройкиФормы.Отбор_Контроль.Статус;
	
	ПараметрыОткрытия = ИнтерфейсПриложенияКлиент.СформироватьПараметрыОткрытия();

	ПараметрыОткрытия.Системы.Значение = Системы;
	ПараметрыОткрытия.Системы.Использование = Истина;
	
	ПараметрыОткрытия.ГруппыЗаказчиков.Значение = ГруппыЗаказчиков;
	ПараметрыОткрытия.ГруппыЗаказчиков.Использование = Истина; 
	
	ПараметрыОткрытия.Продукты.Значение = Продукты;
	ПараметрыОткрытия.Продукты.Использование = Истина;
	
	ИсключаемыеСтатусы = Новый Массив;
	ИсключаемыеСтатусы.Добавить(ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Решен"));
	ИсключаемыеСтатусы.Добавить(ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Отклонен"));
	
	ПараметрыОткрытия.Статусы.Значение = Статусы;
	ПараметрыОткрытия.Статусы.Использование = Истина;
	ПараметрыОткрытия.Статусы.Вставить("ИсключаемыеСтатусы", ИсключаемыеСтатусы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Контроль_ОбработатьВыборНастроек", ЭтотОбъект, ЭтотОбъект);
	
	ИнтерфейсПриложенияКлиент.ОткрытьФормуНастройкиИнструментов(ЭтотОбъект, ПараметрыОткрытия, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок_Контроль(Команда)
	
	ОбновитьДанныеИнструмента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВариантыСсылок(Команда)
	
	Если ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;                              
	
	ОбъектСсылка = Неопределено;
	
	Если ТекущийЭлемент.ТекущиеДанные <> Неопределено Тогда 		
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		
		Если ТекущиеДанные.Свойство("Задача") Тогда
			ОбъектСсылка = ТекущиеДанные.Задача;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		ИнтерфейсПриложенияКлиент.ОткрытьОкноНавигационнойСсылки(ОбъектСсылка, ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаявкуВыделеннойЗадачи(Команда)
	
	ТекущиеДанные = Элементы.Список_Контроль.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектОснование = ТекущиеДанные.ОбъектОснование; 
	
	Если ЗначениеЗаполнено(ОбъектОснование) Тогда
		ОткрытьФорму("Документ.ЗаявкаНаРазработку.Форма.ФормаДокумента", Новый Структура("Ключ", ОбъектОснование));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки_Контроль(Команда)
		
	ПараметрыОткрытия = Новый Структура("КлючХранилища, ПользовательскиеНастройки", КлючНастроекСписка(), НастройкиФормы);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьСохранениеНастроек", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.НастройкиДинамическогоСписка", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкуДинамическогоСписка(Команда)
	
	НастройкиОтборов = ОбщегоНазначенияВызовСервера.ПолучитьНастройкиХранилищеНастроекДинамическихСписков(
		КлючНастроекСписка(), ВариантыНастроек, Команда.Имя);	 
	
	Если НастройкиОтборов <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НастройкиФормы, НастройкиОтборов);
		
		Если НастройкиОтборов.Свойство("Контроль_Исполнители") Тогда
			Контроль_Исполнители = НастройкиОтборов.Контроль_Исполнители;
		КонецЕсли;
		
		Если НастройкиОтборов.Свойство("ТекущийФилиал_Контроль") Тогда
			Контроль_ФилиалIT = НастройкиОтборов.ТекущийФилиал_Контроль;
		КонецЕсли;
		
		ОбновитьДанныеИнструмента();
	КонецЕсли;		
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализацияНастроекКолонок()
	
	Ключи = ПолучитьКлючиНастроекКолонокКонтроль();
	НастройкиПоУмолчанию = НастройкиКолонокКонтрольПоУмолчанию();
	НастройкиКолонокКонтроль = ИнтерфейсПриложенияВызовСервера.ЗаполнитьПользовательскиеНастройки(НастройкиПоУмолчанию, Ключи);
		
	ИнтерфейсПриложенияКлиентСервер.ПрименитьПользовательскиеНастройки(Элементы, НастройкиКолонокКонтроль);
	ОбновитьПорядокКолонок("Список_Контроль", НастройкиКолонокКонтроль.Порядок);   
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючНастроекСписка()
	
	Возврат "Обработка.КонтрольЗадач.Форма.ФормаОбработки.Настройки_Контроль";
	
КонецФункции

&НаКлиенте
Процедура Контроль_ОбработатьВыборНастроек(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиИзменены = Ложь;
	
	// Проверка изменения отбора по группе заказчиков
	СтарыйОтбор = НастройкиФормы.Отбор_Контроль.ГруппаЗаказчиков;
	НовыйОтбор = Результат.ВыбранныеГруппыЗаказчиков;
	СпискиРазличаются = ОбщегоНазначенияКлиент.СпискиЗначенийРазличаются(СтарыйОтбор, НовыйОтбор);
	
	Если СпискиРазличаются Тогда
		НастройкиФормы.Отбор_Контроль.ГруппаЗаказчиков = НовыйОтбор;
		НастройкиИзменены = Истина;
	КонецЕсли;
	
	// Проверка изменения отбора по системе
	СтарыйОтбор =  НастройкиФормы.Отбор_Контроль.Система;
	НовыйОтбор = Результат.ВыбранныеСистемы;
	СпискиРазличаются = ОбщегоНазначенияКлиент.СпискиЗначенийРазличаются(СтарыйОтбор, НовыйОтбор);
	
	Если СпискиРазличаются Тогда
		НастройкиФормы.Отбор_Контроль.Система = Результат.ВыбранныеСистемы;
		НастройкиИзменены = Истина;
	КонецЕсли;
	
	// Проверка изменения отбора по продукту
	СтарыйОтбор =  НастройкиФормы.Отбор_Контроль.Продукт;
	НовыйОтбор = Результат.ВыбранныеПродукты;
	СпискиРазличаются = ОбщегоНазначенияКлиент.СпискиЗначенийРазличаются(СтарыйОтбор, НовыйОтбор);
	
	Если СпискиРазличаются Тогда
		НастройкиФормы.Отбор_Контроль.Продукт = Результат.ВыбранныеПродукты;
		НастройкиИзменены = Истина;
	КонецЕсли;
	
	// Проверка изменения отбора по статусу
	СтарыйОтбор =  НастройкиФормы.Отбор_Контроль.Статус;
	НовыйОтбор = Результат.ВыбранныеСтатусы;
	СпискиРазличаются = ОбщегоНазначенияКлиент.СпискиЗначенийРазличаются(СтарыйОтбор, НовыйОтбор);
	
	Если СпискиРазличаются Тогда
		НастройкиФормы.Отбор_Контроль.Статус = Результат.ВыбранныеСтатусы;
		НастройкиИзменены = Истина;
	КонецЕсли;
	
	Если НастройкиИзменены Тогда
		ОбновитьДанныеИнструмента();
	КонецЕсли;

	СохранитьНастройкиФормы(НастройкиФормы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НастройкиКолонокКонтрольПоУмолчанию()
	
	// Порядок колонок в коде влияет на заполнение по умолчанию
	Состав = Новый СписокЗначений;
	Состав.Добавить("Список_КонтрольНазначенаПредставление", "Назначена", Истина);
	Состав.Добавить("Список_КонтрольИсполнитель", "Исполнитель", Истина);
	Состав.Добавить("Список_КонтрольСтатус", "Статус", Ложь);
	Состав.Добавить("Список_КонтрольДнейНа", "Дней на", Ложь);
	Состав.Добавить("Список_КонтрольАктивность", "Активность", Ложь);
	Состав.Добавить("Список_КонтрольТребуетсяПубликация", "Требуется Публикация", Ложь);
	Состав.Добавить("Список_КонтрольПубликация", "Опубликовано", Ложь);
	Состав.Добавить("Список_КонтрольСистема", "Система", Истина);
	Состав.Добавить("Список_КонтрольГруппаЗаказчиков", "Группа заказчиков", Ложь);
	Состав.Добавить("Список_КонтрольПродукт", "Продукт", Ложь);
	
	ПорядковыйНомер = 1;
	Порядок = Новый Соответствие;
	
	Для Каждого ЭлементСписка Из Состав Цикл
		СтруктураПоля = Новый Структура("Поле, Представление", ЭлементСписка.Значение, ЭлементСписка.Представление);
		Порядок.Вставить(ПорядковыйНомер, СтруктураПоля);
		
		ПорядковыйНомер = ПорядковыйНомер + 1;
	КонецЦикла;
	
	Результат = Новый Структура("Состав, Порядок", Состав, Порядок);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьОбновлениеУправлениеНагрузкой()
	
	МетодОбновления = "Обработки.КонтрольЗадач.ПолучитьДанныеСписок_Контроль";
	
	НастройкиСписка = НастройкиФормы.Список_Контроль;
	
	ПередаваемыеПараметры = Новый Структура;
	ПередаваемыеПараметры.Вставить("ВыбранныеФилиалы", Контроль_ФилиалIT);
	ПередаваемыеПараметры.Вставить("ВыбранныеИсполнители", Контроль_Исполнители);
	ПередаваемыеПараметры.Вставить("Список_Контроль", НастройкиСписка);
	ПередаваемыеПараметры.Вставить("Фильтры", НастройкиФормы.Отбор_Контроль);
	
	ПараметрыФонового = Новый Массив;
	ПараметрыФонового.Добавить(ПередаваемыеПараметры);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыделеннаяСтрока", НастройкиСписка.ВыделеннаяСтрока);
	
	ИнструментыКлиент.НачатьОбновлениеИнструмента(ЭтотОбъект, МетодОбновления,
		ПараметрыФонового, Элементы.Список_Контроль.Имя, ДополнительныеПараметры, "ОбработатьДанныеСписок_Контроль");
		
	Элементы.Контроль_ФилиалIT.ТолькоПросмотр = Истина;
	Элементы.Контроль_Исполнители.ТолькоПросмотр = Истина;
	Элементы.Контроль_ГруппаНастройки.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеИнструмента() Экспорт
	
	ИнструментыКлиент.ОбновлениеДанныхЗапущено(ЭтотОбъект);
	
	ЗапуститьОбновлениеУправлениеНагрузкой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеСписок_Контроль() Экспорт
	
	ИнструментыКлиент.ОбработатьОтложенноеОбновлениеИнструмента(ЭтотОбъект, Элементы.Список_Контроль.Имя, "Обработки.КонтрольЗадач.ПолучитьДанныеСписок_Контроль");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОбновленияИнструмента(Данные, ДополнительныеПараметры) Экспорт
	
	ЭлементыДерева = ЭтотОбъект[ДополнительныеПараметры.ОбновляемаяТаблица].ПолучитьЭлементы();
	ИнструментыКлиент.ЗаполнитьДанныеИнструмента(ЭлементыДерева, Данные, ДополнительныеПараметры.МетодОбновления);
	
	НастройкиСписка = НастройкиФормы[ДополнительныеПараметры.ОбновляемаяТаблица];
	НастройкиСписка.ВыделеннаяСтрока = ДополнительныеПараметры.ВыделеннаяСтрока;
	
	Подключаемый_СохранитьНастройкиФормы();
	
	УправлениеИнструментамиРазработкиКлиент.ВосстановитьДанныеФормыВПредыдущееСостояние(ЭтотОбъект,
		ДополнительныеПараметры.ОбновляемаяТаблица, НастройкиСписка);
	
	Элементы.Контроль_ФилиалIT.ТолькоПросмотр = Ложь;
	Элементы.Контроль_Исполнители.ТолькоПросмотр = Ложь;
	Элементы.Контроль_ГруппаНастройки.ТолькоПросмотр = Ложь;
	
	ИнструментыКлиент.ЗакончитьОбновлениеИнструмента(ЭтотОбъект, ДополнительныеПараметры, Данные.УИДЗамера);
	
КонецПроцедуры

&НаСервере
Процедура ОбновлениеПользовательскихНастроекДинамическогоСписка()
	
	Свойства = Новый Структура("КлючНастройкиСписка, ПользовательскиеНастройкиСписка");	
	
	Свойства.КлючНастройкиСписка = Новый Массив;
	Свойства.КлючНастройкиСписка.Добавить(КлючНастроекСписка());
	
	Свойства.ПользовательскиеНастройкиСписка = Новый Массив;
	Свойства.ПользовательскиеНастройкиСписка.Добавить(Элементы.Контроль_ПользовательскиеНастройки);

	ОбщегоНазначенияВызовСервера.ПользовательскиеНастройкиДинамическогоСписка(
		Свойства.КлючНастройкиСписка, ВариантыНастроек, ЭтотОбъект,
		Свойства.ПользовательскиеНастройкиСписка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПорядокКолонок(Знач ИмяТаблицы, Знач Порядок)
	
	ТаблицаЭлемента = Элементы[ИмяТаблицы];
	ИнтерфейсПриложения.ОбновитьПорядокКолонокНаСервере(Порядок, Элементы, ТаблицаЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеНастроекКолонок(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполняемыеСвойства = "Состав, Порядок";
	
	ЗаполнитьЗначенияСвойств(НастройкиКолонокКонтроль, Результат, ЗаполняемыеСвойства);
	Ключи = ПолучитьКлючиНастроекКолонокКонтроль();		
	Настройки = НастройкиКолонокКонтроль;
	
	ИнтерфейсПриложенияКлиентСервер.ПрименитьПользовательскиеНастройки(Элементы, Настройки);
	
	Если Результат.ИзменилсяПорядок Тогда
		ОбновитьПорядокКолонок(ДополнительныеПараметры.ИмяТаблицы, Настройки.Порядок);
	КонецЕсли;
	
	// Сохранение пользовательских настроек
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(Ключи.Объект, Ключи.Настройка, Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСохранениеНастроек(Результат, ПараметрыОткрытия) Экспорт
	
	ОбновлениеПользовательскихНастроекДинамическогоСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СохранитьНастройкиФормы()
	
	СохранитьНастройкиФормы(НастройкиФормы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКлючиНастроекКолонокКонтроль()
		
	Возврат Новый Структура("Объект, Настройка", 
		"Обработка.КонтрольЗадач.Форма.ФормаОбработки", "НастройкаКолонокКонтроль");
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиФормы()
	
	Перем ЗначениеНастройки;
	
	// Создание пустой структуры настроек
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("ТекущийФилиал_Контроль", Новый СписокЗначений);
	НастройкиФормы.Вставить("Контроль_Исполнители", Новый СписокЗначений);
	
	// Параметры списка
	НастройкиСписка = Новый Структура("ВыделеннаяСтрока, РазвернутыеСтроки, Направления",
		Неопределено, Новый Соответствие, Новый Соответствие);
		
	НастройкиФормы.Вставить("Список_Контроль", НастройкиСписка);
	
	// Для хранения отборов
	НастройкиФормы.Вставить("Отбор_Контроль", Новый Структура);
	НастройкиФормы.Отбор_Контроль.Вставить("ГруппаЗаказчиков", Новый СписокЗначений);
	НастройкиФормы.Отбор_Контроль.Вставить("Система", Новый СписокЗначений);
	НастройкиФормы.Отбор_Контроль.Вставить("Продукт", Новый СписокЗначений);
	НастройкиФормы.Отбор_Контроль.Вставить("Статус", Новый СписокЗначений);
		
	СвойстваНастройки = СвойстваСохраняемойНастройки();
	
	// Восстановление сохраненных параметров
	СохраненныеНастройки = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(
		СвойстваНастройки.КлючОбъекта, СвойстваНастройки.КлючНастроек);
			
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда		
		// Перебор всех элементом структуры настроек. Если элемент найден в сохраненной
		// настройке, его значение присваивается исходному свойству. В противном случае
		// используется значение по-умолчанию.
		Для Каждого Настройка Из НастройкиФормы Цикл
			ИмяКлюча = Настройка.Ключ;
			
			// Если значение сохраненной настройки не существует
			Если НЕ СохраненныеНастройки.Свойство(ИмяКлюча, ЗначениеНастройки) Тогда
				Продолжить;
			КонецЕсли;
			
			// Если типы настроек соответствуют, присваиваем значение
			Если ТипЗнч(Настройка.Значение) = ТипЗнч(ЗначениеНастройки) Тогда
				НастройкиФормы.Вставить(ИмяКлюча, ЗначениеНастройки);
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли; 	
	
	Если НастройкиФормы.ТекущийФилиал_Контроль.Количество() <> 0 Тогда
		Контроль_ФилиалIT = НастройкиФормы.ТекущийФилиал_Контроль;
	Иначе
		Контроль_ФилиалIT.Добавить(ПараметрыСеанса.Филиал);
		НастройкиФормы.ТекущийФилиал_Контроль = Контроль_ФилиалIT;
	КонецЕсли;	
	
	Возврат НастройкиФормы;
	
КонецФункции

&НаКлиенте
Процедура ПослеОтметкиЭлементов_Контроль_Филиалы(Знач Результат, Знач ДополнительныеДанные) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контроль_ФилиалIT = Результат;
	НастройкиФормы.ТекущийФилиал_Контроль = Контроль_ФилиалIT;
	
	ОбновитьДанныеИнструмента();
					
КонецПроцедуры

&НаСервереБезКонтекста
Функция СвойстваСохраняемойНастройки()
	
	Возврат Новый Структура("КлючОбъекта, КлючНастроек", "Обработка.КонтрольЗадач.Форма.ФормаОбработки", "НастройкиФормы");
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормы(Знач Настройки)
	
	СвойстваНастроек = СвойстваСохраняемойНастройки();
	
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(СвойстваНастроек.КлючОбъекта,
		СвойстваНастроек.КлючНастроек, Настройки);
	
КонецПроцедуры

#КонецОбласти
