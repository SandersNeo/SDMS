///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если НЕ РольДоступна("Администратор") Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав доступа.
		                             |
		                             |Работа с регламентными и фоновыми заданиями
		                             |выполняется только администраторами.'");		
	КонецЕсли;
								 
	ПустойИдентификатор = Строка(Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	ТекстНеОпределено = РегламентныеЗаданияСервер.ТекстНеОпределено();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если НЕ НастройкиЗагружены Тогда
		ЗаполнитьНастройкиФормы(Новый Соответствие);
	КонецЕсли;
	
	ОбновитьТаблицуРегламентныхЗаданийНаКлиенте();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписьЭлементаСправочникаСлужебныеФоновыеЗадания"
		И Источник = "Справочник.СлужебныеФоновыеЗадания.ФормаЭлемента" Тогда
		
		ОбновитьСвойстваСлужебногоФоновогоЗадания(Параметр);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ВидОтбораПоПериодуПриИзменении(Элемент)
	
	ТекущаяДатаСеанса = ТекущаяДатаСеансаНаСервере();
	
	Элементы.ОтборПериодС.ТолькоПросмотр  = НЕ (ВидОтбораПоПериоду = 4);
	Элементы.ОтборПериодПо.ТолькоПросмотр = НЕ (ВидОтбораПоПериоду = 4);
	
	Если ВидОтбораПоПериоду = 0 Тогда
		ОтборПериодС  = '00010101';
		ОтборПериодПо = '00010101';
		Элементы.УстановкаПроизвольногоПериода.Видимость = Ложь;
	ИначеЕсли ВидОтбораПоПериоду = 4 Тогда
		ОтборПериодС  = НачалоЧаса(ТекущаяДатаСеанса) - 2 * 3600;
		ОтборПериодПо = КонецЧаса(ТекущаяДатаСеанса);
		Элементы.УстановкаПроизвольногоПериода.Видимость = Истина;
	Иначе
		ОбновитьАвтоматическийПериод(ЭтотОбъект, ТекущаяДатаСеанса);
		Элементы.УстановкаПроизвольногоПериода.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ФоновыеЗадания И НЕ СтраницаФоновыеЗаданияОткрывалась Тогда
		СтраницаФоновыеЗаданияОткрывалась = Истина;
		ОбновитьТаблицуФоновыхЗаданий();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ТаблицаРегламентныеЗадания"

&НаКлиенте
Процедура ТаблицаРегламентныеЗаданияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	НайденнаяСтрока = ТаблицаРегламентныеЗадания.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если НЕ НайденнаяСтрока.СлужебноеЗадание.Пустая() Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Ключ", НайденнаяСтрока.СлужебноеЗадание); 
		ПараметрыОткрытия.Вставить("ОповеститьПриИзмененииСвойств", Истина); 
		
		ОткрытьФорму("Справочник.СлужебныеФоновыеЗадания.ФормаОбъекта", ПараметрыОткрытия, ,
			НайденнаяСтрока.СлужебноеЗадание);
	Иначе
		Если Поле = "Предопределенное" ИЛИ Поле = "Использование" Тогда
			ДобавитьСкопироватьИзменитьРегламентноеЗадание("Изменить");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРегламентныеЗаданияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ДобавитьСкопироватьИзменитьРегламентноеЗадание(?(Копирование, "Скопировать", "Добавить"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРегламентныеЗаданияПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ДобавитьСкопироватьИзменитьРегламентноеЗадание("Изменить");	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРегламентныеЗаданияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элементы.ТаблицаРегламентныеЗадания.ВыделенныеСтроки.Количество() > 1 Тогда
		ПоказатьПредупреждение(, "Выберите одно регламентное задание.");
		
	ИначеЕсли Элемент.ТекущиеДанные.Предопределенное Тогда
		ПоказатьПредупреждение(, "Невозможно удалить предопределенное регламентное задание.");
	Иначе
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ТаблицаРегламентныеЗаданияПередУдалениемЗавершение", ЭтотОбъект),
			"Удалить регламентное задание?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ТаблицаРегламентныеЗадания"

&НаКлиенте
Процедура ТаблицаФоновыеЗаданияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьФоновоеЗадание();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаРегламентныеЗадания.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, "Выберите регламентное задание.");
	
	ИначеЕсли Элементы.ТаблицаРегламентныеЗадания.ВыделенныеСтроки.Количество() > 1 Тогда
		ПоказатьПредупреждение(, "Выберите одно регламентное задание.");
	Иначе
		Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ПолучитьРасписание(ТекущиеДанные.Идентификатор));
		Диалог.Показать(Новый ОписаниеОповещения("ОткрытьРасписаниеЗавершение", ЭтотОбъект, ТекущиеДанные));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРегламентныеЗадания(Команда)
	
	Если Элементы.Задания.ТекущаяСтраница = Элементы.ФоновыеЗадания Тогда
		ОбновитьТаблицуФоновыхЗаданий();
	Иначе
		ОбновитьТаблицуРегламентныхЗаданийНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФоновоеЗаданиеНаКлиенте()
	
	ОткрытьФоновоеЗадание();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьФоновоеЗадание(Команда)
	
	Если Элементы.ТаблицаФоновыеЗадания.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, "Выберите фоновое задание.");
	Иначе
		ОтменитьФоновоеЗаданиеНаСервере(Элементы.ТаблицаФоновыеЗадания.ТекущиеДанные.Идентификатор);
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Задание отменено, но состояние отмены будет
			           |установлено сервером только через секунды,
			           |возможно потребуется обновить данные вручную.'"));
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеСостояниемАвтоматическогоВыполненияЗаданий(Команда)
	
	ВыделенныеСтроки = Элементы.ТаблицаРегламентныеЗадания.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		Включить = (Команда.Имя = "ВключитьВыполнениеВыделенныеЗаданий");
		ИзменитьСостояниеАвтоматическогоВыполненияВыделенныхЗаданий(Включить);
	Иначе
		ПоказатьПредупреждение(, "Не выбраны регламентные или служебные фоновые задания.", ,
			"Управление выполнением задания");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы со служебными фоновыми заданиями

// Заполняет строку таблицы значениями свойств служебного фонового задания.
//
// Параметры:
//  Задание        - Структура - структура со свойствами элемента справочника
//                   СлужебныеФоновыеЗадания.
//  ФоновоеЗадание - Структура - структура со свойствами фонового задания.
//  СтрокаТаблицы  - СтрокаТаблицы - строка таблицы ТаблицаРегламентныеЗадания.
//
&НаСервере
Процедура ЗаполнитьСвойстваСтрокиСлужебногоЗадания(Знач Задание, Знач ФоновоеЗадание, СтрокаТаблицы)
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Задание, 
		"Использование, Наименование, Предопределенное, СлужебноеЗадание");
			
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ФоновоеЗадание, 
		"СостояниеВыполнения, ДатаНачала, ДатаОкончания, Идентификатор");
	
КонецПроцедуры

// Заполняет таблицу ТаблицаРегламентныеЗадания свойствами служебных фоновых заданий.
//
&НаСервере
Процедура ЗаполнитьСлужебныеФоновыеЗадания()
	
	// Получение списка служебных фоновых заданий
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СлужебныеФоновыеЗадания.Использование КАК Использование,
	|	СлужебныеФоновыеЗадания.Код КАК Ключ,
	|	СлужебныеФоновыеЗадания.Наименование КАК Наименование,
	|	СлужебныеФоновыеЗадания.Предопределенный КАК Предопределенное,
	|	СлужебныеФоновыеЗадания.ИмяМетода КАК ИмяМетода,
	|	СлужебныеФоновыеЗадания.Ссылка КАК СлужебноеЗадание
	|ИЗ
	|	Справочник.СлужебныеФоновыеЗадания КАК СлужебныеФоновыеЗадания";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		ОтборФоновыхЗаданий = ОтборСлужебногоФоновогоЗадания();
		КартинкаТипаЗадания = БиблиотекаКартинок.СтатусНаДоработку;
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ОтборФоновыхЗаданий, Выборка);
			СвойстваФоновогоЗадания = ПолучитьСвойстваСлужебногоФоновогоЗадания(ОтборФоновыхЗаданий);
			
			НоваяСтрока = ТаблицаРегламентныеЗадания.Добавить();
			НоваяСтрока.КартинкаТипаЗадания = КартинкаТипаЗадания;
			
			ЗаполнитьСвойстваСтрокиСлужебногоЗадания(Выборка, СвойстваФоновогоЗадания, НоваяСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвойстваСлужебногоФоновогоЗадания(Знач СвойстваЗадания)
	
	ОтборСтрок = Новый Структура("СлужебноеЗадание", СвойстваЗадания.СлужебноеЗадание);
	НайденныеСтроки = ТаблицаРегламентныеЗадания.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() = 1 Тогда
		Отбор = ОтборСлужебногоФоновогоЗадания();
		Отбор.Ключ = СвойстваЗадания.Код;
		Отбор.Наименование = СвойстваЗадания.Наименование;
		Отбор.ИмяМетода = СвойстваЗадания.ИмяМетода;
		
		СвойстваФоновогоЗадания = ПолучитьСвойстваСлужебногоФоновогоЗадания(Отбор);
		
		СтрокаТаблицы = НайденныеСтроки[0];
		ТекущееНаименование = СтрокаТаблицы.Наименование;
		
		ЗаполнитьСвойстваСтрокиСлужебногоЗадания(СвойстваЗадания, СвойстваФоновогоЗадания, СтрокаТаблицы);
		
		// Если у задания изменилось наименование, необходимо упорядочить таблицу
		Если ТекущееНаименование <> СтрокаТаблицы.Наименование Тогда
			ТаблицаРегламентныеЗадания.Сортировать("Наименование");
		КонецЕсли;
	Иначе
		ОбновитьТаблицуРегламентныхЗаданий();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОтборСлужебногоФоновогоЗадания()
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ");
	Отбор.Вставить("Наименование");
	Отбор.Вставить("ИмяМетода");	
	
	Возврат Отбор;
	
КонецФункции

&НаСервере
Функция ПолучитьСвойстваСлужебногоФоновогоЗадания(Знач Отбор)
	
	СвойстваФоновогоЗадания = Новый Структура;
	СвойстваФоновогоЗадания.Вставить("СостояниеВыполнения");
	СвойстваФоновогоЗадания.Вставить("ДатаНачала");
	СвойстваФоновогоЗадания.Вставить("ДатаОкончания");
	СвойстваФоновогоЗадания.Вставить("Идентификатор");
	
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если МассивФоновыхЗаданий.Количество() > 0 Тогда
		ФоновоеЗадание = МассивФоновыхЗаданий[0];	
				
		СвойстваФоновогоЗадания.СостояниеВыполнения = ФоновоеЗадание.Состояние;
		СвойстваФоновогоЗадания.ДатаНачала = ФоновоеЗадание.Начало;
		СвойстваФоновогоЗадания.ДатаОкончания = ФоновоеЗадание.Конец;				
		СвойстваФоновогоЗадания.Идентификатор = ФоновоеЗадание.УникальныйИдентификатор;
	Иначе
		СвойстваФоновогоЗадания.СостояниеВыполнения = "Не выполнялось";
	КонецЕсли;
	
	Возврат СвойстваФоновогоЗадания;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

&НаКлиенте
Процедура ДобавитьСкопироватьИзменитьРегламентноеЗадание(Знач Действие)
	
	Если Элементы.ТаблицаРегламентныеЗадания.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, "Выберите регламентное задание.");
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Идентификатор", Элементы.ТаблицаРегламентныеЗадания.ТекущиеДанные.Идентификатор);
		ПараметрыФормы.Вставить("Действие",      Действие);
		
		ОткрытьФорму("Обработка.РегламентныеФоновыеЗадания.Форма.РегламентноеЗадание", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСостояниеАвтоматическогоВыполненияВыделенныхЗаданий(Знач Использование)
	
	ВыделенныеСтроки = Элементы.ТаблицаРегламентныеЗадания.ВыделенныеСтроки;
	
	Для Каждого Идентфикатор Из ВыделенныеСтроки Цикл
		СтрокаТаблицы = ТаблицаРегламентныеЗадания.НайтиПоИдентификатору(Идентфикатор);
		
		Если СтрокаТаблицы.СлужебноеЗадание.Пустая() Тогда
			РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(СтрокаТаблицы.Идентификатор);
			РегламентноеЗадание.Использование = Использование;
			РегламентноеЗадание.Записать();			
		Иначе
			СлужебноеЗадание = СтрокаТаблицы.СлужебноеЗадание.ПолучитьОбъект();
			СлужебноеЗадание.Использование = Использование;
			СлужебноеЗадание.Записать();
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьТаблицуРегламентныхЗаданий();
	
КонецПроцедуры

// Заполняет таблицу ТаблицаРегламентныеЗадания свойствами регламентных заданий.
//
&НаСервере
Процедура ЗаполнитьРегламентныеЗадания()
	
	КартинкаТипаЗадания = БиблиотекаКартинок.РегламентноеЗадание;
	
	// Получение списка регламентных заданий и их свойств
	МассивРегламентныхЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
	Для Каждого РегламентноеЗадание Из МассивРегламентныхЗаданий Цикл
		НоваяСтрока = ТаблицаРегламентныеЗадания.Добавить();
		НоваяСтрока.КартинкаТипаЗадания = КартинкаТипаЗадания;
		НоваяСтрока.Использование = РегламентноеЗадание.Использование;
		НоваяСтрока.Наименование = РегламентноеЗадание.Наименование;
		НоваяСтрока.ИмяПользователя = РегламентноеЗадание.ИмяПользователя;
		НоваяСтрока.Предопределенное = РегламентноеЗадание.Метаданные.Предопределенное;
		НоваяСтрока.Идентификатор = РегламентноеЗадание.УникальныйИдентификатор;
		НоваяСтрока.СлужебноеЗадание = Неопределено;
		
		Если РегламентноеЗадание.ПоследнееЗадание <> Неопределено Тогда
			ФоновоеЗадание = РегламентноеЗадание.ПоследнееЗадание;
			НоваяСтрока.СостояниеВыполнения = ФоновоеЗадание.Состояние;
			НоваяСтрока.ДатаНачала = ФоновоеЗадание.Начало;
			НоваяСтрока.ДатаОкончания = ФоновоеЗадание.Конец;
		Иначе
			НоваяСтрока.СостояниеВыполнения = "Не выполнялось";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиФормы(Знач Настройки)
	
	НастройкиПоУмолчанию = Новый Структура;
	
	// Настройка отбора фоновых заданий.
	Если Настройки.Получить("ОтборПоСостояниюАктивно") = Неопределено Тогда
		Настройки.Вставить("ОтборПоСостояниюАктивно", Истина);
	КонецЕсли;
	
	Если Настройки.Получить("ОтборПоСостояниюЗавершено") = Неопределено Тогда
		Настройки.Вставить("ОтборПоСостояниюЗавершено", Истина);
	КонецЕсли;
	
	Если Настройки.Получить("ОтборПоСостояниюЗавершеноАварийно") = Неопределено Тогда
		Настройки.Вставить("ОтборПоСостояниюЗавершеноАварийно", Истина);
	КонецЕсли;

	Если Настройки.Получить("ОтборПоСостояниюОтменено") = Неопределено Тогда
		Настройки.Вставить("ОтборПоСостояниюОтменено", Истина);
	КонецЕсли;
	
	Если Настройки.Получить("ОтбиратьПоРегламентномуЗаданию") = Неопределено
	 	ИЛИ Настройки.Получить("РегламентноеЗаданиеДляОтбораИдентификатор") = Неопределено Тогда
		
		Настройки.Вставить("ОтбиратьПоРегламентномуЗаданию", Ложь);
		Настройки.Вставить("РегламентноеЗаданиеДляОтбораИдентификатор", ПустойИдентификатор);
	КонецЕсли;
	
	// См. также обработчик события ВидОтбораПоПериодуПриИзменении переключателя.
	Если Настройки.Получить("ВидОтбораПоПериоду") = Неопределено 
		ИЛИ Настройки.Получить("ОтборПериодС") = Неопределено
	 	ИЛИ Настройки.Получить("ОтборПериодПо") = Неопределено Тогда
		
		Настройки.Вставить("ВидОтбораПоПериоду", 4);
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		Настройки.Вставить("ОтборПериодС",  НачалоЧаса(ТекущаяДатаСеанса) - 2 * 3600);
		Настройки.Вставить("ОтборПериодПо", КонецЧаса(ТекущаяДатаСеанса));
	КонецЕсли;
	
	Для Каждого Настройка Из Настройки Цикл
		НастройкиПоУмолчанию.Вставить(Настройка.Ключ, Настройка.Значение);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиПоУмолчанию);
	
	// Настройка видимости и доступности.
	Элементы.УстановкаПроизвольногоПериода.Видимость = (ВидОтбораПоПериоду = 4);
	Элементы.ОтборПериодС.ТолькоПросмотр  = НЕ (ВидОтбораПоПериоду = 4);
	Элементы.ОтборПериодПо.ТолькоПросмотр = НЕ (ВидОтбораПоПериоду = 4);
	//Элементы.РегламентноеЗаданиеДляОтбора.Доступность = ОтбиратьПоРегламентномуЗаданию;
	
	ОбновитьАвтоматическийПериод(ЭтотОбъект, ТекущаяДатаСеанса());
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьАвтоматическийПериод(Форма, ТекущаяДатаСеанса)
	
	Если Форма.ВидОтбораПоПериоду = 1 Тогда
		Форма.ОтборПериодС  = НачалоДня(ТекущаяДатаСеанса) - 3*3600;
		Форма.ОтборПериодПо = НачалоДня(ТекущаяДатаСеанса) + 9*3600;
		
	ИначеЕсли Форма.ВидОтбораПоПериоду = 2 Тогда
		Форма.ОтборПериодС  = НачалоДня(ТекущаяДатаСеанса) - 24*3600;
		Форма.ОтборПериодПо = КонецДня(Форма.ОтборПериодС);
		
	ИначеЕсли Форма.ВидОтбораПоПериоду = 3 Тогда
		Форма.ОтборПериодС  = НачалоДня(ТекущаяДатаСеанса);
		Форма.ОтборПериодПо = КонецДня(Форма.ОтборПериодС);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуРегламентныхЗаданий()
	
	ТаблицаРегламентныеЗадания.Очистить();
	
	ЗаполнитьРегламентныеЗадания();
	ЗаполнитьСлужебныеФоновыеЗадания();
	
	ТаблицаРегламентныеЗадания.Сортировать("Наименование");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуРегламентныхЗаданийНаКлиенте()
	
	Элементы.СтраницыОтложеннаяЗагрузкаРегламентныхЗаданий.ТекущаяСтраница = Элементы.СтраницаЗагрузкаРегламентныхЗаданий;
	
	ОбновитьТаблицуРегламентныхЗаданий();
	
	Элементы.СтраницыОтложеннаяЗагрузкаРегламентныхЗаданий.ТекущаяСтраница = Элементы.СтраницаРегламентныеЗадания;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуФоновыхЗаданий()
	
	Отбор = Новый Структура;
	
	ТаблицаФоновыеЗадания.Очистить();
	
	МассивСостояний = Новый Массив;
	Если ОтборПоСостояниюАктивно Тогда
		МассивСостояний.Добавить(СостояниеФоновогоЗадания.Активно);
	КонецЕсли;
	
	Если ОтборПоСостояниюЗавершено Тогда
		МассивСостояний.Добавить(СостояниеФоновогоЗадания.Завершено);
	КонецЕсли;
	
	Если ОтборПоСостояниюЗавершеноАварийно Тогда
		МассивСостояний.Добавить(СостояниеФоновогоЗадания.ЗавершеноАварийно);
	КонецЕсли;
	
	Если ОтборПоСостояниюОтменено Тогда
		МассивСостояний.Добавить(СостояниеФоновогоЗадания.Отменено);
	КонецЕсли;	
	
	Если МассивСостояний.Количество() > 0 Тогда
		Отбор.Вставить("Состояние", МассивСостояний);
	КонецЕсли;
	
	Если ВидОтбораПоПериоду <> 0 Тогда
		Отбор.Вставить("Начало", ОтборПериодС);
		Отбор.Вставить("Конец", ОтборПериодПо);
	КонецЕсли;
	
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Для Каждого ФоновоеЗадание Из МассивФоновыхЗаданий Цикл
		НоваяСтрока = ТаблицаФоновыеЗадания.Добавить();
		НоваяСтрока.ИмяМетода     = ФоновоеЗадание.ИмяМетода;
		НоваяСтрока.Ключ          = ФоновоеЗадание.Ключ;
		НоваяСтрока.Конец         = ФоновоеЗадание.Конец;
		НоваяСтрока.Наименование  = ФоновоеЗадание.Наименование;
		НоваяСтрока.Начало        = ФоновоеЗадание.Начало;
		НоваяСтрока.Расположение  = ФоновоеЗадание.Расположение;
		НоваяСтрока.Идентификатор = ФоновоеЗадание.УникальныйИдентификатор;
		НоваяСтрока.Состояние     = ФоновоеЗадание.Состояние;
		
		Если ФоновоеЗадание.РегламентноеЗадание <> Неопределено Тогда
			РегламентноеЗадание = ФоновоеЗадание.РегламентноеЗадание;
			НоваяСтрока.НаименованиеРегламентногоЗадания  = РегламентноеЗадание.Метаданные.Представление();
			НоваяСтрока.ИдентификаторРегламентногоЗадания = РегламентноеЗадание.УникальныйИдентификатор;
		КонецЕсли;
		
		Если ФоновоеЗадание.ИнформацияОбОшибке <> Неопределено Тогда
			НоваяСтрока.СообщенияПользователюИОписаниеИнформацииОбОшибке = ФоновоеЗадание.ИнформацияОбОшибке.Описание;
		Иначе
			НоваяСтрока.СообщенияПользователюИОписаниеИнформацииОбОшибке = "";
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеЗавершение(НовоеРасписание, ТекущиеДанные) Экспорт

	Если НовоеРасписание <> Неопределено Тогда
		УстановитьРасписание(ТекущиеДанные.Идентификатор, НовоеРасписание);
		ОбновитьТаблицуРегламентныхЗаданийНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФоновоеЗадание()
	
	Если Элементы.ТаблицаФоновыеЗадания.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, "Выберите фоновое задание.");
		Возврат;
	КонецЕсли;
	
	СписокПередаваемыхСвойств = "Идентификатор, Ключ, Наименование, ИмяМетода, Состояние, Начало, Конец,
		|Расположение, СообщенияПользователюИОписаниеИнформацииОбОшибке, ИдентификаторРегламентногоЗадания,
		|НаименованиеРегламентногоЗадания";
		
	ЗначенияТекущихДанных = Новый Структура(СписокПередаваемыхСвойств);
	ЗаполнитьЗначенияСвойств(ЗначенияТекущихДанных, Элементы.ТаблицаФоновыеЗадания.ТекущиеДанные);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор", Элементы.ТаблицаФоновыеЗадания.ТекущиеДанные.Идентификатор);
	ПараметрыФормы.Вставить("СвойстваФоновогоЗадания", ЗначенияТекущихДанных);
	
	ОткрытьФорму("Обработка.РегламентныеФоновыеЗадания.Форма.ФоновоеЗадание", ПараметрыФормы, ЭтотОбъект);	
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьФоновоеЗаданиеНаСервере(Знач Идентификатор)
	
	РегламентныеЗаданияСервер.ОтменитьФоновоеЗадание(Идентификатор);
	ОбновитьТаблицуФоновыхЗаданий();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРасписание(Знач ИдентификаторРегламентногоЗадания)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(ИдентификаторРегламентногоЗадания);
	
	Возврат Задание.Расписание;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаРегламентныеЗаданияПередУдалениемЗавершение(Ответ, Неопределен) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УдалитьРегламентноеЗаданиеВыполнитьНаСервере(
			Элементы.ТаблицаРегламентныеЗадания.ТекущиеДанные.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекущаяДатаСеансаНаСервере()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

&НаСервере
Процедура УдалитьРегламентноеЗаданиеВыполнитьНаСервере(Знач Идентификатор)
	
	Задание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(Идентификатор);
	СтрокаТаблицы = ТаблицаРегламентныеЗадания.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор))[0];
	Задание.Удалить();
	ТаблицаРегламентныеЗадания.Удалить(ТаблицаРегламентныеЗадания.Индекс(СтрокаТаблицы));
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьРасписание(Знач ИдентификаторРегламентногоЗадания, Знач Расписание)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(ИдентификаторРегламентногоЗадания);
	Задание.Расписание = Расписание;
	Задание.Записать();	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Конец.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаФоновыеЗадания.Конец");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<>'"));
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеВыполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаРегламентныеЗадания.СостояниеВыполнения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = '<не определено>'");
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаОкончания.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаРегламентныеЗадания.ДатаОкончания");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = '<не определено>'");
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаНачала.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаРегламентныеЗадания.ДатаНачала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = '<не определено>'");
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Использование.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Наименование.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СостояниеВыполнения.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаОкончания.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаНачала.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмяПользователя.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Предопределенное.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаРегламентныеЗадания.ИмяЗадания");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ОтключенныеЗадания;
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРегламентныеЗаданияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаРегламентныеЗадания.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.ТаблицаРегламентныеЗаданияНастроитьРасписание.Доступность = (ТекущиеДанные.СлужебноеЗадание.Пустая());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
