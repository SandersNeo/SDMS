///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем ПолученОтветПередЗакрытием; // Для проверки необходимости сохранения данных перед закрытием формы

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ИнтеграцияДополнительныхПодсистем.НачатьЗамерВремени();
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ЗагрузитьПользовательскиеНастройки();
	
	ЭтоАдминистратор = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("Администратор");
	
	Если НЕ ЭтоАдминистратор Тогда
		ФилиалыПользователя = Справочники.Филиалы.ПолучитьВсеФилиалыРуководителя(ТекущийПользователь);
		
		Если ФилиалыПользователя.Количество() = 0 Тогда
			ФилиалыПользователя.Добавить(ПараметрыСеанса.Филиал);
			Элементы.Сотрудники.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Период = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтаНеделя);
	
	ЗаполнитьТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПолученОтветПередЗакрытием = Ложь;
	РазвернутьСтроки();
	
	ИнтеграцияДополнительныхПодсистем.ЗакончитьЗамерВремени("ПланируемыеРаботыПоЗадачам.ОткрытиеФормы", ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И НЕ ЗавершениеРаботы И НЕ ПолученОтветПередЗакрытием Тогда
		Отказ = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветНаСохранениеПередЗакрытиемФормы", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Записать несохраненные данные?", РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = СобытияОповещенияКлиент.ИмяСобытияДобавленияТрудозатрат() Тогда 
		
		Если НЕ ЗначениеЗаполнено(Источник) Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеТрудозатрат = ПолучитьДанныеТрудозатрат(Источник, Параметр, Трудозатраты, ИдентификаторыРабот);
		
		Если ДанныеТрудозатрат = Неопределено Тогда
			Возврат;	
		КонецЕсли; 
		
		Если ДанныеТрудозатрат.ЭтоНовыйДокумент Тогда
			СтрокаТрудозатраты = Трудозатраты.Добавить();
			СтрокаТрудозатраты.Документ = Источник;
			СтрокаТрудозатраты.Задача = Параметр;
			СтрокаТрудозатраты.Сотрудник = ДанныеТрудозатрат.Пользователь;
			СтрокаТрудозатраты.Дата = ДанныеТрудозатрат.Дата;
			СтрокаТрудозатраты.Время = ДанныеТрудозатрат.Дата;
		Иначе
			СтрокаТрудозатраты = НайтиСтрокуТрудозатрат(Источник);
		КонецЕсли;
		
		Если ДанныеТрудозатрат.Проведен Тогда
			СтрокаТрудозатраты.Затрата = ДанныеТрудозатрат.Затрата;
			СтрокаТрудозатраты.ВидДеятельности = ДанныеТрудозатрат.ВидДеятельности;
			СтрокаТрудозатраты.Комментарий = ДанныеТрудозатрат.Комментарий;
		Иначе
			Трудозатраты.Удалить(СтрокаТрудозатраты);
		КонецЕсли;
		
		ТекущиеДанные = ПланируемыеРаботы.НайтиПоИдентификатору(ДанныеТрудозатрат.ИдентификаторСтроки);
		ТекущиеДанные.ФактЧасы = ДанныеТрудозатрат.ФактЧасы;
		ТекущиеДанные.ФактОписание = ДанныеТрудозатрат.ФактОписание;
		
		ПересчитатьЧасы(ТекущиеДанные, "ФактЧасы");
		
		ИтоговаяТаблицаПересчитатьПоЗадаче(Параметр);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СотрудникиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВыбранныеПользователи", Сотрудники);
	
	Если ФилиалыПользователя.Количество() > 0 Тогда
		ПараметрыОткрытия.Вставить("Филиалы", ФилиалыПользователя);
	КонецЕсли; 
	
	ОткрытьФорму("Справочник.Пользователи.Форма.МножественныйВыбор", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	Сотрудники.ЗагрузитьЗначения(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланируемыеРаботыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Задача) Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ПланируемыеРаботыПредставлениеГруппировки" Тогда
		ПоказатьЗначение(, ТекущиеДанные.Задача);
		
	ИначеЕсли Поле.Имя = "ПланируемыеРаботыФактОписание" ИЛИ Поле.Имя = "ПланируемыеРаботыФактЧасы" Тогда
		СписокВыбора = ПолучитьСписокТрудозатратОбъекта(ТекущиеДанные);
		
		Если СписокВыбора.Количество() > 1 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборДобавленияТрудозатрат", ЭтотОбъект, ТекущиеДанные.Задача);
			ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВыбора, Поле);
		Иначе
			ДобавитьФактическиеТрудозатраты(ТекущиеДанные.Задача);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланируемыеРаботыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.ПланируемыеРаботы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Задача) Тогда
		Родитель = ТекущиеДанные.ПолучитьРодителя();
	Иначе
		Родитель = ТекущиеДанные;
	КонецЕсли; 
	
	ДобавленныеЗадачи = ПолучитьСписокЗадачЗаДень(Родитель);
	ОткрытьФормуПодбораЗадач(Родитель, ДобавленныеЗадачи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланируемыеРаботыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ПланируемыеРаботы.ТекущиеДанные;
	
	Если ТекущиеДанные.ДоступноРедактирование И ЗначениеЗаполнено(ТекущиеДанные.Задача) Тогда
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ФактЧасы) Тогда
			СтрокаИдентификатор = НайтиИдентификаторРабот(ТекущиеДанные);
			ИдентификаторыРабот.Удалить(СтрокаИдентификатор);
			
			ПересчитатьЧасы(ТекущиеДанные, "ПланЧасы", -ТекущиеДанные.ПланЧасы);
		Иначе
			ТекущиеДанные.ПланЧасы = 0;
			ТекущиеДанные.ПланОписание = "";
			
			Отказ = Истина;
			Модифицированность = Истина;
			
			ПересчитатьЧасы(ТекущиеДанные, "ПланЧасы");
		КонецЕсли;
		
		ИтоговаяТаблицаПересчитатьПоЗадаче(ТекущиеДанные.Задача);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланируемыеРаботыПланЧасыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПланируемыеРаботы.ТекущиеДанные;
	ПересчитатьЧасы(ТекущиеДанные, "ПланЧасы");
	ИтоговаяТаблицаПересчитатьПоЗадаче(ТекущиеДанные.Задача);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланируемыеРаботыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьРедактирования();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ДобавитьТрудозатраты(Команда)
	
	ТекущиеДанные = Элементы.ПланируемыеРаботы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.Задача) Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбора = ПолучитьСписокТрудозатратОбъекта(ТекущиеДанные);
	
	Если СписокВыбора.Количество() > 1 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборДобавленияТрудозатрат", ЭтотОбъект, ТекущиеДанные.Задача);
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВыбора, Элементы.ПланируемыеРаботы.ТекущийЭлемент);
	Иначе
		ДобавитьФактическиеТрудозатраты(ТекущиеДанные.Задача);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохранитьНаСервере(ПланируемыеРаботы, ИмяФормы);
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СдвигПериодаВперед(Команда)
	
	Период = ОбщегоНазначенияКлиент.СдвигПериода(Команда.Имя, Период);
	
КонецПроцедуры

&НаКлиенте
Процедура СдвигПериодаНазад(Команда)
	
	Период = ОбщегоНазначенияКлиент.СдвигПериода(Команда.Имя, Период);
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	Если НЕ Модифицированность Тогда
		СформироватьОтчет();
	Иначе
		ТекстВопроса = "Записать несохраненные данные?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветНаВопросСохраненияДанных", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура ДобавитьЗаписиПланируемыеРаботы(НаборЗаписей, СтрокаДата)
	
	НаборЗаписей.Отбор.Сотрудник.Установить(СтрокаДата.Сотрудник);
	НаборЗаписей.Отбор.Дата.Установить(СтрокаДата.Дата);
	
	Для Каждого СтрокаЗадача Из СтрокаДата.ПолучитьЭлементы() Цикл
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаЗадача, "Сотрудник, Дата, Задача");
		Запись.План = СтрокаЗадача.ПланЧасы;
		Запись.Описание = СтрокаЗадача.ПланОписание;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	НаборЗаписей.Очистить();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьФактическиеТрудозатраты(Задача)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Объект", Задача);
	ПараметрыОткрытия.Вставить("СкрытьСлужебныеПоля", Истина);
	
	ОткрытьФорму("Документ.Трудозатраты.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПользовательскиеНастройки()
	
	Ключи = ПолучитьКлючиНастроек();
	
	СохраненныеНастройки = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(Ключи.КлючОбъекта, Ключи.КлючНастроек);
	
	Если СохраненныеНастройки = Неопределено Тогда
		СохраненныеНастройки = Новый Структура;
	КонецЕсли;
	
	Если НЕ СохраненныеНастройки.Свойство("Сотрудники", Сотрудники) Тогда
		Сотрудники.Добавить(ТекущийПользователь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатыПланирования(СтрокаРодитель, ВыборкаСотрудников, ЗаполнитьПланРодителя = Ложь)
	
	ПланЧасыРодитель = 0;
	
	ВыборкаДат = ВыборкаСотрудников.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДат.Следующий() Цикл
		СтрокаДата = СтрокаРодитель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДата, ВыборкаДат, , "ПланОписание");
		СтрокаДата.ЭтоГруппа = Истина;
		
		СтрокаДата.ПредставлениеГруппировки = Формат(ВыборкаДат.Дата, "ДФ='dd.MM.yyyy ддд'");
		
		ПланЧасыДата = 0;
		
		ВыборкаЗадач = ВыборкаДат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗадач.Следующий() И ЗначениеЗаполнено(ВыборкаЗадач.Задача) Цикл
			СтрокаЗадача = СтрокаДата.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗадача, ВыборкаЗадач);
			СтрокаЗадача.ПредставлениеГруппировки = СтрШаблон("[%1] %2", ВыборкаЗадач.ЗадачаНомер, ВыборкаЗадач.ЗадачаНаименование);
			
			ПланЧасыДата = ПланЧасыДата + СтрокаЗадача.ПланЧасы;
			
			ВыборкаВидДеятельности = ВыборкаЗадач.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ФактОписание = Новый Массив;
			
			Пока ВыборкаВидДеятельности.Следующий() И ЗначениеЗаполнено(ВыборкаВидДеятельности.ВидДеятельности) Цикл
				Комментарии = ОбработатьТрудозатраты(ВыборкаВидДеятельности);
				
				Если Комментарии.Количество() > 0 Тогда
					Комментарий = СтрСоединить(Комментарии, ";");
					КомментарийВидаДеятельности = СтрШаблон("%1 - %2", ВыборкаВидДеятельности.ВидДеятельности, Комментарий);
				Иначе
					КомментарийВидаДеятельности = ВыборкаВидДеятельности.ВидДеятельности;
				КонецЕсли; 
				
				ФактОписание.Добавить(КомментарийВидаДеятельности);
			КонецЦикла;
			
			СтрокаЗадача.ФактОписание = СтрСоединить(ФактОписание, Символы.ПС);
			
			ИтоговаяТаблицаДобавитьЧасы(ВыборкаЗадач);
			ИдентификаторыРаботДобавить(ИдентификаторыРабот, СтрокаЗадача);
		КонецЦикла;
		
		СтрокаДата.ПланЧасы = ПланЧасыДата;
		ПланЧасыРодитель = ПланЧасыРодитель + ПланЧасыДата;
	КонецЦикла;
	
	Если ЗаполнитьПланРодителя Тогда
		СтрокаРодитель.ПланЧасы = ПланЧасыРодитель;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицы()
	
	ЗаголовокГруппировки = "Период / Задача";
	
	Если Сотрудники.Количество() > 1 Тогда
		ЗаголовокГруппировки = СтрШаблон("Сотрудник / %1", ЗаголовокГруппировки);
	КонецЕсли; 
	
	Трудозатраты.Очистить();
	ИтоговаяТаблица.Очистить();
	ИдентификаторыРабот.Очистить();
	
	Элементы.ПланируемыеРаботыПредставлениеГруппировки.Заголовок = ЗаголовокГруппировки;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Сотрудник,
	|	Пользователи.ФИО КАК СотрудникНаименование,
	|	ПроизводственныйКалендарь.ДатаКалендаря КАК Дата,
	|	ПроизводственныйКалендарь.ДатаКалендаря >= &ТекущаяДата КАК ДоступноРедактирование
	|ПОМЕСТИТЬ СотрудникиДниПериода
	|ИЗ
	|	РегистрСведений.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	ПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Пользователи.Ссылка В(&Сотрудники)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДниПериода.Сотрудник КАК Сотрудник,
	|	ДниПериода.Дата КАК Дата,
	|	ПланируемыеРаботыПоЗадачам.Задача КАК Задача,
	|	ПланируемыеРаботыПоЗадачам.План КАК ПланЧасы,
	|	ПланируемыеРаботыПоЗадачам.Описание КАК ПланОписание
	|ПОМЕСТИТЬ ПланируемыеРаботы
	|ИЗ
	|	СотрудникиДниПериода КАК ДниПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеРаботыПоЗадачам КАК ПланируемыеРаботыПоЗадачам
	|		ПО ДниПериода.Сотрудник = ПланируемыеРаботыПоЗадачам.Сотрудник
	|			И ДниПериода.Дата = ПланируемыеРаботыПоЗадачам.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДниПериода.Сотрудник КАК Сотрудник,
	|	ДниПериода.Дата КАК Дата,
	|	ВЫРАЗИТЬ(Трудозатраты.Объект КАК Документ.Задача) КАК Задача,
	|	Трудозатраты.Затрата КАК ФактЧасы,
	|	Трудозатраты.Комментарий КАК ФактОписание,
	|	Трудозатраты.ВидДеятельности КАК ВидДеятельности,
	|	Трудозатраты.Регистратор КАК Регистратор,
	|	Трудозатраты.Период КАК Период
	|ПОМЕСТИТЬ ФактическиеРаботы
	|ИЗ
	|	СотрудникиДниПериода КАК ДниПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК Трудозатраты
	|		ПО ДниПериода.Сотрудник = Трудозатраты.Пользователь
	|			И (ДниПериода.Дата = НАЧАЛОПЕРИОДА(Трудозатраты.Период, ДЕНЬ))
	|ГДЕ
	|	Трудозатраты.Объект ССЫЛКА Документ.Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПланируемыеРаботы.Сотрудник, ФактическиеРаботы.Сотрудник) КАК Сотрудник,
	|	ЕСТЬNULL(ПланируемыеРаботы.Дата, ФактическиеРаботы.Дата) КАК Дата,
	|	ЕСТЬNULL(ПланируемыеРаботы.Задача, ФактическиеРаботы.Задача) КАК Задача,
	|	ЕСТЬNULL(ПланируемыеРаботы.ПланЧасы, 0) КАК ПланЧасы,
	|	ЕСТЬNULL(ПланируемыеРаботы.ПланОписание, """") КАК ПланОписание,
	|	ЕСТЬNULL(ФактическиеРаботы.ФактЧасы, 0) КАК ФактЧасы,
	|	ЕСТЬNULL(ФактическиеРаботы.ФактОписание, """") КАК ФактОписание,
	|	ЕСТЬNULL(ФактическиеРаботы.ВидДеятельности, """") КАК ВидДеятельности,
	|	ЕСТЬNULL(ФактическиеРаботы.Регистратор, НЕОПРЕДЕЛЕНО) КАК ДокументТрудозатрата,
	|	ЕСТЬNULL(ФактическиеРаботы.Период, НЕОПРЕДЕЛЕНО) КАК Период
	|ПОМЕСТИТЬ ВсеРаботы
	|ИЗ
	|	ПланируемыеРаботы КАК ПланируемыеРаботы
	|		ПОЛНОЕ СОЕДИНЕНИЕ ФактическиеРаботы КАК ФактическиеРаботы
	|		ПО ПланируемыеРаботы.Сотрудник = ФактическиеРаботы.Сотрудник
	|			И ПланируемыеРаботы.Дата = ФактическиеРаботы.Дата
	|			И ПланируемыеРаботы.Задача = ФактическиеРаботы.Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиДниПериода.Сотрудник КАК Сотрудник,
	|	СотрудникиДниПериода.СотрудникНаименование КАК СотрудникНаименование,
	|	СотрудникиДниПериода.Дата КАК Дата,
	|	СотрудникиДниПериода.ДоступноРедактирование КАК ДоступноРедактирование,
	|	ЕСТЬNULL(ВсеРаботы.Задача, НЕОПРЕДЕЛЕНО) КАК Задача,
	|	ЕСТЬNULL(ДокументЗадача.Наименование, """") КАК ЗадачаНаименование,
	|	ЕСТЬNULL(ДокументЗадача.Номер, """") КАК ЗадачаНомер,
	|	ЕСТЬNULL(ВсеРаботы.ПланЧасы, 0) КАК ПланЧасы,
	|	ЕСТЬNULL(ВсеРаботы.ПланОписание, """") КАК ПланОписание,
	|	ЕСТЬNULL(ВсеРаботы.ФактЧасы, 0) КАК ФактЧасы,
	|	ЕСТЬNULL(ВсеРаботы.ФактОписание, """") КАК ФактОписание,
	|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ВсеРаботы.ВидДеятельности), """") КАК ВидДеятельности,
	|	ЕСТЬNULL(ВсеРаботы.ДокументТрудозатрата, НЕОПРЕДЕЛЕНО) КАК ДокументТрудозатрата,
	|	ЕСТЬNULL(ВсеРаботы.Период, НЕОПРЕДЕЛЕНО) КАК ПериодТрудозатрат
	|ИЗ
	|	СотрудникиДниПериода КАК СотрудникиДниПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеРаботы КАК ВсеРаботы
	|		ПО СотрудникиДниПериода.Сотрудник = ВсеРаботы.Сотрудник
	|			И СотрудникиДниПериода.Дата = ВсеРаботы.Дата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО (ВсеРаботы.Задача = ДокументЗадача.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	Дата,
	|	Задача,
	|	ПериодТрудозатрат
	|ИТОГИ
	|	МАКСИМУМ(СотрудникНаименование),
	|	МАКСИМУМ(ДоступноРедактирование),
	|	МАКСИМУМ(ЗадачаНаименование),
	|	МАКСИМУМ(ЗадачаНомер),
	|	МАКСИМУМ(ПланЧасы),
	|	МАКСИМУМ(ПланОписание),
	|	СУММА(ФактЧасы)
	|ПО
	|	Сотрудник,
	|	Дата,
	|	Задача,
	|	ВсеРаботы.ВидДеятельности";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Период.ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ОбщегоНазначения.ТекущаяДатаСоСдвигом()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаСотрудников = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если ВыборкаСотрудников.Количество() > 1 Тогда
			Пока ВыборкаСотрудников.Следующий() Цикл
				СтрокаСотрудник = ПланируемыеРаботы.ПолучитьЭлементы().Добавить();
				СтрокаСотрудник.Сотрудник = ВыборкаСотрудников.Сотрудник;
				СтрокаСотрудник.ПредставлениеГруппировки = ВыборкаСотрудников.СотрудникНаименование;
				СтрокаСотрудник.ДоступноРедактирование = Ложь;
				СтрокаСотрудник.ФактЧасы = ВыборкаСотрудников.ФактЧасы;
				СтрокаСотрудник.ЭтоГруппа = Истина;
				
				ЗаполнитьДатыПланирования(СтрокаСотрудник, ВыборкаСотрудников, Истина);
			КонецЦикла;
		Иначе
			ВыборкаСотрудников.Следующий();
			ЗаполнитьДатыПланирования(ПланируемыеРаботы, ВыборкаСотрудников);
		КонецЕсли;
	КонецЕсли;
	
	ИтоговаяТаблицаПланИтог = ИтоговаяТаблица.Итог("ПланЧасы");
	ИтоговаяТаблицаФактИтог = ИтоговаяТаблица.Итог("ФактЧасы");
	ИтоговаяТаблица.Сортировать("ЗадачаПредставление");
	
	СохранитьПользовательскиеНастройки();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИдентификаторыРаботДобавить(ТаблицаИдентификаторов, СтрокаЗадача)
	
	НовыйИдентификатор = ТаблицаИдентификаторов.Добавить();
	НовыйИдентификатор.Сотрудник = СтрокаЗадача.Сотрудник;
	НовыйИдентификатор.Дата = СтрокаЗадача.Дата;
	НовыйИдентификатор.Задача = СтрокаЗадача.Задача;
	НовыйИдентификатор.Идентификатор = СтрокаЗадача.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ИтоговаяТаблицаДобавить(ДанныеЗадачи)
	
	Для Каждого Строка Из ИтоговаяТаблица Цикл
		Если Строка.Задача = ДанныеЗадачи.Задача Тогда
			Возврат;
		КонецЕсли; 
	КонецЦикла;
	
	НоваяСтрока = ИтоговаяТаблица.Добавить();
	НоваяСтрока.Задача = ДанныеЗадачи.Задача;
	НоваяСтрока.ЗадачаПредставление = ДанныеЗадачи.Представление;
	
КонецПроцедуры

&НаСервере
Процедура ИтоговаяТаблицаДобавитьЧасы(ДанныеЗадачи)
	
	СтрокиИтогЗадача = ИтоговаяТаблица.НайтиСтроки(Новый Структура("Задача", ДанныеЗадачи.Задача));
	
	Если СтрокиИтогЗадача.Количество() = 0 Тогда
		СтрокаИтог = ИтоговаяТаблица.Добавить();
		СтрокаИтог.Задача = ДанныеЗадачи.Задача;
		СтрокаИтог.ЗадачаПредставление = СтрШаблон("Задача %1. %2", ДанныеЗадачи.ЗадачаНомер, ДанныеЗадачи.ЗадачаНаименование);
	Иначе
		СтрокаИтог = СтрокиИтогЗадача.Получить(0);
	КонецЕсли;
	
	СтрокаИтог.ПланЧасы = СтрокаИтог.ПланЧасы + ДанныеЗадачи.ПланЧасы;
	СтрокаИтог.ФактЧасы = СтрокаИтог.ФактЧасы + ДанныеЗадачи.ФактЧасы;
	
КонецПроцедуры

&НаКлиенте
Процедура ИтоговаяТаблицаПересчитатьПоЗадаче(Задача)
	
	ПланЧасы = 0;
	ФактЧасы = 0;
	Количество = 0;
	
	Для Каждого Строка Из ИдентификаторыРабот Цикл
		Если Строка.Задача = Задача Тогда
			Данные = ПланируемыеРаботы.НайтиПоИдентификатору(Строка.Идентификатор);
			ПланЧасы = ПланЧасы + Данные.ПланЧасы;
			ФактЧасы = ФактЧасы + Данные.ФактЧасы;
			
			Количество = Количество + 1;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из ИтоговаяТаблица Цикл
		Если Строка.Задача = Задача Тогда
			ИтоговаяСтрока = Строка;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	ИтоговаяТаблицаПланИтог = ИтоговаяТаблицаПланИтог - ИтоговаяСтрока.ПланЧасы;
	ИтоговаяТаблицаФактИтог = ИтоговаяТаблицаФактИтог - ИтоговаяСтрока.ФактЧасы;
	
	Если Количество > 0 Тогда
		ИтоговаяТаблицаПланИтог = ИтоговаяТаблицаПланИтог + ПланЧасы;
		ИтоговаяСтрока.ПланЧасы = ПланЧасы;
		
		ИтоговаяТаблицаФактИтог = ИтоговаяТаблицаФактИтог + ФактЧасы;
		ИтоговаяСтрока.ФактЧасы = ФактЧасы;
	Иначе
		ИтоговаяТаблица.Удалить(ИтоговаяСтрока);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция НайтиИдентификаторРабот(ДанныеЗадачи)
	
	Для Каждого Строка Из ИдентификаторыРабот Цикл
		Если Строка.Сотрудник = ДанныеЗадачи.Сотрудник И Строка.Дата = ДанныеЗадачи.Дата
			И Строка.Задача = ДанныеЗадачи.Задача Тогда
			
			Возврат Строка;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция НайтиСтрокуТрудозатрат(Документ)
	
	Для Каждого Строка Из Трудозатраты Цикл
		Если Строка.Документ = Документ Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Строка;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыборДобавленияТрудозатрат(Результат, Задача) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат.Значение = Неопределено Тогда
			ДобавитьФактическиеТрудозатраты(Задача);
		Иначе
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("Ключ", Результат.Значение);
			ПараметрыОткрытия.Вставить("СкрытьСлужебныеПоля", Истина);
			ПараметрыОткрытия.Вставить("ПоказатьОбъект", Истина);
			ПараметрыОткрытия.Вставить("ОграничитьИзменениеПериода", Истина);
			
			ОткрытьФорму("Документ.Трудозатраты.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборЗадачи(Результат, СтрокаРодитель) Экспорт
	
	Если Результат <> Неопределено Тогда
		СтрокаЗадача = СтрокаРодитель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗадача, СтрокаРодитель, "Дата, Сотрудник, ДоступноРедактирование");
		СтрокаЗадача.Задача = Результат.Задача;
		СтрокаЗадача.ПредставлениеГруппировки = СтрШаблон("[%1] %2", Результат.Номер, Результат.Наименование);
		
		ИдентификаторыРаботДобавить(ИдентификаторыРабот, СтрокаЗадача);
		
		Модифицированность = Истина;
		Элементы.ПланируемыеРаботы.Развернуть(СтрокаРодитель.ПолучитьИдентификатор());
		
		ИтоговаяТаблицаДобавить(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветНаВопросСохраненияДанных(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьНаСервере(ПланируемыеРаботы, ИмяФормы);
		СформироватьОтчет();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		СформироватьОтчет();
		Модифицированность = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветНаСохранениеПередЗакрытиемФормы(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Отмена Тогда
		ПолученОтветПередЗакрытием = Истина;
		
		Если Результат = КодВозвратаДиалога.Да Тогда
			СохранитьНаСервере(ПланируемыеРаботы, ИмяФормы);
		КонецЕсли;
		
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьТрудозатраты(ВыборкаВидДеятельности)
	
	ВыборкаТрудозатрат = ВыборкаВидДеятельности.Выбрать();
	Комментарии = Новый Массив;
	
	Пока ВыборкаТрудозатрат.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаТрудозатрат.ФактОписание) Тогда
			Комментарии.Добавить(ВыборкаТрудозатрат.ФактОписание);
		КонецЕсли;
		
		НовыеТрудозатраты = Трудозатраты.Добавить();
		НовыеТрудозатраты.Документ = ВыборкаТрудозатрат.ДокументТрудозатрата;
		НовыеТрудозатраты.Сотрудник = ВыборкаТрудозатрат.Сотрудник;
		НовыеТрудозатраты.Затрата = ВыборкаТрудозатрат.ФактЧасы;
		НовыеТрудозатраты.ВидДеятельности = ВыборкаТрудозатрат.ВидДеятельности;
		НовыеТрудозатраты.Дата = ВыборкаТрудозатрат.Дата;
		НовыеТрудозатраты.Время = ВыборкаТрудозатрат.ПериодТрудозатрат;
		НовыеТрудозатраты.Задача = ВыборкаТрудозатрат.Задача;
		НовыеТрудозатраты.Комментарий = ВыборкаТрудозатрат.ФактОписание;
	КонецЦикла;
	
	Возврат Комментарии;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПодбораЗадач(СтрокаРодитель, ДобавленныеЗадачи)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДобавленныеЗадачи", ДобавленныеЗадачи);
	ПараметрыОткрытия.Вставить("Дата", СтрокаРодитель.ПредставлениеГруппировки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборЗадачи", ЭтотОбъект, СтрокаРодитель);
	
	ОткрытьФорму("Обработка.ПланируемыеРаботыПоЗадачам.Форма.ФормаВыбораЗадачи", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЧасы(ТекущиеДанные, ИмяРеквизита, КорректировкаВремени = 0)
	
	СтрокаРодитель = ТекущиеДанные.ПолучитьРодителя();
	
	Если СтрокаРодитель <> Неопределено Тогда
		Часы = КорректировкаВремени;
		
		Для Каждого Строка Из СтрокаРодитель.ПолучитьЭлементы() Цикл
			Часы = Часы + Строка[ИмяРеквизита];
		КонецЦикла; 
		
		СтрокаРодитель[ИмяРеквизита] = Часы;
		ПересчитатьЧасы(СтрокаРодитель, ИмяРеквизита);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеТрудозатрат(Знач Документ, Знач Задача, Знач Трудозатраты, Знач ИдентификаторыРабот)
	
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ,
		"Дата, Затрата, Пользователь, ВидДеятельности, Комментарий, Проведен");
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сотрудник", ДанныеДокумента.Пользователь);
	ПараметрыОтбора.Вставить("Дата", НачалоДня(ДанныеДокумента.Дата));
	ПараметрыОтбора.Вставить("Задача", Задача);
	
	Идентификаторы = ИдентификаторыРабот.НайтиСтроки(ПараметрыОтбора);
	Если Идентификаторы.Количество() = 1 Тогда
		ИдентификаторСтроки = Идентификаторы[0].Идентификатор;
	Иначе
		// Оповещение сработало от трудозатрат внесенных по задаче/дате отсутствующей в текущих данных из другого инструмента
		Возврат Неопределено;
	КонецЕсли; 
	
	ВидДеятельностиПредставление = Строка(ДанныеДокумента.ВидДеятельности);
	
	ТаблицаТрудозатрат = ДанныеФормыВЗначение(Трудозатраты, Тип("ТаблицаЗначений"));
	СтрокаДокумент = ТаблицаТрудозатрат.Найти(Документ, "Документ");
	
	Если СтрокаДокумент = Неопределено Тогда
		ЭтоНовыйДокумент = Истина;
		
		СтрокаДокумент = ТаблицаТрудозатрат.Добавить();
		СтрокаДокумент.Документ = Документ;
		СтрокаДокумент.Задача = Задача;
		СтрокаДокумент.Сотрудник = ДанныеДокумента.Пользователь;
		СтрокаДокумент.Дата = ДанныеДокумента.Дата;
		СтрокаДокумент.Время = ДанныеДокумента.Дата;
	Иначе
		ЭтоНовыйДокумент = Ложь;
	КонецЕсли;
	
	
	Если ДанныеДокумента.Проведен Тогда
		СтрокаДокумент.Затрата = ДанныеДокумента.Затрата;
		СтрокаДокумент.ВидДеятельности = ВидДеятельностиПредставление;
		СтрокаДокумент.Комментарий = ДанныеДокумента.Комментарий;
	Иначе
		ТаблицаТрудозатрат.Удалить(СтрокаДокумент);
	КонецЕсли;
	
	Трудозатраты.Сортировать("Задача, Дата, Время");
	
	ТрудозатратыЗадачи = ТаблицаТрудозатрат.НайтиСтроки(ПараметрыОтбора);
	Комментарии = Новый Соответствие;
	
	ФактЧасы = 0;
	
	Для Каждого Строка Из ТрудозатратыЗадачи Цикл
		КомментарииВидаДеятельности = Комментарии.Получить(Строка.ВидДеятельности);
		
		Если КомментарииВидаДеятельности = Неопределено Тогда
			КомментарииВидаДеятельности = Новый Массив;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Комментарий) Тогда
			КомментарииВидаДеятельности.Добавить(Строка.Комментарий);
		КонецЕсли; 
		
		Комментарии.Вставить(Строка.ВидДеятельности, КомментарииВидаДеятельности);
		
		ФактЧасы = ФактЧасы + Строка.Затрата;
	КонецЦикла;
	
	ФактОписание = Новый Массив;
	
	Для Каждого ВидДеятельности Из Комментарии Цикл
		Если ВидДеятельности.Значение.Количество() > 0 Тогда
			КомментарийВидаДеятельности = СтрШаблон("%1 - %2", ВидДеятельности.Ключ, СтрСоединить(ВидДеятельности.Значение, ";"));
		Иначе
			КомментарийВидаДеятельности = ВидДеятельности.Ключ;
		КонецЕсли;
		
		ФактОписание.Добавить(КомментарийВидаДеятельности);
	КонецЦикла;
	
	ДанныеДокумента.Вставить("ВидДеятельности", ВидДеятельностиПредставление);
	ДанныеДокумента.Вставить("ФактЧасы", ФактЧасы);
	ДанныеДокумента.Вставить("ФактОписание", СтрСоединить(ФактОписание, Символы.ПС));
	ДанныеДокумента.Вставить("ЭтоНовыйДокумент", ЭтоНовыйДокумент);
	ДанныеДокумента.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	
	Возврат ДанныеДокумента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКлючиНастроек()
	
	КлючиНастроек = Новый Структура("КлючОбъекта, КлючНастроек");
	КлючиНастроек.КлючОбъекта = "Обработка.ПланируемыеРаботыПоЗадачам";
	КлючиНастроек.КлючНастроек = "НастройкиОбработки";
	
	Возврат КлючиНастроек;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСписокЗадачЗаДень(Родитель)
	
	ДобавленныеЗадачи = Новый СписокЗначений;
	
	Для Каждого Строка Из Родитель.ПолучитьЭлементы() Цикл
		ДобавленныеЗадачи.Добавить(Строка.Задача);
	КонецЦикла;
	
	Возврат ДобавленныеЗадачи;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСписокТрудозатратОбъекта(ДанныеСтроки)
	
	Список = Новый СписокЗначений;
	Список.Добавить(Неопределено, "Добавить трудозатраты", , БиблиотекаКартинок.ДобавитьЗатратыВремени);
	
	Для Каждого Строка Из Трудозатраты Цикл
		Если Строка.Сотрудник = ДанныеСтроки.Сотрудник И Строка.Дата = ДанныеСтроки.Дата
			И Строка.Задача = ДанныеСтроки.Задача Тогда
			
			Время = Формат(Строка.Время, "ДЛФ=T");
			Представление = СтрШаблон("%1 - %2 - %3 ч.", Время, Строка.ВидДеятельности, Строка.Затрата);
			Список.Добавить(Строка.Документ, Представление, , БиблиотекаКартинок.Изменить);
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Список;
	
КонецФункции

&НаКлиенте
Процедура РазвернутьСтроки()
	
	Для Каждого Строка Из ПланируемыеРаботы.ПолучитьЭлементы() Цикл
		Элементы.ПланируемыеРаботы.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНаСервере(Знач ПланируемыеРаботы, Знач ИмяФормы)
	
	РегистрыСведений.ОтслеживаниеИспользованияФункциональности.Добавить("Сохранение", ИмяФормы);
	
	НаборЗаписей = РегистрыСведений.ПланируемыеРаботыПоЗадачам.СоздатьНаборЗаписей();
	
	Для Каждого Строка Из ПланируемыеРаботы.ПолучитьЭлементы() Цикл
		Если Строка.Сотрудник = ПараметрыСеанса.ТекущийПользователь Тогда
			Если НЕ ЗначениеЗаполнено(Строка.Дата) Тогда
				Для Каждого ПодСтрока Из Строка.ПолучитьЭлементы() Цикл
					ДобавитьЗаписиПланируемыеРаботы(НаборЗаписей, ПодСтрока);
				КонецЦикла; 
			Иначе
				ДобавитьЗаписиПланируемыеРаботы(НаборЗаписей, Строка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПользовательскиеНастройки()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("Сотрудники", Сотрудники);
	
	Ключи = ПолучитьКлючиНастроек();
	
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(Ключи.КлючОбъекта, Ключи.КлючНастроек, СтруктураНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет()
	
	ПланируемыеРаботы.ПолучитьЭлементы().Очистить();
	
	Если ЗначениеЗаполнено(Период.ДатаНачала) И ЗначениеЗаполнено(Период.ДатаОкончания) И ЗначениеЗаполнено(Сотрудники) Тогда
		ЗаполнитьТаблицы();
		РазвернутьСтроки();
	КонецЕсли;
	
	УстановитьДоступностьРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРедактирования()
	
	ТекущиеДанные = Элементы.ПланируемыеРаботы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.Сотрудник <> ТекущийПользователь
		ИЛИ НЕ ТекущиеДанные.ДоступноРедактирование Тогда
		ДоступноРедактирование = Ложь;
		ТолькоПросмотрПлана = Истина;
	Иначе
		ДоступноРедактирование = Истина;
		ТолькоПросмотрПлана = НЕ ЗначениеЗаполнено(ТекущиеДанные.Задача);
	КонецЕсли;
	
	Для Каждого Элемент Из Элементы.ПланируемыеРаботыГруппаИзменениеДанных.ПодчиненныеЭлементы Цикл
		Элемент.Доступность = ДоступноРедактирование;
	КонецЦикла;
	
	Для Каждого Элемент Из Элементы.ПланируемыеРаботыКонтекстноеМенюИзменениеЗадач.ПодчиненныеЭлементы Цикл
		Элемент.Доступность = ДоступноРедактирование;
	КонецЦикла;
	
	Для Каждого Элемент Из Элементы.ПланируемыеРаботыГруппаПлан.ПодчиненныеЭлементы Цикл
		Элемент.ТолькоПросмотр = ТолькоПросмотрПлана;
	КонецЦикла;
	
	ДоступноЗанесениеТрудозатрат = (ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Задача));
	Элементы.ПланируемыеРаботыКонтекстноеМенюДобавитьТрудозатраты.Доступность = ДоступноЗанесениеТрудозатрат;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Для Каждого Строка Из ПланируемыеРаботы.ПолучитьЭлементы() Цикл
		Элементы.ПланируемыеРаботы.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Для Каждого Строка Из ПланируемыеРаботы.ПолучитьЭлементы() Цикл
		Элементы.ПланируемыеРаботы.Свернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
