///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновитьСписокЗаявок();
	
	ДанныеСчетчика = Новый Структура("id, count");
	ДанныеСчетчика.id = ИнструментыСервер.ПолучитьИдентификаторИнструмента(Метаданные.Обработки.АктуализацияЗаявок);
	ДанныеСчетчика.count = РегистрыСведений.ДатыАктуальностиЗаявокНаРазработку.ПолучитьКоличествоЗаявокНаАктуализацию(ПараметрыСеанса.ТекущийПользователь);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеСчетчика, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДанныеСчетчика = ПолучитьИзВременногоХранилища(АдресХранилища);
	ИнструментыКлиент.ОбновитьЗначениеСчетчика(ДанныеСчетчика);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// Таблица формы "СписокЗаявок"

&НаКлиенте
Процедура СписокЗаявокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьВыбраннуюЗаявку();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаявокПризнакиАктуальностиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокЗаявок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "СписокЗаявокАктуальная" Тогда
		ЗначениеПризнака   = ТекущиеДанные.Актуальная;
		ИзменяемыйРеквизит = "Неактуальная";
		
	ИначеЕсли ИмяЭлемента = "СписокЗаявокНеактуальная" Тогда
		ЗначениеПризнака   = ТекущиеДанные.Неактуальная;
		ИзменяемыйРеквизит = "Актуальная" 
	КонецЕсли;
	
	Если ЗначениеПризнака = Истина Тогда
		ТекущиеДанные[ИзменяемыйРеквизит] = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура АктуализироватьВыбраннуюЗаявку(Команда)
	
	ТекущиеДанные = Элементы.СписокЗаявок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, "Не выбрана заявка.");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "В каком состоянии находится выбранная заявка?";
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, "Актуальная");
	СписокКнопок.Добавить(КодВозвратаДиалога.Нет, "Неактуальная");
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, "Отменить операцию");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПолнаяАктуализация", Ложь);
	ДополнительныеПараметры.Вставить("Заявка", ТекущиеДанные.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветНаВопросПоАктуализации", 
		ЭтотОбъект,	ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок, , КодВозвратаДиалога.Отмена,
		"Актуализация выбранной заявки");
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьОтмеченныеЗаявки(Команда)
	
	ЕстьОтмеченныеЗаявки = Ложь;
	
	Для Каждого СтрокаТаблицы Из СписокЗаявок Цикл
		Если СтрокаТаблицы.Актуальная = Истина ИЛИ СтрокаТаблицы.Неактуальная = Истина Тогда
			ЕстьОтмеченныеЗаявки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОтмеченныеЗаявки = Ложь Тогда
		ПоказатьПредупреждение(, "Нет заявок, отмеченных на актуализацию.");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "Отмеченные заявки будут актуализированы по установленным признакам.
		|Продолжить?";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветНаВопросПоАктуализации", 
		ЭтотОбъект,	Новый Структура("ПолнаяАктуализация", Истина));
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет,
		"Актуализация отмеченных заявок");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаявку(Команда)
	
	ОткрытьВыбраннуюЗаявку();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики оповещений

&НаКлиенте
Процедура ОбработатьОтветНаВопросПоАктуализации(Ответ, ДополнительныеПараметры) Экспорт
	
	Если (ДополнительныеПараметры.ПолнаяАктуализация И Ответ = КодВозвратаДиалога.Нет)
		ИЛИ Ответ = КодВозвратаДиалога.Отмена Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ПолнаяАктуализация Тогда
		Результат = ПолнаяАктуализацияЗаявок();
	Иначе
		Результат = ЕдиничнаяАктуализация(ДополнительныеПараметры.Заявка, Ответ = КодВозвратаДиалога.Да);
	КонецЕсли;
	
	Если Результат.ЕстьОшибка = Ложь Тогда
		
		Если ДополнительныеПараметры.ПолнаяАктуализация = Ложь Тогда
			
			// Если выполнялась не полная актуализация, необходимо самостоятельно удалить 
			// строку из таблицы.
			НайденнаяСтрока = СписокЗаявок.НайтиСтроки(Новый Структура("Ссылка", ДополнительныеПараметры.Заявка));
			Если НайденнаяСтрока.Количество() = 1 Тогда
				СписокЗаявок.Удалить(НайденнаяСтрока[0]);
			КонецЕсли;
			
			Если Результат.КоличествоЗаявок > 0 Тогда
				Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаСписокЗаявок;
			Иначе
				Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаЗаявкиОтсутствуют;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеСчетчика = Новый Структура("id, count", Результат.ИдентификаторИнструмента, Результат.КоличествоЗаявок);
		ИнструментыКлиент.ОбновитьЗначениеСчетчика(ДанныеСчетчика);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции

&НаСервереБезКонтекста
Функция ЕдиничнаяАктуализация(Знач Заявка, Знач Актуальная)
	
	// Результат работы функции
	Результат = Новый Структура("ЕстьОшибка, КоличествоЗаявок, ИдентификаторИнструмента", Ложь, 0);
	
	РегистрДатАктуальности = РегистрыСведений.ДатыАктуальностиЗаявокНаРазработку;
	
	Если Актуальная Тогда
		РегистрДатАктуальности.ПодтвердитьАктуальность(Заявка);
	Иначе
		РегистрДатАктуальности.ОтклонитьЗаявку(Заявка);
	КонецЕсли;
	
	// Если ошибок не было, необходимо обновить список
	Если Результат.ЕстьОшибка = Ложь Тогда
		Результат.КоличествоЗаявок = РегистрДатАктуальности.ПолучитьКоличествоЗаявокНаАктуализацию(ПараметрыСеанса.ТекущийПользователь);
		Результат.ИдентификаторИнструмента = ИнструментыСервер.ПолучитьИдентификаторИнструмента(Метаданные.Обработки.АктуализацияЗаявок);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбновитьСписокЗаявок()
	
	// Получение списка заявок
	// TODO: В дальнейшем проанализировать рост количества записей регистра сведений
	// ДатыАктуальностиЗаявокНаРазработку. Если количество записей будет значительным,
	// перевести актуализацию на частый просмотр заявок на актуализацию.	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатыАктуальностиЗаявок.Заявка КАК Заявка,
	|	ДокументЗаявка.Номер КАК Номер,
	|	ДокументЗаявка.Наименование КАК Наименование,
	|	РАЗНОСТЬДАТ(ДокументЗаявка.Дата, &ТекущаяДата, ДЕНЬ) КАК Возраст,
	|	РАЗНОСТЬДАТ(&ТекущаяДата, ДатыАктуальностиЗаявок.ДатаУдаления, ДЕНЬ) КАК ДнейДоОтклонения,
	|	ДатыАктуальностиЗаявок.ДатаУдаления КАК ДатаУдаления,
	|	Пользователи.ФИО КАК Автор,
	|	Пользователи.Ссылка КАК Пользователь
	|ПОМЕСТИТЬ ОтобранныеЗаявки
	|ИЗ
	|	РегистрСведений.ДатыАктуальностиЗаявокНаРазработку КАК ДатыАктуальностиЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ДокументЗаявка
	|		ПО ДатыАктуальностиЗаявок.Заявка = ДокументЗаявка.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ДатыАктуальностиЗаявок.Автор = Пользователи.Ссылка
	|ГДЕ
	|	ДатыАктуальностиЗаявок.ДатаАктуальности <= &ТекущаяДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛичныеДела.Сотрудник КАК Пользователь,
	|	ВЫРАЗИТЬ(ЛичныеДела.Данные КАК Справочник.Филиалы) КАК Филиал
	|ПОМЕСТИТЬ ПоследнийФилиалАвтора
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(
	|			&ТекущаяДата,
	|			Сотрудник В
	|					(ВЫБРАТЬ
	|						ОтобранныеЗаявки.Пользователь
	|					ИЗ
	|						ОтобранныеЗаявки КАК ОтобранныеЗаявки)
	|				И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)
	|				И (ВЫРАЗИТЬ(Данные КАК Справочник.Филиалы)) <> ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК ЛичныеДела
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК Актуальная,
	|	ЛОЖЬ КАК Неактуальная,
	|	ОтобранныеЗаявки.Заявка КАК Ссылка,
	|	ОтобранныеЗаявки.Номер КАК Номер,
	|	ОтобранныеЗаявки.Наименование КАК Представление,
	|	ОтобранныеЗаявки.Возраст КАК Возраст,
	|	ОтобранныеЗаявки.ДнейДоОтклонения КАК ДнейДоОтклонения,
	|	ОтобранныеЗаявки.ДатаУдаления КАК ДатаУдаления,
	|	ОтобранныеЗаявки.Автор КАК Автор
	|ИЗ
	|	ОтобранныеЗаявки КАК ОтобранныеЗаявки
	|ГДЕ
	|	ОтобранныеЗаявки.Пользователь = &Пользователь
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ОтобранныеЗаявки.Заявка,
	|	ОтобранныеЗаявки.Номер,
	|	ОтобранныеЗаявки.Наименование,
	|	ОтобранныеЗаявки.Возраст,
	|	ОтобранныеЗаявки.ДнейДоОтклонения,
	|	ОтобранныеЗаявки.ДатаУдаления,
	|	ОтобранныеЗаявки.Автор
	|ИЗ
	|	ОтобранныеЗаявки КАК ОтобранныеЗаявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоследнийФилиалАвтора КАК ПоследнийФилиалАвтора
	|		ПО ОтобранныеЗаявки.Пользователь = ПоследнийФилиалАвтора.Пользователь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО (Филиалы.Ссылка = ПоследнийФилиалАвтора.Филиал)
	|			И (Филиалы.Руководитель = &Пользователь)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаУдаления";
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаЗаявок = РеквизитФормыВЗначение("СписокЗаявок", Тип("ТаблицаЗначений"));
		ТаблицаЗаявок.Очистить();
		
		// Добавляем строки с заявками
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаЗаявок.Добавить();
			
			НоваяСтрока.Возраст = СтрокаСЧислом("; %1 день; ; %1 дня; %1 дней; %1 дня",
				Выборка.Возраст, ВидЧисловогоЗначения.Количественное);
				
			НоваяСтрока.ДнейДоОтклонения = СтрокаСЧислом("; %1 день; ; %1 дня; %1 дней; %1 дня",
				Выборка.ДнейДоОтклонения, ВидЧисловогоЗначения.Количественное);				
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, , "Возраст, ДнейДоОтклонения");
			
			// Добавление информации о том, что пользователь просмотрел информацию
			РегистрыСведений.ИсторияАктуализацииЗаявокНаРазработку.ДобавитьЗапись(Выборка.Ссылка, 4);
		КонецЦикла;
				
		// Помещение таблицы на форму
		ЗначениеВРеквизитФормы(ТаблицаЗаявок, "СписокЗаявок");
		
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаСписокЗаявок;
	Иначе
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаЗаявкиОтсутствуют;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыбраннуюЗаявку()
	
	ТекущиеДанные = Элементы.СписокЗаявок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, "Не выбрана заявка.");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Ссылка);
		ОткрытьФорму("Документ.ЗаявкаНаРазработку.Форма.ФормаДокумента", ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолнаяАктуализацияЗаявок()
	
	// Результат работы функции
	Результат = Новый Структура("ЕстьОшибка, КоличествоЗаявок, ИдентификаторИнструмента", Ложь, 0);
	
	// Получение отмеченных строк
	ОтмеченныеСтроки = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из СписокЗаявок Цикл
		Если СтрокаТаблицы.Актуальная = Истина ИЛИ СтрокаТаблицы.Неактуальная = Истина Тогда
			ОтмеченныеСтроки.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	РегистрДатАктуальности = РегистрыСведений.ДатыАктуальностиЗаявокНаРазработку;
	
	// Сохранение данных в транзакции
	НачатьТранзакцию();
	
	Попытка
		Для Каждого СтрокаТаблицы Из ОтмеченныеСтроки Цикл
			Если СтрокаТаблицы.Актуальная Тогда
				РегистрДатАктуальности.ПодтвердитьАктуальность(СтрокаТаблицы.Ссылка);
			Иначе
				РегистрДатАктуальности.ОтклонитьЗаявку(СтрокаТаблицы.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Результат.ЕстьОшибка = Истина;
		Сообщить("При сохранении данных актуализации заявок возникла ошибка: " + ОписаниеОшибки());
	КонецПопытки;
	
	// Если ошибок не было, необходимо обновить список
	Если Результат.ЕстьОшибка = Ложь Тогда
		ОбновитьСписокЗаявок();
		Результат.КоличествоЗаявок = РегистрДатАктуальности.ПолучитьКоличествоЗаявокНаАктуализацию(ПараметрыСеанса.ТекущийПользователь);
		Результат.ИдентификаторИнструмента = ИнструментыСервер.ПолучитьИдентификаторИнструмента(Метаданные.Обработки.АктуализацияЗаявок);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти
