///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////
  
#Если Сервер ИЛИ ВнешнееСоединение Тогда

#Область ОписаниеПеременных

// Хранит количество минут через которое завершается неактивный сеанс
Перем ВремяЗавершенияНеактивныхСеансовСекунды; 

// Хранит имя события
Перем ИмяСобытия;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Подключается к агенту сервера 1С, перебирает все активные сеансы текущей ИБ и
// разрывает те, которые не были активны более часа.
//
Процедура ЗавершитьНеактивныеСеансы() Экспорт
	
	ИмяСобытия = "Завершение неактивных сеансов";
	База = ПолучитьБазу();   

	Если База = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВремяЗавершенияНеактивныхСеансов = Константы.ВремяЗавершенияНеактивныхСеансов.Получить();	
	Если ВремяЗавершенияНеактивныхСеансов > 0 Тогда
		ВремяЗавершенияНеактивныхСеансовСекунды = ВремяЗавершенияНеактивныхСеансов * 60;
	Иначе
		ВремяЗавершенияНеактивныхСеансовСекунды = 1800;
	КонецЕсли;
	
	РазорватьСеансыИСоединения(База);     
	
КонецПроцедуры

// Подключается к агенту сервера 1С, перебирает все активные сеансы текущей ИБ и
// записывает данные о сеансах.
//
Процедура ЗаполнитьСтатистикуСеансовПользователей() Экспорт 
		
	ИмяСобытия = "Заполнение статистики сеансов пользователей";	
	База = ПолучитьБазу();   

	Если База = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСеансов = ПолучитьИнформациюОСеансах(База); 
	ЗаписатьИнформациюОСеансах(ДанныеСеансов);
	
КонецПроцедуры

// Подключается к агенту сервера 1С, перебирает все база и возвращает текущую
// 
// Возвращаемое значение:
//   База - АдминистрированиеИнформационнаяБаза
//
Функция ПолучитьБазу() Экспорт
	
	База = Неопределено;
	НастройкиПодключения = НастройкиПодключенияКСерверуАдминистрирования();
	
	Если НастройкиПодключения = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы(); 
	
	ИмяБазы = НСтр(СтрокаСоединения, "Ref");	
	Агент = Новый АдминистрированиеСервера(НастройкиПодключения.Адрес, НастройкиПодключения.Порт);
	
	Если ЗначениеЗаполнено(НастройкиПодключения.ЛогинАдминистратораСервера) Тогда
		Агент.ВыполнитьАутентификацию(НастройкиПодключения.ЛогинАдминистратораСервера, 
			НастройкиПодключения.ПарольАдминистратораСервера); 
	КонецЕсли;
	
	Кластеры = Агент.ПолучитьКластеры(); 
	
	Для Каждого Кластер Из Кластеры Цикл 	
		
		Попытка
			Если ЗначениеЗаполнено(НастройкиПодключения.ЛогинАдминистратораКластера) Тогда
				Кластер.ВыполнитьАутентификацию(НастройкиПодключения.ЛогинАдминистратораКластера, 
					НастройкиПодключения.ПарольАдминистратораКластера); 
			Иначе
				Кластер.ВыполнитьАутентификацию();
			КонецЕсли;
		Исключение
			Продолжить;
		КонецПопытки;
		
		СписокИБ = Кластер.ПолучитьИнформационныеБазы();	
			
		Для Каждого СтрокаБаза Из СписокИБ Цикл
			Если СтрокаБаза.Имя = ИмяБазы Тогда
				База = СтрокаБаза;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;  
	
	Возврат База;
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

Процедура ЗаписатьИнформациюОСеансах(Знач ДанныеСеансов)
	
	ПериодЗаписи = НачалоЧаса(ТекущаяДатаСеанса());

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеСеансов.УникальныйИдентификатор КАК УникальныйИдентификатор,
	|	ДанныеСеансов.НомерСеанса КАК НомерСеанса,
	|	ДанныеСеансов.ТипКлиента КАК ТипКлиента,
	|	ДанныеСеансов.Лицензия КАК Лицензия
	|ПОМЕСТИТЬ ДанныеСеансов
	|ИЗ
	|	&ДанныеСеансов КАК ДанныеСеансов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ПериодЗаписи КАК Период,
	|	Пользователи.Ссылка КАК Пользователь,
	|	ДанныеСеансов.НомерСеанса КАК НомерСеанса,
	|	ДанныеСеансов.ТипКлиента КАК ТипКлиента,
	|	ДанныеСеансов.Лицензия КАК Лицензия
	|ИЗ
	|	ДанныеСеансов КАК ДанныеСеансов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ДанныеСеансов.УникальныйИдентификатор = Пользователи.ИдентификаторПользователяИБ";
	
	Запрос.УстановитьПараметр("ДанныеСеансов", ДанныеСеансов);
	Запрос.УстановитьПараметр("ПериодЗаписи", ПериодЗаписи);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СтатистикаСеансовПользователей.Загрузить(ПериодЗаписи, РезультатЗапроса.Выгрузить());
			
КонецПроцедуры

// Получает данные о сеансах пользователей и записывает в БД
//
// Параметры:
//  База - 	АдминистрированиеИнформационнаяБаза  - Администрирование ИБ
// 
// Возвращаемое значение:
//  ДанныеСеансов - ТаблицаЗначений
//
Функция ПолучитьИнформациюОСеансах(База) 
	
	ДанныеСеансов = Новый ТаблицаЗначений;
	ДанныеСеансов.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ДанныеСеансов.Колонки.Добавить("НомерСеанса", ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(10));
	ДанныеСеансов.Колонки.Добавить("ТипКлиента", ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(0));
	ДанныеСеансов.Колонки.Добавить("Лицензия", ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(0));
	
	Сеансы = База.ПолучитьСеансы(); 
	ТипыКлиентов = ТипыКлиентов();
	
	Для Каждого Сеанс Из Сеансы Цикл
		Если Сеанс.СпящийСеанс 
			ИЛИ НЕ ЗначениеЗаполнено(Сеанс.UserName) 
			ИЛИ Сеанс.Лицензии.Количество() = 0 Тогда
			
			Продолжить;
		КонецЕсли;
		
		ТипКлиента = ТипыКлиентов.Получить(Сеанс.ИмяПриложения);
		
		Если ТипКлиента = Неопределено Тогда
			Продолжить;
		КонецЕсли;  
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Сеанс.UserName);  
		
		Если ПользовательИБ <> Неопределено Тогда	
			НоваяСтрока = ДанныеСеансов.Добавить(); 
			НоваяСтрока.УникальныйИдентификатор = ПользовательИБ.УникальныйИдентификатор;
			НоваяСтрока.НомерСеанса = Сеанс.НомерСеанса;
			НоваяСтрока.ТипКлиента = ТипКлиента;
			НоваяСтрока.Лицензия = Сеанс.Лицензии[0].КраткоеПредставление;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеСеансов;
	
КонецФункции

Функция НастройкиПодключенияКСерверуАдминистрирования() 
	
	ИмяСобытия = "Завершение неактивных сеансов";
	Назначение = Перечисления.НазначенияДанныхБезопасногоХранилища.НастройкиПодключенияКСерверуАдминистрирования;
	
	УстановитьПривилегированныйРежим(Истина);
	НастройкиПодключения = РегистрыСведений.БезопасноеХранилищеДанных.ПолучитьДанные(Назначение);
	УстановитьПривилегированныйРежим(Ложь); 
	
	Если НастройкиПодключения = Неопределено Тогда	
		ТекстОшибки = "Не заполнены настройки подключения к серверу администрирования 1С";	
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);	
	КонецЕсли;

	Возврат НастройкиПодключения;
	
КонецФункции

Функция ТипыКлиентов()

	ТипыКлиентов = Новый Соответствие;
	ТипыКлиентов.Вставить("WebClient", "Веб-клиент");
	ТипыКлиентов.Вставить("1CV8C", "Тонкий клиент");
	
	Возврат ТипыКлиентов;
	
КонецФункции

// Разрывает сеансы и соединения ИБ
//
// Параметры:
//  База - АдминистрированиеИнформационнаяБаза - Администрирование информационной базы
//
Процедура РазорватьСеансыИСоединения(База)
	
	СписокСеансы = База.ПолучитьСеансы(); 
	ТекущаяДата = ТекущаяДата();
	РазорваноСеансов = 0;
	РазорваноСоединений = 0;
	НеРазорваноСеансов = 0;                                     
	НеРазорваноСоединений = 0;
	ТекущийСеанс = НомерСеансаИнформационнойБазы();
	Соединения = База.ПолучитьСоединения();
	
	Для Каждого Сеанс Из СписокСеансы Цикл		
		// Отключаем только тонкий и веб клиенты
		Если Сеанс.ИмяПриложения <> "WebClient" И Сеанс.ИмяПриложения <> "1CV8C" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущийСеанс = Сеанс.НомерСеанса Тогда
			Продолжить;
		КонецЕсли;
		
		ДлительностьПростоя = ТекущаяДата - Сеанс.ВремяПоследнейАктивности;
		
		// Разрываем сеанс, если прошло больше минут чем указано в константе с момента последней активности
		Если ДлительностьПростоя >= ВремяЗавершенияНеактивныхСеансовСекунды Тогда   
			
			Если Сеанс.ИдентификаторСоединения <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
				Для Каждого Соединение Из Соединения Цикл
					Если Сеанс.ИдентификаторСоединения = Соединение.ИдентификаторСоединения Тогда
						СоединениеСеанса = Соединение;   
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Попытка
				Сеанс.ЗавершитьСеанс();
				РазорваноСеансов = РазорваноСеансов + 1;
			Исключение
				НеРазорваноСеансов = НеРазорваноСеансов + 1;
			КонецПопытки;
			
			Если СоединениеСеанса <> Неопределено Тогда
				Попытка
					СоединениеСеанса.Отключить();
					РазорваноСоединений = РазорваноСоединений + 1;
				Исключение
					НеРазорваноСоединений = НеРазорваноСоединений + 1;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Шаблон = "Успешно разорвано сеансов: %1. Не удалось разорвать: %2. Успешно разорвано соединений: %3. Не удалось разорвать: %4";
	ТекстСообщения = СтрШаблон(Шаблон, РазорваноСеансов, НеРазорваноСеансов, РазорваноСоединений, НеРазорваноСоединений);	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);  
	
КонецПроцедуры	

#КонецОбласти

#КонецЕсли
