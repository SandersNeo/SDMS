///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем ДополнительныеПараметрыПеретаскивания; // Хранит вспомогательные данные для перетаскивания

&НаКлиенте
Перем ИндексыКартинок_Зафиксирован; // Хранит индексы для зафиксированных картинок

&НаКлиенте
Перем КэшДополнительныхДанных; // Дополнительные параметры, которые использует клиент

&НаКлиенте
Перем НастройкиФормы Экспорт; // Дополнительные параметры, которые использует клиент

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ИнтеграцияДополнительныхПодсистем.НачатьЗамерВремени();
	
	Элементы.ОчередьЗаявок_Системы.Видимость = Ложь;
	Элементы.ОчередьЗаявок_Продукты.Видимость = Ложь;
	Элементы.ОчередьЗаявок_Филиалы.Видимость = Ложь;
	
	ИнициализацияПараметров();
	ИнициализацияНастроекКолонок();
	
	ИнтеграцияДополнительныхПодсистем.ДобавитьВидОчередиГабаритноеПланирование(Элементы.ОчередьЗаявокВидОчереди);
	
	Функциональность = СтрШаблон("Очередь заявок (%1)", ОчередьЗаявокВидОчереди);
	ОбщегоНазначенияВызовСервера.ОтслеживаниеИспользованияФункциональностиНаСервере(Функциональность, ИмяФормы);
	
	ОбновлениеПользовательскихНастроекДинамическогоСписка(); 
	
	ИнструментыСервер.ПриСозданииНаСервере(ЭтотОбъект, Элементы.Список_ОчередьЗаявок.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
			
	// Единоразовое получение данных для клиента с сервера
	КэшДополнительныхДанных = ПолучитьКэшДополнительныхДанныхДляКлиента(АдресВоВременномХранилище);
		
	ИндексыКартинок_Зафиксирован = КэшДополнительныхДанных["ИндексыКартинок_Зафиксирован"];    
	КэшДополнительныхДанных.Удалить(КэшДополнительныхДанных["ИндексыКартинок_Зафиксирован"]);
		
	// Получение настроек формы с сервера
	НастройкиФормы = КэшДополнительныхДанных["НастройкиФормы"];
	КэшДополнительныхДанных.Удалить(КэшДополнительныхДанных["НастройкиФормы"]);
	
	ОчередьЗаявок_ОбработатьВидимостьЗадач();
	
	ИнструментыКлиент.ПриОткрытии(ЭтотОбъект);

	ИнтеграцияДополнительныхПодсистем.ЗакончитьЗамерВремени("ОчередьЗаявок.ОткрытиеФормы", ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СписокСобытий = СтрРазделить(ИмяСобытия, ";");
	ЭтоМассив = СписокСобытий.Количество() > 1; 
	Счетчик = 0;
	
	Для Каждого Событие Из СписокСобытий Цикл
		
		Если СобытияОповещенияКлиент.СобытиеОбновлениеСписковИнструментов(Событие) Тогда
			ПараметрСобытия = ?(ЭтоМассив, Параметр[Счетчик], Параметр);
			
			СтандартнаяОбработка = ТипЗнч(Источник) = Тип("ДокументСсылка.ЗаявкаНаРазработку");
			
			Если СтандартнаяОбработка Тогда
				ИнструментыКлиент.УстановитьПризнакНеобходимостиОбновления(ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	ИнструментыКлиент.ОбработкаОповещения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ИнструментыКлиент.ПриЗакрытии(ЗавершениеРаботы, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОчередьЗаявокВидОчередиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ОчередьЗаявокВидОчереди) Тогда
		НастройкиФормы.ОчередьЗаявокВидОчереди = ОчередьЗаявокВидОчереди;
		ОчередьЗаявокВидОчередиСтрока = УправлениеИнструментамиРазработкиКлиентСервер.ПредставлениеПеречисления(ОчередьЗаявокВидОчереди);
		
		ОбновитьДанныеИнструмента();

		Функциональность = СтрШаблон("Очередь заявок (%1)", ОчередьЗаявокВидОчереди);
		ОбщегоНазначенияВызовСервера.ОтслеживаниеИспользованияФункциональностиНаСервере(Функциональность, ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередьЗаявокВидОчередиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередьЗаявокВидОчередиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередьЗаявок_ВидимостьЗадачНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.Группа_ОчередьЗаявок_Задачи.Видимость = НЕ Элементы.Группа_ОчередьЗаявок_Задачи.Видимость;
	НастройкиФормы.ОчередьЗаявок_ВидимостьЗадач = Элементы.Группа_ОчередьЗаявок_Задачи.Видимость;
	ОчередьЗаявок_ОбработатьВидимостьЗадач();	 
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередьЗаявок_СистемыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура("РазрабатываемыеСистемы", ОчередьЗаявок_Системы); 
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчередьЗаявок_СистемыПослеВыбора", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.СистемыУчета.Форма.МножественныйВыбор", ПараметрыОткрытия, ЭтотОбъект, КлючУникальности, , , 
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ОчередьЗаявок_ПродуктыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура("Выбранные", ОчередьЗаявок_Продукты); 
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчередьЗаявок_ПродуктыПослеВыбора", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.Продукты.Форма.МножественныйВыбор", ПараметрыОткрытия, ЭтотОбъект, КлючУникальности, , , 
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ОчередьЗаявок_ФилиалыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВыбранныеФилиалы", ОчередьЗаявок_Филиалы);
	ПараметрыОткрытия.Вставить("ITСтруктура", Истина);
	ПараметрыОткрытия.Вставить("ВключаяКоманды", Истина);	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчередьЗаявок_ФилиалыПослеВыбора", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.Филиалы.Форма.МножественныйВыбор", ПараметрыОткрытия, ЭтотОбъект, КлючУникальности, , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура Список_ОчередьЗаявокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные; 
	
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "Список_ОчередьЗаявокСвязь" Тогда
		ПараметрыОткрытия = Новый Структура("Источник, Редактирование", ТекущиеДанные.Заявка, Ложь);
		ОткрытьФорму("РегистрСведений.СвязанныеОбъекты.Форма.СписокСвязейОбъекта", ПараметрыОткрытия, ЭтотОбъект,
			, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	Иначе
		ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Заявка);
		ОткрытьФорму("Документ.ЗаявкаНаРазработку.ФормаОбъекта", ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Список_ОчередьЗаявокПриАктивизацииСтроки(Элемент)
	
	НастройкиСписка = НастройкиФормы[СтрШаблон("Список_ОчередьЗаявок%1", ОчередьЗаявокВидОчередиСтрока)];
	
	УправлениеИнструментамиРазработкиКлиент.ОбработкаАктивизацииСтрокиДанныхФормы(Элемент, 
		НастройкиСписка.ВыделеннаяСтрока);
	
	Список_ОчередьЗаявок_Задачи.Очистить();
		
	ТекущиеДанные = Элемент.ТекущиеДанные; 
	
	Если ТекущиеДанные = Неопределено Тогда
		ОчередьЗаявок_ОбновитьУправлениеПорядком(Элементы, Ложь, Ложь, Ложь);	
		Возврат;
	КонецЕсли;
	
	Элементы.Список_ОчередьЗаявокКонтекстноеМенюКопироватьВБуфер.Видимость = НЕ ТекущиеДанные.ЭтоГруппа;
	Элементы.Список_ОчередьЗаявокКонтекстноеМенюОткрытьВариантыСсылок.Видимость = НЕ ТекущиеДанные.ЭтоГруппа;
	
	ВидимостьОповещения(ТекущиеДанные);
	
	Если ТекущиеДанные.ЭтоГруппа ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.Заявка) Тогда	
		ОчередьЗаявок_ОбновитьУправлениеПорядком(Элементы, Ложь, Ложь, Ложь);
		Возврат;
	КонецЕсли; 
	
	ДанныеЗаявки = Новый Структура;
	ДанныеЗаявки.Вставить("УправлениеПорядком", УправлениеПорядкомЗаявокНаРазработку);
	ДанныеЗаявки.Вставить("ВидОчереди", ОчередьЗаявокВидОчереди);
	ДанныеЗаявки.Вставить("ГруппаЗаказчиков", ТекущиеДанные.ГруппаЗаказчиков);
	ДанныеЗаявки.Вставить("Направление", ТекущиеДанные.Направление);
	ДанныеЗаявки.Вставить("Филиал", ТекущиеДанные.Филиал); 
	ДанныеЗаявки.Вставить("Статус", ТекущиеДанные.Статус);
	
	Разрешения = УправлениеИнструментамиРазработкиКлиент.ОчередьЗаявокРазрешения(ДанныеЗаявки, КэшДополнительныхДанных, НастройкиФормы);
			
	ОчередьЗаявок_ОбновитьУправлениеПорядком(Элементы, Разрешения.ВозможностьИзменять, 
		Разрешения.ВозможностьЗафиксировать, ТекущиеДанные.Зафиксирован);	
		
	Если Элементы.Группа_ОчередьЗаявок_Задачи.Видимость Тогда		
		ОбновитьСписок_ОчередьЗаявок_Задачи(ТекущиеДанные.Заявка); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Список_ОчередьЗаявокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Список_ОчередьЗаявокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Список_ОчередьЗаявокПередРазворачиванием(Элемент, Строка, Отказ)
	
	НастройкиСписка = НастройкиФормы[СтрШаблон("Список_ОчередьЗаявок%1", ОчередьЗаявокВидОчередиСтрока)];	
	
	УправлениеИнструментамиРазработкиКлиент.ПередРазворачиваниемУзлаДерева(Список_ОчередьЗаявок, Строка, НастройкиСписка.РазвернутыеСтроки);
			
КонецПроцедуры

&НаКлиенте
Процедура Список_ОчередьЗаявокПередСворачиванием(Элемент, Строка, Отказ)
	
	НастройкиСписка = НастройкиФормы[СтрШаблон("Список_ОчередьЗаявок%1", ОчередьЗаявокВидОчередиСтрока)];	
	
	УправлениеИнструментамиРазработкиКлиент.ПередСворачиваниемУзлаДерева(Список_ОчередьЗаявок, Строка, НастройкиСписка.РазвернутыеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Список_ОчередьЗаявокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТекущиеДанные.ЭтоГруппа 
		ИЛИ ТекущиеДанные.Зафиксирован 
		ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.Заявка) Тогда
		
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	ДанныеЗаявки = Новый Структура;
	ДанныеЗаявки.Вставить("УправлениеПорядком", УправлениеПорядкомЗаявокНаРазработку);
	ДанныеЗаявки.Вставить("ВидОчереди", ОчередьЗаявокВидОчереди);
	ДанныеЗаявки.Вставить("ГруппаЗаказчиков", ТекущиеДанные.ГруппаЗаказчиков);
	ДанныеЗаявки.Вставить("Направление", ТекущиеДанные.Направление);
	ДанныеЗаявки.Вставить("Филиал", ТекущиеДанные.Филиал);
	ДанныеЗаявки.Вставить("Статус", ТекущиеДанные.Статус);
			
	Разрешения = УправлениеИнструментамиРазработкиКлиент.ОчередьЗаявокРазрешения(ДанныеЗаявки, КэшДополнительныхДанных, НастройкиФормы);
	
	Если НЕ Разрешения.ВозможностьИзменять Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметрыПеретаскивания = Новый Структура;
	ДополнительныеПараметрыПеретаскивания.Вставить("ИсходныйПорядок", ТекущиеДанные.Порядок); 
	ДополнительныеПараметрыПеретаскивания.Вставить("НовыйПорядок"); 
	ДополнительныеПараметрыПеретаскивания.Вставить("МинимальныйПорядок", ТекущиеДанные.МинимальныйПорядок); 
	ДополнительныеПараметрыПеретаскивания.Вставить("МаксимальныйПорядок", ТекущиеДанные.МаксимальныйПорядок);

КонецПроцедуры

&НаКлиенте
Процедура Список_ОчередьЗаявокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПеретаскиваемаяСтрока  = Список_ОчередьЗаявок.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	СтрокаПозиционирования = Список_ОчередьЗаявок.НайтиПоИдентификатору(Строка);    
	
	ЕстьБлокирующиеЗаявки = ЕстьБлокирующиеЗаявки(СтрокаПозиционирования.Порядок, 
		ДополнительныеПараметрыПеретаскивания.МинимальныйПорядок, ДополнительныеПараметрыПеретаскивания.МаксимальныйПорядок);
		
	ОтменаПеретаскивания = Ложь;
	
	Если СтрокаПозиционирования = Неопределено
		ИЛИ ПеретаскиваемаяСтрока = Неопределено
		ИЛИ СтрокаПозиционирования.ЭтоГруппа
		ИЛИ СтрокаПозиционирования.Зафиксирован
		ИЛИ ЕстьБлокирующиеЗаявки 
		ИЛИ СтрокаПозиционирования.Статус = ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Проработка") Тогда
		
		ОтменаПеретаскивания = Истина;
		
	ИначеЕсли ОчередьЗаявокВидОчереди = ПредопределенноеЗначение("Перечисление.ВидыОчереди.НаправлениеСистемаГруппаЗаказчиков") Тогда 
		
		Если СтрокаПозиционирования.Направление <> ПеретаскиваемаяСтрока.Направление
			ИЛИ СтрокаПозиционирования.Система <> ПеретаскиваемаяСтрока.Система
			ИЛИ СтрокаПозиционирования.ГруппаЗаказчиков <> ПеретаскиваемаяСтрока.ГруппаЗаказчиков Тогда
			
			ОтменаПеретаскивания = Истина;
		КонецЕсли;	
		
	ИначеЕсли ОчередьЗаявокВидОчереди = ПредопределенноеЗначение("Перечисление.ВидыОчереди.НаправлениеСистема") Тогда
		
		Если СтрокаПозиционирования.Направление <> ПеретаскиваемаяСтрока.Направление
			ИЛИ СтрокаПозиционирования.Система <> ПеретаскиваемаяСтрока.Система Тогда
			
			ОтменаПеретаскивания = Истина;
		КонецЕсли;
		
	ИначеЕсли ОчередьЗаявокВидОчереди = ПредопределенноеЗначение("Перечисление.ВидыОчереди.ПродуктСистема") Тогда
		
		Если СтрокаПозиционирования.Продукт <> ПеретаскиваемаяСтрока.Продукт
			ИЛИ СтрокаПозиционирования.Система <> ПеретаскиваемаяСтрока.Система Тогда
			
			ОтменаПеретаскивания = Истина;
		КонецЕсли;
		
	ИначеЕсли ОчередьЗаявокВидОчереди = ПредопределенноеЗначение("Перечисление.ВидыОчереди.Продукт") Тогда
		
		Если СтрокаПозиционирования.Продукт <> ПеретаскиваемаяСтрока.Продукт Тогда
			ОтменаПеретаскивания = Истина;
		КонецЕсли;
		
	ИначеЕсли ОчередьЗаявокВидОчереди = ПредопределенноеЗначение("Перечисление.ВидыОчереди.Филиал") Тогда
		
		Если СтрокаПозиционирования.Филиал <> ПеретаскиваемаяСтрока.Филиал Тогда	
			ОтменаПеретаскивания = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Если ОтменаПеретаскивания Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	Иначе
		ДополнительныеПараметрыПеретаскивания.НовыйПорядок = СтрокаПозиционирования.Порядок;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Список_ОчередьЗаявокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена
		ИЛИ ДополнительныеПараметрыПеретаскивания.ИсходныйПорядок = Неопределено
		ИЛИ ДополнительныеПараметрыПеретаскивания.НовыйПорядок = Неопределено Тогда
		
		ДополнительныеПараметрыПеретаскивания = Неопределено;
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Список_ОчередьЗаявок.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	ПараметрыПеремещения = УправлениеИнструментамиРазработкиКлиент.ОчередьЗаявокПараметрыПеремещения(ТекущиеДанные, 
		ОчередьЗаявокВидОчереди);
	Результат = УправлениеИнструментамиРазработкиВызовСервера.ОчередьЗаявокИзменитьПорядок(ПараметрыПеремещения, 
				ДополнительныеПараметрыПеретаскивания.НовыйПорядок);
	
	Если Результат.Успешно Тогда
		ОбновитьДанныеИнструмента();
		Оповестить(СобытияОповещенияКлиент.ИмяСобытияИзмененияЗаявкиВОчереди(), , ЭтотОбъект);
	Иначе
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(, Результат.ТекстОшибки);
	КонецЕсли;
		
	ДополнительныеПараметрыПеретаскивания = Неопределено;	
	
КонецПроцедуры

&НаКлиенте
Процедура Список_ОчередьЗаявок_ЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	ИмяПоля = Поле.Имя;
	
	Если ИмяПоля = "Список_ОчередьЗаявок_ЗадачиОбъектКомментарий" Тогда	
		СтандартнаяОбработка = Ложь;
		КоличествоНовыхКомментариев = Элемент.ТекущиеДанные.ОбъектКомментарий;
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Ключ", ТекущиеДанные.Задача);
		ПараметрыОткрытия.Вставить("КоличествоНовыхКомментариев", КоличествоНовыхКомментариев);
		
		ОткрытьФорму("Документ.Задача.Форма.ФормаДокумента", ПараметрыОткрытия);	
		
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Задача) Тогда
		ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Задача);
		ОткрытьФорму("Документ.Задача.Форма.ФормаДокумента", ПараметрыОткрытия);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

////////////////////////////////////////////////////////////////////////////////
// Общие команды

&НаКлиенте
Процедура КопироватьВБуфер(Команда)
	
	Если ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;                              
	
	ОбъектСсылка = Неопределено;
	
	Если ТекущийЭлемент.ТекущиеДанные <> Неопределено Тогда 
		
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		
		Если ТекущиеДанные.Свойство("Объект") Тогда
			ОбъектСсылка = ТекущиеДанные.Объект;
		ИначеЕсли ТекущиеДанные.Свойство("Заявка") Тогда
			ОбъектСсылка = ТекущиеДанные.Заявка;
		ИначеЕсли ТекущиеДанные.Свойство("Задача") Тогда
			ОбъектСсылка = ТекущиеДанные.Задача;
		ИначеЕсли ТекущиеДанные.Свойство("Ссылка") Тогда
			ОбъектСсылка = ТекущиеДанные.Ссылка;
		КонецЕсли; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда	
		ОбщегоНазначенияКлиент.КопироватьНавигационнуюСсылкуВБуферОбмена(ОбъектСсылка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтписатьсяОтОповещений(Команда) 

	ТекущиеДанные = Элементы.Список_ОчередьЗаявок.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	УчастникиПроцессовВызовСервера.Отписаться(ТекущиеДанные.Заявка);
	Оповестить(СобытияОповещенияКлиент.ИмяСобытияИзменения(), ТекущиеДанные.Заявка);
	ТекущиеДанные.ПолучатьОповещения = НЕ ТекущиеДанные.ПолучатьОповещения;
	ВидимостьОповещения(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВариантыСсылок(Команда)
	
	Если ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;                              
	
	ОбъектСсылка = Неопределено;
	
	Если ТекущийЭлемент.ТекущиеДанные <> Неопределено Тогда 
		
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		
		Если ТекущиеДанные.Свойство("Объект") Тогда
			ОбъектСсылка = ТекущиеДанные.Объект;
		ИначеЕсли ТекущиеДанные.Свойство("Заявка") Тогда
			ОбъектСсылка = ТекущиеДанные.Заявка;
		ИначеЕсли ТекущиеДанные.Свойство("Задача") Тогда
			ОбъектСсылка = ТекущиеДанные.Задача;
		ИначеЕсли ТекущиеДанные.Свойство("Ссылка") Тогда
			ОбъектСсылка = ТекущиеДанные.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда	
		ИнтерфейсПриложенияКлиент.ОткрытьОкноНавигационнойСсылки(ОбъектСсылка, ЭтотОбъект, КлючУникальности);
	КонецЕсли;
	
КонецПроцедуры
  
&НаКлиенте
Процедура ОткрытьФормуНастроекДинамическогоСписка(Команда) 
	
	КлючХранилища = "Обработка.ОчередьЗаявок.Форма.ФормаОбработки.Настройки_ОчередьЗаявок";   
	ПользовательскиеНастройки = ОчередьЗаявок_ПолучитьСтруктуруНастроек(ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура("КлючХранилища, ПользовательскиеНастройки", КлючХранилища, ПользовательскиеНастройки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьСохранениеНастроек", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.НастройкиДинамическогоСписка", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьсяНаОповещения(Команда) 
	
	ТекущиеДанные = Элементы.Список_ОчередьЗаявок.ТекущиеДанные;
			
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УчастникиПроцессовВызовСервера.ПодписатьсяНаОбъект(ТекущиеДанные.Заявка,
		КэшДополнительныхДанных.Получить("ТекущийПользователь"));
	Оповестить(СобытияОповещенияКлиент.ИмяСобытияИзменения(), ТекущиеДанные.Заявка);  
	ТекущиеДанные.ПолучатьОповещения = НЕ ТекущиеДанные.ПолучатьОповещения;
    ВидимостьОповещения(ТекущиеДанные);
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// Очередь заявок

&НаКлиенте
Процедура ОчередьЗаявок_Обновить(Команда)
	
	ОбновитьДанныеИнструмента();
	
КонецПроцедуры  

&НаКлиенте
Процедура ОчередьЗаявок_ЗафиксироватьПорядок(Команда) 
	
	ОчередьЗаявокЗафиксироватьПорядок(ЭтотОбъект, Элементы, ИндексыКартинок_Зафиксирован); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередьЗаявок_Переместить(Команда)
	
	ТекущиеДанные = Элементы.Список_ОчередьЗаявок.ТекущиеДанные;
	СтрокиДерева = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
	
	Если Команда.Имя = "ОчередьЗаявок_ПереместитьВверх" Тогда
		Направление = -1;
	ИначеЕсли Команда.Имя = "ОчередьЗаявок_ПереместитьВниз" Тогда
		Направление = 1;
	ИначеЕсли Команда.Имя = "ОчередьЗаявок_ПереместитьВНачало" Тогда
		Направление = -(СтрокиДерева.Индекс(ТекущиеДанные));
	ИначеЕсли Команда.Имя = "ОчередьЗаявок_ПереместитьВКонец" Тогда
		Направление = СтрокиДерева.Количество() - СтрокиДерева.Индекс(ТекущиеДанные) - 1;
	КонецЕсли;
		
	Результат = ОчередьЗаявокПереместить(Элементы.Список_ОчередьЗаявок.ТекущиеДанные, Направление, ОчередьЗаявокВидОчереди);
	
	Если Результат.Успешно Тогда
		ОбновитьДанныеИнструмента();
	ИначеЕсли ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
		ПоказатьПредупреждение(, Результат.ТекстОшибки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОчередьЗаявок_НастроитьСписок(Команда)
	
	ОчередьЗаявок_ОткрытьНастройкуСписка(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ОчередьЗаявок_НастроитьКолонки(Команда)
	
	НастройкиКолонокПоУмолчанию = НастройкиКолонокОчередьЗаявокПоУмолчанию();
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДоступныеНастройки", НастройкиКолонокОчередьЗаявок);
	ПараметрыОткрытия.Вставить("НастройкиПоУмолчанию", НастройкиКолонокПоУмолчанию);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИмяТаблицы", "Список_ОчередьЗаявок");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеНастроекКолонок", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаКолонок", ПараметрыОткрытия, ЭтотОбъект,
		КлючУникальности, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти   

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьСписок_ОчередьЗаявок_Задачи(Знач Заявка)
		
	Если НЕ ЗначениеЗаполнено(Заявка) Тогда 
		Возврат;
	КонецЕсли;
		
	Если ОчередьЗаявокВидОчереди = ПредопределенноеЗначение("Перечисление.ВидыОчереди.НаправлениеСистемаГруппаЗаказчиков")
		ИЛИ ОчередьЗаявокВидОчереди = ПредопределенноеЗначение("Перечисление.ВидыОчереди.НаправлениеСистема") Тогда
		
		ВыбранныеСистемы = ОчередьЗаявок_Системы;
	Иначе
		ВыбранныеСистемы = Неопределено;
	КонецЕсли;
	
	ПодготовленнаяТаблицаСписокЗадач = ОчередьЗаявок_ПодчиненныеЗадачи(Заявка, Список_ОчередьЗаявок_Задачи, ВыбранныеСистемы);
	
	Для Каждого СтрокаТаблицы Из ПодготовленнаяТаблицаСписокЗадач Цикл
		ЗаполнитьЗначенияСвойств(Список_ОчередьЗаявок_Задачи.Добавить(), СтрокаТаблицы);
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура ОчередьЗаявок_ОбработатьВидимостьЗадач()
	
	Если Элементы.Группа_ОчередьЗаявок_Задачи.Видимость Тогда
		ОчередьЗаявок_ВидимостьЗадач = "Скрыть задачи";
		Список_ОчередьЗаявок_Задачи.Очистить();	
		ТекущиеДанные = Элементы.Список_ОчередьЗаявок.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			ОбновитьСписок_ОчередьЗаявок_Задачи(ТекущиеДанные.Заявка); 
		КонецЕсли;
	Иначе
		ОчередьЗаявок_ВидимостьЗадач = "Раскрыть задачи";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередьЗаявок_ПродуктыПослеВыбора(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчередьЗаявок_Продукты = Результат;
	НастройкиФормы.ОчередьЗаявок_Продукты = ОчередьЗаявок_Продукты;	
	
	ОбновитьДанныеИнструмента();
	
КонецПроцедуры	

&НаКлиенте
Процедура ОчередьЗаявок_СистемыПослеВыбора(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчередьЗаявок_Системы = Результат;
	НастройкиФормы.ОчередьЗаявок_Системы = ОчередьЗаявок_Системы;
	
	ОбновитьДанныеИнструмента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередьЗаявок_ФилиалыПослеВыбора(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчередьЗаявок_Филиалы = Результат;
	НастройкиФормы.ОчередьЗаявок_Филиалы = ОчередьЗаявок_Филиалы;	
	
	ОбновитьДанныеИнструмента();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для НастройкиКолонок

&НаСервере
Процедура ИнициализацияНастроекКолонок() 
	
	КлючиНастроекКолонок = КлючиНастроекКолонокОчередьЗаявок();
	НастройкиКолонокОчередьЗаявок = ИнициализацияНастроекКолонокОчередьЗаявок(Элементы, КлючиНастроекКолонок);  
	
КонецПроцедуры        

&НаСервере
Функция ИнициализацияНастроекКолонокОчередьЗаявок(Элементы, Знач КлючиНастроекКолонок)
		
	НастройкиКолонокПоУмолчанию = НастройкиКолонокОчередьЗаявокПоУмолчанию();	   
	
	НастройкиКолонокОчередьЗаявок = ИнтерфейсПриложенияВызовСервера.ЗаполнитьПользовательскиеНастройки(НастройкиКолонокПоУмолчанию,
		КлючиНастроекКолонок);
		
	ИнтерфейсПриложенияКлиентСервер.ПрименитьПользовательскиеНастройки(Элементы, НастройкиКолонокОчередьЗаявок);	
	
	ИнтерфейсПриложения.ОбновитьПорядокКолонокНаСервере(НастройкиКолонокОчередьЗаявок.Порядок, 
		Элементы, Элементы["Список_ОчередьЗаявок"]);
		
	Возврат НастройкиКолонокОчередьЗаявок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючиНастроекКолонокОчередьЗаявок() 
	
	Возврат Новый Структура("Объект, Настройка", "Обработка.ОчередьЗаявок.Форма.ФормаОбработки", "НастройкиКолонокОчередьЗаявок");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НастройкиКолонокОчередьЗаявокПоУмолчанию() 
	
	// Порядок колонок в коде влияет на заполнение по умолчанию
	Состав = Новый СписокЗначений;                
	Состав.Добавить("Список_ОчередьЗаявокОграниченныйПросмотр", "Ограниченный просмотр", Ложь); 
	Состав.Добавить("Список_ОчередьЗаявокНазначена", "Назначена", Ложь);
	Состав.Добавить("Список_ОчередьЗаявокДнейВОчереди", "Дней", Ложь);
	Состав.Добавить("Список_ОчередьЗаявокАвтор", "Моя", Ложь);
	Состав.Добавить("Список_ОчередьЗаявокСвязь", "Связь", Ложь);
	Состав.Добавить("Список_ОчередьЗаявокПлановоеВремяЗадачЗаявки", "Плановое время", Ложь);
	Состав.Добавить("Список_ОчередьЗаявокПредставлениеСистемЗаявки", "Системы", Истина);
	Состав.Добавить("Список_ОчередьЗаявокПредставлениеГруппЗаказчиков", "Группы заказчиков", Ложь);
	Состав.Добавить("Список_ОчередьЗаявокСрокРеализации", "Срок реализации", Ложь);  
	Состав.Добавить("Список_ОчередьЗаявокОбъектКомментарий", "Новые комментарии", Ложь);
	Состав.Добавить("Список_ОчередьЗаявокНазначение", "Назначение", Истина);
	Состав.Добавить("Список_ОчередьЗаявокСпринт", "Спринт", Ложь);
	Состав.Добавить("Список_ОчередьЗаявокПорядок", "Порядок", Истина);
	Состав.Добавить("Список_ОчередьЗаявокЦелеваяЗаявка", "Целевая заявка", Ложь);
	
	ПорядковыйНомер = 1;
	Порядок = Новый Соответствие;
	
	Для Каждого ЭлементСписка Из Состав Цикл
		СтруктураПоля = Новый Структура("Поле, Представление", ЭлементСписка.Значение, ЭлементСписка.Представление);
		Порядок.Вставить(ПорядковыйНомер, СтруктураПоля);
		
		ПорядковыйНомер = ПорядковыйНомер + 1;
	КонецЦикла;
	
	Результат = Новый Структура("Состав, Порядок", Состав, Порядок);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеНастроекКолонок(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполняемыеСвойства = "Состав, Порядок";
	
	Если ДополнительныеПараметры.ИмяТаблицы = "Список_ОчередьЗаявок" Тогда
		ЗаполнитьЗначенияСвойств(НастройкиКолонокОчередьЗаявок, Результат, ЗаполняемыеСвойства);
		Ключи = КлючиНастроекКолонокОчередьЗаявок();	
		Настройки = НастройкиКолонокОчередьЗаявок; 
	Иначе
		Возврат;
	КонецЕсли;
	
	ИнтерфейсПриложенияКлиентСервер.ПрименитьПользовательскиеНастройки(Элементы, Настройки);
	
	Если Результат.ИзменилсяПорядок Тогда
		ОбновитьПорядокКолонок(ДополнительныеПараметры.ИмяТаблицы, Настройки.Порядок);
	КонецЕсли;

	// Сохранение пользовательских настроек
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(Ключи.Объект, Ключи.Настройка, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПорядокКолонок(Знач ИмяТаблицы, Знач Порядок)
	
	ТаблицаЭлемента = Элементы[ИмяТаблицы];
	ИнтерфейсПриложения.ОбновитьПорядокКолонокНаСервере(Порядок, Элементы, ТаблицаЭлемента);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

&НаКлиенте
Процедура ВидимостьОповещения(ТекущиеДанные)
	
	Подписаться = Элементы.Список_ОчередьЗаявокКонтекстноеМенюПодписатьсяНаОповещения;
	Отписаться = Элементы.Список_ОчередьЗаявокКонтекстноеМенюОтписатьсяОтОповещений;
	
	Подписаться.Видимость = НЕ ТекущиеДанные.ЭтоГруппа И НЕ ТекущиеДанные.ПолучатьОповещения;
	Отписаться.Видимость = НЕ ТекущиеДанные.ЭтоГруппа И ТекущиеДанные.ПолучатьОповещения;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияПараметров()
	
	НастройкиФормы = СформироватьНастройкиФормы();
		
	Настройки = Новый Структура;
	Настройки.Вставить("НастройкиФормы", НастройкиФормы);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Настройки);
	
	// Проверка работы полнотекстового поиска
	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Запретить Тогда
		Элементы.ПолнотекстовыйПоиск.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Группа_ОчередьЗаявок_Задачи.Видимость = НастройкиФормы.ОчередьЗаявок_ВидимостьЗадач;
	
	ОчередьЗаявок_Продукты = НастройкиФормы.ОчередьЗаявок_Продукты;
	ОчередьЗаявок_Системы = НастройкиФормы.ОчередьЗаявок_Системы;
	ОчередьЗаявок_Филиалы = НастройкиФормы.ОчередьЗаявок_Филиалы;
	ОчередьЗаявокВидОчереди = НастройкиФормы.ОчередьЗаявокВидОчереди;
	ОчередьЗаявокВидОчередиСтрока = УправлениеИнструментамиРазработкиКлиентСервер.ПредставлениеПеречисления(ОчередьЗаявокВидОчереди);

	УправлениеПорядкомЗаявокНаРазработку = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("УправлениеПорядкомЗаявокНаРазработку");

КонецПроцедуры

&НаСервере
Процедура ОбновлениеПользовательскихНастроекДинамическогоСписка()
	
	Свойства = СвойстваДляПолученияПользовательскихНастроек(ЭтотОбъект);
	
	ОбщегоНазначенияВызовСервера.ПользовательскиеНастройкиДинамическогоСписка(
		Свойства.КлючНастройкиСписка, ВариантыНастроек, ЭтотОбъект,
		Свойства.ПользовательскиеНастройкиСписка);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьСохранениеНастроек(Результат, ПараметрыОткрытия) Экспорт
	
	ОбновлениеПользовательскихНастроекДинамическогоСписка();
		
КонецПроцедуры		

&НаСервереБезКонтекста
Функция ПолучитьКэшДополнительныхДанныхДляКлиента(Знач АдресВоВременномХранилище = "")
	
	ПорядокСтатусаНовый = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтатусыОбъектов.Новый, "Порядок");
	ПорядокСтатусаВРеализацию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтатусыОбъектов.ВРеализацию, "Порядок");
	ПорядокСтатусаCodeReview = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтатусыОбъектов.CodeReview, "Порядок");
	
	ДанныеДляКлиента = Новый Соответствие;
	ДанныеДляКлиента.Вставить("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	ДанныеДляКлиента.Вставить("ФилиалПользователя", ПараметрыСеанса.Филиал);
	ДанныеДляКлиента.Вставить("МассивКастомныхКоманд", Справочники.Филиалы.ПолучитьКастомныеКомандыРуководителя());
		
	СистемыУчета = ПолучитьСистемуПользователяПоУмолчанию();
	ДанныеДляКлиента.Вставить("СистемаПользователя", СистемыУчета.СистемаПользователя);
	ДанныеДляКлиента.Вставить("СистемыУчета", СистемыУчета.СистемыУчета);
	ДанныеДляКлиента.Вставить("КомандаРазработчиков_ПустаяСсылка", Справочники.Филиалы.ПустаяСсылка());
	ДанныеДляКлиента.Вставить("СсылкаПрочиеЗаказчики", Справочники.ГруппыЗаказчиковНаправлений.ПрочиеЗаказчики); 
	ДанныеДляКлиента.Вставить("ПустаяСсылка_РолиПользователей", Справочники.РолиПользователей.ПустаяСсылка());
	
	Если ЭтоАдресВременногоХранилища(АдресВоВременномХранилище) Тогда
		Настройки = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
		ДанныеДляКлиента.Вставить("НастройкиФормы", Настройки.НастройкиФормы);
	Иначе
		ДанныеДляКлиента.Вставить("НастройкиФормы", Неопределено);
	КонецЕсли; 
	
	ДанныеДляКлиента.Вставить("ИндексыКартинок_Зафиксирован", ПолучитьСоответствиеИндексовЗафиксированных()); 
	
	Возврат ДанныеДляКлиента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСистемуПользователяПоУмолчанию()
	
	Результат = Новый Структура("СистемаПользователя, СистемыУчета", Справочники.СистемыУчета.ПустаяСсылка(), Новый СписокЗначений);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.СистемаПоУмолчанию КАК СистемаПоУмолчанию
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СистемыУчета.Ссылка КАК Ссылка,
	|	СистемыУчета.Представление КАК Представление,
	|	СистемыУчета.Наименование КАК Наименование
	|ИЗ
	|	Справочник.СистемыУчета КАК СистемыУчета
	|ГДЕ
	|	НЕ СистемыУчета.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("Ссылка", ПараметрыСеанса.ТекущийПользователь);
	Пакеты = Запрос.ВыполнитьПакет();
	РезультатСистемаПользователя = Пакеты.Получить(0);
	ВыборкаСистемыУчета = Пакеты.Получить(1).Выбрать();
	
	Если НЕ РезультатСистемаПользователя.Пустой() Тогда
		Выборка = РезультатСистемаПользователя.Выбрать();
		Выборка.Следующий();
		Результат.СистемаПользователя = Выборка.СистемаПоУмолчанию;
	КонецЕсли;
	
	Пока ВыборкаСистемыУчета.Следующий() Цикл
		Результат.СистемыУчета.Добавить(ВыборкаСистемыУчета.Ссылка, ВыборкаСистемыУчета.Представление, ,
			БиблиотекаКартинок.РазрабатываемаяСистема);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПрименитьНастройкуДинамическогоСписка(Команда)
	
	Свойства = СвойстваАктивнойСтраницы(ЭтотОбъект);
	Если Свойства.ИмяСтраницы = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	НастройкиОчередиЗаявок = ОбщегоНазначенияВызовСервера.ПолучитьНастройкиХранилищеНастроекДинамическихСписков(
		Свойства.КлючНастройкиСписка, ВариантыНастроек, Команда.Имя);	 
	
	Если НастройкиОчередиЗаявок <> Неопределено Тогда	
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиОчередиЗаявок);
		ЗаполнитьЗначенияСвойств(НастройкиФормы, НастройкиОчередиЗаявок);
		ОбновитьДанныеИнструмента();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СвойстваСохраняемойНастройки()
	
	Возврат Новый Структура("КлючОбъекта, КлючНастроек", "Обработка.ОчередьЗаявок.Форма.ФормаОбработки", "НастройкиФормы");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СвойстваАктивнойСтраницы(Форма)
	
	СвойстваСтраницы = Новый Структура();
	СвойстваСтраницы.Вставить("ИмяСтраницы");
	СвойстваСтраницы.Вставить("ЭлементФормы");
	СвойстваСтраницы.Вставить("КлючНастройкиСписка");
	СвойстваСтраницы.Вставить("ПользовательскиеНастройкиСписка");
	СвойстваСтраницы.Вставить("ДинамическийСписок");
	
	СвойстваСтраницы.ИмяСтраницы = "Страница_ОчередьЗаявок";
	СвойстваСтраницы.КлючНастройкиСписка = "Обработка.ОчередьЗаявок.Форма.ФормаОбработки.Настройки_ОчередьЗаявок";

	Возврат СвойстваСтраницы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СвойстваДляПолученияПользовательскихНастроек(Форма)
	
	Результат = Новый Структура("КлючНастройкиСписка, ПользовательскиеНастройкиСписка");	
	
	Результат.КлючНастройкиСписка = Новый Массив;
	Результат.КлючНастройкиСписка.Добавить("Обработка.ОчередьЗаявок.Форма.ФормаОбработки.Настройки_ОчередьЗаявок");
		
	Результат.ПользовательскиеНастройкиСписка = Новый Массив;
	Результат.ПользовательскиеНастройкиСписка.Добавить(Форма.Элементы.ОчередьЗаявок_ПользовательскиеНастройки);
		
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормы(Знач Настройки)
	
	СвойстваНастроек = СвойстваСохраняемойНастройки();
	
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(СвойстваНастроек.КлючОбъекта,
		СвойстваНастроек.КлючНастроек, Настройки);
	
КонецПроцедуры

&НаСервере
Функция СформироватьНастройкиФормы()
	
	Перем ЗначениеНастройки;
	
	// Создание пустой структуры настроек
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("ДоступныеГруппыЗаказчиков", Новый Соответствие);
	НастройкиФормы.Вставить("ДоступныеСистемы", Новый Соответствие);	
	НастройкиФормы.Вставить("ДоступныеНаправления", Новый Соответствие);
	НастройкиФормы.Вставить("ДоступныеСтатусы", Новый Соответствие);	
	НастройкиФормы.Вставить("УчастникиФилиалаПользователя", Новый Соответствие);
	НастройкиФормы.Вставить("ОчередьЗаявок_ВидимостьЗадач", Истина); 	
	НастройкиФормы.Вставить("ФилиалПользователя", Справочники.Филиалы.ПустаяСсылка());
	НастройкиФормы.Вставить("ДоступныеНаправления", Новый Соответствие);
	
	// Параметры списка
	НастройкиСписка = Новый Структура("ВыделеннаяСтрока, РазвернутыеСтроки, Направления",
		Неопределено, Новый Соответствие, Новый Соответствие);
	
	// Очередь заявок
	НастройкиФормы.Вставить("ОчередьЗаявокВидОчереди", Перечисления.ВидыОчереди.НаправлениеСистемаГруппаЗаказчиков);
	НастройкиФормы.Вставить("ОчередьЗаявок_Продукты", Новый СписокЗначений);
	НастройкиФормы.Вставить("ОчередьЗаявок_Системы", Новый СписокЗначений);
	НастройкиФормы.Вставить("ОчередьЗаявок_Филиалы", Новый СписокЗначений);
	
	Для Каждого ВидОчереди Из Перечисления.ВидыОчереди Цикл 
		ПредставлениеВидОчереди = УправлениеИнструментамиРазработкиКлиентСервер.ПредставлениеПеречисления(ВидОчереди);
		
		НастройкиФормы.Вставить(СтрШаблон("Список_ОчередьЗаявок%1", ПредставлениеВидОчереди), НастройкиСписка);
		НастройкиФормы.Вставить(СтрШаблон("Фильтры_ОчередьЗаявок%1", ПредставлениеВидОчереди), Новый Структура);
	КонецЦикла;
		
	СвойстваНастройки = СвойстваСохраняемойНастройки();
	
	// Восстановление сохраненных параметров
	СохраненныеНастройки = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(
		СвойстваНастройки.КлючОбъекта, СвойстваНастройки.КлючНастроек);
			
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда		
		// Перебор всех элементом структуры настроек. Если элемент найден в сохраненной
		// настройке, его значение присваивается исходному свойству. В противном случае
		// используется значение по-умолчанию.
		Для Каждого Настройка Из НастройкиФормы Цикл
			ИмяКлюча = Настройка.Ключ;
			
			// Если значение сохраненной настройки не существует
			Если НЕ СохраненныеНастройки.Свойство(ИмяКлюча, ЗначениеНастройки) Тогда
				Продолжить;
			КонецЕсли;
			
			// Если типы настроек соответствуют, присваиваем значение
			Если ТипЗнч(Настройка.Значение) = ТипЗнч(ЗначениеНастройки) Тогда
				НастройкиФормы.Вставить(ИмяКлюча, ЗначениеНастройки);
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли; 	
	
	НастройкиФормы.ФилиалПользователя = ПараметрыСеанса.Филиал;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	РолиПользователейПоНаправлениям.НаправлениеРазработки КАК Направление,
	|	РолиПользователейПоНаправлениям.Роль КАК РольПользователя
	|ПОМЕСТИТЬ РолиПользователя
	|ИЗ
	|	РегистрСведений.РолиПользователейПоНаправлениям КАК РолиПользователейПоНаправлениям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаправленияРазработки КАК НаправленияРазработки
	|		ПО РолиПользователейПоНаправлениям.НаправлениеРазработки = НаправленияРазработки.Ссылка
	|ГДЕ
	|	РолиПользователейПоНаправлениям.Пользователь = &Пользователь
	|	И НаправленияРазработки.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаправленияРазработки.Ссылка КАК Направление,
	|	НаправленияРазработки.Наименование КАК НаименованиеНаправления,
	|	ЕСТЬNULL(РолиПользователя.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) КАК РольПользователя,
	|	ВЫБОР
	|		КОГДА РолиПользователя.РольПользователя ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РолиПользователя.РольПользователя = ЗНАЧЕНИЕ(Справочник.РолиПользователей.РуководительНаправления)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК Руководитель,
	|	ВЫБОР
	|		КОГДА НаправленияРазработкиОтветственные.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Ответственный
	|ИЗ
	|	Справочник.НаправленияРазработки КАК НаправленияРазработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РолиПользователя КАК РолиПользователя
	|		ПО НаправленияРазработки.Ссылка = РолиПользователя.Направление
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияРазработки.Ответственные КАК НаправленияРазработкиОтветственные
	|		ПО НаправленияРазработки.Ссылка = НаправленияРазработкиОтветственные.Ссылка
	|			И (НаправленияРазработкиОтветственные.Сотрудник = &Пользователь)
	|ГДЕ
	|	НЕ НаправленияРазработки.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаправленияРазработки.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СистемыУчета.Ссылка КАК Система,
	|	СистемыУчета.Наименование КАК НаименованиеСистемы
	|ИЗ
	|	Справочник.СистемыУчета КАК СистемыУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыЗаказчиковНаправлений.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ГруппыЗаказчиковНаправленийЗаказчики.Пользователь ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Заказчик,
	|	ЕСТЬNULL(ГруппыЗаказчиковНаправленийЗаказчики.Ответственный, ЛОЖЬ) КАК Ответственный
	|ИЗ
	|	Справочник.ГруппыЗаказчиковНаправлений КАК ГруппыЗаказчиковНаправлений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыЗаказчиковНаправлений.Заказчики КАК ГруппыЗаказчиковНаправленийЗаказчики
	|		ПО ГруппыЗаказчиковНаправлений.Ссылка = ГруппыЗаказчиковНаправленийЗаказчики.Ссылка
	|			И (ГруппыЗаказчиковНаправленийЗаказчики.Пользователь = &Пользователь)";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Пакеты = Запрос.ВыполнитьПакет();
	ТаблицаНаправлений = Пакеты[1].Выгрузить();
	
	НовыеДоступныеНаправления = Новый Соответствие;
		
	Для Каждого СтрокаТаблицы Из ТаблицаНаправлений Цикл
		НайденноеНаправление = НастройкиФормы.ДоступныеНаправления.Получить(СтрокаТаблицы.Направление);			
		Использование = ?(НайденноеНаправление = Неопределено, Истина, НайденноеНаправление.Использование);
			
		ОписаниеСвойств = Новый Структура("НаименованиеНаправления, РольПользователя, Руководитель, Ответственный, Использование");
		ЗаполнитьЗначенияСвойств(ОписаниеСвойств, СтрокаТаблицы);
		ОписаниеСвойств.Использование = Использование;
		НовыеДоступныеНаправления.Вставить(СтрокаТаблицы.Направление, ОписаниеСвойств);		
	КонецЦикла;   
	
	НастройкиФормы.ДоступныеНаправления.Очистить(); 		
	НастройкиФормы.ДоступныеНаправления = НовыеДоступныеНаправления;
	
	Выборка = Пакеты[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		// Доступные системы
		НайденнаяСистема = НастройкиФормы.ДоступныеСистемы.Получить(Выборка.Система);		
		Если НайденнаяСистема = Неопределено Тогда
			Использование = Истина;
		Иначе
			Использование = НайденнаяСистема.Использование;
		КонецЕсли;
		
		ОписаниеСвойств = Новый Структура("НаименованиеСистемы, Использование", Выборка.НаименованиеСистемы, Использование);			
		НастройкиФормы.ДоступныеСистемы.Вставить(Выборка.Система, ОписаниеСвойств);
	КонецЦикла;
	
	ВыборкаГруппЗаказчиков = Пакеты[3].Выбрать();
	НовыеДоступныеГруппы = Новый Соответствие;
	
	Пока ВыборкаГруппЗаказчиков.Следующий() Цикл
		ДобавитьГруппуЗаказчиков(ВыборкаГруппЗаказчиков.Ссылка, ВыборкаГруппЗаказчиков.Заказчик, 
			ВыборкаГруппЗаказчиков.Ответственный, НастройкиФормы.ДоступныеГруппыЗаказчиков, НовыеДоступныеГруппы);
	КонецЦикла;
	
	ГруппаПрочиеЗаказчики = Справочники.ГруппыЗаказчиковНаправлений.ПрочиеЗаказчики;
	ДобавитьГруппуЗаказчиков(ГруппаПрочиеЗаказчики, Ложь, Ложь, НастройкиФормы.ДоступныеГруппыЗаказчиков, НовыеДоступныеГруппы);
	ПустаяГруппа = Справочники.ГруппыЗаказчиковНаправлений.ПустаяСсылка();
	ДобавитьГруппуЗаказчиков(ПустаяГруппа, Ложь, Ложь, НастройкиФормы.ДоступныеГруппыЗаказчиков, НовыеДоступныеГруппы);
	
	НастройкиФормы.Вставить("ДоступныеГруппыЗаказчиков", НовыеДоступныеГруппы);

	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Возврат НастройкиФормы;
	
КонецФункции 

&НаСервереБезКонтекста
Процедура ДобавитьГруппуЗаказчиков(Знач ГруппаЗаказчиков, Знач Заказчик, Знач Ответственный, Знач СтарыеГруппы, НовыеГруппы)
	
	НайденнаяГруппа = СтарыеГруппы.Получить(ГруппаЗаказчиков);
	
	ОписаниеСвойств = Новый Структура;
	ОписаниеСвойств.Вставить("Заказчик", Заказчик);
	ОписаниеСвойств.Вставить("Ответственный", Ответственный);
	ОписаниеСвойств.Вставить("Использование", ?(НайденнаяГруппа = Неопределено, Истина, НайденнаяГруппа.Использование));
	
	НовыеГруппы.Вставить(ГруппаЗаказчиков, ОписаниеСвойств);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСоответствиеИндексовЗафиксированных() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексКартинки,
	|	СтатусыОбъектов.ИндексЗафиксирован КАК ИндексЗафиксирован
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|ГДЕ
	|	СтатусыОбъектов.ИндексЗафиксирован > 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеИндексов = Новый Соответствие;
	СоответствиеИндексов.Вставить("ИндексКартинки_Зафиксирован", Справочники.СтатусыОбъектов.ИндексКартинкиЗафиксирован());
	
	Пока Выборка.Следующий() Цикл 
		СоответствиеИндексов.Вставить(Выборка.ИндексКартинки, Выборка.ИндексЗафиксирован); 
	КонецЦикла;
	
	Возврат СоответствиеИндексов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Управление порядком

&НаКлиенте
Функция ЕстьБлокирующиеЗаявки(Знач НовыйПорядок, Знач МинимальныйПорядок, Знач МаксимальныйПорядок) 
	
	Результат = Ложь;
	
	Если (ЗначениеЗаполнено(МаксимальныйПорядок) И НовыйПорядок <= МаксимальныйПорядок) 
		ИЛИ (ЗначениеЗаполнено(МинимальныйПорядок) И НовыйПорядок >= МинимальныйПорядок) Тогда
		ПоказатьПредупреждение(, "Порядок не может быть изменен. Для данного объекта существуют связанные объекты.");
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОчередьЗаявок_ОбновитьУправлениеПорядком(Элементы, Знач ВозможноУправлять, Знач ВозможноЗафиксировать, Знач Зафиксирован)  
	
	Элементы.ОчередьЗаявок_ЗафиксироватьПорядок.Доступность = ВозможноЗафиксировать;
	Элементы.ОчередьЗаявок_ЗафиксироватьПорядок.Пометка = Зафиксирован;
	Элементы.ОчередьЗаявок_ПереместитьВверх.Доступность = ВозможноУправлять;
	Элементы.ОчередьЗаявок_ПереместитьВниз.Доступность = ВозможноУправлять;
	Элементы.ОчередьЗаявок_ПереместитьВНачало.Доступность = ВозможноУправлять;
	Элементы.ОчередьЗаявок_ПереместитьВКонец.Доступность = ВозможноУправлять;
		
КонецПроцедуры

&НаКлиенте
Процедура ОчередьЗаявокЗафиксироватьПорядок(Форма, Элементы, Знач ИндексыКартинок_Зафиксирован) 
	
	ТекущиеДанные = Элементы.Список_ОчередьЗаявок.ТекущиеДанные; 
			
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТекущиеДанные.ЭтоГруппа 
		ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.Заявка) Тогда
		
		Возврат;
	КонецЕсли;       
		
 	РезультатОперации = ОчередьЗаявокЗафиксироватьПорядокСервер(ТекущиеДанные.Заявка, ТекущиеДанные.КлючОчереди);
	
	ТекущиеДанные.Зафиксирован = РезультатОперации.Зафиксирован;
	
	Если РезультатОперации.Зафиксирован Тогда   
		ИндексКартинки = ИндексыКартинок_Зафиксирован.Получить(ТекущиеДанные.ИндексКартинкиДоФиксации);
		
		Если ИндексКартинки = Неопределено Тогда
			ИндексКартинки = ИндексыКартинок_Зафиксирован.Получить("ИндексКартинки_Зафиксирован");
		КонецЕсли;
		
		ТекущиеДанные.ИндексКартинки = ИндексКартинки;
	Иначе
		ТекущиеДанные.ИндексКартинки = ТекущиеДанные.ИндексКартинкиДоФиксации;
	КонецЕсли;
	
	Элементы.ОчередьЗаявок_ЗафиксироватьПорядок.Пометка = ТекущиеДанные.Зафиксирован;

	Оповестить(СобытияОповещенияКлиент.ИмяСобытияИзмененияЗаявкиВОчереди(), , Форма);
	
КонецПроцедуры

&НаКлиенте
Функция ОчередьЗаявокПереместить(Знач ТекущиеДанные, Знач Направление, Знач ВидОчереди = Неопределено) 
	
	Результат = Новый Структура("Успешно, ТекстОшибки", Ложь, "");
	
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТекущиеДанные.ЭтоГруппа
		ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.Заявка) 
		ИЛИ ТекущиеДанные.Статус = ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Проработка") Тогда
		
		Возврат Результат;
	КонецЕсли;
	
	Если ТекущиеДанные.Зафиксирован Тогда
		ПоказатьПредупреждение(, "Порядок выбранного объекта зафиксирован и не может быть изменен.");
		Возврат Результат;
	КонецЕсли;
	
	СтрокиДерева = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
	МаксимальныйИндекс = СтрокиДерева.Количество() - 1;
	
	// Если в текущей ветке дерева меньше двух строк, то тут просто нечего двигать.
	// Если пользователь пытается сдвинуть крайнюю верхнюю заявку еще вверх или
	// крайнюю нижнюю вниз, то прерываем операцию, как бессмысленную.		
	Если (СтрокиДерева.Количество() < 2)
		ИЛИ (ТекущиеДанные.Порядок = СтрокиДерева[0].Порядок И Направление <= 0)
		ИЛИ (ТекущиеДанные.Порядок = СтрокиДерева[МаксимальныйИндекс].Порядок И Направление >= 0) Тогда
		
		Возврат Результат;
	КонецЕсли;
	
	// Попробуем найти ближайшую по направлению сдвига заявку, порядок которой не зафиксирован
	ИндексТекущейСтроки = СтрокиДерева.Индекс(ТекущиеДанные);
	ИндексПроверяемойСтроки = ИндексТекущейСтроки + Направление;
	ПорядокСмещаемойЗаявки  = Неопределено;
	
	СтатусПроработка = ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Проработка");
	
	Пока Истина Цикл
		ДанныеСтроки = СтрокиДерева.Получить(ИндексПроверяемойСтроки);
		Если НЕ ДанныеСтроки.Зафиксирован 
			И ДанныеСтроки.Статус <> СтатусПроработка Тогда
			
			ПорядокСмещаемойЗаявки = ДанныеСтроки.Порядок;
			Прервать;
		КонецЕсли;
		
		Если Направление > 1 И ДанныеСтроки.Статус = СтатусПроработка Тогда
			ИндексПроверяемойСтроки = ИндексПроверяемойСтроки - 1;
			Если ИндексПроверяемойСтроки <= ИндексТекущейСтроки Тогда
				Прервать;
			КонецЕсли;
			
		Иначе
			ИндексПроверяемойСтроки = ИндексПроверяемойСтроки + Направление;			
			Если (ИндексПроверяемойСтроки < 0) ИЛИ (ИндексПроверяемойСтроки > МаксимальныйИндекс) Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	// Если все предыдущие заявки (есди двигаться вверх) или последующие заявки
	// (если двигаться вниз) зафиксированы, то выходим из процедуры.
	Если ПорядокСмещаемойЗаявки = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ЕстьБлокирующиеЗаявки(ПорядокСмещаемойЗаявки, ТекущиеДанные.МинимальныйПорядок, ТекущиеДанные.МаксимальныйПорядок) Тогда
		Возврат Результат;
	КонецЕсли;   
	
	ПараметрыПеремещения = УправлениеИнструментамиРазработкиКлиент.ОчередьЗаявокПараметрыПеремещения(ТекущиеДанные, ВидОчереди);	
	Результат = УправлениеИнструментамиРазработкиВызовСервера.ОчередьЗаявокИзменитьПорядок(ПараметрыПеремещения, ПорядокСмещаемойЗаявки);
	
	Если Результат.Успешно Тогда
		Оповестить(СобытияОповещенияКлиент.ИмяСобытияИзмененияЗаявкиВОчереди(), , ЭтотОбъект);
	КонецЕсли;
	
	Возврат Результат;
			
КонецФункции

&НаСервере
Функция ОчередьЗаявокЗафиксироватьПорядокСервер(Знач Заявка, Знач КлючОчереди)
	
	Возврат РегистрыСведений.ОчередиЗаявок.ИзменитьФиксациюПоКлючу(Заявка, КлючОчереди);
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Настройки

&НаКлиенте
Процедура ОчередьЗаявок_ОткрытьНастройкуСписка(Знач Форма) 
	
	ПараметрыОткрытия = ИнтерфейсПриложенияКлиент.СформироватьПараметрыОткрытия();
		
	Фильтры = Форма.НастройкиФормы[СтрШаблон("Фильтры_ОчередьЗаявок%1", Форма.ОчередьЗаявокВидОчередиСтрока)];
	ПараметрыОткрытия.ПрочиеОтборы.Значение = Фильтры;
	ПараметрыОткрытия.ПрочиеОтборы.Использование = Истина;
	
	ПараметрыОткрытия.Вставить("ВидОчереди", Форма.ОчередьЗаявокВидОчереди);
	
	ПараметрыОткрытия.НастройкиПрочиеОтборы = "Обработки.ОчередьЗаявок.ПолучитьНастройкуПрочихОтборов(Параметры)";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьНастройкиОчередьЗаявок", Форма);
	ИнтерфейсПриложенияКлиент.ОткрытьФормуНастройкиИнструментов(ЭтотОбъект, ПараметрыОткрытия, ОписаниеОповещения);
	
КонецПроцедуры	

&НаКлиенте
Функция ОчередьЗаявок_ПолучитьСтруктуруНастроек(Знач Форма)   
	
	Отборы = СтрШаблон("Фильтры_ОчередьЗаявок%1", Форма.ОчередьЗаявокВидОчередиСтрока);
	ПользовательскиеНастройки = Новый Структура;
	ПользовательскиеНастройки.Вставить("ОчередьЗаявокВидОчереди", Форма.ОчередьЗаявокВидОчереди); 
	ПользовательскиеНастройки.Вставить("ОчередьЗаявок_Системы", Форма.ОчередьЗаявок_Системы); 
	ПользовательскиеНастройки.Вставить("ОчередьЗаявок_Продукты", Форма.ОчередьЗаявок_Продукты); 
	ПользовательскиеНастройки.Вставить("ОчередьЗаявок_Филиалы", Форма.ОчередьЗаявок_Филиалы); 
	ПользовательскиеНастройки.Вставить("ОчередьЗаявокВидОчередиСтрока", Форма.ОчередьЗаявокВидОчередиСтрока); 
	ПользовательскиеНастройки.Вставить(Отборы, Форма.НастройкиФормы[Отборы]);
	
	Возврат ПользовательскиеНастройки;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьНастройкиОчередьЗаявок(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда 
		Возврат;	
	КонецЕсли;
	
	НастройкиФормы[СтрШаблон("Фильтры_ОчередьЗаявок%1", ОчередьЗаявокВидОчередиСтрока)] = Результат.ПрочиеОтборы;		
	ОбновитьДанныеИнструмента();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Формирование

&НаКлиенте
Процедура ЗапуститьОбновлениеОчередьЗаявок()
	
	МетодОбновления = "Обработки.ОчередьЗаявок.ПолучитьДанныеОчередьЗаявок";
	
	НастройкиСписка = НастройкиФормы[СтрШаблон("Список_ОчередьЗаявок%1", ОчередьЗаявокВидОчередиСтрока)];
	
	Фильтры = НастройкиФормы[СтрШаблон("Фильтры_ОчередьЗаявок%1", ОчередьЗаявокВидОчередиСтрока)];

	Структура = Новый Структура;
	Структура.Вставить("ВыделеннаяСтрока", НастройкиСписка.ВыделеннаяСтрока);
	Структура.Вставить("РазвернутыеСтроки", НастройкиСписка.РазвернутыеСтроки);
	
	ПередаваемыеПараметры = Новый Структура;
	ПередаваемыеПараметры.Вставить("ВидОчереди", ОчередьЗаявокВидОчереди);
	ПередаваемыеПараметры.Вставить("Системы", ОчередьЗаявок_Системы);
	ПередаваемыеПараметры.Вставить("Продукты", ОчередьЗаявок_Продукты);
	ПередаваемыеПараметры.Вставить("Филиалы", ОчередьЗаявок_Филиалы);
	ПередаваемыеПараметры.Вставить("Фильтры", Фильтры);
	ПередаваемыеПараметры.Вставить("Список_ОчередьЗаявок", Структура);
	
	ПараметрыФонового = Новый Массив;
	ПараметрыФонового.Добавить(ПередаваемыеПараметры);
	
	ИнструментыКлиент.НачатьОбновлениеИнструмента(ЭтотОбъект, МетодОбновления,
		ПараметрыФонового, Элементы.Список_ОчередьЗаявок.Имя, , "ОбработатьДанныеОчередьЗаявок");
	
	Элементы.ОчередьЗаявок_УправлениеПорядком.Доступность = Ложь;
	Элементы.ОчередьЗаявок_Системы.ТолькоПросмотр = Истина;
	Элементы.ОчередьЗаявок_Продукты.ТолькоПросмотр = Истина;
	Элементы.ОчередьЗаявок_Филиалы.ТолькоПросмотр = Истина;
	Элементы.ОчередьЗаявок_ГруппаПанельНастроек.ТолькоПросмотр = Истина;
	Элементы.ОчередьЗаявокВидОчереди.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеИнструмента() Экспорт
	
	ИнструментыКлиент.ОбновлениеДанныхЗапущено(ЭтотОбъект);
	
	ЗапуститьОбновлениеОчередьЗаявок();

КонецПроцедуры

&НаСервере
Функция ОчередьЗаявок_ПодчиненныеЗадачи(Знач Заявка, Знач ТаблицаСписокЗадач, Знач ДоступныеСистемы)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	СтруктураПодчиненности.Объект КАК Задача
	|ПОМЕСТИТЬ ПодчиненныеЗадачи
	|ИЗ
	|	РегистрСведений.СтруктураПодчиненности КАК СтруктураПодчиненности
	|ГДЕ
	|	(ВЫРАЗИТЬ(СтруктураПодчиненности.Родитель КАК Документ.ЗаявкаНаРазработку)) = &Заявка
	|	И СтруктураПодчиненности.Объект ССЫЛКА Документ.Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставСпринтов.Объект КАК Задача,
	|	СоставСпринтов.Спринт КАК Спринт,
	|	ДокументСпринт.Дата КАК Дата
	|ПОМЕСТИТЬ СпринтЗадачаДата
	|ИЗ
	|	ПодчиненныеЗадачи КАК ПодчиненныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|			ПО СоставСпринтов.Спринт = ДокументСпринт.Ссылка
	|		ПО ПодчиненныеЗадачи.Задача = СоставСпринтов.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпринтЗадачаДата.Задача КАК Задача,
	|	МАКСИМУМ(СпринтЗадачаДата.Дата) КАК Дата
	|ПОМЕСТИТЬ ПоследняяДатаСпринта
	|ИЗ
	|	СпринтЗадачаДата КАК СпринтЗадачаДата
	|
	|СГРУППИРОВАТЬ ПО
	|	СпринтЗадачаДата.Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпринтЗадачаДата.Задача КАК Задача,
	|	СпринтЗадачаДата.Спринт КАК Спринт
	|ПОМЕСТИТЬ СпринтЗадачи
	|ИЗ
	|	ПоследняяДатаСпринта КАК ПоследняяДатаСпринта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СпринтЗадачаДата КАК СпринтЗадачаДата
	|		ПО ПоследняяДатаСпринта.Задача = СпринтЗадачаДата.Задача
	|			И ПоследняяДатаСпринта.Дата = СпринтЗадачаДата.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодчиненныеЗадачи.Задача КАК Задача,
	|	СУММА(ВЫБОР
	|			КОГДА ПодготовленныеСообщенияПользователяПоКатегориям.КатегорияСообщения = ЗНАЧЕНИЕ(Перечисление.КатегорииСообщенийПользователя.Комментарии)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СобытияКомментарии
	|ПОМЕСТИТЬ СобытияПоТипам
	|ИЗ
	|	ПодчиненныеЗадачи КАК ПодчиненныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодготовленныеСообщенияПользователяПоКатегориям КАК ПодготовленныеСообщенияПользователяПоКатегориям
	|		ПО (ПодчиненныеЗадачи.Задача = (ВЫРАЗИТЬ(ПодготовленныеСообщенияПользователяПоКатегориям.Объект КАК Документ.Задача)))
	|			И (ПодготовленныеСообщенияПользователяПоКатегориям.Пользователь = &Пользователь)
	|			И (НЕ ПодготовленныеСообщенияПользователяПоКатегориям.Отправлено)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПодчиненныеЗадачи.Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СрокиСдачиЗадач.Задача КАК Объект,
	|	СрокиСдачиЗадач.СрокСдачи КАК СрокСдачи
	|ПОМЕСТИТЬ СрокиСдачиЗадач
	|ИЗ
	|	РегистрСведений.СрокиСдачиЗадач.СрезПоследних(
	|			,
	|			Задача В
	|				(ВЫБРАТЬ
	|					ПодчиненныеЗадачи.Задача
	|				ИЗ
	|					ПодчиненныеЗадачи)) КАК СрокиСдачиЗадач
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументЗадача.Ссылка КАК Задача,
	|	""["" + ДокументЗадача.Номер + ""] "" + ДокументЗадача.Наименование КАК Наименование,
	|	ЕСТЬNULL(ПланируемыеТрудозатраты.Трудозатраты, 0) КАК ОценкаТрудозатрат,
	|	ДокументЗадача.СистемаУчета КАК СистемаУчета,
	|	ПРЕДСТАВЛЕНИЕ(ДокументЗадача.Филиал) КАК Филиал,
	|	ДокументЗадача.Назначена КАК Назначена,
	|	СтатусыОбъектов.Наименование КАК СтатусПредставление,
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексКартинки,
	|	ЕСТЬNULL(Пользователи.Наименование, """") КАК НазначенаПредставление,
	|	ЕСТЬNULL(СобытияПоТипам.СобытияКомментарии, 0) КАК Комментарии,
	|	ЕСТЬNULL(СпринтЗадачи.Спринт, ЗНАЧЕНИЕ(Документ.Спринт.ПустаяСсылка)) КАК Спринт,
	|	ЕСТЬNULL(СрокиСдачиЗадач.СрокСдачи, ДАТАВРЕМЯ(1, 1, 1)) КАК СрокРеализации
	|ИЗ
	|	ПодчиненныеЗадачи КАК ПодчиненныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО ПодчиненныеЗадачи.Задача = ДокументЗадача.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (ДокументЗадача.Статус = СтатусыОбъектов.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (ДокументЗадача.Назначена = Пользователи.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СобытияПоТипам КАК СобытияПоТипам
	|		ПО ПодчиненныеЗадачи.Задача = СобытияПоТипам.Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпринтЗадачи КАК СпринтЗадачи
	|		ПО ПодчиненныеЗадачи.Задача = СпринтЗадачи.Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
	|		ПО ДокументЗадача.Ссылка = ПланируемыеТрудозатраты.Объект
	|			И (ПланируемыеТрудозатраты.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ СрокиСдачиЗадач КАК СрокиСдачиЗадач
	|		ПО ПодчиненныеЗадачи.Задача = СрокиСдачиЗадач.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыОбъектов.Порядок";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаЗадача = ТаблицаСписокЗадач.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗадача, Выборка, , "Наименование");
		
		СтрокаЗадача.Наименование = СтрШаблон("%1 (%2)", Выборка.Наименование, Выборка.Филиал);
		// Количество новых изменений объекта для текущего пользователя.
		Комментарии = Выборка.Комментарии;
		
		СтрокаЗадача.ЕстьСпринт = ЗначениеЗаполнено(Выборка.Спринт);
		
		СтрокаЗадача.ОбъектКомментарий = ?(Комментарии = 0, "", Комментарии);
		
		СтрокаЗадача.НазначенаПредставление = ОбщегоНазначенияКлиентСервер.ПолучитьФамилиюИнициалыПользователя(Выборка.НазначенаПредставление);
		
		Если ДоступныеСистемы <> Неопределено 
			И ДоступныеСистемы.НайтиПоЗначению(Выборка.СистемаУчета) = Неопределено Тогда
			
			СтрокаЗадача.ЧужаяСистема = Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаСписокЗадач;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьДанныеОчередьЗаявок() Экспорт
	
	ИнструментыКлиент.ОбработатьОтложенноеОбновлениеИнструмента(ЭтотОбъект, Элементы.Список_ОчередьЗаявок.Имя, "Обработки.ОчередьЗаявок.ПолучитьДанныеОчередьЗаявок");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОбновленияИнструмента(Данные, ДополнительныеПараметры) Экспорт
	
	ЭлементыДерева = ЭтотОбъект[ДополнительныеПараметры.ОбновляемаяТаблица].ПолучитьЭлементы();
	ИнструментыКлиент.ЗаполнитьДанныеИнструмента(ЭлементыДерева, Данные, ДополнительныеПараметры.МетодОбновления);
	
	Фильтры = НастройкиФормы[СтрШаблон("Фильтры_ОчередьЗаявок%1", ОчередьЗаявокВидОчередиСтрока)];
	ОбработатьИзменениеНастроекНаСервере(НастройкиФормы, Фильтры);
	
	НастройкиСписка = НастройкиФормы[СтрШаблон("Список_ОчередьЗаявок%1", ОчередьЗаявокВидОчередиСтрока)];
	
	УправлениеИнструментамиРазработкиКлиент.ВосстановитьДанныеФормыВПредыдущееСостояние(ЭтотОбъект, 
		ДополнительныеПараметры.ОбновляемаяТаблица, НастройкиСписка);

	СохранитьНастройкиФормы(НастройкиФормы);
	
	Элементы.ОчередьЗаявок_УправлениеПорядком.Доступность = Истина;
	Элементы.ОчередьЗаявок_Системы.ТолькоПросмотр = Ложь;
	Элементы.ОчередьЗаявок_Продукты.ТолькоПросмотр = Ложь;
	Элементы.ОчередьЗаявок_Филиалы.ТолькоПросмотр = Ложь;
	Элементы.ОчередьЗаявок_ГруппаПанельНастроек.ТолькоПросмотр = Ложь;
	Элементы.ОчередьЗаявокВидОчереди.ТолькоПросмотр = Ложь;
	
	ИнструментыКлиент.ЗакончитьОбновлениеИнструмента(ЭтотОбъект, ДополнительныеПараметры, Данные.УИДЗамера);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеНастроекНаСервере(НастройкиФормы, Фильтры)
	
	СохранитьНастройкиФормы(НастройкиФормы);
	
	Элементы.ОчередьЗаявок_УправлениеПорядком.Видимость =
		(ОчередьЗаявокВидОчереди <> Перечисления.ВидыОчереди.НаправлениеСистема);
	
	НастроитьЭлементыОчередьЗаявок(ОчередьЗаявокВидОчереди);
	
	УправлениеИнструментамиРазработки.ОбновитьПредставлениеФильтров(Элементы["ОчередьЗаявок_ГруппаНастройки"], Фильтры);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуЗаявки_ОчередьЗаявок(НоваяСтрока, Выборка, UID, КартинкиСвязей, СквознойПорядок = Неопределено)
	
	ЭтоПустаяЗаявка = НЕ ЗначениеЗаполнено(Выборка.Заявка);
		
	Если НЕ ЭтоПустаяЗаявка Тогда
		Если ЗначениеЗаполнено(Выборка.КороткоеНазваниеПроекта) Тогда
			Информация = СтрШаблон("Автор: %1. Проект: %2", Выборка.АвторПредставление, Выборка.КороткоеНазваниеПроекта);
		Иначе
			Информация = СтрШаблон("Автор: %1", Выборка.АвторПредставление);
		КонецЕсли;
		
		НаименованиеЗаявки = СтрШаблон("[%1] %2 (%3)", Выборка.Номер, Выборка.Наименование, Информация);
	Иначе
		НаименованиеЗаявки = "Очередь пустая. Двойной клик для создания заявки.";
	КонецЕсли;	
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	
	НоваяСтрока.Наименование = НаименованиеЗаявки;
	НоваяСтрока.UID = UID;
	НоваяСтрока.Назначение = БиблиотекаКартинок[Выборка.НазначениеИмяКартинки];	
	
	Если СквознойПорядок = Неопределено Тогда
		НоваяСтрока.ПредставлениеПорядка = Выборка.Порядок;
	Иначе
		НоваяСтрока.ПредставлениеПорядка = СквознойПорядок;
	КонецЕсли;
	
	НоваяСтрока.Связь = КартинкиСвязей.Получить(Выборка.Связь); 
	НоваяСтрока.ОбъектКомментарий = ?(Выборка.Комментарии = 0, "", Выборка.Комментарии);
	
	Если Выборка.ДатаНачалаСпринт > ТекущаяДатаСеанса() Тогда 
		НоваяСтрока.Спринт = БиблиотекаКартинок["СпринтБудущий"];
	ИначеЕсли ЗначениеЗаполнено(Выборка.ДатаНачалаСпринт) Тогда
		НоваяСтрока.Спринт = БиблиотекаКартинок["СпринтПланирование"];
	КонецЕсли;	
	
	// Изменения
	ВажныеИзменения = Выборка.ИзмененияОбъектаВажные;
	ПрочиеИзменения = Выборка.ИзмененияОбъектаПрочие;
	ИзмененияОбъекта = ВажныеИзменения + ПрочиеИзменения;
	
	НоваяСтрока.ОбъектИзменение = ?(ИзмененияОбъекта = 0, "", ИзмененияОбъекта);
	НоваяСтрока.ОбъектИзменениеВажные = ?(ВажныеИзменения = 0, "", ВажныеИзменения);
	НоваяСтрока.ОбъектИзменениеПрочие = ?(ПрочиеИзменения = 0, "", ПрочиеИзменения);
	
	ВыборкаДополнительныеДанные = Выборка.Выбрать();
	
	ГруппыЗаказчиков = Новый Массив;
	Назначенные = Новый Массив;
	
	Пока ВыборкаДополнительныеДанные.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДополнительныеДанные.Назначена) 
			И Назначенные.Найти(ВыборкаДополнительныеДанные.Назначена) = Неопределено Тогда
			Назначенные.Добавить(ВыборкаДополнительныеДанные.Назначена);
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаДополнительныеДанные.ГруппаЗаказчиковПредставлениеВсе) 
			И ГруппыЗаказчиков.Найти(ВыборкаДополнительныеДанные.ГруппаЗаказчиковПредставлениеВсе) = Неопределено Тогда
			ГруппыЗаказчиков.Добавить(ВыборкаДополнительныеДанные.ГруппаЗаказчиковПредставлениеВсе);
		КонецЕсли;
	КонецЦикла;
	
	Если Назначенные.Количество() > 0 Тогда
		НоваяСтрока.Назначена = СтрСоединить(Назначенные, " / ");
	КонецЕсли;
	
	Если ГруппыЗаказчиков.Количество() > 0 Тогда
		НоваяСтрока.ПредставлениеГруппЗаказчиков = СтрСоединить(ГруппыЗаказчиков, "; ");
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыОчередьЗаявок(Знач ВидОчереди)
	
	Если ВидОчереди = Перечисления.ВидыОчереди.Продукт
		ИЛИ ВидОчереди = Перечисления.ВидыОчереди.ПродуктСистема Тогда
		Элементы["ОчередьЗаявок_Продукты"].Видимость = Истина;
		Элементы["ОчередьЗаявок_Системы"].Видимость = Ложь;
		Элементы["ОчередьЗаявок_Филиалы"].Видимость = Ложь;
		Элементы["Список_ОчередьЗаявокНаименование"].Заголовок = "Продукт / Заявка";
		
	ИначеЕсли ВидОчереди = Перечисления.ВидыОчереди.Филиал
		ИЛИ ВидОчереди = Перечисления.ВидыОчереди.ГабаритноеПланирование Тогда	
		
		Элементы["ОчередьЗаявок_Филиалы"].Видимость = Истина;
		Элементы["ОчередьЗаявок_Продукты"].Видимость = Ложь;
		Элементы["ОчередьЗаявок_Системы"].Видимость = Ложь;
		Элементы["Список_ОчередьЗаявокНаименование"].Заголовок = "Филиал / Заявка";	
	Иначе
		Элементы["ОчередьЗаявок_Системы"].Видимость = Истина;
		Элементы["ОчередьЗаявок_Продукты"].Видимость = Ложь;	
		Элементы["ОчередьЗаявок_Филиалы"].Видимость = Ложь;
		Элементы["Список_ОчередьЗаявокНаименование"].Заголовок = "Направление / Заявка";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
