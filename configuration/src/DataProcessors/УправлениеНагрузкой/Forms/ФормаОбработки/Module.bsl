///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

// Хранит признак, что выполняется обновление текущей страницы обработку оповещения.
&НаКлиенте
Перем ПринудительноеОбновлениеТекущейСтраницы;

// Кэш вспомогательных данных
&НаКлиенте
Перем КэшДополнительныхДанных;

// Пользовательские настройки
&НаКлиенте
Перем НастройкиФормы Экспорт;

// Хранит пользовательские настройки колонок 
&НаКлиенте
Перем НастройкиКолонок;

// Хранит ссылку на документ источник оповещения
&НаКлиенте
Перем ИсточникОповещения;

// Хранит соответствие идентификаторов пользователей ссылкам
&НаКлиенте
Перем СоответствиеПользователей;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ИнтеграцияДополнительныхПодсистем.НачатьЗамерВремени();
	
	НастройкиФормы = ПолучитьНастройкиФормы();

	Элементы.Список_УправлениеНагрузкойНазначена.Видимость = Не ГруппироватьПоПользователям;
	
	Настройки = Новый Соответствие;
	Настройки.Вставить("НастройкиФормы", НастройкиФормы);
	
	ПолучитьОтображениеСложности();
	Элементы.Список_УправлениеНагрузкойСложностьЗадачи.Видимость = ОтображатьСложность;
		
	НастроитьПодсветкуПриПриближенииСрокаРеализации();
	РаботаСПроцессами.СоздатьКнопкиПереходаСтатусов(ЭтотОбъект, Элементы.СписокСтатусов_Список);
		
	НастройкиКолонок = ИнициализацияНастроекКолонок();
	Настройки.Вставить("НастройкиКолонок", НастройкиКолонок);
	
	ОбновлениеПользовательскихНастроекДинамическогоСписка();
	
	ИнструментыСервер.ПриСозданииНаСервере(ЭтотОбъект, Элементы.Список_УправлениеНагрузкой.Имя);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Настройки);
	ЗагрузитьСписокПользователейДляНазначения(НастройкиФормы.СписокПользователейДляНазначения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КэшДополнительныхДанных = ПолучитьКэшДополнительныхДанныхДляКлиента(АдресВоВременномХранилище);
	
	// Запуск обработчика сохранения настроек формы
	ПодключитьОбработчикОжидания("Подключаемый_СохранитьНастройкиФормы", 300);
	
	// Получение настроек формы с сервера
	НастройкиФормы = КэшДополнительныхДанных["НастройкиФормы"];
	КэшДополнительныхДанных.Удалить("НастройкиФормы");
	
	НастройкиКолонок = КэшДополнительныхДанных["НастройкиКолонок"];
	КэшДополнительныхДанных.Удалить("НастройкиКолонок");
	
	СписокПользователейДляНазначения = НастройкиФормы.СписокПользователейДляНазначения;
	СоответствиеПользователей = Новый Соответствие;
	Для Каждого Элемент Из СписокПользователейДляНазначения Цикл
		СоответствиеПользователей.Вставить(Элемент.Значение.УникальныйИдентификатор(), Элемент.Значение);
	КонецЦикла;
	НастройкиФормы.Удалить("СписокПользователейДляНазначения");

	КэшДополнительныхДанных.Вставить("КэшСтатусов", ЭтотОбъект["КэшСтатусов"]);	
	
	ИнструментыКлиент.ПриОткрытии(ЭтотОбъект);

	ИнтеграцияДополнительныхПодсистем.ЗакончитьЗамерВремени("УправлениеНагрузкой.ОткрытиеФормы", ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СписокСобытий = СтрРазделить(ИмяСобытия, ";");
	ЭтоМассив = СписокСобытий.Количество() > 1; 
	Счетчик = 0;
	
	Для Каждого Событие Из СписокСобытий Цикл
		
		ПараметрСобытия = ?(ЭтоМассив, Параметр[Счетчик], Параметр);
		
		Если СобытияОповещенияКлиент.СобытиеОбновлениеСписковИнструментов(Событие) Тогда
			
			ИнструментыКлиент.УстановитьПризнакНеобходимостиОбновления(ЭтотОбъект);
			
		КонецЕсли; 
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	ИнструментыКлиент.ОбработкаОповещения(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		СохранитьНастройкиФормы(НастройкиФормы);
	КонецЕсли;
	
	ИнструментыКлиент.ПриЗакрытии(ЗавершениеРаботы, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура Список_УправлениеНагрузкойВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список_УправлениеНагрузкой.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	Ссылка = ТекущиеДанные["Задача"];
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ПараметрыОткрытия = Новый Структура("Ключ", Ссылка);
		ТипСсылка = ТипЗнч(Ссылка);
		
		Если ТипСсылка = Тип("ДокументСсылка.Задача") Тогда
			ОткрытьФорму("Документ.Задача.Форма.ФормаДокумента", ПараметрыОткрытия);	
			
		ИначеЕсли ТипСсылка = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
			ОткрытьФорму("Документ.ЗаявкаНаРазработку.Форма.ФормаДокумента", ПараметрыОткрытия);
			
		ИначеЕсли ТипСсылка = Тип("ДокументСсылка.ВнутреннееЗадание") Тогда
			ОткрытьФорму("Документ.ВнутреннееЗадание.Форма.ФормаДокумента", ПараметрыОткрытия);
			
		ИначеЕсли ТипСсылка = Тип("ДокументСсылка.ВнутренниеТрудозатраты") Тогда
			ОткрытьФорму("Документ.ВнутренниеТрудозатраты.Форма.ФормаДокумента", ПараметрыОткрытия);
		КонецЕсли;
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура Список_УправлениеНагрузкойПриАктивизацииСтроки(Элемент)
	
	УправлениеИнструментамиРазработкиКлиент.ОбработкаАктивизацииСтрокиДанныхФормы(Элемент, 
		НастройкиФормы.Список_УправлениеНагрузкой.ВыделеннаяСтрока);
	
	ТекущиеДанные = Элементы.Список_УправлениеНагрузкой.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.Список_КонтекстноеМенюГруппаНазначить.Видимость = 
			(НЕ ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) И НЕ ТекущиеДанные.ЭтоГруппа);
			
		Элементы.Список_УправлениеНагрузкойКонтекстноеМенюКопироватьВБуфер.Видимость = НЕ ТекущиеДанные.ЭтоГруппа;
		Элементы.Список_УправлениеНагрузкойКонтекстноеМенюОткрытьВариантыСсылок.Видимость = НЕ ТекущиеДанные.ЭтоГруппа;
		Элементы.Список_УправлениеНагрузкойКонтекстноеМенюДобавитьТрудозатраты.Видимость = НЕ ТекущиеДанные.ЭтоГруппа;
		
		Если ТипЗнч(ТекущиеДанные.Задача) = Тип("ДокументСсылка.Задача") Тогда 
			Элементы.Список_УправлениеНагрузкойКонтекстноеМенюОткрытьЗаявкуВыделеннойЗадачи.Видимость = Истина;
		Иначе
			Элементы.Список_УправлениеНагрузкойКонтекстноеМенюОткрытьЗаявкуВыделеннойЗадачи.Видимость = Ложь;
		КонецЕсли;	
		
		ЗаполнитьСтатусыВСписке(ТекущиеДанные.Задача, "СписокСтатусов_Список");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Список_УправлениеНагрузкойПередРазворачиванием(Элемент, Строка, Отказ)
	
	УправлениеИнструментамиРазработкиКлиент.ПередРазворачиваниемУзлаДерева(Список_УправлениеНагрузкой, Строка, 
		НастройкиФормы.Список_УправлениеНагрузкой.РазвернутыеСтроки);	
	
КонецПроцедуры

&НаКлиенте
Процедура Список_УправлениеНагрузкойПередСворачиванием(Элемент, Строка, Отказ)
	
	УправлениеИнструментамиРазработкиКлиент.ПередСворачиваниемУзлаДерева(Список_УправлениеНагрузкой, Строка, 
		НастройкиФормы.Список_УправлениеНагрузкой.РазвернутыеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеНагрузкой_ФилиалITНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтметкиЭлементов_УправлениеНагрузкой_ФилиалыКоманды", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВыбранныеФилиалы", УправлениеНагрузкой_ФилиалыIT);
	ПараметрыОткрытия.Вставить("ITСтруктура", Истина);
	ПараметрыОткрытия.Вставить("ВключаяКоманды", Истина);
	
	ОткрытьФорму("Справочник.Филиалы.Форма.МножественныйВыбор", ПараметрыОткрытия, ЭтотОбъект,
		КлючУникальности, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// Общие команды

&НаКлиенте
Процедура ВзятьНаСебя(Команда)
	
	ТекущиеДанные = Элементы.Список_УправлениеНагрузкой.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Задача) <> Тип("ДокументСсылка.Задача") Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьНазначениеЗадачиСпискаНаПользователя(ТекущиеДанные.Задача);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТрудозатраты(Команда)
	
	Если ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;                              
	
	Если ТекущийЭлемент.ТекущиеДанные <> Неопределено Тогда 
		ДанныеОбъект = ТекущийЭлемент.ТекущиеДанные;		
		УчетТрудозатратКлиент.ОткрытьФормуДобавленияТрудозатратВКонтекстномМеню(ДанныеОбъект, УникальныйИдентификатор);
	КонецЕсли;                              
		
КонецПроцедуры

&НаКлиенте
Процедура КопироватьВБуфер(Команда)
	
	Если ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;                              
	
	ОбъектСсылка = Неопределено;

	Если ТекущийЭлемент.ТекущиеДанные <> Неопределено Тогда 
		
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		
		Если ТекущиеДанные.Свойство("Ссылка") Тогда
			ОбъектСсылка = ТекущиеДанные.Ссылка;
		ИначеЕсли ТекущиеДанные.Свойство("Задача") Тогда
			ОбъектСсылка = ТекущиеДанные.Задача;
		КонецЕсли; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		ОбщегоНазначенияКлиент.КопироватьНавигационнуюСсылкуВБуферОбмена(ОбъектСсылка);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьЗадачуНаПользователя(Команда)
		
	ИмяДляЗамены = "Список_НазначитьНа_";
	
	НазначитьЗадачуСпискаНаПользователя(Элементы.Список_УправлениеНагрузкой, Команда, ИмяДляЗамены);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВариантыСсылок(Команда)
	
	Если ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;                              
	
	ОбъектСсылка = Неопределено;
	
	Если ТекущийЭлемент.ТекущиеДанные <> Неопределено Тогда 
		
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		
		Если ТекущиеДанные.Свойство("Ссылка") Тогда
			ОбъектСсылка = ТекущиеДанные.Ссылка;
		ИначеЕсли ТекущиеДанные.Свойство("Задача") Тогда
			ОбъектСсылка = ТекущиеДанные.Задача;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		ИнтерфейсПриложенияКлиент.ОткрытьОкноНавигационнойСсылки(ОбъектСсылка, ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаявкуВыделеннойЗадачи(Команда)
	
	ТекущиеДанные = Элементы.Список_УправлениеНагрузкой.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектОснование = ТекущиеДанные.ОбъектОснование; 
		
	Если ЗначениеЗаполнено(ОбъектОснование) Тогда
		ОткрытьФорму("Документ.ЗаявкаНаРазработку.Форма.ФормаДокумента", Новый Структура("Ключ", ОбъектОснование));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекДинамическогоСписка(Команда)
	
	ПользовательскиеНастройки = Новый Структура;
	ПользовательскиеНастройки.Вставить("ФильтроватьНеназначенныеПоКомандам", ФильтроватьНеназначенныеПоКомандам);
	ПользовательскиеНастройки.Вставить("ПоказатьЗаявки", ПоказатьЗаявки);
	ПользовательскиеНастройки.Вставить("РазвернутьВсеУзлы", РазвернутьВсеУзлы);
	ПользовательскиеНастройки.Вставить("ПоказатьНеназначенныеЗадачи", ПоказатьНеназначенныеЗадачи);
	ПользовательскиеНастройки.Вставить("УправлениеНагрузкой_ФилиалыIT", УправлениеНагрузкой_ФилиалыIT);		
	ПользовательскиеНастройки.Вставить("ПоказатьВнутренниеЗадания", ПоказатьВнутренниеЗадания);
	ПользовательскиеНастройки.Вставить("Отбор_УправлениеНагрузкой", НастройкиФормы.Отбор_УправлениеНагрузкой);
	
	ПараметрыОткрытия = Новый Структура("КлючХранилища, ПользовательскиеНастройки", КлючНастроекСписка(), ПользовательскиеНастройки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьСохранениеНастроек", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.НастройкиДинамическогоСписка", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокУправлениеНагрузкой(Команда)
	
	ОбновитьДанныеИнструмента();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПоКнопке(Команда)
	
	РаботаСПроцессамиКлиент.УстановитьСтатусПоКнопке(Команда.Имя, УправлениеНагрузкой_ТекущийОбъект,
		КэшДополнительныхДанных);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Управление нагрузкой

&НаКлиенте
Процедура ПрименитьНастройкуДинамическогоСписка(Команда)
	
	НастройкиОчередиЗаявок = ОбщегоНазначенияВызовСервера.ПолучитьНастройкиХранилищеНастроекДинамическихСписков(
		КлючНастроекСписка(), ВариантыНастроек, Команда.Имя);	 
	
	Если НастройкиОчередиЗаявок <> Неопределено Тогда	
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиОчередиЗаявок);
		ЗаполнитьЗначенияСвойств(НастройкиФормы, НастройкиОчередиЗаявок);  
		
		Если НЕ НастройкиФормы.Отбор_УправлениеНагрузкой.Свойство("Статус") Тогда
			НастройкиФормы.Отбор_УправлениеНагрузкой.Вставить("Статус", Новый СписокЗначений);
		КонецЕсли;
		
		ОбновитьУправлениеНагрузкой();
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Функция ИнициализацияНастроекКолонок()
	
	Ключи = ПолучитьКлючиНастроекКолонокУправлениеНагрузкой();
	НастройкиПоУмолчанию = НастройкиКолонокУправлениеНагрузкойПоУмолчанию(ОтображатьСложность);
	НастройкиКолонок = ИнтерфейсПриложенияВызовСервера.ЗаполнитьПользовательскиеНастройки(НастройкиПоУмолчанию, Ключи);
		
	ИнтерфейсПриложенияКлиентСервер.ПрименитьПользовательскиеНастройки(Элементы, НастройкиКолонок);
	ОбновитьПорядокКолонок("Список_УправлениеНагрузкой", НастройкиКолонок.Порядок);   
	
	Возврат НастройкиКолонок;	
	
КонецФункции

&НаКлиенте
Процедура УправлениеНагрузкой_НастройкаКолонок(Команда)
	
	НастройкиПоУмолчанию = НастройкиКолонокУправлениеНагрузкойПоУмолчанию(ОтображатьСложность);
		
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДоступныеНастройки", НастройкиКолонок);
	ПараметрыОткрытия.Вставить("НастройкиПоУмолчанию", НастройкиПоУмолчанию);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИмяТаблицы", "Список_УправлениеНагрузкой");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеНастроекКолонок", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаКолонок", ПараметрыОткрытия, ЭтотОбъект,
		КлючУникальности, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура УправлениеНагрузкой_НастройкаОтбора(Команда)
	
	ОтборГруппыЗаказчиков = НастройкиФормы.Отбор_УправлениеНагрузкой.ГруппаЗаказчиков;
	ГруппыЗаказчиков = ОтборГруппыЗаказчиков.ВыгрузитьЗначения();
	Системы = НастройкиФормы.Отбор_УправлениеНагрузкой.Система; 
	Продукты = НастройкиФормы.Отбор_УправлениеНагрузкой.Продукт;
	Статусы = НастройкиФормы.Отбор_УправлениеНагрузкой.Статус;
	
	ПараметрыОткрытия = ИнтерфейсПриложенияКлиент.СформироватьПараметрыОткрытия();

	ПараметрыОткрытия.Системы.Значение = Системы;
	ПараметрыОткрытия.Системы.Использование = Истина;
	
	ПараметрыОткрытия.ГруппыЗаказчиков.Значение = ГруппыЗаказчиков;
	ПараметрыОткрытия.ГруппыЗаказчиков.Использование = Истина; 
	
	ПараметрыОткрытия.Продукты.Значение = Продукты;
	ПараметрыОткрытия.Продукты.Использование = Истина;
	
	ПараметрыОткрытия.Статусы.Значение = Статусы;
	ПараметрыОткрытия.Статусы.Использование = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УправлениеНагрузкой_ОбработатьВыборНастроек", ЭтотОбъект, ЭтотОбъект);
	
	ИнтерфейсПриложенияКлиент.ОткрытьФормуНастройкиИнструментов(ЭтотОбъект, ПараметрыОткрытия, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеНагрузкой_ОбработатьВыборНастроек(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиИзменены = Ложь;
	
	// Проверка изменения отбора по группе заказчиков
	СтарыйОтбор = НастройкиФормы.Отбор_УправлениеНагрузкой.ГруппаЗаказчиков;
	НовыйОтбор = Результат.ВыбранныеГруппыЗаказчиков;
	СпискиРазличаются = ОбщегоНазначенияКлиент.СпискиЗначенийРазличаются(СтарыйОтбор, НовыйОтбор);
	
	Если СпискиРазличаются Тогда
		НастройкиФормы.Отбор_УправлениеНагрузкой.ГруппаЗаказчиков = НовыйОтбор;
		НастройкиИзменены = Истина;
	КонецЕсли;
	
	// Проверка изменения отбора по системе
	СтарыйОтбор =  НастройкиФормы.Отбор_УправлениеНагрузкой.Система;
	НовыйОтбор = Результат.ВыбранныеСистемы;
	СпискиРазличаются = ОбщегоНазначенияКлиент.СпискиЗначенийРазличаются(СтарыйОтбор, НовыйОтбор);
	
	Если СпискиРазличаются Тогда
		НастройкиФормы.Отбор_УправлениеНагрузкой.Система = Результат.ВыбранныеСистемы;
		НастройкиИзменены = Истина;
	КонецЕсли;
	
	// Проверка изменения отбора по продукту
	СтарыйОтбор =  НастройкиФормы.Отбор_УправлениеНагрузкой.Продукт;
	НовыйОтбор = Результат.ВыбранныеПродукты;
	СпискиРазличаются = ОбщегоНазначенияКлиент.СпискиЗначенийРазличаются(СтарыйОтбор, НовыйОтбор);
	
	Если СпискиРазличаются Тогда
		НастройкиФормы.Отбор_УправлениеНагрузкой.Продукт = Результат.ВыбранныеПродукты;
		НастройкиИзменены = Истина;
	КонецЕсли;
	
	// Проверка изменения отбора по статусу
	СтарыйОтбор =  НастройкиФормы.Отбор_УправлениеНагрузкой.Статус;
	НовыйОтбор = Результат.ВыбранныеСтатусы;
	СпискиРазличаются = ОбщегоНазначенияКлиент.СпискиЗначенийРазличаются(СтарыйОтбор, НовыйОтбор);
	
	Если СпискиРазличаются Тогда
		НастройкиФормы.Отбор_УправлениеНагрузкой.Статус = Результат.ВыбранныеСтатусы;
		НастройкиИзменены = Истина;
	КонецЕсли;
	
	Если НастройкиИзменены Тогда
		ОбновитьДанныеИнструмента();
		СохранитьНастройкиФормы(НастройкиФормы);
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеНагрузкой_ОбработатьВыборПрочихНастроек(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;  
		
	НастройкиИзменены = Ложь;
	
	Если ПоказатьЗаявки <> Результат.ПоказыватьЗаявки Тогда
		ПоказатьЗаявки = Результат.ПоказыватьЗаявки;
		НастройкиФормы.ПоказатьЗаявки = ПоказатьЗаявки;
		НастройкиИзменены = Истина;
	КонецЕсли;
	
	Если ПоказатьНеназначенныеЗадачи <> Результат.ПоказыватьНеназначенные Тогда
		ПоказатьНеназначенныеЗадачи = Результат.ПоказыватьНеназначенные;
		НастройкиФормы.ПоказатьНеНазначенныеЗадачи = ПоказатьНеназначенныеЗадачи;
		НастройкиИзменены = Истина;
	КонецЕсли;
	
	Если ПоказатьВнутренниеЗадания <> Результат.ПоказыватьВнутренниеЗадания Тогда
		ПоказатьВнутренниеЗадания = Результат.ПоказыватьВнутренниеЗадания;
		НастройкиФормы.ПоказатьВнутренниеЗадания = ПоказатьВнутренниеЗадания;
		НастройкиИзменены = Истина;
	КонецЕсли;
	
	Если ПоказыватьВнутренниеТрудозатраты <> Результат.ПоказыватьВнутренниеТрудозатраты Тогда
		ПоказыватьВнутренниеТрудозатраты = Результат.ПоказыватьВнутренниеТрудозатраты;
		НастройкиФормы.ПоказыватьВнутренниеТрудозатраты = ПоказыватьВнутренниеТрудозатраты;
		НастройкиИзменены = Истина;
	КонецЕсли;	
	
	Если ГруппироватьПоПользователям <> Результат.ГруппироватьПоПользователям Тогда
		ГруппироватьПоПользователям = Результат.ГруппироватьПоПользователям;
		НастройкиФормы.ГруппироватьПоПользователям = ГруппироватьПоПользователям;
		НастройкиИзменены = Истина;
	КонецЕсли;	
	
	Если РазвернутьВсеУзлы <> Результат.РазворачиватьГруппы Тогда
		РазвернутьВсеУзлы = Результат.РазворачиватьГруппы;
		
		// Подготавливаем настройки формы и сохраняем идентификаторы строк.
		ОбработатьРазворотУзловДерева(НастройкиФормы,
			Список_УправлениеНагрузкой, РазвернутьВсеУзлы);
		
		// Процедура обрабатывает сворачивание/разворачивание строк дерева,
		// в зависимости от установленного флага.
		УправлениеИнструментамиРазработкиКлиент.РазвернутьИлиСвернутьСтрокиДерева(Список_УправлениеНагрузкой,
			Элементы.Список_УправлениеНагрузкой, НастройкиФормы.Список_УправлениеНагрузкой, РазвернутьВсеУзлы);
			
		НастройкиИзменены = Истина;
	КонецЕсли;
	
	Если НастройкиИзменены Тогда
		ОбновитьДанныеИнструмента();
		СохранитьНастройкиФормы(НастройкиФормы);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеНагрузкой_ПрочиеНастройки(Команда)
	
	ПрочиеНастройки = Новый Структура;
	ПрочиеНастройки.Вставить("ПоказыватьЗаявки", ПоказатьЗаявки);
	ПрочиеНастройки.Вставить("РазворачиватьГруппы", РазвернутьВсеУзлы);
	ПрочиеНастройки.Вставить("ПоказыватьНеназначенные", ПоказатьНеназначенныеЗадачи);
	ПрочиеНастройки.Вставить("ПоказыватьВнутренниеЗадания", ПоказатьВнутренниеЗадания);
	ПрочиеНастройки.Вставить("ПоказыватьВнутренниеТрудозатраты", ПоказыватьВнутренниеТрудозатраты);
	ПрочиеНастройки.Вставить("ГруппироватьПоПользователям", ГруппироватьПоПользователям);

	ОписаниеОповещения = Новый ОписаниеОповещения("УправлениеНагрузкой_ОбработатьВыборПрочихНастроек", ЭтотОбъект);	
	ИнтерфейсПриложенияКлиент.ОткрытьФормуПрочиеНастройкиИнструментов(ЭтотОбъект, 
		Новый Структура("ПрочиеНастройки", ПрочиеНастройки), ОписаниеОповещения);

КонецПроцедуры

#КонецОбласти                                      

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗавершитьНазначениеЗадачиСпискаНаПользователя(Знач Задача, Знач Пользователь = Неопределено)
	
	Результат = РаботаСПроцессамиВызовСервера.НазначитьЗадачуНаПользователя(Задача, Пользователь);
	Если Результат.Успешно Тогда
		ОбновитьУправлениеНагрузкой();
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.Сообщение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСписокПользователейДляНазначения(Знач СписокПользователей)
	
	Идентификатор = ОбщегоНазначенияКлиентСервер.СтрУникальныйИдентификатор(УникальныйИдентификатор);
	
	Для Каждого Элемент Из СписокПользователей Цикл
		ИдентификаторПользователя = СтрЗаменить(Строка(Элемент.Значение.УникальныйИдентификатор()), "-", "_");
		
		// Пул на тестирование
		НоваяКоманда = Команды.Добавить(СтрШаблон("Список_НазначитьНа_%1", ИдентификаторПользователя));
		НоваяКоманда.Заголовок = Элемент.Представление;
		НоваяКоманда.Действие = "НазначитьЗадачуНаПользователя";
		НоваяКоманда.Отображение = ОтображениеКнопки.Текст;
		НоваяКоманда.Подсказка = СтрШаблон("Назначить выбранную задачу на %1", Элемент.Представление);
		
		НоваяКнопка = Элементы.Добавить(СтрШаблон("УправлениеНагрузкой_%1_%2", Идентификатор, 
			ИдентификаторПользователя), Тип("КнопкаФормы"), Элементы.СписокПользователейДляНазначения);  
			
		НоваяКнопка.ИмяКоманды = НоваяКоманда.Имя;
				
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатусыВСписке(Задача, Список) 
	
	УправлениеНагрузкой_ТекущийОбъект = Задача; 
	МассивВидимыхСтатусов = ПолучитьВидимыеСтатусы(Задача, КэшДополнительныхДанных, Список);
	ЭлементСписокСтатусов = Элементы.Найти(Список); 
	
	Для Каждого Элемент Из ЭлементСписокСтатусов.ПодчиненныеЭлементы Цикл
		Элемент.Видимость = МассивВидимыхСтатусов.Найти(Элемент.Имя) <> Неопределено;			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьЗадачуСпискаНаПользователя(Список, Команда, Знач ИмяДляЗамены)
	
	ТекущиеДанные = Список.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено ИЛИ Команда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторПользователя = СтрЗаменить(Команда.Имя, ИмяДляЗамены, "");
	ОтформатированныйИдентификатор = СтрЗаменить(ИдентификаторПользователя, "_", "-");
	УникальныйИдентификаторПользователя = Новый УникальныйИдентификатор(ОтформатированныйИдентификатор);
	Пользователь = СоответствиеПользователей.Получить(УникальныйИдентификаторПользователя);
	
	Задача = ТекущиеДанные.Задача;
		
	ДанныеОтсутствия = ПользователиВызовСервера.ДанныеОтсутствия(Пользователь);
	
	Если ДанныеОтсутствия.Отсутствует Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Форма", ЭтотОбъект);
		ДопПараметры.Вставить("Задача", Задача);
		ДопПараметры.Вставить("Пользователь", Пользователь);	
		ИнтерфейсПриложенияКлиент.ПодтвердитьВыборОтсутствующегоПользователя(Пользователь, ДанныеОтсутствия, ДопПараметры);
	Иначе
		ЗавершитьНазначениеЗадачиСпискаНаПользователя(Задача, Пользователь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбновлениеУправлениеНагрузкой()
	
	МетодОбновления = "Обработки.УправлениеНагрузкой.ПолучитьДанныеУправлениеНагрузкой";
	
	НастройкиСписка = НастройкиФормы.Список_УправлениеНагрузкой;	
	
	ПередаваемыеПараметры = Новый Структура;
	ПередаваемыеПараметры.Вставить("ВыбранныйФилиалIT", УправлениеНагрузкой_ФилиалыIT);
	ПередаваемыеПараметры.Вставить("ПоказатьТолькоНазначенные", НЕ ПоказатьНеНазначенныеЗадачи);
	ПередаваемыеПараметры.Вставить("ПоказатьЗаявки", ПоказатьЗаявки);
	ПередаваемыеПараметры.Вставить("ПоказатьВнутренниеЗадания", ПоказатьВнутренниеЗадания);
	ПередаваемыеПараметры.Вставить("ПоказыватьВнутренниеТрудозатраты", ПоказыватьВнутренниеТрудозатраты);
	ПередаваемыеПараметры.Вставить("ФильтроватьНеназначенныеПоКомандам", ФильтроватьНеназначенныеПоКомандам);
	ПередаваемыеПараметры.Вставить("ФильтроватьПоГруппамЗаказчиков", НастройкиФормы.Отбор_УправлениеНагрузкой.ГруппаЗаказчиков);
	ПередаваемыеПараметры.Вставить("ФильтроватьПоСистемам", НастройкиФормы.Отбор_УправлениеНагрузкой.Система);
	ПередаваемыеПараметры.Вставить("ФильтроватьПоСтатусам", НастройкиФормы.Отбор_УправлениеНагрузкой.Статус);
	ПередаваемыеПараметры.Вставить("ФильтроватьПоПродуктам", НастройкиФормы.Отбор_УправлениеНагрузкой.Продукт);
	ПередаваемыеПараметры.Вставить("ГруппироватьПоПользователям", ГруппироватьПоПользователям);
	
	ПараметрыФонового = Новый Массив;
	ПараметрыФонового.Добавить(ПередаваемыеПараметры);
	
	ИнструментыКлиент.НачатьОбновлениеИнструмента(ЭтотОбъект, МетодОбновления,
		ПараметрыФонового, Элементы.Список_УправлениеНагрузкой.Имя, , "ОбработатьДанныеУправлениеНагрузкой");
		
	Элементы.УправлениеНагрузкой_ФилиалIT.ТолькоПросмотр = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеИнструмента() Экспорт
	
	ИнструментыКлиент.ОбновлениеДанныхЗапущено(ЭтотОбъект);
	
	ЗапуститьОбновлениеУправлениеНагрузкой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьУправлениеНагрузкой(Задача = Неопределено)
	
	ПроизвестиЗамерВремени = (НЕ ПринудительноеОбновлениеТекущейСтраницы);
	
	Если ПроизвестиЗамерВремени Тогда
		УИДЗамера = ИнтеграцияДополнительныхПодсистемКлиент.НачатьЗамерВремени(Ложь, "УправлениеНагрузкой.Формирование");
	КонецЕсли;
	
	ОбновитьДанныеИнструмента();
	
	Если ПроизвестиЗамерВремени Тогда
		ИнтеграцияДополнительныхПодсистемКлиент.ЗавершитьЗамерВремени(УИДЗамера);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеУправлениеНагрузкой() Экспорт
	
	ИнструментыКлиент.ОбработатьОтложенноеОбновлениеИнструмента(ЭтотОбъект, Элементы.Список_УправлениеНагрузкой.Имя, "Обработки.УправлениеНагрузкой.ПолучитьДанныеУправлениеНагрузкой");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОбновленияИнструмента(Данные, ДополнительныеПараметры) Экспорт
	
	ЭлементыДерева = ЭтотОбъект[ДополнительныеПараметры.ОбновляемаяТаблица].ПолучитьЭлементы();
	ИнструментыКлиент.ЗаполнитьДанныеИнструмента(ЭлементыДерева, Данные, ДополнительныеПараметры.МетодОбновления);
	
	НастройкиСписка = НастройкиФормы[ДополнительныеПараметры.ОбновляемаяТаблица];
	
	УправлениеИнструментамиРазработкиКлиент.ВосстановитьДанныеФормыВПредыдущееСостояние(ЭтотОбъект,
		ДополнительныеПараметры.ОбновляемаяТаблица, НастройкиСписка);
	
	Элементы.УправлениеНагрузкой_ФилиалIT.ТолькоПросмотр = Ложь;
	Элементы.Список_УправлениеНагрузкойНазначена.Видимость = Не ГруппироватьПоПользователям;

	ИнструментыКлиент.ЗакончитьОбновлениеИнструмента(ЭтотОбъект, ДополнительныеПараметры, Данные.УИДЗамера);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеПодтвержденияВыбораОтсутствующего(Знач ДопПараметры) Экспорт
	
	ЗавершитьНазначениеЗадачиСпискаНаПользователя(ДопПараметры.Задача, ДопПараметры.Пользователь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВидимыеСтатусы(Задача, КэшДополнительныхДанных, Группа)  
	
	Возврат РаботаСПроцессами.ПолучитьВидимыеСтатусы(Задача, КэшДополнительныхДанных, Группа);	
		
КонецФункции

&НаКлиенте
Процедура ПослеОтметкиЭлементов_УправлениеНагрузкой_ФилиалыКоманды(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.СпискиЗначенийРазличаются(УправлениеНагрузкой_ФилиалыIT, Результат) Тогда
		НастройкиФормы.ТекущийФилиал_УправлениеНагрузкой = Результат;
		УправлениеНагрузкой_ФилиалыIT = Результат;
		
		СохранитьНастройкиФормы(НастройкиФормы);
		
		// Обновим список, в зависимости от установленного переключателя.
		ОбновитьДанныеИнструмента();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с настройками пользователя

&НаСервереБезКонтекста
Функция ПолучитьКэшДополнительныхДанныхДляКлиента(Знач АдресВоВременномХранилище)
	
	Если ЭтоАдресВременногоХранилища(АдресВоВременномХранилище) Тогда
		ДанныеДляКлиента = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	Иначе
		ДанныеДляКлиента = Новый Соответствие;
		ДанныеДляКлиента.Вставить("НастройкиФормы", Неопределено);
	КонецЕсли;

	Возврат ДанныеДляКлиента;
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваСохраняемойНастройки()
	
	Возврат Новый Структура("КлючОбъекта, КлючНастроек", "Обработка.УправлениеНагрузкой.ФормаОбработки", "НастройкиФормы");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючНастроекСписка()
	
	Возврат "Обработка.УправлениеНагрузкой.Форма.ФормаОбработки.Настройки_УправлениеНагрузкой";
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормы(Знач Настройки)
	
	СвойстваНастроек = СвойстваСохраняемойНастройки();
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(СвойстваНастроек.КлючОбъекта,
		СвойстваНастроек.КлючНастроек, Настройки);
			
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СохранитьНастройкиФормы()
	
	СохранитьНастройкиФормы(НастройкиФормы);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиФормы()
	
	Перем ЗначениеНастройки;
		
	// Создание пустой структуры настроек
	НастройкиФормы = Новый Структура;	                   
		
	НастройкиФормы.Вставить("РазвернутьВсеУзлы", Ложь);
	НастройкиФормы.Вставить("ПоказатьНеНазначенныеЗадачи", Ложь); 
	НастройкиФормы.Вставить("ПоказатьВнутренниеЗадания", Ложь);
	НастройкиФормы.Вставить("ПоказыватьВнутренниеТрудозатраты", Ложь);	
	НастройкиФормы.Вставить("ВариантОтображения_УправлениеНагрузкой", 1);
	НастройкиФормы.Вставить("ФильтроватьНеназначенныеПоКомандам", Ложь);
	НастройкиФормы.Вставить("ТекущийФилиал_УправлениеНагрузкой", Новый СписокЗначений);
	НастройкиФормы.Вставить("ПоказатьЗаявки", Ложь); 
	НастройкиФормы.Вставить("ГруппироватьПоПользователям", Истина); 	
	
	НастройкиФормы.ТекущийФилиал_УправлениеНагрузкой.Добавить(ПараметрыСеанса.Филиал);

	СписокПользователейДляНазначения = УправлениеИнструментамиРазработки.ПолучитьСписокПользователейДляНазначения(Истина);
	НастройкиФормы.Вставить("СписокПользователейДляНазначения", СписокПользователейДляНазначения);
	
	// Параметры дерева
	НастройкиДерева = Новый Структура("ВыделеннаяСтрока, РазвернутыеСтроки", Неопределено, Новый Соответствие);
		
	НастройкиФормы.Вставить("Список_УправлениеНагрузкой", НастройкиДерева);	
			
	// Для хранения отборов по группам заказчиков
	НастройкиФормы.Вставить("Отбор_УправлениеНагрузкой", Новый Структура);
	НастройкиФормы.Отбор_УправлениеНагрузкой.Вставить("ГруппаЗаказчиков", Новый СписокЗначений);
	НастройкиФормы.Отбор_УправлениеНагрузкой.Вставить("Система", Новый СписокЗначений);
	НастройкиФормы.Отбор_УправлениеНагрузкой.Вставить("Продукт", Новый СписокЗначений);
	НастройкиФормы.Отбор_УправлениеНагрузкой.Вставить("Статус", Новый СписокЗначений);
	 
	СвойстваНастройки = СвойстваСохраняемойНастройки();
	
	// Восстановление сохраненных параметров
	СохраненныеНастройки = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(
		СвойстваНастройки.КлючОбъекта, СвойстваНастройки.КлючНастроек);
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда	
		// Перебор всех элементом структуры настроек. Если элемент найден в сохраненной
		// настройке, его значение присваивается исходному свойству. В противном случае
		// используется значение по-умолчанию.
		Для Каждого Настройка Из НастройкиФормы Цикл				
			ИмяКлюча = Настройка.Ключ;
			// Если значение сохраненной настройки не существует
			// Также если сохранен пустой список значений - не загружаем настройки.
			Если НЕ СохраненныеНастройки.Свойство(ИмяКлюча, ЗначениеНастройки) Тогда
				Продолжить;
			КонецЕсли;
			
			// Если типы настроек соответствуют, присваиваем значение
			Если ТипЗнч(Настройка.Значение) = ТипЗнч(ЗначениеНастройки) Тогда
				НастройкиФормы.Вставить(ИмяКлюча, ЗначениеНастройки);
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли; 

	// Установка значений фильтров на странице "Управление нагрузкой".
	ПоказатьНеназначенныеЗадачи = НастройкиФормы.ПоказатьНеназначенныеЗадачи;
	ПоказатьВнутренниеЗадания = НастройкиФормы.ПоказатьВнутренниеЗадания;
	ПоказыватьВнутренниеТрудозатраты = НастройкиФормы.ПоказыватьВнутренниеТрудозатраты;	
	РазвернутьВсеУзлы = НастройкиФормы.РазвернутьВсеУзлы;
	ФильтроватьНеназначенныеПоКомандам = НастройкиФормы.ФильтроватьНеназначенныеПоКомандам;
	ПоказатьЗаявки = НастройкиФормы.ПоказатьЗаявки;
	ГруппироватьПоПользователям = НастройкиФормы.ГруппироватьПоПользователям;
	
	Если НЕ НастройкиФормы.Отбор_УправлениеНагрузкой.Свойство("Статус") Тогда
		НастройкиФормы.Отбор_УправлениеНагрузкой.Вставить("Статус", Новый СписокЗначений);
	КонецЕсли;
	
	УправлениеНагрузкой_ФилиалыIT = НастройкиФормы.ТекущийФилиал_УправлениеНагрузкой;
			
	Возврат НастройкиФормы;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры   

&НаСервере
Процедура ПолучитьОтображениеСложности()
	
	Настройка = ПланыВидовХарактеристик.ВидыНастроекФилиалов.ИспользованиеАвтопулаЗадач;
	ИспользованиеАвтопула = РегистрыСведений.НастройкиФилиалов.ЗначениеНастройки(ПараметрыСеанса.Филиал, Настройка);
	
	Если ИспользованиеАвтопула Тогда
		Настройка = ПланыВидовХарактеристик.ВидыНастроекФилиалов.ОтображатьСложностьЗадач;
		ОтображатьСложность = РегистрыСведений.НастройкиФилиалов.ЗначениеНастройки(ПараметрыСеанса.Филиал, Настройка);
	Иначе
		ОтображатьСложность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПодсветкуПриПриближенииСрокаРеализации()
	
	ОформляемыеТаблицы = Новый Массив;
		
	ОписаниеТаблицы = ОбщегоНазначения.ОписаниеОформляемойТаблицыФормы("Список_УправлениеНагрузкой", 
		"Список_УправлениеНагрузкой");
	ОформляемыеТаблицы.Добавить(ОписаниеТаблицы);

	ОбщегоНазначения.НастроитьПодсветкуПриПриближенииСрокаРеализации(ЭтотОбъект, ОформляемыеТаблицы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НастройкиКолонокУправлениеНагрузкойПоУмолчанию(Знач ОтображатьСложность)
	
	// Порядок колонок в коде влияет на заполнение по умолчанию
	Состав = Новый СписокЗначений;
	Состав.Добавить("Список_УправлениеНагрузкойСтатусПредставление", "Статус", Ложь);
	Состав.Добавить("Список_УправлениеНагрузкойЦиклыCR", "Code R", Ложь);
	Состав.Добавить("Список_УправлениеНагрузкойОценкаStoryPoint", "SP", Ложь);
	Состав.Добавить("Список_УправлениеНагрузкойЦиклыТестирования", "Test", Ложь);
	Состав.Добавить("Список_УправлениеНагрузкойПланируемыеТрудозатраты", "План", Истина);
	Состав.Добавить("Список_УправлениеНагрузкойФактическиеТрудозатраты", "Факт", Истина);
	Состав.Добавить("Список_УправлениеНагрузкойГруппаДнейВРаботе", "В работе", Ложь);
	Состав.Добавить("Список_УправлениеНагрузкойДнейНаРассмотрении", "В очереди", Ложь);
	Состав.Добавить("Список_УправлениеНагрузкойНазначение", "Назначение", Истина); 
	Состав.Добавить("Список_УправлениеНагрузкойСпринт", "Спринт", Ложь);
	Состав.Добавить("Список_УправлениеНагрузкойГруппаЗаказчиков", "Группа заказчиков", Ложь);
	Состав.Добавить("Список_УправлениеНагрузкойПродукт", "Продукт", Ложь);
	Состав.Добавить("Список_УправлениеНагрузкойПредставлениеСистем", "Система", Истина);
	Состав.Добавить("Список_УправлениеНагрузкойЦелеваяЗаявка", "Целевая заявка", Ложь);
	Состав.Добавить("Список_УправлениеНагрузкойДнейНаСотруднике", "Дней на сотруднике", Ложь);
	
	// Изначально, колонка отображается в самой правой части, перед колонкой "Порядок".
	// При заполнении настроек по умолчанию, оставим колонку на том же месте.
	Если ОтображатьСложность Тогда
		Состав.Добавить("Список_УправлениеНагрузкойСложностьЗадачи", "Сложность", Ложь);
	КонецЕсли;
	
	Состав.Добавить("Список_УправлениеНагрузкойПорядок", "Порядок", Истина);
	
	ПорядковыйНомер = 1;
	Порядок = Новый Соответствие;
	
	Для Каждого ЭлементСписка Из Состав Цикл
		СтруктураПоля = Новый Структура("Поле, Представление", ЭлементСписка.Значение, ЭлементСписка.Представление);
		Порядок.Вставить(ПорядковыйНомер, СтруктураПоля);
		
		ПорядковыйНомер = ПорядковыйНомер + 1;
	КонецЦикла;
	
	Результат = Новый Структура("Состав, Порядок", Состав, Порядок);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКлючиНастроекКолонокУправлениеНагрузкой()
	
	Ключи = Новый Структура;
	Ключи.Вставить("Объект", "Обработка.УправлениеНагрузкой.ФормаОбработки");
	Ключи.Вставить("Настройка", "НастройкаКолонокУправлениеНагрузкой");
	
	Возврат Ключи;
	
КонецФункции

&НаСервере
Процедура ОбновлениеПользовательскихНастроекДинамическогоСписка()
	
	Свойства = Новый Структура("КлючНастройкиСписка, ПользовательскиеНастройкиСписка");	
	
	Свойства.КлючНастройкиСписка = Новый Массив;
	Свойства.КлючНастройкиСписка.Добавить(КлючНастроекСписка());
	
	Свойства.ПользовательскиеНастройкиСписка = Новый Массив;
	Свойства.ПользовательскиеНастройкиСписка.Добавить(Элементы.УправлениеНагрузкой_ПользовательскиеНастройки);

	ОбщегоНазначенияВызовСервера.ПользовательскиеНастройкиДинамическогоСписка(
		Свойства.КлючНастройкиСписка, ВариантыНастроек, ЭтотОбъект,
		Свойства.ПользовательскиеНастройкиСписка);
	
КонецПроцедуры
	
&НаСервере
Процедура ОбновитьПорядокКолонок(Знач ИмяТаблицы, Знач Порядок)
	
	ТаблицаЭлемента = Элементы[ИмяТаблицы];
	ИнтерфейсПриложения.ОбновитьПорядокКолонокНаСервере(Порядок, Элементы, ТаблицаЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеНастроекКолонок(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполняемыеСвойства = "Состав, Порядок";
	
	ЗаполнитьЗначенияСвойств(НастройкиКолонок, Результат, ЗаполняемыеСвойства);
	Ключи = ПолучитьКлючиНастроекКолонокУправлениеНагрузкой();
	
	ИнтерфейсПриложенияКлиентСервер.ПрименитьПользовательскиеНастройки(Элементы, НастройкиКолонок);
	
	Если Результат.ИзменилсяПорядок Тогда
		ОбновитьПорядокКолонок(ДополнительныеПараметры.ИмяТаблицы, НастройкиКолонок.Порядок);
	КонецЕсли;
	
	// Сохранение пользовательских настроек
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(Ключи.Объект, Ключи.Настройка, НастройкиКолонок);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОбработатьСохранениеНастроек(Результат, ПараметрыОткрытия) Экспорт
	
	ОбновлениеПользовательскихНастроекДинамическогоСписка();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуПроизводственногоКалендаря() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря,
	|	ПроизводственныйКалендарь.ВидДня КАК ВидДня
	|ИЗ
	|	РегистрСведений.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь";
	
	Возврат Запрос.Выполнить().Выгрузить(); 
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование дерева

&НаКлиенте
Процедура ОбработатьРазворотУзловДерева(НастройкиФормы, Знач Список_УправлениеНагрузкой, Знач РазвернутьВсеУзлы) 
	
	РазвернутыеСтроки = НастройкиФормы.Список_УправлениеНагрузкой.РазвернутыеСтроки;
	
	// Если включена настройка, то дополнительно поместим в настройки
	// все узлы дерева
	Если РазвернутьВсеУзлы Тогда
		РазвернутьВсеУзлыДерева_УправлениеНагрузкой(РазвернутыеСтроки, Список_УправлениеНагрузкой);
	КонецЕсли;
	
	// Сохраним в настройки формы и обработаем установку настроек
	НастройкиФормы.РазвернутьВсеУзлы = РазвернутьВсеУзлы;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСформированноеДерево_УправлениеНагрузкой(Знач ПередаваемыеНастройки) 

	ОбработатьРазворотУзловДерева(НастройкиФормы, 
		Список_УправлениеНагрузкой, РазвернутьВсеУзлы);
	
	// Восстанавливаем развернутые строки дерева в списке "Задачи на мне".
	УправлениеИнструментамиРазработкиКлиент.ВосстановитьСписокВПредыдущееСостояние_Дерево(Список_УправлениеНагрузкой,
		Элементы.Список_УправлениеНагрузкой, ПередаваемыеНастройки.Список_УправлениеНагрузкой);
		
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеУзлыДерева_УправлениеНагрузкой(РазвернутыеСтроки, Знач Список_УправлениеНагрузкой)
	
	РазвернутыеСтроки.Очистить();
	
	КоллекцияСтрокДерева = Список_УправлениеНагрузкой.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из КоллекцияСтрокДерева Цикл
		Если СтрокаДерева.ЭтоГруппа Тогда
			РазвернутыеСтроки.Вставить(СтрокаДерева.UID, СтрокаДерева.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
	
#Область Инициализация

#Если Клиент Тогда
	ПринудительноеОбновлениеТекущейСтраницы = Ложь;
#КонецЕсли

#КонецОбласти
