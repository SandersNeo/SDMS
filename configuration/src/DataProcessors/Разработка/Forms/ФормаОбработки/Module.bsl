///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем НастройкиФормы Экспорт; // Дополнительные параметры, которые использует клиент

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ИнтеграцияДополнительныхПодсистем.НачатьЗамерВремени();
	ИнициализацияПараметров();
	ОбновлениеПользовательскихНастроекДинамическогоСписка();
	ИнструментыСервер.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ЗаявкиВРазработке.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастройкиФормы = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	ПодключитьОбработчикОжидания("Подключаемый_СохранитьНастройкиФормы", 120);
	
	ИнструментыКлиент.ПриОткрытии(ЭтотОбъект);
	ИнтеграцияДополнительныхПодсистем.ЗакончитьЗамерВремени("Разработка.ОткрытиеФормы", ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ИнструментыКлиент.ПриЗакрытии(ЗавершениеРаботы, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СписокСобытий = СтрРазделить(ИмяСобытия, ";");
	ЭтоМассив = СписокСобытий.Количество() > 1;
	Счетчик = 0;
	
	Для Каждого Событие Из СписокСобытий Цикл
		Если СобытияОповещенияКлиент.СобытиеОбновлениеСписковИнструментов(Событие) Тогда
			ПараметрСобытия = ?(ЭтоМассив, Параметр[Счетчик], Параметр);
			
			Если ТипЗнч(Источник) = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
				ИнструментыКлиент.УстановитьПризнакНеобходимостиОбновления(ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	ИнструментыКлиент.ОбработкаОповещения(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ЗаявкиВРазработкеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗаявкиВРазработке.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Поле.Имя = "ЗаявкиВРазработкеОбъектКомментарий" Тогда
		ПараметрыОткрытия = Новый Структура("Ключ, КоличествоНовыхКомментариев",
			ТекущиеДанные.Заявка, Элемент.ТекущиеДанные.ОбъектКомментарий);
		ОткрытьФорму("Документ.ЗаявкаНаРазработку.Форма.ФормаДокумента", ПараметрыОткрытия);
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	ИначеЕсли Поле.Имя = "ЗаявкиВРазработкеНесколькоСистем" И ТекущиеДанные.НесколькоСистем Тогда
		ВыбратьИзМенюАсинх(ПолучитьСписокСтатусовСистемУЗаявки(ТекущиеДанные.Заявка));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Заявка) Тогда
		ОткрытьЗначениеАсинх(ТекущиеДанные.Заявка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиВРазработкеПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ЗаявкиВРазработке.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		НастройкиФормы.Список_ЗаявкиВРазработке.ВыделеннаяСтрока = Неопределено;
	Иначе
		Элементы.ЗаявкиВРазработкеКонтекстноеМенюКопироватьВБуфер.Видимость = НЕ ТекущиеДанные.ЭтоГруппа;
		Элементы.ЗаявкиВРазработкеКонтекстноеМенюОткрытьВариантыСсылок.Видимость = НЕ ТекущиеДанные.ЭтоГруппа;
		
		НастройкиФормы.Список_ЗаявкиВРазработке.ВыделеннаяСтрока = ТекущиеДанные.UID;
		ОбновитьЗадачиЗаявкиНаКлиенте(ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиВРазработкеПередРазворачиванием(Элемент, Строка, Отказ)
	
	УправлениеИнструментамиРазработкиКлиент.ПередРазворачиваниемУзлаДерева(ЗаявкиВРазработке, 
		Строка, НастройкиФормы.Список_ЗаявкиВРазработке.РазвернутыеСтроки);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиВРазработкеПередСворачиванием(Элемент, Строка, Отказ)
	
	УправлениеИнструментамиРазработкиКлиент.ПередСворачиваниемУзлаДерева(ЗаявкиВРазработке, 
		Строка, НастройкиФормы.Список_ЗаявкиВРазработке.РазвернутыеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиЗаявкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗадачиЗаявки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Задача) Тогда
		ОткрытьЗначениеАсинх(ТекущиеДанные.Задача);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиЗаявкиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ЗадачиЗаявки.ТекущиеДанные;
	
	ОтображатьНазначениеНаПользователя = (ТекущиеДанные <> Неопределено И ТекущиеДанные.ФилиалIT = НастройкиФормы.ФилиалПользователя);
	
	Для Каждого Строка Из Элементы.ЗадачиЗаявкиКонтекстноеМенюУчастники.ПодчиненныеЭлементы Цикл
		Строка.Видимость = ОтображатьНазначениеНаПользователя;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрНазначена_РазработкаПриИзменении(Элемент)
	
	ОбновитьДанныеИнструмента();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ОбновитьСписокЗаявокВРазработке(Команда)
	
	ОбновитьДанныеИнструмента();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиЗаявкиИзменитьНазначенного(Команда)
	
	ИдентификаторУчастникаФилиала = СтрЗаменить(Команда.Имя, "ИзменитьНазначенного_", "");
	НазначенныйПользователь = НастройкиФормы.УчастникиФилиалаПользователя.Получить(ИдентификаторУчастникаФилиала);
	ТекущиеДанные = Элементы.ЗадачиЗаявки.ТекущиеДанные;
	
	Если НазначенныйПользователь = Неопределено ИЛИ ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИсполнительЗадачи = ПолучитьЗначениеРеквизитаОбъекта(ТекущиеДанные.Задача, "Назначена");
	
	Если ИсполнительЗадачи = ТекущиеДанные.Назначена Тогда 	
		Результат = ИзменитьНазначенногоНаЗадачу(ТекущиеДанные.Задача, НазначенныйПользователь);
		
		Если Результат Тогда
			ТекущиеДанные = Элементы.ЗаявкиВРазработке.ТекущиеДанные;
			ОбновитьЗадачиЗаявкиНаКлиенте(ТекущиеДанные);
		Иначе
			ПредупреждениеАсинх("Не удалось назначить задачу на пользователя.");
		КонецЕсли;
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("Разработка_ОбновитьПослеПредупреждения", ЭтотОбъект);
		ПоказатьПредупреждение(ОписаниеОповещения, "Задача была изменена другим пользователем. Список задач будет обновлён.");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие команды
 
&НаКлиенте
Процедура КопироватьВБуфер(Команда)
	
	Если ТекущийЭлемент = Неопределено ИЛИ ТекущийЭлемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	
	Если ТекущиеДанные.Свойство("Заявка") Тогда
		ОбъектСсылка = ТекущиеДанные.Заявка; 
	ИначеЕсли ТекущиеДанные.Свойство("Задача") Тогда
		ОбъектСсылка = ТекущиеДанные.Задача;
	Иначе
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.КопироватьНавигационнуюСсылкуВБуферОбмена(ОбъектСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПользовательскихНастроек(Команда)
	
	ОбновлениеПользовательскихНастроекДинамическогоСписка();	
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОткрытьВариантыСсылок(Команда)
	
	Если ТекущийЭлемент = Неопределено ИЛИ ТекущийЭлемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	
	Если ТекущиеДанные.Свойство("Заявка") Тогда
		ОбъектСсылка = ТекущиеДанные.Заявка; 
	ИначеЕсли ТекущиеДанные.Свойство("Задача") Тогда
		ОбъектСсылка = ТекущиеДанные.Задача;
	Иначе
		Возврат;
	КонецЕсли;
	
	ИнтерфейсПриложенияКлиент.ОткрытьОкноНавигационнойСсылки(ОбъектСсылка, ЭтотОбъект, КлючУникальности);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкуДинамическогоСписка(Команда)
	
	НастройкиОчередиЗаявок = ОбщегоНазначенияВызовСервера.ПолучитьНастройкиХранилищеНастроекДинамическихСписков(
		СвойстваСохраняемойНастройки().КлючОбъекта, ВариантыНастроек, Команда.Имя);
	
	Если НастройкиОчередиЗаявок <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиОчередиЗаявок);
		ЗаполнитьЗначенияСвойств(НастройкиФормы, НастройкиОчередиЗаявок);
		
		ОбновитьДанныеИнструмента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекДинамическогоСписка(Команда)
	
	ПользовательскиеНастройки = Новый Структура;
	ПользовательскиеНастройки.Вставить("ДоступныеНаправления", НастройкиФормы.ДоступныеНаправления);
	ПользовательскиеНастройки.Вставить("ДоступныеСистемы", НастройкиФормы.ДоступныеСистемы);
	ПользовательскиеНастройки.Вставить("ДоступныеСтатусы", НастройкиФормы.ДоступныеСтатусы);
	ПользовательскиеНастройки.Вставить("ФильтрНазначена_Разработка", ФильтрНазначена_Разработка);
	
	ПараметрыОткрытия = Новый Структура("КлючХранилища, ПользовательскиеНастройки",
		СвойстваСохраняемойНастройки().КлючОбъекта, ПользовательскиеНастройки);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьСохранениеНастроек", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.НастройкиДинамическогоСписка", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекРазработка(Команда)   
	
	// Подготовка данных для выбора направлений и систем
	СписокНаправлений = Новый Массив;
	Для Каждого Элемент Из НастройкиФормы.ДоступныеНаправления Цикл
		Если Элемент.Значение.Использование Тогда
			СписокНаправлений.Добавить(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	СписокСистем = Новый Массив;
	Для Каждого Элемент Из НастройкиФормы.ДоступныеСистемы Цикл
		Если Элемент.Значение.Использование Тогда
			СписокСистем.Добавить(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	ДоступныеСтатусы = Новый Массив;
	СписокСтатусов = Новый Массив;
	Для Каждого Элемент Из НастройкиФормы.ДоступныеСтатусы Цикл
		ДоступныеСтатусы.Добавить(Элемент.Ключ);
		
		Если Элемент.Значение.Использование Тогда
			СписокСтатусов.Добавить(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОткрытия = ИнтерфейсПриложенияКлиент.СформироватьПараметрыОткрытия();
	
	ПараметрыОткрытия.Направления.Значение = СписокНаправлений;
	ПараметрыОткрытия.Направления.Использование = Истина;
	
	ПараметрыОткрытия.Системы.Значение = СписокСистем;
	ПараметрыОткрытия.Системы.Использование = Истина;
	
	ПараметрыОткрытия.Статусы.Значение = СписокСтатусов;
	ПараметрыОткрытия.Статусы.Использование = Истина;
	ПараметрыОткрытия.Статусы.Вставить("ДоступныеСтатусы", ДоступныеСтатусы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьВыборНастроекРазработка", ЭтотОбъект);
	ИнтерфейсПриложенияКлиент.ОткрытьФормуНастройкиИнструментов(ЭтотОбъект, ПараметрыОткрытия, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьДанныеИнструмента() Экспорт
	
	ИнструментыКлиент.ОбновлениеДанныхЗапущено(ЭтотОбъект);
	МетодОбновления = "Обработки.Разработка.ПолучитьДанныеЗаявкиВРазработке";
	
	ПараметрыФонового = Новый Массив;
	ПараметрыФонового.Добавить(ФильтрНазначена_Разработка);
	ПараметрыФонового.Добавить(НастройкиФормы.ДоступныеНаправления);
	ПараметрыФонового.Добавить(НастройкиФормы.ДоступныеСтатусы);
	ПараметрыФонового.Добавить(НастройкиФормы.ДоступныеСистемы);
	
	ИнструментыКлиент.НачатьОбновлениеИнструмента(ЭтотОбъект, МетодОбновления,
		ПараметрыФонового, Элементы.ЗаявкиВРазработке.Имя, , "ОбработатьДанныеЗаявкиВРазработке");
	
	Элементы.ФильтрНазначена_Разработка.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗадачиЗаявкиНаКлиенте(Знач ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныеСистемы = Новый СписокЗначений;
	Для Каждого ЭлементКоллекции Из НастройкиФормы.ДоступныеСистемы Цикл
		Если ЭлементКоллекции.Значение.Использование Тогда
			ВыбранныеСистемы.Добавить(ЭлементКоллекции.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Если ВыбранныеСистемы.Количество() <> 1 Тогда
		ВыбранныеСистемы.Очистить();
		ВыбранныеСистемы.Добавить(ТекущиеДанные.Система);
	КонецЕсли;
	
	ПодготовленнаяТаблицаСписокЗадач = ПолучитьЗадачиПоЗаявке_Разработка(ЗадачиЗаявки,
		ТекущиеДанные.Заявка, ВыбранныеСистемы);
	
	ЗадачиЗаявки.Очистить();
	Для Каждого СтрокаТаблицы Из ПодготовленнаяТаблицаСписокЗадач Цикл
		ЗаполнитьЗначенияСвойств(ЗадачиЗаявки.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеЗаявкиВРазработке() Экспорт
	
	ИнструментыКлиент.ОбработатьОтложенноеОбновлениеИнструмента(ЭтотОбъект, Элементы.ЗаявкиВРазработке.Имя, "Обработки.Разработка.ПолучитьДанныеЗаявкиВРазработке");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОбновленияИнструмента(Данные, ДополнительныеПараметры) Экспорт
	
	ЭлементыДерева = ЗаявкиВРазработке.ПолучитьЭлементы();
	ИнструментыКлиент.ЗаполнитьДанныеИнструмента(ЭлементыДерева, Данные, ДополнительныеПараметры.МетодОбновления);
	
	УправлениеИнструментамиРазработкиКлиент.ВосстановитьСписокВПредыдущееСостояние_Дерево(ЗаявкиВРазработке,
		Элементы.ЗаявкиВРазработке, НастройкиФормы.Список_ЗаявкиВРазработке);
		
	Элементы.ФильтрНазначена_Разработка.ТолькоПросмотр = Ложь;
		
	ИнструментыКлиент.ЗакончитьОбновлениеИнструмента(ЭтотОбъект, ДополнительныеПараметры, Данные.УИДЗамера);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗадачиПоЗаявке_Разработка(Знач ТаблицаЗадач, Знач Заявка, Знач ДоступныеСистемы)
	
	ТаблицаЗадач.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЛичныеДелаСрезПоследних.Сотрудник КАК Пользователь,
	|	ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы) КАК Филиал
	|ПОМЕСТИТЬ ЛичныеДелаФилиалы
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(&ТекущаяДата, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументЗадача.Ссылка КАК Задача,
	|	""["" + ДокументЗадача.Номер + ""] "" + ДокументЗадача.Наименование КАК ЗадачаПредставление,
	|	ДокументЗадача.Назначена КАК Назначена,
	|	ДокументЗадача.Статус КАК Статус,
	|	ЕСТЬNULL(ПланируемыеТрудозатраты.Трудозатраты, 0) КАК ПланТрудозатрат,
	|	ДокументЗадача.СистемаУчета КАК СистемаУчета,
	|	ВЫБОР
	|		КОГДА ДокументЗадача.ДатаНачалаРазработки = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СтартРазработкиЗаполнен,
	|	ДокументЗадача.ДатаНачалаРазработки КАК ДатаНачалаРазработки,
	|	ЕСТЬNULL(Филиалы.Ссылка, ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК ФилиалIT,
	|	ЕСТЬNULL(Филиалы.Наименование, """") КАК ФилиалITПредставление,
	|	ЕСТЬNULL(Пользователи.ФИО, """") КАК НазначенаНаименование
	|ПОМЕСТИТЬ ОтобранныеЗадачи
	|ИЗ
	|	РегистрСведений.СтруктураПодчиненности КАК СтруктураПодчиненности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО ((ВЫРАЗИТЬ(СтруктураПодчиненности.Объект КАК Документ.Задача)) = ДокументЗадача.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (ДокументЗадача.Назначена = Пользователи.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЛичныеДелаФилиалы КАК ЛичныеДелаФилиалы
	|		ПО (ДокументЗадача.Назначена = ЛичныеДелаФилиалы.Пользователь)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО (ЛичныеДелаФилиалы.Филиал = Филиалы.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПубликацииЗадач.СрезПоследних(&ТекущаяДата, ) КАК ИсторияПубликацииЗадач
	|		ПО (ДокументЗадача.Ссылка = ИсторияПубликацииЗадач.Задача)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
	|		ПО (ДокументЗадача.Ссылка = ПланируемыеТрудозатраты.Объект)
	|			И (ПланируемыеТрудозатраты.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
	|ГДЕ
	|	(ВЫРАЗИТЬ(СтруктураПодчиненности.Родитель КАК Документ.ЗаявкаНаРазработку)) = &Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Трудозатраты.Объект КАК Задача,
	|	СУММА(Трудозатраты.Затрата) КАК Трудозатраты
	|ПОМЕСТИТЬ ЗатратыПоЗадачам
	|ИЗ
	|	РегистрСведений.Трудозатраты КАК Трудозатраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтобранныеЗадачи КАК ОтобранныеЗадачи
	|		ПО (ОтобранныеЗадачи.Задача = Трудозатраты.Объект)
	|
	|СГРУППИРОВАТЬ ПО
	|	Трудозатраты.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияПубликацииЗадачСрезПоследних.Задача КАК Задача,
	|	ИсторияПубликацииЗадачСрезПоследних.ДатаИсторииХранилища КАК ДатаИсторииХранилища
	|ПОМЕСТИТЬ ИсторияПубликацииЗадач
	|ИЗ
	|	РегистрСведений.ИсторияПубликацииЗадач.СрезПоследних(
	|			,
	|			Задача В
	|				(ВЫБРАТЬ
	|					ОтобранныеЗадачи.Задача КАК Задача
	|				ИЗ
	|					ОтобранныеЗадачи КАК ОтобранныеЗадачи)) КАК ИсторияПубликацииЗадачСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОтобранныеЗадачи.ДатаНачалаРазработки) КАК ДатаНачалаРазработки
	|ПОМЕСТИТЬ МинимальнаяДатаКалендаря
	|ИЗ
	|	ОтобранныеЗадачи КАК ОтобранныеЗадачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеЗадачи.Задача КАК Задача,
	|	ОтобранныеЗадачи.ЗадачаПредставление КАК Наименование,
	|	ОтобранныеЗадачи.Назначена КАК Назначена,
	|	ОтобранныеЗадачи.ПланТрудозатрат КАК ПланируемыеТрудозатраты,
	|	ВЫБОР
	|		КОГДА ОтобранныеЗадачи.СистемаУчета В (&ВыбранныеСистемы)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗадачаПоВыбраннойСистеме,
	|	ОтобранныеЗадачи.СтартРазработкиЗаполнен КАК СтартРазработкиЗаполнен,
	|	ОтобранныеЗадачи.ДатаНачалаРазработки КАК СтартРазработки,
	|	ОтобранныеЗадачи.ФилиалIT КАК ФилиалIT,
	|	ОтобранныеЗадачи.ФилиалITПредставление КАК ФилиалITПредставление,
	|	ОтобранныеЗадачи.НазначенаНаименование КАК НазначенаПредставление,
	|	СтатусыОбъектов.Наименование КАК СтатусПредставление,
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексКартинки,
	|	СтатусыОбъектов.Порядок КАК ПорядокСтатуса,
	|	ЕСТЬNULL(ЗатратыПоЗадачам.Трудозатраты, 0) КАК ФактическиеТрудозатраты,
	|	ЕСТЬNULL(ИсторияПубликацииЗадач.ДатаИсторииХранилища, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК Публикация,
	|	ОтобранныеЗадачи.СистемаУчета КАК Система
	|ИЗ
	|	ОтобранныеЗадачи КАК ОтобранныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ОтобранныеЗадачи.Статус = СтатусыОбъектов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗатратыПоЗадачам КАК ЗатратыПоЗадачам
	|		ПО ОтобранныеЗадачи.Задача = ЗатратыПоЗадачам.Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсторияПубликацииЗадач КАК ИсторияПубликацииЗадач
	|		ПО ОтобранныеЗадачи.Задача = ИсторияПубликацииЗадач.Задача
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокСтатуса,
	|	ОтобранныеЗадачи.ЗадачаПредставление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря,
	|	ПроизводственныйКалендарь.ВидДня КАК ВидДня
	|ИЗ
	|	РегистрСведений.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
	|	МинимальнаяДатаКалендаря КАК МинимальнаяДатаКалендаря
	|ГДЕ
	|	ПроизводственныйКалендарь.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|	И ПроизводственныйКалендарь.ДатаКалендаря > МинимальнаяДатаКалендаря.ДатаНачалаРазработки
	|	И ПроизводственныйКалендарь.ДатаКалендаря < ДОБАВИТЬКДАТЕ(МинимальнаяДатаКалендаря.ДатаНачалаРазработки, ГОД, 1)";
	
	ТекущаяДата = ТекущаяДатаСеанса();
	Запрос.УстановитьПараметр("ВыбранныеСистемы", ДоступныеСистемы);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("Заявка", Заявка);
	
	РезультатПакеты = Запрос.ВыполнитьПакет();
	ВыборкаЗадача = РезультатПакеты[5].Выбрать();
	ТаблицаПроизводственныйКалендарь = РезультатПакеты[6].Выгрузить();
	
	Пока ВыборкаЗадача.Следующий() Цикл
		СтрокаЗадачи = ТаблицаЗадач.Добавить();
	    ЗаполнитьЗначенияСвойств(СтрокаЗадачи, ВыборкаЗадача);
				
		Если ВыборкаЗадача.СтартРазработкиЗаполнен Тогда
			СтартРазработки = ?(ВыборкаЗадача.СтартРазработкиЗаполнен, ВыборкаЗадача.СтартРазработки, ТекущаяДата);
			КрайнийСрокПрошел = ПроверитьФактПревышенияПлановогоВремени(
				ВыборкаЗадача.ПланируемыеТрудозатраты, СтартРазработки, ТаблицаПроизводственныйКалендарь);
			
			СтрокаЗадачи.Просрочен = ?(КрайнийСрокПрошел, БиблиотекаКартинок.КрайнийСрок, Неопределено); 
		КонецЕсли;
		
		// Фактические трудозатраты подсвечиваются в зависимости от соотношения факта и плана:
		//	- факт не превышает план (нет подсветки);
		//	- факт превышает план не более чем на 25% (слабая подсветка);
		//	- факт превышает план более чем на 25% | план не указан, а факт есть (яркая подсветка).
		 
		Если ВыборкаЗадача.ПланируемыеТрудозатраты = 0 И ВыборкаЗадача.ФактическиеТрудозатраты > 0 Тогда
			// план не указан, а факт есть - берем значение заведомо больше, чем превышение в 25% 
			СоотношениеПланаКФакту = 126;	
		ИначеЕсли ВыборкаЗадача.ПланируемыеТрудозатраты <> 0 Тогда
			// рассчитывается соотношение величин
			СоотношениеПланаКФакту = ВыборкаЗадача.ФактическиеТрудозатраты * 100 / ВыборкаЗадача.ПланируемыеТрудозатраты;
		Иначе
			// нет фактических трудозатрат (план либо есть, либо нет)
			СоотношениеПланаКФакту = 0;
		КонецЕсли;
		
		Если СоотношениеПланаКФакту > 125 Тогда
			СтрокаЗадачи.ПревышениеТрудозатрат = 2;
		ИначеЕсли СоотношениеПланаКФакту > 100 Тогда
			СтрокаЗадачи.ПревышениеТрудозатрат = 1;
		Иначе
			СтрокаЗадачи.ПревышениеТрудозатрат = 0;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаЗадач;
			
КонецФункции

&НаКлиенте
Процедура Разработка_ОбновитьПослеПредупреждения(Результат) Экспорт
	
	ОбновитьДанныеИнструмента();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияПараметров()
	
	НастройкиФормы = СформироватьНастройкиФормы();
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(НастройкиФормы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменитьНазначенногоНаЗадачу(Знач Задача, Знач Пользователь)
	
	ЗаписьУспешно = Истина;
	
	ИзменяемаяЗадача = Задача.ПолучитьОбъект();
	ИзменяемаяЗадача.Назначена = Пользователь;
	Попытка
		ИзменяемаяЗадача.Записать();
	Исключение
		ЗаписьЖурналаРегистрации("Обработка.Разработка", УровеньЖурналаРегистрации.Ошибка, , ,
			"Ошибка изменения поля ""Назначена"" у задачи: " + ОписаниеОшибки());
		ЗаписьУспешно = Ложь;
	КонецПопытки;

	Возврат ЗаписьУспешно;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьВыборНастроекРазработка(Результат, ДополнительныеНастройки) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементКоллекции Из НастройкиФормы.ДоступныеНаправления Цикл
		Элемент = Результат.ВыбранныеНаправления.НайтиПоЗначению(ЭлементКоллекции.Ключ);
		ЭлементКоллекции.Значение.Использование = (Элемент <> Неопределено);
	КонецЦикла; 
	
	Для Каждого ЭлементКоллекции Из НастройкиФормы.ДоступныеСтатусы Цикл
		Элемент = Результат.ВыбранныеСтатусы.НайтиПоЗначению(ЭлементКоллекции.Ключ);
		ЭлементКоллекции.Значение.Использование = (Элемент <> Неопределено);
	КонецЦикла;
	
	Для Каждого ЭлементКоллекции Из НастройкиФормы.ДоступныеСистемы Цикл
		Элемент = Результат.ВыбранныеСистемы.НайтиПоЗначению(ЭлементКоллекции.Ключ);
		ЭлементКоллекции.Значение.Использование = (Элемент <> Неопределено);
	КонецЦикла;
		
	ОбновитьДанныеИнструмента();
	СохранитьНастройкиФормы(НастройкиФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СохранитьНастройкиФормы()
	
	СохранитьНастройкиФормы(НастройкиФормы);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизитаОбъекта(Знач Ссылка, Знач Реквизит)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, Реквизит);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокСтатусовСистемУЗаявки(Заявка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(СтатусыЗаявокПоСистемам.Система) КАК Система,
	|	СтатусыЗаявокПоСистемам.Статус КАК Статус,
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексКартинки
	|ИЗ
	|	РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО СтатусыЗаявокПоСистемам.Статус = СтатусыОбъектов.Ссылка
	|ГДЕ
	|	СтатусыЗаявокПоСистемам.Заявка = &Заявка";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокСистемСоСтатусами = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		Картинка = Справочники.СтатусыОбъектов.НайтиЗначениеСвойстваСтатуса("Картинка", "Ссылка", Выборка.Статус); 
		
		СписокСистемСоСтатусами.Добавить(Выборка.Система, , , Картинка);	
	КонецЦикла;
	
	Возврат СписокСистемСоСтатусами;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьФактПревышенияПлановогоВремени(Знач КоличествоЧасов, Знач ДатаНачала, Знач ТаблицаПроизводственныйКалендарь)
	
	ПревышенСрок = Ложь;
	
	Если КоличествоЧасов = 0 Тогда
		Возврат ПревышенСрок;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ДатаЗавершения = Обработки.УправлениеНагрузкой.ПолучитьПредположительнуюДатуЗавершения(КоличествоЧасов, 
		ДатаНачала, ТаблицаПроизводственныйКалендарь);
	ПревышенСрок = ДатаЗавершения < НачалоДня(ТекущаяДата);
	
	Возврат ПревышенСрок;
				
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваСохраняемойНастройки()
	
	Возврат Новый Структура("КлючОбъекта, КлючНастроек", "Обработка.Разработка", "НастройкиФормы");
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормы(Знач Настройки)
	
	СвойстваНастроек = СвойстваСохраняемойНастройки();
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(СвойстваНастроек.КлючОбъекта,
		СвойстваНастроек.КлючНастроек, Настройки);
	
КонецПроцедуры

&НаСервере
Функция СформироватьНастройкиФормы()
	
	Перем ЗначениеНастройки;
	
	// Создание пустой структуры настроек
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("УчастникиФилиалаПользователя", Новый Соответствие);
	НастройкиФормы.Вставить("ДоступныеНаправления", Новый Соответствие);
	НастройкиФормы.Вставить("ДоступныеСистемы", Новый Соответствие);
	НастройкиФормы.Вставить("ДоступныеСтатусы", Новый Соответствие);
	
	НастройкиСписка = Новый Структура("ВыделеннаяСтрока, РазвернутыеСтроки", Неопределено, Новый Соответствие);
	
	СвойстваНастройки = СвойстваСохраняемойНастройки();
	
	// Восстановление сохраненных параметров
	СохраненныеНастройки = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(
		СвойстваНастройки.КлючОбъекта, СвойстваНастройки.КлючНастроек);
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда		
		// Перебор всех элементом структуры настроек. Если элемент найден в сохраненной
		// настройке, его значение присваивается исходному свойству. В противном случае
		// используется значение по-умолчанию.
		Для Каждого Настройка Из НастройкиФормы Цикл
			ИмяКлюча = Настройка.Ключ;
			
			// Если значение сохраненной настройки не существует
			Если НЕ СохраненныеНастройки.Свойство(ИмяКлюча, ЗначениеНастройки) Тогда
				Продолжить;
			КонецЕсли;
			
			// Если типы настроек соответствуют, присваиваем значение
			Если ТипЗнч(Настройка.Значение) = ТипЗнч(ЗначениеНастройки) Тогда
				НастройкиФормы.Вставить(ИмяКлюча, ЗначениеНастройки);
			КонецЕсли;
		КонецЦикла;
		
		Если СохраненныеНастройки.Свойство("Список_ЗаявкиВРазработке") Тогда
			ЗаполнитьЗначенияСвойств(НастройкиСписка, СохраненныеНастройки.Список_ЗаявкиВРазработке);
		КонецЕсли;
	КонецЕсли; 	
	
	НастройкиФормы.Вставить("Список_ЗаявкиВРазработке", НастройкиСписка);
	НастройкиФормы.Вставить("ФилиалПользователя", ПараметрыСеанса.Филиал);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	РолиПользователейПоНаправлениям.НаправлениеРазработки КАК Направление,
	|	РолиПользователейПоНаправлениям.Роль КАК РольПользователя
	|ПОМЕСТИТЬ РолиПользователя
	|ИЗ
	|	РегистрСведений.РолиПользователейПоНаправлениям КАК РолиПользователейПоНаправлениям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаправленияРазработки КАК НаправленияРазработки
	|		ПО РолиПользователейПоНаправлениям.НаправлениеРазработки = НаправленияРазработки.Ссылка
	|ГДЕ
	|	РолиПользователейПоНаправлениям.Пользователь = &Пользователь
	|	И НаправленияРазработки.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаправленияРазработки.Ссылка КАК Направление,
	|	НаправленияРазработки.Наименование КАК НаименованиеНаправления,
	|	ЕСТЬNULL(РолиПользователя.РольПользователя, ЗНАЧЕНИЕ(Справочник.РолиПользователей.ПустаяСсылка)) КАК РольПользователя,
	|	ВЫБОР
	|		КОГДА РолиПользователя.РольПользователя ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РолиПользователя.РольПользователя = ЗНАЧЕНИЕ(Справочник.РолиПользователей.РуководительНаправления)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК Руководитель,
	|	ВЫБОР
	|		КОГДА НаправленияРазработкиОтветственные.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Ответственный
	|ИЗ
	|	Справочник.НаправленияРазработки КАК НаправленияРазработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РолиПользователя КАК РолиПользователя
	|		ПО НаправленияРазработки.Ссылка = РолиПользователя.Направление
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияРазработки.Ответственные КАК НаправленияРазработкиОтветственные
	|		ПО НаправленияРазработки.Ссылка = НаправленияРазработкиОтветственные.Ссылка
	|			И (НаправленияРазработкиОтветственные.Сотрудник = &Пользователь)
	|ГДЕ
	|	НЕ НаправленияРазработки.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаправленияРазработки.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СистемыУчета.Ссылка КАК Ссылка,
	|	СистемыУчета.Наименование КАК Наименование
	|ИЗ
	|	Справочник.СистемыУчета КАК СистемыУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыОбъектов.Ссылка КАК Ссылка,
	|	СтатусыОбъектов.Наименование КАК Наименование,
	|	СтатусыОбъектов.Порядок >= &ПорядокСтатусаВРеализацию
	|		И СтатусыОбъектов.Порядок <= &ПорядокСтатусаCodeReview КАК Использование
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|ГДЕ
	|	СтатусыОбъектов.Ссылка <> ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)
	|	И СтатусыОбъектов.Ссылка <> ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыОбъектов.Порядок";
	#КонецОбласти
	
	ПорядокСтатусаВРеализацию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтатусыОбъектов.ВРеализацию, "Порядок");
	ПорядокСтатусаCodeReview = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтатусыОбъектов.CodeReview, "Порядок");
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ПорядокСтатусаВРеализацию", ПорядокСтатусаВРеализацию);
	Запрос.УстановитьПараметр("ПорядокСтатусаCodeReview", ПорядокСтатусаCodeReview); 

	Пакеты = Запрос.ВыполнитьПакет();
	
	Выборка = Пакеты[1].Выбрать();
	НовыеДоступныеНаправления = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		НайденноеНаправление = НастройкиФормы.ДоступныеНаправления.Получить(Выборка.Направление);
		ИспользованиеРазработка = ?(НайденноеНаправление = Неопределено, Ложь, НайденноеНаправление.Использование);
		
		ОписаниеСвойств = Новый Структура("НаименованиеНаправления, РольПользователя, Руководитель, Использование");
		ЗаполнитьЗначенияСвойств(ОписаниеСвойств, Выборка);
		ОписаниеСвойств.Использование = ИспользованиеРазработка;
		
		НовыеДоступныеНаправления.Вставить(Выборка.Направление, ОписаниеСвойств);
	КонецЦикла;   
	
	НастройкиФормы.ДоступныеНаправления = НовыеДоступныеНаправления;
	
	Выборка = Пакеты[2].Выбрать();
	НовыеДоступныеСистемы = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		НайденнаяСистема = НастройкиФормы.ДоступныеСистемы.Получить(Выборка.Ссылка);
		Использование = ?(НайденнаяСистема = Неопределено, Истина, НайденнаяСистема.Использование);
		
		ОписаниеСвойств = Новый Структура("Представление, Использование", Выборка.Наименование, Использование);			
		НовыеДоступныеСистемы.Вставить(Выборка.Ссылка, ОписаниеСвойств);
	КонецЦикла;
	
	НастройкиФормы.ДоступныеСистемы = НовыеДоступныеСистемы;
	
	Выборка = Пакеты[3].Выбрать();
	НовыеДоступныеСтатусы = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		НайденныйСтатус = НастройкиФормы.ДоступныеСтатусы.Получить(Выборка.Ссылка);
		Использование = ?(НайденныйСтатус = Неопределено, Выборка.Использование, НайденныйСтатус.Использование);
		
		ОписаниеСвойств = Новый Структура("Представление, Использование", Выборка.Наименование, Использование);
		НовыеДоступныеСтатусы.Вставить(Выборка.Ссылка, ОписаниеСвойств);
	КонецЦикла;
	
	НастройкиФормы.ДоступныеСтатусы = НовыеДоступныеСтатусы;
	
	СписокУчастниковФилиала = ПолучитьСписокУчастниковФилиала();		
	
	НастройкиФормы.УчастникиФилиалаПользователя = СоздатьКонтекстноеМенюДляНазначенияЗадач(
		"ЗадачиЗаявкиИзменитьНазначенного", "ИзменитьНазначенного_",
		"ЗадачиЗаявки", Элементы.ЗадачиЗаявкиКонтекстноеМенюУчастники,
		СписокУчастниковФилиала);

	Возврат НастройкиФормы;
	
КонецФункции 

#Область ОбщиеМеханизмы_НастройкиДинамическихСписок

&НаСервере
Процедура ОбновлениеПользовательскихНастроекДинамическогоСписка()
	
	Свойства = Новый Структура("КлючНастройкиСписка, ПользовательскиеНастройкиСписка");	
	
	Свойства.КлючНастройкиСписка = Новый Массив;
	Свойства.КлючНастройкиСписка.Добавить(СвойстваСохраняемойНастройки().КлючОбъекта);
	
	Свойства.ПользовательскиеНастройкиСписка = Новый Массив;
	Свойства.ПользовательскиеНастройкиСписка.Добавить(Элементы.ПользовательскиеНастройки);

	ОбщегоНазначенияВызовСервера.ПользовательскиеНастройкиДинамическогоСписка(
		Свойства.КлючНастройкиСписка, ВариантыНастроек, ЭтотОбъект,
		Свойства.ПользовательскиеНастройкиСписка);    
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокУчастниковФилиала()
	
	СписокУчастниковФилиала = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(&ТекущаяДата, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ЛичныеДелаСрезПоследних.Сотрудник = Пользователи.Ссылка
	|ГДЕ
	|	ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы) = &ТекущийФилиал
	|	И Пользователи.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТекущийФилиал", ПараметрыСеанса.Филиал);
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокУчастниковФилиала.Добавить(Выборка.Ссылка, Выборка.Наименование);
		КонецЦикла;
	КонецЕсли;
		
	Возврат СписокУчастниковФилиала;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьСохранениеНастроек(Результат, ПараметрыОткрытия) Экспорт
	
	ОбновлениеПользовательскихНастроекДинамическогоСписка();
		
КонецПроцедуры		

&НаСервере
Функция СоздатьКонтекстноеМенюДляНазначенияЗадач(Знач Действие, Знач ПрефиксКоманды, Знач СписокФормы, Родитель, Знач СотрудникиФилиала)
	                      
	УчастникиФилиала = Новый Соответствие;
	
	Если ПараметрыСеанса.Филиал = Справочники.Филиалы.ПустаяСсылка() Тогда
		Родитель.Видимость = Ложь;
		Возврат УчастникиФилиала;
	КонецЕсли;
		
	Если СотрудникиФилиала.Количество() > 0 Тогда	                                                                                                                           
		Для Каждого Строка Из СотрудникиФилиала Цикл 
			ИдентификаторПользователя = СтрЗаменить(Строка(Строка.Значение.УникальныйИдентификатор()), "-", "_");
			ИмяКоманды = ПрефиксКоманды + ИдентификаторПользователя;
			НоваяКоманда = Команды.Добавить(ИмяКоманды);
			НоваяКоманда.Заголовок = Строка.Представление;
			НоваяКоманда.Действие = Действие; 
			НоваяКнопка = Элементы.Добавить(СписокФормы + ИдентификаторПользователя, Тип("КнопкаФормы"), Родитель);
			УчастникиФилиала.Вставить(ИдентификаторПользователя, Строка.Значение); 
			НоваяКнопка.ИмяКоманды = ИмяКоманды;	
		КонецЦикла;
	КонецЕсли;
	
	Возврат УчастникиФилиала;
	
КонецФункции

#КонецОбласти  

#КонецОбласти
