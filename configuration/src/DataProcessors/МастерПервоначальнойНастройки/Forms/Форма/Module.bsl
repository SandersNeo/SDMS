///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьКонстанты();   
	
	ДобавитьСтраницуПерехода(СтраницыПереходов, Элементы.ЗаведениеПользователей);
	ДобавитьСтраницуПерехода(СтраницыПереходов, Элементы.ЗаведениеЮридическихЛиц);
	ДобавитьСтраницуПерехода(СтраницыПереходов, Элементы.ЗаведениеНаправлений);
	ДобавитьСтраницуПерехода(СтраницыПереходов, Элементы.ЗаведениеСистем);
	ДобавитьСтраницуПерехода(СтраницыПереходов, Элементы.ЗаведениеФилилов);
	ДобавитьСтраницуПерехода(СтраницыПереходов, Элементы.ЗаполнениеКонстант);
	ДобавитьСтраницуПерехода(СтраницыПереходов, Элементы.СтраницаЛичныеДела);
	
	Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыКомандныхПанелей.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	Для Каждого Страница Из Элементы.Страницы.ПодчиненныеЭлементы Цикл
		Если СтраницыПереходов.НайтиСтроки(Новый Структура("СтраницаПерехода", Страница.Имя)).Количество() = 0 Тогда
			Элементы[Страница.Имя].Видимость = Ложь;
		КонецЕсли;
	КонецЦикла; 
	
	Элементы.Страницы.ТекущаяСтраница = Элементы[СтраницыПереходов[0].СтраницаПерехода];
	
	КлючПодписиДляВыпускаТокенаПользователя = Перечисления.НазначенияДанныхБезопасногоХранилища.КлючПодписиДляВыпускаТокенаПользователя;
	НастройкиПодключенияКСерверуАдминистрирования  = Перечисления.НазначенияДанныхБезопасногоХранилища.НастройкиПодключенияКСерверуАдминистрирования;
	
	УстановитьПривилегированныйРежим(Истина);
	КлючПодписи = РегистрыСведений.БезопасноеХранилищеДанных.ПолучитьДанные(КлючПодписиДляВыпускаТокенаПользователя);
	НастройкиПодключения = РегистрыСведений.БезопасноеХранилищеДанных.ПолучитьДанные(НастройкиПодключенияКСерверуАдминистрирования); 
	УстановитьПривилегированныйРежим(Ложь); 
	
	Если ТипЗнч(НастройкиПодключения) = Тип("Структура") Тогда
		НастройкиПодключения.Свойство("Адрес", RAS_Адрес);
		НастройкиПодключения.Свойство("Порт", RAS_Порт);
		НастройкиПодключения.Свойство("ЛогинАдминистратораСервера", RAS_ЛогинАдминистратораСервера);
		НастройкиПодключения.Свойство("ПарольАдминистратораСервера", RAS_ПарольАдминистратораСервера);
		НастройкиПодключения.Свойство("ЛогинАдминистратораКластера", RAS_ЛогинАдминистратораКластера);
		НастройкиПодключения.Свойство("ПарольАдминистратораКластера", RAS_ПарольАдминистратораКластера); 	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура RAS_ПриИзменении(Элемент)

	Назначение = ПредопределенноеЗначение("Перечисление.НазначенияДанныхБезопасногоХранилища.НастройкиПодключенияКСерверуАдминистрирования");
	СохранитьВБезопасноеХранилище(ЭтотОбъект[Элемент.Имя], Назначение, Сред(Элемент.Имя, 5));
	
КонецПроцедуры

&НаКлиенте
Процедура RAS_ПарольНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элемент.РежимПароля = НЕ Элемент.РежимПароля;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеКонстанты(Элемент)
	
	ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КлючПодписиПриИзменении(Элемент)
	
	Назначение = ПредопределенноеЗначение("Перечисление.НазначенияДанныхБезопасногоХранилища.КлючПодписиДляВыпускаТокенаПользователя");	
	СохранитьВБезопасноеХранилище(КлючПодписи, Назначение);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПарольИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)

	ПроверитьПодтверждениеПароля(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	ПроверитьПодтверждениеПароля();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПриИзмененииРеквизита(Элемент)
	
	ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
КонецПроцедуры   

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)

	ОсуществитьПереходВперед();

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьНастройку(Команда)   
	
	СохранитьЛичныеДелаНаСервере();
	ЗавершитьРаботуСистемы(Ложь, Истина); 
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)

	ОсуществитьПереходНазад();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста 
Процедура ДобавитьСтраницуПерехода(Переходы, Страница)
	
	НовыйПереход = Переходы.Добавить();		
	НовыйПереход.СтраницаПерехода = Страница.Имя;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьЛичныеДела()
	
	ЛичныеДела.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Филиал = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)";    
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Новая = ЛичныеДела.Добавить();
		Новая.Пользователь = Выборка.Ссылка;
	КонецЦикла;   
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонстанты()
	
	ЗаполнитьКонстанту("КорневойURL", "http://localhost");
	ЗаполнитьКонстанту("КаталогПубликацииБазы", "app");
	ЗаполнитьКонстанту("КаталогПубликацииФайлов", "attachments");
	ЗаполнитьКонстанту("КаталогСлужебныхДанных", "assets");
	ЗаполнитьКонстанту("СписокЗапрещенныхРасширений", "COM EXE BAT CMD VBS VBE JS JSE WSF WSH SCR ADE ADP APP BAS CHM CLASS CPL CRT DLL FXP HLP HTA INS ISP LNK MDA MDB MDE MDT MDW MDZ MSC MSI MSP MST OPS PCD PIF PRF PRG REG SCF SCT SHB SHS URL VB WSC");
	ЗаполнитьКонстанту("КаталогХраненияФайловНаСервере", "C:\inetpub\wwwroot");
	ЗаполнитьКонстанту("МаксимальныйРазмерФайла", 20971520); // 20 мб
	ЗаполнитьКонстанту("МаксимальныйРазмерИзображения", 1048576); // 1 мб
	ЗаполнитьКонстанту("КаталогФайловОбъектов", "attachments");
	ЗаполнитьКонстанту("КаталогХраненияАватаровПользователей", "avatars");
	ЗаполнитьКонстанту("КаталогВременныхФайлов", "C:\server\temp\");
	ЗаполнитьКонстанту("ВремяПриостановкиСлужебныхФоновыхЗаданий", 30);
	ЗаполнитьКонстанту("ИнтервалПерезапускаСлужебныхФоновыхЗаданий", 3600);
	ЗаполнитьКонстанту("КоличествоПотоковОбработкиОчередиСобытий", 1);
	
	ЗапрещатьЗагрузкуФайловПоРасширению = Константы.ЗапрещатьЗагрузкуФайловПоРасширению.Получить();
	КаталогХраненияФайловНаСервере = Константы.КаталогХраненияФайловНаСервере.Получить();
	МаксимальныйРазмерФайла = Константы.МаксимальныйРазмерФайла.Получить() / (1024 * 1024);
	МаксимальныйРазмерИзображения = Константы.МаксимальныйРазмерИзображения.Получить() / (1024 * 1024); 	
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонстанту(Имя, Значение)
	
	ТекущееЗначение = Константы[Имя].Получить();
	
	Если НЕ ЗначениеЗаполнено(ТекущееЗначение) ИЛИ ТекущееЗначение = 0 Тогда    
		Константы[Имя].Установить(Значение);
		НаборКонстант[Имя] = Значение;
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте 
Асинх Процедура ОсуществитьПереходВперед()     

	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	
	ИндексТекущейСтраницы = ТекущийИндексПерехода;
	
	Если ИндексТекущейСтраницы < СтраницыПереходов.Количество() - 1 Тогда
		Переход = СтраницыПереходов.Получить(ИндексТекущейСтраницы + 1);
		
		ИмяСтраницыПерехода = Переход.СтраницаПерехода;
		
		Элементы.Страницы.ТекущаяСтраница = Элементы[ИмяСтраницыПерехода];
		
		Если ИндексТекущейСтраницы + 1 = СтраницыПереходов.Количество() - 1 Тогда
			СтраницаКоманднойПанели = Элементы.СтраницаПоследнегоШага;
		Иначе
			СтраницаКоманднойПанели = Элементы.СтраницаПромежуточныхШагов;
		КонецЕсли;          
		
		Элементы.СтраницыКомандныхПанелей.ТекущаяСтраница = СтраницаКоманднойПанели;
		УстановитьКнопкуПоУмолчанию(СтраницаКоманднойПанели);
		
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЛичныеДела Тогда
			ЗаполнитьЛичныеДела();		
		КонецЕсли;
		
		ТекущийИндексПерехода = ТекущийИндексПерехода + 1;
	КонецЕсли;     
	 
КонецПроцедуры

&НаКлиенте 
Процедура ОсуществитьПереходНазад()

	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;	
	ИндексТекущейСтраницы = ТекущийИндексПерехода;
	
	Если ИндексТекущейСтраницы > 0 Тогда
		Переход = СтраницыПереходов.Получить(ИндексТекущейСтраницы - 1);
		
		ИмяСтраницыПерехода = Переход.СтраницаПерехода;   	
		
		Элементы.Страницы.ТекущаяСтраница = Элементы[ИмяСтраницыПерехода];
		
		Если ИндексТекущейСтраницы - 1 = 0 Тогда
			СтраницаКоманднойПанели = Элементы.СтраницаПервогоШага;
		Иначе
			СтраницаКоманднойПанели = Элементы.СтраницаПромежуточныхШагов;	
		КонецЕсли;
		
		Элементы.СтраницыКомандныхПанелей.ТекущаяСтраница = СтраницаКоманднойПанели;
		УстановитьКнопкуПоУмолчанию(СтраницаКоманднойПанели);  
		
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЛичныеДела Тогда
			ЗаполнитьЛичныеДела();		
		КонецЕсли;
		
		ТекущийИндексПерехода = ТекущийИндексПерехода - 1;
    КонецЕсли;  
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	СохранитьЗначениеРеквизита(РеквизитПутьКДанным);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодтверждениеПароля(ПолеПароля = Неопределено)
	
	Если ПолеПароля = Элементы.Пароль Тогда
		ПарольСовпадает = (ПолеПароля.ТекстРедактирования = ПодтверждениеПароля);
		
	ИначеЕсли ПолеПароля = Элементы.ПодтверждениеПароля Тогда
		ПарольСовпадает = (Пароль = ПолеПароля.ТекстРедактирования);
	Иначе
		ПарольСовпадает = (Пароль = ПодтверждениеПароля);
	КонецЕсли;
	
	Элементы.ГруппаОшибки.ТекущаяСтраница = ?(ПарольСовпадает, Элементы.СтраницаПустая, Элементы.СтраницаОшибка);
	
КонецПроцедуры
 
&НаСервере
Процедура СохранитьЛичныеДелаНаСервере()
	
	Для Каждого Строка Из ЛичныеДела Цикл   
		ОбъектПользователь = Строка.Пользователь.ПолучитьОбъект();
		ОбъектПользователь.Филиал = Строка.Филиал;
		ОбъектПользователь.Записать();  
	КонецЦикла;
	
	ЗаполнитьЛичныеДела();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьВБезопасноеХранилище(Значение, Назначение, ИмяЭлемента = "")
	
	УстановитьПривилегированныйРежим(Истина);  
	
	Если ИмяЭлемента = "" Тогда
		// нужно само значение сохранить
		РегистрыСведений.БезопасноеХранилищеДанных.ПоместитьДанные(Назначение, Значение);
	Иначе     
		Настройки = РегистрыСведений.БезопасноеХранилищеДанных.ПолучитьДанные(Назначение);
		
		Если Настройки = Неопределено Тогда
			Настройки = РегистрыСведений.БезопасноеХранилищеДанных.ПолучитьСтруктуруПодключенияКСерверу();
		КонецЕсли;
		
		Настройки.Вставить(ИмяЭлемента, Значение);
		РегистрыСведений.БезопасноеХранилищеДанных.ПоместитьДанные(Назначение, Настройки);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);  

КонецПроцедуры

&НаСервере
Процедура СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат;
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
		Если РеквизитПутьКДанным = "МаксимальныйРазмерФайла" Тогда
			НаборКонстант.МаксимальныйРазмерФайла = МаксимальныйРазмерФайла * (1024*1024);
			КонстантаИмя = "МаксимальныйРазмерФайла";
			
		ИначеЕсли РеквизитПутьКДанным = "МаксимальныйРазмерИзображения" Тогда
			НаборКонстант.МаксимальныйРазмерИзображения = МаксимальныйРазмерИзображения * (1024*1024);
			КонстантаИмя = "МаксимальныйРазмерИзображения";
		
		ИначеЕсли РеквизитПутьКДанным = "ЗапрещатьЗагрузкуФайловПоРасширению" Тогда
			НаборКонстант.ЗапрещатьЗагрузкуФайловПоРасширению = ЗапрещатьЗагрузкуФайловПоРасширению;
			КонстантаИмя = "ЗапрещатьЗагрузкуФайловПоРасширению";
			
		ИначеЕсли РеквизитПутьКДанным = "КаталогХраненияФайловНаСервере" Тогда
			НаборКонстант.КаталогХраненияФайловНаСервере = КаталогХраненияФайловНаСервере;
			КонстантаИмя = "КаталогХраненияФайловНаСервере";
		КонецЕсли;	
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьКнопкуПоУмолчанию(СтраницаКоманднойПанели)
	
	Если Не Элементы.СтраницыКомандныхПанелей.ТекущаяСтраница = СтраницаКоманднойПанели Тогда
		Если СтраницаКоманднойПанели = Элементы.СтраницаПромежуточныхШагов Тогда
			Элементы.Далее1.КнопкаПоУмолчанию = Истина;
		ИначеЕсли СтраницаКоманднойПанели = Элементы.СтраницаПервогоШага Тогда
			Элементы.Далее.КнопкаПоУмолчанию = Истина;
		ИначеЕсли СтраницаКоманднойПанели = Элементы.СтраницаПоследнегоШага Тогда
			Элементы.ЗавершитьНастройку.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
	КонецЕсли;     
	
КонецПроцедуры

#КонецОбласти
