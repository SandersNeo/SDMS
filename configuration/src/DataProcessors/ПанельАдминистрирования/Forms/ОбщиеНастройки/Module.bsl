///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбъявлениеПеременных

// Хранит признак необходимости обновления интерфейса
&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗапрещатьЗагрузкуФайловПоРасширению = НаборКонстант.ЗапрещатьЗагрузкуФайловПоРасширению;
	КаталогХраненияФайловНаСервере      = ПовторноеИспользованиеВызовСервера.ЗначениеКонстантыКаталогХраненияФайловНаСервере();
	МаксимальныйРазмерФайла             = ПовторноеИспользованиеВызовСервера.МаксимальныйРазмерФайла() / (1024 * 1024);
	МаксимальныйРазмерИзображения		= ПовторноеИспользованиеВызовСервера.МаксимальныйРазмерИзображения() / (1024 * 1024); 	
	
	КлючПодписиДляВыпускаТокенаПользователя = Перечисления.НазначенияДанныхБезопасногоХранилища.КлючПодписиДляВыпускаТокенаПользователя;
	НастройкиПодключенияКСерверуАдминистрирования  = Перечисления.НазначенияДанныхБезопасногоХранилища.НастройкиПодключенияКСерверуАдминистрирования;
	
	УстановитьПривилегированныйРежим(Истина);
	КлючПодписи = РегистрыСведений.БезопасноеХранилищеДанных.ПолучитьДанные(КлючПодписиДляВыпускаТокенаПользователя);
	НастройкиПодключения = РегистрыСведений.БезопасноеХранилищеДанных.ПолучитьДанные(НастройкиПодключенияКСерверуАдминистрирования); 
	УстановитьПривилегированныйРежим(Ложь); 
	
	Если ТипЗнч(НастройкиПодключения) = Тип("Структура") Тогда
		НастройкиПодключения.Свойство("Адрес", RAS_Адрес);
		НастройкиПодключения.Свойство("Порт", RAS_Порт);
		НастройкиПодключения.Свойство("ЛогинАдминистратораСервера", RAS_ЛогинАдминистратораСервера);
		НастройкиПодключения.Свойство("ПарольАдминистратораСервера", RAS_ПарольАдминистратораСервера);
		НастройкиПодключения.Свойство("ЛогинАдминистратораКластера", RAS_ЛогинАдминистратораКластера);
		НастройкиПодключения.Свойство("ПарольАдминистратораКластера", RAS_ПарольАдминистратораКластера); 	
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьИнтерфейсПрограммы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура RAS_ПриИзменении(Элемент)

	Назначение = ПредопределенноеЗначение("Перечисление.НазначенияДанныхБезопасногоХранилища.НастройкиПодключенияКСерверуАдминистрирования");
	СохранитьВБезопасноеХранилище(ЭтотОбъект[Элемент.Имя], Назначение, Сред(Элемент.Имя, 5));
	
КонецПроцедуры

&НаКлиенте
Процедура RAS_ПарольНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элемент.РежимПароля = НЕ Элемент.РежимПароля;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапрещатьЗагрузкуФайловПоРасширениюПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВременныхФайловПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогПубликацииБазыПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогПубликацииФайловПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогСлужебныхДанныхПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогХраненияАватаровПользователейПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогХраненияФайловНаСервереПриИзменении(Элемент)
	
	Если ПустаяСтрока(КаталогХраненияФайловНаСервере) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Каталог файлов на сервере"" не заполнено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КаталогХраненияФайловНаСервере");
		Возврат;
	КонецЕсли;
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогФайловОбъектовПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КлючПодписиПриИзменении(Элемент)
	
	Назначение = ПредопределенноеЗначение("Перечисление.НазначенияДанныхБезопасногоХранилища.КлючПодписиДляВыпускаТокенаПользователя");	
	СохранитьВБезопасноеХранилище(КлючПодписи, Назначение);
	
КонецПроцедуры 

&НаКлиенте
Процедура КорневойURLПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура МаксимальныйРазмерИзображенияПриИзменении(Элемент)
	
	Если МаксимальныйРазмерИзображения = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""МаксимальныйРазмерИзображения"" не заполнено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "МаксимальныйРазмерИзображенияОбластиДанных");
		Возврат;
	КонецЕсли;
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура МаксимальныйРазмерФайлаПриИзменении(Элемент)
	
	Если МаксимальныйРазмерФайла = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Максимальный размер файла"" не заполнено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "МаксимальныйРазмерФайлаОбластиДанных");
		Возврат;
	КонецЕсли;
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗапрещенныхРасширенийПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	КонстантаИмя = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
		Если РеквизитПутьКДанным = "МаксимальныйРазмерФайла" Тогда
			НаборКонстант.МаксимальныйРазмерФайла = МаксимальныйРазмерФайла * (1024*1024);
			КонстантаИмя = "МаксимальныйРазмерФайла";
			
		ИначеЕсли РеквизитПутьКДанным = "МаксимальныйРазмерИзображения" Тогда
			НаборКонстант.МаксимальныйРазмерИзображения = МаксимальныйРазмерИзображения * (1024*1024);
			КонстантаИмя = "МаксимальныйРазмерИзображения";
		
		ИначеЕсли РеквизитПутьКДанным = "ЗапрещатьЗагрузкуФайловПоРасширению" Тогда
			НаборКонстант.ЗапрещатьЗагрузкуФайловПоРасширению = ЗапрещатьЗагрузкуФайловПоРасширению;
			КонстантаИмя = "ЗапрещатьЗагрузкуФайловПоРасширению";
			
		ИначеЕсли РеквизитПутьКДанным = "КаталогХраненияФайловНаСервере" Тогда
			НаборКонстант.КаталогХраненияФайловНаСервере = КаталогХраненияФайловНаСервере;
			КонстантаИмя = "КаталогХраненияФайловНаСервере";
		КонецЕсли;	
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура СохранитьВБезопасноеХранилище(Значение, Назначение, ИмяЭлемента = "")
	
	УстановитьПривилегированныйРежим(Истина);  
	
	Если ИмяЭлемента = "" Тогда
		// нужно само значение сохранить
		РегистрыСведений.БезопасноеХранилищеДанных.ПоместитьДанные(Назначение, Значение);
	Иначе     
		Настройки = РегистрыСведений.БезопасноеХранилищеДанных.ПолучитьДанные(Назначение);
		
		Если Настройки = Неопределено Тогда
			Настройки = РегистрыСведений.БезопасноеХранилищеДанных.ПолучитьСтруктуруПодключенияКСерверу();
		КонецЕсли;
		
		Настройки.Вставить(ИмяЭлемента, Значение);
		РегистрыСведений.БезопасноеХранилищеДанных.ПоместитьДанные(Назначение, Настройки);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);  

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если РеквизитПутьКДанным = "ЗапрещатьЗагрузкуФайловПоРасширению" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.СписокЗапрещенныхРасширений.Доступность = ЗапрещатьЗагрузкуФайловПоРасширению;
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти
