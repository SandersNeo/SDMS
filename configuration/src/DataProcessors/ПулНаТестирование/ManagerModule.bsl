///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура ПолучитьДанныеПулНаТестирование(Фильтры, АдресРезультата, УИДЗамера) Экспорт
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ДанныеДерева = СформироватьСписокПулНаТестирование(Фильтры);
	
	ИдентификаторИнструмента = ИнструментыСервер.ПолучитьИдентификаторИнструмента(Метаданные.Обработки.ПулНаТестирование);
	ДанныеСчетчика = Новый Структура("id, count", ИдентификаторИнструмента, ДанныеДерева.Количество());
	
	ИнструментыСервер.ОповеститьИнструментОбОбновлении(ДанныеДерева, АдресРезультата, УИДЗамера, ДанныеСчетчика);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремениТехнологический("Обработки.ПулНаТестирование.ПолучитьДанныеПулНаТестирование.ВыполнениеФонового", ВремяНачала, , Строка(УИДЗамера));
	
КонецПроцедуры

// Получить настройку прочих отборов
// 
// Возвращаемое значение:
//  Структура  - насройка для отображения прочих отборов в НастройкиИнструментов 
//
Функция ПолучитьНастройкуПрочихОтборов() Экспорт
	 
	ПользовательПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();
	ПроектПустаяСсылка = Справочники.Проекты.ПустаяСсылка();
	ПродуктПустаяСсылка = Справочники.Продукты.ПустаяСсылка();
	ФилиалПустаяСсылка = Справочники.Филиалы.ПустаяСсылка();
	НаправлениеПустаяСсылка = Справочники.НаправленияРазработки.ПустаяСсылка();
	НазначениеПустаяСсылка = Справочники.НазначенияЗадач.ПустаяСсылка();
	СпринтПустаяСсылка = Документы.Спринт.ПустаяСсылка();
	ГруппаЗаказчиковПустаяСсылка = Справочники.ГруппыЗаказчиковНаправлений.ПустаяСсылка();
	
	НастройкиПрочиеОтборы = Новый Структура;
	НастройкиПрочиеОтборы.Вставить("ГруппаЗаказчиков", 
		Новый Структура("ПоУмолчанию, Представление", ГруппаЗаказчиковПустаяСсылка, "Группа заказчиков"));
	НастройкиПрочиеОтборы.Вставить("Назначение", Новый Структура("ПоУмолчанию", НазначениеПустаяСсылка));
	НастройкиПрочиеОтборы.Вставить("Направление", Новый Структура("ПоУмолчанию", НаправлениеПустаяСсылка));
	НастройкиПрочиеОтборы.Вставить("Исполнитель", 
		Новый Структура("ПоУмолчанию, Представление", ПользовательПустаяСсылка, "Разработчик"));
	НастройкиПрочиеОтборы.Вставить("Продукт", Новый Структура("ПоУмолчанию", ПродуктПустаяСсылка));
	НастройкиПрочиеОтборы.Вставить("Проект", Новый Структура("ПоУмолчанию", ПроектПустаяСсылка));
	НастройкиПрочиеОтборы.Вставить("Спринт", Новый Структура("ПоУмолчанию", СпринтПустаяСсылка));	
    НастройкиПрочиеОтборы.Вставить("Филиал", Новый Структура("ПоУмолчанию", ФилиалПустаяСсылка));	

	Возврат НастройкиПрочиеОтборы;
	
КонецФункции

// Рассчитать значение счетчика для API.ПолучитьСчетчикиИнструментов()
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь
// 
// Возвращаемое значение:
//  Число - количество задач в пуле
Функция РассчитатьЗначениеСчетчика(Знач Пользователь) Экспорт
	
	Перем ЗначениеНастройки;
	
	СвойстваНастройки = СвойстваСохраняемойНастройки();
	ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ");
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	СохраненныеНастройки = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(
		СвойстваНастройки.КлючОбъекта, СвойстваНастройки.КлючНастроек, ПользовательИБ.Имя);
	УстановитьПривилегированныйРежим(Ложь);
	
	ПолныйСписокСистем = УправлениеИнструментамиРазработкиПовтИсп.ПолучитьСписокДоступныхСистемQA();
	СписокСтатусов = УправлениеИнструментамиРазработкиПовтИсп.ПолучитьСписокСтатусов();
	
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("СписокСистем", ПолныйСписокСистем);
	НастройкиФормы.Вставить("СписокСтатусов", СписокСтатусов);
	НастройкиФормы.Вставить("ПрочиеОтборы", Новый Структура);
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		
		// Перебор всех элементом структуры настроек. Если элемент найден в сохраненной
		// настройке, его значение присваивается исходному свойству. В противном случае
		// используется значение по-умолчанию.
		Для Каждого Настройка Из НастройкиФормы Цикл
			ИмяКлюча = Настройка.Ключ;
			
			// Если значение сохраненной настройки не существует
			Если Не СохраненныеНастройки.Свойство(ИмяКлюча, ЗначениеНастройки) Тогда
				Продолжить;
			КонецЕсли;
			
			// Если типы настроек соответствуют, присваиваем значение
			Если ТипЗнч(Настройка.Значение) = ТипЗнч(ЗначениеНастройки) Тогда
				НастройкиФормы.Вставить(ИмяКлюча, ЗначениеНастройки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Cистемы = Новый Структура;
	Cистемы.Вставить("ВидСравнения", ВидСравнения.ВСписке);
	Cистемы.Вставить("ПравоеЗначение", НастройкиФормы.СписокСистем);
	Cистемы.Вставить("Использование", НастройкиФормы.СписокСистем.Количество() <> 0);

	Статусы = Новый Структура;
	Статусы.Вставить("ВидСравнения", ВидСравнения.ВСписке);
	Статусы.Вставить("ПравоеЗначение", НастройкиФормы.СписокСтатусов);
	Статусы.Вставить("Использование", НастройкиФормы.СписокСтатусов.Количество() <> 0);
	
	Фильтры = Новый Структура("Система, Статус", Cистемы, Статусы);

	Для Каждого Отбор Из НастройкиФормы.ПрочиеОтборы Цикл
		Фильтры.Вставить(Отбор.Ключ, Отбор.Значение);
	КонецЦикла;
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	#Область ТекстЗапроса
	ПостроительЗапроса.Текст =
	"ВЫБРАТЬ
	|	ДокументЗадача.Ссылка КАК Задача,
	|	ОчередьЗадачВТестировании.Порядок КАК Порядок,
	|	ОчередьЗадачВТестировании.Зафиксирован КАК Зафиксирован,
	|	ОчередьЗадачВТестировании.ДатаДобавления КАК ДатаДобавления
	|ПОМЕСТИТЬ ОтобранныеЗадачи
	|ИЗ
	|	РегистрСведений.ОчередьЗадач КАК ОчередьЗадачВТестировании
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|		ПО ОчередьЗадачВТестировании.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|		И КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ОчередьВТестировании)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО ДокументЗадача.Ссылка = ОчередьЗадачВТестировании.Задача
	|ГДЕ
	|	НЕ ОчередьЗадачВТестировании.УбранИзОчереди
	|{ГДЕ
	|	ДокументЗадача.Статус КАК Статус}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеЗадачи.Задача КАК Задача,
	|	МАКСИМУМ(ДокументСпринт.ДатаОкончания) КАК ДатаОкончания
	|ПОМЕСТИТЬ МаксимальныеДатыОкончанияТекущихСпринтов
	|ИЗ
	|	ОтобранныеЗадачи КАК ОтобранныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ПО СоставСпринтов.Объект = ОтобранныеЗадачи.Задача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|		ПО ДокументСпринт.Ссылка = СоставСпринтов.Спринт
	|		И &НачалоДняТекущаяДата МЕЖДУ ДокументСпринт.ДатаНачала И ДокументСпринт.ДатаОкончания
	|СГРУППИРОВАТЬ ПО
	|	ОтобранныеЗадачи.Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныеДатыОкончанияСпринтов.Задача КАК Задача,
	|	МАКСИМУМ(СоставСпринтов.Спринт) КАК Спринт
	|ПОМЕСТИТЬ ПоследнийСпринтЗадачи
	|ИЗ
	|	МаксимальныеДатыОкончанияТекущихСпринтов КАК МаксимальныеДатыОкончанияСпринтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСпринтов КАК СоставСпринтов
	|		ПО СоставСпринтов.Объект = МаксимальныеДатыОкончанияСпринтов.Задача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Спринт КАК ДокументСпринт
	|		ПО ДокументСпринт.ДатаОкончания = МаксимальныеДатыОкончанияСпринтов.ДатаОкончания
	|		И СоставСпринтов.Спринт = ДокументСпринт.Ссылка
	|СГРУППИРОВАТЬ ПО
	|	МаксимальныеДатыОкончанияСпринтов.Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументЗадача.Ссылка КАК Задача,
	|	ДокументЗадача.Номер КАК Номер,
	|	ДокументЗадача.Филиал КАК Филиал,
	|	ДокументЗадача.Статус КАК Статус,
	|	ДокументЗадача.Наименование КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДокументЗадача.СистемаУчета) КАК Система,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДокументЗадача.Заказчик) КАК Заказчик,
	|	ЕСТЬNULL(СтатусыОбъектов.ИндексКартинки, 0) КАК ИндексКартинки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КОЛИЧЕСТВО(ТаблицаСистемыРазработки.Система), 0) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НесколькоСистем,
	|	МИНИМУМ(ЕСТЬNULL(ТекущаяСистемаРазработки.ГруппаЗаказчиков,
	|		ЗНАЧЕНИЕ(Справочник.ГруппыЗаказчиковНаправлений.ПустаяСсылка))) КАК ГруппаЗаказчиков,
	|	ДокументЗаявкаНаРазработку.Продукт КАК Продукт,
	|	ОтобранныеЗадачи.Порядок КАК Порядок,
	|	ЕСТЬNULL(ПоследнийСпринтЗадачи.Спринт, ЗНАЧЕНИЕ(Документ.Спринт.ПустаяСсылка)) КАК Спринт,
	|	ОтобранныеЗадачи.Зафиксирован КАК Зафиксирован,
	|	СтатусыОбъектов.Ссылка КАК СтатусДляСоединения,
	|	ОтобранныеЗадачи.ДатаДобавления КАК ДатаДобавления
	|ПОМЕСТИТЬ ПодготовленныеДанные
	|ИЗ
	|	ОтобранныеЗадачи КАК ОтобранныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО ОтобранныеЗадачи.Задача = ДокументЗадача.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ДокументЗаявкаНаРазработку
	|		ПО ДокументЗадача.ОбъектОснование = ДокументЗаявкаНаРазработку.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ДокументЗадача.Статус = СтатусыОбъектов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ТекущаяСистемаРазработки
	|		ПО ДокументЗаявкаНаРазработку.Ссылка = ТекущаяСистемаРазработки.Ссылка
	|		И ДокументЗадача.СистемаУчета = ТекущаяСистемаРазработки.Система
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК ТаблицаСистемыРазработки
	|		ПО ДокументЗадача.ОбъектОснование = ТаблицаСистемыРазработки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследнийСпринтЗадачи КАК ПоследнийСпринтЗадачи
	|		ПО ПоследнийСпринтЗадачи.Задача = ОтобранныеЗадачи.Задача
	|		{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Продукты КАК Продукты
	|		ПО ДокументЗаявкаНаРазработку.Продукт = Продукты.Ссылка}
	|{ГДЕ
	|	ДокументЗадача.СистемаУчета КАК Система,
	|	ДокументЗадача.Филиал КАК Филиал,
	|	ДокументЗадача.Наименование КАК Наименование,
	|	ДокументЗадача.Направление КАК Направление,
	|	ЕСТЬNULL(ПоследнийСпринтЗадачи.Спринт, ЗНАЧЕНИЕ(Документ.Спринт.ПустаяСсылка)) КАК Спринт,
	|	ДокументЗадача.Назначение КАК Назначение,
	|	ДокументЗадача.Проект КАК Проект,
	|	ВЫБОР
	|		КОГДА НЕ Продукты.Ссылка ЕСТЬ NULL
	|			ТОГДА Продукты.Ссылка
	|		ИНАЧЕ ЕСТЬNULL(ТекущаяСистемаРазработки.ГруппаЗаказчиков,
	|			ЗНАЧЕНИЕ(Справочник.ГруппыЗаказчиковНаправлений.ПустаяСсылка))
	|	КОНЕЦ КАК СписокПродуктГруппаЗаказчиков}
	|СГРУППИРОВАТЬ ПО
	|	ДокументЗадача.Ссылка,
	|	ДокументЗадача.Филиал,
	|	ДокументЗадача.Номер,
	|	ЕСТЬNULL(ПоследнийСпринтЗадачи.Спринт, ЗНАЧЕНИЕ(Документ.Спринт.ПустаяСсылка)),
	|	ДокументЗаявкаНаРазработку.Продукт,
	|	ДокументЗадача.Статус,
	|	ДокументЗадача.Наименование,
	|	ЕСТЬNULL(СтатусыОбъектов.ИндексКартинки, 0),
	|	ОтобранныеЗадачи.Порядок,
	|	ОтобранныеЗадачи.Зафиксирован,
	|	СтатусыОбъектов.Ссылка,
	|	ОтобранныеЗадачи.ДатаДобавления,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДокументЗадача.СистемаУчета),
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДокументЗадача.Заказчик)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодготовленныеДанные.Задача КАК Задача,
	|	ПодготовленныеДанные.ДатаДобавления КАК МинимальнаяДата,
	|	&ТекущаяДата КАК МаксимальнаяДата
	|ПОМЕСТИТЬ ОграниченияДляКалендаря
	|ИЗ
	|	ПодготовленныеДанные КАК ПодготовленныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодготовленныеДанные.Задача КАК Задача,
	|	ПодготовленныеДанные.Продукт КАК Продукт,
	|	ПодготовленныеДанные.Филиал КАК Филиал,
	|	ПодготовленныеДанные.Номер КАК Номер,
	|	ПодготовленныеДанные.Наименование КАК Наименование,
	|	ПодготовленныеДанные.Система КАК Система,
	|	ПодготовленныеДанные.ГруппаЗаказчиков КАК ГруппаЗаказчиков,
	|	ПодготовленныеДанные.Заказчик КАК Заказчик,
	|	ПодготовленныеДанные.ИндексКартинки КАК ИндексКартинки,
	|	ПодготовленныеДанные.НесколькоСистем КАК НесколькоСистем,
	|	ВЫБОР
	|		КОГДА СтатистикаЗадач.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА СтатистикаЗадач.Время
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВремяОжиданияТестирования,
	|	ПодготовленныеДанные.Порядок КАК Порядок,
	|	ПодготовленныеДанные.Зафиксирован КАК Зафиксирован
	|ПОМЕСТИТЬ ПодготовленныеДанныеВремя
	|ИЗ
	|	ПодготовленныеДанные КАК ПодготовленныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатистикаСтатусовНеназначенныхЗадач КАК СтатистикаЗадач
	|		ПО ПодготовленныеДанные.Задача = СтатистикаЗадач.Задача
	|		И ПодготовленныеДанные.Статус = СтатистикаЗадач.Статус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПодготовленныеДанные.Задача КАК Задача,
	|	ЕСТЬNULL(ЛичныеДелаСрезПоследних.Сотрудник, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Исполнитель,
	|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ЛичныеДелаСрезПоследних.Сотрудник, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))) КАК ИсполнительПредставление
	|ПОМЕСТИТЬ ВсеИсполнителиЗадач
	|ИЗ
	|	ПодготовленныеДанные КАК ПодготовленныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗадач КАК СвойстваЗадач
	|		ПО ПодготовленныеДанные.Задача = СвойстваЗадач.Объект
	|		И СвойстваЗадач.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ВРаботе)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО СвойстваЗадач.Исполнитель = Пользователи.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
	|		ПО Пользователи.Должность = Должности.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела.СрезПоследних(&ТекущаяДата,
	|			Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаСрезПоследних
	|		ПО Пользователи.Ссылка = ЛичныеДелаСрезПоследних.Сотрудник
	|		И НЕ ЕСТЬNULL(Должности.РольВОтделеIT, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Справочник.РолиПользователей.Тестировщик)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеИсполнителиЗадач.Задача КАК Задача
	|ПОМЕСТИТЬ ОтобранныеЗадачиПоИсполнителям
	|ИЗ
	|	ВсеИсполнителиЗадач КАК ВсеИсполнителиЗадач
	|{ГДЕ
	|	ВсеИсполнителиЗадач.Исполнитель КАК Исполнитель}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтобранныеЗадачиПоИсполнителям.Задача) КАК Количество
	|ИЗ
	|	ОтобранныеЗадачиПоИсполнителям КАК ОтобранныеЗадачиПоИсполнителям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодготовленныеДанныеВремя КАК ПодготовленныеДанныеВремя
	|		ПО ОтобранныеЗадачиПоИсполнителям.Задача = ПодготовленныеДанныеВремя.Задача";	
	#КонецОбласти
	
	ТипСтруктура = Тип("Структура");
	
	СписокПродуктГруппаЗаказчиков = Новый СписокЗначений;
	
	Для Каждого ЭлементНастроек Из Фильтры Цикл
		Если ТипЗнч(ЭлементНастроек.Значение) <> ТипСтруктура Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементНастроек.Ключ = "ГруппаЗаказчиков" 
			ИЛИ ЭлементНастроек.Ключ = "Продукт" Тогда
			
			Если ТипЗнч(ЭлементНастроек.Значение.ПравоеЗначение) = Тип("СписокЗначений") Тогда
				Для Каждого ЭлементСписка Из ЭлементНастроек.Значение.ПравоеЗначение Цикл
					СписокПродуктГруппаЗаказчиков.Добавить(ЭлементСписка.Значение);	
				КонецЦикла;
			Иначе
				СписокПродуктГруппаЗаказчиков.Добавить(ЭлементНастроек.Значение.ПравоеЗначение);	
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить(ЭлементНастроек.Ключ);
		ЭлементОтбора.ВидСравнения = ЭлементНастроек.Значение.ВидСравнения;
		ЭлементОтбора.Значение = ЭлементНастроек.Значение.ПравоеЗначение;
		ЭлементОтбора.Использование = ЭлементНастроек.Значение.Использование;
	КонецЦикла; 
	
	Если СписокПродуктГруппаЗаказчиков.Количество() > 0 Тогда 
		ОбщегоНазначения.ПостроительЗапросаУстановитьОтбор(ПостроительЗапроса, "СписокПродуктГруппаЗаказчиков", 
			ВидСравнения.ВСписке, СписокПродуктГруппаЗаказчиков);
	КонецЕсли; 
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Запрос = ПостроительЗапроса.ПолучитьЗапрос();
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("НачалоДняТекущаяДата", НачалоДня(ТекущаяДата));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Количество;
	
КонецФункции

Функция СвойстваСохраняемойНастройки() Экспорт

	Возврат Новый Структура("КлючОбъекта, КлючНастроек", "Обработка.ПулНаТестирование", "НастройкиФормы");

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

Функция СформироватьСписокПулНаТестирование(Знач Фильтры) 
	
	КолонкиИнструмента = Новый Массив;
	КолонкиИнструмента.Добавить("ЗадачаПредставление");
	КолонкиИнструмента.Добавить("Система");
	КолонкиИнструмента.Добавить("НесколькоСистем");
	КолонкиИнструмента.Добавить("Заказчик");
	КолонкиИнструмента.Добавить("Время");
	КолонкиИнструмента.Добавить("ПредставлениеПорядок");
	КолонкиИнструмента.Добавить("ИндексКартинки");
	КолонкиИнструмента.Добавить("UID");
	КолонкиИнструмента.Добавить("Зафиксирован");
	КолонкиИнструмента.Добавить("Порядок");
	КолонкиИнструмента.Добавить("ЗафиксированКартинка");
	КолонкиИнструмента.Добавить("Разработчик");
	КолонкиИнструмента.Добавить("СрокСдачи");
	КолонкиИнструмента.Добавить("ГруппаЗаказчиков");
	КолонкиИнструмента.Добавить("Продукт");
	КолонкиИнструмента.Добавить("Филиал");
	КолонкиИнструмента.Добавить("Задача");
	
	Таблица = Новый ТаблицаЗначений;
	Для Каждого Колонка Из КолонкиИнструмента Цикл
		Таблица.Колонки.Добавить(Колонка);
	КонецЦикла;
	
	УправлениеИнструментамиРазработки.ЗаполнитьСписокПулНаТестирование(Таблица, Фильтры);
	
	ДанныеДерева = ИнструментыСервер.ПодготовитьДанныеИнструментаДляКлиента(Таблица, КолонкиИнструмента);
	
	Возврат ДанныеДерева;
	
КонецФункции

#КонецОбласти
