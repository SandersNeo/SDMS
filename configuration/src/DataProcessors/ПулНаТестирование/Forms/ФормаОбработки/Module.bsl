///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

// Дополнительные данные для хранения на клиенте
&НаКлиенте
Перем КэшДополнительныхДанных;

// Дополнительные параметры, которые использует клиент
&НаКлиенте
Перем НастройкиФормы; 

// Хранит соответствие идентификаторов пользователей ссылкам
&НаКлиенте
Перем СоответствиеПользователей;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ВремяНачалаЗамера = ИнтеграцияДополнительныхПодсистем.НачатьЗамерВремени();

	ИнициализацияПараметров();
	НастроитьИнтерфейс();

	ОбновлениеПользовательскихНастроекДинамическогоСписка();

	ИнструментыСервер.ПриСозданииНаСервере(ЭтотОбъект, Элементы.Список.Имя);
	
	КлючиНастроекКолонок = КлючиНастроекКолонок();
	НастройкиКолонок = ИнициализацияНастроекКолонок(Элементы, КлючиНастроекКолонок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Единоразовое получение данных для клиента с сервера
	КэшДополнительныхДанных = ПолучитьКэшДополнительныхДанныхДляКлиента(АдресВоВременномХранилище);
	
	// Получение настроек формы с сервера
	НастройкиФормы = КэшДополнительныхДанных["НастройкиФормы"];
	КэшДополнительныхДанных.Удалить("НастройкиФормы");
	
	СписокПользователейДляНазначения = НастройкиФормы.СписокПользователейДляНазначения;
	СоответствиеПользователей = Новый Соответствие;
	Для Каждого Элемент Из СписокПользователейДляНазначения Цикл
		СоответствиеПользователей.Вставить(Элемент.Значение.УникальныйИдентификатор(), Элемент.Значение);
	КонецЦикла;
	НастройкиФормы.Удалить("СписокПользователейДляНазначения");
	
	ИнструментыКлиент.ПриОткрытии(ЭтотОбъект);

	ИнтеграцияДополнительныхПодсистем.ЗакончитьЗамерВремени("ПулНаТестирование.ОткрытиеФормы", ВремяНачалаЗамера);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ИнструментыКлиент.ПриЗакрытии(ЗавершениеРаботы, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	СписокСобытий = СтрРазделить(ИмяСобытия, ";");
	ЭтоМассив = СписокСобытий.Количество() > 1;
	Счетчик = 0;

	Для Каждого Событие Из СписокСобытий Цикл
		ПараметрСобытия = ?(ЭтоМассив, Параметр[Счетчик], Параметр);

		Если СобытияОповещенияКлиент.СобытиеОбновлениеСписковИнструментов(Событие) Тогда
			ИнструментыКлиент.УстановитьПризнакНеобходимостиОбновления(ЭтотОбъект);
		КонецЕсли;

		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	ИнструментыКлиент.ОбработкаОповещения(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)

	Если РазрешеноИзменениеПорядка Тогда
		ОбновитьИнтерфейсФормы(Элемент.ТекущиеДанные, Список);
	КонецЕсли;

	УправлениеИнструментамиРазработкиКлиент.ОбработкаАктивизацииСтрокиДанныхФормы(Элемент,
		НастройкиФормы.Список.ВыделеннаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ОткрытьЗначениеАсинх(Элементы.Список.ТекущиеДанные.Задача);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Управление очередью

&НаКлиенте
Процедура СписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)

	Если Не РазрешеноИзменениеПорядка Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.Зафиксирован Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	Если Строка = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;

	ТекущаяСтрока = Список.НайтиПоИдентификатору(Строка);

	Если ТекущаяСтрока.Зафиксирован Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	Если Строка = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;

	ПеремещаемаяСтрока = Список.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение.Получить(0));
	СтрокаПриемник = Список.НайтиПоИдентификатору(Строка);

	УправлениеИнструментамиРазработкиКлиент.ОбработкаАктивизацииСтроки(ПеремещаемаяСтрока, НастройкиФормы.Список);

	Если ПереместитьЗадачу(ПеремещаемаяСтрока.Задача, СтрокаПриемник.Порядок) Тогда
		ОбновитьДанныеИнструмента();
	Иначе
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСписокНаКлиенте(Команда)

	ОбновитьДанныеИнструмента();

КонецПроцедуры

&НаКлиенте
Процедура ПереместитьЭлемент(Команда)

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УправлениеИнструментамиРазработкиКлиент.ОбработкаАктивизацииСтроки(ТекущиеДанные, НастройкиФормы.Список);

	Если Команда.Имя = "ПереместитьВверх" Тогда
		Направление = -1;
	ИначеЕсли Команда.Имя = "ПереместитьВниз" Тогда
		Направление = 1;
	ИначеЕсли Команда.Имя = "ПереместитьВНачало" Тогда
		Направление = -(Список.Индекс(ТекущиеДанные));
	ИначеЕсли Команда.Имя = "ПереместитьВКонец" Тогда
		Направление = Список.Количество() - Список.Индекс(ТекущиеДанные) - 1;
	КонецЕсли;

	ПереместитьЭлементНаКлиенте(ТекущиеДанные, Список, Направление);

	ОбновитьДанныеИнструмента();

КонецПроцедуры

&НаКлиенте
Процедура НастройкаКолонок(Команда)

	НастройкиКолонокПоУмолчанию = НастройкиКолонокПоУмолчанию();

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДоступныеНастройки", НастройкиКолонок);
	ПараметрыОткрытия.Вставить("НастройкиПоУмолчанию", НастройкиКолонокПоУмолчанию);

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИмяТаблицы", "Список");

	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеНастроекКолонок", ЭтотОбъект, ПараметрыОповещения);

	ОткрытьФорму("ОбщаяФорма.НастройкаКолонок", ПараметрыОткрытия, ЭтотОбъект, КлючУникальности, , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекДинамическогоСписка(Команда)

	ПользовательскиеНастройки = Новый Структура;
	ПользовательскиеНастройки.Вставить("СписокСистем", НастройкиФормы.СписокСистем);
	ПользовательскиеНастройки.Вставить("СписокСтатусов", НастройкиФормы.СписокСтатусов);
	ПользовательскиеНастройки.Вставить("ПрочиеОтборы", НастройкиФормы.ПрочиеОтборы);

	ПараметрыОткрытия = Новый Структура("КлючХранилища, ПользовательскиеНастройки",
		"Обработка.ПулНаТестирование", ПользовательскиеНастройки);

	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьСохранениеНастроек", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.НастройкиДинамическогоСписка", ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекПулНаТестирование(Команда)

	ПараметрыОткрытия = ИнтерфейсПриложенияКлиент.СформироватьПараметрыОткрытия();

	ПараметрыОткрытия.Системы.Значение = НастройкиФормы.СписокСистем;
	ПараметрыОткрытия.Системы.Использование = Истина;

	ПараметрыОткрытия.Статусы.Значение = НастройкиФормы.СписокСтатусов;
	ПараметрыОткрытия.Статусы.Использование = Истина;

	ПараметрыОткрытия.ПрочиеОтборы.Значение = НастройкиФормы.ПрочиеОтборы;
	ПараметрыОткрытия.ПрочиеОтборы.Использование = Истина;

	ПараметрыОткрытия.НастройкиПрочиеОтборы = "Обработки.ПулНаТестирование.ПолучитьНастройкуПрочихОтборов()";

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьВыборНастроекПулНаТестирование", ЭтотОбъект);
	ИнтерфейсПриложенияКлиент.ОткрытьФормуНастройкиИнструментов(ЭтотОбъект, ПараметрыОткрытия, ОписаниеОповещения);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

&НаКлиенте
Процедура КопироватьВБуфер(Команда)

	Если ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОбъектСсылка = Неопределено;

	Если ТекущийЭлемент.ТекущиеДанные <> Неопределено Тогда

		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;

		Если ТекущиеДанные.Свойство("Задача") Тогда
			ОбъектСсылка = ТекущиеДанные.Задача;
		ИначеЕсли ТекущиеДанные.Свойство("Заявка") Тогда
			ОбъектСсылка = ТекущиеДанные.Заявка;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		ОбщегоНазначенияКлиент.КопироватьНавигационнуюСсылкуВБуферОбмена(ОбъектСсылка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВариантыСсылок(Команда)

	Если ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОбъектСсылка = Неопределено;

	Если ТекущийЭлемент.ТекущиеДанные <> Неопределено Тогда

		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;

		Если ТекущиеДанные.Свойство("Задача") Тогда
			ОбъектСсылка = ТекущиеДанные.Задача;
		ИначеЕсли ТекущиеДанные.Свойство("Заявка") Тогда
			ОбъектСсылка = ТекущиеДанные.Заявка;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		ИнтерфейсПриложенияКлиент.ОткрытьОкноНавигационнойСсылки(ОбъектСсылка, ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВзятьНаСебя(Команда)

	ВзятьНаСебяНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура Зафиксировать(Команда)

	ЗафиксироватьНаКлиенте();

КонецПроцедуры

#КонецОбласти

#Область СЛУЖЕБНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ

#Область РаботаСколонками

&НаСервере
Функция ИнициализацияНастроекКолонок(Элементы, Знач КлючиНастроекКолонок)

	НастройкиКолонокПоУмолчанию = НастройкиКолонокПоУмолчанию();

	НастройкиКолонок = ИнтерфейсПриложенияВызовСервера.ЗаполнитьПользовательскиеНастройки(НастройкиКолонокПоУмолчанию,
		КлючиНастроекКолонок);

	ИнтерфейсПриложенияКлиентСервер.ПрименитьПользовательскиеНастройки(Элементы, НастройкиКолонок);

	ИнтерфейсПриложения.ОбновитьПорядокКолонокНаСервере(НастройкиКолонок.Порядок, Элементы, Элементы["Список"]);

	Возврат НастройкиКолонок;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НастройкиКолонокПоУмолчанию()
	
	// Порядок колонок в коде влияет на заполнение по умолчанию
	Состав = Новый СписокЗначений;
	Состав.Добавить("СписокФилиал", "Филиал", Ложь);
	Состав.Добавить("СписокЗадачаПредставление", "Задача", Истина);
	Состав.Добавить("СписокСистема", "Система", Истина);
	Состав.Добавить("СписокНесколькоСистем", "Несколько систем", Ложь);
	Состав.Добавить("СписокЗаказчик", "Заказчик", Истина);
	Состав.Добавить("СписокРазработчик", "Разработчик", Истина);
	Состав.Добавить("СписокПродукт", "Продукт", Ложь);
	Состав.Добавить("СписокГруппаЗаказчиков", "Группа заказчиков", Ложь);
	Состав.Добавить("СписокВремя", "Время", Истина);
	Состав.Добавить("СписокСрокСдачи", "Срок сдачи", Ложь);
	Состав.Добавить("СписокГруппаПорядок", "Порядок", Истина);

	ПорядковыйНомер = 1;
	Порядок = Новый Соответствие;

	Для Каждого ЭлементСписка Из Состав Цикл
		СтруктураПоля = Новый Структура("Поле, Представление", ЭлементСписка.Значение, ЭлементСписка.Представление);
		Порядок.Вставить(ПорядковыйНомер, СтруктураПоля);

		ПорядковыйНомер = ПорядковыйНомер + 1;
	КонецЦикла;

	Результат = Новый Структура("Состав, Порядок", Состав, Порядок);

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеНастроекКолонок(Знач Результат, Знач ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЗаполняемыеСвойства = "Состав, Порядок";
	ЗаполнитьЗначенияСвойств(НастройкиКолонок, Результат, ЗаполняемыеСвойства);
	Ключи = КлючиНастроекКолонок();
	Настройки = НастройкиКолонок;

	ИнтерфейсПриложенияКлиентСервер.ПрименитьПользовательскиеНастройки(Элементы, Настройки);

	Если Результат.ИзменилсяПорядок Тогда
		ОбновитьПорядокКолонок(Настройки.Порядок);
	КонецЕсли;

	// Сохранение пользовательских настроек
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(Ключи.Объект, Ключи.Настройка, Настройки);

КонецПроцедуры

&НаСервере
Процедура ОбновитьПорядокКолонок(Знач Порядок)

	ТаблицаЭлемента = Элементы["Список"];
	ИнтерфейсПриложения.ОбновитьПорядокКолонокНаСервере(Порядок, Элементы, ТаблицаЭлемента);

КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеПодтвержденияВыбораОтсутствующего(Знач ДопПараметры) Экспорт

	ЗавершитьНазначениеЗадачиСпискаНаПользователя(ДопПараметры.Задача, ДопПараметры.Пользователь,
		ДопПараметры.ИмяСписка);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьНазначениеЗадачиСпискаНаПользователя(Знач Задача, Знач Пользователь, Знач ИмяСписка)

	Результат = РаботаСПроцессамиВызовСервера.НазначитьЗадачуНаПользователя(Задача, Пользователь);

	Если Результат.Успешно Тогда
		ОбновитьДанныеИнструмента();
	Иначе
		Сообщить(Результат.Сообщение);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСписокПользователейДляНазначения(Знач СписокПользователей)

	Идентификатор = ОбщегоНазначенияКлиентСервер.СтрУникальныйИдентификатор(ЭтотОбъект.УникальныйИдентификатор);

	Для Каждого Элемент Из СписокПользователей Цикл
		ИдентификаторПользователя = СтрЗаменить(Строка(Элемент.Значение.УникальныйИдентификатор()), "-", "_");
		
		// Пул на тестирование
		НоваяКоманда = ЭтотОбъект.Команды.Добавить(СтрШаблон("Список_НазначитьНа_%1", ИдентификаторПользователя));
		НоваяКоманда.Заголовок = Элемент.Представление;
		НоваяКоманда.Действие = "НазначитьЗадачуНаПользователя";
		НоваяКоманда.Отображение = ОтображениеКнопки.Текст;
		НоваяКоманда.Подсказка = СтрШаблон("Назначить выбранную задачу на %1", Элемент.Представление);

		НоваяКнопка = ЭтотОбъект.Элементы.Добавить(СтрШаблон("ПулНаТестирование_%1_%2", Идентификатор,
			ИдентификаторПользователя), Тип("КнопкаФормы"), Элементы.ЗагрузитьСписокПользователейДляНазначения);

		НоваяКнопка.ИмяКоманды = НоваяКоманда.Имя;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ИнициализацияПараметров()

	НастройкиФормы = СформироватьНастройкиФормы();

	Настройки = Новый Структура;
	Настройки.Вставить("НастройкиФормы", НастройкиФормы);

	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Настройки);
	ЗагрузитьСписокПользователейДляНазначения(НастройкиФормы.СписокПользователейДляНазначения);

КонецПроцедуры

&НаКлиенте
Процедура НазначитьЗадачуСпискаНаПользователя(Список, Команда, Знач ИмяДляЗамены)

	ТекущиеДанные = Список.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Или Команда = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИдентификаторПользователя = СтрЗаменить(Команда.Имя, ИмяДляЗамены, "");
	ОтформатированныйИдентификатор = СтрЗаменить(ИдентификаторПользователя, "_", "-");
	УникальныйИдентификаторПользователя = Новый УникальныйИдентификатор(ОтформатированныйИдентификатор);
	Пользователь = СоответствиеПользователей.Получить(УникальныйИдентификаторПользователя);

	Задача = ТекущиеДанные.Задача;

	ДанныеОтсутствия = ПользователиВызовСервера.ДанныеОтсутствия(Пользователь);

	Если ДанныеОтсутствия.Отсутствует Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Форма", ЭтотОбъект);
		ДопПараметры.Вставить("Задача", Задача);
		ДопПараметры.Вставить("Пользователь", Пользователь);
		ДопПараметры.Вставить("ИмяСписка", Список.Имя);
		ИнтерфейсПриложенияКлиент.ПодтвердитьВыборОтсутствующегоПользователя(Пользователь, ДанныеОтсутствия,
			ДопПараметры);
	Иначе
		ЗавершитьНазначениеЗадачиСпискаНаПользователя(Задача, Пользователь, Список.Имя);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НастроитьИнтерфейс()
	
	// Проверим разрешение на управление очередью в инструменте "На разработку"
	РазрешеноИзменениеПорядка = ПроверитьРольПользователя(ФилиалТестирование);

	Элементы.ПереместитьВверх.Доступность = РазрешеноИзменениеПорядка;
	Элементы.ПереместитьВниз.Доступность = РазрешеноИзменениеПорядка;
	Элементы.Зафиксировать.Доступность = РазрешеноИзменениеПорядка;

	ИзменитьПодсказкуКоманд_УправлениеПорядкомВОчереди();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокУчастниковФилиала()

	СписокУчастниковФилиала = Новый СписокЗначений;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(&ТекущаяДата, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ЛичныеДелаСрезПоследних.Сотрудник = Пользователи.Ссылка
	|ГДЕ
	|	ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы) = &ТекущийФилиал
	|	И Пользователи.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";

	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТекущийФилиал", ПараметрыСеанса.Филиал);

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокУчастниковФилиала.Добавить(Выборка.Ссылка, Выборка.Наименование);
		КонецЦикла;
	КонецЕсли;

	Возврат СписокУчастниковФилиала;

КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьИдентификаторыСтрокДереваНаСервере(ТаблицаРазвернутыхСтрокДерева, ДеревоЗначений,
	ВыделеннаяСтрока = Неопределено)
	
	// Получаем все элементы строки дерева значений
	СтрокаДереваЗначений = ДеревоЗначений.ПолучитьЭлементы();

	Если СтрокаДереваЗначений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
    
    // Определяем, нужно ли искать выделенный на форме элемент
	ИскатьТекущуюСтроку = (ВыделеннаяСтрока <> Неопределено И ТипЗнч(ВыделеннаяСтрока) = Тип("Строка"));

	СтруктураОтбора = Новый Структура("Идентификатор", -1);

	Для Каждого ЭлементСтрокиДерева Из СтрокаДереваЗначений Цикл
        // Обновляем идентификаторы строк
		НайденнаяСтрока = ТаблицаРазвернутыхСтрокДерева.Найти(ЭлементСтрокиДерева.UID, "UID");
		Если НайденнаяСтрока <> Неопределено Тогда
			НайденнаяСтрока.Идентификатор = ЭлементСтрокиДерева.ПолучитьИдентификатор();
			НайденнаяСтрока.СтрокаНайдена = Истина;
		КонецЕсли;

		Если ИскатьТекущуюСтроку Тогда
            // Ищем новый индекс выделенной в элементе строки
			Если ЭлементСтрокиДерева.UID = ВыделеннаяСтрока Тогда
				ВыделеннаяСтрока = ЭлементСтрокиДерева.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
        
        // Чтобы исключить ситуацию, когда все индексы найдены, а перебор дерева
        // еще идет, проверим строки со значением Неопределено.
		Если Не ИскатьТекущуюСтроку И ТаблицаРазвернутыхСтрокДерева.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
			Прервать;
		КонецЕсли;

		ОбновитьИдентификаторыСтрокДереваНаСервере(ТаблицаРазвернутыхСтрокДерева, ЭлементСтрокиДерева, ВыделеннаяСтрока);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСохранениеНастроек(Результат, ПараметрыОткрытия) Экспорт

	ОбновлениеПользовательскихНастроекДинамическогоСписка();

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборЭлементов(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		ИмяНастройки = ДополнительныеПараметры.ИмяНастройки;
		ИмяЭлемента = ДополнительныеПараметры.ИмяКоманды;

		НастройкиФормы[ИмяНастройки].ЗагрузитьЗначения(Результат);
		ОбновитьДанныеИнструмента();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКэшДополнительныхДанныхДляКлиента(Знач АдресВоВременномХранилище = "")

	ДанныеДляКлиента = Новый Соответствие;

	Если ЭтоАдресВременногоХранилища(АдресВоВременномХранилище) Тогда
		Настройки = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
		НастройкиФормы = Настройки.НастройкиФормы;
		
		// Скопируем некоторые данные, которые не нужны в пользовательских настройках.
		ДанныеДляКлиента.Вставить("НастройкиФормы", НастройкиФормы);
	Иначе
		ДанныеДляКлиента.Вставить("НастройкиФормы", Неопределено);
	КонецЕсли;

	Возврат ДанныеДляКлиента;

КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьРольПользователя(Знач ФилиалТестирование)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|ГДЕ
	|	Филиалы.Руководитель = &Пользователь
	|	И Филиалы.Ссылка = &ФилиалТестирование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|ГДЕ
	|	Филиалы.ЗаместительРуководителя = &Пользователь
	|	И Филиалы.Ссылка = &ФилиалТестирование";

	Запрос.УстановитьПараметр("ФилиалТестирование", ФилиалТестирование);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);

	РезультатЗапроса = Запрос.Выполнить();

	Возврат (Не РезультатЗапроса.Пустой() Или УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("Администратор")
		Или УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("ИзменениеПорядкаЗадачВОчередиНаТестирование"));

КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормы(Знач Настройки)

	СвойстваНастроек = Обработки.ПулНаТестирование.СвойстваСохраняемойНастройки();
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(СвойстваНастроек.КлючОбъекта,
		СвойстваНастроек.КлючНастроек, Настройки);

КонецПроцедуры

&НаСервере
Функция СформироватьНастройкиФормы()

	Перем ЗначениеНастройки;

	ПолныйСписокСистем = УправлениеИнструментамиРазработкиПовтИсп.ПолучитьСписокДоступныхСистемQA();
	СписокСтатусов = УправлениеИнструментамиРазработкиПовтИсп.ПолучитьСписокСтатусов();

	ФилиалТестирование = Справочники.Пользователи.ПолучитьФилиалТестированияПользователя(ПараметрыСеанса.Филиал);
	СписокПользователейДляНазначения = УправлениеИнструментамиРазработки.ПолучитьСписокПользователейДляНазначения();

	СписокФилиалов = Новый СписокЗначений;
	СписокФилиалов.Добавить(ПараметрыСеанса.Филиал);
	
	// Создание пустой структуры настроек
	НастройкиФормы = Новый Структура;
	// Общие настройки.
	НастройкиФормы.Вставить("СписокПользователейДляНазначения", СписокПользователейДляНазначения);

	НастройкиФормы.Вставить("СписокСистем", ПолныйСписокСистем);
	НастройкиФормы.Вставить("СписокСтатусов", СписокСтатусов);
	НастройкиФормы.Вставить("ПрочиеОтборы", Новый Структура);    
	
	// Параметры таблицы
	НастройкиТаблицы = Новый Структура("ВыделеннаяСтрока", Неопределено);
	НастройкиФормы.Вставить("Список", НастройкиТаблицы);

	СвойстваНастройки = Обработки.ПулНаТестирование.СвойстваСохраняемойНастройки();
	
	// Восстановление сохраненных параметров
	СохраненныеНастройки = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(
		СвойстваНастройки.КлючОбъекта, СвойстваНастройки.КлючНастроек);

	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		
		// Перебор всех элементом структуры настроек. Если элемент найден в сохраненной
		// настройке, его значение присваивается исходному свойству. В противном случае
		// используется значение по-умолчанию.
		Для Каждого Настройка Из НастройкиФормы Цикл
			ИмяКлюча = Настройка.Ключ;
			
			// Если значение сохраненной настройки не существует
			Если Не СохраненныеНастройки.Свойство(ИмяКлюча, ЗначениеНастройки) Тогда
				Продолжить;
			КонецЕсли;
			
			// Если типы настроек соответствуют, присваиваем значение
			Если ТипЗнч(Настройка.Значение) = ТипЗнч(ЗначениеНастройки) Тогда
				НастройкиФормы.Вставить(ИмяКлюча, ЗначениеНастройки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат НастройкиФормы;

КонецФункции

#КонецОбласти

#Область ПулНаТестирование

&НаКлиенте
Процедура ВзятьНаСебяНаКлиенте()

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Результат = РаботаСПроцессамиВызовСервера.НазначитьЗадачуНаПользователя(ТекущиеДанные.Задача);
	Если Результат.Успешно Тогда
		ОбновитьДанныеИнструмента();
	Иначе
		Сообщить(Результат.Сообщение);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменитьПодсказкуКоманд_УправлениеПорядкомВОчереди()
	
	// Если пользователю не разрешено управлять очередью,
	// отобразим соответствующую подсказку	
	Если РазрешеноИзменениеПорядка Тогда
		Возврат;
	КонецЕсли;

	ТекстПодсказки = "Инструмент управления очередью доступен руководителю группы тестирования.";

	Команда = Команды.Найти("ПереместитьВверх");
	Если Команда <> Неопределено Тогда
		Команда.Подсказка = ТекстПодсказки;
	КонецЕсли;

	Команда = Команды.Найти("ПереместитьВниз");
	Если Команда <> Неопределено Тогда
		Команда.Подсказка = ТекстПодсказки;
	КонецЕсли;

	Команда = Команды.Найти("Зафиксировать");
	Если Команда <> Неопределено Тогда
		Команда.Подсказка = ТекстПодсказки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьНаКлиенте()

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УправлениеИнструментамиРазработкиКлиент.ОбработкаАктивизацииСтроки(ТекущиеДанные, НастройкиФормы.Список);

	Если ЗафиксироватьНаСервере(ТекущиеДанные.Задача) Тогда
		ОбновитьДанныеИнструмента();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗафиксироватьНаСервере(Знач Задача)

	Возврат РегистрыСведений.ОчередьЗадач.Зафиксировать(Задача, Перечисления.ВидыОчереди.ОчередьВТестировании);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючиНастроекКолонок()

	Возврат Новый Структура("Объект, Настройка", "Обработка.ПулНаТестирование", "НастройкиКолонок");

КонецФункции

&НаКлиенте
Процедура НазначитьЗадачуНаПользователя(Команда)

	ИмяДляЗамены = "Список_НазначитьНа_";

	НазначитьЗадачуСпискаНаПользователя(Элементы.Список, Команда, ИмяДляЗамены);

КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбновлениеПулНаТестирование()

	МетодОбновления = "Обработки.ПулНаТестирование.ПолучитьДанныеПулНаТестирование";
	
	Cистемы = Новый Структура;
	Cистемы.Вставить("ВидСравнения", ВидСравнения.ВСписке);
	Cистемы.Вставить("ПравоеЗначение", НастройкиФормы.СписокСистем);
	Cистемы.Вставить("Использование", НастройкиФормы.СписокСистем.Количество() <> 0);

	Статусы = Новый Структура;
	Статусы.Вставить("ВидСравнения", ВидСравнения.ВСписке);
	Статусы.Вставить("ПравоеЗначение", НастройкиФормы.СписокСтатусов);
	Статусы.Вставить("Использование", НастройкиФормы.СписокСтатусов.Количество() <> 0);
	
	Фильтры = Новый Структура("Система, Статус", Cистемы, Статусы);

	Для Каждого Отбор Из НастройкиФормы.ПрочиеОтборы Цикл
		Фильтры.Вставить(Отбор.Ключ, Отбор.Значение);
	КонецЦикла;
	
	ПараметрыФонового = Новый Массив;
	ПараметрыФонового.Добавить(Фильтры);
	
	ИнструментыКлиент.НачатьОбновлениеИнструмента(ЭтотОбъект, МетодОбновления,
		ПараметрыФонового, Элементы.Список.Имя, , "ОбработатьДанныеПулНаТестирование");

	Элементы.КнопкиПеремещение.Доступность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеИнструмента() Экспорт

	ИнструментыКлиент.ОбновлениеДанныхЗапущено(ЭтотОбъект);

	ЗапуститьОбновлениеПулНаТестирование();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсФормы(Знач ТекущиеДанные, Знач Список)

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.Зафиксирован Тогда
		Элементы.ПереместитьВверх.Доступность = Ложь;
		Элементы.ПереместитьВниз.Доступность = Ложь;
		Элементы.ПереместитьВНачало.Доступность = Ложь;
		Элементы.ПереместитьВКонец.Доступность = Ложь;
	Иначе
		// Получение индекса строки в таблице
		ИндексСтроки = Список.Индекс(ТекущиеДанные);
		
		// Если это первый элемент, то блокируем кнопку перемещения наверх
		Элементы.ПереместитьВверх.Доступность = (ИндексСтроки <> 0);
		Элементы.ПереместитьВНачало.Доступность = (ИндексСтроки <> 0);
		
		// Если это последний элемент, то блокируем кнопку перемещения вниз
		Если ИндексСтроки = Список.Количество() - 1 Тогда
			Элементы.ПереместитьВниз.Доступность = Ложь;
			Элементы.ПереместитьВКонец.Доступность = Ложь;
		Иначе
			Элементы.ПереместитьВниз.Доступность = Истина;
			Элементы.ПереместитьВКонец.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеПулНаТестирование() Экспорт

	ИнструментыКлиент.ОбработатьОтложенноеОбновлениеИнструмента(ЭтотОбъект, Элементы.Список.Имя,
		"Обработки.ПулНаТестирование.ПолучитьДанныеПулНаТестирование");

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОбновленияИнструмента(Данные, ДополнительныеПараметры) Экспорт

	ЭлементыДерева = ЭтотОбъект[ДополнительныеПараметры.ОбновляемаяТаблица];
	ИнструментыКлиент.ЗаполнитьДанныеИнструмента(ЭлементыДерева, Данные, ДополнительныеПараметры.МетодОбновления);

	НастройкиСписка = НастройкиФормы[ДополнительныеПараметры.ОбновляемаяТаблица];

	УправлениеИнструментамиРазработкиКлиент.ВосстановитьДанныеФормыВПредыдущееСостояние(ЭтотОбъект,
		ДополнительныеПараметры.ОбновляемаяТаблица, НастройкиСписка);

	Элементы.КнопкиПеремещение.Доступность = РазрешеноИзменениеПорядка;
	
	ИнструментыКлиент.ЗакончитьОбновлениеИнструмента(ЭтотОбъект, ДополнительныеПараметры, Данные.УИДЗамера);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПереместитьЗадачу(Знач Задача, Знач Порядок)

	Возврат РегистрыСведений.ОчередьЗадач.ИзменитьПорядок(Задача, Порядок,
		Перечисления.ВидыОчереди.ОчередьВТестировании);

КонецФункции

&НаКлиенте
Процедура ПереместитьЭлементНаКлиенте(Знач ТекущиеДанные, Знач Список, Знач Направление)

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МаксимальныйИндекс = Список.Количество() - 1;
	Индекс = Список.Индекс(ТекущиеДанные);
	НовыйПорядок = ТекущиеДанные.Порядок;

	Пока Истина Цикл
		Индекс = Индекс + Направление;
		Если (Индекс < 0) Или (Индекс > МаксимальныйИндекс) Тогда
			Прервать;
		КонецЕсли;

		ПредыдущаяЗапись = Список[Индекс];
		Если Не ПредыдущаяЗапись.Зафиксирован Тогда
			НовыйПорядок = ПредыдущаяЗапись.Порядок;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если НовыйПорядок = ТекущиеДанные.Порядок Тогда
		Возврат;
	КонецЕсли;

	ПереместитьЗадачу(ТекущиеДанные.Задача, НовыйПорядок);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьРазрешениеРаботыСПулом()

	РазрешениеРаботатьСПулом = Ложь;

	ТекущийФилиал = ПараметрыСеанса.Филиал;

	Если Не ЗначениеЗаполнено(ТекущийФилиал) Тогда
		Возврат РазрешениеРаботатьСПулом;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВложенныйЗапрос.РазрешениеРаботатьСПуломЗадач КАК РазрешениеРаботатьСПуломЗадач
	|ИЗ
	|	(ВЫБРАТЬ
	|		НастройкиФилиалов.Значение КАК РазрешениеРаботатьСПуломЗадач
	|	ИЗ
	|		Справочник.Филиалы КАК Филиалы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиФилиалов КАК НастройкиФилиалов
	|			ПО Филиалы.Ссылка = НастройкиФилиалов.Филиал
	|				И (НастройкиФилиалов.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.РазрешениеРаботатьСПуломЗадач))
	|	ГДЕ
	|		Филиалы.Ссылка = &ТекущийФилиал
	|		И Филиалы.Руководитель = &Пользователь
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НастройкиФилиалов.Значение
	|	ИЗ
	|		Справочник.Филиалы КАК Филиалы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиФилиалов КАК НастройкиФилиалов
	|			ПО Филиалы.Ссылка = НастройкиФилиалов.Филиал
	|				И (НастройкиФилиалов.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.РазрешениеРаботатьСПуломЗадач))
	|	ГДЕ
	|		Филиалы.Ссылка = &ТекущийФилиал
	|		И Филиалы.ЗаместительРуководителя = &Пользователь) КАК ВложенныйЗапрос";

	Запрос.УстановитьПараметр("ТекущийФилиал", ТекущийФилиал);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РазрешениеРаботатьСПулом = Выборка.РазрешениеРаботатьСПуломЗадач;
	КонецЕсли;

	Возврат РазрешениеРаботатьСПулом;

КонецФункции

&НаКлиенте
Процедура ЗавершитьВыборНастроекПулНаТестирование(Результат, ДополнительныеНастройки) Экспорт

	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	НастройкиФормы.СписокСтатусов = Результат.ВыбранныеСтатусы;
	НастройкиФормы.СписокСистем = Результат.ВыбранныеСистемы;
	НастройкиФормы.ПрочиеОтборы = Результат.ПрочиеОтборы;

	ОбновитьДанныеИнструмента();
	СохранитьНастройкиФормы(НастройкиФормы);

КонецПроцедуры

#КонецОбласти

#Область ОбщиеМеханизмы_НастройкиДинамическихСписок

&НаСервере
Процедура ОбновлениеПользовательскихНастроекДинамическогоСписка()

	Свойства = Новый Структура("КлючНастройкиСписка, ПользовательскиеНастройкиСписка");

	Свойства.КлючНастройкиСписка = Новый Массив;
	Свойства.КлючНастройкиСписка.Добавить(Обработки.ПулНаТестирование.СвойстваСохраняемойНастройки().КлючОбъекта);

	Свойства.ПользовательскиеНастройкиСписка = Новый Массив;
	Свойства.ПользовательскиеНастройкиСписка.Добавить(Элементы.ПользовательскиеНастройки);

	ОбщегоНазначенияВызовСервера.ПользовательскиеНастройкиДинамическогоСписка(
		Свойства.КлючНастройкиСписка, ВариантыНастроек, ЭтотОбъект, Свойства.ПользовательскиеНастройкиСписка);

КонецПроцедуры

&НаСервере
Процедура ПрименениеНастройкиДинамическогоСписка(Знач Свойства, Знач Идентификатор)

	ОбщегоНазначенияВызовСервера.ПрименитьНастройкуДинамическогоСпискаНаСервере(
		Свойства.КлючНастройкиСписка, ВариантыНастроек, Идентификатор, Свойства.ДинамическийСписок.КомпоновщикНастроек);

КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкуДинамическогоСписка(Команда)

	Настройки = ОбщегоНазначенияВызовСервера.ПолучитьНастройкиХранилищеНастроекДинамическихСписков(
		"Обработка.ПулНаТестирование", ВариантыНастроек, Команда.Имя);

	Если Настройки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Настройки);
		ЗаполнитьЗначенияСвойств(НастройкиФормы, Настройки);
		ОбновитьДанныеИнструмента();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
