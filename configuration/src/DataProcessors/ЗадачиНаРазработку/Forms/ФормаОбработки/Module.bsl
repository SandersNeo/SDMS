///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

// Пользовательские настройки
&НаКлиенте
Перем НастройкиФормы;

// Хранит пользовательские настройки колонок 
&НаКлиенте
Перем НастройкиКолонок;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ИнтеграцияДополнительныхПодсистем.НачатьЗамерВремени();

	НастройкиФормы = ПолучитьНастройкиФормы();
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(НастройкиФормы);
	
	// уберем видимость до завершения обновления данных в фоне
	Элементы.СписокСпринтов.Видимость = Ложь;
	
	ОбновлениеПользовательскихНастроекДинамическогоСписка();
	ИнициализацияНастроекКолонок();
	
	ИнструментыСервер.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ЗадачиНаРазработку.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтоАдресВременногоХранилища(АдресВоВременномХранилище) Тогда
		НастройкиФормы = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	Иначе 
		НастройкиФормы = Неопределено;
	КонецЕсли;
	
	ИнструментыКлиент.ПриОткрытии(ЭтотОбъект);
	
	ИнтеграцияДополнительныхПодсистем.ЗакончитьЗамерВремени("ЗадачиНаРазработку.ОткрытиеФормы", ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ИнструментыКлиент.ПриЗакрытии(ЗавершениеРаботы, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СписокСобытий = СтрРазделить(ИмяСобытия, ";");
	ЭтоМассив = СписокСобытий.Количество() > 1;
	Счетчик = 0;
	
	Для Каждого Событие Из СписокСобытий Цикл
		Если СобытияОповещенияКлиент.СобытиеОбновлениеСписковИнструментов(Событие) Тогда
			ПараметрСобытия = ?(ЭтоМассив, Параметр[Счетчик], Параметр);
			
			Если ТипЗнч(Источник) = Тип("ДокументСсылка.Задача") Тогда
				ИнструментыКлиент.УстановитьПризнакНеобходимостиОбновления(ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	ИнструментыКлиент.ОбработкаОповещения(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы  

&НаКлиенте
Процедура ЗадачиНаРазработкуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если (ТекущиеДанные = Неопределено) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(ТекущиеДанные.Задача) = Тип("ДокументСсылка.Задача") Тогда
		ПоказатьЗначение(, ТекущиеДанные.Задача);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСпринтовПриИзменении(Элемент)
	
	ОбновитьДанныеИнструмента();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкаКолонок(Команда)  
	
	Ключи = ПолучитьКлючиНастроекКолонок();
	НастройкиПоУмолчанию = НастройкиКолонокПоУмолчанию();
	НастройкиКолонок = ИнтерфейсПриложенияВызовСервера.ЗаполнитьПользовательскиеНастройки(НастройкиПоУмолчанию, Ключи);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДоступныеНастройки", НастройкиКолонок);
	ПараметрыОткрытия.Вставить("НастройкиПоУмолчанию", НастройкиПоУмолчанию);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИмяТаблицы", "ЗадачиНаРазработку");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеНастроекКолонок", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаКолонок", ПараметрыОткрытия, ЭтотОбъект,
		КлючУникальности, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры
	
&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ПараметрыОткрытия = ИнтерфейсПриложенияКлиент.СформироватьПараметрыОткрытия();
	
	ПараметрыОткрытия.ГруппыЗаказчиков.Значение = НастройкиФормы.ВыбранныеГруппыЗаказчиков;
	ПараметрыОткрытия.ГруппыЗаказчиков.Использование = Истина;
	
	ПараметрыОткрытия.Продукты.Значение = НастройкиФормы.ВыбранныеПродукты;
	ПараметрыОткрытия.Продукты.Использование = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияОкнаМножественногоВыбора", ЭтотОбъект);
	
	ИнтерфейсПриложенияКлиент.ОткрытьФормуНастройкиИнструментов(ЭтотОбъект, ПараметрыОткрытия, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗадачиНаРазработку(Команда)
	
	ОбновитьДанныеИнструмента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСохраненныеНастройки(Команда)
	
	ПараметрыОткрытия = Новый Структура("КлючХранилища, ПользовательскиеНастройки", КлючНастроекСписка(), НастройкиФормы);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьСохранениеНастроек", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.НастройкиДинамическогоСписка", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкуДинамическогоСписка(Команда)
	
	НастройкиОтборов = ОбщегоНазначенияВызовСервера.ПолучитьНастройкиХранилищеНастроекДинамическихСписков(
		КлючНастроекСписка(), ВариантыНастроек, Команда.Имя);	 
	
	Если НастройкиОтборов <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НастройкиФормы, НастройкиОтборов);
		ОбновитьДанныеИнструмента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеНастройки(Команда)
	
	ПрочиеНастройки = Новый Структура;
	
	Для Каждого Настройка Из НастройкиФормы Цикл
		Если ТипЗнч(Настройка.Значение) <> Тип("СписокЗначений") Тогда 	
			ПрочиеНастройки.Вставить(Настройка.Ключ, Настройка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОткрытия = ИнтерфейсПриложенияКлиент.СформироватьПараметрыОткрытия(ПрочиеНастройки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияОкнаМножественногоВыбора", ЭтотОбъект);
	
	ИнтерфейсПриложенияКлиент.ОткрытьФормуНастройкиИнструментов(ЭтотОбъект, ПараметрыОткрытия, ОписаниеОповещения);

	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализацияНастроекКолонок()
	
	Ключи = ПолучитьКлючиНастроекКолонок();
	НастройкиПоУмолчанию = НастройкиКолонокПоУмолчанию();
	НастройкиКолонок = ИнтерфейсПриложенияВызовСервера.ЗаполнитьПользовательскиеНастройки(НастройкиПоУмолчанию, Ключи);
		
	ИнтерфейсПриложенияКлиентСервер.ПрименитьПользовательскиеНастройки(Элементы, НастройкиКолонок);
	ОбновитьПорядокКолонок("ЗадачиНаРазработку", НастройкиКолонок.Порядок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючНастроекСписка()
	
	Возврат "Обработка.ЗадачиНаОбработку.Форма.ФормаОбработки.Настройки_ЗадачиНаОбработку";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НастройкиКолонокПоУмолчанию()
	
	Состав = Новый СписокЗначений;
	Состав.Добавить("ЗадачиНаРазработкуЗадача", "Задача", Истина);
	Состав.Добавить("ЗадачиНаРазработкуСистемаУчета", "Система", Истина);
	Состав.Добавить("ЗадачиНаРазработкуГруппаЗаказчиков", "Группа заказчиков", Истина);
	Состав.Добавить("ЗадачиНаРазработкуСложностьЗадачи", "Сложность", Истина);
	Состав.Добавить("ЗадачиНаРазработкуПродукт", "Продукт", Истина);
	Состав.Добавить("ЗадачиНаРазработкуНазначение", "Назначение", Истина);
	Состав.Добавить("ЗадачиНаРазработкуСпринт", "Спринт", Истина);
	Состав.Добавить("ЗадачиНаРазработкуПлановыеТрудозатраты", "План", Истина);
	Состав.Добавить("ЗадачиНаРазработкуДнейВОчереди", "В очереди", Истина);
	Состав.Добавить("ЗадачиНаРазработкуПорядок", "Порядок", Истина);
	Состав.Добавить("ЗадачиНаРазработкуЦелеваяЗаявка", "ЦелеваяЗаявка", Ложь);
	
	ПорядковыйНомер = 1;
	Порядок = Новый Соответствие;
	
	Для Каждого ЭлементСписка Из Состав Цикл
		СтруктураПоля = Новый Структура("Поле, Представление", ЭлементСписка.Значение, ЭлементСписка.Представление);
		Порядок.Вставить(ПорядковыйНомер, СтруктураПоля);
		
		ПорядковыйНомер = ПорядковыйНомер + 1;
	КонецЦикла;
	
	Результат = Новый Структура("Состав, Порядок", Состав, Порядок);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеИнструмента() Экспорт
	
	ИнструментыКлиент.ОбновлениеДанныхЗапущено(ЭтотОбъект);
	МетодОбновления = "Обработки.ЗадачиНаРазработку.ПолучитьДанныеЗадачиНаРазработку";
	
	ПараметрыФонового = Новый Массив;
	ПараметрыФонового.Добавить(НастройкиФормы);
	ПараметрыФонового.Добавить(СписокСпринтов);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыделеннаяСтрока", НастройкиФормы.ЗадачиНаРазработку.ВыделеннаяСтрока);
	
	ИнструментыКлиент.НачатьОбновлениеИнструмента(ЭтотОбъект, МетодОбновления,
		ПараметрыФонового, Элементы.ЗадачиНаРазработку.Имя, ДополнительныеПараметры, "ОбработатьДанныеЗадачиНаРазработку");
		
	СохранитьНастройкиФормы(НастройкиФормы);
	
	Элементы.СписокСпринтов.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеЗадачиНаРазработку() Экспорт
	
	ИнструментыКлиент.ОбработатьОтложенноеОбновлениеИнструмента(ЭтотОбъект, Элементы.ЗадачиНаРазработку.Имя, "Обработки.ЗадачиНаРазработку.ПолучитьДанныеЗадачиНаРазработку");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОбновленияИнструмента(Данные, ДополнительныеПараметры) Экспорт
	
	НастройкиСписка = НастройкиФормы.ЗадачиНаРазработку;
	
	ЗаполнитьСписокСпринтов(Данные.ДанныеДерева.СписокСпринтов);
	
	// немного изменена логика получения результата из-за "СписокСпринтов", возвращаем как должно быть
	Данные.ДанныеДерева = Данные.ДанныеДерева.Дерево;
	
	ЭлементыДерева = ЗадачиНаРазработку.ПолучитьЭлементы();
	
	ИнструментыКлиент.ЗаполнитьДанныеИнструмента(ЭлементыДерева, Данные, ДополнительныеПараметры.МетодОбновления);
	
	НастройкиСписка.ВыделеннаяСтрока = ДополнительныеПараметры.ВыделеннаяСтрока;

	УправлениеИнструментамиРазработкиКлиент.ВосстановитьДанныеФормыВПредыдущееСостояние(ЭтотОбъект,
		"ЗадачиНаРазработку", НастройкиСписка);
	
	Элементы.СписокСпринтов.ТолькоПросмотр = Ложь;
	
	ИнструментыКлиент.ЗакончитьОбновлениеИнструмента(ЭтотОбъект, ДополнительныеПараметры, Данные.УИДЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокСпринтов(Знач ПакетСпринтов)

	СписокВыбораСпринтов = Элементы.СписокСпринтов.СписокВыбора;
	СписокВыбораСпринтов.Очистить();
	СписокВыбораСпринтов.Добавить("Все");
	СписокВыбораСпринтов.Добавить("Без спринта");

	Для Каждого Спринт Из ПакетСпринтов Цикл
		СписокВыбораСпринтов.Добавить(Спринт);
	КонецЦикла;
	
	Если СписокВыбораСпринтов.НайтиПоЗначению(СписокСпринтов) = Неопределено Тогда
		СписокСпринтов = СписокВыбораСпринтов[0].Значение;
	КонецЕсли;
	
	Элементы.СписокСпринтов.Видимость = ПакетСпринтов.Количество();

КонецПроцедуры

&НаСервере
Процедура ОбновитьПорядокКолонок(Знач ИмяТаблицы, Знач Порядок)
	
	ТаблицаЭлемента = Элементы[ИмяТаблицы];
	ИнтерфейсПриложения.ОбновитьПорядокКолонокНаСервере(Порядок, Элементы, ТаблицаЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура ОбновлениеПользовательскихНастроекДинамическогоСписка()
	
	Свойства = Новый Структура("КлючНастройкиСписка, ПользовательскиеНастройкиСписка");	
	
	Свойства.КлючНастройкиСписка = Новый Массив;
	Свойства.КлючНастройкиСписка.Добавить(КлючНастроекСписка());
	
	Свойства.ПользовательскиеНастройкиСписка = Новый Массив;
	Свойства.ПользовательскиеНастройкиСписка.Добавить(Элементы.ПользовательскиеНастройки);

	ОбщегоНазначенияВызовСервера.ПользовательскиеНастройкиДинамическогоСписка(
		Свойства.КлючНастройкиСписка, ВариантыНастроек, ЭтотОбъект,
		Свойства.ПользовательскиеНастройкиСписка);
	
КонецПроцедуры

// Процедура для изменения таблицы формы
//
// Параметры:
//  Результат - Структура - Хранит результат выбора пользователя:
//  	* ИзменилсяПорядок - Булево - Проверка на изменения порядка
//  	* Состав - Соответсвие - Состав колонок таблицы
//  	* Порядок - СписокЗначения - Колонки для отображения
//  ДополнительныеПараметры	 - Структура - Передает сохраненные настройки
//
&НаКлиенте
Процедура ОбработатьИзменениеНастроекКолонок(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполняемыеСвойства = "Состав, Порядок";
	
	ЗаполнитьЗначенияСвойств(НастройкиКолонок, Результат, ЗаполняемыеСвойства);
	Ключи = ПолучитьКлючиНастроекКолонок();		
	Настройки = НастройкиКолонок;		
	
	ИнтерфейсПриложенияКлиентСервер.ПрименитьПользовательскиеНастройки(Элементы, Настройки);
	
	Если Результат.ИзменилсяПорядок Тогда
		ОбновитьПорядокКолонок(ДополнительныеПараметры.ИмяТаблицы, Настройки.Порядок);
	КонецЕсли;
	
	// Сохранение пользовательских настроек
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(Ключи.Объект, Ключи.Настройка, Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСохранениеНастроек(Результат, ПараметрыОткрытия) Экспорт
	
	ОбновлениеПользовательскихНастроекДинамическогоСписка();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКлючиНастроекКолонок()
	
	Ключи = Новый Структура;
	Ключи.Вставить("Объект", "Обработка.ЗадачиНаРазработку");
	Ключи.Вставить("Настройка", "НастройкаКолонок");
	
	Возврат Ключи;
	
КонецФункции

Функция ПолучитьНастройкиФормы()
	
	Перем ЗначениеНастройки;
		
	// Создание пустой структуры настроек
	НастройкиФормы = Новый Структура;
	                   			
	НастройкиФормы.Вставить("ВыбранныеГруппыЗаказчиков", Новый СписокЗначений);
	НастройкиФормы.Вставить("ГруппировкаЗадач", 0);
	НастройкиФормы.Вставить("ОтображатьЗаблокированныеЗадачи", Ложь);
	НастройкиФормы.Вставить("ВыбранныеПродукты", Новый СписокЗначений);

	НастройкиСписка = Новый Структура("ВыделеннаяСтрока, РазвернутыеСтроки", Неопределено, Новый Соответствие);
	НастройкиФормы.Вставить("ЗадачиНаРазработку", НастройкиСписка);

	СвойстваНастройки = СвойстваСохраняемойНастройки();
	
	// Восстановление сохраненных параметров
	СохраненныеНастройки = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(
		СвойстваНастройки.КлючОбъекта, СвойстваНастройки.КлючНастроек);
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда	
		// Перебор всех элементом структуры настроек. Если элемент найден в сохраненной
		// настройке, его значение присваивается исходному свойству. В противном случае
		// используется значение по-умолчанию.
		Для Каждого Настройка Из НастройкиФормы Цикл				
			ИмяКлюча = Настройка.Ключ;
			// Если значение сохраненной настройки не существует
			// Также если сохранен пустой список значений - не загружаем настройки.
			Если НЕ СохраненныеНастройки.Свойство(ИмяКлюча, ЗначениеНастройки) Тогда
				Продолжить;
			КонецЕсли;
			
			// Если типы настроек соответствуют, присваиваем значение
			Если ТипЗнч(Настройка.Значение) = ТипЗнч(ЗначениеНастройки) Тогда
				НастройкиФормы.Вставить(ИмяКлюча, ЗначениеНастройки);
			КонецЕсли;
		КонецЦикла;
		
		Если СохраненныеНастройки.Свойство("ЗадачиНаРазработку") Тогда
			ЗаполнитьЗначенияСвойств(НастройкиСписка, СохраненныеНастройки.ЗадачиНаРазработку);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НастройкиФормы;
	
КонецФункции

// Процедура ПослеЗакрытияОкнаМножественногоВыбора - После закрытия окна множественного выбора 
// 		обновляются группы заказчиков и задачи на разработку
//
// Параметры:
//  ЗначенияФормы			 - Структура	     - Содержит информацию об изменениях на форме 
//  ДополнительныеПараметры	 - Структура 		 - Дополниткльные параметры формы
//
&НаКлиенте
Процедура ПослеЗакрытияОкнаМножественногоВыбора(Знач ЗначенияФормы, ДополнительныеПараметры) Экспорт
	
	Если ЗначенияФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Настройки Из ЗначенияФормы Цикл
		Если НастройкиФормы.Свойство(Настройки.Ключ) Тогда
			НастройкиФормы.Вставить(Настройки.Ключ, Настройки.Значение);	
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДанныеИнструмента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СвойстваСохраняемойНастройки()
	
	Возврат Новый Структура("КлючОбъекта, КлючНастроек", "Обработка.ЗадачиНаРазработку", "НастройкиФормы");
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормы(Знач Настройки)
	
	СвойстваНастроек = СвойстваСохраняемойНастройки();
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(СвойстваНастроек.КлючОбъекта,
		СвойстваНастроек.КлючНастроек, Настройки);
			
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиНаРазработкуПриАктивизацииСтроки(Элемент)
	
	УправлениеИнструментамиРазработкиКлиент.ОбработкаАктивизацииСтрокиДанныхФормы(Элемент,
		НастройкиФормы.ЗадачиНаРазработку.ВыделеннаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ЗадачиНаРазработкуПередРазворачиванием(Элемент, Строка, Отказ)

	УправлениеИнструментамиРазработкиКлиент.ПередРазворачиваниемУзлаДерева(ЗадачиНаРазработку, 
		Строка, НастройкиФормы.ЗадачиНаРазработку.РазвернутыеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура ЗадачиНаРазработкуПередСворачиванием(Элемент, Строка, Отказ)
	
	УправлениеИнструментамиРазработкиКлиент.ПередСворачиваниемУзлаДерева(ЗадачиНаРазработку, 
		Строка, НастройкиФормы.ЗадачиНаРазработку.РазвернутыеСтроки);
		
КонецПроцедуры


#КонецОбласти                                      
