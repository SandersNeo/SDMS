///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОПИСАНИЕ_ПЕРЕМЕННЫХ

// Дополнительные данные для хранения на клиенте
&НаКлиенте
Перем КэшДополнительныхДанных;

// Дополнительные параметры, которые использует клиент
&НаКлиенте
Перем НастройкиФормы;

// Хранит соответствие идентификаторов пользователей ссылкам
&НаКлиенте
Перем СоответствиеПользователей;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ИнтеграцияДополнительныхПодсистем.НачатьЗамерВремени();
	
	ИнициализацияПараметров();
	НастроитьИнтерфейс();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
			
	// Единоразовое получение данных для клиента с сервера
	КэшДополнительныхДанных = ПолучитьКэшДополнительныхДанныхДляКлиента(АдресВоВременномХранилище);
		
	// Получение настроек формы с сервера
	НастройкиФормы = КэшДополнительныхДанных["НастройкиФормы"];
	КэшДополнительныхДанных.Удалить("НастройкиФормы");
    	
	СписокПользователейДляНазначения = НастройкиФормы.СписокПользователейДляНазначения;
	СоответствиеПользователей = Новый Соответствие; 
	
	Для Каждого Элемент Из СписокПользователейДляНазначения Цикл
		СоответствиеПользователей.Вставить(Элемент.Значение.УникальныйИдентификатор(), Элемент.Значение);
	КонецЦикла;
	НастройкиФормы.Удалить("СписокПользователейДляНазначения");
	
	Элементы.ГруппироватьПоТипам.Пометка = ГруппироватьПоТипам;
	ОбновитьСчетчикиЭлементов();
	ИзменитьДоступностьЭлементов();
    ОбновитьСписокНаКлиенте();
	
	ИнтеграцияДополнительныхПодсистем.ЗакончитьЗамерВремени("РазработкаQA.ОткрытиеФормы", ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СписокСобытий = СтрРазделить(ИмяСобытия, ";");
	ЭтоМассив = СписокСобытий.Количество() > 1;
	Счетчик = 0;
	
	Для Каждого Событие Из СписокСобытий Цикл
		
		ПараметрСобытия = ?(ЭтоМассив, Параметр[Счетчик], Параметр);
		
		Если СобытияОповещенияКлиент.СобытиеОбновлениеСписковИнструментов(Событие) Тогда
			ОбновитьСписокНаКлиенте();
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ГруппироватьПоТипамПриИзменении(Элемент)
	
	НастройкиФормы.ГруппироватьПоТипам = ГруппироватьПоТипам;	
	ОбновитьСписокНаКлиенте(Ложь); 
	СохранитьНастройкиФормы(НастройкиФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Список_ДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список_Дерево.ТекущиеДанные;
	 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Задача) Тогда
		ОткрытьЗначениеАсинх(ТекущиеДанные.Задача);
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура Список_ДеревоПередРазворачиванием(Элемент, Строка, Отказ)

	УправлениеИнструментамиРазработкиКлиент.ПередРазворачиваниемУзлаДерева(Список_Дерево, Строка, 
		НастройкиФормы.Список.Дерево.РазвернутыеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура Список_ДеревоПередСворачиванием(Элемент, Строка, Отказ)
	
	УправлениеИнструментамиРазработкиКлиент.ПередСворачиваниемУзлаДерева(Список_Дерево, 
		Строка, НастройкиФормы.Список.Дерево.РазвернутыеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Список_ДеревоПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.Список_ДеревоКонтекстноеМенюКопироватьВБуфер.Видимость = НЕ ТекущиеДанные.ЭтоГруппа;
	КонецЕсли;
	
	УправлениеИнструментамиРазработкиКлиент.ОбработкаАктивизацииСтроки(ТекущиеДанные, НастройкиФормы.Список.Дерево);
	ОбновитьИнтерфейсФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Список_ДеревоНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	Если НЕ РазрешеноИзменениеПорядка
		ИЛИ ГруппироватьПоТипам Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.Зафиксирован Тогда
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Список_ДеревоПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Строка = Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Список_Дерево.НайтиПоИдентификатору(Строка);
	 
	Если ТекущаяСтрока.Зафиксирован Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Список_ДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Строка = Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	ПеремещаемаяСтрока = Список_Дерево.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение.Получить(0));
	СтрокаПриемник = Список_Дерево.НайтиПоИдентификатору(Строка);
	
	Если ПереместитьЗадачу(ПеремещаемаяСтрока.Задача, СтрокаПриемник.Порядок) Тогда
		ОбновитьСписокНаКлиенте();
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура Дерево_ВзятьНаСебя(Команда)
	
	Список_ВзятьНаСебя(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Зафиксировать(Команда)
	
	ЗафиксироватьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	ОбновитьСписокНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокТипов(Команда)
	
	Список = КэшДополнительныхДанных.Получить("СписокТипов").Скопировать();
	ВыбранныеЭлементыСписка = НастройкиФормы.СписокТипов;
	
	ВсегоКоличествоЭлементов = Список.Количество();
	
	Для Каждого Элемент Из Список Цикл
		Элемент.Пометка = (ВыбранныеЭлементыСписка.НайтиПоЗначению(Элемент.Значение) <> Неопределено);
	КонецЦикла;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗаголовокОкна", "Выбор типов");
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Истина);
	ПараметрыОткрытия.Вставить("ОтмеченныеЗначения", Список);
	ПараметрыОткрытия.Вставить("ВариантЗаполнения", 1);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборЭлементов", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ПодборЗначений", ПараметрыОткрытия, ЭтотОбъект, КлючУникальности, , , ОписаниеОповещения, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьЭлемент(Команда)
	
	Направление = СтрЗаменить(Команда.Имя, "Переместить", "");
	ПереместитьЭлементНаКлиенте(Направление);

КонецПроцедуры

&НаКлиенте
Процедура Таблица_ВзятьНаСебя(Команда)
	
	Список_ВзятьНаСебя(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НазначитьЗадачуНаПользователя(Команда)
	
	ИмяДляЗамены = "СписокДерево_НазначитьНа_";
	
	НазначитьЗадачуСпискаНаПользователя(Элементы.Список_Дерево, Команда, ИмяДляЗамены);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общее

&НаКлиенте
Процедура КопироватьВБуфер(Команда)
	
	Если ТекущийЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = Неопределено;

	Если ТекущийЭлемент.ТекущиеДанные <> Неопределено Тогда 
		
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		
		Если ТекущиеДанные.Свойство("Задача") Тогда
			ОбъектСсылка = ТекущиеДанные.Задача;
		ИначеЕсли ТекущиеДанные.Свойство("Заявка") Тогда
			ОбъектСсылка = ТекущиеДанные.Заявка;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		ОбщегоНазначенияКлиент.КопироватьНавигационнуюСсылкуВБуферОбмена(ОбъектСсылка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВариантыСсылок(Команда)
	
	Если ТекущийЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = Неопределено;
	
	Если ТекущийЭлемент.ТекущиеДанные <> Неопределено Тогда 
		
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	
		Если ТекущиеДанные.Свойство("Задача") Тогда
			ОбъектСсылка = ТекущиеДанные.Задача;
		ИначеЕсли ТекущиеДанные.Свойство("Заявка") Тогда
			ОбъектСсылка = ТекущиеДанные.Заявка;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда	
		ИнтерфейсПриложенияКлиент.ОткрытьОкноНавигационнойСсылки(ОбъектСсылка, ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтборы(Команда)
			
	ПараметрыОткрытия = ИнтерфейсПриложенияКлиент.СформироватьПараметрыОткрытия();
	
	ПараметрыОткрытия.Филиалы.Значение = НастройкиФормы.СписокФилиалов;
	ПараметрыОткрытия.Филиалы.Использование = Истина;
	ПараметрыОткрытия.Филиалы.Вставить("ДоступныеФилиалы", КэшДополнительныхДанных.Получить("СписокФилиаловQA").Скопировать());
	
	ИсключаемыеСтатусы = Новый Массив;
	ИсключаемыеСтатусы.Добавить(ПредопределенноеЗначение("Справочник.СтатусыОбъектов.РевьюТребований"));
	ИсключаемыеСтатусы.Добавить(ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Отклонен"));
	ИсключаемыеСтатусы.Добавить(ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Рассмотрен"));
	ИсключаемыеСтатусы.Добавить(ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Решен"));

	ПараметрыОткрытия.Статусы.Значение = НастройкиФормы.СписокСтатусов;
	ПараметрыОткрытия.Статусы.Использование = Истина;
	ПараметрыОткрытия.Статусы.Вставить("ИсключаемыеСтатусы", ИсключаемыеСтатусы);

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьОтборы", ЭтотОбъект);
	ИнтерфейсПриложенияКлиент.ОткрытьФормуНастройкиИнструментов(ЭтотОбъект, ПараметрыОткрытия, ОписаниеОповещения);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ИзменитьДоступностьЭлементов()

	// Доступность кнопок управления очередью
	Элементы.ПереместитьВверх.Доступность = (РазрешеноИзменениеПорядка И НЕ ГруппироватьПоТипам);
	Элементы.ПереместитьВниз.Доступность = (РазрешеноИзменениеПорядка И НЕ ГруппироватьПоТипам);
	Элементы.КнопкаЗафиксировать.Доступность = (РазрешеноИзменениеПорядка И НЕ ГруппироватьПоТипам);
			
КонецПроцедуры

&НаСервере
Процедура ИзменитьПодсказкуКоманд_УправлениеПорядкомВОчереди()
	
	// Если пользователю не разрешено управлять очередью, отобразим соответствующую подсказку.	
	Если РазрешеноИзменениеПорядка Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПодсказки = "Инструмент управления очередью доступен руководителю группы тестирования.";
		
	Команда = Команды.Найти("ПереместитьВверх");	
	Если Команда <> Неопределено Тогда
		Команда.Подсказка = ТекстПодсказки;
	КонецЕсли;
	
	Команда = Команды.Найти("ПереместитьВниз");
	Если Команда <> Неопределено Тогда
		Команда.Подсказка = ТекстПодсказки;
	КонецЕсли;
	
	Команда = Команды.Найти("Зафиксировать");
	Если Команда <> Неопределено Тогда
		Команда.Подсказка = ТекстПодсказки;
	КонецЕсли;
	
	Команда = Команды.Найти("ПереместитьВКонец");
	Если Команда <> Неопределено Тогда
		Команда.Подсказка = ТекстПодсказки;
	КонецЕсли;
	
	Команда = Команды.Найти("ПереместитьВНачало");
	Если Команда <> Неопределено Тогда
		Команда.Подсказка = ТекстПодсказки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсФормы()
	
	ТекущиеДанные = Элементы.Список_Дерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (НЕ РазрешеноИзменениеПорядка ИЛИ ГруппироватьПоТипам) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Зафиксирован Тогда
		Элементы.ПереместитьВниз.Доступность = Ложь;
		Элементы.ПереместитьВверх.Доступность = Ложь;
	Иначе
		КоллекцияЭлементов = Список_Дерево.ПолучитьЭлементы();
		// Получение индекса строки в таблице
		ИндексСтроки = КоллекцияЭлементов.Индекс(ТекущиеДанные);
		
		// Если это первый элемент, то блокируем кнопку перемещения наверх
		Если ИндексСтроки = 0 Тогда
			Элементы.ПереместитьВверх.Доступность = Ложь;
			Элементы.ПереместитьВНачало.Доступность = Ложь;
		Иначе
			Элементы.ПереместитьВверх.Доступность = Истина;
			Элементы.ПереместитьВНачало.Доступность = Истина;
		КонецЕсли;
		
		// Если это последний элемент, то блокируем кнопку перемещения вниз
		Если ИндексСтроки = КоллекцияЭлементов.Количество() - 1 Тогда
			Элементы.ПереместитьВниз.Доступность = Ложь;
			Элементы.ПереместитьВКонец.Доступность = Ложь;
		Иначе
			Элементы.ПереместитьВниз.Доступность = Истина;
			Элементы.ПереместитьВКонец.Доступность = Истина;
		КонецЕсли;		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокНаКлиенте(Знач ОбновитьСписок = Истина)
	
	ИзменитьДоступностьЭлементов();
	
	Если ОбновитьСписок Тогда
		ПередаваемыеПараметры = Новый Структура;
		ПередаваемыеПараметры.Вставить("ВсегоТипов", КэшДополнительныхДанных.Получить("СписокТипов").Количество());
		ПередаваемыеПараметры.Вставить("Типы", НастройкиФормы.СписокТипов);
		ПередаваемыеПараметры.Вставить("Список", НастройкиФормы.Список);
		ПередаваемыеПараметры.Вставить("ВыбранныеСтатусы", НастройкиФормы.СписокСтатусов);
		ПередаваемыеПараметры.Вставить("ВыбранныеФилиалы", НастройкиФормы.СписокФилиалов);
		ПередаваемыеПараметры.Вставить("ВсегоФилиалов", КэшДополнительныхДанных.Получить("СписокФилиаловQA").Количество());
		
		ОбновитьСписокНаСервере(ПередаваемыеПараметры);
		
		УправлениеИнструментамиРазработкиКлиент.ВосстановитьСписокВПредыдущееСостояние_Дерево(Список_Дерево, Элементы.Список_Дерево,
			НастройкиФормы.Список.Дерево);
	Иначе
		Список_Дерево.ПолучитьЭлементы().Очистить();
		
		// Получаем дерево формы, которое нужно отобразить.
		СписокДеревоФормы = СформироватьСписокДерево(Список_Дерево, Список_Таблица,
			ГруппироватьПоТипам);

		// Передаем сформированное дерево для заполнения в реквизит и поиска идентификаторов
		// развернутых и выделенной строки.
		УправлениеИнструментамиРазработкиКлиент.ОбработатьДляЗаполненияСписок_Дерево(Список_Дерево, Элементы.Список_Дерево,
			СписокДеревоФормы, НастройкиФормы.Список.Дерево);  
	КонецЕсли;
	
	ОбновитьСчетчикиЭлементов();
				
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокНаСервере(НастройкиСписка)
		
	Список_Таблица.Очистить();
	
	КоличествоВыбрано = НастройкиСписка.Типы.Количество();
	ОбновитьКартинкуКнопкиСписка("ОткрытьСписокТипов", КоличествоВыбрано, НастройкиСписка.ВсегоТипов);

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументЗадача.Ссылка КАК Задача,
	|	ДокументЗадача.Дата КАК Дата,
	|	ДокументЗадача.Наименование КАК Наименование,
	|	ДокументЗадача.Номер КАК Номер,
	|	ЕСТЬNULL(ПланируемыеТрудозатраты.Трудозатраты, 0) КАК ОценкаТрудозатрат,
	|	ДокументЗадача.ВидЗадачи КАК ТипЗадачи,
	|	ДокументЗадача.Статус КАК Статус,
	|	ЕСТЬNULL(ОчередьТестирования.Порядок, 0) КАК Порядок,
	|	ЕСТЬNULL(ОчередьТестирования.Зафиксирован, ЛОЖЬ) КАК Зафиксирован,
	|	ЕСТЬNULL(ВидыЗадач.Наименование, ""Задачи без типа"") КАК ТипЗадачиНаименование
	|ПОМЕСТИТЬ ПодготовленнаяТаблица
	|ИЗ
	|	Документ.Задача КАК ДокументЗадача
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗадач КАК ВидыЗадач
	|		ПО ДокументЗадача.ВидЗадачи = ВидыЗадач.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
	|		ПО (ДокументЗадача.Ссылка = (ВЫРАЗИТЬ(ПланируемыеТрудозатраты.Объект КАК Документ.Задача)))
	|			И (ПланируемыеТрудозатраты.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьЗадач КАК ОчередьТестирования
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючОчереди КАК КлючОчереди
	|			ПО ОчередьТестирования.КлючОчередиОбъекта = КлючОчереди.Ссылка
	|				И (КлючОчереди.ВидОчереди = ЗНАЧЕНИЕ(Перечисление.ВидыОчереди.ОчередьГруппыТестирования))
	|		ПО ДокументЗадача.Ссылка = ОчередьТестирования.Задача
	|ГДЕ
	|	ДокументЗадача.Статус В(&ВыбранныеСтатусы)
	|	И ДокументЗадача.Филиал В(&ФилиалТестирование)
	|	И ДокументЗадача.ВидЗадачи В(&ВыбранныеТипы)
	|	И ДокументЗадача.Назначена = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ПодготовленнаяТаблица.Дата) КАК Дата
	|ПОМЕСТИТЬ МинимальнаяДатаЗадачи
	|ИЗ
	|	ПодготовленнаяТаблица КАК ПодготовленнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря
	|ПОМЕСТИТЬ ВыходныеДни
	|ИЗ
	|	МинимальнаяДатаЗадачи КАК МинимальнаяДатаЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|		ПО (ПроизводственныйКалендарь.ДатаКалендаря >= МинимальнаяДатаЗадачи.Дата)
	|			И (ПроизводственныйКалендарь.ДатаКалендаря <= &ТекущаяДата)
	|			И (ПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Выходной))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодготовленнаяТаблица.Задача КАК Задача,
	|	ПодготовленнаяТаблица.Дата КАК ДатаСоздания,
	|	ПодготовленнаяТаблица.Наименование КАК Наименование,
	|	ПодготовленнаяТаблица.Номер КАК Номер,
	|	ПодготовленнаяТаблица.ОценкаТрудозатрат КАК ОценкаТрудозатрат,
	|	ПодготовленнаяТаблица.ТипЗадачи КАК ТипЗадачи,
	|	ПодготовленнаяТаблица.Порядок КАК Порядок,
	|	ПодготовленнаяТаблица.ТипЗадачиНаименование КАК ТипЗадачиНаименование,
	|	ПодготовленнаяТаблица.Зафиксирован КАК Зафиксирован,
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексКартинки,
	|	РАЗНОСТЬДАТ(ПодготовленнаяТаблица.Дата, &ТекущаяДата, ДЕНЬ) - ЕСТЬNULL(КОЛИЧЕСТВО(ВыходныеДни.ДатаКалендаря), 0) КАК Ожидание
	|ИЗ
	|	ПодготовленнаяТаблица КАК ПодготовленнаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ПодготовленнаяТаблица.Статус = СтатусыОбъектов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыходныеДни КАК ВыходныеДни
	|		ПО (ВыходныеДни.ДатаКалендаря МЕЖДУ ПодготовленнаяТаблица.Дата И &ТекущаяДата)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПодготовленнаяТаблица.Задача,
	|	ПодготовленнаяТаблица.Дата,
	|	ПодготовленнаяТаблица.Наименование,
	|	ПодготовленнаяТаблица.Номер,
	|	ПодготовленнаяТаблица.ОценкаТрудозатрат,
	|	ПодготовленнаяТаблица.ТипЗадачи,
	|	ПодготовленнаяТаблица.Порядок,
	|	ПодготовленнаяТаблица.ТипЗадачиНаименование,
	|	ПодготовленнаяТаблица.Зафиксирован,
	|	СтатусыОбъектов.ИндексКартинки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	ДатаСоздания"; 
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ФилиалТестирование", НастройкиСписка.ВыбранныеФилиалы);
	Запрос.УстановитьПараметр("ВыбранныеТипы", НастройкиСписка.Типы);
	Запрос.УстановитьПараметр("ВыбранныеСтатусы", НастройкиСписка.ВыбранныеСтатусы);
		
	ВыборкаТаблица = Запрос.Выполнить().Выбрать();
	
	ПорядокПредставление = 1;
	Пока ВыборкаТаблица.Следующий() Цикл
		НоваяСтрокаТаблицы = Список_Таблица.Добавить();			
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, ВыборкаТаблица);
		
		ИдентификаторСтроки = СтрШаблон("%1%2", Строка(ВыборкаТаблица.ТипЗадачи), Строка(ВыборкаТаблица.Задача));
		UID = ОбщегоНазначенияВызовСервера.ХэшСумма(ИдентификаторСтроки, Истина);
		Наименование = СтрШаблон("[%1] %2", ВыборкаТаблица.Номер, ВыборкаТаблица.Наименование);	
		
		НоваяСтрокаТаблицы.UID = UID;
		НоваяСтрокаТаблицы.Наименование = Наименование; 
		
		Если ВыборкаТаблица.Зафиксирован Тогда
			НоваяСтрокаТаблицы.ЗафиксированКартинка = БиблиотекаКартинок.ФиксированиеЗадачи;
		КонецЕсли;    
		
		НоваяСтрокаТаблицы.ПорядокПредставление = ПорядокПредставление;
		ПорядокПредставление = ПорядокПредставление + 1;
	КонецЦикла;
	
	// Обновление подсказки у эелементов управления очередью, если они не доступны
	ИзменитьПодсказкуКоманд_УправлениеПорядкомВОчереди();
	
	// Необходимо заполнить реквизит дерево значений, отображаемый на форме.
	Список_Дерево.ПолучитьЭлементы().Очистить();
	СписокДерево_ДанныеФормы = СформироватьСписокДерево(Список_Дерево, Список_Таблица, ГруппироватьПоТипам);
	
	СписокДерево_ДеревоЗначений = ДанныеФормыВЗначение(СписокДерево_ДанныеФормы, Тип("ДеревоЗначений"));
	ЗначениеВРеквизитФормы(СписокДерево_ДеревоЗначений, "Список_Дерево");
	
	// Текущую строку присвоим на клиенте.
	Элементы.Список_Дерево.ТекущаяСтрока = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьЭлементНаКлиенте(Знач Направление)
	
	ТекущиеДанные = Элементы.Список_Дерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияЭлементов = Список_Дерево.ПолучитьЭлементы();
	ИндексТекущихДанных = КоллекцияЭлементов.Индекс(ТекущиеДанные);
	Задача = ТекущиеДанные.Задача;
	НовыйПорядок = ТекущиеДанные.Порядок;
	
	// Ищем первую незафиксированную строку
	Если Направление = "Вверх" Тогда
		Индекс = ИндексТекущихДанных;
		Пока Индекс > 0 Цикл
			Индекс = Индекс - 1;
			ПредыдущаяЗапись = КоллекцияЭлементов.Получить(Индекс);
			Если НЕ ПредыдущаяЗапись.Зафиксирован Тогда
				НовыйПорядок = ПредыдущаяЗапись.Порядок;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Направление = "Вниз" Тогда
		Индекс = ИндексТекущихДанных;
		Пока Индекс < КоллекцияЭлементов.Количество() - 1 Цикл
			Индекс = Индекс + 1;
			СледующаяЗапись = КоллекцияЭлементов.Получить(Индекс);
			Если НЕ СледующаяЗапись.Зафиксирован Тогда
				НовыйПорядок = СледующаяЗапись.Порядок;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Направление = "ВНачало" Тогда
		Индекс = 0;
		СледующаяЗапись = КоллекцияЭлементов.Получить(Индекс);
		Если НЕ СледующаяЗапись.Зафиксирован Тогда
			НовыйПорядок = СледующаяЗапись.Порядок;
		КонецЕсли;
	Иначе
		Индекс = КоллекцияЭлементов.Количество() - 1;
		СледующаяЗапись = КоллекцияЭлементов.Получить(Индекс);
		Если НЕ СледующаяЗапись.Зафиксирован Тогда
			НовыйПорядок = СледующаяЗапись.Порядок;
		КонецЕсли;
	КонецЕсли;
	
	Если НовыйПорядок = ТекущиеДанные.Порядок Тогда
		Возврат;
	КонецЕсли;
	
	ПереместитьЗадачу(Задача, НовыйПорядок);
	ОбновитьСписокНаКлиенте();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСписокДерево(Знач Список_Дерево, Знач Список_Таблица, Знач Группировать)
		
	ВнешняяТаблица = Новый ТаблицаЗначений;
	ВнешняяТаблица.Колонки.Добавить("Наименование", ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(500));
	ВнешняяТаблица.Колонки.Добавить("ТипЗадачиНаименование", ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(100));	
	ВнешняяТаблица.Колонки.Добавить("ДатаСоздания", Новый ОписаниеТипов("Дата"));	
	ВнешняяТаблица.Колонки.Добавить("ОценкаТрудозатрат", ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(5, 2));
	ВнешняяТаблица.Колонки.Добавить("Порядок", ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(5));
	ВнешняяТаблица.Колонки.Добавить("ПорядокПредставление", ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(5));
	ВнешняяТаблица.Колонки.Добавить("Зафиксирован", Новый ОписаниеТипов("Булево"));
	ВнешняяТаблица.Колонки.Добавить("Задача", Новый ОписаниеТипов("ДокументСсылка.Задача"));
	ВнешняяТаблица.Колонки.Добавить("UID", ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(50));
	ВнешняяТаблица.Колонки.Добавить("ИндексКартинки", ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(5));
	ВнешняяТаблица.Колонки.Добавить("Ожидание", ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(5));
	
	Для Каждого Строка Из Список_Таблица Цикл
		ЗаполнитьЗначенияСвойств(ВнешняяТаблица.Добавить(), Строка);
	КонецЦикла;
	
	// Инициализируем построитель и источник данных для него.
	ПостроительЗапроса = Новый ПостроительЗапроса;	
	ИсточникДанных = Новый ОписаниеИсточникаДанных(ВнешняяТаблица);
		
	КоллекцияЭлементов = Список_Дерево.ПолучитьЭлементы();

	Если Группировать Тогда		
		// Итоги по типу задачи
		ИсточникДанных.Колонки.ТипЗадачиНаименование.Измерение = Истина;
		// Присвоение источника данных построителю
		ПостроительЗапроса.ИсточникДанных = ИсточникДанных;
		ПостроительЗапроса.ЗаполнитьНастройки();

		// Порядок по типу задачи и порядку
		ПостроительЗапроса.Порядок.Добавить("ТипЗадачиНаименование", "ТипЗадачиНаименование");
		ПостроительЗапроса.Порядок.Добавить("ДатаСоздания", "ДатаСоздания");				
		ПостроительЗапроса.Выполнить();
		
		ВыборкаТип = ПостроительЗапроса.Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаТип.Следующий() Цикл					
			ЭлементДереваТип = КоллекцияЭлементов.Добавить();			
			UID = ОбщегоНазначенияВызовСервера.ХэшСумма(Строка(ВыборкаТип.ТипЗадачиНаименование), Истина);
			
			ЭлементДереваТип.UID = UID;
			ЭлементДереваТип.ЭтоГруппа = Истина;
			
			Выборка = ВыборкаТип.Выбрать();
			КоличествоЗадачВГруппе = 0;
			Пока Выборка.Следующий() Цикл		
				ЭлементДерева = ЭлементДереваТип.ПолучитьЭлементы();
				
				НовыйЭлементДерева = ЭлементДерева.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйЭлементДерева, Выборка);
				Если НовыйЭлементДерева.Зафиксирован Тогда
					НовыйЭлементДерева.ЗафиксированКартинка = БиблиотекаКартинок.ФиксированиеЗадачи;
				КонецЕсли;
				КоличествоЗадачВГруппе = КоличествоЗадачВГруппе + 1;
			КонецЦикла;
			// Формируем представление для группы дерева.
			ЭлементДереваТип.Наименование = СтрШаблон("%1 [%2]", ВыборкаТип.ТипЗадачиНаименование, КоличествоЗадачВГруппе);		
			
			ИндексНеОтображаемогоСтатуса = -1;
			ЭлементДереваТип.ИндексКартинки = ИндексНеОтображаемогоСтатуса;			
		КонецЦикла;
	Иначе	
		ПостроительЗапроса.ИсточникДанных = ИсточникДанных;
		// Упорядочивание по порядку в очереди.
		ПостроительЗапроса.Порядок.Добавить("ПорядокПредставление");
		
		ПостроительЗапроса.Выполнить();	
		Выборка = ПостроительЗапроса.Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл				
			НовыйЭлементДерева = КоллекцияЭлементов.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЭлементДерева, Выборка);
			Если НовыйЭлементДерева.Зафиксирован Тогда
				НовыйЭлементДерева.ЗафиксированКартинка = БиблиотекаКартинок.ФиксированиеЗадачи;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Список_Дерево;
	
КонецФункции

&НаКлиенте
Процедура Список_ВзятьНаСебя(Знач ИмяКоманды)
	
	ТекущиеДанные = Элементы.Список_Дерево.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = РаботаСПроцессамиВызовСервера.НазначитьЗадачуНаПользователя(ТекущиеДанные.Задача, , Истина);
	Если Результат.Успешно Тогда
		ОбновитьСписокНаКлиенте();
	Иначе
		Сообщить(Результат.Сообщение);
	КонецЕсли;
	
КонецПроцедуры

// Управление очередью

&НаКлиенте
Процедура ЗафиксироватьНаКлиенте()
	
	ТекущиеДанные = Элементы.Список_Дерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗафиксироватьНаСервере(ТекущиеДанные.Задача) Тогда
		ОбновитьСписокНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗафиксироватьНаСервере(Знач Задача)
	
	Возврат РегистрыСведений.ОчередьЗадач.Зафиксировать(Задача, Перечисления.ВидыОчереди.ОчередьГруппыТестирования);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПереместитьЗадачу(Знач Задача, Знач Порядок)
	
	Возврат РегистрыСведений.ОчередьЗадач.ИзменитьПорядок(Задача, Порядок, Перечисления.ВидыОчереди.ОчередьГруппыТестирования);
	
КонецФункции

&НаКлиенте
Процедура ГруппироватьПоТипам(Команда) 
	
	ГруппироватьПоТипам = НЕ ГруппироватьПоТипам;   
	Элементы.ГруппироватьПоТипам.Пометка = ГруппироватьПоТипам;
	ОбновитьСписокНаКлиенте(Ложь);                           
	
	НастройкиФормы.ГруппироватьПоТипам = ГруппироватьПоТипам;
	СохранитьНастройкиФормы(НастройкиФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие

&НаКлиенте                           
Процедура ЗавершитьНазначениеЗадачиСпискаНаПользователя(Знач Задача, Знач Пользователь)
	
	Результат = РаботаСПроцессамиВызовСервера.НазначитьЗадачуНаПользователя(Задача, Пользователь, Истина);
	
	Если Результат.Успешно Тогда
		ОбновитьСписокНаКлиенте();
	Иначе
		Сообщить(Результат.Сообщение);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОтборы(Результат, ДополнительныеНастройки) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;	
	
	НастройкиФормы.СписокСтатусов = Результат.ВыбранныеСтатусы;
	НастройкиФормы.СписокФилиалов = Результат.ВыбранныеФилиалы;
		
	ОбновитьСписокНаКлиенте();
	СохранитьНастройкиФормы(НастройкиФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСписокПользователейДляНазначения(Знач СписокПользователей)
	
	Идентификатор = ОбщегоНазначенияКлиентСервер.СтрУникальныйИдентификатор(ЭтотОбъект.УникальныйИдентификатор);
	
	Для Каждого Элемент Из СписокПользователей Цикл
		ИдентификаторПользователя = СтрЗаменить(Строка(Элемент.Значение.УникальныйИдентификатор()), "-", "_");
		
		НоваяКомандаМоиЗадачи = ЭтотОбъект.Команды.Добавить(СтрШаблон("СписокДерево_НазначитьНа_%1", ИдентификаторПользователя));
		НоваяКомандаМоиЗадачи.Заголовок = Элемент.Представление;
		НоваяКомандаМоиЗадачи.Действие = "Подключаемый_НазначитьЗадачуНаПользователя";
		НоваяКомандаМоиЗадачи.Отображение = ОтображениеКнопки.Текст;
		НоваяКомандаМоиЗадачи.Подсказка = СтрШаблон("Назначить выбранную задачу на %1", Элемент.Представление);
		
		ИмяЭлемента = СтрШаблон("СписокДерево_НазначитьНа%1_%2", Идентификатор, ИдентификаторПользователя);
		НоваяКнопкаМоиЗадачи = ЭтотОбъект.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), 
			Элементы.Список_Дерево_КонтекстноеМеню_СписокПользователей);
			
		НоваяКнопкаМоиЗадачи.ИмяКоманды = НоваяКомандаМоиЗадачи.Имя;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ИнициализацияПараметров()
	
	НастройкиФормы = СформироватьНастройкиФормы();
		
	Настройки = Новый Структура;
	Настройки.Вставить("НастройкиФормы", НастройкиФормы);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Настройки);
	ЗагрузитьСписокПользователейДляНазначения(НастройкиФормы.СписокПользователейДляНазначения);
		
КонецПроцедуры

&НаКлиенте
Процедура НазначитьЗадачуСпискаНаПользователя(Список, Команда, Знач ИмяДляЗамены)
	
	ТекущиеДанные = Список.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено ИЛИ Команда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторПользователя = СтрЗаменить(Команда.Имя, ИмяДляЗамены, "");
	ОтформатированныйИдентификатор = СтрЗаменить(ИдентификаторПользователя, "_", "-");
	УникальныйИдентификаторПользователя = Новый УникальныйИдентификатор(ОтформатированныйИдентификатор);
	Пользователь = СоответствиеПользователей.Получить(УникальныйИдентификаторПользователя);
	
	Задача = ТекущиеДанные.Задача;
		
	ДанныеОтсутствия = ПользователиВызовСервера.ДанныеОтсутствия(Пользователь);
	
	Если ДанныеОтсутствия.Отсутствует Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Форма", ЭтотОбъект);
		ДопПараметры.Вставить("Задача", Задача);
		ДопПараметры.Вставить("Пользователь", Пользователь);
		ДопПараметры.Вставить("ИмяСписка", Список.Имя);
		ДопПараметры.Вставить("ЭтоПулНаРазработку", Истина);
		
		ИнтерфейсПриложенияКлиент.ПодтвердитьВыборОтсутствующегоПользователя(Пользователь, ДанныеОтсутствия, ДопПараметры);
	Иначе
		ЗавершитьНазначениеЗадачиСпискаНаПользователя(Задача, Пользователь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьИнтерфейс()
	
	РазрешеноИзменениеПорядка = ПроверитьРольПользователя(ФилиалТестирование);	

	// Дополнительные кнопки
	Элементы.ПереместитьВНачало.Доступность = РазрешеноИзменениеПорядка;
	Элементы.ПереместитьВКонец.Доступность = РазрешеноИзменениеПорядка;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборЭлементов(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда		
		НастройкиФормы["СписокТипов"].ЗагрузитьЗначения(Результат);
		ОбновитьСписокНаКлиенте();
		СохранитьНастройкиФормы(НастройкиФормы);
	КонецЕсли;                                                       
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКартинкуКнопкиСписка(Знач ИмяЭлемента, Знач КоличествоВыбрано, Знач ВсегоЭлементов)
	
	Если КоличествоВыбрано = ВсегоЭлементов Тогда
		Картинка = БиблиотекаКартинок.СписокВыбора_ВыбранПолностью;
	ИначеЕсли КоличествоВыбрано = 0 Тогда
		Картинка = БиблиотекаКартинок.СписокВыбора_Пустой;
	Иначе
		Картинка = БиблиотекаКартинок.СписокВыбора_ВыбранЧастично;
	КонецЕсли;

	Элементы[ИмяЭлемента].Картинка = Картинка;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСчетчикиЭлементов() Экспорт
	
	// Получение выбранных значений для установки параметрами запроса
	Статусы = НастройкиФормы.СписокСтатусов;
	Филиалы = НастройкиФормы.СписокФилиалов;
	Типы = НастройкиФормы.СписокТипов;
	Счетчик = ПолучитьЗначенияСчетчиков(Филиалы, Статусы, Типы);
		
	Заголовок = "Разработка QA (" + Счетчик + ")";

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначенияСчетчиков(Знач ФилиалыТестирования, Знач Статусы, Знач Типы)
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Задача.Ссылка) КАК Количество
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	Задача.Статус В(&ВыбранныеСтатусы)
	|	И Задача.ВидЗадачи В(&ВыбранныеТипы)
	|	И Задача.Филиал В(&Филиал)
	|	И Задача.Назначена = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ВыбранныеТипы", Типы);
	Запрос.УстановитьПараметр("ВыбранныеСтатусы", Статусы);
	Запрос.УстановитьПараметр("Филиал", ФилиалыТестирования);

	Выборка = Запрос.Выполнить().Выбрать();
	Результат = 0;
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Количество;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКэшДополнительныхДанныхДляКлиента(Знач АдресВоВременномХранилище = "")
	
	ФилиалТестирование = Справочники.Пользователи.ПолучитьФилиалТестированияПользователя(ПараметрыСеанса.Филиал);
		
	ДанныеДляКлиента = Новый Соответствие;
	ДанныеДляКлиента.Вставить("ФилиалПользователя", ПараметрыСеанса.Филиал);
	ДанныеДляКлиента.Вставить("Статус_ВРаботе", Справочники.СтатусыОбъектов.ВРаботе);
	ДанныеДляКлиента.Вставить("Статус_Тестирование", Справочники.СтатусыОбъектов.Тестирование);
	ДанныеДляКлиента.Вставить("СписокТипов", ПолучитьСписокТипов(ФилиалТестирование));
	ДанныеДляКлиента.Вставить("СписокФилиаловQA", ПолучитьСписокФилиаловQA());
	
	Если ЭтоАдресВременногоХранилища(АдресВоВременномХранилище) Тогда	
		Настройки = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);	
		НастройкиФормы = Настройки.НастройкиФормы;
		
		ДанныеДляКлиента.Вставить("НастройкиФормы", НастройкиФормы);
	Иначе
		ДанныеДляКлиента.Вставить("НастройкиФормы", Неопределено);
	КонецЕсли;

	Возврат ДанныеДляКлиента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокСтатусов()
	
	ИсключаемыеСтатусы = Новый Массив;
	ИсключаемыеСтатусы.Добавить(Справочники.СтатусыОбъектов.РевьюТребований);
	ИсключаемыеСтатусы.Добавить(Справочники.СтатусыОбъектов.Отклонен);
	ИсключаемыеСтатусы.Добавить(Справочники.СтатусыОбъектов.Рассмотрен);
	ИсключаемыеСтатусы.Добавить(Справочники.СтатусыОбъектов.Решен);
	
	НеполныйСписокСтатусов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыОбъектов.Ссылка КАК Ссылка,
	|	СтатусыОбъектов.Представление КАК Представление
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|ГДЕ
	|	НЕ СтатусыОбъектов.Ссылка В (&ИсключаемыеСтатусы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыОбъектов.Порядок";
	
	Запрос.УстановитьПараметр("ИсключаемыеСтатусы", ИсключаемыеСтатусы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НеполныйСписокСтатусов.Добавить(Выборка.Ссылка, Выборка.Представление);
	КонецЦикла;
	
	Возврат НеполныйСписокСтатусов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокТипов(Знач ФилиалТестирование)
	
	ВидыЗадач = РегистрыСведений.ВидыЗадачФилиалов.ПолучитьВидыЗадач(ФилиалТестирование);
	
	СписокТипов = Новый СписокЗначений;
	
	// Добавим пустую ссылку - когда тип не указан
	СписокТипов.Добавить(Справочники.ВидыЗадач.ПустаяСсылка(), "Задачи без типа", Истина);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыЗадач.Ссылка КАК Ссылка,
	|	ВидыЗадач.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ВидыЗадач КАК ВидыЗадач
	|ГДЕ
	|	ВидыЗадач.Ссылка В(&ВидыЗадач)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("ВидыЗадач", ВидыЗадач);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		СписокТипов.Добавить(Выборка.Ссылка, Выборка.Наименование, Истина);
	КонецЦикла;
	
	Возврат СписокТипов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокФилиаловQA()
	
	Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Филиалы.Ссылка КАК Значение,
	|	Филиалы.Наименование КАК Представление
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|ГДЕ
	|	Филиалы.ТипФилиала = ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.QA)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьРольПользователя(Знач ФилиалТестирование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|ГДЕ
	|	Филиалы.Руководитель = &Пользователь
	|	И Филиалы.Ссылка = &ФилиалТестирование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|ГДЕ
	|	Филиалы.ЗаместительРуководителя = &Пользователь
	|	И Филиалы.Ссылка = &ФилиалТестирование";
	
	Запрос.УстановитьПараметр("ФилиалТестирование", ФилиалТестирование);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Возврат (НЕ РезультатЗапроса.Пустой() 
				ИЛИ УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("Администратор")
				ИЛИ УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("ИзменениеПорядкаЗадачВОчередиНаТестирование"));
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваСохраняемойНастройки()
	
	Возврат Новый Структура("КлючОбъекта, КлючНастроек", "Обработка.РазработкаQA", "НастройкиФормы");
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормы(Знач Настройки)
	
	СвойстваНастроек = СвойстваСохраняемойНастройки();
	
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(СвойстваНастроек.КлючОбъекта, 
		СвойстваНастроек.КлючНастроек, Настройки);
	
КонецПроцедуры

&НаСервере
Функция СформироватьНастройкиФормы()
	
	Перем ЗначениеНастройки;
		
	// Статусы тоже разделяем. В "Задачи за период" в списке необходимо отобразить
	// статусы Решен и Отклонен, в остальных инструментах нет.
	СписокСтатусов = ПолучитьСписокСтатусов();
	
	ФилиалТестирование = Справочники.Пользователи.ПолучитьФилиалТестированияПользователя(ПараметрыСеанса.Филиал);	
	СписокТипов = ПолучитьСписокТипов(ФилиалТестирование);
	СписокПользователейДляНазначения = УправлениеИнструментамиРазработки.ПолучитьСписокПользователейДляНазначения();
	
	СписокФилиалов = Новый СписокЗначений;
	СписокФилиалов.Добавить(ПараметрыСеанса.Филиал);
	
	// Создание пустой структуры настроек
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("СписокПользователейДляНазначения", СписокПользователейДляНазначения);
	
	НастройкиФормы.Вставить("ГруппироватьПоТипам", Ложь);
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Справочники.СтатусыОбъектов.Новый);
	
	НастройкиФормы.Вставить("СписокСтатусов", СписокСтатусов);
	НастройкиФормы.Вставить("СписокФилиалов", СписокФилиалов);
	НастройкиФормы.Вставить("СписокТипов", СписокТипов);
	
	// Параметры дерева
	НастройкиДерева = Новый Структура("ВыделеннаяСтрока, РазвернутыеСтроки, Направления",
		Неопределено, Новый Соответствие, Новый Соответствие);
		
	НастройкиФормы.Вставить("Список", Новый Структура("Дерево", НастройкиДерева));
	
	СвойстваНастройки = СвойстваСохраняемойНастройки();
	
	// Восстановление сохраненных параметров
	СохраненныеНастройки = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(
		СвойстваНастройки.КлючОбъекта, СвойстваНастройки.КлючНастроек);
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		
		// Перебор всех элементом структуры настроек. Если элемент найден в сохраненной
		// настройке, его значение присваивается исходному свойству. В противном случае
		// используется значение по-умолчанию.
		Для Каждого Настройка Из НастройкиФормы Цикл
			ИмяКлюча = Настройка.Ключ;
			
			// Если значение сохраненной настройки не существует
			Если НЕ СохраненныеНастройки.Свойство(ИмяКлюча, ЗначениеНастройки) Тогда
				Продолжить;
			КонецЕсли;
			
			// Если типы настроек соответствуют, присваиваем значение
			Если ТипЗнч(Настройка.Значение) = ТипЗнч(ЗначениеНастройки) Тогда
				НастройкиФормы.Вставить(ИмяКлюча, ЗначениеНастройки);
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	// Добавим настройки, которые не нужно восстанавливать из сохраненных.
	НастройкиФормы.Вставить("СписокСтатусов", СписокСтатусов);
	ГруппироватьПоТипам = НастройкиФормы.ГруппироватьПоТипам;
	
	Возврат НастройкиФормы;
	
КонецФункции

#Область ОбщиеМеханизмы_НастройкиДинамическихСписок

&НаКлиенте
Процедура ОткрытьФормуНастроекДинамическогоСписка(Команда)

	ПользовательскиеНастройки = Новый Структура;
	ПользовательскиеНастройки.Вставить("СписокФилиалов", НастройкиФормы.СписокФилиалов); 
	ПользовательскиеНастройки.Вставить("СписокСтатусов", НастройкиФормы.СписокСтатусов); 
	ПользовательскиеНастройки.Вставить("ГруппироватьПоТипам", НастройкиФормы.ГруппироватьПоТипам); 
		
	ПараметрыОткрытия = Новый Структура("КлючХранилища, ПользовательскиеНастройки", 
		СвойстваСохраняемойНастройки().КлючОбъекта, ПользовательскиеНастройки); 
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьСохранениеНастроек", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.НастройкиДинамическогоСписка", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры                                                             

&НаСервере
Процедура ОбновлениеПользовательскихНастроекДинамическогоСписка()
	
	Свойства = Новый Структура("КлючНастройкиСписка, ПользовательскиеНастройкиСписка");	
	
	Свойства.КлючНастройкиСписка = Новый Массив;
	Свойства.КлючНастройкиСписка.Добавить(СвойстваСохраняемойНастройки().КлючОбъекта);
	
	Свойства.ПользовательскиеНастройкиСписка = Новый Массив;
	Свойства.ПользовательскиеНастройкиСписка.Добавить(Элементы.ПользовательскиеНастройки);

	ОбщегоНазначенияВызовСервера.ПользовательскиеНастройкиДинамическогоСписка(
		Свойства.КлючНастройкиСписка, ВариантыНастроек, ЭтотОбъект,
		Свойства.ПользовательскиеНастройкиСписка);    
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСохранениеНастроек(Результат, ПараметрыОткрытия) Экспорт
	
	ОбновлениеПользовательскихНастроекДинамическогоСписка();
	
КонецПроцедуры

&НаСервере
Процедура ПрименениеНастройкиДинамическогоСписка(Знач Свойства, Знач Идентификатор)

	ОбщегоНазначенияВызовСервера.ПрименитьНастройкуДинамическогоСпискаНаСервере(
		Свойства.КлючНастройкиСписка, ВариантыНастроек, Идентификатор,
		Свойства.ДинамическийСписок.КомпоновщикНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкуДинамическогоСписка(Команда)
	
	Настройки = ОбщегоНазначенияВызовСервера.ПолучитьНастройкиХранилищеНастроекДинамическихСписков(
		СвойстваСохраняемойНастройки().КлючОбъекта, ВариантыНастроек, Команда.Имя);	 
	
	Если Настройки <> Неопределено Тогда	
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Настройки);
		ЗаполнитьЗначенияСвойств(НастройкиФормы, Настройки);  
		ОбновитьСписокНаКлиенте();
	КонецЕсли;		
	
КонецПроцедуры
 
#КонецОбласти  

#КонецОбласти
