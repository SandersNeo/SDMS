///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

// Дополнительные данные для хранения на клиенте
&НаКлиенте
Перем КэшДополнительныхДанных;

// Дополнительные параметры, которые использует клиент
&НаКлиенте
Перем НастройкиФормы;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ИнтеграцияДополнительныхПодсистем.НачатьЗамерВремени();
	
	ИнициализацияПараметров();

	ОбновляемыеТаблицы = Новый Массив;
	ОбновляемыеТаблицы.Добавить(Элементы.Список_Заявки.Имя);
	ОбновляемыеТаблицы.Добавить(Элементы.Список_Задачи.Имя);

	ИнструментыСервер.ПриСозданииНаСервере(ЭтотОбъект, ОбновляемыеТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
			
	// Единоразовое получение данных для клиента с сервера
	КэшДополнительныхДанных = ПолучитьКэшДополнительныхДанныхДляКлиента(АдресВоВременномХранилище);
		
	// Получение настроек формы с сервера
	НастройкиФормы = КэшДополнительныхДанных["НастройкиФормы"];
	КэшДополнительныхДанных.Удалить("НастройкиФормы");

	ИнструментыКлиент.ПриОткрытии(ЭтотОбъект);

	ИнтеграцияДополнительныхПодсистем.ЗакончитьЗамерВремени("СозданныеМной.ОткрытиеФормы", ВремяНачалаЗамера);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СписокСобытий = СтрРазделить(ИмяСобытия, ";");
	ЭтоМассив = СписокСобытий.Количество() > 1;
	Счетчик = 0;
	
	Для Каждого Событие Из СписокСобытий Цикл

		ПараметрСобытия = ?(ЭтоМассив, Параметр[Счетчик], Параметр);

		Если СобытияОповещенияКлиент.СобытиеОбновлениеСписковИнструментов(Событие) Тогда
			ИнструментыКлиент.УстановитьПризнакНеобходимостиОбновления(ЭтотОбъект);
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
	КонецЦикла;

	ИнструментыКлиент.ОбработкаОповещения(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	ИнструментыКлиент.ПриЗакрытии(ЗавершениеРаботы, УникальныйИдентификатор);

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// Созданные мной

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)

	ОбновитьДанныеИнструмента();

КонецПроцедуры

&НаКлиенте
Процедура Список_ЗаявкиВыбор(Эллемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список_Заявки.ТекущиеДанные;
	 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Заявка) Тогда
		ОткрытьЗначениеАсинх(ТекущиеДанные.Заявка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Список_ЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список_Задачи.ТекущиеДанные;
	 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Задача) Тогда
		ОткрытьЗначениеАсинх(ТекущиеДанные.Задача);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Список_ЗаявкиПриАктивизацииСтроки(Элемент)
	
	ВыделеннаяСтрока = НастройкиФормы.Список.Заявки.ВыделеннаяСтрока;
	УправлениеИнструментамиРазработкиКлиент.ОбработкаАктивизацииСтрокиДанныхФормы(Элемент, ВыделеннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура Список_ЗадачиПриАктивизацииСтроки(Элемент)
	
	ВыделеннаяСтрока = НастройкиФормы.Список.Задачи.ВыделеннаяСтрока;
	УправлениеИнструментамиРазработкиКлиент.ОбработкаАктивизацииСтрокиДанныхФормы(Элемент, ВыделеннаяСтрока);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура КопироватьВБуфер(Команда)
	
	Если ТекущийЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = Неопределено;
	
	Если ТекущийЭлемент.ТекущиеДанные <> Неопределено Тогда 
		
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		
		Если ТекущиеДанные.Свойство("Задача") Тогда
			ОбъектСсылка = ТекущиеДанные.Задача;
		ИначеЕсли ТекущиеДанные.Свойство("Заявка") Тогда
			ОбъектСсылка = ТекущиеДанные.Заявка;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		ОбщегоНазначенияКлиент.КопироватьНавигационнуюСсылкуВБуферОбмена(ОбъектСсылка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	ОбновитьДанныеИнструмента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВариантыСсылок(Команда)
	
	Если ТекущийЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = Неопределено;
	
	Если ТекущийЭлемент.ТекущиеДанные <> Неопределено Тогда 
		
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	
		Если ТекущиеДанные.Свойство("Задача") Тогда
			ОбъектСсылка = ТекущиеДанные.Задача;
		ИначеЕсли ТекущиеДанные.Свойство("Заявка") Тогда
			ОбъектСсылка = ТекущиеДанные.Заявка;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда	
		ИнтерфейсПриложенияКлиент.ОткрытьОкноНавигационнойСсылки(ОбъектСсылка, ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтборы(Команда)
			
	ПараметрыОткрытия = ИнтерфейсПриложенияКлиент.СформироватьПараметрыОткрытия();
	
	ПараметрыОткрытия.Системы.Значение = НастройкиФормы.СписокСистем;
	ПараметрыОткрытия.Системы.Использование = Истина;
	
	ИсключаемыеСтатусы = Новый Массив;
	ИсключаемыеСтатусы.Добавить(ПредопределенноеЗначение("Справочник.СтатусыОбъектов.РевьюТребований"));
	ИсключаемыеСтатусы.Добавить(ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Рассмотрен"));
	
	ПараметрыОткрытия.Статусы.Значение = НастройкиФормы.СписокСтатусов;
	ПараметрыОткрытия.Статусы.Использование = Истина;
	ПараметрыОткрытия.Статусы.Вставить("ИсключаемыеСтатусы", ИсключаемыеСтатусы);

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьОтборы", ЭтотОбъект);
	ИнтерфейсПриложенияКлиент.ОткрытьФормуНастройкиИнструментов(ЭтотОбъект, ПараметрыОткрытия, ОписаниеОповещения);

КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

&НаСервере
Процедура ИнициализацияПараметров()
	
	НастройкиФормы = СформироватьНастройкиФормы();
	
	Настройки = Новый Структура;
	Настройки.Вставить("НастройкиФормы", НастройкиФормы);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Настройки);
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Период.ДатаНачала    = НачалоМесяца(ТекущаяДата);
	Период.ДатаОкончания = КонецДня(ТекущаяДата);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОтборы(Результат, ДополнительныеНастройки) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;	
	
	НастройкиФормы.СписокСтатусов = Результат.ВыбранныеСтатусы;
	НастройкиФормы.СписокСистем = Результат.ВыбранныеСистемы;
		
	ОбновитьДанныеИнструмента();
	СохранитьНастройкиФормы(НастройкиФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбновлениеСписок_Заявки(Знач ПередаваемыеПараметры)

	МетодОбновления = "Обработки.СозданныеМной.ПолучитьДанныеСписок_Заявки";

	ПараметрыФонового = Новый Массив;
	ПараметрыФонового.Добавить(ПередаваемыеПараметры);

	ИнструментыКлиент.НачатьОбновлениеИнструмента(ЭтотОбъект, МетодОбновления, ПараметрыФонового,
		 Элементы.Список_Заявки.Имя, , "ОбработатьДанныеСписок_Заявки");

	Элементы.Период.ТолькоПросмотр = Истина;
	Элементы.ГруппаНастройки.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбновлениеСписок_Задачи(Знач ПередаваемыеПараметры)
	
	МетодОбновления = "Обработки.СозданныеМной.ПолучитьДанныеСписок_Задачи";
	
	ПараметрыФонового = Новый Массив;
	ПараметрыФонового.Добавить(ПередаваемыеПараметры);
	
	ИнструментыКлиент.НачатьОбновлениеИнструмента(ЭтотОбъект, МетодОбновления,
		ПараметрыФонового, Элементы.Список_Задачи.Имя, , "ОбработатьДанныеСписок_Задачи");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеИнструмента() Экспорт
	
	ИнструментыКлиент.ОбновлениеДанныхЗапущено(ЭтотОбъект);

	ПередаваемыеПараметры = Новый Структура;
	ПередаваемыеПараметры.Вставить("ВыбранныеСистемы", НастройкиФормы.СписокСистем);
	ПередаваемыеПараметры.Вставить("ВыбранныеСтатусы", НастройкиФормы.СписокСтатусов);
	ПередаваемыеПараметры.Вставить("Период", Период);

	ЗапуститьОбновлениеСписок_Заявки(ПередаваемыеПараметры);
	ЗапуститьОбновлениеСписок_Задачи(ПередаваемыеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеСписок_Заявки() Экспорт
	
	ИнструментыКлиент.ОбработатьОтложенноеОбновлениеИнструмента(ЭтотОбъект, Элементы.Список_Заявки.Имя, "Обработки.СозданныеМной.ПолучитьДанныеСписок_Заявки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеСписок_Задачи() Экспорт
	
	ИнструментыКлиент.ОбработатьОтложенноеОбновлениеИнструмента(ЭтотОбъект, Элементы.Список_Задачи.Имя, "Обработки.СозданныеМной.ПолучитьДанныеСписок_Задачи");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОбновленияИнструмента(Данные, ДополнительныеПараметры) Экспорт

	ДанныеФормы = ЭтотОбъект[ДополнительныеПараметры.ОбновляемаяТаблица];

	Если ДополнительныеПараметры.ОбновляемаяТаблица = "Список_Заявки" Тогда
		НастройкиСписка = НастройкиФормы.Список.Заявки;
	Иначе
		НастройкиСписка = НастройкиФормы.Список.Задачи;
	КонецЕсли;

	ИнструментыКлиент.ЗаполнитьДанныеИнструмента(ДанныеФормы, Данные, ДополнительныеПараметры.МетодОбновления);
	
	Элементы.Период.ТолькоПросмотр = Ложь;
	Элементы.ГруппаНастройки.Доступность = Истина;
	
	ИнструментыКлиент.ЗакончитьОбновлениеИнструмента(ЭтотОбъект, ДополнительныеПараметры, Данные.УИДЗамера);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКэшДополнительныхДанныхДляКлиента(Знач АдресВоВременномХранилище = "")
	
	ДанныеДляКлиента = Новый Соответствие;
	
	Если ЭтоАдресВременногоХранилища(АдресВоВременномХранилище) Тогда	
		Настройки = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);	
		НастройкиФормы = Настройки.НастройкиФормы;
		
		// Скопируем некоторые данные, которые не нужны в пользовательских настройках.
		ДанныеДляКлиента.Вставить("ПолныйСписокСистем", НастройкиФормы.ПолныйСписокСистем);
		ДанныеДляКлиента.Вставить("ПолныйСписокСтатусов", НастройкиФормы.ПолныйСписокСтатусов);
		
		НастройкиФормы.Удалить("ПолныйСписокСистем");
		НастройкиФормы.Удалить("ПолныйСписокСтатусов");
		
		ДанныеДляКлиента.Вставить("НастройкиФормы", НастройкиФормы);
	Иначе
		ДанныеДляКлиента.Вставить("НастройкиФормы", Неопределено);
	КонецЕсли;

	Возврат ДанныеДляКлиента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокСтатусов()
	
	ИсключаемыеСтатусы = Новый Массив;
	ИсключаемыеСтатусы.Добавить(Справочники.СтатусыОбъектов.РевьюТребований);
	ИсключаемыеСтатусы.Добавить(Справочники.СтатусыОбъектов.Рассмотрен);
		
	ПолныйСписокСтатусов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыОбъектов.Ссылка КАК Ссылка,
	|	СтатусыОбъектов.Представление КАК Представление
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|ГДЕ
	|	НЕ СтатусыОбъектов.Ссылка В (&ИсключаемыеСтатусы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыОбъектов.Порядок";
	
	Запрос.УстановитьПараметр("ИсключаемыеСтатусы", ИсключаемыеСтатусы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПолныйСписокСтатусов.Добавить(Выборка.Ссылка, Выборка.Представление);
	КонецЦикла;
		
	Возврат ПолныйСписокСтатусов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокТипов(Знач ФилиалТестирование)
	
	ВидыЗадач = РегистрыСведений.ВидыЗадачФилиалов.ПолучитьВидыЗадач(ФилиалТестирование);
	
	СписокТипов = Новый СписокЗначений;
	
	// Добавим пустую ссылку - когда тип не указан
	СписокТипов.Добавить(Справочники.ВидыЗадач.ПустаяСсылка(), "Задачи без типа", Истина);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыЗадач.Ссылка КАК Ссылка,
	|	ВидыЗадач.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ВидыЗадач КАК ВидыЗадач
	|ГДЕ
	|	ВидыЗадач.Ссылка В(&ВидыЗадач)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("ВидыЗадач", ВидыЗадач);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		СписокТипов.Добавить(Выборка.Ссылка, Выборка.Наименование, Истина);
	КонецЦикла;
	
	Возврат СписокТипов;
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваСохраняемойНастройки()
	
	Возврат Новый Структура("КлючОбъекта, КлючНастроек", "Обработка.СозданныеМной", "НастройкиФормы");
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормы(Знач Настройки)
	
	СвойстваНастроек = СвойстваСохраняемойНастройки();
	
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(СвойстваНастроек.КлючОбъекта, 
		СвойстваНастроек.КлючНастроек, Настройки);
	
КонецПроцедуры

&НаСервере
Функция СформироватьНастройкиФормы()
	
	Перем ЗначениеНастройки;
		
	СписокСистем = УправлениеИнструментамиРазработкиПовтИсп.ПолучитьСписокДоступныхСистемQA();
	СписокСтатусов = ПолучитьСписокСтатусов();
		
	ФилиалТестирование = Справочники.Пользователи.ПолучитьФилиалТестированияПользователя(ПараметрыСеанса.Филиал);	
	СписокТипов = ПолучитьСписокТипов(ФилиалТестирование);
	СписокПользователейДляНазначения = УправлениеИнструментамиРазработки.ПолучитьСписокПользователейДляНазначения();
	
	// Создание пустой структуры настроек
	НастройкиФормы = Новый Структура;
    НастройкиФормы.Вставить("СписокСистем", СписокСистем);
	НастройкиФормы.Вставить("СписокСтатусов", СписокСтатусов);
	
	// Параметры дерева
	НастройкиДерева = Новый Структура("ВыделеннаяСтрока, РазвернутыеСтроки, Направления",
		Неопределено, Новый Соответствие, Новый Соответствие);
		
	НастройкиТаблицы = Новый Структура("ВыделеннаяСтрока", Неопределено);
	
	НастройкиФормы.Вставить("Список", Новый Структура("Задачи, Заявки", НастройкиТаблицы, НастройкиТаблицы));
	
	СвойстваНастройки = СвойстваСохраняемойНастройки();
	
	// Восстановление сохраненных параметров
	СохраненныеНастройки = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(
		СвойстваНастройки.КлючОбъекта, СвойстваНастройки.КлючНастроек);
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		
		// Перебор всех элементом структуры настроек. Если элемент найден в сохраненной
		// настройке, его значение присваивается исходному свойству. В противном случае
		// используется значение по-умолчанию.
		Для Каждого Настройка Из НастройкиФормы Цикл
			ИмяКлюча = Настройка.Ключ;
			
			// Если значение сохраненной настройки не существует
			Если НЕ СохраненныеНастройки.Свойство(ИмяКлюча, ЗначениеНастройки) Тогда
				Продолжить;
			КонецЕсли;
			
			// Если типы настроек соответствуют, присваиваем значение
			Если ТипЗнч(Настройка.Значение) = ТипЗнч(ЗначениеНастройки) Тогда
				НастройкиФормы.Вставить(ИмяКлюча, ЗначениеНастройки);
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	НастройкиФормы.Вставить("ПолныйСписокСистем", СписокСистем);
	НастройкиФормы.Вставить("ПолныйСписокСтатусов", СписокСтатусов);
	
	Возврат НастройкиФормы;
	
КонецФункции

#Область ОбщиеМеханизмы_НастройкиДинамическихСписок

&НаКлиенте
Процедура ОткрытьФормуНастроекДинамическогоСписка(Команда)

	ПользовательскиеНастройки = Новый Структура;
	ПользовательскиеНастройки.Вставить("СписокСистем", НастройкиФормы.СписокСистем); 
	ПользовательскиеНастройки.Вставить("СписокСтатусов", НастройкиФормы.СписокСтатусов); 
		
	ПараметрыОткрытия = Новый Структура("КлючХранилища, ПользовательскиеНастройки", 
		СвойстваСохраняемойНастройки().КлючОбъекта, ПользовательскиеНастройки); 
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьСохранениеНастроек", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.НастройкиДинамическогоСписка", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры                                                             

&НаСервере
Процедура ОбновлениеПользовательскихНастроекДинамическогоСписка()
	
	Свойства = Новый Структура("КлючНастройкиСписка, ПользовательскиеНастройкиСписка");	
	
	Свойства.КлючНастройкиСписка = Новый Массив;
	Свойства.КлючНастройкиСписка.Добавить(СвойстваСохраняемойНастройки().КлючОбъекта);
	
	Свойства.ПользовательскиеНастройкиСписка = Новый Массив;
	Свойства.ПользовательскиеНастройкиСписка.Добавить(Элементы.ПользовательскиеНастройки);

	ОбщегоНазначенияВызовСервера.ПользовательскиеНастройкиДинамическогоСписка(
		Свойства.КлючНастройкиСписка, ВариантыНастроек, ЭтотОбъект,
		Свойства.ПользовательскиеНастройкиСписка);    
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСохранениеНастроек(Результат, ПараметрыОткрытия) Экспорт
	
	ОбновлениеПользовательскихНастроекДинамическогоСписка();
	
КонецПроцедуры

&НаСервере
Процедура ПрименениеНастройкиДинамическогоСписка(Знач Свойства, Знач Идентификатор)

	ОбщегоНазначенияВызовСервера.ПрименитьНастройкуДинамическогоСпискаНаСервере(
		Свойства.КлючНастройкиСписка, ВариантыНастроек, Идентификатор,
		Свойства.ДинамическийСписок.КомпоновщикНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкуДинамическогоСписка(Команда)
	
	Настройки = ОбщегоНазначенияВызовСервера.ПолучитьНастройкиХранилищеНастроекДинамическихСписков(
		СвойстваСохраняемойНастройки().КлючОбъекта, ВариантыНастроек, Команда.Имя);	 
	
	Если Настройки <> Неопределено Тогда	
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Настройки);
		ЗаполнитьЗначенияСвойств(НастройкиФормы, Настройки);  
		ОбновитьДанныеИнструмента();
	КонецЕсли;		
	
КонецПроцедуры
 
#КонецОбласти

#КонецОбласти
