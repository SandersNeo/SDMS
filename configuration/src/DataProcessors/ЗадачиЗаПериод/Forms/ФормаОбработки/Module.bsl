///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

// Дополнительные параметры, которые использует клиент
&НаКлиенте
Перем НастройкиФормы;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ИнтеграцияДополнительныхПодсистем.НачатьЗамерВремени();

	НастройкиФормы = СформироватьНастройкиФормы(); 
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(НастройкиФормы);
	
	Период = НастройкиФормы.Период;
	
	ЗадачиЗаПериод_ОбработатьВыборНастроек(НастройкиФормы.ПрочиеОтборы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастройкиФормы = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	ИнтеграцияДополнительныхПодсистем.ЗакончитьЗамерВремени("ЗадачиЗаПериод.ОткрытиеФормы", ВремяНачалаЗамера);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВсеЗадачиЗаПериодВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработатьОткрытиеЗадачи(Элементы.ВсеЗадачиЗаПериод.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ОбновитьСписок_ЗадачиЗаПериод();    
	
	НастройкиФормы.Период = Период;
	СохранитьНастройкиФормы(НастройкиФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура КопироватьВБуфер(Команда)
	
	Если ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;                              
	
	ОбъектСсылка = Неопределено;
	
	Если ТекущийЭлемент.ТекущиеДанные <> Неопределено Тогда 
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		
		Если ТекущиеДанные.Свойство("Задача") Тогда
			ОбъектСсылка = ТекущиеДанные.Задача;
		КонецЕсли; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		ОбщегоНазначенияКлиент.КопироватьНавигационнуюСсылкуВБуферОбмена(ОбъектСсылка);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокНаКлиенте(Команда)
		
	ОбновитьСписок_ЗадачиЗаПериод();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВариантыСсылок(Команда)
	
	Если ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;                              
	
	ОбъектСсылка = Неопределено;
	
	Если ТекущийЭлемент.ТекущиеДанные <> Неопределено Тогда 		
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		
		Если ТекущиеДанные.Свойство("Задача") Тогда
			ОбъектСсылка = ТекущиеДанные.Задача;
		КонецЕсли; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		ИнтерфейсПриложенияКлиент.ОткрытьОкноНавигационнойСсылки(ОбъектСсылка, ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти	

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьСписок_ЗадачиЗаПериод()
	
	ТекущиеДанные = Элементы.ВсеЗадачиЗаПериод.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущаяЗадачаСписка = ТекущиеДанные.Задача;
	Иначе
		ТекущаяЗадачаСписка = Неопределено;
	КонецЕсли;
	
	ОбновитьСписок_ЗадачиЗаПериодНаСервере(ТекущаяЗадачаСписка);

КонецПроцедуры

&НаСервере
Процедура ОбновитьСписок_ЗадачиЗаПериодНаСервере(Знач ТекущаяЗадачаСписка = Неопределено)
	
	ИдентификаторСтроки = Неопределено;

	ВсеЗадачиЗаПериод.Параметры.УстановитьЗначениеПараметра("НачалоПериода", Период.ДатаНачала);
	ВсеЗадачиЗаПериод.Параметры.УстановитьЗначениеПараметра("КонецПериода", Период.ДатаОкончания);
	ВсеЗадачиЗаПериод.Параметры.УстановитьЗначениеПараметра("Исполнитель", ПараметрыСеанса.ТекущийПользователь);
	
	Если ЗначениеЗаполнено(ТекущаяЗадачаСписка) Тогда
		МассивНайденныхСтрок = Список_ЗадачиЗаПериод.НайтиСтроки(Новый Структура("Задача", ТекущаяЗадачаСписка));
		
		Если МассивНайденныхСтрок.Количество() > 0 Тогда
			ИдентификаторСтроки = МассивНайденныхСтрок[0].ПолучитьИдентификатор();	
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
		Элементы.Список_ЗадачиЗаПериод.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОткрытиеЗадачи(Знач ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Задача = ТекущиеДанные.Задача;
	Если ЗначениеЗаполнено(Задача) Тогда
		ТипОбъекта = ТипЗнч(Задача);
		
		Если ТипОбъекта = Тип("ДокументСсылка.Задача") Тогда
			ФормаОбъекта = "Документ.Задача.ФормаОбъекта";
		Иначе
			ФормаОбъекта = "Документ.ВнутренниеТрудозатраты.ФормаОбъекта";
		КонецЕсли;
		
		ОткрытьФорму(ФормаОбъекта, Новый Структура("Ключ", Задача));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиЗаПериод_ОткрытьФормуОтбора(Команда)
	
	ПараметрыОткрытия = ИнтерфейсПриложенияКлиент.СформироватьПараметрыОткрытия();
		
	ПараметрыОткрытия.ПрочиеОтборы.Значение = НастройкиФормы.ПрочиеОтборы;
	ПараметрыОткрытия.ПрочиеОтборы.Использование = Истина;
	
	ПараметрыОткрытия.НастройкиПрочиеОтборы = "Обработки.ЗадачиЗаПериод.ПолучитьНастройкуПрочихОтборов()";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗадачиЗаПериод_ЗавершитьВыборНастроек", ЭтотОбъект);
	ИнтерфейсПриложенияКлиент.ОткрытьФормуНастройкиИнструментов(ЭтотОбъект, ПараметрыОткрытия, ОписаниеОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗадачиЗаПериод_ЗавершитьВыборНастроек(Результат, ДополнительныеНастройки) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиФормы.ПрочиеОтборы = Результат.ПрочиеОтборы;
	
	ЗадачиЗаПериод_ОбработатьВыборНастроек(Результат.ПрочиеОтборы);
	СохранитьНастройкиФормы(НастройкиФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗадачиЗаПериод_ОбработатьВыборНастроек(Отборы)
	
	ВсеЗадачиЗаПериод.Отбор.Элементы.Очистить();
	
	Для Каждого Отбор Из Отборы Цикл
		НовыйОтбор = ВсеЗадачиЗаПериод.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.Использование = Отбор.Значение.Использование;
		НовыйОтбор.ВидСравнения = Отбор.Значение.ВидСравнения;
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Отбор.Ключ);
		НовыйОтбор.ПравоеЗначение = Отбор.Значение.ПравоеЗначение;
	КонецЦикла;
	
	ОбновитьСписок_ЗадачиЗаПериодНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормы(Знач Настройки)
	
	СвойстваНастроек = СвойстваСохраняемойНастройки();
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(СвойстваНастроек.КлючОбъекта, СвойстваНастроек.КлючНастроек, Настройки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СвойстваСохраняемойНастройки()
	
	Возврат Новый Структура("КлючОбъекта, КлючНастроек", "Обработка.ЗадачиЗаПериод", "НастройкиФормы");
	
КонецФункции

&НаСервере
Функция СформироватьНастройкиФормы()
	
	Перем ЗначениеНастройки;
	
	// Создание пустой структуры настроек
	НастройкиФормы = Новый Структура;
	// Общие настройки
	НастройкиФормы.Вставить("ПрочиеОтборы", Новый Структура);
	
	ПериодПоУмолчанию = Новый СтандартныйПериод;
	ПериодПоУмолчанию.Вариант = ВариантСтандартногоПериода.ЭтотМесяц;
	
	НастройкиФормы.Вставить("Период", ПериодПоУмолчанию);
	
	СвойстваНастройки = СвойстваСохраняемойНастройки();
	
	// Восстановление сохраненных параметров
	СохраненныеНастройки = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(
		СвойстваНастройки.КлючОбъекта, СвойстваНастройки.КлючНастроек);
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		
		// Перебор всех элементом структуры настроек. Если элемент найден в сохраненной
		// настройке, его значение присваивается исходному свойству. В противном случае
		// используется значение по-умолчанию.
		Для Каждого Настройка Из НастройкиФормы Цикл
			ИмяКлюча = Настройка.Ключ;
			
			// Если значение сохраненной настройки не существует
			Если НЕ СохраненныеНастройки.Свойство(ИмяКлюча, ЗначениеНастройки) Тогда
				Продолжить;
			КонецЕсли;
			
			// Если типы настроек соответствуют, присваиваем значение
			Если ТипЗнч(Настройка.Значение) = ТипЗнч(ЗначениеНастройки) Тогда
				НастройкиФормы.Вставить(ИмяКлюча, ЗначениеНастройки);
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	Возврат НастройкиФормы;
	
КонецФункции

#КонецОбласти	
