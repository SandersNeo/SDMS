///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура ПолучитьДанныеСписок_МоиЗадачи_ПулНаТестирование(НастройкиОтбора, АдресРезультата, УИДЗамера) Экспорт
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ДанныеДерева = СформироватьСписок_МоиЗадачи_ПулНаТестирование(НастройкиОтбора);
	ИнструментыСервер.ОповеститьИнструментОбОбновлении(ДанныеДерева, АдресРезультата, УИДЗамера);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремениТехнологический("Обработки.МоиЗадачиQA.ПолучитьДанныеСписок_МоиЗадачи_ПулНаТестирование.ВыполнениеФонового",
		ВремяНачала, , Строка(УИДЗамера));
	
КонецПроцедуры

Процедура ПолучитьДанныеЗадачиНаМнеДерево(НастройкиСписка, АдресРезультата, УИДЗамера) Экспорт
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ДанныеДерева = СформироватьСписокЗадачиНаМнеДерево(НастройкиСписка);
	ИнструментыСервер.ОповеститьИнструментОбОбновлении(ДанныеДерева, АдресРезультата, УИДЗамера);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремениТехнологический("Обработки.МоиЗадачиQA.ПолучитьДанныеЗадачиНаМнеДерево.ВыполнениеФонового",
		ВремяНачала, , Строка(УИДЗамера));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

Функция СформироватьСписокЗадачиНаМнеДерево(НастройкиСписка)
	
	КолонкиИнструмента = Новый Массив;
	
	КолонкиИнструмента.Добавить("СтатусПредставление");
	КолонкиИнструмента.Добавить("СистемаПредставление");
	КолонкиИнструмента.Добавить("ВремяНаМне");
	КолонкиИнструмента.Добавить("Статус");
	КолонкиИнструмента.Добавить("Задача");
	КолонкиИнструмента.Добавить("UID");
	КолонкиИнструмента.Добавить("ИндексКартинки");
	КолонкиИнструмента.Добавить("ЭтоГруппа");
	КолонкиИнструмента.Добавить("ДатаНачала");
	КолонкиИнструмента.Добавить("ГруппаЗаказчиков");
	КолонкиИнструмента.Добавить("Заказчик");
	КолонкиИнструмента.Добавить("Продукт");
	КолонкиИнструмента.Добавить("ПлановоеВремя");
	КолонкиИнструмента.Добавить("ФактическоеВремя");
	КолонкиИнструмента.Добавить("ПлановоеВремяТестирования");
	КолонкиИнструмента.Добавить("ФактическоеВремяТестирования");
	КолонкиИнструмента.Добавить("Разработчик");
	КолонкиИнструмента.Добавить("Наименование");
	
	Дерево = Новый ДеревоЗначений;
	Для Каждого Колонка Из КолонкиИнструмента Цикл
		Дерево.Колонки.Добавить(Колонка);
	КонецЦикла;

	ТекущаяДата = ТекущаяДатаСеанса();
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	#Область ТекстЗапроса
	ПостроительЗапроса.Текст =
	"ВЫБРАТЬ
	|	ДокументЗадача.Ссылка КАК Задача,
	|	ДокументЗадача.Номер КАК Номер,
	|	ДокументЗадача.Наименование КАК Наименование,
	|	ДокументЗадача.Статус КАК Статус,
	|	ДокументЗадача.Назначена КАК Назначена,
	|	ДокументЗадача.СистемаУчета КАК Система,
	|	ЕСТЬNULL(Пользователи.ФИО, """") КАК Заказчик,
	|	ДокументЗадача.ОбъектОснование КАК ОбъектОснование,
	|	ПРЕДСТАВЛЕНИЕ(ДокументЗадача.Статус) КАК СтатусПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ДокументЗадача.СистемаУчета) КАК СистемаПредставление,
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексКартинки,
	|	СтатусыОбъектов.Ссылка КАК СтатусДляСоединения
	|ПОМЕСТИТЬ ОтобранныеЗадачи
	|ИЗ
	|	Документ.Задача КАК ДокументЗадача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ДокументЗадача.Статус = СтатусыОбъектов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ДокументЗадача.Заказчик = Пользователи.Ссылка
	|ГДЕ
	|	ДокументЗадача.Назначена = &Пользователь
	|	И НЕ ДокументЗадача.Статус В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|{ГДЕ
	|	ДокументЗадача.Статус КАК Статус}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Задача,
	|	Статус,
	|	Назначена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеЗадачи.Задача КАК Задача,
	|	СУММА(Трудозатраты.Затрата) КАК Затрата,
	|	СУММА(ВЫБОР
	|			КОГДА Трудозатраты.РольПользователя = ЗНАЧЕНИЕ(Справочник.РолиПользователей.Тестировщик)
	|				ТОГДА Трудозатраты.Затрата
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЗатратаТестирование
	|ПОМЕСТИТЬ ФактическиеТрудозатраты
	|ИЗ
	|	ОтобранныеЗадачи КАК ОтобранныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК Трудозатраты
	|		ПО ОтобранныеЗадачи.Задача = Трудозатраты.Объект
	|			И (Трудозатраты.ITСтруктура)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтобранныеЗадачи.Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеЗадачи.Задача КАК Задача,
	|	ОтобранныеЗадачи.Номер КАК Номер,
	|	ОтобранныеЗадачи.Наименование КАК Наименование,
	|	ОтобранныеЗадачи.Статус КАК Статус,
	|	ОтобранныеЗадачи.Система КАК Система,
	|	ОтобранныеЗадачи.СтатусПредставление КАК СтатусПредставление,
	|	ОтобранныеЗадачи.СистемаПредставление КАК СистемаПредставление,
	|	ОтобранныеЗадачи.ИндексКартинки КАК ИндексКартинки,
	|	ОтобранныеЗадачи.Заказчик КАК Заказчик,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СистемаРазработки.ГруппаЗаказчиков) КАК ГруппаЗаказчиков,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ЗаявкаНаРазработку.Продукт) КАК Продукт,
	|	ЕСТЬNULL(ПланируемыеТрудозатратыРазработка.Трудозатраты, 0) КАК ПлановоеВремя,
	|	ЕСТЬNULL(ФактическиеТрудозатраты.Затрата, 0) КАК ФактическоеВремя,
	|	ЕСТЬNULL(ПланируемыеТрудозатратыТестирование.Трудозатраты, 0) КАК ПлановоеВремяТестирования,
	|	ЕСТЬNULL(ФактическиеТрудозатраты.ЗатратаТестирование, 0) КАК ФактическоеВремяТестирования,
	|	ЕСТЬNULL(СтатистикаЗадач.Период, &ТекущаяДата) КАК ДатаНачала
	|ПОМЕСТИТЬ ЗадачиИПериод
	|ИЗ
	|	ОтобранныеЗадачи КАК ОтобранныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО ОтобранныеЗадачи.ОбъектОснование = ЗаявкаНаРазработку.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку.СистемыРазработки КАК СистемаРазработки
	|		ПО (ЗаявкаНаРазработку.Ссылка = СистемаРазработки.Ссылка)
	|			И ОтобранныеЗадачи.Система = СистемаРазработки.Система
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатратыРазработка
	|		ПО ОтобранныеЗадачи.Задача = ПланируемыеТрудозатратыРазработка.Объект
	|			И (ПланируемыеТрудозатратыРазработка.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатратыТестирование
	|		ПО ОтобранныеЗадачи.Задача = ПланируемыеТрудозатратыТестирование.Объект
	|			И (ПланируемыеТрудозатратыТестирование.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Тестирование))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
	|		ПО ОтобранныеЗадачи.Задача = ФактическиеТрудозатраты.Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатистикаСтатусовНазначенныхЗадач.СрезПоследних(
	|				&ТекущаяДата,
	|				(Задача, Статус, Пользователь) В
	|					(ВЫБРАТЬ
	|						ОтобранныеЗадачи.Задача,
	|						ОтобранныеЗадачи.Статус,
	|						ОтобранныеЗадачи.Назначена КАК Пользователь
	|					ИЗ
	|						ОтобранныеЗадачи КАК ОтобранныеЗадачи)) КАК СтатистикаЗадач
	|		ПО ОтобранныеЗадачи.Задача = СтатистикаЗадач.Задача
	|			И ОтобранныеЗадачи.СтатусДляСоединения = СтатистикаЗадач.Статус
	|			И ОтобранныеЗадачи.Назначена = СтатистикаЗадач.Пользователь
	|		{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Продукты КАК Продукты
	|		ПО (ЗаявкаНаРазработку.Продукт = Продукты.Ссылка)}
	|{ГДЕ
	|	ОтобранныеЗадачи.Система КАК Система,
	|	(ВЫБОР
	|			КОГДА НЕ Продукты.Ссылка ЕСТЬ NULL
	|				ТОГДА Продукты.Ссылка
	|			ИНАЧЕ ЕСТЬNULL(СистемаРазработки.ГруппаЗаказчиков, ЗНАЧЕНИЕ(Справочник.ГруппыЗаказчиковНаправлений.ПустаяСсылка))
	|		КОНЕЦ) КАК СписокПродуктГруппаЗаказчиков}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗадачиИПериод.Задача КАК Задача,
	|	ЕСТЬNULL(ЛичныеДелаСрезПоследних.Сотрудник, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Исполнитель
	|ПОМЕСТИТЬ ВсеИсполнителиЗадач
	|ИЗ
	|	ЗадачиИПериод КАК ЗадачиИПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗадач КАК СвойстваЗадач
	|		ПО ЗадачиИПериод.Задача = СвойстваЗадач.Объект
	|			И (СвойстваЗадач.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.ВРаботе))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (СвойстваЗадач.Исполнитель = Пользователи.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
	|		ПО (Пользователи.Должность = Должности.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛичныеДела.СрезПоследних(&ТекущаяДата, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаСрезПоследних
	|		ПО (Пользователи.Ссылка = ЛичныеДелаСрезПоследних.Сотрудник)
	|			И (ЕСТЬNULL(Должности.РольВОтделеIT, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Справочник.РолиПользователей.Тестировщик))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеИсполнителиЗадач.Задача КАК Задача,
	|	ВсеИсполнителиЗадач.Исполнитель КАК Исполнитель
	|ПОМЕСТИТЬ ОтобранныеЗадачиПоИсполнителям
	|ИЗ
	|	ВсеИсполнителиЗадач КАК ВсеИсполнителиЗадач
	|{ГДЕ
	|	ВсеИсполнителиЗадач.Исполнитель КАК Исполнитель}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтобранныеЗадачиПоИсполнителям.Задача КАК Задача
	|ПОМЕСТИТЬ КонечныйСписокЗадач
	|ИЗ
	|	ОтобранныеЗадачиПоИсполнителям КАК ОтобранныеЗадачиПоИсполнителям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнутренниеТрудозатраты.Ссылка КАК Задача,
	|	ВнутренниеТрудозатраты.Номер КАК Номер,
	|	ВнутренниеТрудозатраты.Наименование КАК Наименование,
	|	ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Новый) КАК Статус,
	|	ВнутренниеТрудозатраты.Дата КАК ДатаНачала,
	|	""Новый"" КАК СтатусПредставление,
	|	&ИндексКартинкиВнутренниеТрудозатраты КАК ИндексКартинки
	|ПОМЕСТИТЬ ВнутренниеТрудозатраты
	|ИЗ
	|	Документ.ВнутренниеТрудозатраты КАК ВнутренниеТрудозатраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиВнутреннихТрудозатрат КАК УчастникиВнутреннихТрудозатрат
	|		ПО (УчастникиВнутреннихТрудозатрат.Объект = ВнутренниеТрудозатраты.Ссылка)
	|ГДЕ
	|	УчастникиВнутреннихТрудозатрат.Пользователь = &Пользователь
	|	И УчастникиВнутреннихТрудозатрат.Активный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ЗадачиИПериод.ДатаНачала) КАК МинимальнаяДата,
	|	&ТекущаяДата КАК МаксимальнаяДата
	|ПОМЕСТИТЬ ОграниченияДляКалендаря
	|ИЗ
	|	ЗадачиИПериод КАК ЗадачиИПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонечныйСписокЗадач.Задача КАК Задача,
	|	Пользователи.ФИО КАК Исполнитель
	|ИЗ
	|	КонечныйСписокЗадач КАК КонечныйСписокЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеИсполнителиЗадач КАК ВсеИсполнителиЗадач
	|		ПО КонечныйСписокЗадач.Задача = ВсеИсполнителиЗадач.Задача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (ВсеИсполнителиЗадач.Исполнитель = Пользователи.Ссылка)
	|ГДЕ
	|	ВсеИсполнителиЗадач.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроизводственныйКалендарь.ДатаКалендаря КАК Дата,
	|	ПроизводственныйКалендарь.ВидДня КАК ВидДня
	|ИЗ
	|	РегистрСведений.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
	|	ОграниченияДляКалендаря КАК ОграниченияДляКалендаря
	|ГДЕ
	|	ПроизводственныйКалендарь.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|	И НАЧАЛОПЕРИОДА(ПроизводственныйКалендарь.ДатаКалендаря, ДЕНЬ) >= НАЧАЛОПЕРИОДА(ОграниченияДляКалендаря.МинимальнаяДата, ДЕНЬ)
	|	И НАЧАЛОПЕРИОДА(ПроизводственныйКалендарь.ДатаКалендаря, ДЕНЬ) <= НАЧАЛОПЕРИОДА(ОграниченияДляКалендаря.МаксимальнаяДата, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиИПериод.Задача КАК Задача,
	|	ЗадачиИПериод.Номер КАК Номер,
	|	ЗадачиИПериод.Наименование КАК Наименование,
	|	ЗадачиИПериод.Статус КАК Статус,
	|	ЗадачиИПериод.Система КАК Система,
	|	ЗадачиИПериод.СтатусПредставление КАК СтатусПредставление,
	|	ЗадачиИПериод.СистемаПредставление КАК СистемаПредставление,
	|	ЗадачиИПериод.ИндексКартинки КАК ИндексКартинки,
	|	ЗадачиИПериод.Заказчик КАК Заказчик,
	|	ЗадачиИПериод.ГруппаЗаказчиков КАК ГруппаЗаказчиков,
	|	ЗадачиИПериод.Продукт КАК Продукт,
	|	ЗадачиИПериод.ПлановоеВремя КАК ПлановоеВремя,
	|	ЗадачиИПериод.ФактическоеВремя КАК ФактическоеВремя,
	|	ЗадачиИПериод.ПлановоеВремяТестирования КАК ПлановоеВремяТестирования,
	|	ЗадачиИПериод.ФактическоеВремяТестирования КАК ФактическоеВремяТестирования,
	|	ЗадачиИПериод.ДатаНачала КАК ДатаНачала
	|ИЗ
	|	ЗадачиИПериод КАК ЗадачиИПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КонечныйСписокЗадач КАК КонечныйСписокЗадач
	|		ПО (КонечныйСписокЗадач.Задача = ЗадачиИПериод.Задача)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнутренниеТрудозатраты.Задача,
	|	ВнутренниеТрудозатраты.Номер,
	|	ВнутренниеТрудозатраты.Наименование,
	|	ВнутренниеТрудозатраты.Статус,
	|	"""",
	|	ВнутренниеТрудозатраты.СтатусПредставление,
	|	"""",
	|	ВнутренниеТрудозатраты.ИндексКартинки,
	|	"""",
	|	"""",
	|	"""",
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВнутренниеТрудозатраты.ДатаНачала
	|ИЗ
	|	ВнутренниеТрудозатраты КАК ВнутренниеТрудозатраты
	|{УПОРЯДОЧИТЬ ПО
	|	ИндексКартинки,
	|	ДатаНачала}
	|{ИТОГИ ПО
	|	СтатусПредставление}";
	#КонецОбласти

	ПостроительЗапроса.Параметры.Вставить("ИндексКартинкиВнутренниеТрудозатраты", 
		Справочники.СтатусыОбъектов.ИндексКартинкиВнутренниеТрудозатраты());

	СписокПродуктГруппаЗаказчиков = Новый СписокЗначений;
	
	Для Каждого ЭлементНастроек Из НастройкиСписка.Фильтры Цикл
		Если ЭлементНастроек.Значение.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементНастроек.Ключ = "ГруппаЗаказчиков" 
			ИЛИ ЭлементНастроек.Ключ = "Продукт" Тогда
			
			Если ТипЗнч(ЭлементНастроек.Значение) = Тип("СписокЗначений") Тогда
				Для Каждого ЭлементСписка Из ЭлементНастроек.Значение Цикл
					СписокПродуктГруппаЗаказчиков.Добавить(ЭлементСписка.Значение);	
				КонецЦикла;
			Иначе
				СписокПродуктГруппаЗаказчиков.Добавить(ЭлементНастроек.Значение);	
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначения.ПостроительЗапросаУстановитьОтбор(ПостроительЗапроса, ЭлементНастроек.Ключ, 
			ВидСравнения.ВСписке, ЭлементНастроек.Значение);
	КонецЦикла; 
	
	Если СписокПродуктГруппаЗаказчиков.Количество() > 0 Тогда 
		ОбщегоНазначения.ПостроительЗапросаУстановитьОтбор(ПостроительЗапроса, "СписокПродуктГруппаЗаказчиков", 
			ВидСравнения.ВСписке, СписокПродуктГруппаЗаказчиков);
	КонецЕсли; 
	
	ПостроительЗапроса.Порядок.Добавить("ИндексКартинки");
	ПостроительЗапроса.Порядок.Добавить("ДатаНачала");

	Если НастройкиСписка.Группировать Тогда
		// Итоги по статусу.
		ПостроительЗапроса.Измерения.Добавить("СтатусПредставление");
	КонецЕсли;

	РезультатЗапроса = ПостроительЗапроса.ПолучитьЗапрос();
	
	РезультатЗапроса.Параметры.Вставить("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	РезультатЗапроса.Параметры.Вставить("ТекущаяДата", ТекущаяДата);
	
	РезультатПакеты = РезультатЗапроса.ВыполнитьПакет();
	КоличествоПакетов = РезультатПакеты.ВГраница();
	
	ТаблицаПроизводственныйКалендарь = РезультатПакеты[КоличествоПакетов - 1].Выгрузить();
	РазработчикиЗадач = РезультатПакеты[КоличествоПакетов - 2].Выгрузить();
	
	Если НастройкиСписка.Группировать Тогда
		ВыборкаСтатус = РезультатПакеты[КоличествоПакетов].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСтатус.Следующий() Цикл
			ЭлементДереваСтатус = Дерево.Строки.Добавить();
			UID = ОбщегоНазначенияВызовСервера.ХэшСумма(Строка(ВыборкаСтатус.СтатусПредставление), Истина);
			
			ЭлементДереваСтатус.UID = UID;
			ЭлементДереваСтатус.ЭтоГруппа = Истина;
			ЭлементДереваСтатус.Наименование = ВыборкаСтатус.СтатусПредставление;
			ЭлементДереваСтатус.ИндексКартинки = Справочники.СтатусыОбъектов.ИндексКартинкиГруппа();
			
			Выборка = ВыборкаСтатус.Выбрать();
			
			ОбработатьВыборкуЗадачиНаМнеДерево(Выборка, ЭлементДереваСтатус.Строки, РазработчикиЗадач, ТаблицаПроизводственныйКалендарь, ТекущаяДата);
		КонецЦикла;
	Иначе
		Выборка = РезультатПакеты[КоличествоПакетов].Выбрать();
		ОбработатьВыборкуЗадачиНаМнеДерево(Выборка, Дерево.Строки, РазработчикиЗадач, ТаблицаПроизводственныйКалендарь, ТекущаяДата);
	КонецЕсли;
	
	ДанныеДерева = ИнструментыСервер.ПодготовитьДанныеИнструментаДляКлиента(Дерево, КолонкиИнструмента);
	
	Возврат ДанныеДерева;
	
КонецФункции

Процедура ОбработатьВыборкуЗадачиНаМнеДерево(Знач Выборка, КоллекцияЭлементов, Знач РазработчикиЗадач, Знач ТаблицаПроизводственныйКалендарь, Знач ТекущаяДата)
	
	Пока Выборка.Следующий() Цикл
		UID = ОбщегоНазначенияВызовСервера.ХэшСумма(Строка(Выборка.Задача), Истина);
		Наименование = СтрШаблон("[%1] %2", Выборка.Номер, Выборка.Наименование);
		
		РабочееВремя = ОбщегоНазначения.ПолучитьРабочееВремяДляРегистраСтатистики(Выборка.ДатаНачала, ТекущаяДата, ТаблицаПроизводственныйКалендарь);		
		ВремяСтрока = УправлениеИнструментамиРазработки.ПеревестиВремя(РабочееВремя);
		
		// Заполнение таблицы значений.
		СтрокаДерева = КоллекцияЭлементов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, Выборка); 
		
		СтрокаДерева.UID = UID;
		СтрокаДерева.Наименование = Наименование;
		СтрокаДерева.ВремяНаМне = ВремяСтрока;
		
		НайденныеРазработчикиЗадачи = РазработчикиЗадач.НайтиСтроки(Новый Структура("Задача", Выборка.Задача));
		Если НайденныеРазработчикиЗадачи.Количество() > 0 Тогда
			МассивРазработчиков = Новый Массив;
			Для Каждого Строка Из НайденныеРазработчикиЗадачи Цикл
				МассивРазработчиков.Добавить(Строка.Исполнитель);
			КонецЦикла;
			
			СтрокаДерева.Разработчик = СтрСоединить(МассивРазработчиков, ", ");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьСписок_МоиЗадачи_ПулНаТестирование(Знач Фильтры) 
	
	КолонкиИнструмента = Новый Массив;
	КолонкиИнструмента.Добавить("ЗадачаПредставление");
	КолонкиИнструмента.Добавить("Система");
	КолонкиИнструмента.Добавить("НесколькоСистем");
	КолонкиИнструмента.Добавить("Заказчик");
	КолонкиИнструмента.Добавить("Время");
	КолонкиИнструмента.Добавить("ПредставлениеПорядок");
	КолонкиИнструмента.Добавить("ИндексКартинки");
	КолонкиИнструмента.Добавить("UID");
	КолонкиИнструмента.Добавить("Зафиксирован");
	КолонкиИнструмента.Добавить("Порядок");
	КолонкиИнструмента.Добавить("ЗафиксированКартинка");
	КолонкиИнструмента.Добавить("Разработчик");
	КолонкиИнструмента.Добавить("СрокСдачи");
	КолонкиИнструмента.Добавить("ГруппаЗаказчиков");
	КолонкиИнструмента.Добавить("Задача");
	
	Таблица = Новый ТаблицаЗначений;
	Для Каждого Колонка Из КолонкиИнструмента Цикл
		Таблица.Колонки.Добавить(Колонка);
	КонецЦикла;
	
	УправлениеИнструментамиРазработки.ЗаполнитьСписокПулНаТестирование(Таблица, Фильтры);
	
	Результат = Таблица.СкопироватьКолонки();
	
	// Если количество записей в таблице менее 5, то выведем все
	КоличествоЗаписей = ?(Таблица.Количество() >= 5, 4, Таблица.Количество() - 1);
	Если КоличествоЗаписей >= 0 Тогда
		
		Для Номер = 0 По КоличествоЗаписей Цикл
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), Таблица.Получить(Номер));
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеДерева = ИнструментыСервер.ПодготовитьДанныеИнструментаДляКлиента(Результат, КолонкиИнструмента);
	
	Возврат ДанныеДерева;
	
КонецФункции

#КонецОбласти
