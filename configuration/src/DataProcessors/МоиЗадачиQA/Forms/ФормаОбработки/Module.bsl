///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

// Пользовательские настройки
&НаКлиенте
Перем НастройкиФормы;

// Кэш вспомогательных данных
&НаКлиенте
Перем КэшДополнительныхДанных;

// Хранит соответствие идентификаторов пользователей ссылкам
&НаКлиенте
Перем СоответствиеПользователей;

// Хранит пользовательские настройки колонок 
&НаКлиенте
Перем НастройкиКолонок;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВремяНачалаЗамера = ИнтеграцияДополнительныхПодсистем.НачатьЗамерВремени();
	
	Настройки = ПолучитьНастройкиФормы();
	
	ИнициализацияНастроекКолонок();
	
	ОбновляемыеТаблицы = Новый Массив;
	ОбновляемыеТаблицы.Добавить(Элементы.ЗадачиНаМнеДерево.Имя);
	ОбновляемыеТаблицы.Добавить(Элементы.Список_МоиЗадачи_ПулНаТестирование.Имя);
	
	ИнструментыСервер.ПриСозданииНаСервере(ЭтотОбъект, ОбновляемыеТаблицы);

	РаботаСПроцессами.СоздатьКнопкиПереходаСтатусов(ЭтотОбъект, Элементы.СписокСтатусов_ЗадачиНаМне);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	КэшДополнительныхДанных = ПолучитьКэшДополнительныхДанныхДляКлиента(АдресВоВременномХранилище);
	
	НастройкиФормы = КэшДополнительныхДанных["НастройкиФормы"];
	КэшДополнительныхДанных.Удалить("НастройкиФормы");
	
	КэшДополнительныхДанных.Вставить("КэшСтатусов", ЭтотОбъект["КэшСтатусов"]);	
	
	СписокПользователейДляНазначения = НастройкиФормы.СписокПользователейДляНазначения;
	СоответствиеПользователей = Новый Соответствие;
	Для Каждого Элемент Из СписокПользователейДляНазначения Цикл
		СоответствиеПользователей.Вставить(Элемент.Значение.УникальныйИдентификатор(), Элемент.Значение);
	КонецЦикла;
	НастройкиФормы.Удалить("СписокПользователейДляНазначения");
	
	ПодключитьОбработчикОжидания("Подключаемый_СохранитьНастройкиФормы", 300);
	
	// Изменение гиперссылки на отчет трудозатрат.
	УчетТрудозатратКлиент.ИзменитьЗаголовокТрудозатрат(Элементы.Гиперссылка_ОтчетТрудозатраты);
	
	ИнструментыКлиент.ПриОткрытии(ЭтотОбъект);

	ИнтеграцияДополнительныхПодсистем.ЗакончитьЗамерВремени("МоиЗадачиQA.ОткрытиеФормы", ВремяНачалаЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ИнструментыКлиент.ПриЗакрытии(ЗавершениеРаботы, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СписокСобытий = СтрРазделить(ИмяСобытия, ";");
	
	Для Каждого Событие Из СписокСобытий Цикл
		Если Событие = СобытияОповещенияКлиент.ИмяСобытияДобавленияТрудозатрат() Тогда
			УчетТрудозатратКлиент.ИзменитьЗаголовокТрудозатрат(Элементы.Гиперссылка_ОтчетТрудозатраты);
		ИначеЕсли СобытияОповещенияКлиент.СобытиеОбновлениеСписковИнструментов(Событие) Тогда
			ИнструментыКлиент.УстановитьПризнакНеобходимостиОбновления(ЭтотОбъект);
		КонецЕсли; 
	КонецЦикла;
	
	ИнструментыКлиент.ОбработкаОповещения(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура Гиперссылка_ОтчетТрудозатратыНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ПостроитьОтчетЗаТекущийДень", Истина);
	ПараметрыОткрытия.Вставить("Функциональность", "Открытие инструмента ""Отчет трудозатраты(За текущий день)"""); 
	ПараметрыОткрытия.Вставить("ИмяФормы", ИмяФормы);
	
	ОткрытьФорму("Отчет.Трудозатраты.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект,
	ЭтотОбъект.УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиНаМнеДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗадачиНаМнеДерево.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	Задача = ТекущиеДанные.Задача;
	ОткрытьЗначениеАсинх(Задача);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиНаМнеДеревоПриАктивизацииСтроки(Элемент)
	
	НастройкиСписка = НастройкиФормы.Список_МоиЗадачиНаМне.Дерево;
	
	УправлениеИнструментамиРазработкиКлиент.ОбработкаАктивизацииСтрокиДанныхФормы(Элемент, НастройкиСписка.ВыделеннаяСтрока);
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.ЗадачиНаМнеДеревоКонтекстноеМенюКопироватьВБуфер.Видимость = НЕ ТекущиеДанные.ЭтоГруппа;
		Элементы.ЗадачиНаМнеДеревоКонтекстноеМенюДобавитьТрудозатраты.Видимость = НЕ ТекущиеДанные.ЭтоГруппа;
		Элементы.ЗадачиНаМнеДеревоКонтекстноеМенюОткрытьВыборВариантаСсылки.Видимость = НЕ ТекущиеДанные.ЭтоГруппа;
		
		ЗаполнитьСтатусыВСписке(ТекущиеДанные.Задача, "СписокСтатусов_ЗадачиНаМне");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиНаМнеДеревоПередРазворачиванием(Элемент, Строка, Отказ)
	
	УправлениеИнструментамиРазработкиКлиент.ПередРазворачиваниемУзлаДерева(ЗадачиНаМнеДерево, Строка, 
		НастройкиФормы.Список_МоиЗадачиНаМне.Дерево.РазвернутыеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиНаМнеДеревоПередСворачиванием(Элемент, Строка, Отказ)
	
	УправлениеИнструментамиРазработкиКлиент.ПередСворачиваниемУзлаДерева(ЗадачиНаМнеДерево, 
		Строка, НастройкиФормы.Список_МоиЗадачиНаМне.Дерево.РазвернутыеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура Список_МоиЗадачи_ПулНаТестированиеПриАктивизацииСтроки(Элемент)
	
	НастройкиСписка = НастройкиФормы.Список_МоиЗадачи.ПулНаТестирование;
	
	УправлениеИнструментамиРазработкиКлиент.ОбработкаАктивизацииСтрокиДанныхФормы(Элемент, 
		НастройкиСписка.ВыделеннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура Список_МоиЗадачи_ПулНаТестированиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список_МоиЗадачи_ПулНаТестирование.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	Задача = ТекущиеДанные.Задача;
	ОткрытьЗначениеАсинх(Задача);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВзятьНаСебя_МоиЗадачи_ПулНаТестирование(Команда)
	
	ВзятьНаСебяНаКлиенте_МоиЗадачи_ПулНаТестирование();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьПоСтатусу(Команда)
	
	Элементы.ГруппироватьПоСтатусу.Пометка = НЕ Элементы.ГруппироватьПоСтатусу.Пометка;
	
	НастройкиФормы.ГруппироватьПоСтатусам = Элементы.ГруппироватьПоСтатусу.Пометка;
	ЗапуститьОбновлениеЗадачиНаМнеДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТрудозатраты(Команда)
	
	Если ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;                              
	
	ДанныеОбъект = Неопределено;
	
	Если ТекущийЭлемент.ТекущиеДанные <> Неопределено Тогда 
		ДанныеОбъект = ТекущийЭлемент.ТекущиеДанные;
	Иначе
		Возврат;
	КонецЕсли;
	
	УчетТрудозатратКлиент.ОткрытьФормуДобавленияТрудозатратВКонтекстномМеню(ДанныеОбъект, УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура НазначитьЗадачуНаПользователя_МоиЗадачи_ПулНаТестирование(Команда)
		
	ИмяДляЗамены = "Список_МоиЗадачи_ПулНаТестирование_НазначитьНа_";
	
	НазначитьЗадачуСпискаНаПользователя(Элементы.Список_МоиЗадачи_ПулНаТестирование, Команда, ИмяДляЗамены);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСписок(Команда)
	
	ОтборГруппыЗаказчиков = НастройкиФормы.Отбор.ГруппаЗаказчиков;
	ГруппыЗаказчиков = ОтборГруппыЗаказчиков.ВыгрузитьЗначения();
	Системы = НастройкиФормы.Отбор.Система; 
	Продукты = НастройкиФормы.Отбор.Продукт;
	Статусы = НастройкиФормы.Отбор.Статус;
	
	ПараметрыОткрытия = ИнтерфейсПриложенияКлиент.СформироватьПараметрыОткрытия();

	ПараметрыОткрытия.Системы.Значение = Системы;
	ПараметрыОткрытия.Системы.Использование = Истина;
	
	ПараметрыОткрытия.ГруппыЗаказчиков.Значение = ГруппыЗаказчиков;
	ПараметрыОткрытия.ГруппыЗаказчиков.Использование = Истина; 
	
	ПараметрыОткрытия.Продукты.Значение = Продукты;
	ПараметрыОткрытия.Продукты.Использование = Истина;

	ИсключаемыеСтатусы = Новый Массив;
	ИсключаемыеСтатусы.Добавить(ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Решен"));
	ИсключаемыеСтатусы.Добавить(ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Отклонен"));
	
	ПараметрыОткрытия.Статусы.Значение = Статусы;
	ПараметрыОткрытия.Статусы.Использование = Истина;
	ПараметрыОткрытия.Статусы.Вставить("ИсключаемыеСтатусы", ИсключаемыеСтатусы);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборНастроек", ЭтотОбъект, ЭтотОбъект);
	
	ИнтерфейсПриложенияКлиент.ОткрытьФормуНастройкиИнструментов(ЭтотОбъект, ПараметрыОткрытия, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура НастройкаКолонок(Команда)
	
	Ключи = ПолучитьКлючиНастроекКолонок();
	НастройкиПоУмолчанию = НастройкиКолонокПоУмолчанию();
	НастройкиКолонок = ИнтерфейсПриложенияВызовСервера.ЗаполнитьПользовательскиеНастройки(НастройкиПоУмолчанию, Ключи);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДоступныеНастройки", НастройкиКолонок);
	ПараметрыОткрытия.Вставить("НастройкиПоУмолчанию", НастройкиПоУмолчанию);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ИмяТаблицы", "ЗадачиНаМнеДерево");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеНастроекКолонок", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаКолонок", ПараметрыОткрытия, ЭтотОбъект,
		КлючУникальности, , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьВБуфер(Команда)
	
	Если ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;                              
	
	ОбъектСсылка = Неопределено;
	
	Если ТекущийЭлемент.ТекущиеДанные <> Неопределено Тогда 
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		
		Если ТекущиеДанные.Свойство("Ссылка") Тогда
			ОбъектСсылка = ТекущиеДанные.Ссылка;
		ИначеЕсли ТекущиеДанные.Свойство("Задача") Тогда
			ОбъектСсылка = ТекущиеДанные.Задача;
		КонецЕсли; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		ОбщегоНазначенияКлиент.КопироватьНавигационнуюСсылкуВБуферОбмена(ОбъектСсылка);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВариантыСсылок(Команда)
	
	Если ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;                              
	
	ОбъектСсылка = Неопределено;
	
	Если ТекущийЭлемент.ТекущиеДанные <> Неопределено Тогда 
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		
		Если ТекущиеДанные.Свойство("Ссылка") Тогда
			ОбъектСсылка = ТекущиеДанные.Ссылка;
		ИначеЕсли ТекущиеДанные.Свойство("Задача") Тогда
			ОбъектСсылка = ТекущиеДанные.Задача;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		ИнтерфейсПриложенияКлиент.ОткрытьОкноНавигационнойСсылки(ОбъектСсылка, ЭтотОбъект, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	 ОбновитьДанныеИнструмента();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПоКнопке(Команда)
	
	Если ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;                              
	
	ДанныеОбъект = Неопределено;
	
	Если ТекущийЭлемент.ТекущиеДанные <> Неопределено Тогда 
		ДанныеОбъект = ТекущийЭлемент.ТекущиеДанные;
	Иначе
		Возврат;
	КонецЕсли;

	РаботаСПроцессамиКлиент.УстановитьСтатусПоКнопке(Команда.Имя, ДанныеОбъект.Задача,
		КэшДополнительныхДанных);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Фоновое обновление инструментов

&НаКлиенте
Процедура ЗапуститьОбновлениеЗадачиНаМнеДерево()
	
	МетодОбновления = "Обработки.МоиЗадачиQA.ПолучитьДанныеЗадачиНаМнеДерево";
	
	ПередаваемыеПараметры = Новый Структура;
	ПередаваемыеПараметры.Вставить("ЗадачиНаМнеДерево", НастройкиФормы.Список_МоиЗадачиНаМне);
	ПередаваемыеПараметры.Вставить("Фильтры", НастройкиФормы.Отбор);
	ПередаваемыеПараметры.Вставить("Группировать", НастройкиФормы.ГруппироватьПоСтатусам);

	ПараметрыФонового = Новый Массив;
	ПараметрыФонового.Добавить(ПередаваемыеПараметры);
	
	НастройкиСписка = НастройкиФормы.Список_МоиЗадачиНаМне.Дерево;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыделеннаяСтрока", НастройкиСписка.ВыделеннаяСтрока);

	ИнструментыКлиент.НачатьОбновлениеИнструмента(ЭтотОбъект, МетодОбновления,
		ПараметрыФонового, Элементы.ЗадачиНаМнеДерево.Имя, ДополнительныеПараметры, "ОбработатьДанныеЗадачиНаМнеДерево");
		
	Элементы.ГруппаНастройки.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбновлениеСписок_МоиЗадачи_ПулНаТестирование()
	
	МетодОбновления = "Обработки.МоиЗадачиQA.ПолучитьДанныеСписок_МоиЗадачи_ПулНаТестирование";
	
	СписокСтатусов = КэшДополнительныхДанных.Получить("СписокСтатусов");
	
	Настройки_ПулНаТестирование = НастройкиОбновленияСпискаПулНаТестирование(НастройкиФормы.СистемыПользователя, СписокСтатусов);
	
	Cистемы = Новый Структура;
	Cистемы.Вставить("ВидСравнения", ВидСравнения.ВСписке);
	Cистемы.Вставить("ПравоеЗначение", Настройки_ПулНаТестирование.Системы);
	Cистемы.Вставить("Использование", Истина);
	
	Статусы = Новый Структура;
	Статусы.Вставить("ВидСравнения", ВидСравнения.ВСписке);
	Статусы.Вставить("ПравоеЗначение", Настройки_ПулНаТестирование.Статусы);
	Статусы.Вставить("Использование", Истина);
		
	Фильтры = Новый Структура;
	Фильтры.Вставить("Система", Cистемы);
	Фильтры.Вставить("Статус", Статусы);
	
	СохраненныеНастройкиПула = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(
		"Обработка.ПулНаТестирование", "НастройкиФормы");

	Если СохраненныеНастройкиПула <> Неопределено И СохраненныеНастройкиПула.Свойство("ПрочиеОтборы") Тогда
		Для Каждого Отбор Из СохраненныеНастройкиПула.ПрочиеОтборы Цикл
			Фильтры.Вставить(Отбор.Ключ, Отбор.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыФонового = Новый Массив;
	ПараметрыФонового.Добавить(Фильтры);
	
	НастройкиСписка = НастройкиФормы.Список_МоиЗадачи.ПулНаТестирование;

	ИнструментыКлиент.НачатьОбновлениеИнструмента(ЭтотОбъект, МетодОбновления,
		ПараметрыФонового, Элементы.Список_МоиЗадачи_ПулНаТестирование.Имя, , "ОбработатьДанныеСписок_МоиЗадачи_ПулНаТестирование");
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеЗадачиНаМнеДерево() Экспорт
	
	ИнструментыКлиент.ОбработатьОтложенноеОбновлениеИнструмента(ЭтотОбъект, Элементы.ЗадачиНаМнеДерево.Имя, "Обработки.МоиЗадачиQA.ПолучитьДанныеЗадачиНаМнеДерево");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеСписок_МоиЗадачи_ПулНаТестирование() Экспорт
	
	ИнструментыКлиент.ОбработатьОтложенноеОбновлениеИнструмента(ЭтотОбъект, Элементы.Список_МоиЗадачи_ПулНаТестирование.Имя, "Обработки.МоиЗадачиQA.ПолучитьДанныеСписок_МоиЗадачи_ПулНаТестирование");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОбновленияИнструмента(Данные, ДополнительныеПараметры) Экспорт
	
	ДанныеФормы = ЭтотОбъект[ДополнительныеПараметры.ОбновляемаяТаблица];
	
	Если (ТипЗнч(ДанныеФормы) = Тип("ДанныеФормыДерево")) Тогда
		КоллекцияЭлементов = ДанныеФормы.ПолучитьЭлементы();
		НастройкиСписка = НастройкиФормы.Список_МоиЗадачиНаМне.Дерево;
	Иначе
		КоллекцияЭлементов = ДанныеФормы;
		НастройкиСписка = НастройкиФормы.Список_МоиЗадачи.ПулНаТестирование;
	КонецЕсли;
	
	ИнструментыКлиент.ЗаполнитьДанныеИнструмента(КоллекцияЭлементов, Данные, ДополнительныеПараметры.МетодОбновления);
	
	УправлениеИнструментамиРазработкиКлиент.ВосстановитьДанныеФормыВПредыдущееСостояние(ЭтотОбъект,
		ДополнительныеПараметры.ОбновляемаяТаблица, НастройкиСписка);
	
	Элементы.ГруппаНастройки.Доступность = Истина;
	
	ИнструментыКлиент.ЗакончитьОбновлениеИнструмента(ЭтотОбъект, ДополнительныеПараметры, Данные.УИДЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеИнструмента() Экспорт
	
	ИнструментыКлиент.ОбновлениеДанныхЗапущено(ЭтотОбъект);
	
	ЗапуститьОбновлениеЗадачиНаМнеДерево();
	ЗапуститьОбновлениеСписок_МоиЗадачи_ПулНаТестирование();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура ВзятьНаСебяНаКлиенте_МоиЗадачи_ПулНаТестирование()
	
	ТекущиеДанные = Элементы.Список_МоиЗадачи_ПулНаТестирование.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = РаботаСПроцессамиВызовСервера.НазначитьЗадачуНаПользователя(ТекущиеДанные.Задача);
	Если Результат.Успешно Тогда
		ОбновитьДанныеИнструмента();
	Иначе
		Сообщить(Результат.Сообщение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьНазначениеЗадачиСпискаНаПользователя(Знач Задача, Знач Пользователь, Знач ИмяСписка, Знач ЭтоПулНаРазработку)
	
	Результат = РаботаСПроцессамиВызовСервера.НазначитьЗадачуНаПользователя(Задача, Пользователь, ЭтоПулНаРазработку);
	
	Если Результат.Успешно Тогда
		ОбновитьДанныеИнструмента();
	Иначе
		Сообщить(Результат.Сообщение);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатусыВСписке(Задача, Список) 
	
	МассивВидимыхСтатусов = ПолучитьВидимыеСтатусы(Задача, КэшДополнительныхДанных, Список);
	ЭлементСписокСтатусов = Элементы.Найти(Список);
	Для Каждого Элемент Из ЭлементСписокСтатусов.ПодчиненныеЭлементы Цикл
		Элемент.Видимость = МассивВидимыхСтатусов.Найти(Элемент.Имя) <> Неопределено;			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияНастроекКолонок()
	
	Ключи = ПолучитьКлючиНастроекКолонок();
	НастройкиПоУмолчанию = НастройкиКолонокПоУмолчанию();
	НастройкиКолонок = ИнтерфейсПриложенияВызовСервера.ЗаполнитьПользовательскиеНастройки(НастройкиПоУмолчанию, Ключи);
		
	ИнтерфейсПриложенияКлиентСервер.ПрименитьПользовательскиеНастройки(Элементы, НастройкиКолонок);
	ОбновитьПорядокКолонок("ЗадачиНаМнеДерево", НастройкиКолонок.Порядок);
		
КонецПроцедуры

&НаКлиенте
Процедура НазначитьЗадачуСпискаНаПользователя(Список, Команда, Знач ИмяДляЗамены, Знач ЭтоПулНаРазработку = Ложь)
	
	ТекущиеДанные = Список.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено ИЛИ Команда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторПользователя = СтрЗаменить(Команда.Имя, ИмяДляЗамены, "");
	ОтформатированныйИдентификатор = СтрЗаменить(ИдентификаторПользователя, "_", "-");
	УникальныйИдентификаторПользователя = Новый УникальныйИдентификатор(ОтформатированныйИдентификатор);
	Пользователь = СоответствиеПользователей.Получить(УникальныйИдентификаторПользователя);
	
	Задача = ТекущиеДанные.Задача;
		
	ДанныеОтсутствия = ПользователиВызовСервера.ДанныеОтсутствия(Пользователь);
	
	Если ДанныеОтсутствия.Отсутствует Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Форма", ЭтотОбъект);
		ДопПараметры.Вставить("Задача", Задача);
		ДопПараметры.Вставить("Пользователь", Пользователь);
		ДопПараметры.Вставить("ИмяСписка", Список.Имя);
		ДопПараметры.Вставить("ЭтоПулНаРазработку", ЭтоПулНаРазработку);
		
		ИнтерфейсПриложенияКлиент.ПодтвердитьВыборОтсутствующегоПользователя(Пользователь, ДанныеОтсутствия, ДопПараметры);
	Иначе
		ЗавершитьНазначениеЗадачиСпискаНаПользователя(Задача, Пользователь, Список.Имя, ЭтоПулНаРазработку);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НастройкиКолонокПоУмолчанию()
	
	// Порядок колонок в коде влияет на заполнение по умолчанию
	Состав = Новый СписокЗначений;
	Состав.Добавить("ЗадачиНаМнеДеревоНаименование", "Задача", Истина);
	Состав.Добавить("ЗадачиНаМнеДеревоЗаказчик", "Заказчик", Истина);
	Состав.Добавить("ЗадачиНаМнеДеревоРазработчик", "Разработчик", Истина);
	Состав.Добавить("ЗадачиНаМнеДеревоВремяНаМне", "На мне", Истина);
	Состав.Добавить("ЗадачиНаМнеДеревоСистемаПредставление", "Система", Истина);
	Состав.Добавить("ЗадачиНаМнеДеревоГруппаЗаказчиков", "ГруппаЗаказчиков", Истина);
	Состав.Добавить("ЗадачиНаМнеДеревоПродукт", "Продукт", Истина); 
	Состав.Добавить("ЗадачиНаМнеДеревоПлановоеВремя", "План", Ложь);
	Состав.Добавить("ЗадачиНаМнеДеревоФактическоеВремя", "Факт", Ложь);
	Состав.Добавить("ЗадачиНаМнеДеревоПлановоеВремяТестирования", "План тестирования", Ложь);
	Состав.Добавить("ЗадачиНаМнеДеревоФактическоеВремяТестирования", "Факт тестирования", Ложь);
		
	ПорядковыйНомер = 1;
	Порядок = Новый Соответствие;
	
	Для Каждого ЭлементСписка Из Состав Цикл
		СтруктураПоля = Новый Структура("Поле, Представление", ЭлементСписка.Значение, ЭлементСписка.Представление);
		Порядок.Вставить(ПорядковыйНомер, СтруктураПоля);
		
		ПорядковыйНомер = ПорядковыйНомер + 1;
	КонецЦикла;
	
	Результат = Новый Структура("Состав, Порядок", Состав, Порядок);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция НастройкиОбновленияСпискаПулНаТестирование(Знач СписокСистем, Знач СписокСтатусов)
	
	СвойстваНастройки = СвойстваНастроекПула();
	
	// Восстановление сохраненных параметров
	НастройкиПула = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(
		СвойстваНастройки.КлючОбъекта, СвойстваНастройки.КлючНастроек);
		
	Если ТипЗнч(НастройкиПула) = Тип("Структура") Тогда
		СписокСистем = НастройкиПула.СписокСистем;
		СписокСтатусов = НастройкиПула.СписокСтатусов;
	КонецЕсли;
	
	ПередаваемыеПараметры = Новый Структура;
	ПередаваемыеПараметры.Вставить("ВсегоСистем", СписокСистем.Количество());
	ПередаваемыеПараметры.Вставить("ВсегоСтатусов", СписокСтатусов.Количество());
	ПередаваемыеПараметры.Вставить("Системы", СписокСистем);
	ПередаваемыеПараметры.Вставить("Статусы", СписокСтатусов);
	
	Возврат ПередаваемыеПараметры;
	
КонецФункции

&НаСервере
Процедура ОбновитьПорядокКолонок(Знач ИмяТаблицы, Знач Порядок)
	
	ТаблицаЭлемента = Элементы[ИмяТаблицы];
	ИнтерфейсПриложения.ОбновитьПорядокКолонокНаСервере(Порядок, Элементы, ТаблицаЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборНастроек(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиИзменены = Ложь;
	
	// Проверка изменения отбора по группе заказчиков
	СтарыйОтбор = НастройкиФормы.Отбор.ГруппаЗаказчиков;
	НовыйОтбор = Результат.ВыбранныеГруппыЗаказчиков;
	СпискиРазличаются = ОбщегоНазначенияКлиент.СпискиЗначенийРазличаются(СтарыйОтбор, НовыйОтбор);
	
	Если СпискиРазличаются Тогда
		НастройкиФормы.Отбор.ГруппаЗаказчиков = НовыйОтбор;
		НастройкиИзменены = Истина;
	КонецЕсли;
	
	// Проверка изменения отбора по системе
	СтарыйОтбор =  НастройкиФормы.Отбор.Система;
	НовыйОтбор = Результат.ВыбранныеСистемы;
	СпискиРазличаются = ОбщегоНазначенияКлиент.СпискиЗначенийРазличаются(СтарыйОтбор, НовыйОтбор);
	
	Если СпискиРазличаются Тогда
		НастройкиФормы.Отбор.Система = Результат.ВыбранныеСистемы;
		НастройкиИзменены = Истина;
	КонецЕсли;
	
	// Проверка изменения отбора по продукту
	СтарыйОтбор =  НастройкиФормы.Отбор.Продукт;
	НовыйОтбор = Результат.ВыбранныеПродукты;
	СпискиРазличаются = ОбщегоНазначенияКлиент.СпискиЗначенийРазличаются(СтарыйОтбор, НовыйОтбор);
	
	Если СпискиРазличаются Тогда
		НастройкиФормы.Отбор.Продукт = Результат.ВыбранныеПродукты;
		НастройкиИзменены = Истина;
	КонецЕсли;
	
	// Проверка изменения отбора по системе
	СтарыйОтбор =  НастройкиФормы.Отбор.Статус;
	НовыйОтбор = Результат.ВыбранныеСтатусы;
	СпискиРазличаются = ОбщегоНазначенияКлиент.СпискиЗначенийРазличаются(СтарыйОтбор, НовыйОтбор);
	
	Если СпискиРазличаются Тогда
		НастройкиФормы.Отбор.Статус = Результат.ВыбранныеСтатусы;
		НастройкиИзменены = Истина;
	КонецЕсли;
		
	Если НастройкиИзменены Тогда
		ЗапуститьОбновлениеЗадачиНаМнеДерево();
	КонецЕсли;

	СохранитьНастройкиФормы(НастройкиФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеНастроекКолонок(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполняемыеСвойства = "Состав, Порядок";
	
	ЗаполнитьЗначенияСвойств(НастройкиКолонок, Результат, ЗаполняемыеСвойства);
	Ключи = ПолучитьКлючиНастроекКолонок();		
	Настройки = НастройкиКолонок;
	
	ИнтерфейсПриложенияКлиентСервер.ПрименитьПользовательскиеНастройки(Элементы, Настройки);
	
	Если Результат.ИзменилсяПорядок Тогда
		ОбновитьПорядокКолонок("ЗадачиНаМнеДерево", Настройки.Порядок);
	КонецЕсли;
	
	// Сохранение пользовательских настроек
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(Ключи.Объект, Ключи.Настройка, Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СохранитьНастройкиФормы()
	
	СохранитьНастройкиФормы(НастройкиФормы);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВидимыеСтатусы(Задача, КэшДополнительныхДанных, Группа)  
	
	Возврат РаботаСПроцессами.ПолучитьВидимыеСтатусы(Задача, КэшДополнительныхДанных, Группа);	
		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКэшДополнительныхДанныхДляКлиента(Знач АдресВоВременномХранилище = "")

	ДанныеДляКлиента = Новый Соответствие;
	
	Если ЭтоАдресВременногоХранилища(АдресВоВременномХранилище) Тогда	
		НастройкиФормы = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);	
		
		// Скопируем некоторые данные, которые не нужны в пользовательских настройках.
		ДанныеДляКлиента.Вставить("СписокСтатусов", НастройкиФормы.СписокСтатусов);
		НастройкиФормы.Удалить("СписокСтатусов");
		
		ДанныеДляКлиента.Вставить("НастройкиФормы", НастройкиФормы);
	Иначе
		ДанныеДляКлиента.Вставить("НастройкиФормы", Неопределено);
	КонецЕсли;

	Возврат ДанныеДляКлиента;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКлючиНастроекКолонок()
	
	Ключи = Новый Структура;
	Ключи.Вставить("Объект", "Обработка.МоиЗадачи.Форма.ФормаОбработкиQA");
	Ключи.Вставить("Настройка", "НастройкаКолонокQA");
	
	Возврат Ключи;
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиФормы()
	
	Перем ЗначениеНастройки;
		
	ПолныйСписокСистем = УправлениеИнструментамиРазработкиПовтИсп.ПолучитьСписокДоступныхСистемQA();
	
	СписокСтатусов = ПолучитьСписокСтатусов();
	СписокПользователейДляНазначения = УправлениеИнструментамиРазработки.ПолучитьСписокПользователейДляНазначения();
		
	// Создание пустой структуры настроек
	НастройкиФормы = Новый Структура;

	НастройкиФормы.Вставить("СписокПользователейДляНазначения", СписокПользователейДляНазначения);
	НастройкиФормы.Вставить("ГруппироватьПоСтатусам", Ложь);
	
		// Для хранения отборов
	НастройкиФормы.Вставить("Отбор", Новый Структура);
	НастройкиФормы.Отбор.Вставить("ГруппаЗаказчиков", Новый СписокЗначений);
	НастройкиФормы.Отбор.Вставить("Система", Новый СписокЗначений);
	НастройкиФормы.Отбор.Вставить("Продукт", Новый СписокЗначений);
	НастройкиФормы.Отбор.Вставить("Статус", Новый СписокЗначений);
	
	// Параметры дерева
	НастройкиДерева = Новый Структура("ВыделеннаяСтрока, РазвернутыеСтроки, Направления",
		Неопределено, Новый Соответствие, Новый Соответствие);
		
	// Параметры таблицы
	НастройкиТаблицы = Новый Структура("ВыделеннаяСтрока", Неопределено);	
	НастройкиФормы.Вставить("Список_МоиЗадачиНаМне", Новый Структура("Дерево", НастройкиДерева));
	НастройкиФормы.Вставить("Список_МоиЗадачи", Новый Структура("ПулНаТестирование", НастройкиТаблицы));
	
	СвойстваНастройки = СвойстваСохраняемойНастройки();
	
	// Восстановление сохраненных параметров
	СохраненныеНастройки = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(
		СвойстваНастройки.КлючОбъекта, СвойстваНастройки.КлючНастроек);
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		
		// Перебор всех элементом структуры настроек. Если элемент найден в сохраненной
		// настройке, его значение присваивается исходному свойству. В противном случае
		// используется значение по-умолчанию.
		Для Каждого Настройка Из НастройкиФормы Цикл
			ИмяКлюча = Настройка.Ключ;
			
			// Если значение сохраненной настройки не существует
			Если НЕ СохраненныеНастройки.Свойство(ИмяКлюча, ЗначениеНастройки) Тогда
				Продолжить;
			КонецЕсли;
			
			// Если типы настроек соответствуют, присваиваем значение
			Если ТипЗнч(Настройка.Значение) = ТипЗнч(ЗначениеНастройки) Тогда
				НастройкиФормы.Вставить(ИмяКлюча, ЗначениеНастройки);
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	// Добавим настройки, которые не нужно восстанавливать из сохраненных.
	НастройкиФормы.Вставить("СписокСтатусов", СписокСтатусов);
	НастройкиФормы.Вставить("СистемыПользователя", ПолныйСписокСистем);

	Элементы.ГруппироватьПоСтатусу.Пометка = НастройкиФормы.ГруппироватьПоСтатусам;
	
	Возврат НастройкиФормы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокСтатусов()
	
	ИсключаемыеСтатусы = Новый Массив;
	ИсключаемыеСтатусы.Добавить(Справочники.СтатусыОбъектов.РевьюТребований);
	ИсключаемыеСтатусы.Добавить(Справочники.СтатусыОбъектов.Отклонен);
	ИсключаемыеСтатусы.Добавить(Справочники.СтатусыОбъектов.Рассмотрен);
	ИсключаемыеСтатусы.Добавить(Справочники.СтатусыОбъектов.Решен);
	
	СписокСтатусов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыОбъектов.Ссылка КАК Ссылка,
	|	СтатусыОбъектов.Представление КАК Представление
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|ГДЕ
	|	НЕ СтатусыОбъектов.Ссылка В (&ИсключаемыеСтатусы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыОбъектов.Порядок";
	
	Запрос.УстановитьПараметр("ИсключаемыеСтатусы", ИсключаемыеСтатусы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокСтатусов.Добавить(Выборка.Ссылка, Выборка.Представление);
	КонецЦикла;
			
	Возврат СписокСтатусов;
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваСохраняемойНастройки()
	
	Возврат Новый Структура("КлючОбъекта, КлючНастроек", "Обработка.МоиЗадачи.Форма.ФормаОбработкиQA", "НастройкиФормы");
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваНастроекПула()
	
	Возврат Новый Структура("КлючОбъекта, КлючНастроек", "Обработка.ПулНаТестирование", "НастройкиФормы");
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормы(Знач Настройки)
	
	СвойстваНастроек = СвойстваСохраняемойНастройки();
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(СвойстваНастроек.КлючОбъекта, СвойстваНастроек.КлючНастроек, Настройки)
	
КонецПроцедуры

#КонецОбласти
