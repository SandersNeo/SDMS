///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ВнешнееСоединение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
	
#Область СлужебныйПрограммныйИнтерфейс

Процедура ВыполнитьАвтоматическоеЗакрытиеЗадач() Экспорт
	
	ИмяСобытия = "РегламентноеЗадание.АвтоматическоеЗакрытиеЗадач";
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , "Начало выполнения задания");
	
	// Получение постоянного адреса временного хранилища
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	
	// Поиск задач, которые нужно закрыть
	НайтиНезакрытыеЗадачи(НачалоДня(ТекущаяДатаСеанса()), АдресВременногоХранилища);
	Данные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	// Пометка всех найденных задач для закрытия
	Для Каждого СвойстваЗадачи Из Данные Цикл
		СвойстваЗадачи.Пометка = Истина;
	КонецЦикла;
	
	// Закрытие отмеченных задач
	ЗакрытьОтмеченныеЗадачи(Данные, АдресВременногоХранилища);
	Данные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	УдалитьИзВременногоХранилища(АдресВременногоХранилища);
	
	// Запись в журнал регистрации информации о количестве закрытых задач
	ШаблонОшибки = "Окончание выполнения задания. Закрыто задач: %1. Обработано связанных заявок: %2.";
	ТекстОшибки = СтрШаблон(ШаблонОшибки, Данные.ОбработаноЗадач, Данные.ОбработаноЗаявок);
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , ТекстОшибки);
	
КонецПроцедуры

Процедура ЗакрытьОтмеченныеЗадачи(Знач ОбрабатываемыеЗадачи, Знач АдресВоВременномХранилище = Неопределено) Экспорт
	
	ТекстСообщенияЗадач  = "Пожалуйста, подождите. Выполняется операция закрытия задач (%1%%)...";
	ТекстСообщенияЗаявок = "Пожалуйста, подождите. Обрабатываются связанные заявки (%1%%)...";
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Завершена", Ложь);
	РезультатОперации.Вставить("ТекстОшибки", "");
	РезультатОперации.Вставить("Сообщение", "Пожалуйста, подождите. Выполняется операция закрытия задач...");
	РезультатОперации.Вставить("ОбработаноЗадач", 0);
	РезультатОперации.Вставить("ОбработаноЗаявок", 0);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	// Таблица для хранения заявок на разработку
	ТаблицаЗаявок = Новый ТаблицаЗначений;
	ТаблицаЗаявок.Колонки.Добавить("Заявка", Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаРазработку"));	
	
	// Свойства статуса "Решена"
	СтатусРешена = Справочники.СтатусыОбъектов.Решен;
	ПредставлениеСтатуса = СтатусРешена.Наименование;
	ИндексКартинкиРешена = СтатусРешена.ИндексКартинки;
	
	ЧастиСообщения = Новый Массив;
	
	ШаблоныПисьма = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма();
	
	ШаблонПисьма = ШаблоныПисьма.БлокОсновногоТекста;
	
	ТекстШаблона = СтрЗаменить(ШаблоныПисьма.ЗаголовокСобытия, "<!-- event_date -->", Формат(ТекущаяДата, ШаблоныПисьма.ФорматДаты));
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- user_name -->", ПараметрыСеанса.ТекущийПользователь);
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- event -->", "добавил(-а) комментарий:");

	ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- content -->", ТекстШаблона);
	ШаблонПисьма = СтрЗаменить(ШаблонПисьма, "<!-- font_size -->", "14px");
	
	ЧастиСообщения.Добавить(ШаблонПисьма);
	
	ТекстШаблона = "Автоматическое закрытие задач, находящихся в статусах ""Тестирование"" и ""Протестирована"" более 10 рабочих дней.";
	
	ШаблонПисьма = СтрЗаменить(ШаблоныПисьма.Комментарий, "<!-- content -->", ТекстШаблона);
	
	ЧастиСообщения.Добавить(ШаблонПисьма);
	
	ТекстКомментарияДляСообщения = СтрСоединить(ЧастиСообщения, Символы.ПС);
	
	Количество = ОбрабатываемыеЗадачи.Количество();
	Обработано = 0;
	Множитель = 100;
	
	НачатьТранзакцию();
	
	Попытка
		Для Каждого СвойстваЗадачи Из ОбрабатываемыеЗадачи Цикл
			ПредыдущийСтатус = СвойстваЗадачи.Статус;
			СсылкаНаЗадачу = СвойстваЗадачи.Задача;			
			
			Задача = СсылкаНаЗадачу.ПолучитьОбъект();
			Задача.Статус = СтатусРешена;
			Задача.ПроцентВыполнения = 100;
			Задача.ДатаЗакрытия = ТекущаяДата;
			Задача.Записать();
			
			ДанныеОбъекта = Новый Структура;
			ДанныеОбъекта.Вставить("НовыйИсполнитель", Задача.Назначена);
			ДанныеОбъекта.Вставить("НовыйСтатус", СтатусРешена);
			ДанныеОбъекта.Вставить("Порядок", 0);
			ДанныеОбъекта.Вставить("ПроцентВыполнения", 100);
						
			// Добавление информации о изменении статуса задачи на "Решена"
			РегистрыСведений.СвойстваЗадач.Добавить(СсылкаНаЗадачу, ДанныеОбъекта);
			
			// Если объект основание заявка на разработку, то добавить её в таблицу значений
			Если ТипЗнч(Задача.ОбъектОснование) = Тип("ДокументСсылка.ЗаявкаНаРазработку") Тогда
				ТаблицаЗаявок.Добавить().Заявка = Задача.ОбъектОснование;
			КонецЕсли;			
			
			// Запись в историю изменений
			
			ДанныеСтруктура = Новый Структура("Событие, ТекстКомментария", "АвтоматическоеЗакрытиеЗадач", ТекстШаблона);
			Данные = ЗаписатьЗначениеJSON(ДанныеСтруктура);

			СтруктураСообщение = ОбщегоНазначения.ПолучитьСтруктуруДанныхДляЗаписиВИсторию(Ложь);
			СтруктураСообщение.Данные = Данные;
			СтруктураСообщение.Категория = Перечисления.КатегорииСобытийИсторияИзменений.Прочее;
			
			РегистрыСведений.ИсторияИзмененийОбъектовПоСобытиям.Добавить(СсылкаНаЗадачу, СтруктураСообщение);
			
			// Подготовить сообщения для отправки пользователям
			РезультатЗапроса = РегистрыСведений.Участники.ПолучателиОповещения(СсылкаНаЗадачу);
			Получатели = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Пользователь");
			
			// Формирование уведомления
			КатегорияСообщения = Перечисления.КатегорииСообщенийПользователя.АвтоматическоеЗакрытиеЗадач;
			
			// Отправка уведомления на электронную почту			
			СообщениеПользователям = Новый Структура("ТекстСообщения, СообщениеSDMS, Данные, КатегорияСообщения",
				ТекстКомментарияДляСообщения, " добавил(-а) комментарий:", Данные, КатегорияСообщения);
			
			РегистрыСведений.ПодготовленныеСообщенияПользователяПоКатегориям.Добавить(Получатели,
				СсылкаНаЗадачу, СообщениеПользователям, ПараметрыСеанса.ТекущийПользователь);
			
			РегистрыСведений.Комментарии.Добавить(СсылкаНаЗадачу, , , ТекстШаблона, , Истина);
			
			СвойстваЗадачи.Статус = ПредставлениеСтатуса;
			
			СвойстваЗадачи.Вставить("ИндексКартинки", ИндексКартинкиРешена);
			СвойстваЗадачи.Вставить("Пометка", Ложь);
			СвойстваЗадачи.Вставить("Закрыта", Истина);
			
			Обработано = Обработано + 1;
			РезультатОперации.ОбработаноЗадач = РезультатОперации.ОбработаноЗадач + 1;
			РезультатОперации.Сообщение = СтрШаблон(ТекстСообщенияЗадач, Формат(Обработано * Множитель / Количество, "ЧЦ=3"));
			ПоместитьВоВременноеХранилище(РезультатОперации, АдресВоВременномХранилище);
		КонецЦикла;
		
		ТаблицаЗаявок.Свернуть("Заявка");
		
		Количество = ТаблицаЗаявок.Количество();
		Обработано = 0;
		
		// Необходимо пересчитать статусы заявки по группам разработки и системам
		Для Каждого СтрокаТаблицы Из ТаблицаЗаявок Цикл			
			РегистрыСведений.СтатусыЗаявокПоГруппамРазработки.РассчитатьСтатусыПоФилиалам(СтрокаТаблицы.Заявка);			
			РегистрыСведений.СтатусыЗаявокПоСистемам.РассчитатьСтатусыПоСистемам(СтрокаТаблицы.Заявка);
			
			Обработано = Обработано + 1;
			РезультатОперации.ОбработаноЗаявок = РезультатОперации.ОбработаноЗаявок + 1;
			РезультатОперации.Сообщение = СтрШаблон(ТекстСообщенияЗаявок, Формат(Обработано * Множитель / Количество, "ЧЦ=3"));
			ПоместитьВоВременноеХранилище(РезультатОперации, АдресВоВременномХранилище);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		РезультатОперации.ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	РезультатОперации.Завершена = Истина;
	
	Если ПустаяСтрока(РезультатОперации.ТекстОшибки) Тогда
		РезультатОперации.Вставить("ОбработанныеЗадачи", ОбрабатываемыеЗадачи);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатОперации, АдресВоВременномХранилище);
	
КонецПроцедуры

Процедура НайтиНезакрытыеЗадачи(Знач КонецПериода, Знач АдресВоВременномХранилище) Экспорт
	
	НезакрытыеЗадачи = Новый Массив;	
	ТекущаяДата = ТекущаяДатаСеанса();	
	
	// 1. Находим задачи, где с момента последнего тестирования прошло > 10 дней,
	//   исключая выходные
	// 2. Далее проверяем сколько времени прошло с момента последнего комментария,
	//   задачи, где с момента последнего комментария прошло > 10 дней исключая выходные,
	//   попадают в выборку
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
#Область ТекстЗапроса

	"ВЫБРАТЬ
	|	ДокументЗадача.Ссылка КАК Ссылка,
	|	ДокументЗадача.Заказчик КАК Заказчик
	|ПОМЕСТИТЬ ЗадачиТестирования
	|ИЗ
	|	Документ.Задача КАК ДокументЗадача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ДокументЗадача.Статус = СтатусыОбъектов.Ссылка
	|ГДЕ
	|	ДокументЗадача.Дата <= &КонецПериода
	|	И ВЫБОР
	|			КОГДА ДокументЗадача.Статус В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Тестирование), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Протестирован))
	|					ИЛИ СтатусыОбъектов.Родитель В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Тестирование), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Протестирован))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И НЕ ДокументЗадача.ТребуетсяПубликация
	|	И ДокументЗадача.Назначена = ДокументЗадача.Заказчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвойстваЗадачСрезПоследних.Объект КАК Задача,
	|	РАЗНОСТЬДАТ(СвойстваЗадачСрезПоследних.Период, &ТекущаяДата, ДЕНЬ) - КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВыходныеПроизводственногоКалендаря.ДатаКалендаря) - КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РабочиеДниОтпуска.ДатаКалендаря) КАК РабочихДнейНаТестировании
	|ПОМЕСТИТЬ ОтобранныеЗадачи
	|ИЗ
	|	РегистрСведений.СвойстваЗадач.СрезПоследних(
	|			&ТекущаяДата,
	|			Объект В
	|				(ВЫБРАТЬ
	|					ЗадачиТестирования.Ссылка
	|				ИЗ
	|					ЗадачиТестирования КАК ЗадачиТестирования)) КАК СвойстваЗадачСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПроизводственныйКалендарь КАК ВыходныеПроизводственногоКалендаря
	|		ПО СвойстваЗадачСрезПоследних.Период <= ВыходныеПроизводственногоКалендаря.ДатаКалендаря
	|			И (ВыходныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Выходной))
	|			И (ВыходныеПроизводственногоКалендаря.ДатаКалендаря <= &ТекущаяДата)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО СвойстваЗадачСрезПоследних.Объект = ДокументЗадача.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТабельУчетаРабочегоВремени КАК ДанныеОтпускаЗаказчика
	|		ПО (ДанныеОтпускаЗаказчика.Сотрудник = ДокументЗадача.Заказчик)
	|			И (ДанныеОтпускаЗаказчика.ВидВремени В (&Отпуска))
	|			И (ДанныеОтпускаЗаказчика.Дата МЕЖДУ ДокументЗадача.ДатаПоследнегоТестирования И &ТекущаяДата)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроизводственныйКалендарь КАК РабочиеДниОтпуска
	|		ПО (ДанныеОтпускаЗаказчика.Дата = РабочиеДниОтпуска.ДатаКалендаря)
	|			И (РабочиеДниОтпуска.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий))
	|
	|СГРУППИРОВАТЬ ПО
	|	СвойстваЗадачСрезПоследних.Объект,
	|	СвойстваЗадачСрезПоследних.Период
	|
	|ИМЕЮЩИЕ
	|	РАЗНОСТЬДАТ(СвойстваЗадачСрезПоследних.Период, &ТекущаяДата, ДЕНЬ) - КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВыходныеПроизводственногоКалендаря.ДатаКалендаря) - КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РабочиеДниОтпуска.ДатаКалендаря) > 10
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеЗадачи.Задача КАК Задача,
	|	ОтобранныеЗадачи.РабочихДнейНаТестировании КАК РабочихДнейНаТестировании,
	|	ДокументЗадача.Дата КАК Дата,
	|	ДокументЗадача.Назначена КАК НазначенаНа,
	|	ДокументЗадача.Статус КАК Статус,
	|	ДокументЗадача.Заказчик КАК Заказчик,
	|	ДокументЗадача.ДатаПоследнегоТестирования КАК ДатаПоследнегоТестирования,
	|	ЕСТЬNULL(СвязьОбъектовСЗаявкамиНаРазработку.Заявка_Новая, ЗНАЧЕНИЕ(Документ.ЗаявкаНаРазработку.ПустаяСсылка)) КАК Заявка
	|ПОМЕСТИТЬ ТестируемыеПротестированныеЗадачи
	|ИЗ
	|	ОтобранныеЗадачи КАК ОтобранныеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО ОтобранныеЗадачи.Задача = ДокументЗадача.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязьОбъектовСЗаявкамиНаРазработку КАК СвязьОбъектовСЗаявкамиНаРазработку
	|		ПО ((ВЫРАЗИТЬ(СвязьОбъектовСЗаявкамиНаРазработку.Объект КАК Документ.Задача)) = ОтобранныеЗадачи.Задача)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТестируемыеПротестированныеЗадачи.Задача КАК Объект
	|ПОМЕСТИТЬ ОбъектыКомментирования
	|ИЗ
	|	ТестируемыеПротестированныеЗадачи КАК ТестируемыеПротестированныеЗадачи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТестируемыеПротестированныеЗадачи.Заявка
	|ИЗ
	|	ТестируемыеПротестированныеЗадачи КАК ТестируемыеПротестированныеЗадачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СрезПоследнихКомментариев.Период КАК Период,
	|	СрезПоследнихКомментариев.Объект КАК Объект
	|ПОМЕСТИТЬ ПоследниеКомментарииПоОбъектам
	|ИЗ
	|	РегистрСведений.Комментарии.СрезПоследних(
	|			&ТекущаяДата,
	|			Объект В
	|				(ВЫБРАТЬ
	|					ОбъектыКомментирования.Объект
	|				ИЗ
	|					ОбъектыКомментирования)) КАК СрезПоследнихКомментариев
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СрезПоследнихКомментариев.Задача КАК Задача,
	|	СрезПоследнихКомментариев.Заказчик КАК Заказчик,
	|	МАКСИМУМ(СрезПоследнихКомментариев.Дата) КАК Дата
	|ПОМЕСТИТЬ ДатыПоследнихКомментариев
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТестируемыеПротестированныеЗадачи.Задача КАК Задача,
	|		ТестируемыеПротестированныеЗадачи.Заказчик КАК Заказчик,
	|		КомментарииСрезПоследних.Период КАК Дата
	|	ИЗ
	|		ТестируемыеПротестированныеЗадачи КАК ТестируемыеПротестированныеЗадачи
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоследниеКомментарииПоОбъектам КАК КомментарииСрезПоследних
	|			ПО ((ВЫРАЗИТЬ(КомментарииСрезПоследних.Объект КАК Документ.ЗаявкаНаРазработку)) = ТестируемыеПротестированныеЗадачи.Заявка)
	|	ГДЕ
	|		ТестируемыеПротестированныеЗадачи.Заявка <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаРазработку.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТестируемыеПротестированныеЗадачи.Задача,
	|		ТестируемыеПротестированныеЗадачи.Заказчик,
	|		КомментарииСрезПоследних.Период
	|	ИЗ
	|		ТестируемыеПротестированныеЗадачи КАК ТестируемыеПротестированныеЗадачи
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоследниеКомментарииПоОбъектам КАК КомментарииСрезПоследних
	|			ПО ((ВЫРАЗИТЬ(КомментарииСрезПоследних.Объект КАК Документ.Задача)) = ТестируемыеПротестированныеЗадачи.Задача)) КАК СрезПоследнихКомментариев
	|
	|СГРУППИРОВАТЬ ПО
	|	СрезПоследнихКомментариев.Задача,
	|	СрезПоследнихКомментариев.Заказчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыПоследнихКомментариев.Задача КАК Задача,
	|	РАЗНОСТЬДАТ(ДатыПоследнихКомментариев.Дата, &ТекущаяДата, ДЕНЬ) - КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВыходныеПроизводственногоКалендаря.ДатаКалендаря) - КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РабочиеДниОтпуска.ДатаКалендаря) КАК ДнейСПоследнегоКомментария
	|ПОМЕСТИТЬ ПоследниеКомментарииСВыходными
	|ИЗ
	|	ДатыПоследнихКомментариев КАК ДатыПоследнихКомментариев
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроизводственныйКалендарь КАК ВыходныеПроизводственногоКалендаря
	|		ПО ДатыПоследнихКомментариев.Дата <= ВыходныеПроизводственногоКалендаря.ДатаКалендаря
	|			И (ВыходныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Выходной))
	|			И (ВыходныеПроизводственногоКалендаря.ДатаКалендаря <= &ТекущаяДата)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТабельУчетаРабочегоВремени КАК ДатыОтпускаСотрудника
	|		ПО (ДатыОтпускаСотрудника.Сотрудник = ДатыПоследнихКомментариев.Заказчик)
	|			И (ДатыОтпускаСотрудника.ВидВремени В (&Отпуска))
	|			И (ДатыОтпускаСотрудника.Дата МЕЖДУ ДатыПоследнихКомментариев.Дата И &ТекущаяДата)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроизводственныйКалендарь КАК РабочиеДниОтпуска
	|		ПО (ДатыОтпускаСотрудника.Дата = РабочиеДниОтпуска.ДатаКалендаря)
	|			И (РабочиеДниОтпуска.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыПоследнихКомментариев.Задача,
	|	ДатыПоследнихКомментариев.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТестируемыеПротестированныеЗадачи.Задача КАК Задача,
	|	ТестируемыеПротестированныеЗадачи.Дата КАК Дата,
	|	ТестируемыеПротестированныеЗадачи.НазначенаНа КАК НазначенаНа,
	|	ТестируемыеПротестированныеЗадачи.РабочихДнейНаТестировании КАК ДнейНаТестировании,
	|	ТестируемыеПротестированныеЗадачи.Статус КАК Статус,
	|	ЕСТЬNULL(ПоследниеКомментарииСВыходными.ДнейСПоследнегоКомментария, РАЗНОСТЬДАТ(ТестируемыеПротестированныеЗадачи.Дата, &ТекущаяДата, ДЕНЬ)) КАК ДнейБезКомментариев,
	|	НЕ ПоследниеКомментарииСВыходными.Задача ЕСТЬ NULL КАК ЕстьКомментарии
	|ПОМЕСТИТЬ ЗадачиЗаказчикРаботает
	|ИЗ
	|	ТестируемыеПротестированныеЗадачи КАК ТестируемыеПротестированныеЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеКомментарииСВыходными КАК ПоследниеКомментарииСВыходными
	|		ПО ТестируемыеПротестированныеЗадачи.Задача = ПоследниеКомментарииСВыходными.Задача
	|
	|СГРУППИРОВАТЬ ПО
	|	ТестируемыеПротестированныеЗадачи.Задача,
	|	ТестируемыеПротестированныеЗадачи.Дата,
	|	ТестируемыеПротестированныеЗадачи.НазначенаНа,
	|	ТестируемыеПротестированныеЗадачи.РабочихДнейНаТестировании,
	|	ТестируемыеПротестированныеЗадачи.Статус,
	|	ЕСТЬNULL(ПоследниеКомментарииСВыходными.ДнейСПоследнегоКомментария, РАЗНОСТЬДАТ(ТестируемыеПротестированныеЗадачи.Дата, &ТекущаяДата, ДЕНЬ)),
	|	НЕ ПоследниеКомментарииСВыходными.Задача ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиЗаказчикРаботает.Задача КАК Задача,
	|	ЗадачиЗаказчикРаботает.ДнейНаТестировании КАК ДнейНаТестировании,
	|	ЗадачиЗаказчикРаботает.ДнейБезКомментариев КАК ДнейБезКомментариев,
	|	ПРЕДСТАВЛЕНИЕ(ЗадачиЗаказчикРаботает.Задача) КАК ПредставлениеЗадачи,
	|	ПРЕДСТАВЛЕНИЕ(ЗадачиЗаказчикРаботает.Статус) КАК Статус,
	|	ПРЕДСТАВЛЕНИЕ(ЗадачиЗаказчикРаботает.НазначенаНа) КАК НазначенаНа,
	|	ИСТИНА КАК Пометка,
	|	ЛОЖЬ КАК Закрыта,
	|	ЕСТЬNULL(СтатусыОбъектов.ИндексКартинки, 0) КАК ИндексКартинки
	|ИЗ
	|	ЗадачиЗаказчикРаботает КАК ЗадачиЗаказчикРаботает
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ЗадачиЗаказчикРаботает.Статус = СтатусыОбъектов.Ссылка
	|ГДЕ
	|	(НЕ ЗадачиЗаказчикРаботает.ЕстьКомментарии
	|			ИЛИ ЗадачиЗаказчикРаботает.ДнейБезКомментариев > 10)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗадачиЗаказчикРаботает.Дата";
	
#КонецОбласти
		
	Отпуска = УчетТрудозатратВызовСервера.ПолучитьВидыОтпусковСотрудника();
	
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);	
	Запрос.УстановитьПараметр("Отпуска", Отпуска);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДанныеЗадачи = Новый Структура;
		ДанныеЗадачи.Вставить("Задача", Выборка.Задача);
		ДанныеЗадачи.Вставить("Статус", Выборка.Статус);
		ДанныеЗадачи.Вставить("НазначенаНа", Выборка.НазначенаНа);
		ДанныеЗадачи.Вставить("ИндексКартинки", Выборка.ИндексКартинки);
		ДанныеЗадачи.Вставить("Пометка", Выборка.Пометка);
		ДанныеЗадачи.Вставить("Закрыта", Выборка.Закрыта);
		ДанныеЗадачи.Вставить("ПредставлениеЗадачи", Выборка.ПредставлениеЗадачи);
		
		ДнейБезКомментариев = СтрокаСЧислом("; %1 день; ; %1 дня; %1 дней; %1 дня",
			Выборка.ДнейБезКомментариев, ВидЧисловогоЗначения.Количественное);
			
		ДнейНаТестировании = СтрокаСЧислом("; %1 день; ; %1 дня; %1 дней; %1 дня", 
			Выборка.ДнейНаТестировании, ВидЧисловогоЗначения.Количественное);
			
		ДанныеЗадачи.Вставить("ДнейБезКомментариев", ДнейБезКомментариев);
		ДанныеЗадачи.Вставить("ДнейНаТестировании", ДнейНаТестировании);
		
		НезакрытыеЗадачи.Добавить(ДанныеЗадачи);
	КонецЦикла;	
	
	ПоместитьВоВременноеХранилище(НезакрытыеЗадачи, АдресВоВременномХранилище);
	
КонецПроцедуры

#КонецОбласти
	
#КонецЕсли

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#КонецЕсли
