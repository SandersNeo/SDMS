///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Пользователь = ПараметрыСеанса.ТекущийПользователь;
	Период = ТекущаяДатаСеанса();
	
	ОчиститьУстаревшиеИдентификаторы();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьСтраницуТрудозатрат();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СписокСобытий = СтрРазделить(ИмяСобытия, ";");
	ЭтоМассив = СписокСобытий.Количество() > 1; 
	Счетчик = 0;
	
	Для Каждого Событие Из СписокСобытий Цикл
		
		ПараметрСобытия = ?(ЭтоМассив, Параметр[Счетчик], Параметр);
			
		Если Событие = СобытияОповещенияКлиент.ИмяСобытияДобавленияТрудозатрат() Тогда
			
			НайденныйЭлемент = СсылкиЗадач.НайтиПоЗначению(ПараметрСобытия);
			Если НайденныйЭлемент <> Неопределено Тогда
				ОбновитьСтраницуТрудозатрат();
			КонецЕсли;
			
		ИначеЕсли Событие = "Документ.Задача.ИзменениеСтатусаЗадачи"
			ИЛИ Событие = "Документ.Задача.ИзмениласьОценкаТрудозатрат" Тогда
			
			ОбновитьСтраницуТрудозатрат();
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСтраницуТрудозатрат();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	РазрешенныйПериод = УчетТрудозатратВызовСервера.ПолучитьРазрешенныйПериодДобавленияТрудозатрат();	
	УчетТрудозатратКлиент.ПроверитьКорректностьДаты(ЭтотОбъект, Элементы.Период, Период, РазрешенныйПериод);
	
	ОбновитьСтраницуТрудозатрат();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаТрудозатратПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НавигационнаяСсылка = ДанныеСобытия.Href;
	
	Если НЕ ПустаяСтрока(НавигационнаяСсылка) Тогда
		Если СтрНайти(НавигационнаяСсылка, "addTimeWaste") > 0 Тогда
			ДлинаСтроки = 13;
			Позиция = СтрНайти(НавигационнаяСсылка, "addTimeWaste_") + ДлинаСтроки;
			ИдентификаторЗадачи = Сред(НавигационнаяСсылка, Позиция);
			ОткрытьФормуДобавленияТрудозатрат(ИдентификаторЗадачи);
			
		ИначеЕсли СтрНайти(НавигационнаяСсылка, "addActivity_") > 0 Тогда
			ДлинаСтроки = 12;
			Позиция = СтрНайти(НавигационнаяСсылка, "addActivity_") + ДлинаСтроки;
			ИдентификаторАктивности = Сред(НавигационнаяСсылка, Позиция);
			ДобавитьАктивность(ИдентификаторАктивности);
						
		ИначеЕсли ОбщегоНазначенияКлиент.ЭтоВебСсылка(НавигационнаяСсылка)
			ИЛИ ОбщегоНазначенияКлиент.ЭтоНавигационнаяСсылка(НавигационнаяСсылка) Тогда 
			
			ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ДобавитьАктивность(Знач Идентификатор)
	
	НайденныеСтроки = АктивностиЗадач.НайтиСтроки(Новый Структура("GUID", Идентификатор));
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТекущийИдентификаторАктивности = Идентификатор;
		
		НайденнаяСтрока = НайденныеСтроки[0];
		
		ПараметрыЗанесенияТрудозатрат = Новый Структура;
		ПараметрыЗанесенияТрудозатрат.Вставить("Объект", НайденнаяСтрока.Задача);
		ПараметрыЗанесенияТрудозатрат.Вставить("Дата", НайденнаяСтрока.Период);
		ПараметрыЗанесенияТрудозатрат.Вставить("Затрата", (НайденнаяСтрока.Время / 60));
		ПараметрыЗанесенияТрудозатрат.Вставить("Пользователь", Пользователь);
		ПараметрыЗанесенияТрудозатрат.Вставить("Автор", Пользователь);
		
		// ---
		// Временно оставляем поддержки занесения трудозатрат в регистр сведений Трудозатраты
		ПараметрыЗанесенияТрудозатрат.Вставить("Период", НайденнаяСтрока.Период);
		ПараметрыЗанесенияТрудозатрат.Вставить("Задача", НайденнаяСтрока.Задача);
		// ---
		
		ОткрытьФормуДобавленияТрудозатрат(, ПараметрыЗанесенияТрудозатрат);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось открыть форму занесения трудозатрат.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтраницуТрудозатрат()
	
	СтраницаТрудозатрат = ПолучитьСтраницуТрудозатрат();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДобавленияТрудозатрат(Знач ИдентификаторЗадачи = Неопределено, Знач ПараметрыТрудозатрат = Неопределено)
	
	Задача = Неопределено;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СкрытьСлужебныеПоля", Истина);
	
	Если ИдентификаторЗадачи <> Неопределено Тогда
		Для Каждого ЭлементСписка Из СсылкиЗадач Цикл
			Если ЭлементСписка.Представление = ИдентификаторЗадачи Тогда
				Задача = ЭлементСписка.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыОткрытия.Вставить("Объект", Задача);
	ИначеЕсли ПараметрыТрудозатрат <> Неопределено Тогда
		Задача = ПараметрыТрудозатрат.Задача;
		
		ПараметрыОткрытия.Вставить("ПараметрыЗанесенияТрудозатрат", ПараметрыТрудозатрат);
	КонецЕсли;
	
	Если Задача <> Неопределено Тогда
		ОткрытьФорму("Документ.Трудозатраты.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект,
			УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось открыть форму занесения трудозатрат.");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПредставлениеЗадачи(Знач Номер, Знач Наименование, Знач ТипОбъекта)
	
	ИмяОбъект = Метаданные.Документы[ТипОбъекта].Синоним;
	ОписаниеТипаЧисло = ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(10, 0);
	Номер = Формат(ОписаниеТипаЧисло.ПривестиЗначение(СтрЗаменить(Номер, Документы[ТипОбъекта].ПолучитьПрефикс(), "")), "ЧГ=");
	
	Возврат СтрШаблон("%1 %2. %3", ИмяОбъект, Номер, Наименование);
	
КонецФункции

&НаСервере
Функция ПолучитьАдресКартинки(Знач ПредопределенноеИмяСтатуса)
	
	Результат = "";
	
	ПредопределенноеИмяСтатуса = "Статус" + ПредопределенноеИмяСтатуса;
	
	НайденноеЗначение = АдресаКартинок.НайтиПоЗначению(ПредопределенноеИмяСтатуса);
	Если НайденноеЗначение = Неопределено Тогда
		Картинка = БиблиотекаКартинок[ПредопределенноеИмяСтатуса];
		АдресКартинки = ПоместитьВоВременноеХранилище(Картинка, УникальныйИдентификатор);
		НовыйЭлемент = АдресаКартинок.Добавить(ПредопределенноеИмяСтатуса, АдресКартинки);
		
		Результат = НовыйЭлемент.Представление;
	Иначе
		Результат = НайденноеЗначение.Представление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьОписаниеТрудозатраты(Знач СтрокаТаблицы)
	
	Дельта = 60;
	
	Шаблон = "<b>%1</b> Добавлены %2 по категории ""%3"".%4";
	ДатаВФормате = Формат(СтрокаТаблицы.Период, "ДФ='dd MMMM yyyy, Ч:мм.'");
	ПредставлениеВремени = ПолучитьПредставлениеВремени(СтрокаТаблицы.Затрата * Дельта);
	Комментарий = ?(ЗначениеЗаполнено(СтрокаТаблицы.Комментарий), "<br>Комментарий: " + СтрокаТаблицы.Комментарий, "");
	
	Возврат СтрШаблон(Шаблон, ДатаВФормате, ПредставлениеВремени, СтрокаТаблицы.ВидДеятельности, Комментарий);
	
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеВремени(Знач Время, Знач ИспользоватьПредставлениеПустого = Ложь)
	
	// Как работает:
	// Время - это количество минут. Берем пустую дату, добавляем к ней время.
	// Прогоняем полученную дату через Формат(), в результате получается строка
	// формата "3 ч. 12 мин.". Количество часов или минут может быть равным нулю,
	// и строка примет вид "0 ч. 12 мин." или "3 ч. 0 мин." что не красиво.
	// Избавляемся от нулевых часов и минут с помощью СтрЗаменить(). В результате
	// получается красивая строка "12 мин." или "3 ч." или исходная, если нулевых
	// значений не найдено.
	
	// Важно! В начале шаблона форматной строки стоит пробел. Он позволяет исключить
	// ошибочное вырезание "0 ч." в строках вида "20 ч.".
	
	КоличествоМинут = 60;
	
	Результат = Формат('00010101' + (Время * КоличествоМинут), "ДФ=' Ч ""ч."" м ""мин.""'");
	
	Результат = СтрЗаменить(Результат, " 0 ч.", "");
	Результат = СтрЗаменить(Результат, " 0 мин.", "");
	
	Если ИспользоватьПредставлениеПустого И ПустаяСтрока(Результат) Тогда
		Результат = "0 мин.";
	КонецЕсли;
	
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеДня()
	
	Результат = "";
	
	НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса());
	НачалоПериода = НачалоДня(Период);
	
	Дельта = 86400;
	
	Если НачалоТекущегоДня = НачалоПериода Тогда
		Результат = "Сегодня: ";
	ИначеЕсли (НачалоТекущегоДня - НачалоПериода) = Дельта Тогда
		Результат = "Вчера: ";
	КонецЕсли;
	
	Возврат Результат + Формат(Период, "ДФ='д ММММ, дддд'");
	
КонецФункции

&НаСервере
Функция ПолучитьСтатусИВремя(Знач ПредставлениеСтатуса, Знач Время)
	
	Возврат ПредставлениеСтатуса + " (" + ПолучитьПредставлениеВремени(Время) + ")";
	
КонецФункции

&НаСервере
Функция ПолучитьСтраницуТрудозатрат()
	
	Если НЕ ПустаяСтрока(ТекущийИдентификаторАктивности) Тогда
		ДобавитьИдентификаторАктивности(ТекущийИдентификаторАктивности, Период);
		ТекущийИдентификаторАктивности = "";
	КонецЕсли;
	
	Результат = "";
	
	Запрос = Новый Запрос;
	
#Область ТекстЗапроса
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(НастройкиФилиалов.Значение, 0) КАК Смещение
	|ПОМЕСТИТЬ СмещениеЧасовогоПояса
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(
	|			&ТекущаяДата,
	|			Сотрудник = &Исполнитель
	|				И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиФилиалов КАК НастройкиФилиалов
	|		ПО ((ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы)) = НастройкиФилиалов.Филиал)
	|			И (НастройкиФилиалов.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.СмещениеЧасовогоПоясаОтносительноВладивостока))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задача.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОтобранныеОбъекты
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	Задача.Назначена = &Исполнитель
	|	И НЕ Задача.Статус В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СвойстваЗадач.Объект
	|ИЗ
	|	РегистрСведений.СвойстваЗадач КАК СвойстваЗадач
	|ГДЕ
	|	СвойстваЗадач.Автор = &Исполнитель
	|	И СвойстваЗадач.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнутреннееЗадание.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОтобранныеВнЗадания
	|ИЗ
	|	Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
	|ГДЕ
	|	ВнутреннееЗадание.Назначена = &Исполнитель
	|	И НЕ ВнутреннееЗадание.Статус В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументЗадача.Ссылка КАК Ссылка,
	|	ДокументЗадача.Статус КАК Статус,
	|	ДокументЗадача.Номер КАК Номер,
	|	ДокументЗадача.Наименование КАК Наименование
	|ПОМЕСТИТЬ ДанныеПоЗадачам
	|ИЗ
	|	ОтобранныеОбъекты КАК ОтобранныеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ДокументЗадача
	|		ПО ОтобранныеОбъекты.Ссылка = ДокументЗадача.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеОбъекты.Ссылка КАК Задача,
	|	СвойстваЗадач.Период КАК Период,
	|	СмещениеЧасовогоПояса.Смещение КАК Смещение
	|ПОМЕСТИТЬ СобытияЗаДень
	|ИЗ
	|	СмещениеЧасовогоПояса КАК СмещениеЧасовогоПояса,
	|	ОтобранныеОбъекты КАК ОтобранныеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗадач КАК СвойстваЗадач
	|		ПО ОтобранныеОбъекты.Ссылка = СвойстваЗадач.Объект
	|ГДЕ
	|	СвойстваЗадач.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И СвойстваЗадач.Исполнитель = &Исполнитель
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОтобранныеОбъекты.Ссылка,
	|	СвойстваЗадач.Период,
	|	СмещениеЧасовогоПояса.Смещение
	|ИЗ
	|	СмещениеЧасовогоПояса КАК СмещениеЧасовогоПояса,
	|	ОтобранныеОбъекты КАК ОтобранныеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗадач КАК СвойстваЗадач
	|		ПО ОтобранныеОбъекты.Ссылка = СвойстваЗадач.Объект
	|ГДЕ
	|	СвойстваЗадач.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И СвойстваЗадач.Автор = &Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СобытияЗаДень.Задача КАК Задача,
	|	МАКСИМУМ(СвойстваЗадач.Период) КАК НачалоПериода,
	|	СобытияЗаДень.Период КАК ОкончаниеПериода,
	|	СобытияЗаДень.Смещение КАК Смещение
	|ПОМЕСТИТЬ ПериодыСобытий
	|ИЗ
	|	СобытияЗаДень КАК СобытияЗаДень
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗадач КАК СвойстваЗадач
	|		ПО СобытияЗаДень.Период > СвойстваЗадач.Период
	|			И СобытияЗаДень.Задача = СвойстваЗадач.Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	СобытияЗаДень.Задача,
	|	СобытияЗаДень.Период,
	|	СобытияЗаДень.Смещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыСобытий.Задача КАК Задача,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ПериодыСобытий.НачалоПериода, ДЕНЬ) < НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ)
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ), ЧАС, 10 - (ВЫРАЗИТЬ(ПериодыСобытий.Смещение КАК ЧИСЛО)))
	|		ИНАЧЕ ПериодыСобытий.НачалоПериода
	|	КОНЕЦ КАК НачалоСобытия,
	|	ПериодыСобытий.ОкончаниеПериода КАК ОкончаниеСобытия,
	|	СвойстваЗадач.Статус КАК Статус,
	|	ПериодыСобытий.Смещение КАК Смещение
	|ПОМЕСТИТЬ ДополненныеПериодыСобытий
	|ИЗ
	|	ПериодыСобытий КАК ПериодыСобытий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗадач КАК СвойстваЗадач
	|		ПО ПериодыСобытий.НачалоПериода = СвойстваЗадач.Период
	|			И ПериодыСобытий.Задача = СвойстваЗадач.Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеПоЗадачам.Ссылка,
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ), ЧАС, 10 - (ВЫРАЗИТЬ(СмещениеЧасовогоПояса.Смещение КАК ЧИСЛО))),
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ), ЧАС, 19 - (ВЫРАЗИТЬ(СмещениеЧасовогоПояса.Смещение КАК ЧИСЛО))),
	|	ДанныеПоЗадачам.Статус,
	|	СмещениеЧасовогоПояса.Смещение
	|ИЗ
	|	СмещениеЧасовогоПояса КАК СмещениеЧасовогоПояса,
	|	ДанныеПоЗадачам КАК ДанныеПоЗадачам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗадач КАК СвойстваЗадач
	|		ПО ДанныеПоЗадачам.Ссылка = СвойстваЗадач.Объект
	|			И (СвойстваЗадач.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
	|ГДЕ
	|	СвойстваЗадач.Период ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатусыЗаявокПоСистемам.Заявка КАК Заявка,
	|	СтатусыЗаявокПоСистемам.Система КАК Система
	|ПОМЕСТИТЬ ЗаявкиНаРассмотрении
	|ИЗ
	|	РегистрСведений.СтатусыЗаявокПоСистемам КАК СтатусыЗаявокПоСистемам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СистемыЗаявокНазначеныеПользователю КАК СистемыЗаявокНазначеныеПользователю
	|		ПО (СистемыЗаявокНазначеныеПользователю.Заявка = СтатусыЗаявокПоСистемам.Заявка)
	|			И (СистемыЗаявокНазначеныеПользователю.Система = СтатусыЗаявокПоСистемам.Система)
	|			И (СтатусыЗаявокПоСистемам.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Рассмотрение))
	|			И (СистемыЗаявокНазначеныеПользователю.ТекущийИсполнитель = &Исполнитель)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Комментарии.Объект КАК Объект,
	|	КОЛИЧЕСТВО(Комментарии.Идентификатор) КАК КоличествоКомментариев
	|ПОМЕСТИТЬ КомментарииВЗаявках
	|ИЗ
	|	РегистрСведений.Комментарии КАК Комментарии
	|ГДЕ
	|	Комментарии.Пользователь = &Исполнитель
	|	И Комментарии.Объект ССЫЛКА Документ.ЗаявкаНаРазработку
	|	И Комментарии.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	Комментарии.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкиНаРассмотрении.Заявка КАК Заявка,
	|	МинимальныеСтатусыЗаявок.Статус КАК Статус
	|ПОМЕСТИТЬ ВыбранныеЗаявки
	|ИЗ
	|	ЗаявкиНаРассмотрении КАК ЗаявкиНаРассмотрении
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
	|		ПО ЗаявкиНаРассмотрении.Заявка = МинимальныеСтатусыЗаявок.Заявка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КомментарииВЗаявках.Объект,
	|	МинимальныеСтатусыЗаявок.Статус
	|ИЗ
	|	КомментарииВЗаявках КАК КомментарииВЗаявках
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
	|		ПО КомментарииВЗаявках.Объект = МинимальныеСтатусыЗаявок.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыбранныеЗаявки.Заявка КАК Заявка,
	|	ЗаявкаНаРазработку.Наименование КАК Наименование,
	|	ЗаявкаНаРазработку.Номер КАК Номер,
	|	ВыбранныеЗаявки.Статус КАК Статус,
	|	СУММА(ЕСТЬNULL(Трудозатраты.Затрата, 0)) КАК ТрудозатратыФакт
	|ПОМЕСТИТЬ ТрудозатратыЗаявок
	|ИЗ
	|	ВыбранныеЗаявки КАК ВыбранныеЗаявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО ВыбранныеЗаявки.Заявка = ЗаявкаНаРазработку.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК Трудозатраты
	|		ПО (ВыбранныеЗаявки.Заявка = (ВЫРАЗИТЬ(Трудозатраты.Объект КАК Документ.ЗаявкаНаРазработку)))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыбранныеЗаявки.Заявка,
	|	ЗаявкаНаРазработку.Наименование,
	|	ЗаявкаНаРазработку.Номер,
	|	ВыбранныеЗаявки.Статус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополненныеПериодыСобытий.Задача КАК Задача,
	|	СтатусыОбъектов.Наименование КАК СтатусПредставление,
	|	СтатусыОбъектов.ИмяКартинкиВБиблиотеке КАК СтатусИмяПредопределенныхДанных,
	|	ДополненныеПериодыСобытий.ОкончаниеСобытия КАК Период,
	|	РАЗНОСТЬДАТ(ДополненныеПериодыСобытий.НачалоСобытия, ДополненныеПериодыСобытий.ОкончаниеСобытия, МИНУТА) КАК Время
	|ИЗ
	|	ДополненныеПериодыСобытий КАК ДополненныеПериодыСобытий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ДополненныеПериодыСобытий.Статус = СтатусыОбъектов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК Трудозатраты
	|		ПО ДополненныеПериодыСобытий.ОкончаниеСобытия = Трудозатраты.Период
	|			И ДополненныеПериодыСобытий.Задача = Трудозатраты.Объект
	|ГДЕ
	|	Трудозатраты.Объект ЕСТЬ NULL
	|	И ДополненныеПериодыСобытий.НачалоСобытия < ДополненныеПериодыСобытий.ОкончаниеСобытия
	|	И РАЗНОСТЬДАТ(ДополненныеПериодыСобытий.НачалоСобытия, ДополненныеПериодыСобытий.ОкончаниеСобытия, МИНУТА) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ ПО
	|	Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Трудозатраты.Период КАК Период,
	|	Трудозатраты.Объект КАК Задача,
	|	Трудозатраты.Затрата КАК Затрата,
	|	Трудозатраты.ВидДеятельности КАК ВидДеятельности,
	|	Трудозатраты.Комментарий КАК Комментарий
	|ИЗ
	|	ДанныеПоЗадачам КАК ДанныеПоЗадачам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК Трудозатраты
	|		ПО (Трудозатраты.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
	|			И (ДанныеПоЗадачам.Ссылка = (ВЫРАЗИТЬ(Трудозатраты.Объект КАК Документ.Задача)))
	|			И (Трудозатраты.Пользователь = &Исполнитель)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Трудозатраты.Период,
	|	Трудозатраты.Объект,
	|	Трудозатраты.Затрата,
	|	Трудозатраты.ВидДеятельности,
	|	Трудозатраты.Комментарий
	|ИЗ
	|	ТрудозатратыЗаявок КАК ТрудозатратыЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК Трудозатраты
	|		ПО (Трудозатраты.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
	|			И (ТрудозатратыЗаявок.Заявка = (ВЫРАЗИТЬ(Трудозатраты.Объект КАК Документ.ЗаявкаНаРазработку)))
	|			И (Трудозатраты.Пользователь = &Исполнитель)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Трудозатраты.Период,
	|	Трудозатраты.Объект,
	|	Трудозатраты.Затрата,
	|	Трудозатраты.ВидДеятельности,
	|	Трудозатраты.Комментарий
	|ИЗ
	|	ОтобранныеВнЗадания КАК ОтобранныеВнЗадания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК Трудозатраты
	|		ПО (Трудозатраты.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
	|			И (ОтобранныеВнЗадания.Ссылка = (ВЫРАЗИТЬ(Трудозатраты.Объект КАК Документ.ВнутреннееЗадание)))
	|			И (Трудозатраты.Пользователь = &Исполнитель)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоЗадачам.Ссылка КАК Задача,
	|	СтатусыОбъектов.ИмяКартинкиВБиблиотеке КАК СтатусИмяПредопределенныхДанных,
	|	СтатусыОбъектов.Наименование КАК СтатусПредставление,
	|	ДанныеПоЗадачам.Номер КАК Номер,
	|	ДанныеПоЗадачам.Наименование КАК Наименование,
	|	СУММА(ЕСТЬNULL(РегистрТрудозатраты.Затрата, 0)) КАК ТрудозатратыФакт,
	|	ЕСТЬNULL(ПланируемыеТрудозатраты.Трудозатраты, 0) КАК ТрудозатратыПлан
	|ИЗ
	|	ДанныеПоЗадачам КАК ДанныеПоЗадачам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ДанныеПоЗадачам.Статус = СтатусыОбъектов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК РегистрТрудозатраты
	|		ПО ДанныеПоЗадачам.Ссылка = РегистрТрудозатраты.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
	|		ПО (ДанныеПоЗадачам.Ссылка = (ВЫРАЗИТЬ(ПланируемыеТрудозатраты.Объект КАК Документ.Задача)))
	|			И (ПланируемыеТрудозатраты.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПоЗадачам.Ссылка,
	|	СтатусыОбъектов.ИмяКартинкиВБиблиотеке,
	|	СтатусыОбъектов.Наименование,
	|	ДанныеПоЗадачам.Номер,
	|	ДанныеПоЗадачам.Наименование,
	|	ЕСТЬNULL(ПланируемыеТрудозатраты.Трудозатраты, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнутреннееЗадание.Ссылка КАК Задача,
	|	СтатусыОбъектов.ИмяКартинкиВБиблиотеке КАК СтатусИмяПредопределенныхДанных,
	|	СтатусыОбъектов.Наименование КАК СтатусПредставление,
	|	ВнутреннееЗадание.Номер КАК Номер,
	|	ВнутреннееЗадание.Наименование КАК Наименование,
	|	ЕСТЬNULL(ПланируемыеТрудозатраты.Трудозатраты, 0) КАК ТрудозатратыПлан,
	|	СУММА(ЕСТЬNULL(РегистрСведенийТрудозатраты.Затрата, 0)) КАК ТрудозатратыФакт
	|ИЗ
	|	ОтобранныеВнЗадания КАК ОтобранныеВнЗадания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
	|		ПО ОтобранныеВнЗадания.Ссылка = ВнутреннееЗадание.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО (ВнутреннееЗадание.Статус = СтатусыОбъектов.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Трудозатраты КАК РегистрСведенийТрудозатраты
	|		ПО (ВнутреннееЗадание.Ссылка = (ВЫРАЗИТЬ(РегистрСведенийТрудозатраты.Объект КАК Документ.ВнутреннееЗадание)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
	|		ПО (ВнутреннееЗадание.Ссылка = (ВЫРАЗИТЬ(ПланируемыеТрудозатраты.Объект КАК Документ.ВнутреннееЗадание)))
	|			И (ПланируемыеТрудозатраты.ТипТрудозатрат = ЗНАЧЕНИЕ(Перечисление.ТипыТрудозатрат.Разработка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВнутреннееЗадание.Ссылка,
	|	СтатусыОбъектов.ИмяКартинкиВБиблиотеке,
	|	СтатусыОбъектов.Наименование,
	|	ВнутреннееЗадание.Номер,
	|	ВнутреннееЗадание.Наименование,
	|	ЕСТЬNULL(ПланируемыеТрудозатраты.Трудозатраты, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТрудозатратыЗаявок.Заявка КАК Заявка,
	|	ТрудозатратыЗаявок.Наименование КАК Наименование,
	|	ТрудозатратыЗаявок.Номер КАК Номер,
	|	ЕСТЬNULL(КомментарииВЗаявках.КоличествоКомментариев, 0) КАК КоличествоКомментариев,
	|	ЗаявкиНаРассмотрении.Система КАК Система,
	|	СтатусыОбъектов.ИмяКартинкиВБиблиотеке КАК СтатусИмяПредопределенныхДанных,
	|	СтатусыОбъектов.Наименование КАК СтатусПредставление,
	|	ТрудозатратыЗаявок.ТрудозатратыФакт КАК ТрудозатратыФакт
	|ИЗ
	|	ТрудозатратыЗаявок КАК ТрудозатратыЗаявок
	|		ЛЕВОЕ СОЕДИНЕНИЕ КомментарииВЗаявках КАК КомментарииВЗаявках
	|		ПО ТрудозатратыЗаявок.Заявка = КомментарииВЗаявках.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаявкиНаРассмотрении КАК ЗаявкиНаРассмотрении
	|		ПО ТрудозатратыЗаявок.Заявка = ЗаявкиНаРассмотрении.Заявка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО ТрудозатратыЗаявок.Статус = СтатусыОбъектов.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(Наименование),
	|	МАКСИМУМ(Номер),
	|	СРЕДНЕЕ(КоличествоКомментариев),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Система),
	|	МАКСИМУМ(СтатусИмяПредопределенныхДанных),
	|	МАКСИМУМ(СтатусПредставление),
	|	МАКСИМУМ(ТрудозатратыФакт)
	|ПО
	|	Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Трудозатраты.Затрата), 0) КАК Время
	|ИЗ
	|	РегистрСведений.Трудозатраты КАК Трудозатраты
	|ГДЕ
	|	Трудозатраты.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И Трудозатраты.Пользователь = &Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремени.Дата КАК Дата,
	|	ТабельУчетаРабочегоВремени.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ТабельУчетаРабочегоВремени.ПриоритетДляТабеля) КАК ПриоритетДляТабеля
	|ПОМЕСТИТЬ втАктуальныеЗаписиТабеля
	|ИЗ
	|	РегистрСведений.ТабельУчетаРабочегоВремени КАК ТабельУчетаРабочегоВремени
	|ГДЕ
	|	ТабельУчетаРабочегоВремени.Дата = &ТекущаяДата
	|	И ТабельУчетаРабочегоВремени.Сотрудник = &Исполнитель
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабельУчетаРабочегоВремени.Дата,
	|	ТабельУчетаРабочегоВремени.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремени.Дата КАК Дата,
	|	КлассификаторИспользованияРабочегоВремени.РабочееВремя КАК РабочееВремя
	|ПОМЕСТИТЬ ТабельНаПериод
	|ИЗ
	|	РегистрСведений.ТабельУчетаРабочегоВремени КАК ТабельУчетаРабочегоВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторИспользованияРабочегоВремени КАК КлассификаторИспользованияРабочегоВремени
	|		ПО ТабельУчетаРабочегоВремени.ВидВремени = КлассификаторИспользованияРабочегоВремени.Ссылка
	|			И (ТабельУчетаРабочегоВремени.Дата = &ТекущаяДата)
	|			И (ТабельУчетаРабочегоВремени.Сотрудник = &Исполнитель)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втАктуальныеЗаписиТабеля КАК втАктуальныеЗаписиТабеля
	|		ПО ТабельУчетаРабочегоВремени.Дата = втАктуальныеЗаписиТабеля.Дата
	|			И ТабельУчетаРабочегоВремени.Сотрудник = втАктуальныеЗаписиТабеля.Сотрудник
	|			И ТабельУчетаРабочегоВремени.ПриоритетДляТабеля = втАктуальныеЗаписиТабеля.ПриоритетДляТабеля
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТабельНаПериод.РабочееВремя ЕСТЬ NULL
	|				ИЛИ ТабельНаПериод.РабочееВремя = ИСТИНА
	|			ТОГДА ПроизводственныйКалендарь.КоличествоРабочихЧасов
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПлановоеВремя
	|ИЗ
	|	РегистрСведений.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабельНаПериод КАК ТабельНаПериод
	|		ПО ПроизводственныйКалендарь.ДатаКалендаря = ТабельНаПериод.Дата
	|ГДЕ
	|	ПроизводственныйКалендарь.ДатаКалендаря = &ТекущаяДата";
	
#КонецОбласти
	
	Запрос.УстановитьПараметр("Исполнитель", Пользователь);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(Период));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(Период));
	Запрос.УстановитьПараметр("ТекущаяДата", Период);
	
	Пакеты = Запрос.ВыполнитьПакет();
	КоличествоПакетов = Пакеты.Количество();
	
	РезультатАктивности = Пакеты.Получить(КоличествоПакетов - 9);
	РезультатТрудозатраты = Пакеты.Получить(КоличествоПакетов - 8);
	РезультатЗадачи = Пакеты.Получить(КоличествоПакетов - 7);
	РезультатВнЗадания = Пакеты.Получить(КоличествоПакетов - 6);
	РезультатЗаявки = Пакеты.Получить(КоличествоПакетов - 5);
	РезультатыФакт = Пакеты.Получить(КоличествоПакетов - 4);
	РезультатыПлан = Пакеты.Получить(КоличествоПакетов - 1);
		
	Если НЕ РезультатЗадачи.Пустой() ИЛИ НЕ РезультатВнЗадания.Пустой() ИЛИ НЕ РезультатЗаявки.Пустой() Тогда
		ИдентификаторыАктивностей = ПолучитьИдентификаторыАктивностей();
		
		ДеревоАктивностей = РезультатАктивности.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		ТаблицаТрудозатрат = РезультатТрудозатраты.Выгрузить();
		
		Шаблоны = Обработки.ЗанесениеТрудозатрат.Шаблоны();
		
		Результат = Шаблоны.Страница;
		
		Если РезультатыПлан.Пустой() Тогда
			ТрудозатратыПлан = 0;
		Иначе
			Выборка = РезультатыПлан.Выбрать();
			Выборка.Следующий();
			ТрудозатратыПлан = Выборка.ПлановоеВремя;
		КонецЕсли;
		
		Если РезультатыФакт.Пустой() Тогда
			ТрудозатратыФакт = 0;
		Иначе
			Выборка = РезультатыФакт.Выбрать();
			Выборка.Следующий();
			ТрудозатратыФакт = Выборка.Время;
		КонецЕсли;
		
		Результат = СтрЗаменить(Результат, "<!--todayPreview-->", ПолучитьПредставлениеДня());
		Результат = СтрЗаменить(Результат, "<!--todayTimeWastePlan-->", ПолучитьПредставлениеВремени(ТрудозатратыПлан * 60, Истина));
		Результат = СтрЗаменить(Результат, "<!--todayTimeWasteFact-->", ПолучитьПредставлениеВремени(ТрудозатратыФакт * 60, Истина));
		Результат = СтрЗаменить(Результат, "<!--classPlace-->", ?(ТрудозатратыПлан > ТрудозатратыФакт, "redText", ""));
		
		ВыборкаЗадачи = РезультатЗадачи.Выбрать();
		Пока ВыборкаЗадачи.Следующий() Цикл
			ИдентификаторЗадачи = СтрЗаменить(Строка(ВыборкаЗадачи.Задача.УникальныйИдентификатор()), "-", "");
			
			СсылкиЗадач.Добавить(ВыборкаЗадачи.Задача, ИдентификаторЗадачи);
			
			ШаблонЗадачи = Шаблоны.Задача;
			ШаблонЗадачи = СтрЗаменить(ШаблонЗадачи, "<!--taskGUID-->", ИдентификаторЗадачи);
			ШаблонЗадачи = СтрЗаменить(ШаблонЗадачи, "<!--statusImage-->", ПолучитьАдресКартинки(ВыборкаЗадачи.СтатусИмяПредопределенныхДанных));
			ШаблонЗадачи = СтрЗаменить(ШаблонЗадачи, "<!--statusPreview-->", ВыборкаЗадачи.СтатусПредставление);
			ШаблонЗадачи = СтрЗаменить(ШаблонЗадачи, "<!--taskLink-->", ПолучитьНавигационнуюСсылку(ВыборкаЗадачи.Задача));
			ШаблонЗадачи = СтрЗаменить(ШаблонЗадачи, "<!--taskPreview-->", ПодготовитьПредставлениеЗадачи(ВыборкаЗадачи.Номер, ВыборкаЗадачи.Наименование, "Задача"));
			
			ШаблонЗадачи = СтрЗаменить(ШаблонЗадачи, "<!--timeWastePlan-->", ПолучитьПредставлениеВремени(ВыборкаЗадачи.ТрудозатратыПлан * 60, Истина));
			ШаблонЗадачи = СтрЗаменить(ШаблонЗадачи, "<!--timeWasteFact-->", ПолучитьПредставлениеВремени(ВыборкаЗадачи.ТрудозатратыФакт * 60, Истина));
			
			НайденнаяСтрока = ДеревоАктивностей.Строки.Найти(ВыборкаЗадачи.Задача, "Задача");
			Если НайденнаяСтрока <> Неопределено Тогда
				АктивностиЗадачи = "";
				
				ОбщееВремяПоЗадаче = 0;
				
				Для Каждого ПодчиненнаяСтрока Из НайденнаяСтрока.Строки Цикл
					ИдентификаторАктивности = СформироватьИдентификаторАктивности(ВыборкаЗадачи.Задача, ПодчиненнаяСтрока.Период, Пользователь);
					Если ИдентификаторАктивностиСуществует(ИдентификаторыАктивностей, ИдентификаторАктивности, ПодчиненнаяСтрока.Период) Тогда
						Продолжить;
					КонецЕсли;
					
					Шаблон = Шаблоны.Активности.Активность;
					
					Шаблон = СтрЗаменить(Шаблон, "<!--GUID-->", ИдентификаторАктивности);
					Шаблон = СтрЗаменить(Шаблон, "<!--statusImage-->", ПолучитьАдресКартинки(ПодчиненнаяСтрока.СтатусИмяПредопределенныхДанных));
					Шаблон = СтрЗаменить(Шаблон, "<!--statusTimePreview-->", ПолучитьСтатусИВремя(ПодчиненнаяСтрока.СтатусПредставление, ПодчиненнаяСтрока.Время));
					
					АктивностиЗадачи = АктивностиЗадачи + Шаблон;
					
					НоваяСтрока = АктивностиЗадач.Добавить();
					НоваяСтрока.Задача = ВыборкаЗадачи.Задача;
					НоваяСтрока.GUID = ИдентификаторАктивности;
					НоваяСтрока.Время = ПодчиненнаяСтрока.Время;
					НоваяСтрока.Период = ПодчиненнаяСтрока.Период;
					
					ОбщееВремяПоЗадаче = ОбщееВремяПоЗадаче + ПодчиненнаяСтрока.Время;
				КонецЦикла;
				
				ШаблонЗадачи = СтрЗаменить(ШаблонЗадачи, "<!--activityRow-->", АктивностиЗадачи);
			Иначе
				ШаблонЗадачи = СтрЗаменить(ШаблонЗадачи, "<!--activityRow-->", Шаблоны.Активности.НетАктивности);
			КонецЕсли;
			
			ТрудозатратыЗадачи = "";
			
			НайденныеСтроки = ТаблицаТрудозатрат.НайтиСтроки(Новый Структура("Задача", ВыборкаЗадачи.Задача));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ШаблонТрудозатрат = Шаблоны.Трудозатраты.Трудозатрата;
				ШаблонТрудозатрат = СтрЗаменить(ШаблонТрудозатрат, "<!--timeWasteDescription-->", ПолучитьОписаниеТрудозатраты(НайденнаяСтрока));
				
				ТрудозатратыЗадачи = ТрудозатратыЗадачи + ШаблонТрудозатрат;
			КонецЦикла;
			
			ШаблонДобавитьТрудозатраты = Шаблоны.Трудозатраты.ДобавитьТрудозатраты;
			ШаблонДобавитьТрудозатраты = СтрЗаменить(ШаблонДобавитьТрудозатраты, "<!--taskGUID-->", ИдентификаторЗадачи);
			
			ТрудозатратыЗадачи = ТрудозатратыЗадачи + ШаблонДобавитьТрудозатраты;
			ШаблонЗадачи = СтрЗаменить(ШаблонЗадачи, "<!--timeWasteRow-->", ТрудозатратыЗадачи);
			
			Результат = СтрЗаменить(Результат, "<!--taskRow-->", ШаблонЗадачи);
		КонецЦикла;
		
		ВыборкаВнЗадания = РезультатВнЗадания.Выбрать();
		Пока ВыборкаВнЗадания.Следующий() Цикл
			ИдентификаторЗадачи = СтрЗаменить(Строка(ВыборкаВнЗадания.Задача.УникальныйИдентификатор()), "-", "");
			
			СсылкиЗадач.Добавить(ВыборкаВнЗадания.Задача, ИдентификаторЗадачи);
			
			ШаблонЗадачи = Шаблоны.ВнЗадание;
			ШаблонЗадачи = СтрЗаменить(ШаблонЗадачи, "<!--taskGUID-->", ИдентификаторЗадачи);
			ШаблонЗадачи = СтрЗаменить(ШаблонЗадачи, "<!--statusImage-->", ПолучитьАдресКартинки(ВыборкаВнЗадания.СтатусИмяПредопределенныхДанных));
			ШаблонЗадачи = СтрЗаменить(ШаблонЗадачи, "<!--statusPreview-->", ВыборкаВнЗадания.СтатусПредставление);
			ШаблонЗадачи = СтрЗаменить(ШаблонЗадачи, "<!--taskLink-->", ПолучитьНавигационнуюСсылку(ВыборкаВнЗадания.Задача));
			ШаблонЗадачи = СтрЗаменить(ШаблонЗадачи, "<!--taskPreview-->", ПодготовитьПредставлениеЗадачи(ВыборкаВнЗадания.Номер, ВыборкаВнЗадания.Наименование, "ВнутреннееЗадание"));
			
			ШаблонЗадачи = СтрЗаменить(ШаблонЗадачи, "<!--timeWastePlan-->", ПолучитьПредставлениеВремени(ВыборкаВнЗадания.ТрудозатратыПлан * 60, Истина));
			ШаблонЗадачи = СтрЗаменить(ШаблонЗадачи, "<!--timeWasteFact-->", ПолучитьПредставлениеВремени(ВыборкаВнЗадания.ТрудозатратыФакт * 60, Истина));
			
			ТрудозатратыЗадачи = "";
			
			НайденныеСтроки = ТаблицаТрудозатрат.НайтиСтроки(Новый Структура("Задача", ВыборкаВнЗадания.Задача));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ШаблонТрудозатрат = Шаблоны.Трудозатраты.Трудозатрата;
				ШаблонТрудозатрат = СтрЗаменить(ШаблонТрудозатрат, "<!--timeWasteDescription-->", ПолучитьОписаниеТрудозатраты(НайденнаяСтрока));
				
				ТрудозатратыЗадачи = ТрудозатратыЗадачи + ШаблонТрудозатрат;
			КонецЦикла;
			
			ШаблонДобавитьТрудозатраты = Шаблоны.Трудозатраты.ДобавитьТрудозатраты;
			ШаблонДобавитьТрудозатраты = СтрЗаменить(ШаблонДобавитьТрудозатраты, "<!--taskGUID-->", ИдентификаторЗадачи);
			
			ТрудозатратыЗадачи = ТрудозатратыЗадачи + ШаблонДобавитьТрудозатраты;
			ШаблонЗадачи = СтрЗаменить(ШаблонЗадачи, "<!--timeWasteRow-->", ТрудозатратыЗадачи);
			
			Результат = СтрЗаменить(Результат, "<!--taskRow-->", ШаблонЗадачи);
		КонецЦикла;
		
		ВыборкаЗаявки = РезультатЗаявки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗаявки.Следующий() Цикл
			ИдентификаторЗадачи = СтрЗаменить(Строка(ВыборкаЗаявки.Заявка.УникальныйИдентификатор()), "-", "");
			
			СсылкиЗадач.Добавить(ВыборкаЗаявки.Заявка, ИдентификаторЗадачи);
			
			ШаблонЗаявки = Шаблоны.Заявка;
			ШаблонЗаявки = СтрЗаменить(ШаблонЗаявки, "<!--taskGUID-->", ИдентификаторЗадачи);
			ШаблонЗаявки = СтрЗаменить(ШаблонЗаявки, "<!--statusImage-->", ПолучитьАдресКартинки(ВыборкаЗаявки.СтатусИмяПредопределенныхДанных));
			ШаблонЗаявки = СтрЗаменить(ШаблонЗаявки, "<!--statusPreview-->", ВыборкаЗаявки.СтатусПредставление);
			ШаблонЗаявки = СтрЗаменить(ШаблонЗаявки, "<!--taskLink-->", ПолучитьНавигационнуюСсылку(ВыборкаЗаявки.Заявка));
			ШаблонЗаявки = СтрЗаменить(ШаблонЗаявки, "<!--taskPreview-->", ПодготовитьПредставлениеЗадачи(ВыборкаЗаявки.Номер, ВыборкаЗаявки.Наименование, "ЗаявкаНаРазработку"));
			
			ШаблонЗаявки = СтрЗаменить(ШаблонЗаявки, "<!--timeWastePlan-->", "");
			ШаблонЗаявки = СтрЗаменить(ШаблонЗаявки, "<!--timeWasteFact-->", ПолучитьПредставлениеВремени(ВыборкаЗаявки.ТрудозатратыФакт * 60, Истина));
			
			АктивностиЗаявки = "";
			ШаблонАктивности = Шаблоны.Активности.АктивностьЗаявки;
			
			Если ВыборкаЗаявки.Система > 0 Тогда
				НазначенныеСистемы = Новый Массив;
				
				ВыборкаСистем = ВыборкаЗаявки.Выбрать();
				Пока ВыборкаСистем.Следующий() Цикл
					НазначенныеСистемы.Добавить(ВыборкаСистем.Система);
				КонецЦикла;
				
				Если НазначенныеСистемы.Количество() = 1 Тогда
					ТекстШаблона = "Вы назначены рассматривать заявку по системе ""%1"". ";
				Иначе
					ТекстШаблона = "Вы назначены рассматривать заявку по системам ""%1"". ";
				КонецЕсли;
				
				АктивностиЗаявки = СтрШаблон(ТекстШаблона, СтрСоединить(НазначенныеСистемы, ", "));
			КонецЕсли;
			
			Если ВыборкаЗаявки.КоличествоКомментариев > 0 Тогда
				КоличествоКомментариев = СтрокаСЧислом(";%1 комментарий;;%1 комментария;%1 комментариев;%1 комментария",
					ВыборкаЗаявки.КоличествоКомментариев, ВидЧисловогоЗначения.Количественное);
				АктивностиЗаявки = СтрШаблон("%1Вы оставили %2.", АктивностиЗаявки, КоличествоКомментариев);
			КонецЕсли;
			
			АктивностиЗаявки = СтрЗаменить(ШаблонАктивности, "<!--ActivityText-->", АктивностиЗаявки);
			ШаблонЗаявки = СтрЗаменить(ШаблонЗаявки, "<!--activityRow-->", АктивностиЗаявки);
			
			ТрудозатратыЗадачи = "";
			
			НайденныеСтроки = ТаблицаТрудозатрат.НайтиСтроки(Новый Структура("Задача", ВыборкаЗаявки.Заявка));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ШаблонТрудозатрат = Шаблоны.Трудозатраты.Трудозатрата;
				ШаблонТрудозатрат = СтрЗаменить(ШаблонТрудозатрат, "<!--timeWasteDescription-->", ПолучитьОписаниеТрудозатраты(НайденнаяСтрока));
				
				ТрудозатратыЗадачи = ТрудозатратыЗадачи + ШаблонТрудозатрат;
			КонецЦикла;
			
			ШаблонДобавитьТрудозатраты = Шаблоны.Трудозатраты.ДобавитьТрудозатраты;
			ШаблонДобавитьТрудозатраты = СтрЗаменить(ШаблонДобавитьТрудозатраты, "<!--taskGUID-->", ИдентификаторЗадачи);
			
			ТрудозатратыЗадачи = ТрудозатратыЗадачи + ШаблонДобавитьТрудозатраты;
			ШаблонЗаявки = СтрЗаменить(ШаблонЗаявки, "<!--timeWasteRow-->", ТрудозатратыЗадачи);
			
			Результат = СтрЗаменить(Результат, "<!--taskRow-->", ШаблонЗаявки);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область РаботаСДополнительнымиДанными

// Область содержит процедуры и функции для временного хранения добавленных
// активностей. При добавлении активности происходит хеш активности записывается
// в настройки и хранится там в течение семи дней. Сохраненные хеши используются
// при выводе списка активностей для исключения вывода уже добавленных активностей.

&НаСервереБезКонтекста
Процедура ДобавитьИдентификаторАктивности(Знач ИдентификаторАктивности, Знач Период)
	
	КлючЭлемента = НачалоДня(Период);
	ИдентификаторыАктивности = ПолучитьИдентификаторыАктивностей();
	
	НайденныйЭлемент = ИдентификаторыАктивности.Получить(КлючЭлемента);
	Если НайденныйЭлемент = Неопределено Тогда
		НайденныйЭлемент = Новый Массив;
	КонецЕсли;
	
	НайденныйЭлемент.Добавить(ИдентификаторАктивности);
	
	ИдентификаторыАктивности.Вставить(КлючЭлемента, НайденныйЭлемент);
	
	СохранитьИдентификаторыАктивностей(ИдентификаторыАктивности);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИдентификаторАктивностиСуществует(Знач ИдентификаторыАктивностей, Знач ПроверяемыйИдентификатор, Знач Период)
	
	Найден = Ложь;
	
	КлючЭлемента = НачалоДня(Период);
	
	НайденныйЭлемент = ИдентификаторыАктивностей.Получить(КлючЭлемента);
	Если НайденныйЭлемент <> Неопределено Тогда
		Если НайденныйЭлемент.Найти(ПроверяемыйИдентификатор) <> Неопределено Тогда
			Найден = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Найден;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючиНастроек()
	
	Ключи = Новый Структура;
	Ключи.Вставить("Объект", "Обработка.ЗанесениеТрудозатрат.Форма");
	Ключи.Вставить("Настройка", "ИдентификаторыАктивностей");
	
	Возврат Ключи;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОчиститьУстаревшиеИдентификаторы()
	
	ИдентификаторыАктивностей = ПолучитьИдентификаторыАктивностей();
	Неделя = 604800;
	
	ДатаОтсечки = НачалоДня(ТекущаяДатаСеанса() - Неделя);
	
	МассивНаУдаление = Новый Массив;
	Для Каждого ЭлементСоответствия Из ИдентификаторыАктивностей Цикл
		Если ЭлементСоответствия.Ключ < ДатаОтсечки Тогда
			МассивНаУдаление.Добавить(ЭлементСоответствия.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючЭлемента Из МассивНаУдаление Цикл
		ИдентификаторыАктивностей.Удалить(КлючЭлемента);
	КонецЦикла;
	
	СохранитьИдентификаторыАктивностей(ИдентификаторыАктивностей);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИдентификаторыАктивностей()
	
	Ключи = КлючиНастроек();
	ИдентификаторыАктивностей = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(Ключи.Объект, Ключи.Настройка);
	
	Если ИдентификаторыАктивностей = Неопределено Тогда
		ИдентификаторыАктивностей = Новый Соответствие;
	КонецЕсли;
	
	Возврат ИдентификаторыАктивностей;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьИдентификаторыАктивностей(Знач ИдентификаторыАктивностей)
	
	Ключи = КлючиНастроек();
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(Ключи.Объект, Ключи.Настройка, ИдентификаторыАктивностей);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьИдентификаторАктивности(Знач Задача, Знач Период, Знач Пользователь)
	
	ИдентификаторЗадачи = Задача.УникальныйИдентификатор();
	ИдентификаторПользователя = Пользователь.УникальныйИдентификатор();
	СтрокаДляХеширования = Строка(ИдентификаторЗадачи) + Строка(ИдентификаторПользователя) + Период;
	
	Возврат Хеш(СтрокаДляХеширования);
	
КонецФункции

&НаСервереБезКонтекста
Функция Хеш(Знач Строка)
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(Строка);
	
	Возврат СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	
КонецФункции

#КонецОбласти

#КонецОбласти
