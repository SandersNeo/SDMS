///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

// Пользовательские настройки
&НаКлиенте
Перем НастройкиФормы;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РегистрыСведений.ОтслеживаниеИспользованияФункциональности.ОткрытиеФормы(ИмяФормы);
	НастройкиФормы = ПолучитьНастройкиФормы();
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(НастройкиФормы);

	ЗаполнитьНастройки(НастройкиФормы);

	СписокВыбора = Канбан_ПолучитьСписокПользователей(Канбан_Назначена, Канбан_Филиал);
	Элементы.Канбан_Назначена.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	
	Элементы.ПанельНастройкиКанбана.Видимость = (ТипКанбанаСтрока <> "Кастомный");
	Элементы.Канбан_Филиал.Видимость = (ТипКанбанаСтрока <> "Пулзаявок");
	Элементы.Канбан_ВидОчереди.Видимость = (ТипКанбанаСтрока = "Пулзаявок");
	Элементы.Канбан_Назначена.Видимость = (ТипКанбанаСтрока = "Задача" ИЛИ ТипКанбанаСтрока = "Внутреннеезадание");
	
	СформироватьКанбанДоску(НастройкиФормы[ПолучитьИмяНастройкиКанбана(ТипКанбанаСтрока)]);
	
	Если КлиентскоеПриложение.ТипПриложения() = ТипКлиентскогоПриложения.ВебКлиент Тогда
		Элементы.Канбан_HTML.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтоАдресВременногоХранилища(АдресВоВременномХранилище) Тогда
		НастройкиФормы = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	Иначе
		НастройкиФормы = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
	
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура Канбан_ВидОчередиПриИзменении(Элемент)
	
	НастройкиФормы.Канбан_ВидОчереди = Канбан_ВидОчереди;
	ОбработатьИзменениеПараметров();
	
КонецПроцедуры

 &НаКлиенте
Процедура Канбан_НазначенаПриИзменении(Элемент)
	
	НастройкиФормы.Канбан_Назначена = Канбан_Назначена; 
	СохранитьНастройкиФормы(НастройкиФормы);
	ОбновитьКанбан();
	
КонецПроцедуры

&НаКлиенте
Процедура Канбан_НазначенаОчистка(Элемент, СтандартнаяОбработка)
		
	НастройкиФормы.Канбан_Назначена = Канбан_Назначена; 
	ОбработатьИзменениеПараметров();
	
КонецПроцедуры

&НаКлиенте
Процедура Канбан_ТипПриИзменении(Элемент)  
		
	НастройкиФормы.Канбан_Тип = Канбан_Тип;
	ТипКанбанаСтрока = УправлениеИнструментамиРазработкиКлиентСервер.ПредставлениеПеречисления(Канбан_Тип);
	
	Элементы.ПанельНастройкиКанбана.Видимость = (ТипКанбанаСтрока <> "Кастомный");
	Элементы.Канбан_Филиал.Видимость = (ТипКанбанаСтрока <> "Пулзаявок");
	Элементы.Канбан_ВидОчереди.Видимость = (ТипКанбанаСтрока = "Пулзаявок");
	Элементы.Канбан_Назначена.Видимость = (ТипКанбанаСтрока = "Задача" ИЛИ ТипКанбанаСтрока = "Внутреннеезадание");
	
	Если Элементы.ПанельНастройкиКанбана.Видимость Тогда
		ИмяНастройкиКанбана = ПолучитьИмяНастройкиКанбана(ТипКанбанаСтрока);
		ОбновитьПредставлениеФильтровНаСервере(НастройкиФормы[ИмяНастройкиКанбана].Фильтр);
	КонецЕсли;
		
	ОбработатьИзменениеПараметров();
	
КонецПроцедуры

&НаКлиенте
Процедура Канбан_ФилиалПриИзменении(Элемент)
	
	СписокВыбора = Канбан_ПолучитьСписокПользователей(Канбан_Назначена, Канбан_Филиал);
	Элементы.Канбан_Назначена.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	
	НастройкиФормы.Канбан_Филиал = Канбан_Филиал;
	НастройкиФормы.Канбан_Назначена = Канбан_Назначена;
	
	ОбработатьИзменениеПараметров();
	
КонецПроцедуры

&НаКлиенте
Процедура Канбан_ФилиалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТолькоФилиалыСНаправлением", Истина);
	ПараметрыОткрытия.Вставить("ТолькоIT", ТипКанбанаСтрока = "Задача");
	
	Оповещение = Новый ОписаниеОповещения("Канбан_ФилиалВыбор", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.Филиалы.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект
		,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры
	
&НаКлиенте
Процедура Канбан_ФилиалАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФилиалАвтоПодборНаСервере(Текст, ДанныеВыбора, ТипКанбанаСтрока = "Задача");
	
КонецПроцедуры

&НаКлиенте
Процедура Канбан_ФилиалОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ФилиалАвтоПодборНаСервере(Текст, ДанныеВыбора, ТипКанбанаСтрока = "Задача");
	
КонецПроцедуры

&НаКлиенте
Процедура Канбан_HTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НавигационнаяСсылка = ДанныеСобытия.Href;
	
	ПозицияСсылкиНаТрудозатраты = СтрНайти(НРег(НавигационнаяСсылка), "elapsedtime_");
	
	Если ПозицияСсылкиНаТрудозатраты <> 0 Тогда
		ИдентификаторТрудозатрат = Новый УникальныйИдентификатор(Сред(НавигационнаяСсылка, ПозицияСсылкиНаТрудозатраты + 12)); 
			
		ПараметрыОткрытия = Новый Структура("ИдентификаторОбъекта, СкрытьСлужебныеПоля, ТипКанбана", ИдентификаторТрудозатрат, Истина, Канбан_Тип);
		
		ОткрытьФорму("Документ.Трудозатраты.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект,
			ЭтотОбъект.УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);			
	Иначе	
		УправлениеИнструментамиРазработкиКлиент.ПриНажатииПоляHTMLДокумента(ДанныеСобытия, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ПараметрыОткрытия = ИнтерфейсПриложенияКлиент.СформироватьПараметрыОткрытия();
		
	ПараметрыОткрытия.ПрочиеОтборы.Значение = НастройкиФормы[ПолучитьИмяНастройкиКанбана(ТипКанбанаСтрока)].Фильтр;
	ПараметрыОткрытия.ПрочиеОтборы.Использование = Истина;
	
	ПараметрыОткрытия.НастройкиПрочиеОтборы = "Справочники.ЭтапыКанбана.ПолучитьНастройкуПрочихОтборов(Параметры)";
	
	ПараметрыОткрытия.Вставить("ТипКанбана", Канбан_Тип);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеНастроекОтборов", ЭтотОбъект);
	ИнтерфейсПриложенияКлиент.ОткрытьФормуНастройкиИнструментов(ЭтотОбъект, ПараметрыОткрытия, ОписаниеОповещения);
	
КонецПроцедуры	

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Элементы.Канбан_HTML.Документ.defaultView.expandList();
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Элементы.Канбан_HTML.Документ.defaultView.collapseList();
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьНастройки(НастройкиФормы)

	Канбан_Филиал = НастройкиФормы.Канбан_Филиал; 
	Канбан_Тип = НастройкиФормы.Канбан_Тип; 
	Канбан_Назначена = НастройкиФормы.Канбан_Назначена;
	Канбан_ВидОчереди = НастройкиФормы.Канбан_ВидОчереди;
	
	Если НЕ ЗначениеЗаполнено(Канбан_Тип) Тогда 
		Канбан_Тип = Перечисления.ТипыКанбана.ЗадачаНовый;
	КонецЕсли;

	ТипКанбанаСтрока = УправлениеИнструментамиРазработкиКлиентСервер.ПредставлениеПеречисления(Канбан_Тип);

	ИмяНастройкиКанбана = ПолучитьИмяНастройкиКанбана(ТипКанбанаСтрока);
	УправлениеИнструментамиРазработки.ОбновитьПредставлениеФильтров(Элементы["ОткрытьФормуНастроек"], 
		НастройкиФормы[ИмяНастройкиКанбана].Фильтр);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция Канбан_ПолучитьСписокПользователей(Канбан_Назначена, Знач Филиал)
		
	МассивПользователей = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛичныеДелаСрезПоследних.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ЛичныеДелаСрезПоследних.Сотрудник = Пользователи.Ссылка
	|ГДЕ
	|	ЛичныеДелаСрезПоследних.Данные = &Филиал
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователи.Наименование"; 
	
	Запрос.УстановитьПараметр("Филиал", Филиал);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивПользователей.Добавить(Выборка.Сотрудник);
	КонецЦикла;
	
	Если МассивПользователей.Найти(Канбан_Назначена) = Неопределено Тогда
		Канбан_Назначена = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;     
	
	Возврат МассивПользователей;
	
КонецФункции
	
&НаКлиенте
Процедура Канбан_ФилиалВыбор(Результат, ДополнительныеДанные) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Канбан_Филиал = Результат;
		
		СписокВыбора = Канбан_ПолучитьСписокПользователей(Канбан_Назначена, Канбан_Филиал);
		Элементы.Канбан_Назначена.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
		
		НастройкиФормы.Канбан_Филиал = Канбан_Филиал;
		НастройкиФормы.Канбан_Назначена = Канбан_Назначена;
		
		ОбработатьИзменениеПараметров();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеФильтровНаСервере(Фильтр)
	
	УправлениеИнструментамиРазработки.ОбновитьПредставлениеФильтров(Элементы["ОткрытьФормуНастроек"], Фильтр);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКанбан()
	
	Элементы.Канбан_HTML.Документ.defaultView.updateKanban();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеНастроекОтборов(Знач НастройкиКанбан, Знач ДополнительныеПараметры) Экспорт
	
	Если НастройкиКанбан = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяНастройкиКанбана = ПолучитьИмяНастройкиКанбана(ТипКанбанаСтрока);
	НастройкиФормы[ИмяНастройкиКанбана].Фильтр = НастройкиКанбан.ПрочиеОтборы;
	
	ОбработатьИзменениеНастроекОтборовНаСервере(НастройкиФормы, ИмяНастройкиКанбана);
	ОбновитьКанбан();
		
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеНастроекОтборовНаСервере(Знач НастройкиФормы, Знач ИмяНастройкиКанбана)
	
	СохранитьНастройкиФормы(НастройкиФормы);
	УправлениеИнструментамиРазработки.ОбновитьПредставлениеФильтров(Элементы["ОткрытьФормуНастроек"], НастройкиФормы[ИмяНастройкиКанбана].Фильтр);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПараметров()
	
	ПараметрыСтрокой = ОбработатьИзменениеПараметровНаСервере(НастройкиФормы);
	Элементы.Канбан_HTML.Документ.defaultView.updateKanbanFields(
		ПараметрыСтрокой.Филиал, ПараметрыСтрокой.Тип, ПараметрыСтрокой.ВидОчереди);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработатьИзменениеПараметровНаСервере(Знач НастройкиФормы)
	
	СохранитьНастройкиФормы(НастройкиФормы);
	
	Данные = Новый Структура("Филиал, Тип, ВидОчереди", "", "", "");
	
	Если ЗначениеЗаполнено(НастройкиФормы.Канбан_Филиал) Тогда
		Данные.Филиал = XMLСтрока(НастройкиФормы.Канбан_Филиал);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиФормы.Канбан_Тип) Тогда
		Данные.Тип = XMLСтрока(НастройкиФормы.Канбан_Тип);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиФормы.Канбан_ВидОчереди) Тогда
		Данные.ВидОчереди = XMLСтрока(НастройкиФормы.Канбан_ВидОчереди);
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкиФормы() Экспорт
	
	Перем ЗначениеНастройки;
	
	НастройкиФормы = Новый Структура;
	
	СписокТипов = Новый Массив;
	СписокТипов.Добавить(Перечисления.ТипыКанбана.ЗадачаНовый);
	СписокТипов.Добавить(Перечисления.ТипыКанбана.ВнутреннееЗаданиеНовый);
	СписокТипов.Добавить(Перечисления.ТипыКанбана.Кастомный);	
	СписокТипов.Добавить(Перечисления.ТипыКанбана.ЗаявкиМоегоФилиала);	
	СписокТипов.Добавить(Перечисления.ТипыКанбана.ПулЗаявокНовый);
	
	Для Каждого Тип Из СписокТипов Цикл
		ПредставлениеТипКанбана = УправлениеИнструментамиРазработкиКлиентСервер.ПредставлениеПеречисления(Тип);		
		НастройкиФормы.Вставить(ПолучитьИмяНастройкиКанбана(ПредставлениеТипКанбана),
			Новый Структура("Фильтр, Настройки", Новый Структура, Новый Структура));
	КонецЦикла;

	НастройкиФормы.Вставить("Канбан_Филиал", ПараметрыСеанса.Филиал);  
	НастройкиФормы.Вставить("Канбан_Тип", Перечисления.ТипыКанбана.ЗадачаНовый); 
	НастройкиФормы.Вставить("Канбан_ВидОчереди", Перечисления.ВидыОчереди.ПустаяСсылка());
	НастройкиФормы.Вставить("Канбан_Назначена", Справочники.Пользователи.ПустаяСсылка()); 	
	
	СвойстваНастройки = Обработки.Канбан.СвойстваСохраняемойНастройки();

	// Восстановление сохраненных параметров
	СохраненныеНастройки = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(
		СвойстваНастройки.КлючОбъекта, СвойстваНастройки.КлючНастроек);
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда	
		// Перебор всех элементом структуры настроек. Если элемент найден в сохраненной
		// настройке, его значение присваивается исходному свойству. В противном случае
		// используется значение по-умолчанию.
		Для Каждого Настройка Из НастройкиФормы Цикл				
			ИмяКлюча = Настройка.Ключ;
			// Если значение сохраненной настройки не существует
			// Также если сохранен пустой список значений - не загружаем настройки.
			Если НЕ СохраненныеНастройки.Свойство(ИмяКлюча, ЗначениеНастройки) Тогда
				Продолжить;
			КонецЕсли;
			
			// Если типы настроек соответствуют, присваиваем значение
			Если ТипЗнч(Настройка.Значение) = ТипЗнч(ЗначениеНастройки) Тогда
				НастройкиФормы.Вставить(ИмяКлюча, ЗначениеНастройки);
			КонецЕсли;
		КонецЦикла;	
	Иначе
		СохранитьНастройкиФормы(НастройкиФормы);
	КонецЕсли;
		
	Возврат НастройкиФормы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяНастройкиКанбана(ТипКанбанаСтрока)   
	
	Возврат СтрШаблон("НастройкиКанбан%1", ТипКанбанаСтрока);
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормы(Знач Настройки)
	
	СвойстваНастроек = Обработки.Канбан.СвойстваСохраняемойНастройки();
	ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(СвойстваНастроек.КлючОбъекта,
		СвойстваНастроек.КлючНастроек, Настройки);
			
КонецПроцедуры

&НаСервере
Процедура СформироватьКанбанДоску(Знач НастройкиКанбан)
		
	ЭтоПродуктоваяБаза = ПовторноеИспользованиеВызовСервера.ЭтоПродуктоваяБаза();
		
	Если НЕ ЭтоПродуктоваяБаза Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнены настройки подключения к тестовой базе");	
	КонецЕсли;	
	
	АдресБазы = Константы.КорневойURL.Получить();
	АдресПубликации = АдресБазы + "/services/hs/api";
	ДанныеПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыСеанса.ТекущийПользователь, "Наименование, Почта");
	
	ИнтервалОпроса = Формат(Константы.ИнтервалОпросаВМилисекундах.Получить(), "ЧГ=0");
	Если НЕ ЗначениеЗаполнено(ИнтервалОпроса) Тогда
		ИнтервалОпроса = "5000";
	КонецЕсли;
	
	ШаблонДоски = Обработки.Канбан.ПолучитьМакет("ШаблонHTML").ПолучитьТекст();
	ПараметрыСкрипта = СтрШаблон(
		"		window.user = '%1';
		|		window.fullname = '%2';
		|		window.baseUrl = '%3';
		|		window.pollingInterval = %4;",
		ДанныеПользователя.Почта, ДанныеПользователя.Наименование, АдресПубликации, ИнтервалОпроса);
	
	ТекстHTML = СтрЗаменить(ШаблонДоски, "<!-- window_vars -->", ПараметрыСкрипта);
	
	Если ЗначениеЗаполнено(Канбан_Тип) И (ЗначениеЗаполнено(Канбан_Филиал) ИЛИ ЗначениеЗаполнено(Канбан_ВидОчереди)) Тогда
		Филиал = ?(ЗначениеЗаполнено(Канбан_Филиал), XMLСтрока(Канбан_Филиал), "");
		ВидОчереди = ?(ЗначениеЗаполнено(Канбан_ВидОчереди), XMLСтрока(Канбан_ВидОчереди), "");
		
		ШаблонПараметров = СтрШаблон("updateKanbanFields('%1', '%2', '%3');", Филиал, XMLСтрока(Канбан_Тип), ВидОчереди);
	Иначе
		ШаблонПараметров = "";
	КонецЕсли;
	
	Версия = РегистрыСведений.ВерсииАссетов.ПолучитьТекущуюВерсию(Справочники.ТипыАссетов.Канбан);
	
	Ассеты = АдресБазы + "/assets/kanban/";
	ТекстHTML = СтрЗаменить(ТекстHTML, "<!-- url -->", Ассеты);	
	ТекстHTML = СтрЗаменить(ТекстHTML, "<!-- version -->", СтрШаблон("?v%1", Версия));
	Канбан_HTML = СтрЗаменить(ТекстHTML, "<!-- script_template -->", ШаблонПараметров);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ФилиалАвтоПодборНаСервере(СтрокаПоиска, ДанныеВыбора, ТолькоIT)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 10
	|	Филиалы.Ссылка КАК Филиал,
	|	Филиалы.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиФилиалов КАК НастройкиФилиалов
	|		ПО Филиалы.Ссылка = НастройкиФилиалов.Филиал
	|			И (НастройкиФилиалов.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.НаправлениеРазработки))
	|			И (НастройкиФилиалов.Значение <> ЗНАЧЕНИЕ(Справочник.НаправленияРазработки.ПустаяСсылка))
	|ГДЕ
	|	Филиалы.Родитель = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
	|	И НЕ Филиалы.ПометкаУдаления
	|	И Филиалы.Наименование ПОДОБНО ""%"" + &СтрокаПоиска + ""%""
	|	И ВЫБОР
	|			КОГДА &ТолькоIT
	|				ТОГДА Филиалы.ТипФилиала <> ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.НеIT)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Филиалы.Наименование";
	
	Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска);
	Запрос.УстановитьПараметр("ТолькоIT", ТолькоIT);

	Выборка = Запрос.Выполнить().Выбрать();
	ДанныеВыбора = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		Представление = СтрНайтиИВыделитьОформлением(Выборка.Наименование, СтрокаПоиска);
		ДанныеВыбора.Добавить(Выборка.Филиал, Представление);
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти
