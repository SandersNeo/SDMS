///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем СвойстваПользователяИБ;

// Признак изменения флага Недействителен
Перем ИзменилосьСостояниеНедействителен;

// Состояние объекта до записи
Перем ОбъектДоЗаписи;

Перем ЭтоНовыйПользователь;

// Признак существования обмена данными
Перем ПользователиПриходятОбменом;

Перем ПользовательСуществуетИБ;

// Хранит описание изменений объекта
Перем ОписаниеИзменений;

#КонецОбласти
	
#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка ИЛИ ЭтоГруппа Тогда
		Возврат;
	КонецЕсли; 
	
	ПользователиПриходятОбменом = ИнтеграцияДополнительныхПодсистем.ПодсистемаСуществует("ОбменДанными");
	
	ЭтоНовыйПользователь = ЭтоНовый();
	
	ОбъектДоЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Недействителен, Наименование, Почта");
		
	ИзменилосьСостояниеНедействителен = Недействителен <> ОбъектДоЗаписи.Недействителен;
	ДополнительныеСвойства.Вставить("ИзменилосьНаименование", Наименование <> ОбъектДоЗаписи.Наименование);
	
	ФИО = ОбщегоНазначенияКлиентСервер.ПолучитьФамилиюИнициалыПользователя(Наименование);
	
	ДополнительныеСвойства.Свойство("СвойстваПользователяИБ", СвойстваПользователяИБ);
	
	Если СвойстваПользователяИБ <> Неопределено Тогда	
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПользовательСуществуетИБ = Ложь;
		ТекущееИмяПользователяИБ = "";
		Если ЗначениеЗаполнено(СвойстваПользователяИБ.УникальныйИдентификатор) Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(СвойстваПользователяИБ.УникальныйИдентификатор);
			
			Если ПользовательИБ = Неопределено Тогда
				ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
			Иначе 
				ПользовательСуществуетИБ  = Истина;
				ТекущееИмяПользователяИБ = ПользовательИБ.Имя;
			КонецЕсли;
		Иначе
			ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
		КонецЕсли;
		
		ПользовательИБ.АутентификацияСтандартная = Истина;
		ПользовательИБ.ЗапрещеноИзменятьПароль = СвойстваПользователяИБ.ЗапрещеноИзменятьПароль;
		ПользовательИБ.Имя = СвойстваПользователяИБ.Имя;
		ПользовательИБ.ПоказыватьВСпискеВыбора = СвойстваПользователяИБ.ПоказыватьВСпискеВыбора;
		ПользовательИБ.ПолноеИмя = СвойстваПользователяИБ.ПолноеИмя;
		ПользовательИБ.РежимЗапуска = СвойстваПользователяИБ.РежимЗапуска;
		ПользовательИБ.Язык = СвойстваПользователяИБ.Язык;
		ПользовательИБ.АутентификацияОС = СвойстваПользователяИБ.АутентификацияОС;
		
		Если ЭтоНовыйПользователь ИЛИ (НЕ ЭтоНовыйПользователь И Почта <> ОбъектДоЗаписи.Почта) Тогда
			ПользовательИБ.АдресЭлектроннойПочты = Почта;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПользовательИБ.АдресЭлектроннойПочты) Тогда
			ПользовательИБ.ЗапрещеноВосстанавливатьПароль = Ложь;
		КонецЕсли;
				
		Если СвойстваПользователяИБ.Свойство("ПользовательОС") Тогда
			ПользовательИБ.ПользовательОС = СвойстваПользователяИБ.ПользовательОС;
		Иначе
			ПользовательИБ.АутентификацияОС = Ложь;
		КонецЕсли;
		
		// Если пользователь был изменен руководителем филиала или направления
		Если ДополнительныеСвойства.Свойство("ИзменениеПользователя") Тогда
			ПользовательИБ.Роли.Очистить();
			
			Для Каждого Роль Из СвойстваПользователяИБ.Роли Цикл
				ПользовательИБ.Роли.Добавить(Метаданные.Роли.Найти(Роль));
			КонецЦикла;
			
		// Если пользователь изменяется из ЦБ
		Иначе
			РольПользователь = Метаданные.Роли.Пользователь;
			
			Если НЕ ПользовательИБ.Роли.Содержит(РольПользователь) Тогда
				ПользовательИБ.Роли.Добавить(РольПользователь);
			КонецЕсли;
			
			РольУправлениеПорядком = Метаданные.Роли.УправлениеПорядкомЗаявокНаРазработку;
			
			Если ДополнительныеСвойства.Свойство("УправлениеПорядкомЗаявокНаРазработку") И ДополнительныеСвойства.УправлениеПорядкомЗаявокНаРазработку Тогда
				Если НЕ ПользовательИБ.Роли.Содержит(РольУправлениеПорядком) Тогда
					ПользовательИБ.Роли.Добавить(РольУправлениеПорядком);
				КонецЕсли;
			ИначеЕсли ДополнительныеСвойства.Свойство("УправлениеПорядкомЗаявокНаРазработку") Тогда
				Если ПользовательИБ.Роли.Содержит(РольУправлениеПорядком) Тогда
					ПользовательИБ.Роли.Удалить(РольУправлениеПорядком);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СвойстваПользователяИБ.НовыйПароль <> Неопределено Тогда
			ПользовательИБ.Пароль = СвойстваПользователяИБ.НовыйПароль;
		КонецЕсли;
		
		ПользовательИБ.Записать();
		
		// ПРоизошла смена имени пользователя. Надо перенести его настройки. Сделаем это через очередь событий
		Если ПользовательСуществуетИБ и ТекущееИмяПользователяИБ <> ПользовательИБ.Имя тогда
			РегистрыСведений.ОчередьСобытийНаОбработку.ПереносНастроекПользователя(Ссылка, ТекущееИмяПользователяИБ, ПользовательИБ.Имя, Истина);  	
		КонецЕсли;
		
		Если СвойстваПользователяИБ.НовыйПароль <> Неопределено Тогда
			ОтправитьПисьмоПользователю(Почта, ПользовательИБ.Имя, СвойстваПользователяИБ.НовыйПароль, ЭтоНовыйПользователь);
		КонецЕсли;
		
		ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ЭтоНовыйПользователь Тогда
		// Заполнение табличной части НастройкиОповещений для нового пользователя SDMS
		НастройкиОповещений.Загрузить(Перечисления.КатегорииСообщенийПользователя.КатегорииОповещенияДляФормыНастройкиОповещений());
		ДатаСоздания = ТекущаяДатаСеанса();
	КонецЕсли;
		
	Если НЕ ПользователиПриходятОбменом И Недействителен И ИзменилосьСостояниеНедействителен Тогда
		Должность = Справочники.Должности.ПустаяСсылка();
		Филиал = Справочники.Филиалы.ПустаяСсылка();
	КонецЕсли;
	
	// Определенные данные объекта до записи,
	// для фиксации изменений состояния в РС.ОчередьСобытийНаОбработку 
	ОписаниеИзменений = ОбщегоНазначения.ПолучитьСостояниеОбъектаДоЗаписи(Ссылка);
		
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка ИЛИ ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если ИзменилосьСостояниеНедействителен Тогда
		Справочники.Пользователи.УстановитьОтображениеВСпискеВыбора(ИдентификаторПользователяИБ, НЕ Недействителен);
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ИзменениеПользователя") И ДополнительныеСвойства.ИзменениеПользователя Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если НЕ ПользователиПриходятОбменом Тогда	
		ДолжностьДоЗаписи = РегистрыСведений.ЛичныеДела.ДолжностьПользователя(Ссылка);
		
		Если Должность <> ДолжностьДоЗаписи Тогда
			РегистрыСведений.ЛичныеДела.Добавить(Ссылка, Перечисления.СобытияПоЛичнымДелам.ПринятНаДолжность, Должность);
		КонецЕсли;
		
		ФилиалДоЗаписи = РегистрыСведений.ЛичныеДела.ФилиалПользователя(Ссылка);
		
		Если Филиал <> ФилиалДоЗаписи Тогда
			РегистрыСведений.ЛичныеДела.Добавить(Ссылка, Перечисления.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение, Филиал);
		КонецЕсли;
		
		Если Недействителен И ИзменилосьСостояниеНедействителен Тогда
			РегистрыСведений.ЛичныеДела.Добавить(Ссылка, Перечисления.СобытияПоЛичнымДелам.Уволен);
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("Мессенджеры") Тогда 
		Для Каждого Мессенджер Из ДополнительныеСвойства.Мессенджеры Цикл 
			РегистрыСведений.АдресаПолучателей.Добавить(Ссылка, Мессенджер.Ссылка, Мессенджер.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ТаблицаРолейПоНаправлениям") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		
		#Область ТекстЗапроса
		"ВЫБРАТЬ
		|	ТаблицаРолейПоНаправлениям.НаправлениеРазработки КАК НаправлениеРазработки,
		|	&Пользователь КАК Пользователь,
		|	ТаблицаРолейПоНаправлениям.Роль КАК Роль,
		|	ВЫБОР
		|		КОГДА ТаблицаРолейПоНаправлениям.ДанныеИзменены
		|			ТОГДА &ТекущаяДата
		|		ИНАЧЕ ТаблицаРолейПоНаправлениям.ДатаИзменения
		|	КОНЕЦ КАК ДатаИзменения,
		|	ВЫБОР
		|		КОГДА ТаблицаРолейПоНаправлениям.ДанныеИзменены
		|			ТОГДА &АвторИзменений
		|		ИНАЧЕ ТаблицаРолейПоНаправлениям.АвторИзменения
		|	КОНЕЦ КАК АвторИзменения,
		|	ТаблицаРолейПоНаправлениям.ДанныеИзменены КАК ДанныеИзменены
		|ПОМЕСТИТЬ РолиПоНаправлениям
		|ИЗ
		|	&ТаблицаРолейПоНаправлениям КАК ТаблицаРолейПоНаправлениям
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТаблицаРолейПоНаправлениям.НаправлениеРазработки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РолиПользователейПоНаправлениям.НаправлениеРазработки КАК НаправлениеРазработки,
		|	РолиПользователейПоНаправлениям.Пользователь КАК Пользователь,
		|	РолиПользователейПоНаправлениям.Роль КАК Роль,
		|	РолиПользователейПоНаправлениям.ДатаИзменения КАК ДатаИзменения,
		|	РолиПользователейПоНаправлениям.АвторИзменения КАК АвторИзменения
		|ПОМЕСТИТЬ СуществующиеРолиПоНаправлениям
		|ИЗ
		|	РегистрСведений.РолиПользователейПоНаправлениям КАК РолиПользователейПоНаправлениям
		|ГДЕ
		|	РолиПользователейПоНаправлениям.Пользователь = &Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СуществующиеРолиПоНаправлениям.НаправлениеРазработки КАК НаправлениеРазработки,
		|	СуществующиеРолиПоНаправлениям.Пользователь КАК Пользователь
		|ИЗ
		|	СуществующиеРолиПоНаправлениям КАК СуществующиеРолиПоНаправлениям
		|		ЛЕВОЕ СОЕДИНЕНИЕ РолиПоНаправлениям КАК РолиПоНаправлениям
		|		ПО СуществующиеРолиПоНаправлениям.НаправлениеРазработки = РолиПоНаправлениям.НаправлениеРазработки
		|ГДЕ
		|	РолиПоНаправлениям.НаправлениеРазработки ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РолиПоНаправлениям.НаправлениеРазработки КАК НаправлениеРазработки,
		|	РолиПоНаправлениям.Пользователь КАК Пользователь,
		|	РолиПоНаправлениям.Роль КАК Роль,
		|	РолиПоНаправлениям.ДатаИзменения КАК ДатаИзменения,
		|	РолиПоНаправлениям.АвторИзменения КАК АвторИзменения,
		|	ВЫБОР
		|		КОГДА РолиПоНаправлениям.ДанныеИзменены
		|				ИЛИ СуществующиеРолиПоНаправлениям.НаправлениеРазработки ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НоваяЗапись
		|ИЗ
		|	РолиПоНаправлениям КАК РолиПоНаправлениям
		|		ЛЕВОЕ СОЕДИНЕНИЕ СуществующиеРолиПоНаправлениям КАК СуществующиеРолиПоНаправлениям
		|		ПО РолиПоНаправлениям.НаправлениеРазработки = СуществующиеРолиПоНаправлениям.НаправлениеРазработки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НаправленияРазработки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НаправленияРазработки КАК НаправленияРазработки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РолиПользователейПоНаправлениям.НаправлениеРазработки КАК НаправлениеРазработки
		|ИЗ
		|	РегистрСведений.РолиПользователейПоНаправлениям КАК РолиПользователейПоНаправлениям
		|ГДЕ
		|	РолиПользователейПоНаправлениям.Пользователь = &Пользователь
		|	И РолиПользователейПоНаправлениям.Роль = ЗНАЧЕНИЕ(Справочник.РолиПользователей.РуководительНаправления)";
		#КонецОбласти
		
		Запрос.УстановитьПараметр("ТаблицаРолейПоНаправлениям", ДополнительныеСвойства.ТаблицаРолейПоНаправлениям);
		Запрос.УстановитьПараметр("Пользователь", Ссылка);
		Запрос.УстановитьПараметр("АвторИзменений", ПараметрыСеанса.ТекущийПользователь);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ЕстьУстаревшиеЗаписи = НЕ РезультатыЗапроса[2].Пустой();
		ТаблицаЗаписейДляРегистра = РезультатыЗапроса[3].Выгрузить();
		ВыборкаНаправления = РезультатыЗапроса[4].Выбрать();
		КоличествоНаправлений = РезультатыЗапроса[5].Выбрать().Количество();
		
		Если ЕстьУстаревшиеЗаписи
			ИЛИ (ТаблицаЗаписейДляРегистра.Найти(Истина, "НоваяЗапись") <> Неопределено) Тогда
			
			РуководительНаправления = Справочники.РолиПользователей.РуководительНаправления;
			Записывать = Истина;
			Для Каждого Запись ИЗ ТаблицаЗаписейДляРегистра Цикл
				Если Запись.НоваяЗапись И Запись.Роль = РуководительНаправления Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(("Роль ""Руководитель направления"" необходимо устанавливать через справочник ""Направления разработки""."));
					Записывать = Ложь;
					Прервать;
				КонецЕсли;	
			КонецЦикла;
			
			Если Записывать Тогда
				НаборЗаписей = РегистрыСведений.РолиПользователейПоНаправлениям.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Пользователь.Установить(Ссылка);			
				НаборЗаписей.Загрузить(ТаблицаЗаписейДляРегистра);
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
				
		// В зависимости от количества направлений, которыми руководит пользователь,
		// добавим или удалим роль РуководительНаправления
		Если КоличествоНаправлений > 0 Тогда 
			Пользователи.ИзменитьРольПользователя(Ссылка, Метаданные.Роли.РуководительНаправления, Истина);
		Иначе	
			Пользователи.ИзменитьРольПользователя(Ссылка, Метаданные.Роли.РуководительНаправления, Ложь);
		КонецЕсли;		
	КонецЕсли;	
	
	Если ЭтоНовыйПользователь Тогда	
		Справочники.Пользователи.ЗаполнитьНастройкиОтправкиДайджестаПоПроектам(Ссылка);
		Справочники.Пользователи.ЗаполнитьПервоначальныеНастройкиОповещений(Ссылка);
		
		Если ЗначениеЗаполнено(Почта) Тогда
			РегистрыСведений.ОчередьСобытийНаОбработку.СозданиеПользователя(Ссылка, Почта);
		КонецЕсли;	
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ДополнительныеРеквизиты_ТаблицаРеквизитов") Тогда
		ДопРеквизиты = ДополнительныеСвойства.ДополнительныеРеквизиты_ТаблицаРеквизитов;
	Иначе
		ДопРеквизиты = Неопределено;
	КонецЕсли;
	
	ОбщегоНазначения.ОбработатьИзменениеОбъекта(Ссылка, ОписаниеИзменений, ДопРеквизиты);		
		
	Если НЕ Отказ И НЕ ЭтоНовыйПользователь И ДополнительныеСвойства.ИзменилосьНаименование Тогда
		ИнтеграцияДополнительныхПодсистем.АктуализироватьНаименованиеПрофиля(Ссылка);		
	КонецЕсли;
	
	Если ПользовательСуществуетИБ = Ложь Тогда
		Взаимодействие.СоздатьПользователя(Ссылка, ИдентификаторПользователяИБ, Почта);
	КонецЕсли;
	
	Если Недействителен И ИзменилосьСостояниеНедействителен Тогда  
		// Если идет простановка флага Недействителен, то полностью очистить настройки
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);		
		
		Если ПользовательИБ <> Неопределено Тогда		
			ОчиститьХранилище(ПользовательИБ.Имя, ХранилищеСистемныхНастроек);    
			ОчиститьХранилище(ПользовательИБ.Имя, ХранилищеНастроекДанныхФорм);    
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ИдентификаторАД = "";
	ИдентификаторПользователяИБ = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производится отправка письма пользователю, которому изменили пароль
Процедура ОтправитьПисьмоПользователю(Знач ПочтаПользователя, Знач ИмяПользователя, Знач ПарольПользователя, Знач ЭтоНовыйПользователь)
	
	ТекущийГод = Формат(ТекущаяДатаСеанса(), "ДФ=yyyy");
	АдресПубликации = WebОкружениеВызовСервера.АдресПубликацииИнформационнойБазы();
	
	ШаблонЭлектронногоПисьма = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ПолучитьМакет("ЭлектронноеПисьмо").ПолучитьТекст();
	ТекстСообщения = СтрЗаменить(ШаблонЭлектронногоПисьма, "%IconImage%", "[IconImage]");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ArticleImage%", "[ArticleImage]");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%CurrentYear%", ТекущийГод);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%publicationURL%", АдресПубликации);
	
	Если ЭтоНовыйПользователь Тогда
		ТемаСообщения = "SDMS. Создана учетная запись";
		СообщениеПользователю = СтрШаблон("В системе SDMS (<a href=""%3"">%3</a>) создан новый пользователь ""%1"" с паролем %2.", 
			ИмяПользователя, Строка(ПарольПользователя), АдресПубликации);
	Иначе
		ТемаСообщения = "SDMS. Изменен пароль учетной записи";
		СообщениеПользователю = СтрШаблон("Ваш пароль был изменён пользователем - %1. Ваш новый пароль: %2.",
			Строка(ПараметрыСеанса.ТекущийПользователь), Строка(ПарольПользователя));
	КонецЕсли;
	
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%MessageText%", СообщениеПользователю);
	СпособОтправки = Перечисления.СпособыОтправкиСообщений.ЭлектроннаяПочта;
	
	РегистрыСведений.БуферСообщений.Добавить(СпособОтправки, ПочтаПользователя, ТекстСообщения, ТемаСообщения);
	
КонецПроцедуры
     
Процедура ОчиститьХранилище(Имя, Хранилище) 
	
	Отбор = Новый Структура("Пользователь", Имя);
	Выборка = Хранилище.Выбрать(Отбор);
	
	Пока Выборка.Следующий() Цикл
		Хранилище.Удалить(Выборка.КлючОбъекта, Выборка.КлючНастроек, Выборка.Пользователь);
	КонецЦикла;

КонецПроцедуры 

#КонецОбласти

#КонецЕсли
