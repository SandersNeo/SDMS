///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если НЕ Параметры.Ключ.Пустая() Тогда
		ПрочитатьДанныеРолейПоНаправлениям(ТекущийОбъект);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Филиал = РегистрыСведений.ЛичныеДела.ФилиалПользователя(Объект.Ссылка);	
	ИнтеграцияДополнительныхПодсистем.НастроитьПрофильКвалификацииВФормеПользователя(Объект.Ссылка, 
		Элементы.ПрофильКвалификации, ПрофильКвалификации);
	ЧтениеВсехДанных = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("ЧтениеВсехДанныхИнформационнойБазы");

	// Если форма была открыта руководителем группы разработки
	// или руководителем направления, то необходимо установить привилегированный режим,
	// иначе произойдет нарушение прав доступа 		
	ДоступнаРольАдминистратор = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("Администратор");	
	ДоступнаРольРуководительГруппы = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("РуководительГруппыРазработки")
		ИЛИ УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("РуководительПодразделения");

	ДоступнаРольИзменениеПрофилей =	УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("ИзменениеПрофилейРазработчиков");	
		
	Если ДоступнаРольАдминистратор ИЛИ ЧтениеВсехДанных Тогда
		ИзменениеПользователя = Ложь;
		
	ИначеЕсли Параметры.Свойство("ИзменениеПользователя") Тогда
		ИзменениеПользователя = Истина;
	Иначе
		СообщениеПользователю = "Недостаточно прав для просмотра карточки пользователя.";
		Возврат;
	КонецЕсли;
	
	РазрешеноРедактированиеПочты = ИнтеграцияДополнительныхПодсистем.ДоступностьИзмененияПочты(Объект, ДоступнаРольАдминистратор);
	
	Если РазрешеноРедактированиеПочты Тогда
		Элементы.Почта.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Объект.ИдентификаторПользователяИБ);
	
	Элементы.СопоставлениеОбработкаНесоответствия.Видимость = (ПользовательИБ = Неопределено И НЕ Параметры.Ключ.Пустая());
	Элементы.ГруппаСлужебныйПользователь.Видимость = Объект.Служебный;
		
	Если НЕ ДоступнаРольАдминистратор И НЕ ЧтениеВсехДанных Тогда
		НастроитьФормуДляИзмененияПользователя();
	Иначе
		Элементы.ГруппаДляКорректнйоОтрисовкиФормы.ТолькоПросмотр = ЧтениеВсехДанных;
	КонецЕсли;
	
	ДополнительныеРеквизиты.ПодключитьДополнительныеРеквизиты(Объект.Ссылка, ЭтотОбъект, 
		"ГруппаДополнительныеРеквизиты", "ГруппаДопРеквизитыНаФорме");
	
	ДоступностьРедактирования = (ИзменениеПользователя ИЛИ ДоступнаРольРуководительГруппы);
	ЗаполнитьСвойстваПользователяНаФорме(ПользовательИБ, ДоступностьРедактирования, ДоступнаРольИзменениеПрофилей); 
	ЗаполнитьМессенджерыНаФорме(ДоступностьРедактирования ИЛИ РазрешеноРедактированиеПочты);   
	
	Если НЕ ИнтеграцияДополнительныхПодсистем.ПодсистемаСуществует("ОбменДанными") Тогда
		Элементы.Филиал.ТолькоПросмотр = Ложь;
		Элементы.Должность.ТолькоПросмотр = Ложь;
		Элементы.Почта.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(СообщениеПользователю) Тогда
		ПоказатьПредупреждение(, СообщениеПользователю);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	
	Если НЕ Объект.Недействителен Тогда
		
		// Проверим, чтобы имя пользователя было заполнено
		Если ПустаяСтрока(ИмяПользователяИБ) Тогда
			ТекстСообщения = "Поле ""Имя (для входа)"" не заполнено.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ИмяПользователяИБ", , Отказ);
		КонецЕсли;
		
		// Проверим, чтобы пользователь не захотел изменить имя пользователя на уже существующее
		Если Элементы.СтраницыКорректностиИмениПользователя.ТекущаяСтраница = Элементы.СтраницаИмяПользователяЗанято Тогда
			ТекстСообщения = "Поле ""Имя (для входа)"" заполнено некорректно.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ИмяПользователяИБ", , Отказ);
		КонецЕсли;
		
		// Проверим отмеченные роли. Если нет ни одной, выдаем ошибку
		ЕстьОтмеченныеРоли = Ложь;
		Для Каждого Роль Из Роли Цикл
			Если Роль.Пометка Тогда
				ЕстьОтмеченныеРоли = Истина; 
				Прервать; 
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьОтмеченныеРоли И НЕ ИзменениеПользователя Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У пользователя не отмечено ни одной роли.", , , , Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	МассивРолей = Новый Массив;
	
	Для Каждого Роль Из Роли Цикл
		Если Роль.Пометка Тогда
			МассивРолей.Добавить(Роль.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РежимЗапуска = ПредопределенноеЗначение("РежимЗапускаКлиентскогоПриложения." + ПользовательИБРежимЗапуска);
	
	СвойстваПользователяИБ = Новый Структура;
	СвойстваПользователяИБ.Вставить("УникальныйИдентификатор", ТекущийОбъект.ИдентификаторПользователяИБ);
	СвойстваПользователяИБ.Вставить("Имя", ИмяПользователяИБ);
	СвойстваПользователяИБ.Вставить("ПоказыватьВСпискеВыбора", ПоказыватьПользователяВСпискеВыбора);
	СвойстваПользователяИБ.Вставить("ЗапрещеноИзменятьПароль", ПользователюЗапрещеноИзменятьПароль);
	СвойстваПользователяИБ.Вставить("ПолноеИмя", ТекущийОбъект.Наименование);
	СвойстваПользователяИБ.Вставить("РежимЗапуска", РежимЗапуска); 
	СвойстваПользователяИБ.Вставить("Язык", Метаданные.Языки.Найти(ПользовательИБЯзык));
	СвойстваПользователяИБ.Вставить("Роли", МассивРолей);
	СвойстваПользователяИБ.Вставить("НовыйПароль", ПользовательИБПароль);
	СвойстваПользователяИБ.Вставить("СтарыйПароль", ПользовательИБСтарыйПароль);
	СвойстваПользователяИБ.Вставить("АутентификацияОС", АутентификацияОС);
	СвойстваПользователяИБ.Вставить("ПользовательОС", ПользовательОС);
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СвойстваПользователяИБ", СвойстваПользователяИБ);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТаблицаРолейПоНаправлениям", РолиПоНаправлениям.Выгрузить());
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ИзменениеПользователя", ИзменениеПользователя);     
	
	МассивМессенджеры = Новый Массив;   
	
	Для Каждого Мессенджер Из Мессенджеры Цикл 
		Если ЭтотОбъект[Мессенджер.Ключ] <> Мессенджер.Значение.Адрес Тогда
			МассивМессенджеры.Добавить(Новый Структура("Ссылка, Значение", Мессенджер.Значение.Ссылка, ЭтотОбъект[Мессенджер.Ключ])); 
		КонецЕсли;
	КонецЦикла;    
	
	Если МассивМессенджеры.Количество() > 0 Тогда 
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Мессенджеры", МассивМессенджеры);
	КонецЕсли;
	
	Если НЕ ИнтеграцияДополнительныхПодсистем.ПодсистемаСуществует("ОбменДанными") Тогда
		ТекущийОбъект.Филиал = Филиал;
	КонецЕсли;
	
	ДополнительныеРеквизиты.ПередЗаписьюОбъекта(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Элементы.ПрофильКвалификации.Видимость Тогда
		
		ПрофильКвалификацииДоЗаписи = РегистрыСведений.ЗначенияДополнительныхРеквизитовОбъектов.ЗначениеДополнительногоРеквизита(
			Объект.Ссылка, ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.ПрофильКвалификации);
		
		Если ПрофильКвалификации <> ПрофильКвалификацииДоЗаписи Тогда
			ВидРеквизита = ПланыВидовХарактеристик.ВидыДополнительныхРеквизитов.ПрофильКвалификации;
			
			РегистрыСведений.ЗначенияДополнительныхРеквизитовОбъектов.УстановитьЗначениеДополнительногоРеквизита(
				ТекущийОбъект.Ссылка, ВидРеквизита, ПрофильКвалификации);
			
			ИнтеграцияДополнительныхПодсистем.ПрофильПользователяПриИзменении(ТекущийОбъект.Ссылка, 
				ПрофильКвалификацииДоЗаписи, ПрофильКвалификации); 
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

&НаСервере             
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("СвойстваПользователяИБ") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Удалить("СвойстваПользователяИБ");
	КонецЕсли;
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ТаблицаРолейПоНаправлениям") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Удалить("ТаблицаРолейПоНаправлениям");
	КонецЕсли;
	
	ПрочитатьДанныеРолейПоНаправлениям(ТекущийОбъект);
	
	ПараметрыЗаписи.Вставить("НавигационнаяСсылка", ПолучитьНавигационнуюСсылку(Объект.Ссылка));
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПоказатьОповещениеПользователя("Только просмотр", ПараметрыЗаписи.НавигационнаяСсылка, "Разрешен только просмотр документа");

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ДополнительныеРеквизитыКлиент.ПередЗакрытиемФормы(ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АутентификацияОперационнойСистемыПриИзменении(Элемент)
	
	Элементы.ИмяПользователяОперационнойСистемы.Доступность = АутентификацияОС;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПользователяИБПриИзменении(Элемент)
	
	ПроверитьИмяПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура НедействителенПриИзменении(Элемент)
	
	Если Объект.Недействителен Тогда
		ПоказыватьПользователяВСпискеВыбора = Ложь;
	КонецЕсли;
	
	Элементы.ПоказыватьПользователяВСпискеВыбора.Доступность = НЕ Объект.Недействителен;
	
КонецПроцедуры

&НаКлиенте
Процедура РолиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ "РолиПоНаправлениям"

&НаКлиенте
Процедура РолиПоНаправлениямПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если ИзменениеПользователя Тогда 
		Элементы.РолиПоНаправлениямНаправлениеРазработки.ТолькоПросмотр = Ложь;
		Элементы.РолиПоНаправлениямРоль.ТолькоПросмотр = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РолиПоНаправлениямПриАктивизацииСтроки(Элемент)
	
	Если ИзменениеПользователя Тогда
		Если Элемент.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Направление = Элемент.ТекущиеДанные.НаправлениеРазработки;
		
		Если СписокНаправлений.Количество() > 0
			И ЗначениеЗаполнено(Направление) И СписокНаправлений.НайтиПоЗначению(Направление) = Неопределено Тогда
			Элементы.РолиПоНаправлениямНаправлениеРазработки.ТолькоПросмотр = Истина;
			Элементы.РолиПоНаправлениямРоль.ТолькоПросмотр = Истина;
		Иначе
			Элементы.РолиПоНаправлениямНаправлениеРазработки.ТолькоПросмотр = Ложь;
			Элементы.РолиПоНаправлениямРоль.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РолиПоНаправлениямПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РолиПоНаправлениямПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования ИЛИ Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;	
	ТекущиеДанные.ДанныеИзменены = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура РолиПоНаправлениямПередУдалением(Элемент, Отказ)
	
	Если ИзменениеПользователя Тогда	
		Если Элемент.ВыделенныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого ИдентификаторСтроки Из Элемент.ВыделенныеСтроки Цикл			
			СтрокаТаблицы = РолиПоНаправлениям.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НаправлениеРазработки)
				ИЛИ СписокНаправлений.Количество() = 0
				ИЛИ СписокНаправлений.НайтиПоЗначению(СтрокаТаблицы.НаправлениеРазработки) <> Неопределено Тогда
				
				РолиПоНаправлениям.Удалить(СтрокаТаблицы);
				Модифицированность = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВключитьРоли(Команда)
	
	ИзменитьПометкиРолей(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпуститьТокенДоступа(Команда)
	
	ПараметрыОткрытия = Новый Структура("Пользователь", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.ТокеныДоступаПользователей.Форма.РаботаСТокеном", ПараметрыОткрытия, ЭтотОбъект, 
		ЭтотОбъект.УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаОграниченияНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура("ВладелецОграничений", Объект.Ссылка);
	ОткрытьФорму("ОбщаяФорма.ПросмотрВсехОграниченийПользователя", ПараметрыОткрытия, ЭтотОбъект, 
		УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ИсключитьРоли(Команда)
	
	ИзменитьПометкиРолей(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьДополнительныеРеквизиты(Команда)

	ДополнительныеРеквизитыКлиент.ОткрытьФормуДополнительныхРеквизитов(Объект.Ссылка, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СменитьПароль(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВернутьПарольБезУстановки", Истина);
	ДополнительныеПараметры.Вставить("СтарыйПароль", ПользовательИБСтарыйПароль);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СменитьПарольПослеПолученияПароля", ЭтотОбъект);
	
	УправлениеДоступомКлиент.ОткрытьФормуСменыПароля(ДополнительныеПараметры, ОписаниеОповещения, Объект.Ссылка);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьМессенджерыНаФорме(ДоступностьРедактирования) 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	""Имя пользователя "" + Мессенджеры.Наименование КАК Наименование,
	|	ЕСТЬNULL(АдресаПолучателей.Адрес, """") КАК Адрес,
	|	Мессенджеры.ИмяПредопределенныхДанных КАК Имя,
	|	Мессенджеры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Мессенджеры КАК Мессенджеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресаПолучателей КАК АдресаПолучателей
	|		ПО (АдресаПолучателей.Мессенджер = Мессенджеры.Ссылка)
	|			И (АдресаПолучателей.Получатель = &Получатель)
	|ГДЕ
	|	НЕ Мессенджеры.ПометкаУдаления
	|	И Мессенджеры.Ссылка = &ОсновнойМессенджер";
	
	Запрос.УстановитьПараметр("Получатель", Объект.Ссылка);
	Запрос.УстановитьПараметр("ОсновнойМессенджер", Константы.ОсновнойМессенджер.Получить());
	Выборка = Запрос.Выполнить().Выбрать();
	ДобавляемыеРеквизиты = Новый Массив;
	ДанныеМессенджеры = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		Идентификатор = ОбщегоНазначенияКлиентСервер.СтрУникальныйИдентификатор(УникальныйИдентификатор);
		ИмяРеквизита = СтрШаблон("%1_%2", Выборка.Имя, Идентификатор);		  
		ДанныеМессенджеры.Вставить(ИмяРеквизита, Новый Структура("Ссылка, Адрес", Выборка.Ссылка, Выборка.Адрес));
		НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, 
			ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(100),, Выборка.Наименование);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);	 
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты); 
	Мессенджеры = Новый ФиксированноеСоответствие(ДанныеМессенджеры);
		
	Для Каждого Мессенджер Из Мессенджеры Цикл 
		НовыйЭлемент = Элементы.Добавить(Мессенджер.Ключ, Тип("ПолеФормы"), Элементы.СтраницаНастройкиПользователя);
		НовыйЭлемент.ПутьКДанным = Мессенджер.Ключ;
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		ЭтотОбъект[Мессенджер.Ключ] = Мессенджер.Значение.Адрес;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "МессенджерПриИзменении");
		НовыйЭлемент.Доступность = ДоступностьРедактирования;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвойстваПользователяНаФорме(ПользовательИБ, Знач ДоступРуководителя, Знач ПравоНаИзменениеПрофилей)
	
	// Заполним список ролей конфигурации
	РолиКонфигурации = Метаданные.Роли;
	НомерКартинкиРоль = 7;
	
	ДоступныеДляИзмененияРоли = Новый Массив;
	ДоступныеДляИзмененияРоли.Добавить("ИзменениеПорядкаЗадачВОчередиНаТестирование");
	ДоступныеДляИзмененияРоли.Добавить("ИспользованиеОбработкиАнализЗаявокПоОшибкам");
	ДоступныеДляИзмененияРоли.Добавить("СтаршийПрограммист");
	ДоступныеДляИзмененияРоли.Добавить("УправлениеДоскамиTrello");
	ДоступныеДляИзмененияРоли.Добавить("ИспользованиеРабочегоСтолаСТО");
	
	Для Каждого Роль Из РолиКонфигурации Цикл						
		НоваяСтрока = Роли.Добавить();
		НоваяСтрока.Имя = Роль.Имя;
		НоваяСтрока.Синоним = ?(Роль.Синоним = "", Роль.Имя, Роль.Синоним);
		НоваяСтрока.НомерКартинки = НомерКартинкиРоль;
		НоваяСтрока.Пометка = (ПользовательИБ <> Неопределено И ПользовательИБ.Роли.Содержит(Роль));
		
		Если Роль.Имя <> "ПросмотрПрофилейИЗнанийПоФилиалу" Тогда
			// Руководителю доступно редактирование только некоторых ролей
			РольМожноИзменять = (ДоступныеДляИзмененияРоли.Найти(Роль.Имя) <> Неопределено);
			НоваяСтрока.ДоступноДляИзменения = ((РольМожноИзменять И ДоступРуководителя) ИЛИ ДоступнаРольАдминистратор);
			
		Иначе
			НоваяСтрока.ДоступноДляИзменения = (ПравоНаИзменениеПрофилей ИЛИ ДоступнаРольАдминистратор);	
		КонецЕсли;
	КонецЦикла;  
	
	Роли.Сортировать("Синоним");
	
	Если ПользовательИБ = Неопределено Тогда
		ПоказыватьПользователяВСпискеВыбора = Истина;
		ПользователюЗапрещеноИзменятьПароль = Ложь;
		АутентификацияОС = Ложь;
		ПользовательОС = "";
	Иначе
		ИмяПользователяИБ = ПользовательИБ.Имя;
		ТекущееИмяПользователяИБ = ИмяПользователяИБ;
		
		УстановитьНаличиеПароля(ЭтотОбъект, ПользовательИБ.ПарольУстановлен);
		
		ПоказыватьПользователяВСпискеВыбора = ПользовательИБ.ПоказыватьВСпискеВыбора;
		ПользователюЗапрещеноИзменятьПароль = ПользовательИБ.ЗапрещеноИзменятьПароль;
		АутентификацияОС = ПользовательИБ.АутентификацияОС;
		ПользовательОС = ПользовательИБ.ПользовательОС;
	КонецЕсли;
	
	// Заполнение списка выбора режимов запуска.
	Для каждого РежимЗапуска Из РежимЗапускаКлиентскогоПриложения Цикл
		ПолноеИмяЗначения = ПолучитьПолноеИмяПредопределенногоЗначения(РежимЗапуска);
		ИмяЗначения = Сред(ПолноеИмяЗначения, СтрНайти(ПолноеИмяЗначения, ".") + 1);
		Элементы.ПользовательИБРежимЗапуска.СписокВыбора.Добавить(ИмяЗначения, Строка(РежимЗапуска));
	КонецЦикла;
	Элементы.ПользовательИБРежимЗапуска.СписокВыбора.СортироватьПоПредставлению();
	
	// Заполнение списка выбора языка.
	ЯзыкиКонфигурации = Метаданные.Языки;
	Для Каждого МетаданныеЯзыка Из ЯзыкиКонфигурации Цикл
		Элементы.ПользовательИБЯзык.СписокВыбора.Добавить(МетаданныеЯзыка.Имя, МетаданныеЯзыка.Синоним);
	КонецЦикла;
	
	Если ПользовательИБ = Неопределено Тогда
		ПолноеИмяЗначения = ПолучитьПолноеИмяПредопределенногоЗначения(РежимЗапускаКлиентскогоПриложения.Авто);
	Иначе
		ПолноеИмяЗначения = ПолучитьПолноеИмяПредопределенногоЗначения(ПользовательИБ.РежимЗапуска);
	КонецЕсли;
	ПользовательИБРежимЗапуска = Сред(ПолноеИмяЗначения, СтрНайти(ПолноеИмяЗначения, ".") + 1);
		
	Если ЯзыкиКонфигурации.Количество() = 1 Тогда
		ПользовательИБЯзык = ЯзыкиКонфигурации.Получить(0);
	Иначе
		Если  ПользовательИБ <> Неопределено Тогда
			ПользовательИБЯзык = ПользовательИБ.Язык;
		Иначе
			ПользовательИБЯзык = Метаданные.ОсновнойЯзык;
		КонецЕсли;
	КонецЕсли;		
		
	Элементы.ПоказыватьПользователяВСпискеВыбора.Доступность = НЕ Объект.Недействителен;
	Элементы.ИмяПользователяОперационнойСистемы.Доступность = АутентификацияОС;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкиРолей(Знач Пометка)
	
	Для Каждого СтрокаТаблицы Из Роли Цикл
		Если СтрокаТаблицы.ДоступноДляИзменения Тогда
			СтрокаТаблицы.Пометка = Пометка;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МессенджерПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуДляИзмененияПользователя()
	
	Элементы.ПолноеИмяПользователя.ТолькоПросмотр = Истина;
	Элементы.ИмяПользователяИБ.ТолькоПросмотр = Истина;
	Элементы.СлужебныйПользователь.Видимость = Ложь;
	Элементы.ПользовательИБРежимЗапуска.Видимость = Ложь;
	Элементы.ПользовательИБЯзык.Видимость = Ложь;
	Элементы.Почта.ТолькоПросмотр = Истина;
	Элементы.ИдентификаторАД.Видимость = Ложь;
	Элементы.Комментарий.Видимость = Ложь;
	Элементы.ГиперссылкаОграничения.Видимость = Ложь;
	Элементы.ПоказыватьПользователяВСпискеВыбора.Видимость = Ложь;
	Элементы.РольВОтделеIT.Видимость = Ложь;
	
	Если Параметры.Свойство("ИзменениеПользователя") Тогда
		Направления = Параметры.ИзменениеПользователя.Направления;
		
		Если Направления.Количество() > 0 Тогда
			Элементы.РолиПоНаправлениямНаправлениеРазработки.РежимВыбораИзСписка = Истина;
			Элементы.РолиПоНаправлениямНаправлениеРазработки.СписокВыбора.Очистить();
			Элементы.РолиПоНаправлениямНаправлениеРазработки.СписокВыбора.ЗагрузитьЗначения(Направления);
			
			СписокНаправлений.ЗагрузитьЗначения(Направления);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИмяПользователя()
	
	ТекстИмяПользователя = СокрЛП(ИмяПользователяИБ);
	
	Если ПустаяСтрока(ТекстИмяПользователя) ИЛИ (ТекстИмяПользователя = ТекущееИмяПользователяИБ) Тогда
		Элементы.СтраницыКорректностиИмениПользователя.ТекущаяСтраница = Элементы.СтраницаИмяПользователяПустая;
	Иначе
		
		Если ПользователиВызовСервера.ИмяПользователяСвободно(ТекстИмяПользователя) Тогда
			Элементы.СтраницыКорректностиИмениПользователя.ТекущаяСтраница = Элементы.СтраницаИмяПользователяСвободно;
		Иначе
			Элементы.СтраницыКорректностиИмениПользователя.ТекущаяСтраница = Элементы.СтраницаИмяПользователяЗанято;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеРолейПоНаправлениям(ДокументОбъект)
	
	РолиПоНаправлениям.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РолиПользователейПоНаправлениям.НаправлениеРазработки КАК НаправлениеРазработки,
	|	РолиПользователейПоНаправлениям.Роль КАК Роль,
	|	РолиПользователейПоНаправлениям.ДатаИзменения КАК ДатаИзменения,
	|	РолиПользователейПоНаправлениям.АвторИзменения КАК АвторИзменения
	|ИЗ
	|	РегистрСведений.РолиПользователейПоНаправлениям КАК РолиПользователейПоНаправлениям
	|ГДЕ
	|	РолиПользователейПоНаправлениям.Пользователь = &Пользователь
	|
	|УПОРЯДОЧИТЬ ПО
	|	РолиПользователейПоНаправлениям.НаправлениеРазработки.Наименование";
	
	Запрос.УстановитьПараметр("Пользователь", ДокументОбъект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(РолиПоНаправлениям.Добавить(), Выборка);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьПарольПослеПолученияПароля(Результат, Контекст) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательИБПароль       = Результат.НовыйПароль;
	ПользовательИБСтарыйПароль = Результат.СтарыйПароль;
	Модифицированность = Истина;
	УстановитьНаличиеПароля(ЭтотОбъект, ЗначениеЗаполнено(ПользовательИБПароль));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНаличиеПароля(Форма, ПарольУстановлен)
	
	Элементы = Форма.Элементы;
		
	Если ПарольУстановлен Тогда
		Элементы.НадписьНаличиеПароля.Заголовок = "Пароль установлен";
		Элементы.СменитьПароль.Заголовок = "Сменить пароль...";
	Иначе
		Элементы.НадписьНаличиеПароля.Заголовок = "Пустой пароль";
		Элементы.СменитьПароль.Заголовок = "Установить пароль...";
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти
