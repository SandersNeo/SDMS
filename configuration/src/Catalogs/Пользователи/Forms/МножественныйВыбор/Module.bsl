///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка общего условного оформления для окон данного вида
	ИнтерфейсПриложения.УстановитьУсловноеОформлениеСпискаДоступныхЗначений(
		ЭтотОбъект, "ДоступныеПользователи.Избранное", "ДоступныеПользователиНаименование");
	
	ЗаполнитьСпискиПользователей();
	
	// Установка фокуса на строку поиска
	ЭтотОбъект.ТекущийЭлемент = Элементы.СтрокаПоиска; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СтрокаПоискаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если НЕ ПустаяСтрока(Текст) Тогда
		Элементы.ДоступныеПользователи.ОтборСтрок = Новый ФиксированнаяСтруктура("Наименование", Текст);
	Иначе
		Элементы.ДоступныеПользователи.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СброситьПоиск();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий таблицы "ВыбранныеПользователи"

&НаКлиенте
Процедура ВыбранныеПользователиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ВыбранныеПользователиИсключить" Тогда
		НайденнаяСтрока = ВыбранныеПользователи.НайтиПоИдентификатору(ВыбраннаяСтрока);
		НайденнаяСтрока = ДоступныеПользователи.НайтиПоИдентификатору(НайденнаяСтрока.ИдентификаторСтрокиСписка);
		
		ИсключитьПользователя(НайденнаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий таблицы "ДоступныеПользователи"

&НаКлиенте
Процедура ДоступныеПользователиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	Если Поле.Имя = "ДоступныеПользователиНаименование" Тогда
		НайденнаяСтрока = ДоступныеПользователи.НайтиПоИдентификатору(ВыбраннаяСтрока);
		НайденнаяСтрока.Пометка = НЕ НайденнаяСтрока.Пометка;	
		ОбработатьИзменениеСтрокиДоступныхПользователей(НайденнаяСтрока);	
	ИначеЕсли Поле.Имя = "ДоступныеПользователиИзбранное" Тогда
		ПриИзмененииПометкиИзбранного(ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеПользователиПометкаПриИзменении(Элемент)
	
	ОбработатьИзменениеСтрокиДоступныхПользователей(Элементы.ДоступныеПользователи.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗавершитьВыбор(Команда)
	
	ВозвращаемыеПользователи = Новый СписокЗначений;
	
	Если ВыбранныеПользователи.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из ВыбранныеПользователи Цикл
			ВозвращаемыеПользователи.Добавить(СтрокаТаблицы.Пользователь, СтрокаТаблицы.Наименование);
		КонецЦикла;
		
		ВозвращаемыеПользователи.СортироватьПоПредставлению();
	КонецЕсли;	
	
	ОповеститьОВыборе(ВозвращаемыеПользователи.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкуДоступных(Команда)
	
	Пометка = (Команда.Имя = "ОтметитьВсех");
	
	Для Каждого СтрокаТаблицы Из ДоступныеПользователи Цикл
		Если СтрокаТаблицы.Пометка <> Пометка Тогда
			Если Пометка Тогда
				ДобавитьПользователя(СтрокаТаблицы);
			Иначе
				ИсключитьПользователя(СтрокаТаблицы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьИзбранные(Команда)
	
	Для Каждого СтрокаТаблицы Из ДоступныеПользователи Цикл
		Если СтрокаТаблицы.Избранное Тогда
			Если НЕ СтрокаТаблицы.Пометка Тогда
				ДобавитьПользователя(СтрокаТаблицы);
			КонецЕсли;
		Иначе
			Если СтрокаТаблицы.Пометка Тогда
				ИсключитьПользователя(СтрокаТаблицы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПоиск(Команда)
	
	СброситьПоиск();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Управление пользователями в списках

&НаКлиенте
Процедура ДобавитьПользователя(СтрокаТаблицы)
	
	НоваяСтрокаВыбранных = ВыбранныеПользователи.Добавить();
	НоваяСтрокаВыбранных.Исключить = БиблиотекаКартинок.УдалитьЗначение;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрокаВыбранных, СтрокаТаблицы, "Пользователь, Наименование");
	
	СтрокаТаблицы.Пометка = Истина;
	
	СтрокаТаблицы.ИдентификаторСтрокиСписка = НоваяСтрокаВыбранных.ПолучитьИдентификатор();
	НоваяСтрокаВыбранных.ИдентификаторСтрокиСписка = СтрокаТаблицы.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьПользователя(СтрокаТаблицы)
	
	НайденнаяСтрока = ВыбранныеПользователи.НайтиПоИдентификатору(СтрокаТаблицы.ИдентификаторСтрокиСписка);
	Если НайденнаяСтрока <> Неопределено Тогда
		ВыбранныеПользователи.Удалить(НайденнаяСтрока);
	КонецЕсли;	
	
	СтрокаТаблицы.Пометка = Ложь;
	СтрокаТаблицы.ИдентификаторСтрокиСписка = -1;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСтрокиДоступныхПользователей(СтрокаТаблицы)
	
	Если СтрокаТаблицы.Пометка = Истина Тогда
		ДобавитьПользователя(СтрокаТаблицы);	
	Иначе
		ИсключитьПользователя(СтрокаТаблицы);	
	КонецЕсли;			
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПометкиИзбранного(ВыбраннаяСтрока)
	
	НайденнаяСтрока = ДоступныеПользователи.НайтиПоИдентификатору(ВыбраннаяСтрока);
	НайденнаяСтрока.Избранное = НЕ НайденнаяСтрока.Избранное;
	
	ОбщегоНазначенияВызовСервера.ОбработатьПометкуИзбранного(НайденнаяСтрока.Пользователь,
		НайденнаяСтрока.Избранное, "Пользователи");
					
	// Установка фокуса на тот же номер строки
	ИндексСтроки = ДоступныеПользователи.Индекс(НайденнаяСтрока);
	
	// Пересортировка таблицы
	ДоступныеПользователи.Сортировать("Избранное УБЫВ, Наименование");
	
	КоличествоСтрок = ДоступныеПользователи.Количество();
	
	Если КоличествоСтрок > 0 Тогда
		Если КоличествоСтрок >= ИндексСтроки Тогда
			ИдентификаторСтроки = ДоступныеПользователи[ИндексСтроки].ПолучитьИдентификатор();
		Иначе
			ИдентификаторСтроки = ДоступныеПользователи[0].ПолучитьИдентификатор();
		КонецЕсли;
		
		Элементы.ДоступныеПользователи.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

&НаСервере
Процедура ЗаполнитьСпискиПользователей()
	
	ВыбранныеПользователи.Очистить();
	ДоступныеПользователи.Очистить();
		
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.Наименование КАК Наименование,
	|	Пользователи.ПометкаУдаления КАК ПометкаУдаления,
	|	Пользователи.Филиал КАК Филиал
	|ПОМЕСТИТЬ ТаблицаПользователей
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.Недействителен
	|	И НЕ Пользователи.Служебный
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Филиалы.Руководитель,
	|	Пользователи.Наименование,
	|	Пользователи.ПометкаУдаления,
	|	Филиалы.Ссылка
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО Филиалы.Руководитель = Пользователи.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК Пометка,
	|	ТаблицаПользователей.Пользователь КАК Пользователь,
	|	ТаблицаПользователей.Наименование КАК Наименование
	|ПОМЕСТИТЬ ПолнаяТаблицаПользователей
	|ИЗ
	|	ТаблицаПользователей КАК ТаблицаПользователей
	|ГДЕ
	|	ТаблицаПользователей.Пользователь В(&ВыбранныеПользователи)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	ТаблицаПользователей.Пользователь,
	|	ТаблицаПользователей.Наименование
	|ИЗ
	|	ТаблицаПользователей КАК ТаблицаПользователей
	|ГДЕ
	|	ТаблицаПользователей.ПометкаУдаления = ЛОЖЬ
	|{ГДЕ
	|	ТаблицаПользователей.Филиал КАК Филиалы}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПользователей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПолнаяТаблицаПользователей.Пользователь КАК Пользователь,
	|	ПолнаяТаблицаПользователей.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА ИзбранныеОбъекты.Объект ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Избранное,
	|	МАКСИМУМ(ПолнаяТаблицаПользователей.Пометка) КАК Пометка,
	|	МАКСИМУМ(-1) КАК ИдентификаторСтрокиСписка
	|ИЗ
	|	ПолнаяТаблицаПользователей КАК ПолнаяТаблицаПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзбранныеОбъекты КАК ИзбранныеОбъекты
	|		ПО ((ВЫРАЗИТЬ(ИзбранныеОбъекты.Объект КАК Справочник.Пользователи)) = ПолнаяТаблицаПользователей.Пользователь)
	|			И (ИзбранныеОбъекты.Владелец = &Владелец)
	|			И (ИзбранныеОбъекты.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыИзбранныхОбъектов.Пользователи))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПолнаяТаблицаПользователей.Пользователь,
	|	ПолнаяТаблицаПользователей.Наименование,
	|	ВЫБОР
	|		КОГДА ИзбранныеОбъекты.Объект ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Избранное УБЫВ,
	|	Наименование";
	#КонецОбласти
	
	ПостроительЗапроса.Параметры.Вставить("ВыбранныеПользователи", Параметры.ВыбранныеПользователи);	
	ПостроительЗапроса.Параметры.Вставить("Владелец", ПараметрыСеанса.ТекущийПользователь);
	
	Если Параметры.Свойство("Филиалы") Тогда
		Если ТипЗнч(Параметры.Филиалы) <> Тип("СписокЗначений") Тогда
			Филиалы = Новый СписокЗначений;
			Филиалы.Добавить(Параметры.Филиалы);
		Иначе
			Филиалы = Параметры.Филиалы;
		КонецЕсли;
		
		ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("Филиалы");
		ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке;
		ЭлементОтбора.Значение = Филиалы;
		ЭлементОтбора.Использование = Истина;
	КонецЕсли;
		
	ПостроительЗапроса.Выполнить();
	
	РезультатЗапроса = ПостроительЗапроса.Результат;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			// Заполнение общей таблицы филиалов
			НоваяСтрокаДоступных = ДоступныеПользователи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДоступных, Выборка);
			
			// Заполнение таблицы уже выбранных филиалов
			Если Выборка.Пометка = Истина Тогда
				НоваяСтрокаВыбранных = ВыбранныеПользователи.Добавить();
				НоваяСтрокаВыбранных.Исключить = БиблиотекаКартинок.УдалитьЗначение;
				
				НоваяСтрокаВыбранных.ИдентификаторСтрокиСписка = НоваяСтрокаДоступных.ПолучитьИдентификатор();
				НоваяСтрокаДоступных.ИдентификаторСтрокиСписка = НоваяСтрокаВыбранных.ПолучитьИдентификатор();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаВыбранных, Выборка, "Пользователь, Наименование");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьПоиск()
	
	// Очистка отбора, очистка строки поиска и установка фокуса на строку поиска
	Элементы.ДоступныеПользователи.ОтборСтрок = Неопределено;
	
	СтрокаПоиска = "";
	
	ТекущийЭлемент = Элементы.СтрокаПоиска;	
	
КонецПроцедуры

#КонецОбласти
