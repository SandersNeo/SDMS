///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет обработчики обновления
//
// Параметры:
//  Обработчики	 - ТаблицаЗначений	 - см. ПриложениеВызовСервера.ПолучитьОбработчикиДанных
//
Процедура ДобавлениеОбработчиковОбновления(Обработчики) Экспорт     
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "Справочники.Пользователи.СинхронизироватьПользователейИБ";
	
КонецПроцедуры

// Ищет по почте пользователя его адрес в основном мессенджере. Заполняет соответствующий реквизит если находит
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Ссылка на пользователя системы.
//  Почта        - Строка - Почта пользователя.
//
// Возвращаемое значение:
//  Структура.
//
Функция ЗаполнитьАдресМессенджера(Знач Пользователь, Знач Почта) Экспорт
	
	ОсновнойМессенджер = Константы.ОсновнойМессенджер.Получить();
	Обработка = Справочники.Мессенджеры.ПолучитьОбработкуМессенджера(ОсновнойМессенджер);  
	Результат = Новый Структура("Успешно, Сообщение, Данные", Ложь, "", Новый Структура);

	Если Обработка <> Неопределено Тогда
		
		Результат = Обработка.ПолучитьIDПользователя(Почта);
		
		Данные = Результат.Данные; 
		Адрес = ?(Данные.Свойство("Адрес"), Данные.Адрес, "");
		Идентификатор = ?(Данные.Свойство("Идентификатор"), Данные.Идентификатор, "");
		
		Если ЗначениеЗаполнено(Адрес) Или ЗначениеЗаполнено(Идентификатор) Тогда 
			РегистрыСведений.АдресаПолучателей.Добавить(Пользователь, ОсновнойМессенджер, Адрес, Идентификатор); 
		КонецЕсли;
	Иначе 
		Результат.Сообщение = "Не инициализирована обработка";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Производит первоначальное заполнение настроек отправки дайджеста по проетам и внутренним заданиям
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи	 - пользователь
//
Процедура ЗаполнитьНастройкиОтправкиДайджестаПоПроектам(Знач Пользователь) Экспорт
	
	РегистрСведений = РегистрыСведений.НастройкиПользователя;
	ПВХ = ПланыВидовХарактеристик.ВидыНастроекПользователя;
	
	Попытка
		РегистрСведений.СохранитьНастройку(Пользователь, ПВХ["ДеньОтправкиДайджестаПоПроектам"], 5);
		РегистрСведений.СохранитьНастройку(Пользователь, ПВХ["ОтправкаДайджестаЗаинтересованный"], Истина);
		РегистрСведений.СохранитьНастройку(Пользователь, ПВХ["ОтправкаДайджестаЗаказчик"], Истина);
		РегистрСведений.СохранитьНастройку(Пользователь, ПВХ["ОтправкаДайджестаКУП"], Истина);
		РегистрСведений.СохранитьНастройку(Пользователь, ПВХ["ОтправкаДайджестаНаблюдатель"], Истина);
		РегистрСведений.СохранитьНастройку(Пользователь, ПВХ["ОтправкаДайджестаРуководитель"], Истина);
		РегистрСведений.СохранитьНастройку(Пользователь, ПВХ["ОтправлятьДайджестПоПроектам"], Истина);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстКомментария = СтрШаблон("При сохранении настроек отправки дайджеста по проектам для пользователя возникла ошибка:
			|
			|%1", ТекстОшибки);
		
		ЗаписьЖурналаРегистрации("Пользователи.Сохранение настроек", УровеньЖурналаРегистрации.Ошибка, , , ТекстКомментария);
	КонецПопытки;
	
КонецПроцедуры

// Заполняет первоначальными данными табличную часть НастройкиОповещений.
//
// Параметры:
//  Пользователь - СправочникОбъект.Пользователи - элемент справочника Пользователи.
//
Процедура ЗаполнитьПервоначальныеНастройкиОповещений(Пользователь) Экспорт
	
	РегистрСведений = РегистрыСведений.НастройкиПользователя;
	ПВХ = ПланыВидовХарактеристик.ВидыНастроекПользователя;
	
	РегистрСведений.СохранитьНастройку(Пользователь, ПВХ["ВариантГруппировкиСообщений"], 0);
	РегистрСведений.СохранитьНастройку(Пользователь, ПВХ["ИспользоватьГруппировкуСообщений"], Истина);
	РегистрСведений.СохранитьНастройку(Пользователь, ПВХ["ГруппироватьСообщенияПоКатегориям"], Истина);
	РегистрСведений.СохранитьНастройку(Пользователь, ПВХ["ОтправлятьЗадачиНаТестировании"], Истина);
	
КонецПроцедуры

// Выполняет поиск элемента справочника Пользователи по значению реквизита ИдентификаторАД,
// в котором хранится идентификатор Active Directory.
//
// Параметры:
//  Идентификатор - Строка - идентификатор Active Directory.
//
// Возвращаемое значение:
//  Ссылка на элемент, если найдено. И пустая ссылка в противном случае.
//
Функция НайтиПоИдентификаторуActiveDirectory(Знач Идентификатор) Экспорт

	Результат = ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ИдентификаторАД = &Идентификатор";
		
		Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Пользователь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет поиск элемента справочника Пользователи по значению реквизита ИдентификаторПользователяИБ
//
// Параметры:
//  Идентификатор - Строка - идентификатор пользователя ИБ.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - Ссылка на пользователя, если найден, иначе пустая ссылка.
//
Функция НайтиПоИдентификаторуПользователяИБ(Знач Идентификатор) Экспорт

	Результат = ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Пользователь;
	КонецЕсли;
	
	Возврат Результат;	

КонецФункции

// Выполняет поиск элемента справочника Пользователи по значению реквизита Почта
//
// Параметры:
//  Почта - Строка - электронная почта
// 
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - Ссылка на элемент справочника
//
Функция НайтиПоАдресуЭлектроннойПочты(Знач Почта) Экспорт
	
	Пользователь = ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Почта = &Почта";
	
	Запрос.УстановитьПараметр("Почта", Почта);	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Пользователь = Выборка.Ссылка;
	КонецЕсли;	
	
	Возврат Пользователь;
	
КонецФункции

// Обрабатывает создание/изменение пользователя при обмене с ЦБ через карточку контрагента.
//
// Параметры:
//  СтруктураПользователя - Структура - Описание свойств пользователя.
//
// Возвращаемое значение:
//  Структура.
//
Функция ОбработатьСозданиеИзменениеПользователя(Знач СтруктураПользователя) Экспорт
	
	СтруктураВозврата = Новый Структура("Успешно, Сообщение", Ложь, "");
	
	// Переименовать имя события
	ИмяСобытия = "Web-cервисы.Users.CreateSDMSUser()";

	// Попытка найти пользователя в справочнике
	НайденныйПользователь = НайтиПоИдентификаторуActiveDirectory(СтруктураПользователя.ИдентификаторАД);
	РолиПоНаправлениям = СтруктураПользователя.РолиПоНаправлениям;
	
	Если НЕ ЗначениеЗаполнено(НайденныйПользователь) Тогда
		ЭтоНовый = Истина;
		ПользовательОбъект = СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ПользовательОбъект, СтруктураПользователя);
	Иначе
		ЭтоНовый = Ложь;
		ПользовательОбъект = НайденныйПользователь.ПолучитьОбъект();
		ПользовательОбъект.Недействителен = Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	РолиПоНаправлениям.НаправлениеРазработки КАК НаправлениеРазработки,
	|	РолиПоНаправлениям.Роль КАК Роль,
	|	&Пользователь КАК Пользователь,
	|	&ТекущаяДата КАК ДатаИзменения,
	|	&АвторИзменений КАК АвторИзменения
	|ПОМЕСТИТЬ НовыеРолиПоНаправлениям
	|ИЗ
	|	&РолиПоНаправлениям КАК РолиПоНаправлениям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеРолиПоНаправлениям.НаправлениеРазработки КАК НаправлениеРазработки,
	|	НовыеРолиПоНаправлениям.Пользователь КАК Пользователь,
	|	НовыеРолиПоНаправлениям.Роль КАК Роль,
	|	ВЫБОР
	|		КОГДА РолиПользователейПоНаправлениям.НаправлениеРазработки ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДанныеИзменены,
	|	ВЫБОР
	|		КОГДА РолиПользователейПоНаправлениям.НаправлениеРазработки ЕСТЬ NULL
	|			ТОГДА НовыеРолиПоНаправлениям.АвторИзменения
	|		ИНАЧЕ РолиПользователейПоНаправлениям.АвторИзменения
	|	КОНЕЦ КАК АвторИзменения,
	|	ВЫБОР
	|		КОГДА РолиПользователейПоНаправлениям.НаправлениеРазработки ЕСТЬ NULL
	|			ТОГДА НовыеРолиПоНаправлениям.ДатаИзменения
	|		ИНАЧЕ РолиПользователейПоНаправлениям.ДатаИзменения
	|	КОНЕЦ КАК ДатаИзменения
	|ИЗ
	|	НовыеРолиПоНаправлениям КАК НовыеРолиПоНаправлениям
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиПользователейПоНаправлениям КАК РолиПользователейПоНаправлениям
	|		ПО НовыеРолиПоНаправлениям.НаправлениеРазработки = РолиПользователейПоНаправлениям.НаправлениеРазработки
	|			И НовыеРолиПоНаправлениям.Пользователь = РолиПользователейПоНаправлениям.Пользователь
	|			И НовыеРолиПоНаправлениям.Роль = РолиПользователейПоНаправлениям.Роль";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("РолиПоНаправлениям", РолиПоНаправлениям);
	Запрос.УстановитьПараметр("Пользователь", ПользовательОбъект.Ссылка);
	Запрос.УстановитьПараметр("АвторИзменений", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	ТаблицаРолейПоНаправлениям = Запрос.Выполнить().Выгрузить();
	
	ПользовательОбъект.СистемаПоУмолчанию = СтруктураПользователя.СистемаПоУмолчанию;
	
	Если ЭтоНовый Тогда
		ИдентификаторПользователя = Неопределено;
	Иначе
		ИдентификаторПользователя = ПользовательОбъект.ИдентификаторПользователяИБ;
	КонецЕсли;
	
	АутентификацияОС = Константы.ИспользоватьДоменнуюАвторизациюПользователей.Получить();
	
	СвойстваПользователяИБ = Новый Структура;
	СвойстваПользователяИБ.Вставить("УникальныйИдентификатор", ИдентификаторПользователя);
	СвойстваПользователяИБ.Вставить("Имя", СтруктураПользователя.Наименование);
	СвойстваПользователяИБ.Вставить("ПоказыватьВСпискеВыбора", Истина);
	СвойстваПользователяИБ.Вставить("ЗапрещеноИзменятьПароль", Ложь);
	СвойстваПользователяИБ.Вставить("ПолноеИмя", СтруктураПользователя.Наименование);
	СвойстваПользователяИБ.Вставить("РежимЗапуска", РежимЗапускаКлиентскогоПриложения.Авто); 
	СвойстваПользователяИБ.Вставить("Язык", Метаданные.ОсновнойЯзык);
	СвойстваПользователяИБ.Вставить("АутентификацияОС", АутентификацияОС);
	
	Если ЗначениеЗаполнено(СтруктураПользователя.Почта) Тогда
		ИмяПользователяОС = Справочники.Пользователи.ПолучитьИмяПользователяОС(СтруктураПользователя.Почта);
		СвойстваПользователяИБ.Вставить("ПользовательОС", ИмяПользователяОС);
	КонецЕсли;
	
	ПарольПользователя = Неопределено;
	
	Если ЭтоНовый Тогда
		ПарольПользователя = Пользователи.НовыйВременныйПароль();
	КонецЕсли;
	
	СвойстваПользователяИБ.Вставить("НовыйПароль", ПарольПользователя);
	
	ПользовательОбъект.ДополнительныеСвойства.Вставить("СвойстваПользователяИБ", СвойстваПользователяИБ);
	ПользовательОбъект.ДополнительныеСвойства.Вставить("ТаблицаРолейПоНаправлениям", ТаблицаРолейПоНаправлениям);
	
	ПользовательОбъект.ДополнительныеСвойства.Вставить("УправлениеПорядкомЗаявокНаРазработку", 
		СтруктураПользователя.УправлениеПорядкомЗаявокНаРазработку);
	
	Попытка
		ПользовательОбъект.Записать();
		СтруктураВозврата.Успешно = Истина;
	Исключение
		Сообщение = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СтруктураВозврата.Сообщение = Сообщение;
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
	КонецПопытки;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Проверяет наличие у пользователя информационной базы требуемой роли.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь из справочника,
//  связанный с пользователем ИБ по реквизиту ИдентификаторПользователяИБ.
//  ТребуемыеРоли - Строка - название роли как в конфигураторе
// 
// Возвращаемое значение:
//  Булево.
//
Функция ПользовательИмеетРоли(Знач Пользователь, Знач ТребуемыеРоли) Экспорт
	
	Результат = Новый Соответствие;
	МассивРолей = Новый Массив;
	
	Если ТипЗнч(ТребуемыеРоли) = Тип("Строка") Тогда
		МассивРолей.Добавить(ТребуемыеРоли);
	Иначе
		МассивРолей = ТребуемыеРоли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.ИдентификаторПользователяИБ КАК Идентификатор
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.Идентификатор);
		Если ПользовательИБ <> Неопределено Тогда
			Для Каждого ТребуемаяРоль Из МассивРолей Цикл
				Результат.Вставить(ТребуемаяРоль, ПользовательИБ.Роли.Содержит(Метаданные.Роли[ТребуемаяРоль]));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает имя пользователя домена.
//
// Параметры:
//  Почта - Строка - почта пользователя.
// 
// Возвращаемое значение:
//   Строка. Имя пользователя домена.
//
Функция ПолучитьИмяПользователяОС(Знач Почта) Экспорт
	
	Результат = "";
	
	Позиция = СтрНайти(Почта, "@");
	Если Позиция > 0 Тогда
		Результат = "\\PARTNER\" + Лев(Почта, Позиция - 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает филиал тестирования.
//
// Параметры:
//  Филиал - СправочникСсылка.Филиалы - текущий филиал пользователя.
// 
// Возвращаемое значение:
//   СправочникСсылка.Филиал - Филиал тестирования
//
Функция ПолучитьФилиалТестированияПользователя(Знач Филиал) Экспорт
	
	ФилиалыТестирования = Справочники.Филиалы.ПолучитьФилиалыТестирования(Филиал);
	
	Возврат ФилиалыТестирования[0];
	
КонецФункции

// Возвращает ссылку на служебного пользователя web connection
// 
// Возвращаемое значение:
//   СправочникСсылка.Пользователи - ссылка на элемент справочника Пользователи 
//
Функция ПользовательWebConnection() Экспорт
	
	Возврат XMLЗначение(Тип("СправочникСсылка.Пользователи"), "d4ee00eb-0723-11e8-9ba5-00155d033631");
	
КонецФункции

// Устанавливает признак отображения пользователя информационной базы в списке при авторизации.
//
// Параметры:
//  Идентификатор - Строка - идентификатор пользователя ИБ.
//  Отображать    - Булево - признак отображения в списке выбора.
//
Процедура УстановитьОтображениеВСпискеВыбора(Знач Идентификатор, Знач Отображать) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор);
	Если ПользовательИБ <> Неопределено Тогда
		ПользовательИБ.ПоказыватьВСпискеВыбора = Отображать;
		ПользовательИБ.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру проверяемых данных
// 
// Возвращаемое значение:
//   - Структура
//		* Реквизиты	 - Массив	 - названия реквизитов которые требуют проверки
//		* ТабличныеЧасти	 - Структура	 - табличные части и их реквизиты которые требуют проверки.
//			Ключ - название табличной части
//			Значение - реквизит табличной части который требуется проверить
//
Функция ПроверяемыеСвойстваОбъекта() Экспорт
	
	Результат = Новый Структура("Реквизиты, ТабличныеЧасти", Новый Массив, Новый Структура);
	
	// Названия реквизитов объекта
	Результат.Реквизиты.Добавить("Наименование");
	Результат.Реквизиты.Добавить("РольВОтделеIT");
	Результат.Реквизиты.Добавить("Почта");
	Результат.Реквизиты.Добавить("Недействителен");
	Результат.Реквизиты.Добавить("ИдентификаторПользователяИБ");
	Результат.Реквизиты.Добавить("ИдентификаторАД");
	Результат.Реквизиты.Добавить("Должность");
	Результат.Реквизиты.Добавить("ДатаСоздания");
	
	Возврат Результат;
	
КонецФункции

// Возвращает систему по умолчанию для переданного пользователя
//
// Параметры:
//  Пользователь	 - СправочникСсылка.Пользователь - пользователь
// 
// Возвращаемое значение:
//  СправочникСсылка.СистемыУчета - Система по умолчанию
//
Функция СистемаПоУмолчанию(Знач Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.СистемаПоУмолчанию КАК СистемаПоУмолчанию
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.СистемаПоУмолчанию;
	
КонецФункции 

// Синхронизирует пользователей БД с пользователями
//
Процедура СинхронизироватьПользователейИБ() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи"; 
	
	Существующие = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторПользователяИБ");
	
	Для Каждого Пользователь Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		Если Существующие.Найти(Пользователь.УникальныйИдентификатор) = Неопределено Тогда   
			Объект = Справочники.Пользователи.СоздатьЭлемент();	
			Объект.ДатаСоздания = ТекущаяДата();
			Объект.ИдентификаторПользователяИБ = Пользователь.УникальныйИдентификатор;  
			Объект.Наименование = Пользователь.ПолноеИмя;
			Объект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры     

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаВыбора" И Параметры.Свойство("ТекущаяСтрока")
		И ТипЗнч(Параметры.ТекущаяСтрока) = Тип("СписокЗначений") Тогда
		
		Параметры.Вставить("ВыбранныеПользователи", Параметры.ТекущаяСтрока);
		ВыбраннаяФорма = "Справочник.Пользователи.Форма.МножественныйВыбор";
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
