///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс           

// Добавляет обработчики обновления
//
// Параметры:
//  Обработчики	 - ТаблицаЗначений	 - см. ПриложениеВызовСервера.ПолучитьОбработчикиДанных
//
Процедура ДобавлениеОбработчиковОбновления(Обработчики) Экспорт     
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "Справочники.ИдентификаторыОбъектовМетаданных.ПроверитьПредопределенныеЭлементы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "Справочники.ИдентификаторыОбъектовМетаданных.ОбновитьИдентификаторы";
	
КонецПроцедуры

// Обновляет идентификаторы на основе самой конфигурации. Формирует даныне в формате файла ConfigDumpInfo. 
// Аналог СинхронизироватьИдентификаторыМетаданных. Используется когда нет возможности выгружать конфигурацию в отдельный файлы.
//
Процедура ОбновитьИдентификаторы() Экспорт 
	
	Шапка  = 
	"<?xml version=""1.0"" encoding=""UTF-8""?>
	|<ConfigDumpInfo xmlns=""http://v8.1c.ru/8.3/xcf/dumpinfo"" xmlns:xen=""http://v8.1c.ru/8.3/xcf/enums"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" format=""Hierarchical"" version=""2.17"">";
		
	ЗаписьXML = новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьНачалоЭлемента("ConfigVersions");   
	
	Для Каждого Мета Из Метаданные.Справочники Цикл
		ЗаписьДанных(ЗаписьXML, Мета, "Catalog")	
	КонецЦикла;
	
	Для Каждого Мета Из Метаданные.ОбщиеКоманды Цикл
		ЗаписьДанных(ЗаписьXML, Мета, "CommonCommand")	
	КонецЦикла;
	
	Для Каждого Мета Из Метаданные.ОбщиеФормы Цикл
		ЗаписьДанных(ЗаписьXML, Мета, "CommonForm")	
	КонецЦикла; 
	
	Для Каждого Мета Из Метаданные.РегистрыНакопления Цикл
		ЗаписьДанных(ЗаписьXML, Мета, "AccumulationRegister")	
	КонецЦикла;
	
	Для Каждого Мета Из Метаданные.РегистрыСведений Цикл
		ЗаписьДанных(ЗаписьXML, Мета, "InformationRegister")	
	КонецЦикла;    
	
	Для Каждого Мета Из Метаданные.ПланыВидовХарактеристик Цикл
		ЗаписьДанных(ЗаписьXML, Мета, "ChartOfCharacteristicTypes")	
	КонецЦикла;
	
	Для Каждого Мета Из Метаданные.Константы Цикл
		ЗаписьДанных(ЗаписьXML, Мета, "Constant")	
	КонецЦикла;
	
	Для Каждого Мета Из Метаданные.Обработки Цикл
		ЗаписьДанных(ЗаписьXML, Мета, "DataProcessor")	
	КонецЦикла;
	
	Для Каждого Мета Из Метаданные.Документы Цикл
		ЗаписьДанных(ЗаписьXML, Мета, "Document")	
	КонецЦикла;
	
	Для Каждого Мета Из Метаданные.Перечисления Цикл
		ЗаписьДанных(ЗаписьXML, Мета, "Enum")	
	КонецЦикла;
	
	Для Каждого Мета Из Метаданные.ПланыОбмена Цикл
		ЗаписьДанных(ЗаписьXML, Мета, "ExchangePlan")	
	КонецЦикла;  
	
	Для Каждого Мета Из Метаданные.Отчеты Цикл
		ЗаписьДанных(ЗаписьXML, Мета, "Report")	
	КонецЦикла; 
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	СоставКонфигурации = Шапка + ЗаписьXML.Закрыть() + "</ConfigDumpInfo>";
	Справочники.ИдентификаторыОбъектовМетаданных.СинхронизироватьИдентификаторыМетаданных(СоставКонфигурации);
	
КонецПроцедуры   

// Проверяет предопределенные настройки
//
Процедура ПроверитьПредопределенныеЭлементы() Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИдентификаторыОбъектовМетаданных.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ИдентификаторыОбъектовМетаданных.Ссылка = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.Справочник)
	|			ТОГДА ""Catalog""
	|		КОГДА ИдентификаторыОбъектовМетаданных.Ссылка = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ОбщаяКоманда)
	|			ТОГДА ""CommonCommand""
	|		КОГДА ИдентификаторыОбъектовМетаданных.Ссылка = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ОбщаяФорма)
	|			ТОГДА ""CommonForm""
	|		КОГДА ИдентификаторыОбъектовМетаданных.Ссылка = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.РегистрНакопления)
	|			ТОГДА ""AccumulationRegister""
	|		КОГДА ИдентификаторыОбъектовМетаданных.Ссылка = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.РегистрСведений)
	|			ТОГДА ""InformationRegister""
	|		КОГДА ИдентификаторыОбъектовМетаданных.Ссылка = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПланВидовХарактеристик)
	|			ТОГДА ""ChartOfCharacteristicTypes""
	|		КОГДА ИдентификаторыОбъектовМетаданных.Ссылка = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.Константа)
	|			ТОГДА ""Constant""
	|		КОГДА ИдентификаторыОбъектовМетаданных.Ссылка = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.Обработка)
	|			ТОГДА ""DataProcessor""
	|		КОГДА ИдентификаторыОбъектовМетаданных.Ссылка = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.Документ)
	|			ТОГДА ""Document""
	|		КОГДА ИдентификаторыОбъектовМетаданных.Ссылка = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.Перечисление)
	|			ТОГДА ""Enum""
	|		КОГДА ИдентификаторыОбъектовМетаданных.Ссылка = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПланОбмена)
	|			ТОГДА ""ExchangePlan""
	|		КОГДА ИдентификаторыОбъектовМетаданных.Ссылка = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.Отчет)
	|			ТОГДА ""Report""
	|	КОНЕЦ КАК Идентификатор
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|ГДЕ
	|	ИдентификаторыОбъектовМетаданных.Предопределенный
	|	И ИдентификаторыОбъектовМетаданных.Идентификатор = """"";
										
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Идентификатор = Выборка.Идентификатор;
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры     

// Запускает процесс синхронизации элементов справочника с деревом конфигурации
//
// Возвращаемое значение:
//   - Булево
//
Функция СинхронизироватьИдентификаторыМетаданных(Знач СоставКонфигурации = Неопределено) Экспорт
	
	Результат = Ложь;
	
	ИмяСобытия = "Справочники.ИдентификаторыОбъектовМетаданных.Синхронизация";
	ТипыМетаданных = ПолучитьТипыМетаданных();
		
	Если СоставКонфигурации = Неопределено Тогда
		GitLabAPI = Обработки.GitLabAPI.Создать();
		РезультатПолученияФайла = GitLabAPI.ПолучитьСодержимоеФайла(ТипыМетаданных.Массив);
		
		Если НЕ РезультатПолученияФайла.Успешно Тогда
			Возврат Результат;
		КонецЕсли;
		
		СоставКонфигурации = РезультатПолученияФайла.Содержимое;

		// Парсинг файлов
		РезультатПолучения = ЗаполнитьТаблицуИдентификаторов(СоставКонфигурации, ТипыМетаданных.Соответствие);
	Иначе
		// Парсинг файла ConfigDumpInfo.xml
		РезультатПолучения = ЗаполнитьТаблицуИзФайла(СоставКонфигурации, ТипыМетаданных.Соответствие);
	КонецЕсли;
		
	Если РезультатПолучения.Успешно Тогда
		// Синхронизация элементов справочника с деревом конфигурации
		Результат = СинхронизироватьОбъектыМетаданных(РезультатПолучения.Таблица, ИмяСобытия);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Производит парсинг файлов из папки src и возвращает таблицу идентификаторов объектов метаданных
//
// Параметры:
//  КаталогФайлов	 - Строка	 - каталог, в который выгружены файлы конфигурации
//  ТипыМетаданных	 - Соответствие	 - данные для типов матаданных
// 
// Возвращаемое значение:
//	 - Структура
//		* Успешно	 - Булево	 - признак успешного выполнения
//   	* Таблица	 - ТаблицаЗначений	 - таблица идентификаторов объектов метаданных
//  		** Тип	 - Строка	 - строковое представление типа объекта, например, "Справочники", "РегистрыСведений"
//  		** Название	 - Строка	 - название объекта метаданных, например, "Филиалы", "СвойстваЗадач"
//  		** ИмяФормы	 - Строка	 - название формы объекта, например, "ФормаСписка", "ФормаЗаписи"
//  		** Идентификатор	 - Строка	 - строковое представление идентификатора объекта метаданных
//
Функция ЗаполнитьТаблицуИдентификаторов(Знач СоставКонфигурации, ТипыМетаданных)
	
	Результат = Новый Структура("Успешно, Таблица", Ложь, Неопределено);
	
	Таблица = ПолучитьТаблицуИдентификаторов();
	Файлы = НайтиФайлы(СоставКонфигурации, "*.mdo", Истина);
	
	ПостроительDOM = Новый ПостроительDOM;

	Для Каждого Файл Из Файлы Цикл
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Файл.ПолноеИмя);
		
 		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
		ЧтениеXML.Закрыть();

		ИдентификаторТипа = ДокументDOM.ЭлементДокумента.ЛокальноеИмя;
		ТипОбъекта = ТипыМетаданных.Получить(ИдентификаторТипа);
				
		Если ТипОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		ЭлементыОбъекта = ДокументDOM.ПолучитьЭлементыПоИмени("*", "name");
				
		Для Каждого ОбъектМетаданных Из ЭлементыОбъекта Цикл
			РодительскийУзел = ОбъектМетаданных.РодительскийУзел;
			
			АтрибутИдентификатор = РодительскийУзел.Атрибуты.ПолучитьИменованныйЭлемент("uuid");
			Если АтрибутИдентификатор = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Идентификатор = АтрибутИдентификатор.Значение;
			
			ИдентификаторНазвания = "";
			НаименованиеЭлемента = ОбъектМетаданных.ТекстовоеСодержимое;
			ПолноеИмяФормы = СтрШаблон("%1.%2", ТипОбъекта.Наименование, НаименованиеЭлемента);
			ЭтоГруппа = Ложь;
			ИдентификаторЭлемента = Идентификатор;
			
			Если РодительскийУзел.ЛокальноеИмя = ИдентификаторТипа Тогда
				Если ТипОбъекта.Ссылка = Справочники.ИдентификаторыОбъектовМетаданных.ОбщаяФорма Тогда
					НазваниеОбъекта = "";
					ТипМетаданных = Перечисления.ТипыМетаданных.ОбщаяФорма;
					
				ИначеЕсли ТипОбъекта.Ссылка = Справочники.ИдентификаторыОбъектовМетаданных.ОбщаяКоманда Тогда
					НазваниеОбъекта = "";
					ТипМетаданных = Перечисления.ТипыМетаданных.Команда;
					
				ИначеЕсли ТипОбъекта.Ссылка = Справочники.ИдентификаторыОбъектовМетаданных.Константа Тогда
					НазваниеОбъекта = "";
					ТипМетаданных = Перечисления.ТипыМетаданных.Константа;
					
				Иначе
					НазваниеОбъекта = ОбъектМетаданных.ТекстовоеСодержимое;
					ОсновнойИдентификатор = Идентификатор;
					ИдентификаторНазвания = ОсновнойИдентификатор;
					НаименованиеЭлемента = "";
					ИдентификаторЭлемента = "";
					ПолноеИмяФормы = СтрШаблон("%1.%2", ТипОбъекта.Наименование, НазваниеОбъекта);
					ЭтоГруппа = Истина;
					ТипМетаданных = Перечисления.ТипыМетаданных.Объект;
				КонецЕсли;
				
			ИначеЕсли РодительскийУзел.ИмяУзла = "forms" Тогда
				ТипИмя = СтрШаблон("%1.%2", ТипОбъекта.Наименование, НазваниеОбъекта);
				
				ИдентификаторНазвания = ОсновнойИдентификатор;
				ПолноеИмяФормы = СтрШаблон("%1.Форма.%2", ТипИмя, НаименованиеЭлемента);
				ТипМетаданных = Перечисления.ТипыМетаданных.Форма;
				
			ИначеЕсли РодительскийУзел.ИмяУзла = "commands" Тогда
				ТипИмя = СтрШаблон("%1.%2", ТипОбъекта.Наименование, НазваниеОбъекта);
				
				ИдентификаторНазвания = ОсновнойИдентификатор;
				ПолноеИмяФормы = СтрШаблон("%1.Команда.%2", ТипИмя, НаименованиеЭлемента);
				ТипМетаданных = Перечисления.ТипыМетаданных.Команда;
			Иначе
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Тип = ТипОбъекта.Ссылка;
			НоваяСтрока.Название = НазваниеОбъекта;
			НоваяСтрока.ИдентификаторНазвания = ИдентификаторНазвания;
			НоваяСтрока.Форма = НаименованиеЭлемента;
			НоваяСтрока.ИдентификаторФормы = ИдентификаторЭлемента;
			НоваяСтрока.ПолноеИмяФормы = ПолноеИмяФормы;
			НоваяСтрока.ЭтоГруппа = ЭтоГруппа;
			НоваяСтрока.ТипМетаданных = ТипМетаданных;			
		КонецЦикла;
	КонецЦикла;
	
	УдалитьФайлы(СоставКонфигурации);
	
	Результат.Успешно = Истина;
	Результат.Таблица = Таблица;
	
	Возврат Результат;
	
КонецФункции

// Производит парсинг файла ConfigDumpInfo.xml и возвращает таблицу идентификаторов объектов метаданных
//
// Параметры:
//  КаталогФайлов	 - Строка	 - каталог, в который выгружены файлы конфигурации
//  ТипыМетаданных	 - Соответствие	 - данные для типов матаданных
// 
// Возвращаемое значение:
//	 - Структура
//		* Успешно	 - Булево	 - признак успешного выполнения
//   	* Таблица	 - ТаблицаЗначений	 - таблица идентификаторов объектов метаданных
//  		** Тип	 - Строка	 - строковое представление типа объекта, например, "Справочники", "РегистрыСведений"
//  		** Название	 - Строка	 - название объекта метаданных, например, "Филиалы", "СвойстваЗадач"
//  		** ИмяФормы	 - Строка	 - название формы объекта, например, "ФормаСписка", "ФормаЗаписи"
//  		** Идентификатор	 - Строка	 - строковое представление идентификатора объекта метаданных
//
Функция ЗаполнитьТаблицуИзФайла(Знач СоставКонфигурации, ТипыМетаданных)
	
	Результат = Новый Структура("Успешно, Таблица", Ложь, Неопределено);
		
	Таблица = ПолучитьТаблицуИдентификаторов();

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СоставКонфигурации);
	
	КонфигурацияXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ИдентификаторыОбъектов = Новый Соответствие;
	
	Для Каждого ОбъектМетаданных Из КонфигурацияXDTO.ConfigVersions.Metadata Цикл
		ЗаполнитьТаблицуИзОбъекта(ОбъектМетаданных, Таблица, ТипыМетаданных, ИдентификаторыОбъектов);
	КонецЦикла;
	
	Результат.Успешно = Истина;
	Результат.Таблица = Таблица;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТаблицуИзОбъекта(ОбъектМетаданных, Таблица, ТипыМетаданных, ИдентификаторыОбъектов)
	
	ИмяОбъекта = ОбъектМетаданных.name;
	Идентификатор = ОбъектМетаданных.id;
	
	Если СтрДлина(Идентификатор) <> 36 Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиИмени = СтрРазделить(ИмяОбъекта, ".");
	ТипОбъекта = ТипыМетаданных.Получить(ЧастиИмени[0]);
	
	ЭтоГруппа = Ложь;
	НазваниеОбъекта = ЧастиИмени[1];
	ИдентификаторЭлемента = Идентификатор;
	
	Если ТипОбъекта = Неопределено Тогда
		Возврат;
		
	ИначеЕсли ТипОбъекта.Ссылка = Справочники.ИдентификаторыОбъектовМетаданных.ОбщаяФорма Тогда
		НазваниеОбъекта = "";
		ИдентификаторНазвания = "";
		НаименованиеЭлемента = ЧастиИмени[1];
		ПолноеИмяФормы = СтрШаблон("%1.%2", ТипОбъекта.Наименование, НаименованиеЭлемента);
		ТипМетаданных = Перечисления.ТипыМетаданных.ОбщаяФорма;
		
	ИначеЕсли ТипОбъекта.Ссылка = Справочники.ИдентификаторыОбъектовМетаданных.ОбщаяКоманда Тогда
		НазваниеОбъекта = "";
		ИдентификаторНазвания = "";
		НаименованиеЭлемента = ЧастиИмени[1];
		ПолноеИмяФормы = СтрШаблон("%1.%2", ТипОбъекта.Наименование, ЧастиИмени[1]);
		ТипМетаданных = Перечисления.ТипыМетаданных.Команда;
		
	ИначеЕсли ТипОбъекта.Ссылка = Справочники.ИдентификаторыОбъектовМетаданных.Константа Тогда
		НазваниеОбъекта = "";
		ИдентификаторНазвания = "";
		НаименованиеЭлемента = ЧастиИмени[1];
		ПолноеИмяФормы = СтрШаблон("%1.%2", ТипОбъекта.Наименование, ЧастиИмени[1]);
		ТипМетаданных = Перечисления.ТипыМетаданных.Константа;
		
	ИначеЕсли ЧастиИмени.Количество() = 2 Тогда
		ИдентификаторНазвания = Идентификатор;
		НаименованиеЭлемента = "";
		ИдентификаторЭлемента = "";
		ПолноеИмяФормы = СтрШаблон("%1.%2", ТипОбъекта.Наименование, ЧастиИмени[1]);
		ЭтоГруппа = Истина;
		ТипМетаданных = Перечисления.ТипыМетаданных.Объект;
		
		ИдентификаторыОбъектов.Вставить(ПолноеИмяФормы, Идентификатор);
		
	ИначеЕсли ЧастиИмени[2] = "Form" Тогда
		ТипИмя = СтрШаблон("%1.%2", ТипОбъекта.Наименование, ЧастиИмени[1]);
		
		ИдентификаторНазвания = ИдентификаторыОбъектов.Получить(ТипИмя);
		НаименованиеЭлемента = ЧастиИмени[3];
		ПолноеИмяФормы = СтрШаблон("%1.Форма.%2", ТипИмя, НаименованиеЭлемента);
		ТипМетаданных = Перечисления.ТипыМетаданных.Форма;
		
	ИначеЕсли ЧастиИмени[2] = "Command" Тогда
		ТипИмя = СтрШаблон("%1.%2", ТипОбъекта.Наименование, ЧастиИмени[1]);
		
		ИдентификаторНазвания = ИдентификаторыОбъектов.Получить(ТипИмя);
		НаименованиеЭлемента = ЧастиИмени[3];
		ПолноеИмяФормы = СтрШаблон("%1.Команда.%2", ТипИмя, НаименованиеЭлемента);
		ЭтоКоманда = Истина;
		ТипМетаданных = Перечисления.ТипыМетаданных.Команда;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Тип = ТипОбъекта.Ссылка;
	НоваяСтрока.Название = НазваниеОбъекта;
	НоваяСтрока.ИдентификаторНазвания = ИдентификаторНазвания;
	НоваяСтрока.Форма = НаименованиеЭлемента;
	НоваяСтрока.ИдентификаторФормы = ИдентификаторЭлемента;
	НоваяСтрока.ПолноеИмяФормы = ПолноеИмяФормы;
	НоваяСтрока.ЭтоГруппа = ЭтоГруппа;
	НоваяСтрока.ТипМетаданных = ТипМетаданных;
	
	Если ОбъектМетаданных.Свойства().Получить("Metadata") <> Неопределено Тогда
		Если ТипЗнч(ОбъектМетаданных.Metadata) = Тип("СписокXDTO") Тогда
			Для Каждого ВложенныйОбъектМетаданных Из ОбъектМетаданных.Metadata Цикл
				ЗаполнитьТаблицуИзОбъекта(ВложенныйОбъектМетаданных, Таблица, ТипыМетаданных, ИдентификаторыОбъектов);
			КонецЦикла;
			
		Иначе
			ЗаполнитьТаблицуИзОбъекта(ОбъектМетаданных.Metadata, Таблица, ТипыМетаданных, ИдентификаторыОбъектов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписьДанных(ЗаписьXML, Метаданное, Тип)
	
	Имя = СтрШаблон("%1.%2", Тип, Метаданное.Имя);  
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("Metadata");  
	ЗаписьXML.ЗаписатьАтрибут("name", Имя);
	ЗаписьXML.ЗаписатьАтрибут("id", ПолучитьId(Имя));
	ЗаписьXML.ЗаписатьКонецЭлемента();  
	
	Структура = Новый Структура("Формы, Команды");
	ЗаполнитьЗначенияСвойств(Структура, Метаданное);
	
	Если Структура.Формы <> Неопределено Тогда
		Для Каждого Форма из Метаданное.Формы Цикл    
			ИмяФормыМета = СтрШаблон("%1.Form.%2", Имя, Форма.Имя);
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Metadata");  
			ЗаписьXML.ЗаписатьАтрибут("name", ИмяФормыМета);
			ЗаписьXML.ЗаписатьАтрибут("id", ПолучитьId(ИмяФормыМета));
			ЗаписьXML.ЗаписатьКонецЭлемента();  
		КонецЦикла;
	КонецЕсли;
	
	Если Структура.Команды <> Неопределено Тогда
		Для Каждого Команда из Метаданное.Команды Цикл    
			ИмяКомандыМета = СтрШаблон("%1.Command.%2", Имя, Команда.Имя);
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Metadata");  
			ЗаписьXML.ЗаписатьАтрибут("name", ИмяКомандыМета);
			ЗаписьXML.ЗаписатьАтрибут("id", ПолучитьId(ИмяКомандыМета));
			ЗаписьXML.ЗаписатьКонецЭлемента();  
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьId(Строка)  
	
	ХэшированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХэшированиеДанных.Добавить(Строка);
	Хэш = НРег(СтрЗаменить(ХэшированиеДанных.ХешСумма, " ", ""));   
	
	Возврат Лев(Хэш, 8) + "-" + Сред(Хэш, 9, 4) + "-" + Сред(Хэш, 13, 4) + "-" + Сред(Хэш, 17, 4) + "-" + Прав(Хэш, 12);	
	
КонецФункции

Функция ПолучитьТаблицуИдентификаторов()

	ОписаниеТипаСтрока = ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(200);
	ОписаниеТипаСправочника = Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных");
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Тип", ОписаниеТипаСправочника);
	Таблица.Колонки.Добавить("Название", ОписаниеТипаСтрока);
	Таблица.Колонки.Добавить("ИдентификаторНазвания", ОписаниеТипаСтрока);
	Таблица.Колонки.Добавить("Форма", ОписаниеТипаСтрока);
	Таблица.Колонки.Добавить("ИдентификаторФормы", ОписаниеТипаСтрока);
	Таблица.Колонки.Добавить("ПолноеИмяФормы", ОписаниеТипаСтрока);
	Таблица.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ТипМетаданных", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыМетаданных"));
	
	Возврат Таблица;

КонецФункции

// Возвращает соответствие названий типов метаданных (англ. - рус.)
// 
// Возвращаемое значение:
//   - Соответствие
//
Функция ПолучитьТипыМетаданных()
	
	Результат = Новый Структура;
	МасстивТипов = Новый Массив;
	Типы = Новый Соответствие;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИдентификаторыОбъектовМетаданных.Ссылка КАК Ссылка,
	|	ИдентификаторыОбъектовМетаданных.Наименование КАК Наименование,
	|	ИдентификаторыОбъектовМетаданных.Идентификатор КАК Идентификатор
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|ГДЕ
	|	ИдентификаторыОбъектовМетаданных.Родитель = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка)
	|	И ИдентификаторыОбъектовМетаданных.Предопределенный";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеТипа = Новый Структура("Наименование, Ссылка");
			ЗаполнитьЗначенияСвойств(ДанныеТипа, Выборка);
			Типы.Вставить(Выборка.Идентификатор, ДанныеТипа);
			
			МасстивТипов.Добавить(Выборка.Идентификатор);
		КонецЦикла;
	КонецЕсли;
	
	Результат.Вставить("Массив", МасстивТипов);
	Результат.Вставить("Соответствие", Типы);
	
	Возврат Результат;
	
КонецФункции

// Производит обновление элементов в справочнике ИдентификаторыОбъектовМетаданных
//
// Параметры:
//  Таблица		 - ТаблицаЗначений	 - таблица, полученная методом ОбработатьТаблицуИдентификаторов()
//  	* Тип	 - Строка	 - строковое представление типа объекта, например, "Справочники", "РегистрыСведений"
//  	* Название	 - Строка	 - название объекта метаданных, например, "Филиалы", "СвойстваЗадач"
//  	* ИдентификаторНазвания	 - Строка	 - строковое представление идентификатора названия объекта метаданных
//  	* ИмяФормы	 - Строка	 - название формы объекта, например, "ФормаСписка", "ФормаЗаписи"
//  	* ИдентификаторФормы	 - Строка	 - строковое представление идентификатора объекта метаданных
//  ИмяСобытия	 - Строка	 - имя события для записи в журнал регистрации
// 
// Возвращаемое значение:
//   - Булево
//
Функция СинхронизироватьОбъектыМетаданных(Знач Таблица, Знач ИмяСобытия)
	
	Результат = Истина;
	
	Запрос = Новый Запрос;
	
#Область ТекстЗапроса
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Тип КАК Тип,
	|	Таблица.Название КАК Название,
	|	Таблица.ИдентификаторНазвания КАК ИдентификаторНазвания,
	|	Таблица.Форма КАК Форма,
	|	Таблица.ИдентификаторФормы КАК ИдентификаторФормы,
	|	Таблица.ПолноеИмяФормы КАК ПолноеИмяФормы,
	|	Таблица.ЭтоГруппа КАК ЭтоГруппа,
	|	Таблица.ТипМетаданных КАК ТипМетаданных
	|ПОМЕСТИТЬ НовыеДанные
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыОбъектовМетаданных.Ссылка КАК Ссылка,
	|	ИдентификаторыОбъектовМетаданных.Наименование КАК Наименование
	|ПОМЕСТИТЬ ТипыОбъектов
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|ГДЕ
	|	ИдентификаторыОбъектовМетаданных.Родитель = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТипыОбъектов.Ссылка КАК Тип,
	|	Названия.Ссылка КАК НазваниеСсылка,
	|	Названия.Наименование КАК Название,
	|	Названия.ПолноеИмяФормы КАК ПолноеИмяФормы,
	|	Названия.Идентификатор КАК ИдентификаторНазвания,
	|	Названия.ЭтоГруппа КАК ЭтоГруппа,
	|	Названия.Тип КАК ТипМетаданных,
	|	Названия.ПометкаУдаления КАК ПометкаУдаления
	|ПОМЕСТИТЬ НазванияОбъектов
	|ИЗ
	|	ТипыОбъектов КАК ТипыОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК Названия
	|		ПО ТипыОбъектов.Ссылка = Названия.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Названия.Тип КАК Тип,
	|	Названия.НазваниеСсылка КАК НазваниеСсылка,
	|	Названия.Название КАК Название,
	|	Названия.ИдентификаторНазвания КАК ИдентификаторНазвания,
	|	Формы.Ссылка КАК ФормаСсылка,
	|	Формы.Наименование КАК Форма,
	|	Формы.ПолноеИмяФормы КАК ПолноеИмяФормы,
	|	Формы.Идентификатор КАК ИдентификаторФормы,
	|	Формы.ПометкаУдаления КАК ПометкаУдаления,
	|	Формы.Тип КАК ТипМетаданных,
	|	ЛОЖЬ КАК ЭтоГруппа
	|ПОМЕСТИТЬ ДанныеИзБазы
	|ИЗ
	|	НазванияОбъектов КАК Названия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК Формы
	|		ПО Названия.НазваниеСсылка = Формы.Родитель
	|			И (Названия.ЭтоГруппа)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НазванияОбъектов.Тип,
	|	НазванияОбъектов.НазваниеСсылка,
	|	НазванияОбъектов.Название,
	|	НазванияОбъектов.ИдентификаторНазвания,
	|	ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка),
	|	"""",
	|	НазванияОбъектов.ПолноеИмяФормы,
	|	"""",
	|	НазванияОбъектов.ПометкаУдаления,
	|	НазванияОбъектов.ТипМетаданных,
	|	ИСТИНА
	|ИЗ
	|	НазванияОбъектов КАК НазванияОбъектов
	|ГДЕ
	|	НазванияОбъектов.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Названия.Тип,
	|	ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка),
	|	"""",
	|	"""",
	|	Названия.НазваниеСсылка,
	|	Названия.Название,
	|	Названия.ПолноеИмяФормы,
	|	Названия.ИдентификаторНазвания,
	|	Названия.ПометкаУдаления,
	|	Названия.ТипМетаданных,
	|	ЛОЖЬ
	|ИЗ
	|	НазванияОбъектов КАК Названия
	|ГДЕ
	|	НЕ Названия.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеИзБазы.Тип КАК ДанныеИзБазы_Тип,
	|	ДанныеИзБазы.НазваниеСсылка КАК ДанныеИзБазы_НазваниеСсылка,
	|	ДанныеИзБазы.Название КАК ДанныеИзБазы_Название,
	|	ДанныеИзБазы.ИдентификаторНазвания КАК ДанныеИзБазы_ИдентификаторНазвания,
	|	ДанныеИзБазы.ФормаСсылка КАК ДанныеИзБазы_ФормаСсылка,
	|	ДанныеИзБазы.Форма КАК ДанныеИзБазы_Форма,
	|	ДанныеИзБазы.ПолноеИмяФормы КАК ДанныеИзБазы_ПолноеИмяФормы,
	|	ДанныеИзБазы.ИдентификаторФормы КАК ДанныеИзБазы_ИдентификаторФормы,
	|	ДанныеИзБазы.ТипМетаданных КАК ДанныеИзБазы_ТипМетаданных,
	|	ДанныеИзБазы.ПометкаУдаления КАК ДанныеИзБазы_ПометкаУдаления,
	|	НовыеДанные.Тип КАК НовыеДанные_Тип,
	|	НовыеДанные.Название КАК НовыеДанные_Название,
	|	НовыеДанные.ИдентификаторНазвания КАК НовыеДанные_ИдентификаторНазвания,
	|	НовыеДанные.Форма КАК НовыеДанные_Форма,
	|	НовыеДанные.ПолноеИмяФормы КАК НовыеДанные_ПолноеИмяФормы,
	|	НовыеДанные.ИдентификаторФормы КАК НовыеДанные_ИдентификаторФормы,
	|	НовыеДанные.ТипМетаданных КАК НовыеДанные_ТипМетаданных,
	|	ЕСТЬNULL(ДанныеИзБазы.ЭтоГруппа, НовыеДанные.ЭтоГруппа) КАК ЭтоГруппа
	|ПОМЕСТИТЬ ВсеОбъекты
	|ИЗ
	|	ДанныеИзБазы КАК ДанныеИзБазы
	|		ПОЛНОЕ СОЕДИНЕНИЕ НовыеДанные КАК НовыеДанные
	|		ПО ДанныеИзБазы.Тип = НовыеДанные.Тип
	|			И ДанныеИзБазы.ИдентификаторНазвания = НовыеДанные.ИдентификаторНазвания
	|			И ДанныеИзБазы.ИдентификаторФормы = НовыеДанные.ИдентификаторФормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеОбъекты.ДанныеИзБазы_ФормаСсылка КАК Ссылка,
	|	ВсеОбъекты.НовыеДанные_Форма КАК Наименование,
	|	ВсеОбъекты.НовыеДанные_ПолноеИмяФормы КАК ПолноеИмяФормы,
	|	ВсеОбъекты.НовыеДанные_ТипМетаданных КАК ТипМетаданных
	|ИЗ
	|	ВсеОбъекты КАК ВсеОбъекты
	|ГДЕ
	|	ВсеОбъекты.ДанныеИзБазы_Тип ЕСТЬ НЕ NULL 
	|	И ВсеОбъекты.НовыеДанные_Тип ЕСТЬ НЕ NULL 
	|	И НЕ ВсеОбъекты.ЭтоГруппа
	|	И НЕ(ВсеОбъекты.ДанныеИзБазы_Форма = ВсеОбъекты.НовыеДанные_Форма
	|				И ВсеОбъекты.ДанныеИзБазы_ПолноеИмяФормы = ВсеОбъекты.НовыеДанные_ПолноеИмяФормы
	|				И ВсеОбъекты.ДанныеИзБазы_ТипМетаданных = ВсеОбъекты.НовыеДанные_ТипМетаданных
	|				И НЕ ВсеОбъекты.ДанныеИзБазы_ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВсеОбъекты.ДанныеИзБазы_НазваниеСсылка,
	|	ВсеОбъекты.НовыеДанные_Название,
	|	ВсеОбъекты.НовыеДанные_ПолноеИмяФормы,
	|	ВсеОбъекты.НовыеДанные_ТипМетаданных
	|ИЗ
	|	ВсеОбъекты КАК ВсеОбъекты
	|ГДЕ
	|	ВсеОбъекты.ДанныеИзБазы_Тип ЕСТЬ НЕ NULL 
	|	И ВсеОбъекты.НовыеДанные_Тип ЕСТЬ НЕ NULL 
	|	И ВсеОбъекты.ЭтоГруппа
	|	И НЕ(ВсеОбъекты.ДанныеИзБазы_Название = ВсеОбъекты.НовыеДанные_Название
	|				И ВсеОбъекты.ДанныеИзБазы_ПолноеИмяФормы = ВсеОбъекты.НовыеДанные_ПолноеИмяФормы
	|				И ВсеОбъекты.ДанныеИзБазы_ТипМетаданных = ВсеОбъекты.НовыеДанные_ТипМетаданных
	|				И НЕ ВсеОбъекты.ДанныеИзБазы_ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеОбъекты.ДанныеИзБазы_НазваниеСсылка КАК Ссылка
	|ИЗ
	|	ВсеОбъекты КАК ВсеОбъекты
	|ГДЕ
	|	ВсеОбъекты.НовыеДанные_Тип ЕСТЬ NULL
	|	И ВсеОбъекты.ЭтоГруппа
	|	И НЕ ВсеОбъекты.ДанныеИзБазы_ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВсеОбъекты.ДанныеИзБазы_ФормаСсылка
	|ИЗ
	|	ВсеОбъекты КАК ВсеОбъекты
	|ГДЕ
	|	ВсеОбъекты.НовыеДанные_Тип ЕСТЬ NULL
	|	И НЕ ВсеОбъекты.ЭтоГруппа
	|	И НЕ ВсеОбъекты.ДанныеИзБазы_ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеОбъекты.НовыеДанные_Тип КАК Родитель,
	|	"""" КАК ИдентификаторРодителя,
	|	ВсеОбъекты.НовыеДанные_Название КАК Наименование,
	|	ВсеОбъекты.НовыеДанные_ПолноеИмяФормы КАК ПолноеИмяФормы,
	|	ВсеОбъекты.НовыеДанные_ИдентификаторНазвания КАК Идентификатор,
	|	ВсеОбъекты.НовыеДанные_ТипМетаданных КАК ТипМетаданных,
	|	ИСТИНА КАК ЭтоГруппа
	|ИЗ
	|	ВсеОбъекты КАК ВсеОбъекты
	|ГДЕ
	|	ВсеОбъекты.ДанныеИзБазы_Тип ЕСТЬ NULL
	|	И ВсеОбъекты.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(НазванияОбъектов.НазваниеСсылка, НЕОПРЕДЕЛЕНО),
	|	ВсеОбъекты.НовыеДанные_ИдентификаторНазвания,
	|	ВсеОбъекты.НовыеДанные_Форма,
	|	ВсеОбъекты.НовыеДанные_ПолноеИмяФормы,
	|	ВсеОбъекты.НовыеДанные_ИдентификаторФормы,
	|	ВсеОбъекты.НовыеДанные_ТипМетаданных,
	|	ЛОЖЬ
	|ИЗ
	|	ВсеОбъекты КАК ВсеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ НазванияОбъектов КАК НазванияОбъектов
	|		ПО ВсеОбъекты.НовыеДанные_Тип = НазванияОбъектов.Тип
	|			И ВсеОбъекты.НовыеДанные_ИдентификаторНазвания = НазванияОбъектов.ИдентификаторНазвания
	|ГДЕ
	|	ВсеОбъекты.ДанныеИзБазы_Тип ЕСТЬ NULL
	|	И НЕ ВсеОбъекты.ЭтоГруппа
	|	И ВсеОбъекты.НовыеДанные_ИдентификаторНазвания <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВсеОбъекты.НовыеДанные_Тип,
	|	"""",
	|	ВсеОбъекты.НовыеДанные_Форма,
	|	ВсеОбъекты.НовыеДанные_ПолноеИмяФормы,
	|	ВсеОбъекты.НовыеДанные_ИдентификаторФормы,
	|	ВсеОбъекты.НовыеДанные_ТипМетаданных,
	|	ЛОЖЬ
	|ИЗ
	|	ВсеОбъекты КАК ВсеОбъекты
	|ГДЕ
	|	ВсеОбъекты.ДанныеИзБазы_Тип ЕСТЬ NULL
	|	И НЕ ВсеОбъекты.ЭтоГруппа
	|	И ВсеОбъекты.НовыеДанные_ИдентификаторНазвания = """"";
	
#КонецОбласти
	
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Пакеты = Запрос.ВыполнитьПакет();
	
	// Получение пакетов
	ПакетИзмененные = Пакеты.Получить(5);
	ПакетУдаленные = Пакеты.Получить(6);
	ПакетДобавленные = Пакеты.Получить(7);
	
	Если ПакетИзмененные.Пустой() И ПакетУдаленные.Пустой() И ПакетДобавленные.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		Если НЕ ПакетИзмененные.Пустой() Тогда
			Измененные = ПакетИзмененные.Выбрать();
			
			// Переименование существующих элементов
			Пока Измененные.Следующий() Цикл
				ЭлементСправочника = Измененные.Ссылка.ПолучитьОбъект();
				ЭлементСправочника.Наименование = Измененные.Наименование;
				ЭлементСправочника.ПолноеИмяФормы = Измененные.ПолноеИмяФормы;
				ЭлементСправочника.Тип = Измененные.ТипМетаданных;
				ЭлементСправочника.ПометкаУдаления = СтрНачинаетсяС(Измененные.Наименование, "Удалить");
				
				ЭлементСправочника.Записать();
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ПакетУдаленные.Пустой() Тогда
			Удаленные = ПакетУдаленные.Выбрать();
			
			// Пометка на удаление удаленных объектов
			Пока Удаленные.Следующий() Цикл
				ЭлементСправочника = Удаленные.Ссылка.ПолучитьОбъект();
				ЭлементСправочника.ПометкаУдаления = Истина;
				ЭлементСправочника.Записать();
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ПакетДобавленные.Пустой() Тогда
			СсылкиНовыхОбъектов = Новый Соответствие;
			Добавленные = ПакетДобавленные.Выбрать();
			
			Пока Добавленные.Следующий() Цикл
				Если Добавленные.ЭтоГруппа Тогда
					НоваяГруппа = СоздатьГруппу();
					
					НоваяГруппа.Родитель = Добавленные.Родитель;
					НоваяГруппа.Наименование = Добавленные.Наименование;
					НоваяГруппа.ПолноеИмяФормы = Добавленные.ПолноеИмяФормы;
					НоваяГруппа.Идентификатор = Добавленные.Идентификатор;
					НоваяГруппа.Тип = Добавленные.ТипМетаданных;
					
					НоваяГруппа.Записать();
					СсылкиНовыхОбъектов.Вставить(Добавленные.Идентификатор, НоваяГруппа.Ссылка);
					
					Если НоваяГруппа.Родитель = Справочники.ИдентификаторыОбъектовМетаданных.Отчет Тогда
						Справочники.ИнструментыСистемы.ДобавитьОтчет(НоваяГруппа.Наименование, НоваяГруппа.Ссылка);
					КонецЕсли;
				Иначе
					НовыйЭлемент = СоздатьЭлемент();
					
					Если ЗначениеЗаполнено(Добавленные.Родитель) Тогда
						Родитель = Добавленные.Родитель;
					Иначе
						Родитель = СсылкиНовыхОбъектов.Получить(Добавленные.ИдентификаторРодителя);
					КонецЕсли;
					
					НовыйЭлемент.Родитель = Родитель;
					НовыйЭлемент.Наименование = Добавленные.Наименование;
					НовыйЭлемент.ПолноеИмяФормы = Добавленные.ПолноеИмяФормы;
					НовыйЭлемент.Идентификатор = Добавленные.Идентификатор;
					НовыйЭлемент.Тип = Добавленные.ТипМетаданных;
					НовыйЭлемент.Использование = Истина;
					
					НовыйЭлемент.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , 
			"Ошибка при обновлении справочника: " + ОписаниеОшибки());
		Результат = Ложь;
	КонецПопытки;
	
	ИнтеграцияДополнительныхПодсистем.АктуализироватьТаблицыИБ();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
