///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ТолстыйКлиент ИЛИ ВнешнееСоединение Тогда

#Область ОбъявлениеПеременных

// Хранит состояние объекта до записи
Перем ДанныеДоЗаписи;

// Хранит описание изменений объекта
Перем ОписаниеИзменений;

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		ОбщегоНазначения.ОчисткаДублейТабличнойЧасти(РазрабатываемыеСистемы, "Система");
	КонецЕсли;
	
	ОписаниеИзменений = ОбщегоНазначения.ПолучитьСостояниеОбъектаДоЗаписи(Ссылка);
	
	ДанныеДоЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, 
		"Руководитель, ЗаместительРуководителя, ЮридическоеЛицо, ПометкаУдаления");
	
	ЯвляетсяИТОрганизацией = ЗначениеЗаполнено(ЮридическоеЛицо) 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЮридическоеЛицо, "ЯвляетсяИТОрганизацией");

	ДанныеДоЗаписи.Вставить("ЯвляетсяИТОрганизацией"); 
	ДанныеДоЗаписи.ЯвляетсяИТОрганизацией = (ЗначениеЗаполнено(ДанныеДоЗаписи.ЮридическоеЛицо)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДоЗаписи.ЮридическоеЛицо, "ЯвляетсяИТОрганизацией"));
	
	Если ЭтоНовый() ИЛИ ЯвляетсяИТОрганизацией <> ДанныеДоЗаписи.ЯвляетсяИТОрганизацией Тогда
		ТипФилиала = ?(ЯвляетсяИТОрганизацией, Перечисления.ТипыФилиалов.IT, Перечисления.ТипыФилиалов.НеIT);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЯвляетсяИТОрганизацией", ЯвляетсяИТОрганизацией);

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Сравнение состояния до и после записи
	ОбщегоНазначения.ОбработатьИзменениеОбъекта(Ссылка, ОписаниеИзменений);
	
	Если ДополнительныеСвойства.Свойство("СвязанныеФилиалы") Тогда
		Для Каждого СтрокаМассива Из ДополнительныеСвойства.СвязанныеФилиалы.ДобавитьИзменить Цикл
			РегистрыСведений.СвязанныеОбъекты.ДобавитьДвойнуюСвязь(Ссылка, СтрокаМассива.Филиал, 
				Перечисления.ВидыСвязейОбъектов.СвязанаС, СтрокаМассива.РассчитыватьМетрикиСИсточником);
		КонецЦикла;
		Для Каждого СтрокаМассива Из ДополнительныеСвойства.СвязанныеФилиалы.Удалить Цикл
			РегистрыСведений.СвязанныеОбъекты.УдалитьДвойнуюСвязь(Ссылка, СтрокаМассива.Филиал, 
				Перечисления.ВидыСвязейОбъектов.СвязанаС);
		КонецЦикла;
	КонецЕсли;
	
	ИзменилсяРуководитель = (ДанныеДоЗаписи.Руководитель <> Руководитель);
	ИзмениласьПометкаУдаления = (ДанныеДоЗаписи.ПометкаУдаления <> ПометкаУдаления);
	
	Если Родитель = Справочники.Филиалы.ПустаяСсылка() Тогда	
		ИзменилсяЗаместитель = (ДанныеДоЗаписи.ЗаместительРуководителя <> ЗаместительРуководителя);
		
		ЭтоФилиалИТОрганизации = РаботаСНастройкамиВызовСервера.ЭтоФилиалИТОрганизации(Ссылка);
			
		// Группы доступа	
		Если ИзменилсяРуководитель Тогда
			ОбработатьИзменениеРуководителя(Справочники.ГруппыДоступа.РуководителиФилиалов, 
				Руководитель, ДанныеДоЗаписи.Руководитель, "Руководитель");
			
			Если ЭтоФилиалИТОрганизации Тогда
				ОбработатьИзменениеРуководителя(Справочники.ГруппыДоступа.РуководителиФилиаловIT, 
					Руководитель, ДанныеДоЗаписи.Руководитель, "Руководитель", Истина); 
			КонецЕсли;
		КонецЕсли;
		
		Если ИзменилсяЗаместитель Тогда
			ОбработатьИзменениеРуководителя(Справочники.ГруппыДоступа.ЗаместителиРуководителейФилиалов, 
				ЗаместительРуководителя, ДанныеДоЗаписи.ЗаместительРуководителя, "ЗаместительРуководителя");
			
			Если ЭтоФилиалИТОрганизации Тогда
				ОбработатьИзменениеРуководителя(Справочники.ГруппыДоступа.ЗаместителиРуководителейФилиаловIT, 
					ЗаместительРуководителя, ДанныеДоЗаписи.ЗаместительРуководителя, "ЗаместительРуководителя", Истина);
			КонецЕсли;
		КонецЕсли;
	Иначе
		НовыйРуководитель = Руководитель;
		СтарыйРуководитель = ДанныеДоЗаписи.Руководитель;

		Если ПометкаУдаления Тогда
			НовыйРуководитель = Справочники.Пользователи.ПустаяСсылка();
		ИначеЕсли НЕ ИзменилсяРуководитель Тогда 
			СтарыйРуководитель = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
		
		// Руководители команд
		Если ИзменилсяРуководитель ИЛИ ИзмениласьПометкаУдаления Тогда
			ОбработатьИзменениеРуководителя(Справочники.ГруппыДоступа.РуководителиКомандИСтаршиеПрограммисты, 
				НовыйРуководитель, СтарыйРуководитель, "РуководительКоманды");
		КонецЕсли;
	КонецЕсли;
	
	ИзмениласьПринадлежностьКIT = ДополнительныеСвойства.ЯвляетсяИТОрганизацией <> ДанныеДоЗаписи.ЯвляетсяИТОрганизацией;
	
	// Обработка изменения принадлежности филиала к IT-организации  
	Если ДанныеДоЗаписи.ЮридическоеЛицо <> ЮридическоеЛицо И ИзмениласьПринадлежностьКIT Тогда		
		Справочники.Филиалы.ОбработатьИзменениеЮридическогоЛица(Ссылка, ДополнительныеСвойства.ЯвляетсяИТОрганизацией);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Родитель) И (ИзмениласьПринадлежностьКIT ИЛИ ИзмениласьПометкаУдаления) Тогда		
		РегистрыСведений.ПорядокЭтаповКанбана.ИзменитьЗаписи(Ссылка, ТипФилиала, ПометкаУдаления);
	КонецЕсли;	
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьИзменениеРуководителя(Знач ГруппаДоступа, Знач Пользователь, Знач ПользовательДоЗаписи, Знач ПолеИзменения, Знач ТолькоИТФилиалы = Ложь)
	
	Справочники.ГруппыДоступа.ДобавитьРуководителя(ГруппаДоступа, Пользователь);
	
	Справочники.ГруппыДоступа.УдалитьРуководителя(Ссылка, ГруппаДоступа, 
		ПользовательДоЗаписи, ПолеИзменения, ТолькоИТФилиалы);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
