///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		Если Параметры.Свойство("Ключ") Тогда       
			Разрешения = РазрешенияОткрытияФорм(Параметры.Ключ);
			Если Разрешения.ФормаОбъекта Тогда  
				
				Если Параметры.Ключ.Родитель = Справочники.Филиалы.КастомныеКоманды Тогда
					СтандартнаяОбработка = Ложь;
					ВыбраннаяФорма = "Справочник.Филиалы.Форма.ФормаЭлементаКоманды"; 
				КонецЕсли;				
				Возврат; 
				
			ИначеЕсли Разрешения.ФормаНастроек Тогда
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "Обработка.УправлениеНастройками.Форма.Заглушка";
				Параметры.Вставить("ОткрытьФормуНастроек", Истина);
				Параметры.Вставить("Филиал", Параметры.Ключ);
			Иначе
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "Обработка.УправлениеНастройками.Форма.Заглушка";
			КонецЕсли; 
		ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") И Параметры.ЗначенияЗаполнения.Свойство("Родитель") И 
			Параметры.ЗначенияЗаполнения.Родитель = Справочники.Филиалы.КастомныеКоманды Тогда
			// Это добавление кастомной команды, нужно переопределеить форму открытия 
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "Справочник.Филиалы.Форма.ФормаЭлементаКоманды";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Возвращает признак наличия активного спринта по филиалу
//
// Параметры:
//  Филиал - СправочникСсылка.Филиалы - филиал
//  ВидСпринта - ПеречислениеСсылка.ВидыСпринта - вид спринта
//	Команда - СправочникСсылка.Филиалы - команда разработчиков
// 
// Возвращаемое значение:
//  Булево - Истина, если документы есть, иначе Ложь
//
Функция ЕстьАктивныйСпринт(Знач Филиал, Знач ВидСпринта, Знач Команда = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Спринт.Ссылка КАК Ссылка,
	|	Спринт.Филиал КАК Филиал,
	|	Спринт.Команда КАК Команда
	|ПОМЕСТИТЬ ОтобранныеСпринты
	|ИЗ
	|	Документ.Спринт КАК Спринт
	|ГДЕ
	|	НЕ Спринт.ПометкаУдаления
	|	И Спринт.ВидСпринта = &ВидСпринта
	|	И &ТекущаяДата МЕЖДУ Спринт.ДатаНачала И КОНЕЦПЕРИОДА(Спринт.ДатаОкончания, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеСпринты.Ссылка КАК Ссылка
	|ИЗ
	|	ОтобранныеСпринты КАК ОтобранныеСпринты
	|ГДЕ
	|	ОтобранныеСпринты.Филиал = &Филиал
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтобранныеСпринты.Ссылка
	|ИЗ
	|	ОтобранныеСпринты КАК ОтобранныеСпринты
	|ГДЕ
	|	ОтобранныеСпринты.Филиал = ЗНАЧЕНИЕ(Справочник.Филиалы.КастомныеКоманды)
	|	И ОтобранныеСпринты.Команда = &Команда";

	Запрос.УстановитьПараметр("Филиал", Филиал);
	Запрос.УстановитьПараметр("Команда", Команда);
	Запрос.УстановитьПараметр("ВидСпринта", ВидСпринта);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// Используется габаритное планирование
//
// Параметры:
//  Филиал	 - СправочникСсылка.Филиалы	 - Филиал
// 
// Возвращаемое значение:
//  Булево - используется ли габаритное планирование
//
Функция ИспользуетсяГабаритноеПланирование(Знач Филиал) Экспорт  
	
	Направление = РегистрыСведений.НастройкиФилиалов.ЗначениеНастройки(Филиал, 
		ПланыВидовХарактеристик.ВидыНастроекФилиалов.НаправлениеРазработки);
		
	Результат = Ложь;
		
	Если ЗначениеЗаполнено(Направление) Тогда	
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Направление, "ИспользоватьГабаритноеПланирование");
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

// Возвращает разницу между текущими и сохраненными настройками по связанными филиалам
//  Параметры СвязанныеФилиалы - Таблица текущий настроек
//
// Параметры:
//  Филиал			 - СправочникСсылка.Филиалы	 - Филиал настроек
//  СвязанныеФилиалы - ТаблицаЗначений			 - Таблица текущий настроек
// 
// Возвращаемое значение:
//  Результат - структура
//  	*ДобавитьИзменить - Массив добавляемых/изменяемых записей
//  	*Удалить - Массив удаляемых записей
//
Функция ПолучитьИзмененияСвязанныеФилиалы(Филиал, СвязанныеФилиалы) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СвязанныеФилиалы.Филиал КАК Филиал,
	|	СвязанныеФилиалы.РассчитыватьМетрикиСИсточником КАК РассчитыватьМетрикиСИсточником
	|ПОМЕСТИТЬ СвязанныеФилиалы
	|ИЗ
	|	&СвязанныеФилиалы КАК СвязанныеФилиалы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СвязанныеОбъекты.ПриемникСвязи КАК Филиал,
	|	СвязанныеОбъекты.РассчитыватьМетрикиСИсточником КАК РассчитыватьМетрикиСИсточником
	|ПОМЕСТИТЬ СвязанныеОбъекты
	|ИЗ
	|	РегистрСведений.СвязанныеОбъекты КАК СвязанныеОбъекты
	|ГДЕ
	|	СвязанныеОбъекты.ИсточникСвязи = &Филиал
	|	И СвязанныеОбъекты.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.СвязанаС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СвязанныеФилиалы.Филиал, СвязанныеОбъекты.Филиал) КАК Филиал,
	|	ЕСТЬNULL(СвязанныеФилиалы.РассчитыватьМетрикиСИсточником, ЛОЖЬ) КАК РассчитыватьМетрикиСИсточником,
	|	ВЫБОР
	|		КОГДА СвязанныеФилиалы.Филиал ЕСТЬ NULL
	|			ТОГДА -1
	|		КОГДА ЕСТЬNULL(СвязанныеФилиалы.РассчитыватьМетрикиСИсточником, ЛОЖЬ) <> ЕСТЬNULL(СвязанныеОбъекты.РассчитыватьМетрикиСИсточником, НЕОПРЕДЕЛЕНО)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Действие
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	СвязанныеФилиалы КАК СвязанныеФилиалы
	|		ПОЛНОЕ СОЕДИНЕНИЕ СвязанныеОбъекты КАК СвязанныеОбъекты
	|		ПО (СвязанныеОбъекты.Филиал = СвязанныеФилиалы.Филиал)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Филиал КАК Филиал,
	|	Данные.РассчитыватьМетрикиСИсточником КАК РассчитыватьМетрикиСИсточником,
	|	Данные.Действие КАК Действие
	|ИЗ
	|	Данные КАК Данные
	|ГДЕ
	|	Данные.Действие <> 0"; 
	
	ПоляСтруктуры = "Филиал, РассчитыватьМетрикиСИсточником";
	Результат = Новый Структура("ДобавитьИзменить, Удалить", Новый Массив, Новый Массив);
	
	Запрос.УстановитьПараметр("Филиал", Филиал);
	Запрос.УстановитьПараметр("СвязанныеФилиалы", СвязанныеФилиалы);
	РезультатЗапроса = Запрос.Выполнить();
		
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл                  
			
			Структура = Новый Структура(ПоляСтруктуры);
			ЗаполнитьЗначенияСвойств(Структура, Выборка);
			
			Если Выборка.Действие = 1 Тогда
				Результат.ДобавитьИзменить.Добавить(Структура);	
			Иначе
				Результат.Удалить.Добавить(Структура);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует список кастомных команд, которые доступны пользователю
//
// Параметры:
//  Система			 - СправочникСсылка.СистемыУчета	 - Ссылка на систему. При указании выбирает всех сотрудников
//		филиалов, ведущих разработку по данной системе, в которых работают участники кастомной команды. А после этого
//		отбирает для конкретного пользователя кастомные команды. Если не указан, отбирает все кастномные команды, где
//		пользователь является участником.	
//  Пользователь			 - СправочникСсылка.Пользователи	 - Ссылка на пользователя. если не указан, берется текущий.
// 
// Возвращаемое значение:
//  СписокЗначений - кастомные команды
//
Функция ПолучитьКастомныеКомандыПользователя(Знач Система = Неопределено, Знач Пользователь = Неопределено) Экспорт
	
	// Возможность назначать заявку на кастомную команду должна быть у следующих сотрудников:
	//
	// -	участники кастомной команды
	// -	коллеги по филиалам участников кастомной команды. (Есть Филиал1, в нем есть Пользователь1, который есть 
	//	    в КастомнойКоманде. Все сотрудники Филиала1 могут назначать заявку на кастомную команду (на любого ее участника).  
	//
	// При этом должны отбираться филиалы, которые ведут разработку для системы в заявке.
	//
	// Создавать спринт для кастомной команды должны только участники кастомных команд, поэтому нужна настройка для получение
	// кастомных команд, где пользователь является непосредственно участником, без учета системы.
	
	СписокКоманд = Новый СписокЗначений;  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛичныеДелаСрезПоследних.Сотрудник КАК Сотрудник,
	|	ЛичныеДелаСрезПоследних.Данные КАК Команда
	|ПОМЕСТИТЬ КастомныеКомандыПользователей
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(, Событие = ЗНАЧЕНИЕ(перечисление.СобытияПоЛичнымДелам.ПереведенВКастомнуюКоманду)) КАК ЛичныеДелаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ЛичныеДелаСрезПоследних.Сотрудник = Пользователи.Ссылка
	|ГДЕ
	|	ЛичныеДелаСрезПоследних.Данные <> ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Филиалы.Руководитель,
	|	ЛичныеДелаСрезПоследних.Данные
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(, Событие = ЗНАЧЕНИЕ(перечисление.СобытияПоЛичнымДелам.ПереведенВКастомнуюКоманду)) КАК ЛичныеДелаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО (Филиалы.Ссылка = ЛичныеДелаСрезПоследних.Данные)
	|ГДЕ
	|	ЛичныеДелаСрезПоследних.Данные <> ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КастомныеКомандыПользователей.Команда КАК Команда
	|ПОМЕСТИТЬ КастомныеКомандыПоСистемам
	|ИЗ
	|	КастомныеКомандыПользователей КАК КастомныеКомандыПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО КастомныеКомандыПользователей.Сотрудник = Пользователи.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы.РазрабатываемыеСистемы КАК ФилиалыРазрабатываемыеСистемы
	|		ПО (ФилиалыРазрабатываемыеСистемы.Ссылка = Пользователи.Филиал)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтборПоСистеме
	|				ТОГДА ФилиалыРазрабатываемыеСистемы.Система = &Система
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КастомныеКомандыПользователей.Команда КАК Команда
	|ИЗ
	|	КастомныеКомандыПользователей КАК КастомныеКомандыПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КастомныеКомандыПоСистемам КАК КастомныеКомандыПоСистемам
	|		ПО КастомныеКомандыПользователей.Команда = КастомныеКомандыПоСистемам.Команда
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК СотрудникКоманды
	|		ПО КастомныеКомандыПользователей.Сотрудник = СотрудникКоманды.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (Пользователи.Филиал = СотрудникКоманды.Филиал)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВидимостьВсех
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Пользователи.Ссылка = &Пользователь
	|		КОНЕЦ"; 	
	
	ВидимостьВсех = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("ПолныеПрава") ИЛИ 
		Безопасность.НаходитсяВГруппеДоступа(Справочники.ГруппыДоступа.СТОиРуководителиITНаправлений);
		
	Запрос.УстановитьПараметр("Пользователь", ?(Пользователь = Неопределено, ПараметрыСеанса.ТекущийПользователь, Пользователь));
	Запрос.УстановитьПараметр("Система", Система);
	Запрос.УстановитьПараметр("ОтборПоСистеме", ЗначениеЗаполнено(Система));
	Запрос.УстановитьПараметр("ВидимостьВсех", ВидимостьВсех);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокКоманд.Добавить(Выборка.Команда);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокКоманд;
	
КонецФункции

// Получает массив команд, где пользователь руководитель
//
// Параметры:
//  Руководитель - СправочникСсылка.Пользователи - Пользователь
// 
// Возвращаемое значение:
//  Массив - Массив команд
//
Функция ПолучитьКастомныеКомандыРуководителя(Руководитель = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Филиалы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|ГДЕ
	|	Филиалы.Родитель = ЗНАЧЕНИЕ(Справочник.Филиалы.КастомныеКоманды)
	|	И Филиалы.Руководитель = &Руководитель";
	
	Запрос.УстановитьПараметр("Руководитель", ?(Руководитель = Неопределено, ПараметрыСеанса.ТекущийПользователь, Руководитель));

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Формирует список команд разработчиков, которые есть у филиала
//
// Параметры:
//  ГоловнойФилиал			 - СправочникСсылка.Филиалы	 - ссылка на головной филиал
//  ДобавитьПервыйЭлемент	 - Булево	 - определяет, нужно ли добавлять ссылку на пустой филиал в начало списка
// 
// Возвращаемое значение:
//  СписокЗначений - команды разработчиков
//
Функция ПолучитьКомандыРазработки(Знач ГоловнойФилиал, Знач ДобавитьПервыйЭлемент = Ложь) Экспорт
	
	СписокКоманд = Новый СписокЗначений;
	
	// Если передана пустая ссылка на филиал, команды не получаем.
	Если ГоловнойФилиал <> Справочники.Филиалы.ПустаяСсылка() Тогда	
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Филиалы.Ссылка КАК Ссылка,
		|	Филиалы.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Филиалы КАК Филиалы
		|ГДЕ
		|	Филиалы.Родитель В (&Родитель)
		|	И НЕ Филиалы.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Родитель", ГоловнойФилиал);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Если ДобавитьПервыйЭлемент Тогда
				СписокКоманд.Добавить(Справочники.Филиалы.ПустаяСсылка(), " Все");
			КонецЕсли;
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				СписокКоманд.Добавить(Выборка.Ссылка, Выборка.Наименование);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
	Возврат СписокКоманд;
	
КонецФункции

// Получает ссылку на филиал по идентификатору
//
// Параметры:
//  СтрокаИдентификатор	 - Строка	 - строковое представление идентификатора ссылки
// 
// Возвращаемое значение:
//  Структура - результат получения ссылки филиала
//		* ФилиалСуществует	 - Булево	 - признак того, что филиал присутствует в базе
//		* Ссылка	 - СправочникСсылка.Филиалы	 - ссылка на филиал
//
Функция ПолучитьСсылкуНаФилиал(Знач СтрокаИдентификатор) Экспорт
	
	Результат = Новый Структура("ФилиалСуществует, Ссылка", Ложь, Справочники.Филиалы.ПустаяСсылка());
	
	// Получим ссылку на справочник Филиалы.
	УникальныйИдентификатор = Новый УникальныйИдентификатор(СтрокаИдентификатор);
	ИдентификаторФилиала = Справочники.Филиалы.ПолучитьСсылку(УникальныйИдентификатор);
	
	Результат.Ссылка = ИдентификаторФилиала;
	Результат.ФилиалСуществует = ФилиалСуществует(ИдентификаторФилиала);
		
	Возврат Результат;
	
КонецФункции

// Функция - Получить филиал пользователя
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи	 - пользователь, для которого нужно получить филиал
//  Уровень		 - Число	 - определяет уровень филиала. 0 - филиал, 1 - команда
// 
// Возвращаемое значение:
//  СправочникСсылка.Филиалы - теукщий филиал пользователя
//
Функция ПолучитьКомандуПользователя(Знач Пользователь) Экспорт
	
	Филиал = Новый Структура("Команда, КастомнаяКоманда");
	Филиал.Команда = Справочники.Филиалы.ПустаяСсылка();
	Филиал.КастомнаяКоманда = Ложь;
	
	События = Новый СписокЗначений;
	События.Добавить(Перечисления.СобытияПоЛичнымДелам.ПереведенВКоманду);
	События.Добавить(Перечисления.СобытияПоЛичнымДелам.ПереведенВКастомнуюКоманду);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы) КАК Команда,
	|	ВЫБОР
	|		КОГДА ЛичныеДелаСрезПоследних.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВКастомнуюКоманду)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КастомнаяКоманда
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(
	|			&ТекущаяДата,
	|			Сотрудник = &Пользователь
	|				И Событие В (&События)) КАК ЛичныеДелаСрезПоследних
	|ГДЕ
	|	ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы) <> ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛичныеДелаСрезПоследних.Период УБЫВ";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("События", События);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Филиал.Команда = Выборка.Команда;
		Филиал.КастомнаяКоманда = Выборка.КастомнаяКоманда;
	КонецЕсли;
	
	Возврат Филиал;
	
КонецФункции

// Ищет все филиалы, в которых указанный пользователь является руководителем.
//	Если пользователь не указан, используется текущий пользователь
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи	 - ссылка на руководителя
// 
// Возвращаемое значение:
//  СписокЗначений - все филиалы пользователя, где он является руководителем
//
Функция ПолучитьВсеФилиалыРуководителя(Знач Пользователь = Неопределено) Экспорт
	
	Результат = Новый СписокЗначений;
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Филиалы.Ссылка КАК Филиал,
	|	Филиалы.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|ГДЕ
	|	НЕ Филиалы.ПометкаУдаления
	|	И Филиалы.Родитель = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
	|	И (Филиалы.Руководитель = &Руководитель
	|			ИЛИ Филиалы.ЗаместительРуководителя = &Руководитель)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Филиалы.Ссылка,
	|	Филиалы.Наименование
	|ИЗ
	|	Справочник.Территории КАК Территории
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы.ИерархияТерриторий КАК ФилиалыИерархияТерриторий
	|		ПО (ФилиалыИерархияТерриторий.Территория = Территории.Ссылка)
	|			И (Территории.Руководитель = &Руководитель)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО (ФилиалыИерархияТерриторий.Ссылка = Филиалы.Ссылка)
	|			И (НЕ Филиалы.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("Руководитель", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Филиал, Выборка.Наименование);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Ищет все филиалы, где проходит тестирования для данных филиалов
//
// Параметры:
//  Филиалы	 - СписокЗначений, Массив	 - Филиалы
// 
// Возвращаемое значение:
//  Массив - все филиалы тестирования переданных филиалов
//
Функция ПолучитьФилиалыТестирования(Знач Филиалы) Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(НастройкиФилиалов.Значение, Филиалы.Ссылка) КАК Филиал
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиФилиалов КАК НастройкиФилиалов
	|		ПО (НастройкиФилиалов.Филиал = Филиалы.Ссылка)
	|			И (НастройкиФилиалов.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.ФилиалТестирования))
	|			И (НЕ НастройкиФилиалов.Значение = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка))
	|ГДЕ
	|	Филиалы.Ссылка В(&Филиалы)";
	
	Запрос.УстановитьПараметр("Филиалы", Филиалы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Филиал);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру проверяемых данных
// 
// Возвращаемое значение:
//   - Структура
//		* Реквизиты	 - Массив	 - названия реквизитов которые требуют проверки
//		* ТабличныеЧасти	 - Структура	 - табличные части и их реквизиты которые требуют проверки.
//			Ключ - название табличной части
//			Значение - реквизит табличной части который требуется проверить
//
Функция ПроверяемыеСвойстваОбъекта() Экспорт
	
	Результат = Новый Структура("Реквизиты, ТабличныеЧасти", Новый Массив, Новый Структура);
	
	Результат.Реквизиты.Добавить("ЮридическоеЛицо");
	Результат.Реквизиты.Добавить("Родитель"); 
	
	ПоляТабличнойЧасти = Новый Массив;
	ПоляТабличнойЧасти.Добавить("Система");
	
	ДанныеТабличнойЧасти = Новый Структура;
	ДанныеТабличнойЧасти.Вставить("Поля", ПоляТабличнойЧасти);
	ДанныеТабличнойЧасти.Вставить("КлючевоеПоле", "Система");
	
	Результат.ТабличныеЧасти.Вставить("РазрабатываемыеСистемы", ДанныеТабличнойЧасти);
	
	Возврат Результат;
	
КонецФункции

// Проверяет, существует ли филиал в базе данных
//
// Параметры:
//  ФилиалСсылка - СправочникСсылка.Филиалы	 - ссылка на проверяемый филиал
// 
// Возвращаемое значение:
//  Булево - признак наличия филиала в базе данных
//
Функция ФилиалСуществует(Знач ФилиалСсылка) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Филиалы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|ГДЕ
	|	Филиалы.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", ФилиалСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	// Если результат запроса пустой - значит филиал еще не существует.
	Возврат (НЕ РезультатЗапроса.Пустой());
	
КонецФункции

// Возвращает признак, что пользователь является заместителем какого-либо филиала
//
// Параметры:
//  Пользователь			 - СправочникСсылка.Пользователи - пользователь, для которого выполняется проверка 
//  ТекущийФилиал			 - СправочникСсылка.Филиалы - Филиал исключение, учитывать который при проверке не нужно
//  ПроверятьТолькоИТФилиалы - Булево - Истина, если нужно проверять только филиалы, которые относятся к IT-организациям
// 
// Возвращаемое значение:
//   Булево - - Является заместителем филиала или нет 
//
Функция ЭтоЗаместительРуководителя(Знач Пользователь, Знач ТекущийФилиал, Знач ПроверятьТолькоИТФилиалы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Филиалы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЮридическиеЛица КАК ЮридическиеЛица
	|		ПО Филиалы.ЮридическоеЛицо = ЮридическиеЛица.Ссылка
	|ГДЕ
	|	Филиалы.Ссылка <> &ТекущийФилиал
	|	И НЕ Филиалы.ПометкаУдаления
	|	И Филиалы.Родитель = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
	|	И Филиалы.ЗаместительРуководителя = &Пользователь
	|	И (&ПроверятьВсеФилиалы
	|			ИЛИ ЕСТЬNULL(ЮридическиеЛица.ЯвляетсяИТОрганизацией, ЛОЖЬ))";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ТекущийФилиал", ТекущийФилиал); 
	Запрос.УстановитьПараметр("ПроверятьВсеФилиалы", НЕ ПроверятьТолькоИТФилиалы);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает признак, что пользователь является руководителем какого-либо филиала
//
// Параметры:
//  Пользователь	 		 - СправочникСсылка.Пользователи - пользователь, для которого выполняется проверка 
//  ТекущийФилиал			 - СправочникСсылка.Филиалы - Филиал исключение, учитывать который при проверке не нужно
//  ПроверятьТолькоИТФилиалы - Булево - Истина, если нужно проверять только филиалы, которые относятся к IT-организациям
// 
// Возвращаемое значение:
//   Булево - - Является филиала или нет 
//
Функция ЭтоРуководитель(Знач Пользователь, Знач ТекущийФилиал, Знач ПроверятьТолькоИТФилиалы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Филиалы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЮридическиеЛица КАК ЮридическиеЛица
	|		ПО Филиалы.ЮридическоеЛицо = ЮридическиеЛица.Ссылка
	|ГДЕ
	|	Филиалы.Ссылка <> &ТекущийФилиал
	|	И НЕ Филиалы.ПометкаУдаления
	|	И Филиалы.Родитель = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
	|	И Филиалы.Руководитель = &Пользователь
	|	И (&ПроверятьВсеФилиалы
	|			ИЛИ ЕСТЬNULL(ЮридическиеЛица.ЯвляетсяИТОрганизацией, ЛОЖЬ))";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ТекущийФилиал", ТекущийФилиал);
	Запрос.УстановитьПараметр("ПроверятьВсеФилиалы", НЕ ПроверятьТолькоИТФилиалы);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает признак, что пользователь является руководителем какой-либо команды
//
// Параметры:
//  Пользователь	 - СправочникСсылка.Пользователи - пользователь, для которого выполняется проверка 
//  ТекущийФилиал	 - СправочникСсылка.Филиалы - Филиал исключение, учитывать который при проверке не нужно
// 
// Возвращаемое значение:
//   Булево - Является руководителем команды или нет 
//
Функция ЭтоРуководительКоманды(Знач Пользователь, Знач ТекущийФилиал) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Филиалы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|ГДЕ
	|	НЕ Филиалы.Ссылка = &ТекущийФилиал
	|	И НЕ Филиалы.ПометкаУдаления
	|	И Филиалы.Родитель <> ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
	|	И Филиалы.Руководитель = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ТекущийФилиал", ТекущийФилиал);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

Процедура ОбработатьИзменениеЮридическогоЛица(Филиал, ЮрЛицоЯвляетсяИТОрганизацией) Экспорт
	
	Если ЮрЛицоЯвляетсяИТОрганизацией Тогда
		РегистрыСведений.ОчередьСобытийНаОбработку.ДобавитьПроверкуДоступныхУслугФилиала(Филиал, ТекущаяДатаСеанса()); 	
	КонецЕсли;
	
	ДанныеФилиала = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Филиал, "Родитель, Руководитель, ЗаместительРуководителя");
	
	Если ДанныеФилиала.Родитель = Справочники.Филиалы.ПустаяСсылка() Тогда	
		РуководителиФилиаловIT = Справочники.ГруппыДоступа.РуководителиФилиаловIT;
		ЗаместителиРуководителейФилиаловIT = Справочники.ГруппыДоступа.ЗаместителиРуководителейФилиаловIT;
		
		Если ЮрЛицоЯвляетсяИТОрганизацией Тогда
			Справочники.ГруппыДоступа.ДобавитьРуководителя(РуководителиФилиаловIT, 
				ДанныеФилиала.Руководитель);
			Справочники.ГруппыДоступа.ДобавитьРуководителя(ЗаместителиРуководителейФилиаловIT, 
				ДанныеФилиала.ЗаместительРуководителя);
		Иначе
			Справочники.ГруппыДоступа.УдалитьРуководителя(Филиал, РуководителиФилиаловIT, 
				ДанныеФилиала.Руководитель, "Руководитель", Истина);
			Справочники.ГруппыДоступа.УдалитьРуководителя(Филиал, ЗаместителиРуководителейФилиаловIT, 
				ДанныеФилиала.ЗаместительРуководителя, "ЗаместительРуководителя", Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РазрешенияОткрытияФорм(Знач Ссылка)
	
	Результат = Новый Структура("ФормаОбъекта, ФормаНастроек", Ложь, Ложь);
	
	ЭтоАдминистратор = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("Администратор");
	ЧтениеВсехДанных = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("ЧтениеВсехДанныхИнформационнойБазы");
	
	Если НЕ ЭтоАдминистратор И НЕ ЧтениеВсехДанных И Ссылка.Родитель <> Справочники.Филиалы.КастомныеКоманды Тогда
		
		ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
		ДанныеФилиала = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Руководитель, ЗаместительРуководителя");
		
		ЭтоРуководитель = (ДанныеФилиала.Руководитель = ТекущийПользователь);
		ЭтоЗаместитель = (ДанныеФилиала.ЗаместительРуководителя = ТекущийПользователь);
		
		Результат.ФормаНастроек = (ЭтоРуководитель ИЛИ ЭтоЗаместитель);
	Иначе
		Результат.ФормаОбъекта = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
