///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

// Содержит ссылки на удаляемые команды
&НаКлиенте
Перем УдаляемыеКоманды;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоАдминистратор = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("Администратор");
	ЧтениеВсехДанных = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("ЧтениеВсехДанныхИнформационнойБазы");
	
	Параметры.ОткрытьФормуФилиала = ЭтоАдминистратор ИЛИ ЧтениеВсехДанных;
	
	Если НЕ Параметры.ОткрытьФормуФилиала Тогда
		Возврат;
	КонецЕсли;
	
	// Открытие из общей формы ИзменениеНаправления руководителем направления
	Если Параметры.Свойство("ИзменениеПользователя") Тогда
		ВспомогательныеДанные = Параметры.ИзменениеПользователя;
		Элементы.Код.Видимость = Ложь;
	Иначе
		ЭтоСтаршийПрограммист = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("СтаршийПрограммист");
		ЭтоРуководитель = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("РуководительГруппыРазработки");
		
		Если ЭтоСтаршийПрограммист И НЕ ЭтоРуководитель И НЕ ЭтоАдминистратор Тогда
			Элементы.Руководитель.Доступность = Ложь;
			Элементы.ЗаместительРуководителя.Доступность = Ложь;
		ИначеЕсли ЧтениеВсехДанных Тогда
			Элементы.СтраницыФилиала.ТолькоПросмотр = Истина;		
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьСтраниц();
	
	Если НЕ Параметры.Ключ.Пустая() Тогда
		КомандыРазработчиков = ПолучитьКомандыРазработки(Объект.Ссылка);
		ЗаполнитьСвязанныеФилиалы();
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.Территория) Тогда
		СТО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Территория, "Руководитель");
	КонецЕсли;
	
	Если НЕ ИнтеграцияДополнительныхПодсистем.ПодсистемаСуществует("ОбменДанными") Тогда
		Элементы.ГруппаОсновные.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если Объект.ТипФилиала = Перечисления.ТипыФилиалов.НеIT Тогда
		Элементы.ТипФилиала.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ТипФилиала.РежимВыбораИзСписка = Истина;
	КонецЕсли;

	Если НЕ ИнтеграцияДополнительныхПодсистем.ПодсистемаСуществует("ОбменДанными") Тогда
		Элементы.Территория.ТолькоПросмотр = Ложь;
		Элементы.СТО.ТолькоПросмотр = Ложь;
	КонецЕсли;	
		
	ИнтеграцияДополнительныхПодсистем.ИзменитьДоступностьРедактированияЮридическогоЛица(Элементы.ЮридическоеЛицо);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ Параметры.ОткрытьФормуФилиала Тогда
		Отказ = Истина;
		РаботаСНастройкамиКлиент.ОткрытьФормуНастроекФилиала(Объект.Ссылка);
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("УдаляемыеКоманды", УдаляемыеКоманды);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Помещение таблицы реквизитов во временное хранилище.
	ДополнительныеРеквизиты.ПередЗаписьюОбъекта(ЭтотОбъект, ТекущийОбъект);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СвязанныеФилиалы", 
		Справочники.Филиалы.ПолучитьИзмененияСвязанныеФилиалы(Объект.Ссылка, СвязанныеФилиалы.Выгрузить()));	 
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Помечаем на удаление, удаленные команды из карточки филиала.
	УдаляемыеКоманды = ПараметрыЗаписи.УдаляемыеКоманды;
	Для Каждого УдаляемаяКоманда Из УдаляемыеКоманды Цикл
		ФилиалОбъект = УдаляемаяКоманда.ПолучитьОбъект();
		ФилиалОбъект.ПометкаУдаления = Истина;
		ФилиалОбъект.Записать();
		ИсключитьУчастниковКомандыПриУдаленииКоманды(УдаляемаяКоманда);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьСтраниц();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Из формы команды разработки отправляем событие обновления списка команд.
	Если ИмяСобытия = СобытияОповещенияКлиент.ИмяСобытияОбновленияСпискаКоманд() Тогда
		КомандыРазработчиков = ПолучитьКомандыРазработки(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура РуководительОткрытие(Элемент, СтандартнаяОбработка)
	
	Если ИзменениеПользователя Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыИзменения = Новый Структура;
		МассивНаправлений = Новый Массив;
		
		ПараметрыИзменения.Вставить("Направления", МассивНаправлений);
		ПараметрыОткрытия = Новый Структура("ИзменениеПользователя, Ключ", ПараметрыИзменения, Объект.Руководитель);
		
		ОткрытьФорму("Справочник.Пользователи.Форма.ФормаЭлемента", ПараметрыОткрытия, ЭтотОбъект, КлючУникальности,
			, , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Действия с командами разработчиков

&НаКлиенте
Процедура КомандыРазработчиковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьДействиеСКомандойРазработчиков("Открыть");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандыРазработчиковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ОбработатьДействиеСКомандойРазработчиков("Добавить");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандыРазработчиковПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОбработатьДействиеСКомандойРазработчиков("Изменить");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандыРазработчиковПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ДобавитьКомандуДляУдаления();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий таблицы "СвязанныеФилиалы"

&НаКлиенте
Процедура СвязанныеФилиалыФилиалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Уберем из списка филиалов текущий филиал
	Настройки = Новый НастройкиКомпоновкиДанных;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Настройки.Отбор, "Ссылка",
		ВидСравненияКомпоновкиДанных.НеРавно, Объект.Ссылка, , Истина);
	
	ПараметрыОткрытия = Новый Структура("ФиксированныеНастройки", Настройки);
	ПараметрыОткрытия.Вставить("УстановитьСписок", Истина);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборФилиала", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.Филиалы.ФормаВыбора", ПараметрыОткрытия, , УникальныйИдентификатор, , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеФилиалыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные.Филиал = Объект.Ссылка Тогда
		Отказ = Истина;
		ПоказатьПредупреждение( , "Нельзя выбирать филиал, являющийся владельцем связанных филиалов.");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеФилиалыПослеУдаления(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ОткрытьНастройкиФилиала(Команда)
	
	РаботаСНастройкамиКлиент.ОткрытьФормуНастроекФилиала(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКомандуРазработки(Команда)
	
	ДобавитьКомандуДляУдаления();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСвязанныеФилиалы()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СвязанныеОбъекты.ПриемникСвязи КАК Филиал,
	|	СвязанныеОбъекты.РассчитыватьМетрикиСИсточником КАК РассчитыватьМетрикиСИсточником
	|ИЗ
	|	РегистрСведений.СвязанныеОбъекты КАК СвязанныеОбъекты
	|ГДЕ
	|	СвязанныеОбъекты.ИсточникСвязи = &ИсточникСвязи
	|	И СвязанныеОбъекты.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыСвязейОбъектов.СвязанаС)";
	
	Запрос.УстановитьПараметр("ИсточникСвязи", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СвязанныеФилиалы.Добавить(), Выборка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФилиала(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ТекущиеДанные = Элементы.СвязанныеФилиалы.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.Филиал = Результат;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСтраниц()
	
	ЭтоНовый = Параметры.Ключ.Пустая();
	Элементы.СтраницаСвязанныеФилиалы.Доступность = НЕ ЭтоНовый; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Действия с командами разработчиков

&НаКлиенте
Процедура ДобавитьКомандуДляУдаления()
	
	ТекущиеДанные = Элементы.КомандыРазработчиков.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Добавляем команду в массив для последующего удаления.
	УдаляемыеКоманды.Добавить(ТекущиеДанные.Значение);
	
	// Удаляем команду из реквизита формы.
	ЭлементСписка = КомандыРазработчиков.НайтиПоЗначению(ТекущиеДанные.Значение);
	Если ЭлементСписка <> Неопределено Тогда
		КомандыРазработчиков.Удалить(ЭлементСписка);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ИсключитьУчастниковКомандыПриУдаленииКоманды(УдаляемаяКоманда)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЛичныеДелаСрезПоследних.Сотрудник КАК Пользователь
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВКоманду)) КАК ЛичныеДелаСрезПоследних
	|ГДЕ
	|	ЛичныеДелаСрезПоследних.Данные = &Команда";
	
	Запрос.УстановитьПараметр("Команда", УдаляемаяКоманда);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РегистрыСведений.ЛичныеДела.ПереводВКоманду(ВыборкаДетальныеЗаписи.Пользователь, Справочники.Филиалы.ПустаяСсылка());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДействиеСКомандойРазработчиков(Знач ИмяСобытия)
	
	ПараметрыОткрытия = Новый Структура;
	
	Если ИмяСобытия = "Изменить" ИЛИ ИмяСобытия = "Открыть" Тогда
		ТекущиеДанные = Элементы.КомандыРазработчиков.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыОткрытия.Вставить("Ключ", ТекущиеДанные.Значение);
	Иначе
		ПараметрыОткрытия.Вставить("Родитель", Объект.Ссылка);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Филиалы.Форма.ФормаЭлементаКоманды", ПараметрыОткрытия,
		ЭтотОбъект, КлючУникальности);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКомандыРазработки(Знач Филиал)
	
	КомандыРазработчиков = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Филиалы.Ссылка КАК Ссылка,
	|	Филиалы.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|ГДЕ
	|	Филиалы.Родитель = &Родитель
	|	И НЕ Филиалы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Родитель", Филиал);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КомандыРазработчиков.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	
	Возврат КомандыРазработчиков;
	
КонецФункции

#КонецОбласти

#Область ИнициализацияПеременных

#Если ВебКлиент ИЛИ ТонкийКлиент Тогда

УдаляемыеКоманды = Новый Массив;

#КонецЕсли

#КонецОбласти
