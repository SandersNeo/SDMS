///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Добавляет обработчики обновления
//
// Параметры:
//  Обработчики	 - ТаблицаЗначений	 - см. ПриложениеВызовСервера.ПолучитьОбработчикиДанных
//
Процедура ДобавлениеОбработчиковОбновления(Обработчики) Экспорт     
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "Справочники.РолиПользователей.ПроверитьПредопределенныеЭлементы";
	
КонецПроцедуры

Процедура ЗаполнитьИнструментыРолей(ИнструментыСистемы) Экспорт
	
	ЗаказчикОбъект = Заказчик.ПолучитьОбъект();
	ЗаказчикОбъект.ДоступныеИнструменты.Очистить();
	
	ДобавитьИнструментРоли(ЗаказчикОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Очередь заявок", 0);
	ДобавитьИнструментРоли(ЗаказчикОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Заявки на доработку", 1);
	ДобавитьИнструментРоли(ЗаказчикОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Проекты", 2);
	ДобавитьИнструментРоли(ЗаказчикОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Внутренние задания", 3);
	ДобавитьИнструментРоли(ЗаказчикОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Заявки на разработку", 4);
	ДобавитьИнструментРоли(ЗаказчикОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Создать заявку на разработку", 5);
	ДобавитьИнструментРоли(ЗаказчикОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Проекты по специалисту", 6);
	ДобавитьИнструментРоли(ЗаказчикОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Канбан", 7);
	ДобавитьИнструментРоли(ЗаказчикОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Трудозатраты", 8);
	ЗаказчикОбъект.Записать();
	
	РазработчикОбъект = Разработчик.ПолучитьОбъект();
	РазработчикОбъект.ДоступныеИнструменты.Очистить();
	ДобавитьИнструментРоли(РазработчикОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Управление нагрузкой", 0);
	ДобавитьИнструментРоли(РазработчикОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Очередь заявок", 1);
	ДобавитьИнструментРоли(РазработчикОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Канбан", 2);
	ДобавитьИнструментРоли(РазработчикОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Мои задачи", 3);
	ДобавитьИнструментРоли(РазработчикОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Создать задачу", 4);
	ДобавитьИнструментРоли(РазработчикОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Трудозатраты", 5);
	РазработчикОбъект.Записать();
	
	РуководительОбъект = РуководительIT.ПолучитьОбъект();
	РуководительОбъект.ДоступныеИнструменты.Очистить();
	
	ДобавитьИнструментРоли(РуководительОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Очередь заявок", 0);
	ДобавитьИнструментРоли(РуководительОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Разработка", 1);
	ДобавитьИнструментРоли(РуководительОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Контроль", 2);
	ДобавитьИнструментРоли(РуководительОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Настройки филиала", 3);
	ДобавитьИнструментРоли(РуководительОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Создать заявку на разработку", 4);
	ДобавитьИнструментРоли(РуководительОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Быстрое создание задачи", 5);
	ДобавитьИнструментРоли(РуководительОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Внутренние трудозатраты", 6);
	ДобавитьИнструментРоли(РуководительОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Трудозатраты", 7);
	ДобавитьИнструментРоли(РуководительОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Мои задачи", 8);
	ДобавитьИнструментРоли(РуководительОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Канбан", 9);
	РуководительОбъект.Записать();
	
	ТестировщикОбъект = Тестировщик.ПолучитьОбъект();
	ТестировщикОбъект.ДоступныеИнструменты.Очистить();
	
	ДобавитьИнструментРоли(ТестировщикОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Пул на тестирование", 0);
	ДобавитьИнструментРоли(ТестировщикОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Мои задачи QA", 1);
	ДобавитьИнструментРоли(ТестировщикОбъект.ДоступныеИнструменты, ИнструментыСистемы, "На разработку QA", 2);
	ДобавитьИнструментРоли(ТестировщикОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Управление нагрузкой", 3);
	ДобавитьИнструментРоли(ТестировщикОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Очередь заявок", 4);
	ДобавитьИнструментРоли(ТестировщикОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Канбан", 5);
	ДобавитьИнструментРоли(ТестировщикОбъект.ДоступныеИнструменты, ИнструментыСистемы, "Трудозатраты", 6);
	ТестировщикОбъект.Записать();
	
КонецПроцедуры

// Проверяет предопределенные настройки
//
Процедура ПроверитьПредопределенныеЭлементы() Экспорт
	
	ЗаполнитьПредопределенныйЭлемент("Аналитик", "Аналитик");
	ЗаполнитьПредопределенныйЭлемент("ВсеРоли", "Все роли");
	ЗаполнитьПредопределенныйЭлемент("Гость", "Гость");
	ЗаполнитьПредопределенныйЭлемент("ДиректорIT", "Директор IT", Истина);
	ЗаполнитьПредопределенныйЭлемент("Заказчик", "Заказчик");
	ЗаполнитьПредопределенныйЭлемент("Разработчик", "Разработчик", Истина);
	ЗаполнитьПредопределенныйЭлемент("РуководительIT", "Руководитель ИТ-отдела", Истина);
	ЗаполнитьПредопределенныйЭлемент("РуководительНаправления", "Руководитель направления");
	ЗаполнитьПредопределенныйЭлемент("РуководительНаправленияIT", "Руководитель направления IT", Истина);
	ЗаполнитьПредопределенныйЭлемент("СтаршийРазработчик", "Старший разработчик", Истина);
	ЗаполнитьПредопределенныйЭлемент("СТО", "СТО");
	ЗаполнитьПредопределенныйЭлемент("Тестировщик", "Тестировщик", Истина);
	
КонецПроцедуры

// Возвращает роль пользователя на дату
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь
//  Дата		 - Дата							 - Дата, на которую нужно получить роль
// 
// Возвращаемое значение:
//  СправочникСсылка.РолиПользователей - роль пользователя на дату
//
Функция ПолучитьРольПользователя(Знач Пользователь, Знач Дата) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Должности.РольВОтделеIT КАК РольВОтделеIT
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(
	|			&Дата,
	|			Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПринятНаДолжность)
	|				И Сотрудник = &Пользователь) КАК ЛичныеДелаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
	|		ПО ЛичныеДелаСрезПоследних.Данные = Должности.Ссылка";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Дата", Дата);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Результат = Выборка.РольВОтделеIT;
	Иначе
		Результат = Справочники.РолиПользователей.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти   

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьИнструментРоли(ТабличнаяЧасть, ИнструментыСистемы, НаименованиеИнструмента, Порядок)
	
	НоваяСтрока = ТабличнаяЧасть.Добавить();
	НоваяСтрока.Инструмент = ИнструментыСистемы.Получить(НаименованиеИнструмента);
	НоваяСтрока.Порядок = Порядок;
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенныйЭлемент(ИмяЭлемента, Наименование, ПринадлежитITОтделу = Ложь) 
	
	Попытка
		Роль = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиПользователей." + ИмяЭлемента);
	Исключение
		Сообщение = НСтр("ru = 'Предопределенный элемент ""%Параметр%"" не найден.'");
		Сообщение = СтрЗаменить(Сообщение, "%Параметр%", "Справочник.РолиПользователей." + ИмяЭлемента);
		ВызватьИсключение Сообщение;
	КонецПопытки;
	
	НужнаЗапись = Ложь;
	
	Если Роль = Неопределено Тогда
		Роль = Справочники.РолиПользователей.СоздатьЭлемент();
		Роль.ИмяПредопределенныхДанных = ИмяЭлемента;
		Роль.Наименование = Наименование;
		Роль.ПринадлежитITОтделу = ПринадлежитITОтделу;
		
		НужнаЗапись = Истина;
	Иначе
		Роль = Роль.ПолучитьОбъект();
		
		Если Роль.ПринадлежитITОтделу <> ПринадлежитITОтделу Тогда
			Роль.ПринадлежитITОтделу = ПринадлежитITОтделу;
			НужнаЗапись = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НужнаЗапись Тогда
		Роль.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
