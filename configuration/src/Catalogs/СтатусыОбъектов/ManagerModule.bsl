///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет обработчики обновления
//
// Параметры:
//  Обработчики	 - ТаблицаЗначений	 - см. ПриложениеВызовСервера.ПолучитьОбработчикиДанных
//
Процедура ДобавлениеОбработчиковОбновления(Обработчики) Экспорт     
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "Справочники.СтатусыОбъектов.ПроверитьПредопределенныеЭлементы";
	
КонецПроцедуры

// Возвращает индекс картинки ВнутренниеТрудозатраты из набора СтатусыОбъектов.
//
// Возвращаемое значение:
//  Число.
//
Функция ИндексКартинкиВнутренниеТрудозатраты() Экспорт
	
	Возврат 32;
	
КонецФункции

// Возвращает индекс картинки Группа из набора СтатусыОбъектов.
//
// Возвращаемое значение:
//  Число.
//
Функция ИндексКартинкиГруппа() Экспорт
	
	Возврат 37;
	
КонецФункции

// Возвращает индекс картинки Зафиксирован из набора СтатусыОбъектов.
//
// Возвращаемое значение:
//  Число.
//
Функция ИндексКартинкиЗафиксирован() Экспорт
	
	Возврат 1;
	
КонецФункции

// Возвращает индекс картинки для статуса Черновик из набора СтатусыОбъектов.
//
// Возвращаемое значение:
//  Число.
//
Функция ИндексКартинкиЧерновик() Экспорт
	
	Возврат 31;
	
КонецФункции

// Выполняет поиск значения некоторого свойства статуса по значению другого
// свойства.
//
// Параметры:
//  ИскомоеСвойство - свойство, значение которого необходимо найти.
//  СвойствоПоиска  - свойство, по которому осуществляется поиск.
//  ЗначениеПоиска  - значение, по которому необходимо найти другое значение.
//
// Возвращаемое значение:
//  Значение свойства статуса.
//
Функция НайтиЗначениеСвойстваСтатуса(Знач ИскомоеСвойство, Знач СвойствоПоиска, Знач ЗначениеПоиска) Экспорт
	
	ОписанияСтатусов = СтандартныеОписанияСтатусов(Истина, СвойствоПоиска);
	
	НайденнаяСтрока = ОписанияСтатусов.Найти(ЗначениеПоиска, СвойствоПоиска);
	Если НайденнаяСтрока <> Неопределено Тогда
		ЗначениеСвойства = НайденнаяСтрока[ИскомоеСвойство];
	Иначе
		ЗначениеСвойства = Неопределено;
	КонецЕсли;
	
	Возврат ЗначениеСвойства;
	
КонецФункции

// Возвращает описание статусов объектов
//
// Возвращаемое значение:
//   Соответствие   - соотсветствие ссылки имени данных
//
Функция ОписаниеСтатусов() Экспорт

	Статусы = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыОбъектов.Ссылка КАК Ссылка,
	|	СтатусыОбъектов.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	СтатусыОбъектов.Наименование КАК Наименование,
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексКартинки
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|ГДЕ
	|	СтатусыОбъектов.Предопределенный
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыОбъектов.ИндексКартинки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СвойстваСтатуса = Новый Структура("Ссылка, Наименование, ИндексКартинки, ИмяПредопределенныхДанных");
		ЗаполнитьЗначенияСвойств(СвойстваСтатуса, Выборка);	
		Статусы.Вставить(Выборка.ИмяПредопределенныхДанных, СвойстваСтатуса);
	КонецЦикла;
	
	Возврат Статусы; 

КонецФункции

// Возвращает статусы объекта, которые обязательно должны присутствовать в цикле жизни объекта.
// 
// Возвращаемое значение:
//  Массив - ссылки на статусы
//
Функция ПолучитьКлючевыеСтатусы() Экспорт
	
	КлючевыеСтатусы = Новый Массив;
	КлючевыеСтатусы.Добавить(Справочники.СтатусыОбъектов.Новый);
	КлючевыеСтатусы.Добавить(Справочники.СтатусыОбъектов.Решен);
	КлючевыеСтатусы.Добавить(Справочники.СтатусыОбъектов.Отклонен);
	
	Возврат КлючевыеСтатусы;
	
КонецФункции

// Получает непредопределенный статус Test rеview
// 
// Возвращаемое значение:
//  Статус -  непредопределенный статус Test rеview
//
Функция ПолучитьСтатусTestReview() Экспорт       
	
	Возврат Справочники.СтатусыОбъектов.ПолучитьСсылку(Новый УникальныйИдентификатор("62f2f59f-b26a-11ed-a246-0050569d7269"));

КонецФункции

Функция ПолучитьСписокКартинокДляСтатусов() Экспорт
	
	СписокКартинок = Новый СписокЗначений;
	СписокКартинок.Добавить(0, "Проработка", , БиблиотекаКартинок.СтатусПроработка);  
	СписокКартинок.Добавить(1, "Новый", , БиблиотекаКартинок.СтатусНовый);                                                 
	СписокКартинок.Добавить(3, "НаРассмотрении", , БиблиотекаКартинок.СтатусРассмотрение);   
	СписокКартинок.Добавить(5, "НаДоработку", , БиблиотекаКартинок.СтатусНаДоработку); 
	СписокКартинок.Добавить(7, "ЗапросТребований", , БиблиотекаКартинок.СтатусЗапросТребований); 
	СписокКартинок.Добавить(9, "РевьюТребований", , БиблиотекаКартинок.СтатусРевьюТребований); 
	СписокКартинок.Добавить(11, "Рассмотрен", , БиблиотекаКартинок.СтатусРассмотрен);	
	СписокКартинок.Добавить(13, "Отложен", , БиблиотекаКартинок.СтатусОтложен); 
	СписокКартинок.Добавить(14, "ВРеализацию", , БиблиотекаКартинок.СтатусВРеализацию); 
	СписокКартинок.Добавить(16, "ВРаботе", , БиблиотекаКартинок.СтатусВРаботе); 
	СписокКартинок.Добавить(17, "Публикация", , БиблиотекаКартинок.СтатусПубликация); 
	СписокКартинок.Добавить(18, "Внедрение", , БиблиотекаКартинок.СтатусВнедрение);  
	СписокКартинок.Добавить(19, "ГотовоКПубликации", , БиблиотекаКартинок.СтатусГотовоКПубликации); 
	СписокКартинок.Добавить(20, "ВозвратВРаботу", , БиблиотекаКартинок.СтатусВозвратВРаботу); 
	СписокКартинок.Добавить(21, "Приостановлен", , БиблиотекаКартинок.СтатусПриостановлен);
	СписокКартинок.Добавить(22, "Тестирование", , БиблиотекаКартинок.СтатусТестирование); 
	СписокКартинок.Добавить(23, "ВнутреннееТестирование", , БиблиотекаКартинок.СтатусВнутреннееТестирование); 
	СписокКартинок.Добавить(24, "Протестирован", , БиблиотекаКартинок.СтатусПротестирован); 
	СписокКартинок.Добавить(25, "TestReview", , БиблиотекаКартинок.СтатусTestReview);  
	СписокКартинок.Добавить(26, "CodeReview", , БиблиотекаКартинок.СтатусCodeReview);  
	СписокКартинок.Добавить(27, "Масштабирование", , БиблиотекаКартинок.СтатусМасштабирование); 
	СписокКартинок.Добавить(28, "Документирование", , БиблиотекаКартинок.СтатусДокументирование);
	СписокКартинок.Добавить(29, "Решен", , БиблиотекаКартинок.СтатусРешен);
	СписокКартинок.Добавить(30, "Отклонен", , БиблиотекаКартинок.СтатусОтклонен);
	СписокКартинок.Добавить(33, "DesignReview", , БиблиотекаКартинок.СтатусDesignReview);  
	СписокКартинок.Добавить(34, "DocReview", , БиблиотекаКартинок.СтатусDocReview);  
	СписокКартинок.Добавить(35, "ТехническоеОписание", , БиблиотекаКартинок.СтатусТехническоеОписание);  
	СписокКартинок.Добавить(36, "ПользовательскоеОписание", , БиблиотекаКартинок.СтатусПользовательскоеОписание);  

	Возврат СписокКартинок;
	
КонецФункции

// Проверяет предопределенные настройки
//
Процедура ПроверитьПредопределенныеЭлементы() Экспорт     
	
	ЗаполнитьПредопределенныйЭлемент("Новый", "Новый", 2, 1, 0);
	ЗаполнитьПредопределенныйЭлемент("Проработка", "Проработка", 2, 0, 1);
	ЗаполнитьПредопределенныйЭлемент("На рассмотрении", "Рассмотрение", 4, 3, 2);
	ЗаполнитьПредопределенныйЭлемент("На доработку", "НаДоработку", 6, 5, 3);
	ЗаполнитьПредопределенныйЭлемент("Запрос требований", "ЗапросТребований", 8, 7, 4);
	ЗаполнитьПредопределенныйЭлемент("Ревью требований", "РевьюТребований", 10, 9, 5);
	ЗаполнитьПредопределенныйЭлемент("Рассмотрен", "Рассмотрен", 12, 11, 6);
	ЗаполнитьПредопределенныйЭлемент("Отложен", "Отложен", 2, 13, 7);
	ЗаполнитьПредопределенныйЭлемент("В реализацию", "ВРеализацию", 13, 14, 8);
	ЗаполнитьПредопределенныйЭлемент("В работе", "ВРаботе", 2, 16, 9);
	ЗаполнитьПредопределенныйЭлемент("Design review", "DesignReview", 2, 33, 10);
	ЗаполнитьПредопределенныйЭлемент("Внедрение", "Внедрение", 2, 18, 11);
	ЗаполнитьПредопределенныйЭлемент("Публикация", "Публикация", 2, 17, 12);
	ЗаполнитьПредопределенныйЭлемент("Приостановлен", "Приостановлен", 2, 21, 13);
	ЗаполнитьПредопределенныйЭлемент("Тестирование", "Тестирование", 2, 22, 15);
	ЗаполнитьПредопределенныйЭлемент("Внутреннее тестирование", "ВнутреннееТестирование", 2, 23, 14, Справочники.СтатусыОбъектов.Тестирование);
	ЗаполнитьПредопределенныйЭлемент("Протестирован", "Протестирован", 2, 24, 16);	
	ЗаполнитьПредопределенныйЭлемент("Code review", "CodeReview", 2, 26, 17);
	ЗаполнитьПредопределенныйЭлемент("Масштабирование", "Масштабирование", 2, 27, 18);
	ЗаполнитьПредопределенныйЭлемент("Документирование", "Документирование", 2, 28, 19);
	ЗаполнитьПредопределенныйЭлемент("Решен", "Решен", 2, 29, 20);
	ЗаполнитьПредопределенныйЭлемент("Отклонен", "Отклонен", 2, 30, 21);	
	
КонецПроцедуры     

// Возвращает исходное описание свойств статусов.
//
// Параметры:
//  ВернутьТаблицу - Булево - вернуть описание в виде ТаблицыЗначений. В противном
//                   случае возвращается массив структур.
//  ПоляИндексов   - Строка - список полей для создания индексов. Используется в
//                   случае, когда функции нужно вернуть ТаблицуЗначений.
//
// Возвращаемое значение:
//  ТаблицаЗначений с колонками "Ссылка", "Порядок", "ИндексКартинки", "Картинка".
//  Если параметр ВернутьТаблицу установлен в Ложь, тогда возвращается массив
//  структур со свойствами "Ссылка", "Порядок", "ИндексКартинки", "Картинка".
//
Функция СтандартныеОписанияСтатусов(Знач ВернутьТаблицу = Истина, Знач ПоляИндексов = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыОбъектов.Ссылка КАК Ссылка,
	|	СтатусыОбъектов.ИмяКартинкиВБиблиотеке КАК ИмяКартинкиВБиблиотеке,
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексКартинки,
	|	СтатусыОбъектов.Порядок КАК Порядок
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|ГДЕ
	|	СтатусыОбъектов.Предопределенный
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если ВернутьТаблицу Тогда
		Результат = РезультатЗапроса.Выгрузить();
		Результат.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));
		
		Для Каждого СтрокаТаблицы Из Результат Цикл
			ИмяКартинки = СтрШаблон("Статус%1", СтрокаТаблицы.ИмяКартинкиВБиблиотеке);
			СтрокаТаблицы.Картинка = БиблиотекаКартинок[ИмяКартинки]; 			
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(ПоляИндексов) Тогда
			Результат.Индексы.Добавить(ПоляИндексов);
		КонецЕсли;
	Иначе
		ПоляСтруктуры = "Ссылка, ИндексКартинки, Порядок, Картинка";
		Результат = Новый Массив;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОписаниеСтатуса = Новый Структура(ПоляСтруктуры);
			ЗаполнитьЗначенияСвойств(ОписаниеСтатуса, Выборка);
			ОписаниеСтатуса.Картинка = БиблиотекаКартинок[Выборка.ИмяКартинкиВБиблиотеке];
			
			Результат.Добавить(ОписаниеСтатуса);
		КонецЦикла;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции 

// Выполняет заполнение элементов справочника СтатусыОбъектов стандартными
// настройками.
//
Процедура УстановитьСтандартныеСвойстваСтатусов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТранзакцияАктивна() Тогда
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.СтатусыОбъектов");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
	КонецЕсли;
	
	ТаблицаОписанияСтатусов = СтандартныеОписанияСтатусов();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыОбъектов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НайденнаяСтрока = ТаблицаОписанияСтатусов.Найти(Выборка.Ссылка, "Ссылка");
		Если НайденнаяСтрока <> Неопределено Тогда
			ИндексКартинки = НайденнаяСтрока.ИндексКартинки;
			ПорядокСтатуса = НайденнаяСтрока.Порядок;
		Иначе
			ИндексКартинки = -1;
			ПорядокСтатуса = -1;
		КонецЕсли;
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ИндексКартинки = ИндексКартинки;
		СправочникОбъект.Порядок        = ПорядокСтатуса;
		СправочникОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПредопределенныйЭлемент(Наименование, ИмяЭлемента, ИндексЗафиксирован, ИндексКартинки, Порядок, Родитель = Неопределено) 
	
	Попытка
		Статус = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СтатусыОбъектов." + ИмяЭлемента);
	Исключение
		Сообщение = НСтр("ru = 'Предопределенный элемент ""%Параметр%"" не найден.'");
		Сообщение = СтрЗаменить(Сообщение, "%Параметр%", "Справочник.СтатусыОбъектов." + ИмяЭлемента);
		ВызватьИсключение Сообщение;
	КонецПопытки;
		
	Если Статус = Неопределено Тогда  
		Статус = Справочники.СтатусыОбъектов.СоздатьЭлемент();
		Статус.ИмяПредопределенныхДанных = ИмяЭлемента;     
		Статус.ИмяКартинкиВБиблиотеке = ИмяЭлемента;     
		Статус.Наименование = Наименование;     
		Статус.ИндексЗафиксирован = ИндексЗафиксирован;     
		Статус.ИндексКартинки = ИндексКартинки;     
		Статус.Порядок = Порядок;     
		Статус.Родитель = Родитель;     
		Статус.Записать();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецЕсли
