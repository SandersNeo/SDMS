///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает признак использования направлением разделения видов процессов
Функция ИспользуетВидыПроцессов(Знач Направление) Экспорт
	
	Возврат НЕ Направление.Пустая() И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Направление, "ИспользоватьВидыПроцессов");
	
КонецФункции

// Добавляет/удаляет роли "РуководительНаправления" у пользователей при смене руководителя направления
//
// Параметры:
//  ТекущийРуководитель	 - СправочникСсылка.Пользователи - предыдущий руководитель направления
//  НовыйРуководитель	 - СправочникСсылка.Пользователи - текущий руководитель направления
//  Направление			 - СправочникСсылка.Направление - направление
//
Процедура ОбработатьИзменениеРуководителяНаправления(ТекущийРуководитель, НовыйРуководитель, Направление) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РолиПользователейПоНаправлениям.НаправлениеРазработки КАК НаправлениеРазработки
	|ИЗ
	|	РегистрСведений.РолиПользователейПоНаправлениям КАК РолиПользователейПоНаправлениям
	|ГДЕ
	|	РолиПользователейПоНаправлениям.Пользователь = &ТекущийРуководитель
	|	И РолиПользователейПоНаправлениям.Роль = ЗНАЧЕНИЕ(Справочник.РолиПользователей.РуководительНаправления)
	|	И РолиПользователейПоНаправлениям.НаправлениеРазработки <> &Направление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РолиПользователейПоНаправлениям.НаправлениеРазработки КАК НаправлениеРазработки
	|ИЗ
	|	РегистрСведений.РолиПользователейПоНаправлениям КАК РолиПользователейПоНаправлениям
	|ГДЕ
	|	РолиПользователейПоНаправлениям.Пользователь = &НовыйРуководитель
	|	И РолиПользователейПоНаправлениям.Роль = ЗНАЧЕНИЕ(Справочник.РолиПользователей.РуководительНаправления)
	|	И РолиПользователейПоНаправлениям.НаправлениеРазработки <> &Направление";
	
	Запрос.УстановитьПараметр("НовыйРуководитель", НовыйРуководитель);
	Запрос.УстановитьПараметр("ТекущийРуководитель", ТекущийРуководитель);
	Запрос.УстановитьПараметр("Направление", Направление);
	
	Пакеты = Запрос.ВыполнитьПакет();
	НаправленияТекущегоРуководителя = Пакеты.Получить(0).Выбрать();
	НаправленияНовогоРуководителя	= Пакеты.Получить(1).Выбрать();
		
	// Если у текущего руководителя направления нет других направлений по которым он является руководителем,
	// то забираем у пользователя роль руководителя направления
	Если НаправленияТекущегоРуководителя.Количество() = 0 Тогда
		Если ТипЗнч(ТекущийРуководитель) = Тип("СправочникСсылка.Пользователи")
			И ЗначениеЗаполнено(ТекущийРуководитель) Тогда
			Пользователи.ИзменитьРольПользователя(ТекущийРуководитель, Метаданные.Роли.РуководительНаправления, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	// Если новый руководитель не является руководителем группы разработки, то нужно установить ему роль
	Если НаправленияНовогоРуководителя.Количество() = 0 Тогда
		Если ТипЗнч(НовыйРуководитель) = Тип("СправочникСсылка.Пользователи")
			И ЗначениеЗаполнено(НовыйРуководитель) Тогда
			Пользователи.ИзменитьРольПользователя(НовыйРуководитель, Метаданные.Роли.РуководительНаправления, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает связанные данные направления
//
// Параметры:
//  Направление  - СправочникСсылка.НаправленияРазработки - ссылка на элемент справочника
//
// Возвращаемое значение:
//   Структура - структура с данными о результате работы функции
// 		* Успешно - Булево	- Ложь, если была ошибка, иначе Истина.
// 		* ТекстОшибки - Строка - Описание возникшей ошибки.
// 		* Данные - Структура - Структура данных направления.
//
Функция ПолучитьДанныеНаправления(Знач Направление) Экспорт
			
	Результат = Новый Структура("Успешно, ТекстОшибки", Истина, "");

	Запрос = Новый Запрос;
	Запрос.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ИспользованиеЮридическихЛиц.Направление КАК Направление,
	|	ИспользованиеЮридическихЛиц.Использование КАК Использование
	|ПОМЕСТИТЬ ИспользованиеЮридическихЛиц
	|ИЗ
	|	РегистрСведений.ИспользованиеЮридическихЛицНаправлений.СрезПоследних(, Направление = &Направление) КАК ИспользованиеЮридическихЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаправленияРазработки.ИспользоватьВидыПроцессов КАК ИспользуетВидыПроцессов,
	|	ЕСТЬNULL(ИспользованиеЮридическихЛиц.Использование, ЛОЖЬ) КАК ИспользуетЮрЛица
	|ИЗ
	|	Справочник.НаправленияРазработки КАК НаправленияРазработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИспользованиеЮридическихЛиц КАК ИспользованиеЮридическихЛиц
	|		ПО (ИспользованиеЮридическихЛиц.Направление = НаправленияРазработки.Ссылка)
	|ГДЕ
	|	НаправленияРазработки.Ссылка = &Направление
	|	И НЕ НаправленияРазработки.ПометкаУдаления";	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Направление", Направление);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ДанныеНаправления = Новый Структура;
		ДанныеНаправления.Вставить("Ссылка", Направление);
		ДанныеНаправления.Вставить("ИспользуетВидыПроцессов", Выборка.ИспользуетВидыПроцессов);
		ДанныеНаправления.Вставить("ИспользуетЮрЛица", Выборка.ИспользуетЮрЛица);

		Результат.Вставить("Данные", ДанныеНаправления); 
	Иначе
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = "Указанное направление отсутствует.";
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Возвращает признак, ответственный ли пользователь по направлению
//
// Параметры:
//  Направление  - СправочникСсылка.НаправленияРазработки - ссылка на элемент справочника
//
// Возвращаемое значение:
//   Булево - Истина, если текущий пользователь ответственный по направлению, иначе Ложь.
//
Функция ЭтоОтветственный(Знач Направление) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаправленияРазработкиОтветственные.Сотрудник КАК Сотрудник
	|ИЗ
	|	Справочник.НаправленияРазработки.Ответственные КАК НаправленияРазработкиОтветственные
	|ГДЕ
	|	НаправленияРазработкиОтветственные.Ссылка = &Ссылка
	|	И НаправленияРазработкиОтветственные.Сотрудник = &ТекущийПользователь";
	
	Запрос.УстановитьПараметр("Ссылка", Направление);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();	

КонецФункции

#КонецОбласти
