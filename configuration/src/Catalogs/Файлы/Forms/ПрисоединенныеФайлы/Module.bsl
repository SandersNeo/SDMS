///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПанельНавигации.Скопировать(ЭтотОбъект, Параметры);
	
	// Установка информационной надписи по макимальному размеру добавляемого файла
	МаксимальныйРазмерФайла = ПовторноеИспользованиеВызовСервера.МаксимальныйРазмерФайла();
	ПредставлениеМаксимальногоРазмера = РаботаСФайламиКлиентСервер.РазмерФайлаСтрокой(МаксимальныйРазмерФайла, Истина);
	Владелец = Параметры.Владелец;
	ОткрытоИзПланаПроекта = Параметры.Свойство("ПланВыполненияПроекта"); 
	РазрешениеАрхивирование = Истина;
	РазрешениеУдаление = Истина;
	
	ОбновитьСписокПрисоединенныхФайлов();
	НастроитьРазрешенияПользователя();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПанельНавигацииКлиент.ПриОткрытии(Элементы, Истина);
		
	// Оповещение родительской формы для обновления заголовка вкладки присоединенных файлов
	Оповестить(СобытияОповещенияКлиент.ИмяСобытияОбновленияКоличестваФайлов(), Владелец);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
			
	Если РаботаСФайламиКлиент.ОбработатьПомещениеПрисоединенныхФайловНаСервер(ИмяСобытия, Владелец, Параметр) Тогда
		ОбновитьСписокПрисоединенныхФайлов();
	КонецЕсли;
	
	ПанельНавигацииКлиент.ОбработкаОповещения(ЭтотОбъект, Владелец, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда  
		
		НачалоВхождения = СтрНайти(ДанныеСобытия.Href, "sdms_user_");
		
		Если НачалоВхождения > 0 Тогда
			Идентификатор = Сред(ДанныеСобытия.Href, НачалоВхождения + 10);
			ИдентификаторПользователя = Новый УникальныйИдентификатор(Идентификатор);
			
			ИнтерфейсПриложенияКлиент.ОткрытьИнформациюОПользователе(ЭтотОбъект, ИдентификаторПользователя, СтандартнаяОбработка);
		Иначе
			Команда = ДанныеСобытия.Href;
			ОбработатьКомандуПоляHTML(Команда);
		КонецЕсли;
	ИначеЕсли СтрНайти(ДанныеСобытия.Element.name, "checkbox_arc") Тогда 
		
		Результат = Элементы.ТекстHTML.Документ.defaultView.archiveClick(ДанныеСобытия.Element.name);
		Результат = ИзменитьПризнакАрхивногоНаСервере(ДанныеСобытия.Element.name, Результат);				
		
		Если НЕ Результат.Успешно Тогда
			// Восстановление в таблице свойства файла и отображение пользователю сообщения с ошибкой
			СтандартнаяОбработка = Ложь;
			
			ТекстСообщения = "Не удалось изменить признак файла по причине:
			|" + Результат.ТекстОшибки;
			ПоказатьПредупреждение(, ТекстСообщения, , "Изменение признака ""Архивный""");
		КонецЕсли;
	Иначе
		
		Попытка
			Текст = Элементы.ТекстHTML.Документ.defaultView.get_describe();
		Исключение
			Текст = Неопределено;
		КонецПопытки;
		
		Если ТипЗнч(Текст) = Тип("Строка") И Текст <> "" Тогда
			Результат = ИзменитьОписаниеФайлаНаСервере(Текст);
			
			Если НЕ Результат.Успешно Тогда
				// Восстановление в таблице описания файла и отображение пользователю сообщения с ошибкой
				СтандартнаяОбработка = Ложь;
			
				ТекстСообщения = "Не удалось изменить описание файла по причине:
					|" + Результат.ТекстОшибки;
				ПоказатьПредупреждение(, ТекстСообщения, , "Редактирование описания файла");
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли; 
	
КонецПроцедуры  

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ПанельНавигацииНажатие(Команда)
	
	ПанельНавигацииКлиент.Нажатие(ЭтотОбъект, Команда, Истина);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает массив ссылок на элементы справочника Файлы по выделенным строкам
//  таблицы СписокФайлов.
// 
// Возвращаемое значение:
//  Массив - выделенные строки
//
&НаКлиенте
Функция ВыделенныеФайлы(ТолькоВыбранные = Истина)
	
	Результат = Элементы.ТекстHTML.Документ.defaultView.returnChecked(Число(ТолькоВыбранные));
	
	Возврат ПолучитьЗначенияИзJSON(Результат);
	
КонецФункции

// Сохраняет пользовательское описание файла в соотвествующем элементе справочника
//  Файлы. Предварительно сравнивает текущее описание и новое, чтобы исключить
//  перезапись одинаковых данных.
//
// Параметры:
//  СтрокаJSON	 - Строка	 - данные пользовательских описаний файлов.
// 
// Возвращаемое значение:
//  Структура - результат изменения описания файла
//
&НаСервереБезКонтекста
Функция ИзменитьОписаниеФайлаНаСервере(Знач СтрокаJSON)
	
	Результат = Новый Структура("Успешно, ТекстОшибки", Истина, "");
	
	Попытка
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(СтрокаJSON);
		Данные = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
		
		УникальныйИдентификаторСсылки = Прав(Данные.name, 36);		
		
		Ссылка = XMLЗначение(Тип("СправочникСсылка.Файлы"), УникальныйИдентификаторСсылки);
		Объект = Ссылка.ПолучитьОбъект();
		Объект.Описание = Данные.text;
		Объект.Записать();
	Исключение
		Результат.Успешно = Ложь;	
		Результат.ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИзменитьПризнакАрхивногоНаСервере(Знач ИмяЭлемента, Знач Архивный)	
		
	УникальныйИдентификаторСсылки = Прав(ИмяЭлемента, 36);	
	Результат = Новый Структура("Успешно, ТекстОшибки", Истина, "");
	
	Попытка
		Ссылка = XMLЗначение(Тип("СправочникСсылка.Файлы"), УникальныйИдентификаторСсылки);
		Объект = Ссылка.ПолучитьОбъект();
		Объект.Архивный = Архивный;
		Объект.Записать(); 		
	Исключение
		Результат.ТекстОшибки = ОписаниеОшибки();
		Результат.Успешно = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаписатьИзмененияВИсторию(Файлы)
	
	// XML для записи истории изменений
	Если ТипЗнч(Владелец) <> Тип("СправочникСсылка.Проекты")
		И Файлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Если удаляются файлы заявки, то 
	Запрос = Новый Запрос;
	
#Область ТекстЗапроса
	
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	Задача.Назначена КАК Назначена
	|ПОМЕСТИТЬ НазначенныеПоЗадаче
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	Задача.ОбъектОснование = &Владелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Задача.Назначена
	|ИЗ
	|	Документ.Задача КАК Задача
	|ГДЕ
	|	Задача.Ссылка = &Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛичныеДелаСрезПоследних.Сотрудник КАК Сотрудник,
	|	ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы) КАК Филиал
	|ПОМЕСТИТЬ ФилиалыНазначенных
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(
	|			&ТекущаяДата,
	|			Сотрудник В
	|					(ВЫБРАТЬ
	|						НазначенныеПоЗадаче.Назначена
	|					ИЗ
	|						НазначенныеПоЗадаче)
	|				И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФилиалыНазначенных.Сотрудник КАК Исполнитель,
	|	Филиалы.Руководитель КАК Руководитель
	|ПОМЕСТИТЬ ИсполнителиИРуководитель
	|ИЗ
	|	ФилиалыНазначенных КАК ФилиалыНазначенных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО ФилиалыНазначенных.Филиал = Филиалы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсполнителиИРуководитель.Руководитель КАК Пользователь
	|ИЗ
	|	ИсполнителиИРуководитель КАК ИсполнителиИРуководитель
	|ГДЕ
	|	ИсполнителиИРуководитель.Руководитель <> &Автор
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИсполнителиИРуководитель.Исполнитель
	|ИЗ
	|	ИсполнителиИРуководитель КАК ИсполнителиИРуководитель
	|ГДЕ
	|	ИсполнителиИРуководитель.Исполнитель <> &Автор";
	
#КонецОбласти
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Автор", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Получатели = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Пользователь");		
		ОтправлятьУведомления = Истина;
	Иначе
		ОтправлятьУведомления = Ложь;	
	КонецЕсли;
		
	// Формирование сообщения для записи в историю изменений
	ТаблицаЗаписиВИсторию = ОбщегоНазначения.ПолучитьСтруктуруДанныхДляЗаписиВИсторию();
	
	// Строка сообщения пользователям
	СтрокаСообщения = "";
	ВысокаяВажность = Перечисления.ВажностьСообщения.Высокая;
	ВажныеИзменения = Перечисления.КатегорииСообщенийПользователя.ВажныеИзмененияОбъекта;
	ПоляСтруктуры = "ТекстСообщения, КатегорияСообщения, Важность";	
	
	ШаблоныПисьма = РегистрыСведений.ОчередьОтправкиЭлектронныхПисем.ШаблоныЭлектронногоПисьма();
	
	ТекстШаблона = СтрЗаменить(ШаблоныПисьма.ЗаголовокСобытия, "<!-- event_date -->", Формат(ТекущаяДатаСеанса(), ШаблоныПисьма.ФорматДаты));
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- user_name -->", ПараметрыСеанса.ТекущийПользователь);

	ТекстСобытия = "удалил файл <b>%1</b>.<br>";
	
	ДанныеСтруктура = Новый Структура("Событие, ИмяФайла, Добавлен", "ИзменениеФайла", "", 0);

	Для Каждого Файл Из Файлы Цикл
		ТекстСообщения = СтрШаблон(ТекстСобытия, Файл.ОригинальноеИмя);
		ДанныеСтруктура.ИмяФайла = Файл.ОригинальноеИмя;
		
		ТекстШаблона = СтрЗаменить(ТекстШаблона, "<!-- event -->", ТекстСообщения);
		
		ТекстСообщения = СтрЗаменить(ШаблоныПисьма.БлокОсновногоТекста, "<!-- content -->", ТекстШаблона);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "<!-- font_size -->", "14px");

		СтрокаТаблицы = ТаблицаЗаписиВИсторию.Добавить();
		СтрокаТаблицы.Данные = ЗаписатьЗначениеJSON(ДанныеСтруктура);
		СтрокаТаблицы.Категория = Перечисления.КатегорииСобытийИсторияИзменений.Прочее;
		
		СтрокаСообщения = СтрокаСообщения + ТекстСообщения;
		
		// Отправка уведомлений на почту и в рабочие столы
		Если ОтправлятьУведомления Тогда
			Сообщение = Новый Структура(ПоляСтруктуры, ТекстСообщения, ВажныеИзменения, ВысокаяВажность);
			РегистрыСведений.ПодготовленныеСообщенияПользователяПоКатегориям.Добавить(Получатели, Владелец, Сообщение);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаСообщения) И ОтправлятьУведомления Тогда
		Сообщение = Новый Структура(ПоляСтруктуры, СтрокаСообщения, ВажныеИзменения, ВысокаяВажность);
		
		РегистрСведений = РегистрыСведений.ОчередьСобытийНаОбработку;
		РегистрСведений.ОтправитьОповещениеФиксированныеПолучателям(Владелец, Получатели, Сообщение);
	КонецЕсли;
	
	РегистрыСведений.ИсторияИзмененийОбъектовПоСобытиям.Добавить(Владелец, ТаблицаЗаписиВИсторию);	
	
КонецПроцедуры

&НаСервере
Процедура НастроитьРазрешенияПользователя()
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Проекты") Тогда
			
		Запрос = Новый Запрос;

#Область ТекстЗапроса
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЛичныеДелаСрезПоследних.Сотрудник КАК Пользователь,
		|	ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы) КАК Филиал
		|ПОМЕСТИТЬ ЛичныеДелаФилиалы
		|ИЗ
		|	РегистрСведений.ЛичныеДела.СрезПоследних(&ТекущаяДата, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ЛичныеДелаФилиалы.Филиал, ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК ФилиалРуководителяПроекта,
		|	Проекты.Руководитель КАК Руководитель,
		|	Проекты.Заказчик КАК Заказчик,
		|	Проекты.Куратор КАК Куратор
		|ПОМЕСТИТЬ СвойстваПроекта
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЛичныеДелаФилиалы КАК ЛичныеДелаФилиалы
		|		ПО Проекты.Руководитель = ЛичныеДелаФилиалы.Пользователь
		|ГДЕ
		|	Проекты.Ссылка = &Проект
		|	И Проекты.Статус <> ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Филиалы.Руководитель КАК Руководитель,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(НастройкиФилиалов.Значение, ЗНАЧЕНИЕ(Справочник.НаправленияРазработки.ПустаяСсылка)) КАК Справочник.НаправленияРазработки) КАК Направление
		|ПОМЕСТИТЬ СвойстваФилиала
		|ИЗ
		|	СвойстваПроекта КАК СвойстваПроекта
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
		|		ПО СвойстваПроекта.ФилиалРуководителяПроекта = Филиалы.Ссылка
		|			И (Филиалы.Руководитель = &Пользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиФилиалов КАК НастройкиФилиалов
		|		ПО (Филиалы.Ссылка = НастройкиФилиалов.Филиал)
		|			И (НастройкиФилиалов.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.НаправлениеРазработки))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СвойстваПроекта.Руководитель КАК Пользователь,
		|	ИСТИНА КАК Удаление,
		|	ИСТИНА КАК Архивирование
		|ПОМЕСТИТЬ ТаблицаПравПользователя
		|ИЗ
		|	СвойстваПроекта КАК СвойстваПроекта
		|ГДЕ
		|	СвойстваПроекта.Руководитель = &Пользователь
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СвойстваПроекта.Заказчик,
		|	ЛОЖЬ,
		|	ИСТИНА
		|ИЗ
		|	СвойстваПроекта КАК СвойстваПроекта
		|ГДЕ
		|	СвойстваПроекта.Заказчик = &Пользователь
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СвойстваПроекта.Куратор,
		|	ЛОЖЬ,
		|	ИСТИНА
		|ИЗ
		|	СвойстваПроекта КАК СвойстваПроекта
		|ГДЕ
		|	СвойстваПроекта.Куратор = &Пользователь
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Участники.Пользователь,
		|	ЛОЖЬ,
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.Участники КАК Участники
		|ГДЕ
		|	(ВЫРАЗИТЬ(Участники.Объект КАК Справочник.Проекты)) = &Проект
		|	И Участники.Пользователь = &Пользователь
		|	И Участники.Роль = ЗНАЧЕНИЕ(Справочник.РолиУчастников.УчастникКомандыУправленияПроектом)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СвойстваФилиала.Руководитель,
		|	ИСТИНА,
		|	ИСТИНА
		|ИЗ
		|	СвойстваФилиала КАК СвойстваФилиала
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НаправленияРазработкиОтветственные.Сотрудник,
		|	ИСТИНА,
		|	ИСТИНА
		|ИЗ
		|	СвойстваФилиала КАК СвойстваФилиала
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаправленияРазработки.Ответственные КАК НаправленияРазработкиОтветственные
		|		ПО СвойстваФилиала.Направление = НаправленияРазработкиОтветственные.Ссылка
		|			И (НаправленияРазработкиОтветственные.Руководитель = ИСТИНА)
		|			И (НаправленияРазработкиОтветственные.Сотрудник = &Пользователь)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПравПользователя.Пользователь КАК Пользователь,
		|	МАКСИМУМ(ТаблицаПравПользователя.Удаление) КАК Удаление,
		|	МАКСИМУМ(ТаблицаПравПользователя.Архивирование) КАК Архивирование
		|ИЗ
		|	ТаблицаПравПользователя КАК ТаблицаПравПользователя
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПравПользователя.Пользователь";
		
#КонецОбласти		
		
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("Проект", Владелец);
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда     
			РазрешениеАрхивирование = Выборка.Архивирование;
			РазрешениеУдаление = Выборка.Удаление;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокПрисоединенныхФайлов()
	 
	ПостроительЗапроса = Новый ПостроительЗапроса;
	
#Область ТекстЗапроса
	
	ПостроительЗапроса.Текст =
	"ВЫБРАТЬ
	|	СтруктураПодчиненности.Объект КАК Объект
	|ПОМЕСТИТЬ ВсеСвязанныеОбъекты
	|ИЗ
	|	РегистрСведений.СтруктураПодчиненности КАК СтруктураПодчиненности
	|ГДЕ
	|	СтруктураПодчиненности.Родитель = &Владелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтруктураПодчиненности.Родитель
	|ИЗ
	|	РегистрСведений.СтруктураПодчиненности КАК СтруктураПодчиненности
	|ГДЕ
	|	СтруктураПодчиненности.Объект = &Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВсеСвязанныеОбъекты.Объект КАК Объект,
	|	ПрикрепленныеФайлы.Файл КАК Файл
	|ПОМЕСТИТЬ ПрисоединенныеФайлыОбъектов
	|ИЗ
	|	ВсеСвязанныеОбъекты КАК ВсеСвязанныеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ПО ВсеСвязанныеОбъекты.Объект = ПрикрепленныеФайлы.Объект
	|			И (ПрикрепленныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.Объект))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО ((ВЫРАЗИТЬ(ВсеСвязанныеОбъекты.Объект КАК Документ.ЗаявкаНаРазработку)) = ЗаявкаНаРазработку.Ссылка)
	|ГДЕ
	|	ВсеСвязанныеОбъекты.Объект ССЫЛКА Документ.ЗаявкаНаРазработку
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВсеСвязанныеОбъекты.Объект,
	|	ПрикрепленныеФайлы.Файл
	|ИЗ
	|	ВсеСвязанныеОбъекты КАК ВсеСвязанныеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРазработку КАК ЗаявкаНаРазработку
	|		ПО ((ВЫРАЗИТЬ(ВсеСвязанныеОбъекты.Объект КАК Документ.ЗаявкаНаРазработку)) = ЗаявкаНаРазработку.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Комментарии КАК Комментарии
	|		ПО ((ВЫРАЗИТЬ(ВсеСвязанныеОбъекты.Объект КАК Документ.ЗаявкаНаРазработку)) = Комментарии.Объект)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ПО (Комментарии.Идентификатор = ПрикрепленныеФайлы.Объект)
	|			И (ПрикрепленныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.ФайлыКомментария))
	|ГДЕ
	|	ВсеСвязанныеОбъекты.Объект ССЫЛКА Документ.ЗаявкаНаРазработку
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВсеСвязанныеОбъекты.Объект,
	|	ПрикрепленныеФайлы.Файл
	|ИЗ
	|	ВсеСвязанныеОбъекты КАК ВсеСвязанныеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ПО ВсеСвязанныеОбъекты.Объект = ПрикрепленныеФайлы.Объект
	|			И (ПрикрепленныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.Объект))
	|ГДЕ
	|	НЕ ВсеСвязанныеОбъекты.Объект ССЫЛКА Документ.ЗаявкаНаРазработку
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВсеСвязанныеОбъекты.Объект,
	|	ПрикрепленныеФайлы.Файл
	|ИЗ
	|	ВсеСвязанныеОбъекты КАК ВсеСвязанныеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Комментарии КАК Комментарии
	|		ПО ВсеСвязанныеОбъекты.Объект = Комментарии.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ПО (Комментарии.Идентификатор = ПрикрепленныеФайлы.Объект)
	|			И (ПрикрепленныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.ФайлыКомментария))
	|ГДЕ
	|	НЕ ВсеСвязанныеОбъекты.Объект ССЫЛКА Документ.ЗаявкаНаРазработку
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПрикрепленныеФайлы.Объект,
	|	ПрикрепленныеФайлы.Файл
	|ИЗ
	|	РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|ГДЕ
	|	ПрикрепленныеФайлы.Объект = &Владелец
	|	И ПрикрепленныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.Объект)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Комментарии.Объект,
	|	ПрикрепленныеФайлы.Файл
	|ИЗ
	|	РегистрСведений.Комментарии КАК Комментарии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ПО Комментарии.Идентификатор = ПрикрепленныеФайлы.Объект
	|			И (ПрикрепленныеФайлы.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.ФайлыКомментария))
	|ГДЕ
	|	Комментарии.Объект = &Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрисоединенныеФайлыОбъектов.Объект КАК Объект,
	|	ПрисоединенныеФайлыОбъектов.Объект.Дата КАК Дата,
	|	ПРЕДСТАВЛЕНИЕ(ПрисоединенныеФайлыОбъектов.Объект) КАК ПредставлениеОбъекта,
	|	ПрисоединенныеФайлыОбъектов.Файл КАК Ссылка,
	|	СправочникФайлы.ОригинальноеИмя КАК Наименование,
	|	Пользователи.ФИО КАК ФИО,
	|	СправочникФайлы.Автор КАК Автор,
	|	СправочникФайлы.ДатаСоздания КАК ДатаСоздания,
	|	СправочникФайлы.Размер КАК РазмерЧислом,
	|	ВЫРАЗИТЬ("""""""" КАК СТРОКА(25)) КАК Размер,
	|	СправочникФайлы.Описание КАК Описание,
	|	СправочникФайлы.ПометкаУдаления КАК ПометкаУдаления,
	|	СправочникФайлы.Архивный КАК Архивный,
	|	СправочникФайлы.Расширение КАК Расширение
	|ИЗ
	|	ПрисоединенныеФайлыОбъектов КАК ПрисоединенныеФайлыОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК СправочникФайлы
	|		ПО ПрисоединенныеФайлыОбъектов.Файл = СправочникФайлы.Ссылка
	|			И (НЕ СправочникФайлы.ПометкаУдаления)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (Пользователи.Ссылка = СправочникФайлы.Автор)
	|{ГДЕ
	|	ПрисоединенныеФайлыОбъектов.Объект}
	|
	|УПОРЯДОЧИТЬ ПО
	|	СправочникФайлы.Архивный,
	|	ДатаСоздания УБЫВ,
	|	Наименование";
	
#КонецОбласти
	
	ПостроительЗапроса.Параметры.Вставить("Владелец", Владелец);
	
	ПостроительЗапроса.Выполнить();	
	ПрисоединенныеФайлы = ПостроительЗапроса.Результат.Выгрузить();

	ШаблоныHTML = ПолучитьHTMLШаблоны();
	КорневойURL = Константы.КорневойURL.Получить();
	НаборСтрокHTML = "";	
	
	ИконокиФайлов = ПовторноеИспользованиеВызовСервера.ПолучитьРасширенияФайловСИконками();
	
	Для Каждого СтрокаТаблицы Из ПрисоединенныеФайлы Цикл
		
		Размер = РаботаСФайламиКлиентСервер.РазмерФайлаСтрокой(СтрокаТаблицы.РазмерЧислом);
		ИмяФайла = СтрШаблон("%1 (%2)", СтрокаТаблицы.Наименование, Размер);   
		Расширение = Врег(СтрЗаменить(СтрокаТаблицы.Расширение, ".", "")); 
			
		Если ИконокиФайлов.Найти(Расширение) = Неопределено Тогда
			Иконка = "EMPTY.SVG";
		Иначе                  
			Иконка = Врег(Расширение) + ".SVG";
		КонецЕсли;
		
		СтрокаТрудозатраты = СтрШаблон(ШаблоныHTML.Строка,     
			XMLСтрока(СтрокаТаблицы.Ссылка),
			КорневойURL,
			Иконка,     
			ИмяФайла,
			СтрокаТаблицы.ФИО,
			XMLСтрока(СтрокаТаблицы.Автор),
			Формат(СтрокаТаблицы.ДатаСоздания, "ДФ='dd.MM.yyyy'"),
			СтрокаТаблицы.Описание,
			?(СтрокаТаблицы.Архивный, "checked", ""));
		
		НаборСтрокHTML = НаборСтрокHTML + СтрокаТрудозатраты;
	КонецЦикла;
	
	Таблица = СтрШаблон(ШаблоныHTML.Таблица, 
		?(НЕ ОткрытоИзПланаПроекта, "hidden", ""),
		КорневойURL,
		НаборСтрокHTML,
		ПредставлениеМаксимальногоРазмера);       
	
	ТекстHTML = СтрШаблон(ШаблоныHTML.Общий, 
		Таблица, 
		?(НЕ РазрешениеУдаление, "display: none", ""),
		?(НЕ РазрешениеАрхивирование, "pointer-events:none", ""),
		КорневойURL);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросУдаленияФайлов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПометитьНаУдалениеФайлыНаСервере(ДополнительныеПараметры.УдаляемыеФайлы);
		Оповестить(СобытияОповещенияКлиент.ИмяСобытияОбновленияКоличестваФайлов(), Владелец);
	КонецЕсли;
	
	ОбновитьСписокПрисоединенныхФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКомандуПоляHTML(Команда) 
	
	Если СтрНайти(Команда, "#new") > 0 Тогда 
		
		ПараметрыЗагрузки = РаботаСФайламиКлиент.ПараметрыДобавленияФайлов();
		ПараметрыЗагрузки.Владелец           = Владелец;
		ПараметрыЗагрузки.МножественныйВыбор = Истина;	
		ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
		
		РаботаСФайламиКлиент.ДобавитьФайлы(ПараметрыЗагрузки);
		
	ИначеЕсли СтрНайти(Команда, "#select") > 0 Тогда        
		
		ВыбираемыеФайлы = ВыделенныеФайлы(Истина);
		
		Если ВыбираемыеФайлы.Количество() > 0 Тогда 
			Ссылка = ВыбираемыеФайлы[0];
			Наименование = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Ссылка, "ОригинальноеИмя");
			ДанныеВыбора = Новый Структура("Ссылка, Наименование", Ссылка, Наименование);
			Закрыть(ДанныеВыбора);
		КонецЕсли;
		
	ИначеЕсли СтрНайти(Команда, "#all_delete") > 0 Тогда        
		
		УдаляемыеФайлы = ВыделенныеФайлы(Истина);
			
		Если УдаляемыеФайлы.Количество() > 0 Тогда 
			ПараметрыОповещения = Новый Структура("УдаляемыеФайлы", УдаляемыеФайлы);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросУдаленияФайлов", ЭтотОбъект, ПараметрыОповещения);
			
			ПоказатьВопрос(ОписаниеОповещения, "Выбранные файлы будут удалены. Продолжить?", 
				РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Удаление присоединенных файлов");
		КонецЕсли;
			
	ИначеЕсли СтрНайти(Команда, "#download_selected") > 0
		ИЛИ СтрНайти(Команда, "#download_all") > 0 Тогда          
		
		СкачатьВыбранные = СтрНайти(Команда, "#download_selected") > 0;
		СкачиваемыеФайлы =  ВыделенныеФайлы(СкачатьВыбранные);
	
		Если СкачиваемыеФайлы.Количество() > 0 Тогда
			СкачатьФайлы(СкачиваемыеФайлы, НЕ СкачатьВыбранные);
		КонецЕсли;
			
	ИначеЕсли СтрНайти(Команда, "#download-") > 0 Тогда        
		
		СкачиваемыеФайлы = Новый Массив;  
		СкачиваемыеФайлы.Добавить(Команда);
		
		Если СкачиваемыеФайлы.Количество() > 0 Тогда
			СкачиваемыеФайлы = ПолучитьЗначения(СкачиваемыеФайлы);
			СкачатьФайлы(СкачиваемыеФайлы);
		КонецЕсли;
	ИначеЕсли СтрНайти(Команда, "#delete-") > 0 Тогда
		
		УдаляемыеФайлы = Новый Массив;  
		УдаляемыеФайлы.Добавить(Команда);
		
		Если УдаляемыеФайлы.Количество() > 0 Тогда
			ПараметрыОповещения = Новый Структура("УдаляемыеФайлы", ПолучитьЗначения(УдаляемыеФайлы));
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросУдаленияФайлов", ЭтотОбъект, ПараметрыОповещения);
			
			ПоказатьВопрос(ОписаниеОповещения, "Выбранный файл будет удален. Продолжить?", 
				РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Удаление присоединенных файлов");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьHTMLШаблоны()
	
	ШаблоныHTML = Новый Структура;	
	
	ТекстHTML = 
	"<html>
	|	<head>
	|		<meta http-equiv='Content-Type' content='text/html; charset=utf-8'/> 
	|		<link rel='stylesheet' href='%4/assets/css/styles.css?v2' charset='utf-8'>
	|		<style type='text/css'>
	|			main {
	|				max-height: calc(100%% - 72px);
	|				overflow: auto;
	|				border: 1px solid var(--hover-color);
	|				border-radius: 8px;
	|			}
	|			body > div > p {
	|				margin: 0;
	|				padding: 4px 8px;
	|			}
	|			table {
	|				width:100%%;
	|				border-collapse: separate;
	|				border-spacing: 0;
	|			}
	|			a {
	|				text-decoration: none;   
	|			}
	|			.a_text {
	|				color: Var(--text-color);   
	|			}
	|			.autor>a {
	|				color: var(--href-color);
	|			}
	|			thead {
	|				height:47px;
	|				color: #8C8C8C;
	|				background-color: var(--main-color);
	|				font-weight: 700;
	|				position: sticky;
	|				top: 0;
	|				}
	|			.trow {
	|				height:37px;
	|				font-weight: 400;
	|				}
	|			.trow > td {
	|				border-top: 1px solid var(--hover-color);
	|			}
	|			.autor,.created {			
	|				padding: 5px 5px 5px 5px;
	|				width: 11%%;
	|				vertical-align: middle;
	|			}
	|			.archive {			
	|				padding: 5px 5px 5px 5px;
	|				width: 5%%;
	|				vertical-align: middle;  
	|               text-align: center;
	|               %3;
	|			}
	|			img {			
	|				vertical-align: middle;
	|			}
	|			.ui-bar img {			
	|				height: 32px;
	|			}
	|			.file,.describe {			
	|				padding: 5px 5px 5px 5px;
	|				width: 36%%;
	|				vertical-align: middle;
	|			}
	|			.button  a {	
	|				padding:10px 10px 10px 0px;
	|			}
	|			.button  {	
	|				width: 24px;
	|			}
	|			.button_delete  {	
	|				%2;
	|			}
	|			.href {
	|				text-align:center; 
	|				width: 24px;
	|			}	
	|			.describe_input {
	|				text-decoration: none;
	|				border-style: none;
	|				font-size: inherit;
	|				width: 100%%;
	|				resize: none; 
	|				rows: 1;     
	|				outline: none;
	|			}	
	|		    .dropdown-content {
	|				display: none;
	|				position: absolute;
	|				background-color: var(--main-color);
	|				min-width: 200px;
	|				box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
	|				z-index: 1;
	|				}  
	|            .dropdown {
	|				position: relative;
	|				display: inline-block;
	|				align-items: center;
	|				}	
	|			.dropdown-content a {
	|				font-family: inherit;
	|				color: black;
	|				padding: 12px 16px;
	|				display: block;
	|				}	
	|			.dropdown-content a:hover {background-color: #ddd;}
	|
	|			.dropdown:hover .dropdown-content {display: block;}  
	|           input[type='checkbox' i]  {width: 15; height: 15px}
	|		</style> 
	|		<script>
	|			let text;
	|			function toggle(source) {
	|		 	 checkboxes = document.getElementsByClassName('checkbox');
	|		 	 for(var x=0; x < checkboxes.length; x++) 
	|		 	 {
	|				checkboxes[x].checked = source.checked;}
	|		 	 }  
	|			function returnChecked(type) {
	|				returnValue = [];
	|				checkboxes = document.getElementsByClassName('checkbox');
	|		 		for(var x=0; x < checkboxes.length; x++) 
	|		 		{
	|					if (checkboxes[x].checked == true || type == 0) 
	|					{returnValue.push(checkboxes[x].name);}
	|				}
	|				return JSON.stringify(returnValue);
	|			}   
	|			function archiveClick(name) {  
	|               returnValue = false;
	|				checkboxes = document.getElementsByName(name);
	|		 		for(var x=0; x < checkboxes.length; x++) 
	|		 		{
	|					returnValue = checkboxes[x].checked;
	|				};
	|				return returnValue;
	|			}  
	|			function describe(source) {  
	|			   if (source.value  == '') 
	|					{text = '';}
	|              else {
	|					Value = new Map();
	|			   		Value['name'] = source.name;
	|			   		Value['text'] = source.value;
	|				
	|			   		text = JSON.stringify(Value);			   
	|				}
	|			}
	|			function get_describe(source) {  
	|              returnValue = text;
	|			   text = '';
	|				
	|			   return returnValue;			   
	|			}  
	|			function EnterPress(event) {
	| 				if (event.keyCode === 13) {
	|					event.preventDefault();
	|					event.target.blur();
	|					event.target.click();
	|				}
	|			}
	|		</script>
	|	</head>
	|<body>
	|	<div style='height:100%%;'>
	|		%1
	|	</div>
	|</body>
	|</html>";
	
	ШаблоныHTML.Вставить("Общий", ТекстHTML);
		
	ТекстHTML = 
	"	<nav>
	|		<button type='button' %1> <a href='#select' style = 'color: #333333;'> Выбрать файл </a></button>
	|		<button type='button' > <a href='#new' class='icon add-icon'> </a></button>
	|		<button type='button' class = 'button_delete'>  <a href='#all_delete' class='icon trash-icon'> </a></button>
	|		<span class='dropdown' >
	|			<button type='button'> <img src='%2/assets/img/arrow-down-circle-black.svg' class='icon'/></button>
	|			<div class='dropdown-content'>
	|				<a href='#download_selected'>Выбранные файлы</a>
	|				<a href='#download_all'>Все файлы одним архивом</a>
	|			</div>
	|		</span>                        
	|	</nav>
	|	<main>
	|		<table>
	|			<thead>
	|				<tr>
	|					<td><input type='checkbox' onClick='toggle(this)'/></td>
	|					<td class='file'>Файл</td>
	|					<td class='autor'>Автор</td>
	|					<td class='created'>Создан</td>
	|					<td class='describe'>Описание</td>
	|					<td class='archive'>Архивный</td>
	|					<td class='button button_delete'>&nbsp;</td>
	|				</tr>	
	|			</thead>
	|			<tbody>
	|				%3
	|			</tbody>
	|		</table>
	|	</main>
	|	<p>Размер файла не должен превышать %4</p>";	
	
	ШаблоныHTML.Вставить("Таблица", ТекстHTML); 	
	
	ТекстHTML = 	
	"<tr class='trow'>
	|	<td><input type='checkbox' class = 'checkbox' name = 'checkbox_%1'/></td>
	|	<td class='file'>
	|		<div class='ui-bar'>
	|			<img src='%2/assets/css/files/%3'/><a class = 'a_text' href='#download-%1'>  %4</a>
	|		</div>
	|	</td>
	|	<td class='autor'><a title='%5' href='sdms_user_%6'>%5</a></td>
	|	<td class='created'>%7</td>
	|	<td class='describe'><input type='text' class = 'describe_input' value = '%8' name = 'describe_%1' onBlur='describe(this)' onkeyup='EnterPress(event)'></td>
	|	<td class='archive'><input class = 'checkbox_arc' type='checkbox' name = 'checkbox_arc_%1' %9/></td>
	|	<td class='button_delete'>
	|		<div class='href'>
	|			<a href='#delete-%1' >
	|				<img src='%2/assets/img/trash.svg'/>
	|			</a>
	|		</div>
	|	</td>
	|</tr>";     
	
	ШаблоныHTML.Вставить("Строка", ТекстHTML);
	
	Возврат ШаблоныHTML;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначения(Массив) 
	
	НовыйМассив = Новый Массив;
	
	Для Каждого Строка Из Массив Цикл  
		УникальныйИдентификаторСсылки = Прав(Строка, 36);		
		НовыйМассив.Добавить(XMLЗначение(Тип("СправочникСсылка.Файлы"), УникальныйИдентификаторСсылки));
	КонецЦикла; 
	
	Возврат НовыйМассив;
	
КонецФункции

&НаСервере
Функция ПолучитьЗначенияИзJSON(СтрокаJSON) 
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(СтрокаJSON);
	Массив = ПрочитатьJSON(Чтение);
	Чтение.Закрыть();
	
	Возврат ПолучитьЗначения(Массив);
	
КонецФункции

&НаСервере
Процедура ПометитьНаУдалениеФайлыНаСервере(Файлы)
			
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.Ссылка В(&Ссылки)";
	
	Запрос.УстановитьПараметр("Ссылки", Файлы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ПометкаУдаления = Истина;
		СправочникОбъект.Записать();
	КонецЦикла;
	
	ЗаписатьИзмененияВИсторию(Файлы);
	ОбновитьСписокПрисоединенныхФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура СкачатьФайлы(Знач Файлы = Неопределено, Знач Архивировать = Ложь)
	
	ПараметрыСкачивания = Новый Структура;
	ПараметрыСкачивания.Вставить("Владелец", Владелец);
	ПараметрыСкачивания.Вставить("Файлы", Файлы);
	ПараметрыСкачивания.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
	ПараметрыСкачивания.Вставить("Архивировать", Архивировать);
	РаботаСФайламиКлиент.СкачатьФайлы(ПараметрыСкачивания);
		
КонецПроцедуры

#КонецОбласти
