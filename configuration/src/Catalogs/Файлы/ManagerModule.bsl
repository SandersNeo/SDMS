///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Создает новый элемент справочника и заполняет его реквизиты данными из
// переданных параметров.
//
// Параметры:
//  СвойстваФайла - Структура - структура с описанием свойств файла. Формируется
//                  функцией СвойстваФайла().
//
// Возвращаемое значение:
//  СправочникСсылка.Файлы. Ссылка на созданный элемент справочника.
//
Функция Добавить(Знач СвойстваФайла) Экспорт
	
	НовыйЭлемент = СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, СвойстваФайла, , "Ссылка");
	
	Если ЗначениеЗаполнено(СвойстваФайла.Ссылка) Тогда
		НовыйЭлемент.УстановитьСсылкуНового(СвойстваФайла.Ссылка);
	КонецЕсли;

	НовыйЭлемент.Наименование = СвойстваФайла.ИмяФайла;
	НовыйЭлемент.Записать();
	
	Возврат НовыйЭлемент.Ссылка;

КонецФункции

// Изменяет значения реквизитов у существующего элемента справочника.
//
// Параметры:
//  СвойстваФайла - Структура - структура с описанием свойств файла. Формируется
//                  функцией СвойстваФайла().
//
Процедура Изменить(Знач СвойстваФайла) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СвойстваФайла.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение "Передана некорректная ссылка на элемент справочника."
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЭлементСправочника = Выборка.Ссылка.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(ЭлементСправочника, СвойстваФайла, , "Каталог");
	
	ЭлементСправочника.Наименование = РаботаСФайламиКлиентСервер.ИмяФайлаБезРасширения(ЭлементСправочника.Наименование) 
		+ "." + СвойстваФайла.Расширение;
		
	ЭлементСправочника.Записать();
	
КонецПроцедуры

Функция НайтиЗапись(Знач Владелец, Знач ИмяФайла, Знач Назначение) Экспорт
	
	СвойстваФайла = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.Наименование КАК ИмяФайла,
	|	Файлы.ОригинальноеИмя КАК ОригинальноеИмя,
	|	Файлы.Каталог КАК Каталог
	|ИЗ
	|	РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО ПрикрепленныеФайлы.Файл = Файлы.Ссылка
	|			И (Файлы.Наименование = &ИмяФайла)
	|ГДЕ
	|	ПрикрепленныеФайлы.Объект = &Объект
	|	И ПрикрепленныеФайлы.Назначение = &Назначение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Файлы.Ссылка,
	|	Файлы.Наименование,
	|	Файлы.ОригинальноеИмя,
	|	Файлы.Каталог
	|ИЗ
	|	РегистрСведений.Комментарии КАК Комментарии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрикрепленныеФайлы КАК ПрикрепленныеФайлы
	|		ПО Комментарии.Идентификатор = ПрикрепленныеФайлы.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО (ПрикрепленныеФайлы.Файл = Файлы.Ссылка)
	|			И (Файлы.Наименование = &ИмяФайла)
	|ГДЕ
	|	Комментарии.Объект = &Объект
	|	И &Назначение В (ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.Объект), ЗНАЧЕНИЕ(Перечисление.НазначенияФайлов.ФайлыКомментария))";
	
	Запрос.УстановитьПараметр("Объект", Владелец);
	Запрос.УстановитьПараметр("Назначение", Назначение);
	Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		СвойстваФайла = СвойстваФайла();
		ЗаполнитьЗначенияСвойств(СвойстваФайла, Выборка);
	КонецЕсли;
	
	Возврат СвойстваФайла;
	
КонецФункции

// Создает и возвращает структуру со свойствами файла.
//
// Возвращаемое значение:
//  Структура.
//
Функция СвойстваФайла() Экспорт
	
	СвойстваФайла = Новый Структура;
	СвойстваФайла.Вставить("ИмяФайла", "");
	СвойстваФайла.Вставить("ОригинальноеИмя", "");
	СвойстваФайла.Вставить("Каталог", "");
	СвойстваФайла.Вставить("Размер", 0);
	СвойстваФайла.Вставить("Расширение", "");
	СвойстваФайла.Вставить("ИндексКартинки", 0);
	СвойстваФайла.Вставить("Описание", "");
	СвойстваФайла.Вставить("Высота", 0);
	СвойстваФайла.Вставить("Ширина", 0);
	СвойстваФайла.Вставить("ПолучатьИзMinio", Ложь);
	СвойстваФайла.Вставить("НовыйФайл", Ложь);
	
	// СправочникСсылка.Файлы
	СвойстваФайла.Вставить("Ссылка", Неопределено);	
	
	Возврат СвойстваФайла;
	
КонецФункции	

Процедура ПометитьЗаписиНаУдаление(Знач СписокФайлов) Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.Файлы"));
	Для Каждого Файл Из СписокФайлов Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить();
		НоваяСтрока.Ссылка = Файл.Значение;
	КонецЦикла;
	
	// Установим блокировку
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.Файлы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаЗначений;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	Блокировка.Заблокировать();
			
	Для Каждого Файл Из СписокФайлов Цикл		
		ЭлементСправочника = Файл.Значение.ПолучитьОбъект();
		ЭлементСправочника.ПометкаУдаления = Истина;
		ЭлементСправочника.Записать();		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
