///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Находит, создает при необходимости ключ очереди
//
// Параметры:
//  ВидОчереди		 - ПеречислениеСсылка.ВидыОчереди	 - Вид очереди ключа
//  ЗначенияОчереди	 - Структура							 - Структура с отбором для нахождения ключа
//  Создавать		 - Булево								 - Нужно ли создавать ключ
// 
// Возвращаемое значение:
//  Ключ - СправочникСсылка.КлючОчереди
//
Функция НайтиСоздатьКлючОчереди(Знач ВидОчереди, Знач ЗначенияОчереди, Знач Создавать = Истина) Экспорт	
	
	Отбор = ПолучитьПустойОтборКлюча();
	ЗаполнитьЗначенияСвойств(Отбор, ЗначенияОчереди);
	Отбор.ВидОчереди = ВидОчереди;
	
	ПостроительЗапроса = Новый ПостроительЗапроса; 
	ПостроительЗапроса.Текст = 
	"ВЫБРАТЬ
	|	КлючОчереди.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлючОчереди КАК КлючОчереди
	|ГДЕ
	|	НЕ КлючОчереди.ПометкаУдаления
	|{ГДЕ
	|	КлючОчереди.Ссылка.*}"; 
	ПостроительЗапроса.ЗаполнитьНастройки();    
   
	Для Каждого Реквизит Из Отбор Цикл
		ОбщегоНазначения.ПостроительЗапросаУстановитьОтбор(ПостроительЗапроса, "Ссылка." + Реквизит.Ключ,	
			ВидСравнения.Равно, Реквизит.Значение);
	КонецЦикла;  
		
	ПостроительЗапроса.Выполнить();
	Ключ = Справочники.КлючОчереди.ПустаяСсылка();
	
	Если НЕ ПостроительЗапроса.Результат.Пустой() Тогда 
		Результат = ПостроительЗапроса.Результат.Выбрать();
		Результат.Следующий();
		Ключ = Результат.Ссылка;
	ИначеЕсли Создавать Тогда
		Ключ = Справочники.КлючОчереди.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(Ключ, Отбор);
		Ключ.Записать();
		Ключ = Ключ.Ссылка;
	КонецЕсли;
	
	Возврат Ключ;
		
КонецФункции

Функция ПолучитьКлючОчереди(Объект, ВидОчереди, ЭтапКанбана = Неопределено, Филиал = Неопределено) Экспорт
	
	ЗначенияОчереди = Новый Структура;
	
	Если ВидОчереди = Перечисления.ВидыОчереди.ОчередьГруппыТестирования Тогда
		ЗначенияОчереди.Вставить("Филиал", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Филиал"));
	ИначеЕсли ВидОчереди = Перечисления.ВидыОчереди.Канбан Тогда
		Если НЕ ЗначениеЗаполнено(Филиал) Тогда
			Филиал = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Филиал");
		КонецЕсли;
		
		ЗначенияОчереди.Вставить("Филиал", Филиал);
		ЗначенияОчереди.Вставить("ЭтапКанбана", ЭтапКанбана);
	КонецЕсли;
	
	Возврат НайтиСоздатьКлючОчереди(ВидОчереди, ЗначенияОчереди);	

КонецФункции

// Получить пустой отбор ключа очереди
// 
// Возвращаемое значение:
//   Структура - Состоит из реквизитов справочника КлючОчереди
//
Функция ПолучитьПустойОтборКлюча() Экспорт
	
	Отбор = Новый Структура;
	Для Каждого Реквизит Из Метаданные.Справочники.КлючОчереди.Реквизиты Цикл
		Отбор.Вставить(Реквизит.Имя, Реквизит.Тип.ПривестиЗначение());
	КонецЦикла;                   
	
	Возврат Отбор;
	
КонецФункции 

// Формирует строковое представление ключа
//
// Параметры:
//  Ключ - Справочник.КлючОчереди	 - Ключ очереди
// 
// Возвращаемое значение:
//  Строка - Представление ключа
//
Функция СформироватьПредставлениеКлюча(Ключ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлючОчереди.ВидОчереди КАК ВидОчереди,
	|	КлючОчереди.ГруппаЗаказчиков КАК ГруппаЗаказчиков,
	|	КлючОчереди.Продукт КАК Продукт,
	|	КлючОчереди.Система КАК Система,
	|	КлючОчереди.Филиал КАК Филиал
	|ИЗ
	|	Справочник.КлючОчереди КАК КлючОчереди
	|ГДЕ
	|	КлючОчереди.Ссылка = &Ссылка"; 
	
	Запрос.УстановитьПараметр("Ссылка", Ключ);
	Выборка = Запрос.Выполнить().Выбрать();
	МассивЭлементов = Новый Массив;   
	Выборка.Следующий();
	
	Если Выборка.ВидОчереди = Перечисления.ВидыОчереди.НаправлениеСистема Тогда   
		МассивЭлементов.Добавить(Выборка.Система);
	ИначеЕсли Выборка.ВидОчереди = Перечисления.ВидыОчереди.НаправлениеСистемаГруппаЗаказчиков Тогда   
		МассивЭлементов.Добавить(Выборка.Система);
		
		Если ЗначениеЗаполнено(Выборка.ГруппаЗаказчиков) Тогда
			МассивЭлементов.Добавить(Выборка.ГруппаЗаказчиков);
		КонецЕсли;
	ИначеЕсли Выборка.ВидОчереди = Перечисления.ВидыОчереди.ПродуктСистема Тогда   
		МассивЭлементов.Добавить(Выборка.Продукт);
		МассивЭлементов.Добавить(Выборка.Система);		
	ИначеЕсли Выборка.ВидОчереди = Перечисления.ВидыОчереди.Продукт Тогда   
		МассивЭлементов.Добавить(Выборка.Продукт);
	ИначеЕсли Выборка.ВидОчереди = Перечисления.ВидыОчереди.Филиал Тогда   
		МассивЭлементов.Добавить(Выборка.Филиал);
	КонецЕсли;
	
	Представление = СтрШаблон("%1 (%2)", СтрСоединить(МассивЭлементов, ", "), Выборка.ВидОчереди);  	
	
	Возврат Представление;
	
КонецФункции

// Удаляет дубли ключей и заменяет из в регистре, если надо
//
Процедура УдалитьДублиКлючей() Экспорт
	
	ИмяСобытия = "Удаление дублей ключей очереди";
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение,,, "Начало");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлючОчереди.ВидОчереди КАК ВидОчереди,
	|	КлючОчереди.ГруппаЗаказчиков КАК ГруппаЗаказчиков,
	|	КлючОчереди.Направление КАК Направление,
	|	КлючОчереди.Продукт КАК Продукт,
	|	КлючОчереди.Система КАК Система,
	|	КлючОчереди.Филиал КАК Филиал,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КлючОчереди.Ссылка) КАК Ссылка
	|ИЗ
	|	Справочник.КлючОчереди КАК КлючОчереди
	|
	|СГРУППИРОВАТЬ ПО
	|	КлючОчереди.ВидОчереди,
	|	КлючОчереди.ГруппаЗаказчиков,
	|	КлючОчереди.Направление,
	|	КлючОчереди.Продукт,
	|	КлючОчереди.Система,
	|	КлючОчереди.Филиал
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КлючОчереди.Ссылка) > 1";  
	
	Выборка = Запрос.Выполнить().Выбрать();   
	
	ЗапросКлючей = Новый Запрос();
	ЗапросКлючей.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КлючОчереди.Ссылка КАК Ссылка,
	|	НЕ ЕСТЬNULL(ОчередиЗаявок.Заявка, СохраненныеПорядкиЗаявок.Заявка) ЕСТЬ NULL КАК ЕстьЗаявка
	|ИЗ
	|	Справочник.КлючОчереди КАК КлючОчереди
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиЗаявок КАК ОчередиЗаявок
	|		ПО (ОчередиЗаявок.КлючОчередиОбъекта = КлючОчереди.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СохраненныеПорядкиЗаявок КАК СохраненныеПорядкиЗаявок
	|		ПО (СохраненныеПорядкиЗаявок.КлючОчередиОбъекта = КлючОчереди.Ссылка)
	|ГДЕ
	|	КлючОчереди.ВидОчереди = &ВидОчереди
	|	И КлючОчереди.ГруппаЗаказчиков = &ГруппаЗаказчиков
	|	И КлючОчереди.Направление = &Направление
	|	И КлючОчереди.Продукт = &Продукт
	|	И КлючОчереди.Система = &Система
	|	И КлючОчереди.Филиал = &Филиал";
	
	Пока Выборка.Следующий() Цикл     
		
		ЗапросКлючей.Параметры.Вставить("ВидОчереди", Выборка.ВидОчереди);
		ЗапросКлючей.Параметры.Вставить("ГруппаЗаказчиков", Выборка.ГруппаЗаказчиков);
		ЗапросКлючей.Параметры.Вставить("Направление", Выборка.Направление);
		ЗапросКлючей.Параметры.Вставить("Продукт", Выборка.Продукт);
		ЗапросКлючей.Параметры.Вставить("Система", Выборка.Система);
		ЗапросКлючей.Параметры.Вставить("Филиал", Выборка.Филиал);
		
		РезультатКлючи = ЗапросКлючей.Выполнить();		
		НачатьТранзакцию();
		
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОчередиЗаявок");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = РезультатКлючи;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КлючОчередиОбъекта", "Ссылка"); 
			БлокировкаДанных.Заблокировать();  
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.СохраненныеПорядкиЗаявок");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = РезультатКлючи;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КлючОчередиОбъекта", "Ссылка"); 
			БлокировкаДанных.Заблокировать();
					
			ВыборкаКлючи = РезультатКлючи.Выбрать(); 
			Эталон = Неопределено;
			
			Пока ВыборкаКлючи.Следующий() Цикл  
				
				Если Эталон = Неопределено Тогда
					Эталон = ВыборкаКлючи.Ссылка;
					Продолжить;
				КонецЕсли;                       
				
				Если ВыборкаКлючи.ЕстьЗаявка Тогда  
					ЗаменитьКлючи(РегистрыСведений.ОчередиЗаявок, ВыборкаКлючи, Эталон);
					ЗаменитьКлючи(РегистрыСведений.СохраненныеПорядкиЗаявок, ВыборкаКлючи, Эталон);
				КонецЕсли;
				
				ОбъектКлюч = ВыборкаКлючи.Ссылка.ПолучитьОбъект();
				ОбъектКлюч.Удалить();				
			КонецЦикла;          
			ЗафиксироватьТранзакцию();
		Исключение         
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());		
			ОтменитьТранзакцию();
		КонецПопытки;		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение,,, "Конец");
	
КонецПроцедуры      

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаменитьКлючи(Менеджер, ВыборкаКлючи, Эталон)  
	
	НаборСтарый = Менеджер.СоздатьНаборЗаписей();
	НаборСтарый.Отбор.КлючОчередиОбъекта.Установить(ВыборкаКлючи.Ссылка);
	НаборСтарый.Прочитать(); 
	
	Если НаборСтарый.Количество() > 0 Тогда 
		НаборНовый = Менеджер.СоздатьНаборЗаписей();
		НаборНовый.Отбор.КлючОчередиОбъекта.Установить(Эталон);		
		ТЗ = НаборСтарый.Выгрузить();
		ТЗ.ЗаполнитьЗначения(Эталон, "КлючОчередиОбъекта");
		НаборНовый.Загрузить(ТЗ);                          			
		
		НаборСтарый.Очистить();
		НаборСтарый.Записать();
		НаборНовый.Записать(Ложь); 
	КонецЕсли; 
	
КонецПроцедуры  

#КонецОбласти
