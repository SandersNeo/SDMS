///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСпискиУслуг();
	
	// Установка фокуса на строку поиска
	ЭтотОбъект.ТекущийЭлемент = Элементы.СтрокаПоиска; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СтрокаПоискаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	 УстановитьВидимостьРекурсивно(Истина, ПолучитьУслугиПоСтрокеПоиска(Текст), ДоступныеУслуги.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)

	 УстановитьВидимостьРекурсивно(Истина, ПолучитьУслугиПоСтрокеПоиска(СтрокаПоиска), ДоступныеУслуги.ПолучитьЭлементы());
		
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьВидимостьРекурсивно(Ложь, Новый Массив, ДоступныеУслуги.ПолучитьЭлементы());
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий таблицы "ВыбранныеУслуги"

&НаКлиенте
Процедура ВыбранныеУслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ВыбранныеУслугиИсключить" Тогда
		НайденнаяСтрока = ВыбранныеУслуги.НайтиПоИдентификатору(ВыбраннаяСтрока);		
		ИсключитьУслугу(НайденнаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий таблицы "ДоступныеУслуги"

&НаКлиенте
Процедура ДоступныеУслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	Если Поле.Имя = "ДоступныеУслугиНаименование" Тогда
		НайденнаяСтрока = ДоступныеУслуги.НайтиПоИдентификатору(ВыбраннаяСтрока);
		НайденнаяСтрока.Пометка = НЕ НайденнаяСтрока.Пометка;	
		ОбработатьИзменениеСтрокиДоступныхУслуг(НайденнаяСтрока);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеУслугиПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДоступныеУслуги.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		
		Если ТекущиеДанные.Пометка = 2 Тогда
			ТекущиеДанные.Пометка = 0;
		КонецЕсли;   
		
		Для Каждого Строка Из ТекущиеДанные.ПолучитьЭлементы() Цикл  
			Если НЕ Строка.Скрыть Тогда	
				Строка.Пометка = ТекущиеДанные.Пометка;
				ОбработатьИзменениеСтрокиДоступныхУслуг(Строка, ТекущиеДанные.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОбработатьИзменениеСтрокиДоступныхУслуг(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗавершитьВыбор(Команда)
	
	ВозвращаемыеУслуги = Новый СписокЗначений;
	
	Если ВыбранныеУслуги.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из ВыбранныеУслуги Цикл
			ВозвращаемыеУслуги.Добавить(СтрокаТаблицы.Услуга, СтрокаТаблицы.Наименование);
		КонецЦикла;
		
		ВозвращаемыеУслуги.СортироватьПоПредставлению();
	КонецЕсли;	
	
	ОповеститьОВыборе(ВозвращаемыеУслуги);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкуДоступных(Команда)
	
	Пометка = (Команда.Имя = "ОтметитьВсех");
	ИзменитьПометкуДоступныхУслугРекурсия(ДоступныеУслуги.ПолучитьЭлементы(), Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкуДоступныхУслугРекурсия(Строки, Пометка)
	
	Для Каждого СтрокаТаблицы Из Строки Цикл  
		Если СтрокаТаблицы.ЭтоГруппа Тогда 
			ИзменитьПометкуДоступныхУслугРекурсия(СтрокаТаблицы.ПолучитьЭлементы(), Пометка); 
			ПроставитьПометкуПоПодчиненным(СтрокаТаблицы);
		Иначе
			Если СтрокаТаблицы.Пометка <> Пометка Тогда
				Если Пометка Тогда
					ДобавитьУслугу(СтрокаТаблицы);
				Иначе
					ИсключитьУслугу(СтрокаТаблицы);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПоиск(Команда)
	
	СтрокаПоиска = "";
	УстановитьВидимостьРекурсивно(Ложь, Новый Массив, ДоступныеУслуги.ПолучитьЭлементы());
	ПодключитьОбработчикОжидания("ОчиститьТекстРедактирования", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Управление услугами в списках

&НаКлиенте
Процедура ДобавитьУслугу(СтрокаТаблицы, ТекущийРодитель = Неопределено)
	НайденныеСтроки = ВыбранныеУслуги.НайтиСтроки(Новый Структура("Услуга", СтрокаТаблицы.Услуга));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрокаВыбранных = ВыбранныеУслуги.Добавить();
		НоваяСтрокаВыбранных.Исключить = БиблиотекаКартинок.УдалитьЗначение; 
		ЗаполнитьЗначенияСвойств(НоваяСтрокаВыбранных, СтрокаТаблицы, "Услуга, Наименование");	
		ВыбраннаяСтрока = НоваяСтрокаВыбранных.ПолучитьИдентификатор();                                   
	Иначе
		ВыбраннаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();                                   
	КонецЕсли;
	
	МассивСтрок = КэшСтрок.НайтиСтроки(Новый Структура("Ключ", СтрокаТаблицы.Услуга));
	
	Для Каждого Строка Из МассивСтрок Цикл 
		Строка.ИдентификаторСтрокиСписка = ВыбраннаяСтрока;
		СтрокаДоступных = ДоступныеУслуги.НайтиПоИдентификатору(Строка.Значение);
		СтрокаДоступных.Пометка = Истина;           
		Родитель = СтрокаДоступных.ПолучитьРодителя(); 
		
		// Если указан текущий родитель, значит не нужно пересчитывать.
		Если Родитель <> Неопределено  И ТекущийРодитель <> Родитель.ПолучитьИдентификатор() Тогда
			ПроставитьПометкуПоПодчиненным(Родитель);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьУслугу(СтрокаТаблицы, ТекущийРодитель = Неопределено)

	Найденные = ВыбранныеУслуги.НайтиСтроки(Новый Структура("Услуга", СтрокаТаблицы.Услуга));
	
	Если Найденные.Количество() > 0 Тогда                                                    
		ВыбраннаяСтрока = Найденные[0].ПолучитьИдентификатор();
		МассивСтрок = КэшСтрок.НайтиСтроки(Новый Структура("ИдентификаторСтрокиСписка", ВыбраннаяСтрока));
		
		Для Каждого Строка Из МассивСтрок Цикл 
			
			Строка.ИдентификаторСтрокиСписка = -1;
			СтрокаДоступных = ДоступныеУслуги.НайтиПоИдентификатору(Строка.Значение);
			СтрокаДоступных.Пометка = Ложь; 
			Родитель = СтрокаДоступных.ПолучитьРодителя(); 
			
			// Если указан текущий родитель, значит не нужно пересчитывать.
			Если Родитель <> Неопределено  И ТекущийРодитель <> Родитель.ПолучитьИдентификатор() Тогда
				ПроставитьПометкуПоПодчиненным(Родитель);
			КонецЕсли;			
		КонецЦикла;			
		
		ВыбранныеУслуги.Удалить(ВыбранныеУслуги.НайтиПоИдентификатору(ВыбраннаяСтрока));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСтрокиДоступныхУслуг(СтрокаТаблицы, ТекущийРодитель = Неопределено)
	
	Если СтрокаТаблицы.Пометка = Истина Тогда
		ДобавитьУслугу(СтрокаТаблицы, ТекущийРодитель);	
	Иначе
		ИсключитьУслугу(СтрокаТаблицы, ТекущийРодитель);	
	КонецЕсли;			
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкуПоПодчиненным(Строка)   
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МаксПометка = 0;
	МинПометка = 1;
	
	Для Каждого Элемент Из Строка.ПолучитьЭлементы() Цикл 
		МаксПометка = Макс(МаксПометка, Элемент.Пометка);
		МинПометка = Мин(МинПометка, Элемент.Пометка);
	КонецЦикла;
	
	Строка.Пометка = ?(МинПометка = МаксПометка, МаксПометка, 2);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВКэш(КэшСтрок, Ключ, Значение, ИдентификаторСтрокиСписка)
	
	НоваяСтрока = КэшСтрок.Добавить();	
	НоваяСтрока.Ключ = Ключ;	
	НоваяСтрока.Значение = Значение;	
	НоваяСтрока.ИдентификаторСтрокиСписка = ИдентификаторСтрокиСписка;

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьСпискиУслуг()
	
	ВыбранныеУслуги.Очистить();
	ДоступныеУслуги.ПолучитьЭлементы().Очистить();
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ИСТИНА КАК Пометка,
	|	Услуги.Ссылка КАК Услуга,
	|	Услуги.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Услуги КАК Услуги
	|ГДЕ
	|	Услуги.Ссылка В (&ВыбранныеУслуги)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	Услуги.Ссылка,
	|	Услуги.Наименование
	|ИЗ
	|	Справочник.Услуги КАК Услуги
	|ГДЕ
	|	НЕ Услуги.ПометкаУдаления
	|	И НЕ Услуги.Ссылка В (&ВыбранныеУслуги)
	|ИТОГИ
	|	МАКСИМУМ(Пометка),
	|	МАКСИМУМ(Наименование)
	|ПО
	|	Услуга ТОЛЬКО ИЕРАРХИЯ";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ВыбранныеУслуги", Параметры.ВыбранныеУслуги);
		
	ВыборкаРодитель = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаРодитель.Следующий() Цикл  
		
		СтрокаРодитель = ДоступныеУслуги.ПолучитьЭлементы().Добавить(); 
		СтрокаРодитель.Наименование = ВыборкаРодитель.Наименование;
		СтрокаРодитель.Пометка = ВыборкаРодитель.Пометка;
		СтрокаРодитель.ЭтоГруппа = Истина;
		ДобавитьВКэш(КэшСтрок, ВыборкаРодитель.Услуга, СтрокаРодитель.ПолучитьИдентификатор(), -1);
		Родитель = СтрокаРодитель.ПолучитьЭлементы(); 
		
		Выборка = ВыборкаРодитель.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Услуга = ВыборкаРодитель.Услуга Тогда
				Продолжить;
			КонецЕсли;
			
			// Заполнение общей таблицы услуг
			НоваяСтрокаДоступных = Родитель.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДоступных, Выборка);
			
			Если Выборка.Пометка Тогда 
				Отбор = Новый Структура("Услуга", Выборка.Услуга); 
				Найденные = ВыбранныеУслуги.НайтиСтроки(Отбор);
				
				Если Найденные.Количество() = 0 Тогда
					НоваяСтрокаВыбранных = ВыбранныеУслуги.Добавить();
					НоваяСтрокаВыбранных.Исключить = БиблиотекаКартинок.УдалитьЗначение;	
					ИдентификаторСтрокиСписка = НоваяСтрокаВыбранных.ПолучитьИдентификатор();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаВыбранных, Выборка, "Услуга, Наименование");  
				Иначе
					ИдентификаторСтрокиСписка = Найденные[0].ПолучитьИдентификатор();	
				КонецЕсли;
			КонецЕсли; 
			
			ДобавитьВКэш(КэшСтрок, НоваяСтрокаДоступных.Услуга, НоваяСтрокаДоступных.ПолучитьИдентификатор(),
			 	ИдентификаторСтрокиСписка);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекстРедактирования() Экспорт 
	
	Элементы.СтрокаПоиска.ОбновитьТекстРедактирования();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьУслугиПоСтрокеПоиска(СтрокаПоиска) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Услуги.Ссылка КАК Услуга
	|ИЗ
	|	Справочник.Услуги КАК Услуги
	|ГДЕ
	|	НЕ Услуги.ПометкаУдаления
	|	И Услуги.Наименование ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", "%" + СтрокаПоиска + "%");
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Услуга");

КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьРекурсивно(Скрыть, МассивВидимых, Строки, МаксСкрыть = Ложь)
	
	Для Каждого Строка Из Строки Цикл
		Если Строка.ЭтоГруппа Тогда 
			МаксСкрыть = Скрыть;
			УстановитьВидимостьРекурсивно(Скрыть, МассивВидимых, Строка.ПолучитьЭлементы(), МаксСкрыть);	
			Строка.Скрыть = МаксСкрыть; 
		Иначе           
			Если МассивВидимых.Найти(Строка.Услуга) <> Неопределено Тогда 
				Строка.Скрыть = НЕ Скрыть;
				МаксСкрыть = Строка.Скрыть;
			Иначе
				Строка.Скрыть = Скрыть;
			КонецЕсли;	
		КонецЕсли;                       
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
