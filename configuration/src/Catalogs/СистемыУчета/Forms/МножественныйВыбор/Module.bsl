///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка общего условного оформления для окон данного вида
	ИнтерфейсПриложения.УстановитьУсловноеОформлениеСпискаДоступныхЗначений(
		ЭтотОбъект, "ДоступныеСистемы.Избранное", "ДоступныеСистемыНаименование");
	
	ЗаполнитьСпискиСистем();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СтрокаПоискаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	// Установка отбора на основании значения в строке поиска
	ИнтерфейсПриложенияКлиент.УстановитьОтборПриИзмененииСтрокиПоиска(
		ЭтотОбъект, "ДоступныеСистемы", Текст, "Наименование");	
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	ИнтерфейсПриложенияКлиент.СброситьПоиск(ЭтотОбъект, "ДоступныеСистемы");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий таблицы "ВыбранныеСистемы"

&НаКлиенте
Процедура ВыбранныеСистемыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ВыбранныеСистемыИсключить" Тогда
		НайденнаяСтрока = ВыбранныеСистемы.НайтиПоИдентификатору(ВыбраннаяСтрока);
		НайденнаяСтрока = ДоступныеСистемы.НайтиПоИдентификатору(НайденнаяСтрока.ИдентификаторСтрокиСписка);
		
		ИсключитьСистему(НайденнаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий таблицы "ДоступныеСистемы"

&НаКлиенте
Процедура ДоступныеСистемыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДоступныеСистемыНаименование" Тогда
		НайденнаяСтрока = ДоступныеСистемы.НайтиПоИдентификатору(ВыбраннаяСтрока);
		НайденнаяСтрока.Пометка = НЕ НайденнаяСтрока.Пометка;
		
		ОбработатьИзменениеСтрокиДоступныхСистем(НайденнаяСтрока);
		
	ИначеЕсли Поле.Имя = "ДоступныеСистемыИзбранное" Тогда
		ПриИзмененииПометкиИзбранного(ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеСистемыПометкаПриИзменении(Элемент)
	
	ОбработатьИзменениеСтрокиДоступныхСистем(Элементы.ДоступныеСистемы.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗавершитьВыбор(Команда)
	
	ВозвращаемыеСистемы = Новый СписокЗначений;
	
	Если ВыбранныеСистемы.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из ВыбранныеСистемы Цикл
			ВозвращаемыеСистемы.Добавить(СтрокаТаблицы.Система, СтрокаТаблицы.Наименование);
		КонецЦикла;
		
		ВозвращаемыеСистемы.СортироватьПоПредставлению();
	КонецЕсли;	
	
	Закрыть(ВозвращаемыеСистемы);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкуДоступныхСистем(Команда)
	
	Пометка = (Команда.Имя = "ОтметитьВсеСистемы");
	
	Для Каждого СтрокаТаблицы Из ДоступныеСистемы Цикл
		Если СтрокаТаблицы.Пометка <> Пометка Тогда
			Если Пометка Тогда
				ДобавитьСистему(СтрокаТаблицы);
			Иначе
				ИсключитьСистему(СтрокаТаблицы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьИзбранные(Команда)
	
	Для Каждого СтрокаТаблицы Из ДоступныеСистемы Цикл
		Если СтрокаТаблицы.Избранное Тогда
			Если НЕ СтрокаТаблицы.Пометка Тогда
				ДобавитьСистему(СтрокаТаблицы);
			КонецЕсли;
		Иначе
			Если СтрокаТаблицы.Пометка Тогда
				ИсключитьСистему(СтрокаТаблицы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПоиск(Команда)
	
	ИнтерфейсПриложенияКлиент.СброситьПоиск(ЭтотОбъект, "ДоступныеСистемы");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Управление пользователями в списках

&НаКлиенте
Процедура ДобавитьСистему(СтрокаТаблицы)
	
	НоваяСтрокаВыбранных = ВыбранныеСистемы.Добавить();
	НоваяСтрокаВыбранных.Исключить = БиблиотекаКартинок.УдалитьЗначение;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрокаВыбранных, СтрокаТаблицы, "Система, Наименование");
	
	СтрокаТаблицы.Пометка = Истина;
	
	СтрокаТаблицы.ИдентификаторСтрокиСписка = НоваяСтрокаВыбранных.ПолучитьИдентификатор();
	НоваяСтрокаВыбранных.ИдентификаторСтрокиСписка = СтрокаТаблицы.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьСистему(СтрокаТаблицы)
	
	НайденнаяСтрока = ВыбранныеСистемы.НайтиПоИдентификатору(СтрокаТаблицы.ИдентификаторСтрокиСписка);
	Если НайденнаяСтрока <> Неопределено Тогда
		ВыбранныеСистемы.Удалить(НайденнаяСтрока);
	КонецЕсли;	
	
	СтрокаТаблицы.Пометка = Ложь;
	СтрокаТаблицы.ИдентификаторСтрокиСписка = -1;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСтрокиДоступныхСистем(СтрокаТаблицы)
	
	Если СтрокаТаблицы.Пометка = Истина Тогда
		ДобавитьСистему(СтрокаТаблицы);	
	Иначе
		ИсключитьСистему(СтрокаТаблицы);	
	КонецЕсли;			
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

&НаСервере
Процедура ЗаполнитьСпискиСистем()
	
	ВыбранныеСистемы.Очистить();
	ДоступныеСистемы.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ИзбранныеСистемы.Объект КАК Справочник.СистемыУчета) КАК Система
	|ПОМЕСТИТЬ ИзбранныеСистемы
	|ИЗ
	|	РегистрСведений.ИзбранныеОбъекты КАК ИзбранныеСистемы
	|ГДЕ
	|	ИзбранныеСистемы.Владелец = &ТекущийПользователь
	|	И ИзбранныеСистемы.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыИзбранныхОбъектов.Системы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СистемыУчета.Ссылка КАК Система,
	|	СистемыУчета.Наименование КАК Наименование,
	|	СистемыУчета.ПометкаУдаления КАК ПометкаУдаления
	|ПОМЕСТИТЬ ТаблицаРазрабатываемыхСистем
	|ИЗ
	|	Справочник.СистемыУчета КАК СистемыУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК Пометка,
	|	ТаблицаРазрабатываемыхСистем.Система КАК Система,
	|	ТаблицаРазрабатываемыхСистем.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА ИзбранныеСистемы.Система ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Избранное
	|ПОМЕСТИТЬ ПолнаяТаблицаСистем
	|ИЗ
	|	ТаблицаРазрабатываемыхСистем КАК ТаблицаРазрабатываемыхСистем
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИзбранныеСистемы КАК ИзбранныеСистемы
	|		ПО ТаблицаРазрабатываемыхСистем.Система = ИзбранныеСистемы.Система
	|ГДЕ
	|	ТаблицаРазрабатываемыхСистем.Система В(&РазрабатываемыеСистемы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	ТаблицаРазрабатываемыхСистем.Система,
	|	ТаблицаРазрабатываемыхСистем.Наименование,
	|	ВЫБОР
	|		КОГДА ИзбранныеСистемы.Система ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|ИЗ
	|	ТаблицаРазрабатываемыхСистем КАК ТаблицаРазрабатываемыхСистем
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИзбранныеСистемы КАК ИзбранныеСистемы
	|		ПО ТаблицаРазрабатываемыхСистем.Система = ИзбранныеСистемы.Система
	|ГДЕ
	|	НЕ ТаблицаРазрабатываемыхСистем.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПолнаяТаблицаСистем.Пометка) КАК Пометка,
	|	ПолнаяТаблицаСистем.Система КАК Система,
	|	ПолнаяТаблицаСистем.Наименование КАК Наименование,
	|	МАКСИМУМ(ПолнаяТаблицаСистем.Избранное) КАК Избранное,
	|	МАКСИМУМ(-1) КАК ИдентификаторСтрокиСписка
	|ИЗ
	|	ПолнаяТаблицаСистем КАК ПолнаяТаблицаСистем
	|
	|СГРУППИРОВАТЬ ПО
	|	ПолнаяТаблицаСистем.Система,
	|	ПолнаяТаблицаСистем.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Избранное УБЫВ,
	|	Наименование";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("РазрабатываемыеСистемы", Параметры.РазрабатываемыеСистемы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			// Заполнение общей таблицы систем
			НоваяСтрокаДоступных = ДоступныеСистемы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДоступных, Выборка, "Пометка, Система, Наименование, Избранное, ИдентификаторСтрокиСписка");
			
			// Заполнение таблицы уже выбранны систем
			Если Выборка.Пометка = Истина Тогда
				НоваяСтрокаВыбранных = ВыбранныеСистемы.Добавить();
				НоваяСтрокаВыбранных.Исключить = БиблиотекаКартинок.УдалитьЗначение;
				
				НоваяСтрокаВыбранных.ИдентификаторСтрокиСписка = НоваяСтрокаДоступных.ПолучитьИдентификатор();
				НоваяСтрокаДоступных.ИдентификаторСтрокиСписка = НоваяСтрокаВыбранных.ПолучитьИдентификатор();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаВыбранных, Выборка, "Система, Наименование");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПометкиИзбранного(ВыбраннаяСтрока)
	
	НайденнаяСтрока = ДоступныеСистемы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	НайденнаяСтрока.Избранное = НЕ НайденнаяСтрока.Избранное;
	
	ОбщегоНазначенияВызовСервера.ОбработатьПометкуИзбранного(НайденнаяСтрока.Система, НайденнаяСтрока.Избранное, "Системы");
	
	// Установка фокуса на тот же номер строки
	ИндексСтроки = ДоступныеСистемы.Индекс(НайденнаяСтрока);
	
	// Пересортировка таблицы
	ДоступныеСистемы.Сортировать("Избранное УБЫВ, Наименование");
	
	КоличествоСтрок = ДоступныеСистемы.Количество();
	
	Если КоличествоСтрок > 0 Тогда
		Если КоличествоСтрок >= ИндексСтроки Тогда
			ИдентификаторСтроки = ДоступныеСистемы[ИндексСтроки].ПолучитьИдентификатор();
		Иначе
			ИдентификаторСтроки = ДоступныеСистемы[0].ПолучитьИдентификатор();
		КонецЕсли;
		
		Элементы.ДоступныеСистемы.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти
