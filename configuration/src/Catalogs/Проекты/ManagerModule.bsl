///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает список подключаемых команды панели навигации
// 
// Возвращаемое значение:
//   Список значенией - список подключаемых команды панели навигации
//
Функция КомандыПанелиНавигации() Экспорт

	Команды = Новый СписокЗначений;   
	Команды.Добавить("История", "История", , БиблиотекаКартинок.ПанельНавигацииИстория);
	Команды.Добавить("Участники", "Участники", , БиблиотекаКартинок.Участники);	
	Команды.Добавить("Комментарии", "Комментарии", , БиблиотекаКартинок.Комментарии);
	Команды.Добавить("ЗаинтересованныеЛица", "Заинтересованные лица", , БиблиотекаКартинок.ЗаинтересованныеЛица);
	Команды.Добавить("МатрицаТребований", "Матрица требований", , БиблиотекаКартинок.МатрицаТребований);
	Команды.Добавить("Файлы", "Файлы", , БиблиотекаКартинок.Файлы);
	Команды.Добавить("Связи", "Связи", , БиблиотекаКартинок.Связи);
	Команды.Добавить("ПланПроекта", "План проекта", , БиблиотекаКартинок.ПланПроекта);
	Команды.Добавить("СтруктураПодчиненности", "Структура подчиненности", , БиблиотекаКартинок.СтруктураПодчиненности);
	ИнтеграцияДополнительныхПодсистем.ДобавитьКомандуРасчетПриоритета(Команды);
	
	Возврат Команды;
	
КонецФункции

Функция ПолучитьПрефикс() Экспорт
	
	Возврат "П";
	
КонецФункции

// Возвращает максимально допустимый уровень вложенности проектов
// 
// Возвращаемое значение:
//   - Число
//
Функция МаксимальныйУровеньВложенности() Экспорт
	
	Возврат 4;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИСТОРИЯ ИЗМЕНЕНИЙ ОБЪЕКТА, ОПОВЕЩЕНИЕ ПОЛЬЗОВАТЕЛЕЙ

// Возвращает структуру проверяемых данных
// 
// Возвращаемое значение:
//   - Структура
//		* Реквизиты	 - Массив	 - названия реквизитов которые требуют проверки
//		* ТабличныеЧасти	 - Структура	 - табличные части и их реквизиты которые требуют проверки.
//			Ключ - название табличной части
//			Значение - реквизит табличной части который требуется проверить
//
Функция ПроверяемыеСвойстваОбъекта() Экспорт
	
	Результат = Новый Структура("Реквизиты, ТабличныеЧасти", Новый Массив, Новый Структура);
	
	// Названия реквизитов объекта
	Результат.Реквизиты.Добавить("ДатаЗавершения");
	Результат.Реквизиты.Добавить("ДатаНачалаРазработки");
	Результат.Реквизиты.Добавить("ДатаНачалаРассмотрения");
	Результат.Реквизиты.Добавить("Куратор");
	Результат.Реквизиты.Добавить("ОбъектОснование");
	Результат.Реквизиты.Добавить("Описание");
	Результат.Реквизиты.Добавить("Порядок");
	Результат.Реквизиты.Добавить("Руководитель");
	Результат.Реквизиты.Добавить("Заказчик");
	Результат.Реквизиты.Добавить("ВидПроекта");
	Результат.Реквизиты.Добавить("Статус");
	Результат.Реквизиты.Добавить("Направление");
	Результат.Реквизиты.Добавить("ЮридическоеЛицо");
	Результат.Реквизиты.Добавить("Продукт");
	
	Возврат Результат;
	
КонецФункции

Функция АвтосохраняемыеРеквизиты() Экспорт
	
	СохраняемыеДанные = Новый Структура;
	
	СохраняемыеДанные.Вставить("РеквизитыОбъекта", Новый Массив);
	СохраняемыеДанные.Вставить("ТабличныеЧасти", Новый Структура);
	СохраняемыеДанные.Вставить("РеквизитыФормы", Новый Массив);
	
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("КороткоеНазвание");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("Наименование");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("ВидПроекта");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("Порядок");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("ОбъектОснование");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("Руководитель");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("ВидПроцесса");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("Заказчик");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("ФинансовыеЗатраты");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("ДатаПлановоеНачало");
	СохраняемыеДанные.РеквизитыОбъекта.Добавить("ДатаПлановоеОкончание");
	
	Возврат СохраняемыеДанные;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	// Для ссылочных полей на проект, ограничиваем по статусам.
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Справочники.СтатусыОбъектов.Новый);
	МассивСтатусов.Добавить(Справочники.СтатусыОбъектов.Приостановлен);
	МассивСтатусов.Добавить(Справочники.СтатусыОбъектов.Отклонен);
	МассивСтатусов.Добавить(Справочники.СтатусыОбъектов.Решен);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыОбъектов.Ссылка КАК Статус
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|ГДЕ
	|	НЕ СтатусыОбъектов.ПометкаУдаления
	|	И НЕ СтатусыОбъектов.Ссылка В (&ОграниченияСтатусов)";	
	
	Запрос.УстановитьПараметр("ОграниченияСтатусов", МассивСтатусов);
		
	МассивСтатусов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Статус");
	Параметры.Отбор.Вставить("Статус", МассивСтатусов);
		
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Код");
	Поля.Добавить("Наименование");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = СтрШаблон("Проект %1. %2", Данные.Код, Данные.Наименование);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Устанавливает ограничения использования полей в динамических списках
// справочника "Проекты".
//
// Параметры:
//  Список - ДинамическийСписок - динамический список.
Процедура УстановитьОграниченияСписка(Список) Экспорт
	
	// Поля, исключаемые из отбора
	ИсключаемыеПоля = Новый Массив;
	ИсключаемыеПоля.Добавить("Предопределенный");
	ИсключаемыеПоля.Добавить("Порядок");
	ИсключаемыеПоля.Добавить("ПометкаУдаления");
	ИсключаемыеПоля.Добавить("ИндексКартинки");
	ИсключаемыеПоля.Добавить("ИмяПредопределенныхДанных");
	ИсключаемыеПоля.Добавить("ДатаПоследнегоИзмененияПодчиненных");	
	Список.УстановитьОграниченияИспользованияВОтборе(ИсключаемыеПоля);
	
	// Поля, исключаемые из сортировки и группировки
	ИсключаемыеПоля = Новый Массив;
	ИсключаемыеПоля.Добавить("ИндексКартинки");
	ИсключаемыеПоля.Добавить("ПометкаУдаления");
	ИсключаемыеПоля.Добавить("Ссылка");
	ИсключаемыеПоля.Добавить("ДатаПоследнегоИзмененияПодчиненных");
	
	Список.УстановитьОграниченияИспользованияВПорядке(ИсключаемыеПоля);
	Список.УстановитьОграниченияИспользованияВГруппировке(ИсключаемыеПоля);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
