///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

// Хранит список реквизитов, которые должны сохраняться при автосохранении
&НаКлиенте
Перем АвтосохраняемыеРеквизиты Экспорт;

&НаКлиенте
Перем ДополнительныеСвойства Экспорт; // Структура дополнительных свойств формы

// Хранит признак неопубликованного комментария
&НаКлиенте
Перем ЕстьНеопубликованныйКомментарий Экспорт;

&НаКлиенте
Перем ИдентификаторФормы Экспорт; // Уникальный идентификатор формы без символа "-"

// Признак изменения плана проекта
&НаКлиенте
Перем ИзмененПланПроекта Экспорт;

// Хранит имя последней нажатой кнопки панели навигации
&НаКлиенте
Перем ИмяАктивнойКнопкиПанелиНавигации Экспорт;

// Для исключения ошибки "Cannot read property of undefined"
// (при записи основной формы в веб клиенте "протухают" подчиненные формы в массиве форм основного окна)
&НаКлиенте
Перем ИскатьПодчиненныеФормы Экспорт;

&НаКлиенте
Перем ЕстьИзмененныеПоказателейПриоритета Экспорт;

// Хранит дополнительные данные на время жизни формы, чтобы избежать многократных
// повторных обращений к серверу.
&НаКлиенте
Перем КэшВспомогательныхДанных;

// Хранит последнюю открытую вкладку
&НаКлиенте
Перем ПредыдущаяОткрытаяВкладка;

// Хранит положение курсора в текстовом документе для описания
&НаКлиенте
Перем ТекущееПоложениеКурсора Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПричинаИзмененияСтатуса = ОбщегоНазначения.ПолучитьПричинуИзмененияСтатуса(Объект.Ссылка, ТекущийОбъект.Статус);
	Элементы.ПричинаИзмененияСтатуса.Видимость = ЗначениеЗаполнено(ПричинаИзмененияСтатуса);
	Параметры.Свойство("ИмяОткрываемойСтраницы", ИмяОткрываемойСтраницы);
	
	ВладелецПродукта = ПолучитьВладельцаПродукта(ТекущийОбъект.Продукт);
		
	ПараметрыОграничения = РедактированиеОграничено();
	РедакторОписания.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыОграничения.ЗапрещеноРедактировать);
	ВидимостьГабаритногоПланирования();
	
	Если Элементы.ГруппаГабаритноеПланирование.Видимость Тогда
		ЭтотОбъект.ПланГабаритноеПланирование = ИнтеграцияДополнительныхПодсистем.ПолучитьПланГабаритногоПланирования(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Проверим, что если основание - проект, его статус корректен, для
	// создания подчиненных.
	Результат = ОбщегоНазначенияВызовСервера.ПроверитьСтатусПроектаНаСервере(Параметры.Основание, Отказ);
	Если НЕ Результат.РазрешеноСоздавать Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Специалист") Тогда
		Объект.Руководитель = Параметры.Специалист;
	КонецЕсли;
	
	Параметры.Свойство("ОткрытьКомментарии", ОткрытьКомментарии);
	
	ЭтоНовый = Параметры.Ключ.Пустая();
	
	Если ЭтоНовый Тогда
		ОбщегоНазначения.ЗаполнитьОбъектПервоначальнымиДанными(Объект);
		
		// Проверка уровней вложенности проекта друг в друга. Максимальный уровень не должен
		// превышать 3-х.
		РезультатПроверки = ОбщегоНазначения.УровеньВложенностиПревышен(ТипЗнч(объект.Ссылка), Объект.ОбъектОснование);
		Если РезультатПроверки.УровеньПревышен Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение);
			Возврат;
		КонецЕсли;
		
		Параметры.Свойство("ПрикрепитьКПлануПроекта", СозданоИзПлана);
		
		Объект.Филиал = ОбщегоНазначенияВызовСервера.ФилиалПользователя(Объект.Руководитель);
		СсылкаНаОбъектДляАвтосохранения = АвтосохраненияДанных.ПолучитьСсылкуНовогоОбъекта(Объект.Ссылка);
	Иначе
		// Добавление в очередь события отметки просмотренным
		РегистрыСведений.ОчередьСобытийНаОбработку.ОтметитьПросмотренным(Объект.Ссылка);
		УстановитьДоступностьИзмененияСроков();
		СсылкаНаОбъектДляАвтосохранения = Объект.Ссылка;
		
		ВладелецПродукта = ПолучитьВладельцаПродукта(Объект.Продукт);
	КонецЕсли;
	
	ОбновитьВидимостьВидаПроцесса();
	
	СоздатьЭлементыУправленияСтатусами();
	НастроитьДоступностьЭлементовУправленияСтатусами();	
	НастроитьРазрешенияПользователя();
	ВидимостьВладелецПродукта(Элементы.ВладелецПродукта, Объект.Продукт);
	ЗаполнитьПредставлениеСтатуса();

	// Создание элементов формы для отображения трудозатрат и получение трудозатрат по объекту
	УчетТрудозатрат.КонструкторИнтерфейсаУправленияТрудозатратами(ЭтотОбъект, Элементы.СтраницыДокумента);
	УчетТрудозатрат.ЗаполнитьТрудозатраты(ЭтотОбъект, ЭтоНовый);
	
	РаботаСТегами.Заполнить(ЭтотОбъект, Элементы.ГруппаСтраницаСвойстваШапка.ЦветФона);
	
	// Подключение дополнительных реквизитов
	ДополнительныеРеквизиты.ПодключитьДополнительныеРеквизиты(Объект.Ссылка, ЭтотОбъект, "ГруппаДополнительныеРеквизиты");
	
	ПараметрыАвтосохранения = АвтосохраненияДанных.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Ограничим доступность всех элементов формы, если статус "Отклонен" и "Решен".
	ПараметрыОграничения = РедактированиеОграничено();
	
	// Программное создание элементов формы для редактирования описания
	РедакторОписания.ПриСозданииНаСервере(ЭтотОбъект, Элементы.СтраницаОписание, 
		ПараметрыОграничения.ЗапрещеноРедактировать, ПараметрыАвтосохранения);
		
	УстановитьОграниченияРедактирования(ПараметрыОграничения);
	
	Если Элементы.ПроцентВыполнения.СписокВыбора.НайтиПоЗначению(Объект.ПроцентВыполнения) = Неопределено Тогда
		ДополнитьСписокВыбораПроцента();
	КонецЕсли;
	
	УстановитьДоступныеНаправления();
	УстановитьСвойстваЮридическогоЛица(НЕ ЭтоНовый);
	
	ПанельНавигации.Создать(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Чтобы клиент не обращался часто к серверу за небольшими порциями данных,
	// получим их все сразу за один вызов.
	КэшВспомогательныхДанных = ПолучитьВспомогательныеДанные(Объект.Ссылка, Объект.ОбъектОснование, ЗагруженоАвтосохранение);
	
	АвтосохраненияДанныхКлиент.ПриОткрытии(ЭтотОбъект, КэшВспомогательныхДанных);
	
	// Инициализация хранилища дополнительных свойств формы
	ОбщегоНазначенияКлиент.ИнициализироватьДополнительныеСвойстваФормы(ДополнительныеСвойства);
	
	// ОбщиеМеханизмы.Трудозатраты
	ОбщегоНазначенияКлиент.ДобавитьДополнительноеСвойствоФормы("АктивнаяСтраницаПанели",
		ДополнительныеСвойства, Элементы.СтраницаСвойства);
	// Конец ОбщиеМеханизмы.Трудозатраты
	
	// Устанавливаем текущее окна предыдущим, иначе получим ошибку при открытии комментариев
	ПредыдущаяОткрытаяВкладка = Элементы.СтраницыДокумента.ТекущаяСтраница;
	
	// Нужен для работы с программно-сформированными элементами формы
	ИдентификаторФормы = ОбщегоНазначенияКлиентСервер.СтрУникальныйИдентификатор(УникальныйИдентификатор);
	
	ИскатьПодчиненныеФормы = Ложь;
		
	Если ОткрытьКомментарии Тогда
		ПодключитьОбработчикОжидания("ОткрытьНовыеКомментарии", 0.2, Истина);	
	КонецЕсли;
	
	Если СтрДлина(СтатусПредставление) > 16 Тогда
		Элементы.НадписьСтатус.Высота = 2;
		Элементы.НадписьСтатус.РастягиватьПоВертикали = Истина;
	КонецЕсли;

	ПанельНавигацииКлиент.ПриОткрытии(Элементы);
	
	Если ЗначениеЗаполнено(ИмяОткрываемойСтраницы) Тогда                 
		ПодключитьОбработчикОжидания("ОткрытьСтраницуПанелиНавигации", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	ПанельНавигацииКлиент.ПриПовторномОткрытии(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ИзмененПланПроекта Тогда
		Отказ = Истина;
		ПланПроектаКлиент.ЗадатьВопросОНеСохраненномПланеПроекта(ЭтотОбъект, ПараметрыЗаписи);
		Возврат;
	КонецЕсли;
	
	Если ЕстьНеопубликованныйКомментарий Тогда
		ОбщегоНазначенияКлиент.ЗадатьВопросОНеопубликованномКомментарии(ЭтотОбъект, ПараметрыЗаписи);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	РедакторОписанияКлиент.ПередЗаписью(ЭтотОбъект, ПараметрыЗаписи, Отказ, Элементы.СтраницаОписание);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	Если Элементы.ВидПроцесса.Видимость И НЕ ЗначениеЗаполнено(Объект.ВидПроцесса) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан вид процесса",
			Объект.Ссылка, "ВидПроцесса", "Объект.ВидПроцесса", Отказ);
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("УИДЗамера", ИнтеграцияДополнительныхПодсистемКлиент.НачатьЗамерВремени(Ложь, 
		"Справочник.Проекты.Запись"));
	
	Если Модифицированность Тогда
		ПараметрыЗаписи.Вставить("ОбновитьДатыПоследнихИзменений");
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ОбработчикАвтосохраненияЗапущен", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПланГабаритноеПланирование", ЭтотОбъект.ПланГабаритноеПланирование);
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		ТекущийОбъект.УстановитьСсылкуНового(Справочники.Проекты.ПолучитьСсылку());
		СсылкаНаОбъект = ТекущийОбъект.ПолучитьСсылкуНового();
	Иначе
		СсылкаНаОбъект = ТекущийОбъект.Ссылка;
	КонецЕсли;
	
	// Указываем системе, что нужно дополнительно обработать изменение объекта
	Если ПараметрыЗаписи.Свойство("ОбновитьДатыПоследнихИзменений") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОбновитьДатыПоследнихИзменений");
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОбновитьДатыПоследнихИзмененийПодчиненных");
	КонецЕсли;
	
	// Добавим дополнительное свойство для обработки комментария
	Если ПараметрыЗаписи.Свойство("Комментарий") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Комментарий", ПараметрыЗаписи.Комментарий);
		
		Если ПараметрыЗаписи.Свойство("ПричинаИзмененияСтатуса") Тогда
			ОтправитьУведомление = ПараметрыЗаписи.НеобходимоОтправитьУведомление;
			ПричинаИзмененияСтатуса = СтрСоединить(ПараметрыЗаписи.ПричинаИзмененияСтатуса, ",");
			
			ТекущийОбъект.ДополнительныеСвойства.Вставить("ПричинаИзмененияСтатуса", ПараметрыЗаписи.ПричинаИзмененияСтатуса);
			ТекущийОбъект.ДополнительныеСвойства.Вставить("НеобходимоОтправитьУведомление", ОтправитьУведомление);
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеРеквизиты.ПередЗаписьюОбъекта(ЭтотОбъект, ТекущийОбъект);
	РедакторОписания.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, СсылкаНаОбъект);
		
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЭтоНовый = Параметры.Ключ.Пустая();
	
	Если ЭтоНовый Тогда
		РаботаСТегамиВызовСервера.Обработать(СписокТегов, ТекущийОбъект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Добавление текстов описания в регистр сведений для индексирования
	// полнотекстовым поиском.
	ИдентификаторФормы = СтрЗаменить(ЭтотОбъект.УникальныйИдентификатор, "-", "");
	ПанельНавигации.ОбновитьДоступность(ЭтотОбъект);
	НастроитьДоступностьЭлементовУправленияСтатусами();
	
	Если ПараметрыЗаписи.ОбработчикАвтосохраненияЗапущен Тогда
		РегистрыСведений.АвтосохраненныеОписания.УдалитьЗаписиПоОбъекту(СсылкаНаОбъектДляАвтосохранения);
		СсылкаНаОбъектДляАвтосохранения = ТекущийОбъект.Ссылка;
	КонецЕсли;
	
	ПараметрыОграничения = РедактированиеОграничено();
		
	РедакторОписания.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, 
		ПараметрыОграничения.ЗапрещеноРедактировать);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИскатьПодчиненныеФормы = Ложь;
	Модифицированность = Ложь;
	
	Если СозданоИзПлана Тогда
		ДокументПредставление = СтрШаблон("%1. %2", Объект.Код, Объект.Наименование);
		СтруктураДляПлана = Новый Структура("Ссылка, ДокументПредставление, Статус, СтатусПредставление, Ответственный", 
			Объект.Ссылка, ДокументПредставление, Объект.Статус, Строка(Объект.Статус), Объект.Автор);
		
		Оповестить("ПрикрепитьКПлануПроекта", СтруктураДляПлана, Объект.Ссылка);
		СозданоИзПлана = Ложь;
	КонецЕсли;
		
	Если ПараметрыЗаписи.Свойство("ЗакрытьПослеЗаписи") Тогда
		Закрыть();
	КонецЕсли;
	
	Если ПараметрыЗаписи.ОбработчикАвтосохраненияЗапущен Тогда
		АвтосохраненияДанныхКлиент.ВыключитьАвтосохранениеОписания(ЭтотОбъект, КэшВспомогательныхДанных);
		ДатаПоследнегоАвтосохранения = Дата(1, 1, 1);
	КонецЕсли;
	
	РедакторОписанияКлиент.ПослеЗаписи(ЭтотОбъект);
	
	ИнтеграцияДополнительныхПодсистемКлиент.ЗавершитьЗамерВремени(ПараметрыЗаписи.УИДЗамера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗавершениеРаботы Тогда
		Если ЕстьНеопубликованныйКомментарий Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиент.ЗадатьВопросОНеопубликованномКомментарии(ЭтотОбъект);
		КонецЕсли;
		
		Если ЕстьИзмененныеПоказателейПриоритета Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиент.ЗадатьВопросОНеСохранныхПоказателяхПриоритета(ЭтотОбъект);
		КонецЕсли;
		
		Если ИзмененПланПроекта Тогда
			Отказ = Истина;
			ПланПроектаКлиент.ЗадатьВопросОНеСохраненномПланеПроекта(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеРеквизитыКлиент.ПередЗакрытиемФормы(ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы И ЗначениеЗаполнено(ДатаПоследнегоАвтосохранения) Тогда
		АвтосохраненияДанныхВызовСервера.УдалитьАвтосохраненноеОписание(СсылкаНаОбъектДляАвтосохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если СобытияОповещенияКлиент.СобытиеДобавленияТрудозатратПоОбъекту(ИмяСобытия, Объект.Ссылка, Параметр) Тогда
		УчетТрудозатратКлиент.ОбновитьОбщиеФактическиеТрудозатраты(ЭтотОбъект, Истина);
	КонецЕсли;
	
	ПанельНавигацииКлиент.ОбработкаОповещения(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АвторНажатие(Элемент, СтандартнаяОбработка)
	
	ИнтерфейсПриложенияКлиент.ОткрытьИнформациюОПользователе(ЭтотОбъект, Объект.Автор, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПродуктаНажатие(Элемент, СтандартнаяОбработка)
	
	ИнтерфейсПриложенияКлиент.ОткрытьИнформациюОПользователе(ЭтотОбъект, ВладелецПродукта, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияКлиент.КопироватьТекстВБуферОбмена(Объект.Дата, "Дата создания скопирована в буфер обмена");
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикОткрытие(Элемент, СтандартнаяОбработка)
	
	ИнтерфейсПриложенияКлиент.ОткрытьИнформациюОПользователе(ЭтотОбъект, Объект.Заказчик, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КодНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияКлиент.КопироватьТекстВБуферОбмена(Объект.Код, "Номер скопирован в буфер обмена");
			
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеПриИзменении(Элемент)
	
	НаправлениеПриИзмененииНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ПродуктПриИзменении(Элемент)
	
	ВладелецПродукта = ПолучитьВладельцаПродукта(Объект.Продукт);
	ВидимостьВладелецПродукта(Элементы.ВладелецПродукта, Объект.Продукт);
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительОткрытие(Элемент, СтандартнаяОбработка)
	
	ИнтерфейсПриложенияКлиент.ОткрытьИнформациюОПользователе(ЭтотОбъект, Объект.Руководитель, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительПриИзменении(Элемент)
	
	Объект.Филиал = ОбщегоНазначенияВызовСервера.ФилиалПользователя(Объект.Руководитель);
				
КонецПроцедуры

&НаКлиенте
Процедура СтраницыДокументаПриСменеСтраницы(Элемент, ТекущаяСтраница) Экспорт
	
	РедакторОписанияКлиент.ПриСменеСтраницы(ЭтотОбъект, ПредыдущаяОткрытаяВкладка, Элементы.СтраницаОписание);
	УчетТрудозатратКлиент.ПриПереключенииСтраницПанели(ЭтотОбъект, Элементы.СтраницыДокумента, ДополнительныеСвойства, Истина);
	
	ПредыдущаяОткрытаяВкладка = Элементы.СтраницыДокумента.ТекущаяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура ТегиHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РаботаСТегамиКлиент.ПриНажатии(ЭтотОбъект, ДанныеСобытия.Href);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическоеЛицоОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура("ЗакрытьПослеЗаписи", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНаименование(Команда)
	
	ПараметрыОткрытия = Новый Структура("ПолноеНаименование, КраткоеНаименование", 
		Объект.Наименование, Объект.КороткоеНазвание);
			
	Оповещение = Новый ОписаниеОповещения("ПослеИзмененияНаименования", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.Проекты.Форма.НаименованиеПроекта", ПараметрыОткрытия, ЭтотОбъект, , , , 
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
&НаКлиенте
Процедура КопироватьВБуфер(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиент.КопироватьНавигационнуюСсылкуВБуферОбмена(Объект.Ссылка);
	Иначе
		ПоказатьПредупреждение( , "Данные еще не записаны. Копирование ссылки возможно только после записи данных.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДатуПлановогоОкончания(Команда)
	
	Результат = ПланПроектаВызовСервера.ПолучитьПлановуюДатуОкончания(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Объект.ДатаПлановоеОкончание = Результат.ДатаОкончания_План;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПроцентВыполнения(Команда)
	
	Результат = ПланПроектаВызовСервера.ПолучитьПроцентВыполнения(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
	Иначе
		Если Элементы.ПроцентВыполнения.СписокВыбора.НайтиПоЗначению(Результат.ПроцентВыполнения) = Неопределено Тогда
			ЗначениеЭлемента = 0;
			ИндексЭлемента = 0;
			
			Пока ЗначениеЭлемента < Результат.ПроцентВыполнения Цикл
				ЗначениеЭлемента = Элементы.ПроцентВыполнения.СписокВыбора[ИндексЭлемента].Значение;
				ИндексЭлемента = ИндексЭлемента + 1;
			КонецЦикла;
			
			Представление = СтрШаблон("%1%%", Результат.ПроцентВыполнения);
			Элементы.ПроцентВыполнения.СписокВыбора.Вставить(ИндексЭлемента - 1, Результат.ПроцентВыполнения, Представление);
		КонецЕсли;
		
		Если Объект.ПроцентВыполнения <> Результат.ПроцентВыполнения Тогда
			Объект.ПроцентВыполнения = Результат.ПроцентВыполнения;
			Модифицированность = Истина;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВариантыСсылок(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ИнтерфейсПриложенияКлиент.ОткрытьОкноНавигационнойСсылки(Объект.Ссылка, ЭтотОбъект, УникальныйИдентификатор);
	Иначе
		ПоказатьПредупреждение( , "Данные еще не записаны. Копирование ссылки возможно только после записи данных.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельНавигацииНажатие(Команда)
	
	ПанельНавигацииКлиент.Нажатие(ЭтотОбъект, Команда);
			
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПоКнопке(Команда)
	
	ИмяПредопределенныхДанных = СтрЗаменить(Команда.Имя, "УстановитьСтатус_", "");
	
	СвойстваСтатуса = КэшВспомогательныхДанных.Статусы[ИмяПредопределенныхДанных];
	НовыйСтатус = СвойстваСтатуса.Ссылка;
		
	НовыйСтатусОтклонен = (НовыйСтатус = КэшВспомогательныхДанных.Статусы.Получить("Отклонен"));
	НовыйСтатусПриостановлен = (НовыйСтатус = КэшВспомогательныхДанных.Статусы.Получить("Приостановлен"));
	
	Если (НовыйСтатусОтклонен ИЛИ НовыйСтатусПриостановлен) И ЗапрещенаСменаСтатуса(Объект.Ссылка) Тогда	
		Если НовыйСтатусОтклонен Тогда
			ТекстСообщения = "Перевод проекта в статус ""Отклонен"" невозможен. Необходимо изменить статус подчиненных объектов.";
			ПоказатьПредупреждение( , ТекстСообщения);
		Иначе
			ПараметрыОповещения = Новый Структура("СвойстваСтатуса", СвойстваСтатуса);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПереводСтатусаВПриостановлен", ЭтотОбъект, ПараметрыОповещения);
			
			ТекстВопроса = "По некоторым подчиненным объектам может идти работа. Все равно изменить статус проекта?";
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , 
				КодВозвратаДиалога.Нет, "Изменение статуса проекта.");
		КонецЕсли;
	Иначе
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуИзмененияСтатуса(СвойстваСтатуса);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыНажатие(Элемент, СтандартнаяОбработка)
	
	УчетТрудозатратКлиент.ПереключитьНаВкладкуТрудозатрат(СтандартнаяОбработка, ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическаяСтоимостьТрудозатратНажатие(Элемент, СтандартнаяОбработка)   
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Проект", Объект.Ссылка);
	Период = Новый СтандартныйПериод(Дата("20100101"), ТекущаяДата()); 
	ПараметрыОткрытия.Вставить("Период", Период);
	ПараметрыОткрытия.Вставить("Сформировать", Истина);
	ПараметрыФормы = Новый Структура("ПараметрыОткрытия", ПараметрыОткрытия); 
	ОткрытьФорму("Отчет.БюджетПроекта.Форма.ФормаОтчета", ПараметрыФормы, , Новый УникальныйИдентификатор);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВВОД НА ОСНОВАНИИ

&НаКлиенте
Процедура СоздатьНаОснованииВнутреннееЗадание(Команда)
	
	Если НЕ ИнтерфейсПриложенияКлиент.ПроверитьСтатусОбъекта(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Основание", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ВнутреннееЗадание.Форма.ФормаДокумента", ПараметрыОткрытия, ЭтотОбъект,
		КлючУникальности, , , , РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОснованииЗаявкуНаРазработку(Команда)
	
	Если НЕ ИнтерфейсПриложенияКлиент.ПроверитьСтатусОбъекта(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Основание", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ЗаявкаНаРазработку.Форма.ФормаДокумента", ПараметрыОткрытия, ЭтотОбъект,
		КлючУникальности, , , , РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОснованииПроект(Команда)
	
	Если НЕ ИнтерфейсПриложенияКлиент.ПроверитьСтатусОбъекта(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Основание", Объект.Ссылка);
	
	ОткрытьФорму("Справочник.Проекты.Форма.ФормаЭлемента", ПараметрыОткрытия, ЭтотОбъект, КлючУникальности);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ВидимостьВладелецПродукта(Элемент, Продукт)
	
	Элемент.Видимость = ЗначениеЗаполнено(Продукт);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСписокВыбораПроцента()
	
	ЗначениеЭлемента = 0;
	Индекс = 0;
	
	Пока ЗначениеЭлемента < Объект.ПроцентВыполнения Цикл
		ЗначениеЭлемента = Элементы.ПроцентВыполнения.СписокВыбора[Индекс].Значение;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	ПредставлениеПроцента = СтрШаблон("%1 %%", Строка(Объект.ПроцентВыполнения));
	Элементы.ПроцентВыполнения.СписокВыбора.Вставить(Индекс - 1, Объект.ПроцентВыполнения, ПредставлениеПроцента);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеСтатуса()

	СтруктураСтатуса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Статус, "ИндексКартинки, Наименование"); 
	ИндексКартинкиСтатуса = СтруктураСтатуса.ИндексКартинки;
	СтатусПредставление = СтруктураСтатуса.Наименование;	

КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьВидаПроцесса()
	
	Элементы.ВидПроцесса.Видимость = ЗначениеЗаполнено(Объект.Направление) 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Направление, "ИспользоватьВидыПроцессов");
		
	Если НЕ Элементы.ВидПроцесса.Видимость Тогда
		Объект.ВидПроцесса = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьГабаритногоПланирования()
	
	Значение = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Направление, "ИспользоватьГабаритноеПланирование");
	Элементы.ГруппаГабаритноеПланирование.Видимость = Значение = Истина; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеСтатуса(Знач СвойстваСтатуса)
	
	Объект.Статус = СвойстваСтатуса.Ссылка;
	ИндексКартинкиСтатуса = СвойстваСтатуса.ИндексКартинки;
	СтатусПредставление = СвойстваСтатуса.Наименование;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтраницуПанелиНавигации() Экспорт
	
	ПанельНавигацииКлиент.ОткрытьСтраницуНаФорме(ЭтотОбъект, ИмяОткрываемойСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеПриИзмененииНаСервере()
	
	УстановитьСвойстваЮридическогоЛица();
	
	ОбновитьВидимостьВидаПроцесса();
	ВидимостьГабаритногоПланирования();
		
	Если Элементы.ВидПроцесса.Видимость Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ВидПроцесса) И ЗначениеЗаполнено(Объект.ОбъектОснование) Тогда
			Объект.ВидПроцесса = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ОбъектОснование, "ВидПроцесса");
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапуститьАвтосохранениеОписания()
	
	АвтосохраненияДанныхКлиент.ЗапуститьАвтосохранениеОписания(ЭтотОбъект, КэшВспомогательныхДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗадатьВопросВосстановленияОписания()
	
	АвтосохраненияДанныхКлиент.ЗадатьВопросОВосстановленииОписания(ЭтотОбъект, КэшВспомогательныхДанных, "текущего проекта");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриНажатииПоляHTMLДокумента(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РедакторОписанияКлиент.ПриНажатииПоляHTMLДокумента(ЭтотОбъект, ДанныеСобытия, СтандартнаяОбработка, КэшВспомогательныхДанных);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВладельцаПродукта(Продукт)
	
	Если ЗначениеЗаполнено(Продукт) Тогда
		ВладелецПродукта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Продукт, "Ответственный");
	Иначе
		ВладелецПродукта = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВладелецПродукта;
	
КонецФункции

&НаКлиенте
Процедура ПослеИзмененияНаименования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Наименование = Результат.ПолноеНаименование;
	Объект.КороткоеНазвание = Результат.КраткоеНаименование;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТегиHTMLПослеНажатия(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") 
		ИЛИ НЕ Результат.Модифицированность Тогда
		
		Возврат;
	КонецЕсли;
	
	ТегиHTMLПослеНажатияНаСервере(Результат.СписокТегов);
	
КонецПроцедуры

&НаСервере
Процедура ТегиHTMLПослеНажатияНаСервере(Знач СписокТегов)

	РаботаСТегамиВызовСервера.Обновить(ЭтотОбъект, СписокТегов, Элементы.ГруппаСтраницаСвойстваШапка.ЦветФона);	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проверка подчиненных при переводе проекта в новый статус

&НаСервереБезКонтекста
Функция ЗапрещенаСменаСтатуса(Знач Проект)
		
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ВнутреннееЗадание"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаявкаНаРазработку"));
	МассивТипов.Добавить(Тип("ДокументСсылка.Задача"));
	
	КонечнаяТаблицаОбъектов = Новый ТаблицаЗначений;
	КонечнаяТаблицаОбъектов.Колонки.Добавить("Объект", Новый ОписаниеТипов(МассивТипов));
	
	МассивТипов.Добавить(Тип("СправочникСсылка.Проекты"));
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Объект", Новый ОписаниеТипов(МассивТипов));
	
	ТаблицаОбъектов.Добавить().Объект = Проект;
	
	ПолучитьПодчиненныеОбъектыРекурсивно(ТаблицаОбъектов, КонечнаяТаблицаОбъектов);
	
	Если КонечнаяТаблицаОбъектов.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат ПодчиненныеОбъектыВРаботе(КонечнаяТаблицаОбъектов);
	КонецЕсли;
		
КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьПодчиненныеОбъектыРекурсивно(Знач ТаблицаОбъектов, ТаблицаЗаявок)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ТаблицаОбъектов.Объект КАК Объект
	|ПОМЕСТИТЬ РодителиДляОбъектов
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураПодчиненности.Объект КАК Объект
	|ПОМЕСТИТЬ ВсеОбъектыПоПроекту
	|ИЗ
	|	РодителиДляОбъектов КАК РодителиДляОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураПодчиненности КАК СтруктураПодчиненности
	|		ПО РодителиДляОбъектов.Объект = СтруктураПодчиненности.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеОбъектыПоПроекту.Объект КАК Объект
	|ИЗ
	|	ВсеОбъектыПоПроекту КАК ВсеОбъектыПоПроекту
	|ГДЕ
	|	(ВсеОбъектыПоПроекту.Объект ССЫЛКА Документ.ЗаявкаНаРазработку
	|			ИЛИ ВсеОбъектыПоПроекту.Объект ССЫЛКА Документ.ВнутреннееЗадание
	|			ИЛИ ВсеОбъектыПоПроекту.Объект ССЫЛКА Документ.Задача)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеОбъектыПоПроекту.Объект КАК Объект
	|ИЗ
	|	ВсеОбъектыПоПроекту КАК ВсеОбъектыПоПроекту
	|ГДЕ
	|	ВсеОбъектыПоПроекту.Объект ССЫЛКА Документ.ВнутреннееЗадание
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВсеОбъектыПоПроекту.Объект
	|ИЗ
	|	ВсеОбъектыПоПроекту КАК ВсеОбъектыПоПроекту
	|ГДЕ
	|	ВсеОбъектыПоПроекту.Объект ССЫЛКА Справочник.Проекты";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектов);	
	РезультатПакеты = Запрос.ВыполнитьПакет();
	
	ВыборкаЗаявки = РезультатПакеты[2].Выбрать();
	ВыборкаОбъекты = РезультатПакеты[3].Выбрать();
	
	Пока ВыборкаЗаявки.Следующий() Цикл
		ТаблицаЗаявок.Добавить().Объект = ВыборкаЗаявки.Объект;
	КонецЦикла;
	
	Если РезультатПакеты[3].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОбъектов.Очистить();
	
	Пока ВыборкаОбъекты.Следующий() Цикл
		ТаблицаОбъектов.Добавить().Объект = ВыборкаОбъекты.Объект;
	КонецЦикла;
	
	ПолучитьПодчиненныеОбъектыРекурсивно(ТаблицаОбъектов, ТаблицаЗаявок);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодчиненныеОбъектыВРаботе(Знач КонечнаяТаблицаОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ТаблицаОбъектов.Объект КАК Объект
	|ПОМЕСТИТЬ РодителиДляОбъектов
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МинимальныеСтатусыЗаявок.Статус КАК Статус
	|ПОМЕСТИТЬ СтатусыПодчиненныхОбъектов
	|ИЗ
	|	РодителиДляОбъектов КАК РодителиДляОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МинимальныеСтатусыЗаявок КАК МинимальныеСтатусыЗаявок
	|		ПО РодителиДляОбъектов.Объект = МинимальныеСтатусыЗаявок.Заявка
	|ГДЕ
	|	РодителиДляОбъектов.Объект ССЫЛКА Документ.ЗаявкаНаРазработку
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнутреннееЗадание.Статус
	|ИЗ
	|	РодителиДляОбъектов КАК РодителиДляОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееЗадание КАК ВнутреннееЗадание
	|		ПО РодителиДляОбъектов.Объект = ВнутреннееЗадание.Ссылка
	|ГДЕ
	|	РодителиДляОбъектов.Объект ССЫЛКА Документ.ВнутреннееЗадание
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Задача.Статус
	|ИЗ
	|	РодителиДляОбъектов КАК РодителиДляОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК Задача
	|		ПО РодителиДляОбъектов.Объект = Задача.Ссылка
	|ГДЕ
	|	РодителиДляОбъектов.Объект ССЫЛКА Документ.Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	СтатусыПодчиненныхОбъектов КАК СтатусыПодчиненныхОбъектов
	|ГДЕ
	|	НЕ СтатусыПодчиненныхОбъектов.Статус В (ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Отклонен), ЗНАЧЕНИЕ(Справочник.СтатусыОбъектов.Решен))
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(СтатусыПодчиненныхОбъектов.Статус) > 0";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ТаблицаОбъектов", КонечнаяТаблицаОбъектов);	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

&НаСервере
Процедура СоздатьЭлементыУправленияСтатусами()
	
	ХранилищеСтатусов = "";
	
	СписокСтатусов = ПолучитьВспомогательныеДанные(Объект.Ссылка, Объект.ОбъектОснование, Истина).Статусы;
	
	Для Каждого ЭлементСписка Из СписокСтатусов Цикл
		ИмяПредопределенныхДанных = ЭлементСписка.Ключ;
		НаименованиеСтатуса = ЭлементСписка.Значение.Наименование;
		
		ХранилищеСтатусов = ХранилищеСтатусов + ИмяПредопределенныхДанных + ",";
		
		Попытка
			Картинка = БиблиотекаКартинок["Статус" + ИмяПредопределенныхДанных];
		Исключение
			Картинка = Новый Картинка;
		КонецПопытки;
		
		ИмяКоманды = "УстановитьСтатус_" + ИмяПредопределенныхДанных;
		
		КомандаФормы = Команды.Найти(ИмяКоманды);
		Если КомандаФормы = Неопределено Тогда
			КомандаФормы = Команды.Добавить(ИмяКоманды);
			КомандаФормы.Действие = "УстановитьСтатусПоКнопке";
		КонецЕсли;
		
		ИмяКнопки = "КнопкаСтатуса_" + ИмяПредопределенныхДанных;
		НоваяКнопка = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), Элементы.КоманднаяПанельДополнительныеСтатусыПерехода);
		НоваяКнопка.Заголовок = НаименованиеСтатуса;
		НоваяКнопка.ИмяКоманды = КомандаФормы.Имя;
		НоваяКнопка.Картинка = Картинка;
		НоваяКнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДоступностьЭлементовУправленияСтатусами()
	
	Если НЕ ЗначениеЗаполнено(Объект.Статус) Тогда
		Объект.Статус = Справочники.СтатусыОбъектов.Новый;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыОбъектов.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	|ИЗ
	|	РегистрСведений.НастройкиПереходаСтатусовОбъектов КАК НастройкиПереходаСтатусовОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО НастройкиПереходаСтатусовОбъектов.НовыйСтатус = СтатусыОбъектов.Ссылка
	|			И СтатусыОбъектов.Предопределенный
	|ГДЕ
	|	НастройкиПереходаСтатусовОбъектов.Объект = &Объект
	|	И НастройкиПереходаСтатусовОбъектов.ТекущийСтатус = &ТекущийСтатус
	|	И НастройкиПереходаСтатусовОбъектов.РольПользователя = &РольПользователя
	|
	|УПОРЯДОЧИТЬ ПО
	|	НастройкиПереходаСтатусовОбъектов.Порядок";
	
	ВладелецСтатусов = Справочники.ТипыОбъектовВладельцев.НайтиСвязанныйЭлемент(Объект.Ссылка);
	
	Запрос.УстановитьПараметр("Объект", ВладелецСтатусов);
	Запрос.УстановитьПараметр("ТекущийСтатус", Объект.Статус);
	Запрос.УстановитьПараметр("РольПользователя", Справочники.РолиПользователей.ВсеРоли);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Элементы.ГруппаУправлениеСтатусом.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если НЕ Элементы.ГруппаУправлениеСтатусом.Видимость Тогда
		Элементы.ГруппаУправлениеСтатусом.Видимость = Истина;
	КонецЕсли;
	
	СписокДоступныхСтатусов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ИмяПредопределенныхДанных");
	
	ИменаСтатусов = СтрРазделить(ХранилищеСтатусов, ",", Ложь);
	
	Для Каждого ИмяСтатуса Из ИменаСтатусов Цикл
		ЭлементКнопка = Элементы["КнопкаСтатуса_" + ИмяСтатуса];
		
		Если СписокДоступныхСтатусов.Найти(ИмяСтатуса) = Неопределено Тогда
			ЭлементКнопка.Видимость = Ложь;
		Иначе
			ЭлементКнопка.Видимость = Истина;
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура НастроитьРазрешенияПользователя()
	
	Если Параметры.Ключ.Пустая() Тогда
		Элементы.ГруппаУправлениеСтатусом.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	#Область ТекстЗапроса	
	"ВЫБРАТЬ
	|	ЛичныеДелаСрезПоследних.Сотрудник КАК Пользователь,
	|	ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы) КАК Филиал
	|ПОМЕСТИТЬ ЛичныеДелаФилиалы
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(&ТекущаяДата, Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ЛичныеДелаФилиалы.Филиал, ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)) КАК ФилиалРуководителяПроекта,
	|	Проекты.Руководитель КАК Руководитель,
	|	Проекты.Заказчик КАК Заказчик,
	|	Проекты.Куратор КАК Куратор,
	|	Проекты.Автор КАК Автор
	|ПОМЕСТИТЬ СвойстваПроекта
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЛичныеДелаФилиалы КАК ЛичныеДелаФилиалы
	|		ПО Проекты.Руководитель = ЛичныеДелаФилиалы.Пользователь
	|ГДЕ
	|	Проекты.Ссылка = &Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Филиалы.Ссылка КАК Ссылка,
	|	Филиалы.ЗаместительРуководителя КАК ЗаместительРуководителя,
	|	Филиалы.Руководитель КАК Руководитель,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(НастройкиФилиалов.Значение, ЗНАЧЕНИЕ(Справочник.НаправленияРазработки.ПустаяСсылка)) КАК Справочник.НаправленияРазработки) КАК Направление
	|ПОМЕСТИТЬ ФилиалРуководителяПроекта
	|ИЗ
	|	СвойстваПроекта КАК СвойстваПроекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО СвойстваПроекта.ФилиалРуководителяПроекта = Филиалы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиФилиалов КАК НастройкиФилиалов
	|		ПО (Филиалы.Ссылка = НастройкиФилиалов.Филиал)
	|			И (НастройкиФилиалов.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.НаправлениеРазработки))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФилиалРуководителяПроекта.Руководитель КАК Руководитель
	|ПОМЕСТИТЬ СвойстваФилиала
	|ИЗ
	|	ФилиалРуководителяПроекта КАК ФилиалРуководителяПроекта
	|ГДЕ
	|	ФилиалРуководителяПроекта.Руководитель = &Пользователь
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФилиалРуководителяПроекта.ЗаместительРуководителя
	|ИЗ
	|	ФилиалРуководителяПроекта КАК ФилиалРуководителяПроекта
	|ГДЕ
	|	ФилиалРуководителяПроекта.ЗаместительРуководителя = &Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвойстваПроекта.Руководитель КАК Пользователь
	|ПОМЕСТИТЬ ТаблицаПравПользователя
	|ИЗ
	|	СвойстваПроекта КАК СвойстваПроекта
	|ГДЕ
	|	СвойстваПроекта.Руководитель = &Пользователь
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвойстваПроекта.Заказчик
	|ИЗ
	|	СвойстваПроекта КАК СвойстваПроекта
	|ГДЕ
	|	СвойстваПроекта.Заказчик = &Пользователь
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвойстваПроекта.Автор
	|ИЗ
	|	СвойстваПроекта КАК СвойстваПроекта
	|ГДЕ
	|	СвойстваПроекта.Автор = &Пользователь
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвойстваПроекта.Куратор
	|ИЗ
	|	СвойстваПроекта КАК СвойстваПроекта
	|ГДЕ
	|	СвойстваПроекта.Куратор = &Пользователь
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвойстваФилиала.Руководитель
	|ИЗ
	|	СвойстваФилиала КАК СвойстваФилиала
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НаправленияРазработкиОтветственные.Сотрудник
	|ИЗ
	|	ФилиалРуководителяПроекта КАК ФилиалРуководителяПроекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаправленияРазработки.Ответственные КАК НаправленияРазработкиОтветственные
	|		ПО ФилиалРуководителяПроекта.Направление = НаправленияРазработкиОтветственные.Ссылка
	|			И (НаправленияРазработкиОтветственные.Руководитель = ИСТИНА)
	|			И (НаправленияРазработкиОтветственные.Сотрудник = &Пользователь)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПравПользователя.Пользователь КАК Пользователь
	|ИЗ
	|	ТаблицаПравПользователя КАК ТаблицаПравПользователя";	
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Проект", Объект.Ссылка);
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Если Запрос.Выполнить().Пустой()
		ИЛИ НЕ ПравоДоступа("Изменение", Метаданные.Справочники.Проекты) Тогда
		
		Элементы.ГруппаУправлениеСтатусом.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВспомогательныеДанные(Знач Ссылка, Знач ОбъектОснование, Знач ЗагруженоАвтосохранение)
		
	Статусы = Справочники.СтатусыОбъектов.ОписаниеСтатусов();
	
	ДанныеДляКлиента = Новый Структура;
	ДанныеДляКлиента.Вставить("Статусы", Статусы);
	
	АвтосохраненияДанных.ДобавитьПараметрыДляАвтосохранения(ДанныеДляКлиента, Ссылка, ОбъектОснование, ЗагруженоАвтосохранение);
	
	Возврат ДанныеДляКлиента;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПереводСтатусаВПриостановлен(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьФормуИзмененияСтатуса(ДополнительныеПараметры.СвойстваСтатуса);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПроверкиИзмененияСтатусаПередЗаписью(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("ПричинаИзмененияСтатуса") Тогда
		ПричинаИзмененияСтатуса = СтрСоединить(Результат.ПричинаИзмененияСтатуса, ",");
		Элементы.ПричинаИзмененияСтатуса.Видимость = Истина;
	Иначе
		ПричинаИзмененияСтатуса = Неопределено;
		Элементы.ПричинаИзмененияСтатуса.Видимость = Ложь;
	КонецЕсли;
	
	ОбновитьПредставлениеСтатуса(ДополнительныеПараметры);
	Записать(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуИзмененияСтатуса(Знач СвойстваСтатуса)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаПроверкиИзмененияСтатусаПередЗаписью", ЭтотОбъект, СвойстваСтатуса);	
	ПараметрыОткрытия = Новый Структура("Объект, Статус, КомментарийОбязателен", Объект.Ссылка, СвойстваСтатуса.Ссылка, Ложь);
	
	ОткрытьФорму("ОбщаяФорма.КомментарийСтатуса", ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор, , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнформациюОПользователе(Знач СтрокаСсылки, СтандартнаяОбработка)
	
	ДлинаСтроки = 10;
	ПозицияСсылки = СтрНайти(СтрокаСсылки, "sdms_user_");
	Идентификатор = Сред(СтрокаСсылки, ПозицияСсылки + ДлинаСтроки);
	
	ИдентификаторПользователя = Новый УникальныйИдентификатор(Идентификатор);
	ИнтерфейсПриложенияКлиент.ОткрытьИнформациюОПользователе(ЭтотОбъект, ИдентификаторПользователя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСсылкуПользователя(Знач УникальныйИдентификатор)
	
	Возврат Справочники.Пользователи.ПолучитьСсылку(УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьИзмененияСроков()
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Если ТекущийПользователь <> Объект.Руководитель И ТекущийПользователь <> Объект.Куратор Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Участники.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.Участники КАК Участники
		|ГДЕ
		|	Участники.Объект = &Объект
		|	И Участники.Пользователь = &Пользователь
		|	И Участники.Роль = ЗНАЧЕНИЕ(Справочник.РолиУчастников.УчастникКомандыУправленияПроектом)";
		
		Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
		Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		НеУчастник = РезультатЗапроса.Пустой();
		
		Элементы.ДатаНачалаРассмотрения.ТолькоПросмотр = НеУчастник;
		Элементы.ДатаНачалаРазработки.ТолькоПросмотр = НеУчастник;
		Элементы.ДатаЗавершения.ТолькоПросмотр = НеУчастник;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступныеНаправления()
	
	ТаблицаНаправлений = Пользователи.ТаблицаНаправленийРолейПользователя(Объект.Направление);
	Элементы.Направление.СписокВыбора.ЗагрузитьЗначения(ТаблицаНаправлений.СписокНаправлений.ВыгрузитьЗначения());	
	Элементы.Направление.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаСервере
Функция РедактированиеОграничено()
	
	СтатусОбъекта = Объект.Статус;
	
	ЗавершенныйСтатус = (СтатусОбъекта = Справочники.СтатусыОбъектов.Отклонен
		ИЛИ СтатусОбъекта = Справочники.СтатусыОбъектов.Решен);
	
	ЗапрещеноРедактировать = (ЗавершенныйСтатус ИЛИ НЕ ПравоДоступа("Изменение", Метаданные.Справочники.Проекты));
	
	Возврат Новый Структура("ЗапрещеноРедактировать, ЗавершенныйСтатус", ЗапрещеноРедактировать, ЗавершенныйСтатус);
	
КонецФункции

// Устанавливает признак "ТолькоПросмотр для всех элементов
// формы. Если проект находится в статусах "Отклонен" и "Решен".
//
&НаСервере
Процедура УстановитьОграниченияРедактирования(ПараметрыОграничения)
	
	Если ПараметрыОграничения.ЗапрещеноРедактировать Тогда
		СписокДоступныхЭлементов = Новый Массив;
		СписокДоступныхЭлементов.Добавить("КопироватьВБуфер");
		СписокДоступныхЭлементов.Добавить("ОткрытьВариантыСсылок");
		СписокДоступныхЭлементов.Добавить(РедакторОписанияКлиентСервер.ИмяРеквизита());
			
		Если НЕ ПараметрыОграничения.ЗавершенныйСтатус Тогда
			СписокДоступныхЭлементов.Добавить("СоздатьНаОснованииВнутреннееЗадание");
			СписокДоступныхЭлементов.Добавить("СоздатьНаОснованииЗаявкуНаРазработку");
			СписокДоступныхЭлементов.Добавить("СоздатьНаОснованииПроект");
		КонецЕсли;
		
		// Заблокируем для редактирования все элементы, кроме трудозатрат
		Для Каждого ЭлементФормы Из Элементы Цикл
			Если СписокДоступныхЭлементов.Найти(ЭлементФормы.Имя) = Неопределено 
				И СтрНайти(ЭлементФормы.Имя, "УправлениеТрудозатратами_") = 0 
				И СтрНайти(ЭлементФормы.Имя, "УправленияТрудозатратами_") = 0 Тогда
				
				ТипЗначенияЭлемента = ТипЗнч(ЭлементФормы);
				
				Если ТипЗначенияЭлемента = Тип("ПолеФормы") Тогда
					ЭлементФормы.ТолькоПросмотр = Истина;
				ИначеЕсли ТипЗначенияЭлемента = Тип("КнопкаФормы") Тогда
					ЭлементФормы.Доступность = Ложь;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеМеханизмы_Трудозатраты

////////////////////////////////////////////////////////////////////////////////
// Управление трудозатратами

&НаКлиенте
Процедура Подключаемый_УправлениеТрудозатратамиПриНажатииHTML(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	УчетТрудозатратКлиент.ПриНажатииПоляHTMLУправленияТрудозатратами(ЭтотОбъект, ДанныеСобытия, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивСтатусов = ИнтерфейсПриложенияКлиент.ПолучитьОграниченияПоСтатусамДляПроекта(КэшВспомогательныхДанных.Статусы);
	
	ПараметрыОткрытия = Новый Структура("ФиксированныеНастройки", Новый НастройкиКомпоновкиДанных);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборОбъектаОснования", ЭтотОбъект);
	
	ОтборТекущийОбъект = ПараметрыОткрытия.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборТекущийОбъект.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборТекущийОбъект.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ОтборТекущийОбъект.ПравоеЗначение = Объект.Ссылка;
	ОтборТекущийОбъект.Использование = Истина;
	
	ОтборНеактуальный = ПараметрыОткрытия.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборНеактуальный.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборНеактуальный.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ОтборНеактуальный.ПравоеЗначение = МассивСтатусов;
	ОтборНеактуальный.Использование = Истина;
	
	ОткрытьФорму("Справочник.Проекты.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ОбъектОснование) Тогда
		ОбработатьВыборОбъектаОснования(Объект.ОбъектОснование, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборОбъектаОснования(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ОбработатьВыборОбъектаОснованияНаСервере(Объект.Ссылка, РезультатЗакрытия);
	
	Если НЕ Результат.Успешно Тогда
		Объект.ОбъектОснование = Неопределено;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Объект.ОбъектОснование = РезультатЗакрытия;
	Модифицированность = Истина;
	
	ПриИзмененииОбъектОснования();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОбъектОснования()
	
	Если ЗначениеЗаполнено(Объект.ОбъектОснование) Тогда
		ДанныеОснования = ОбщегоНазначенияВызовСервера.ПолучитьДанныеОбъектаОснования(Объект.ОбъектОснование);
		
		// Заполнение юридического лица
		ЮридическоеЛицоОснования = ДанныеОснования.ЮридическоеЛицо;
		
		Если ЗначениеЗаполнено(ЮридическоеЛицоОснования)
			И Элементы.ЮридическоеЛицо.СписокВыбора.НайтиПоЗначению(ЮридическоеЛицоОснования) <> Неопределено Тогда
			
			Объект.ЮридическоеЛицо = ЮридическоеЛицоОснования;
		КонецЕсли;
		
		// Заполнение вида процесса
		Если Элементы.ВидПроцесса.Видимость 
			И ЗначениеЗаполнено(ДанныеОснования.ВидПроцесса) Тогда
			
			Объект.ВидПроцесса = ДанныеОснования.ВидПроцесса;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработатьВыборОбъектаОснованияНаСервере(Знач Ссылка, Знач ОбъектОснование)
	
	Результат = Новый Структура("Успешно, ТекстОшибки", Истина, "");
	
	РезультатУровеньВложенности = ОбщегоНазначения.УровеньВложенностиПревышен(ТипЗнч(Ссылка), ОбъектОснование);
	
	Если РезультатУровеньВложенности.УровеньПревышен Тогда
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = РезультатУровеньВложенности.Сообщение;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьНовыеКомментарии() Экспорт
	
	ШаблонИмениКнопки = ПанельНавигацииКлиентСервер.ШаблонИмениКнопки();	
	ИмяКоманды = СтрШаблон(ШаблонИмениКнопки, "Комментарии");
	
	ПанельНавигацииКлиент.НажатиеВнеПанели(ЭтотОбъект, ИмяКоманды);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЮридическогоЛица(Знач ОткрытиеДокумента = Ложь)
	
	// Очистка списка выбора юридических лиц
	СписокВыбора = Элементы.ЮридическоеЛицо.СписокВыбора;
	СписокВыбора.Очистить();
	
	// Получение юридического лица объекта основания
	Если ЗначениеЗаполнено(Объект.ОбъектОснование) Тогда
		ЮрЛицоОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ОбъектОснование, "ЮридическоеЛицо");
	Иначе
		ЮрЛицоОснования = Неопределено;
	КонецЕсли;
	
	// Получения списка юридических лиц направления, основного юридического лица и признака видимости поля юридического лица
	ПараметрыЮридическогоЛица = Документы.ЗаявкаНаРазработку.ПараметрыЮрЛица(Объект.Направление);
		
	ВидимостьЮрЛица = ПараметрыЮридическогоЛица.ВидимостьЮрЛица;
	ОсновноеЮрЛицо = ПараметрыЮридическогоЛица.ОсновноеЮрЛицо;
	
	// Заполнение списка выбора юридических лиц
	Для Каждого Элемент Из ПараметрыЮридическогоЛица.СписокЮрЛиц Цикл
		СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
	КонецЦикла;
	
	// Если открывается существующий документ
	Если ОткрытиеДокумента Тогда
		// Если юридическое лицо не заполнено, то добавляется пункт "Не выбрано"
		Если НЕ ЗначениеЗаполнено(Объект.ЮридическоеЛицо) Тогда
			СписокВыбора.Добавить(Справочники.ЮридическиеЛица.ПустаяСсылка(), "Не выбрано");
		Иначе
			ВидимостьЮрЛица = Истина;
		КонецЕсли;
		
		ЮридическоеЛицоЗаявки = Объект.ЮридическоеЛицо;
		
		// Если юридическое лицо заявки отсутствует в списке выбора, то оно добавляется в список
		Если ВидимостьЮрЛица И СписокВыбора.НайтиПоЗначению(ЮридическоеЛицоЗаявки) = Неопределено Тогда
			СписокВыбора.Добавить(ЮридическоеЛицоЗаявки);
		КонецЕсли;
		
	// Если создается новый документ и заполнено юридическое лицо в объекте основания,
	// то оно будет установлено в качестве юридического лица текущего объекта
	ИначеЕсли ЗначениеЗаполнено(ЮрЛицоОснования) И СписокВыбора.НайтиПоЗначению(ЮрЛицоОснования) <> Неопределено Тогда
		ЮридическоеЛицоЗаявки = ЮрЛицоОснования;
	Иначе
		ЮридическоеЛицоЗаявки = ОсновноеЮрЛицо;
	КонецЕсли;
	
	Объект.ЮридическоеЛицо = ЮридическоеЛицоЗаявки;
	Элементы.ЮридическоеЛицо.Видимость = ВидимостьЮрЛица;
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеРеквизиты

&НаКлиенте
Процедура Подключаемый_ОткрытьДополнительныеРеквизиты(Команда)
	
	ДополнительныеРеквизитыКлиент.ОткрытьФормуДополнительныхРеквизитов(Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

#Если Клиент Тогда	
	ЕстьИзмененныеПоказателейПриоритета = Ложь;
	ЕстьНеопубликованныйКомментарий = Ложь;
	ИскатьПодчиненныеФормы = Ложь;
	ИзмененПланПроекта = Ложь;
#КонецЕсли

#КонецОбласти
