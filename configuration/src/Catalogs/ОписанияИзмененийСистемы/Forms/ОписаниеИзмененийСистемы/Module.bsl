///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбъявлениеПеременных

// Переменная для хранения набора параметров, которые передаются на сервер
// при активации строки таблицы СписокОписанийИзменений.
&НаКлиенте
Перем ПараметрыПослеАктивизацииСтроки;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСписокОписанийИзмененийСистемы();
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТекущийДайджестПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ПриНажатииПоляHTMLДокумента(ДанныеСобытия, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий таблицы "СписокОписанийИзменений"

&НаКлиенте
Процедура СписокОписанийИзмененийПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СписокОписанийИзменений.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОтключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСпискаОписаний");
		ПараметрыПослеАктивизацииСтроки.Очистить();
		
		ПараметрыПослеАктивизацииСтроки.Вставить("АктивнаяСтрока", Элементы.СписокОписанийИзменений.ТекущаяСтрока);
		ПараметрыПослеАктивизацииСтроки.Вставить("Описание", ТекущиеДанные.Ссылка);
		ПараметрыПослеАктивизацииСтроки.Вставить("ДатаСоздания", ТекущиеДанные.ДатаСоздания);
		ПараметрыПослеАктивизацииСтроки.Вставить("ОтметитьПрочитанным", НЕ ТекущиеДанные.Просмотрено);
		ПараметрыПослеАктивизацииСтроки.Вставить("Операция", "ОбновлениеОписанияИзменений");
	
		ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСпискаОписаний", 0.1, Истина);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры обработки активизации строки таблицы "СписокОписанийИзменений"

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСпискаОписаний()
	
	// Признак, который определяет, нужно ли в конце процедуры очистить структуру
	// ПараметрыПослеАктивизацииСтроки.
	ОчиститьПараметры = Истина;
	
	// Операция получения содержимого описания
	Если ПараметрыПослеАктивизацииСтроки.Операция = "ОбновлениеОписанияИзменений" Тогда
		// Получение описания изменений
		ОписаниеИзменений = ПолучитьHTMLТекстОписания(ПараметрыПослеАктивизацииСтроки.Описание);
		
		// Если описание необходимо отметить прочитанным, запускается новый таймер. При его
		// срабатывании дайджест отметится прочитанным. Это нужно для того, чтобы понять, 
		// сколько пользователей реально читают дайджесты.		
		Если ПараметрыПослеАктивизацииСтроки.ОтметитьПрочитанным Тогда
			ОчиститьПараметры = Ложь;
			
			ПараметрыПослеАктивизацииСтроки.Операция = "УстановкаОтметкиПрочитанного";
			ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСпискаОписаний", 2, Истина);
		КонецЕсли;
	Иначе
		// Выполнение операции отметки прочитанным
		ОтметитьОписаниеПрочитанным(ПараметрыПослеАктивизацииСтроки.Описание, ПараметрыПослеАктивизацииСтроки.ДатаСоздания);
		
		// Установка свойств строке таблицы
		НайденнаяСтрока = СписокОписаний.НайтиПоИдентификатору(ПараметрыПослеАктивизацииСтроки.АктивнаяСтрока);
		Если НайденнаяСтрока <> Неопределено Тогда
			НайденнаяСтрока.Просмотрено = Истина;
			НайденнаяСтрока.ИндексКартинки = 1;
		КонецЕсли;		
	КонецЕсли;
	
	Если ОчиститьПараметры Тогда
		ПараметрыПослеАктивизацииСтроки.Очистить();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции 

&НаКлиенте
// Обработчик нажатия на элементы внутри поля HTML-документа.
//
// Параметры:
//  ДанныеСобытяи        - ФиксированнаяСтруктура - свойства события. Дополнительно см.
//                         описания события ПриНажатии расширения поля формы для поля 
//                         HTML-документа в синтаксис-помощнике.
//  СтандартнаяОбработка - Булево -  признак выполнения стандартной (системной) обработки события.
//
Процедура ПриНажатииПоляHTMLДокумента(ДанныеСобытия, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	НавигационнаяСсылка = ДанныеСобытия.Href;	
	
	#Если ТонкийКлиент Тогда	
		// Тонкий клиент не умеет открывать внешние ссылки на объекты внутри себя.
		// Требутеся удаление адреса публикации информационной базы из ссылки для открытия.
		
		Позиция = СтрНайти(НавигационнаяСсылка, "#e1cib");
		НавигационнаяСсылка = Сред(НавигационнаяСсылка, Позиция + 1);	
	#КонецЕсли
	
	Если НЕ ПустаяСтрока(НавигационнаяСсылка) 
		И (ОбщегоНазначенияКлиент.ЭтоВебСсылка(НавигационнаяСсылка)
			ИЛИ ОбщегоНазначенияКлиент.ЭтоНавигационнаяСсылка(НавигационнаяСсылка)) Тогда

			ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокОписанийИзмененийСистемы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОписанияИзмененийСистемы.Ссылка КАК Ссылка,
	|	ОписанияИзмененийСистемы.ДатаСоздания КАК ДатаСоздания,
	|	ВЫБОР
	|		КОГДА ПросмотренныеОписанияИзмененийСистемы.ОписаниеИзменений ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Просмотрено,
	|	ВЫБОР
	|		КОГДА ПросмотренныеОписанияИзмененийСистемы.ОписаниеИзменений ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ИндексКартинки
	|ИЗ
	|	Справочник.ОписанияИзмененийСистемы КАК ОписанияИзмененийСистемы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПросмотренныеОписанияИзмененийСистемы КАК ПросмотренныеОписанияИзмененийСистемы
	|		ПО (ПросмотренныеОписанияИзмененийСистемы.Пользователь = &Пользователь)
	|			И ОписанияИзмененийСистемы.Ссылка = ПросмотренныеОписанияИзмененийСистемы.ОписаниеИзменений
	|ГДЕ
	|	НЕ ОписанияИзмененийСистемы.ПометкаУдаления
	|	И НЕ ОписанияИзмененийСистемы.Устарело
	|	И ОписанияИзмененийСистемы.ДатаПубликации <= &ТекущаяДата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОписанияИзмененийСистемы.ДатаСоздания УБЫВ";
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы = СписокОписаний.Добавить();
			СтрокаТаблицы.Представление = СтрШаблон("Изменения от %1", Формат(Выборка.ДатаСоздания, "ДФ='dd MMMM yyyy'"));
		
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтметитьОписаниеПрочитанным(Знач Описание, Знач ДатаСозданияОписания)
	
	РегистрыСведений.ПросмотренныеОписанияИзмененийСистемы.ДобавитьЗапись(Описание, ДатаСозданияОписания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьHTMLТекстОписания(Знач Описание)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОписанияИзмененийСистемы.Описание КАК Описание
	|ИЗ
	|	Справочник.ОписанияИзмененийСистемы КАК ОписанияИзмененийСистемы
	|ГДЕ
	|	ОписанияИзмененийСистемы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Описание);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка.Описание.Получить();  
		// Если описание содержит данный тег, то не сконвертированная страница под новый редактор, нужно отображать как есть 
		
		Если СтрНайти(Врег(Результат), Врег("<!doctype html>")) = 0 Тогда  		
			Результат = Справочники.ОписанияИзмененийСистемы.СоздатьHTMLДайджеста(Результат);
		КонецЕсли;
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьУсловноеОформление()
	
	// Создание условного оформления: если у строки из доступных значений установлен признак Избранное = Истина,
	// тогда необходимо установить для поля шрифт стиля ЖирныйТекстВспомогательныхДанных.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	// Установка условия
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СписокОписаний.Просмотрено");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование  = Истина;
	
	// Установка условного оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// Задание оформляемых полей
	ОформлениеПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ОформлениеПоля.Поле = Новый ПолеКомпоновкиДанных("СписокОписанийИзмененийПредставление");
	ОформлениеПоля.Использование = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

#Если Клиент Тогда
	
ПараметрыПослеАктивизацииСтроки = Новый Структура;
	
#КонецЕсли

#КонецОбласти
