///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет обработчики обновления
//
// Параметры:
//  Обработчики	 - ТаблицаЗначений	 - см. ПриложениеВызовСервера.ПолучитьОбработчикиДанных
//
Процедура ДобавлениеОбработчиковОбновления(Обработчики) Экспорт     
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "Справочники.ИнструментыСистемы.ПроверитьПредопределенныеЭлементы";
	
КонецПроцедуры

Процедура ДобавитьОтчет(Знач Наименование, Знач ОбъектМетаданных) Экспорт
	
	НовыйИнструмент = СоздатьЭлемент();
	
	НовыйИнструмент.Родитель = Справочники.ИнструментыСистемы.Отчеты;
	НовыйИнструмент.Наименование = Наименование;
	НовыйИнструмент.ОбъектМетаданных = ОбъектМетаданных;
	НовыйИнструмент.ВидОбъекта = "ФормаОбработки";
	НовыйИнструмент.БыстрыйДоступ = Истина;
	
	НовыйИнструмент.Записать();
	
КонецПроцедуры

// Проверяет предопределенные настройки
//
Процедура ЗаполнитьНастройкиПользователяПоУмолчанию(Знач Пользователь) Экспорт
	
	// Если пользователь установлен как руководитель филиала, то заполняем инструменты для руководителя
	// Если пользователь из филиала IT - инструменты разработчика 
	// Если пользователь из филиала QA - инструменты тестировщика
	// Во остальных случаях - инструменты заказчика.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Справочник.РолиПользователей.РуководительIT) КАК Роль,
	|	Филиалы.Руководитель КАК Пользователь
	|ПОМЕСТИТЬ РолиВГруппахРазработки
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|ГДЕ
	|	Филиалы.ТипФилиала <> ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.НеIT)
	|	И Филиалы.Руководитель = &Пользователь
	|	И Филиалы.Родитель = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.РолиПользователей.Разработчик),
	|	ЛичныеДелаСрезПоследних.Сотрудник
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(
	|			&ТекущаяДата,
	|			Сотрудник = &Пользователь
	|				И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО ((ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы)) = Филиалы.Ссылка)
	|			И (Филиалы.ТипФилиала = ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.IT))
	|			И (Филиалы.Руководитель <> &Пользователь)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.РолиПользователей.Тестировщик),
	|	ЛичныеДелаСрезПоследних.Сотрудник
	|ИЗ
	|	РегистрСведений.ЛичныеДела.СрезПоследних(
	|			&ТекущаяДата,
	|			Сотрудник = &Пользователь
	|				И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоЛичнымДелам.ПереведенВДругоеПодразделение)) КАК ЛичныеДелаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы КАК Филиалы
	|		ПО ((ВЫРАЗИТЬ(ЛичныеДелаСрезПоследних.Данные КАК Справочник.Филиалы)) = Филиалы.Ссылка)
	|			И (Филиалы.ТипФилиала = ЗНАЧЕНИЕ(Перечисление.ТипыФилиалов.QA))
	|			И (Филиалы.Руководитель <> &Пользователь)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РолиПользователейДоступныеИнструменты.Инструмент КАК Инструмент,
	|	РолиПользователейДоступныеИнструменты.Порядок КАК Порядок,
	|	РолиПользователейДоступныеИнструменты.ЭтоОтчет КАК ЭтоОтчет,
	|	&Пользователь КАК Пользователь
	|ИЗ
	|	Справочник.РолиПользователей.ДоступныеИнструменты КАК РолиПользователейДоступныеИнструменты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РолиВГруппахРазработки КАК РолиВГруппахРазработки
	|		ПО РолиПользователейДоступныеИнструменты.Ссылка = РолиВГруппахРазработки.Роль
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РолиПользователейДоступныеИнструменты.Инструмент КАК Инструмент,
	|	РолиПользователейДоступныеИнструменты.Порядок КАК Порядок,
	|	РолиПользователейДоступныеИнструменты.ЭтоОтчет КАК ЭтоОтчет,
	|	&Пользователь КАК Пользователь
	|ИЗ
	|	Справочник.РолиПользователей.ДоступныеИнструменты КАК РолиПользователейДоступныеИнструменты
	|ГДЕ
	|	РолиПользователейДоступныеИнструменты.Ссылка = ЗНАЧЕНИЕ(Справочник.РолиПользователей.Заказчик)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Пакеты = Запрос.ВыполнитьПакет();
	Количество = Пакеты.ВГраница();
		
	Если НЕ Пакеты[Количество - 1].Пустой() Тогда
		Выгрузка = Пакеты[Количество - 1].Выгрузить();
	Иначе
		Выгрузка = Пакеты[Количество].Выгрузить();
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ИзбранныеИнструментыПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Загрузить(Выгрузка);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ПолучитьВидыОбъектаМетаданных(Знач ОбъектМетаданных) Экспорт
	
	Результат = Новый СписокЗначений;
	ДанныеОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектМетаданных, "Родитель, Тип");
	
	Если ДанныеОбъекта.Тип = Перечисления.ТипыМетаданных.Команда Тогда
		Результат.Добавить("Команда", "Команда");
		
	ИначеЕсли ДанныеОбъекта.Родитель = Справочники.ИдентификаторыОбъектовМетаданных.Обработка
		ИЛИ ДанныеОбъекта.Родитель = Справочники.ИдентификаторыОбъектовМетаданных.Отчет
		ИЛИ ДанныеОбъекта.Родитель = Справочники.ИдентификаторыОбъектовМетаданных.ОбщаяФорма Тогда
		
		Результат.Добавить("ФормаОбработки", "Форма");
		
	Иначе
		Результат.Добавить("ФормаОбъекта", "Форма объекта");
		Результат.Добавить("ФормаСписка", "Форма списка");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьОсновнойИнструмент(Знач Пользователь) Экспорт
	
	ИмяФормы = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторыОбъектовМетаданных.ПолноеИмяФормы КАК ПолноеИмяФормы,
	|	ИнструментыСистемы.ВидОбъекта КАК ВидОбъекта
	|ИЗ
	|	РегистрСведений.ИзбранныеИнструментыПользователей КАК ИзбранныеИнструментыПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнструментыСистемы КАК ИнструментыСистемы
	|		ПО ИзбранныеИнструментыПользователей.Инструмент = ИнструментыСистемы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|		ПО (ИнструментыСистемы.ОбъектМетаданных = ИдентификаторыОбъектовМетаданных.Ссылка)
	|ГДЕ
	|	ИзбранныеИнструментыПользователей.Пользователь = &Пользователь
	|	И ИнструментыСистемы.БыстрыйДоступ
	|	И НЕ ИнструментыСистемы.ПометкаУдаления
	|	И НЕ ИзбранныеИнструментыПользователей.ЭтоОтчет
	|	И ИнструментыСистемы.ВидОбъекта <> ""Команда""
	|	И ИнструментыСистемы.ВидОбъекта <> ""ФормаОбъекта""
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИзбранныеИнструментыПользователей.Порядок";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если Выборка.ВидОбъекта = "ФормаОбработки" Тогда
			ИмяФормы = СтрШаблон("%1.Форма", Выборка.ПолноеИмяФормы);
		ИначеЕсли Выборка.ВидОбъекта = "ФормаСписка" Тогда
			ИмяФормы = СтрШаблон("%1.ФормаСписка", Выборка.ПолноеИмяФормы);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяФормы;
	
КонецФункции

Процедура ПроверитьПредопределенныеЭлементы() Экспорт 
	
	ИнструментыСистемы = Новый Соответствие;
	ИконкиИнструментов = ПолучитьМакет("ИконкиИнструментов");
	
	РазделМои = ЗаполнитьПредопределенныйЭлемент("Мои", "Мои", ПолучитьИконку(ИконкиИнструментов, "РазделМои"), 0);
	ДобавитьИнструмент(ИнструментыСистемы, РазделМои, "Задачи за период", "Обработка.ЗадачиЗаПериод", "ФормаОбработки", 0, ПолучитьИконку(ИконкиИнструментов, "ЗадачиЗаПериод"));
	ДобавитьИнструмент(ИнструментыСистемы, РазделМои, "Задачи на тестирование", "Отчет.ЗадачиНаТестирование", "ФормаОбработки", 1, ПолучитьИконку(ИконкиИнструментов, "ЗадачиНаТестирование"));
	ДобавитьИнструмент(ИнструментыСистемы, РазделМои, "Мои задачи", "Обработка.МоиЗадачи", "ФормаОбработки", 2, ПолучитьИконку(ИконкиИнструментов, "МоиЗадачи"));
	ДобавитьИнструмент(ИнструментыСистемы, РазделМои, "Мои задачи QA", "Обработка.МоиЗадачиQA", "ФормаОбработки", 3, ПолучитьИконку(ИконкиИнструментов, "МоиЗадачиQA"));
	ДобавитьИнструмент(ИнструментыСистемы, РазделМои, "Заявки на доработку", "Документ.ЗаявкаНаРазработку.Команда.ЗаявкиНаДоработку", "Команда", 4, ПолучитьИконку(ИконкиИнструментов, "ЗаявкиНаДоработку"), , , , "Документы.ЗаявкаНаРазработку.РассчитатьЗначениеСчетчикаЗаявокНаДоработку");
	ДобавитьИнструмент(ИнструментыСистемы, РазделМои, "Созданные мной", "Обработка.СозданныеМной", "ФормаОбработки", 5, ПолучитьИконку(ИконкиИнструментов, "СозданныеМной"));
	
	РазделДобавить = ЗаполнитьПредопределенныйЭлемент("Добавить", "Добавить", ПолучитьИконку(ИконкиИнструментов, "РазделДобавить"), 1);
	ДобавитьИнструмент(ИнструментыСистемы, РазделДобавить, "Быстрое создание задачи", "Документ.Задача.Команда.БыстроеСозданиеЗадачи", "Команда", 0, ПолучитьИконку(ИконкиИнструментов, "БыстроеСозданиеЗадачи"));
	ДобавитьИнструмент(ИнструментыСистемы, РазделДобавить, "Внутреннее задание", "Документ.ВнутреннееЗадание", "ФормаОбъекта", 1, ПолучитьИконку(ИконкиИнструментов, "ДобавитьВнутреннееЗадание"), , , "Создать внутреннее задание");
	ДобавитьИнструмент(ИнструментыСистемы, РазделДобавить, "Внутренние трудозатраты", "Документ.ВнутренниеТрудозатраты", "ФормаОбъекта", 2, ПолучитьИконку(ИконкиИнструментов, "ДобавитьВнутренниеТрудозатраты"), , , "Создать внутренние трудозатраты");
	ДобавитьИнструмент(ИнструментыСистемы, РазделДобавить, "Дайджест", "ОбщаяКоманда.ОткрытьСозданиеПлановогоДайджеста", "Команда", 3, , , Ложь);
	ДобавитьИнструмент(ИнструментыСистемы, РазделДобавить, "Заявку на разработку", "Документ.ЗаявкаНаРазработку", "ФормаОбъекта", 4, ПолучитьИконку(ИконкиИнструментов, "ДобавитьЗаявкуНаРазработку"), , , "Создать заявку на разработку");
	ДобавитьИнструмент(ИнструментыСистемы, РазделДобавить, "Задачу", "Документ.Задача", "ФормаОбъекта", 5, ПолучитьИконку(ИконкиИнструментов, "ДобавитьЗадачу"), , , "Создать задачу");
	ДобавитьИнструмент(ИнструментыСистемы, РазделДобавить, "Проект", "Справочник.Проекты", "ФормаОбъекта", 6, ПолучитьИконку(ИконкиИнструментов, "ДобавитьПроект"), , , "Создать проект");
	
	РазделСпискиДокументов = ЗаполнитьПредопределенныйЭлемент("СпискиДокументов", "Списки документов", ПолучитьИконку(ИконкиИнструментов, "РазделСпискиДокументов"), 2);
	ДобавитьИнструмент(ИнструментыСистемы, РазделСпискиДокументов, "Внутренние задания", "Документ.ВнутреннееЗадание", "ФормаСписка", 0, ПолучитьИконку(ИконкиИнструментов, "ВнутренниеЗадания"));
	ДобавитьИнструмент(ИнструментыСистемы, РазделСпискиДокументов, "Внутренние трудозатраты", "Документ.ВнутренниеТрудозатраты", "ФормаСписка", 1, ПолучитьИконку(ИконкиИнструментов, "ВнутренниеТрудозатраты"));
	ДобавитьИнструмент(ИнструментыСистемы, РазделСпискиДокументов, "Заявки на разработку", "Документ.ЗаявкаНаРазработку", "ФормаСписка", 2, ПолучитьИконку(ИконкиИнструментов, "ЗаявкиНаРазработку"));
	ДобавитьИнструмент(ИнструментыСистемы, РазделСпискиДокументов, "Задачи", "Документ.Задача", "ФормаСписка", 3, ПолучитьИконку(ИконкиИнструментов, "Задачи"));
	ДобавитьИнструмент(ИнструментыСистемы, РазделСпискиДокументов, "Проекты", "Справочник.Проекты", "ФормаСписка", 4, ПолучитьИконку(ИконкиИнструментов, "Проекты"));
	ДобавитьИнструмент(ИнструментыСистемы, РазделСпискиДокументов, "Спринты", "Документ.Спринт", "ФормаСписка", 5, ПолучитьИконку(ИконкиИнструментов, "Спринты"));
	
	РазделПланирование = ЗаполнитьПредопределенныйЭлемент("Планирование", "Планирование", ПолучитьИконку(ИконкиИнструментов, "РазделПланирование"), 3);
	ДобавитьИнструмент(ИнструментыСистемы, РазделПланирование, "Задачи на разработку", "Обработка.ЗадачиНаРазработку", "ФормаОбработки", 0, ПолучитьИконку(ИконкиИнструментов, "ЗадачиНаРазработку"));
	ДобавитьИнструмент(ИнструментыСистемы, РазделПланирование, "Канбан", "Обработка.Канбан", "ФормаОбработки", 1, ПолучитьИконку(ИконкиИнструментов, "Канбан"));
	ДобавитьИнструмент(ИнструментыСистемы, РазделПланирование, "На разработку QA", "Обработка.РазработкаQA", "ФормаОбработки", 2, ПолучитьИконку(ИконкиИнструментов, "НаРазработкуQA"));
	ДобавитьИнструмент(ИнструментыСистемы, РазделПланирование, "Очередь заявок", "Обработка.ОчередьЗаявок", "ФормаОбработки", 3, ПолучитьИконку(ИконкиИнструментов, "ОчередьЗаявок"));
	ДобавитьИнструмент(ИнструментыСистемы, РазделПланирование, "Планируемые работы по задачам", "Обработка.ПланируемыеРаботыПоЗадачам", "ФормаОбработки", 4, ПолучитьИконку(ИконкиИнструментов, "ПланируемыеРаботыПоЗадачам"));
	ДобавитьИнструмент(ИнструментыСистемы, РазделПланирование, "Пул на тестирование", "Обработка.ПулНаТестирование", "ФормаОбработки", 5, ПолучитьИконку(ИконкиИнструментов, "ПулНаТестирование"), , , , "Обработки.ПулНаТестирование.РассчитатьЗначениеСчетчика");
	
	РазделКонтроль = ЗаполнитьПредопределенныйЭлемент("Контроль", "Контроль", ПолучитьИконку(ИконкиИнструментов, "РазделКонтроль"), 4);
	ДобавитьИнструмент(ИнструментыСистемы, РазделКонтроль, "Актуализация заявок", "Обработка.АктуализацияЗаявок", "ФормаОбработки", 0, ПолучитьИконку(ИконкиИнструментов, "АктуализацияЗаявок"), , , , "Обработки.АктуализацияЗаявок.РассчитатьЗначениеСчетчика");
	ДобавитьИнструмент(ИнструментыСистемы, РазделКонтроль, "Вернутся на тестирование", "Обработка.ВернутсяНаТестирование", "ФормаОбработки", 1, ПолучитьИконку(ИконкиИнструментов, "ВернутсяНаТестирование"));
	ДобавитьИнструмент(ИнструментыСистемы, РазделКонтроль, "Контроль", "Обработка.КонтрольЗадач", "ФормаОбработки", 2, ПолучитьИконку(ИконкиИнструментов, "Контроль"));
	ДобавитьИнструмент(ИнструментыСистемы, РазделКонтроль, "Проекты по специалисту", "Отчет.ПроектыПоСпециалисту", "ФормаОбработки", 3, ПолучитьИконку(ИконкиИнструментов, "ПроектыПоСпециалисту"));
	ДобавитьИнструмент(ИнструментыСистемы, РазделКонтроль, "Разработка", "Обработка.Разработка", "ФормаОбработки", 4, ПолучитьИконку(ИконкиИнструментов, "Разработка"));
	ДобавитьИнструмент(ИнструментыСистемы, РазделКонтроль, "Текущие работы по заявкам", "Обработка.ТекущиеРаботыПоЗаявкам", "ФормаОбработки", 5, ПолучитьИконку(ИконкиИнструментов, "ТекущиеРаботыПоЗаявкам"));
	ДобавитьИнструмент(ИнструментыСистемы, РазделКонтроль, "Управление нагрузкой", "Обработка.УправлениеНагрузкой", "ФормаОбработки", 6, ПолучитьИконку(ИконкиИнструментов, "УправлениеНагрузкой"));
	
	РазделТрудозатраты = ЗаполнитьПредопределенныйЭлемент("Трудозатраты", "Трудозатраты", ПолучитьИконку(ИконкиИнструментов, "РазделТрудозатраты"), 5);
	ДобавитьИнструмент(ИнструментыСистемы, РазделТрудозатраты, "Занесение трудозатрат", "Обработка.ЗанесениеТрудозатрат", "ФормаОбработки", 0, ПолучитьИконку(ИконкиИнструментов, "ЗанесениеТрудозатрат"));
	ДобавитьИнструмент(ИнструментыСистемы, РазделТрудозатраты, "Отсутствие на рабочем месте", "Документ.ОтсутствияНаРабочемМесте", "ФормаСписка", 1, ПолучитьИконку(ИконкиИнструментов, "ОтсутствиеНаРабочемМесте"));
	ДобавитьИнструмент(ИнструментыСистемы, РазделТрудозатраты, "Табель рабочего времени", "Отчет.ТабельРабочегоВремени", "ФормаОбработки", 2, ПолучитьИконку(ИконкиИнструментов, "ТабельРабочегоВремени"));
	ДобавитьИнструмент(ИнструментыСистемы, РазделТрудозатраты, "Трудозатраты", "Отчет.Трудозатраты", "ФормаОбработки", 3, ПолучитьИконку(ИконкиИнструментов, "Трудозатраты"));
	
	РазделУправление = ЗаполнитьПредопределенныйЭлемент("Управление", "Управление", ПолучитьИконку(ИконкиИнструментов, "РазделУправление"), 6);
	ДобавитьИнструмент(ИнструментыСистемы, РазделУправление, "Дата запрета изменения данных", "ОбщаяКоманда.ДатаЗапретаИзмененияДанных", "Команда", 0, "", "", Ложь);
	
	РазделНастройкаПроцессаФилиала = ЗаполнитьПредопределенныйЭлемент("НастройкаПроцессаФилиала", "Настройка процесса филиала", ПолучитьИконку(ИконкиИнструментов, "РазделНастройкаПроцессаФилиала"), 7);
	ДобавитьИнструмент(ИнструментыСистемы, РазделНастройкаПроцессаФилиала, "Группы заказчиков", "Справочник.ГруппыЗаказчиковНаправлений.Команда.УправлениеГруппамиЗаказчиков", "Команда", 0, ПолучитьИконку(ИконкиИнструментов, "ГруппыЗаказчиков"));
	ДобавитьИнструмент(ИнструментыСистемы, РазделНастройкаПроцессаФилиала, "Настройки филиала", "Обработка.УправлениеНастройками", "ФормаОбработки", 1, ПолучитьИконку(ИконкиИнструментов, "НастройкиФилиала"), "ДоступностьНастройкиФилиалов");
	ДобавитьИнструмент(ИнструментыСистемы, РазделНастройкаПроцессаФилиала, "Продукты", "Справочник.Продукты", "ФормаСписка", 2, ПолучитьИконку(ИконкиИнструментов, "Продукты"));
	
	РазделПрочие = ЗаполнитьПредопределенныйЭлемент("Прочие", "Прочие", ПолучитьИконку(ИконкиИнструментов, "РазделПрочие"), 8);
	ДобавитьИнструмент(ИнструментыСистемы, РазделПрочие, "Общие настройки системы", "Обработка.ПанельАдминистрирования.Команда.ОбщиеНастройки", "Команда", 0, , , Ложь);
	ДобавитьИнструмент(ИнструментыСистемы, РазделПрочие, "Обслуживание", "Обработка.ПанельАдминистрирования.Команда.Обслуживание", "Команда", 1, , , Ложь);
	
	РазделМоиНастройки = ЗаполнитьПредопределенныйЭлемент("МоиНастройки", "Мои настройки", ПолучитьИконку(ИконкиИнструментов, "РазделМоиНастройки"), 9);
	ДобавитьИнструмент(ИнструментыСистемы, РазделМоиНастройки, "Мои активные сеансы", "Обработка.ОтключениеСеансов", "ФормаОбработки", 0, ПолучитьИконку(ИконкиИнструментов, "МоиАктивныеСеансы"));
	ДобавитьИнструмент(ИнструментыСистемы, РазделМоиНастройки, "Настройки системы", "Обработка.НастройкиПользователя", "ФормаОбработки", 1, , , Ложь);
	ДобавитьИнструмент(ИнструментыСистемы, РазделМоиНастройки, "Сменить пароль", "ОбщаяКоманда.СменитьПароль", "Команда", 2, , , Ложь);
	ДобавитьИнструмент(ИнструментыСистемы, РазделМоиНастройки, "Токен API", "ОбщаяКоманда.РаботаСТокеном", "Команда", 3, , , Ложь);
	
	РазделУправлениеУслугами = ЗаполнитьПредопределенныйЭлемент("УправлениеУслугами", "Управление услугами", ПолучитьИконку(ИконкиИнструментов, "РазделУправлениеУслугами"), 10, "ДоступностьУправлениеУслугами");
	ДобавитьИнструмент(ИнструментыСистемы, РазделУправлениеУслугами, "Услуги", "Справочник.Услуги", "ФормаСписка", 0, , , Ложь);
	ДобавитьИнструмент(ИнструментыСистемы, РазделУправлениеУслугами, "Установка стоимости услуг", "Документ.УстановкаСтоимостиУслуг", "ФормаСписка", 1, , , Ложь);
	ДобавитьИнструмент(ИнструментыСистемы, РазделУправлениеУслугами, "Оказание услуг юридическому лицу", "Документ.ОказаниеУслугЮридическомуЛицу", "ФормаСписка", 2, , , Ложь);
	
	ЗаполнитьПредопределенныйЭлемент("Отчеты", "Отчеты", ПолучитьИконку(ИконкиИнструментов, "РазделОтчеты"));
	ЗаполнитьПредопределенныйЭлемент("Закрепленные", "Закрепленные");
	
	Справочники.РолиПользователей.ЗаполнитьИнструментыРолей(ИнструментыСистемы);
	
КонецПроцедуры

Функция СписокИнструментов() Экспорт
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	Данные = Новый Структура;
	ЭтоАдминистратор = РольДоступна(Метаданные.Роли.Администратор);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИзбранныеИнструментыПользователей.Инструмент КАК Инструмент,
	|	ИзбранныеИнструментыПользователей.ЭтоОтчет КАК ЭтоОтчет,
	|	ИзбранныеИнструментыПользователей.Порядок КАК Порядок,
	|	ИнструментыСистемы.ВидОбъекта КАК ВидОбъекта
	|ПОМЕСТИТЬ ИзбранныеИнструменты
	|ИЗ
	|	РегистрСведений.ИзбранныеИнструментыПользователей КАК ИзбранныеИнструментыПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнструментыСистемы КАК ИнструментыСистемы
	|		ПО ИзбранныеИнструментыПользователей.Инструмент = ИнструментыСистемы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|		ПО (ИнструментыСистемы.ОбъектМетаданных = ИдентификаторыОбъектовМетаданных.Ссылка)
	|ГДЕ
	|	ИзбранныеИнструментыПользователей.Пользователь = &Пользователь
	|	И ИнструментыСистемы.БыстрыйДоступ
	|	И НЕ ИнструментыСистемы.ПометкаУдаления
	|	И НЕ ИдентификаторыОбъектовМетаданных.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнструментыСистемы.Ссылка КАК Ссылка,
	|	ИнструментыСистемы.Родитель КАК Родитель,
	|	ИнструментыСистемы.Наименование КАК Наименование,
	|	ИнструментыСистемы.БыстрыйДоступ КАК БыстрыйДоступ,
	|	ИнструментыСистемы.ВидОбъекта КАК ВидОбъекта,
	|	ИнструментыСистемы.Иконка КАК Иконка,
	|	ИнструментыСистемы.ИмяДляБыстрогоДоступа КАК ИмяДляБыстрогоДоступа,
	|	ИнструментыСистемы.МетодОпределенияДоступности КАК МетодОпределенияДоступности,
	|	ИнструментыСистемы.Порядок КАК Порядок,
	|	ИнструментыСистемы.ОбъектМетаданных КАК ОбъектМетаданных,
	|	ИнструментыСистемы.ЕстьСчетчик КАК ЕстьСчетчик,
	|	ИдентификаторыОбъектовМетаданных.ПолноеИмяФормы КАК ПолноеИмя,
	|	ИзбранныеИнструменты.Инструмент ЕСТЬ НЕ NULL  КАК Избранный,
	|	ЕСТЬNULL(ИзбранныеИнструменты.Порядок, 0) КАК ПорядокПанели
	|ПОМЕСТИТЬ ИнструментыСистемы
	|ИЗ
	|	Справочник.ИнструментыСистемы КАК ИнструментыСистемы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|		ПО ИнструментыСистемы.ОбъектМетаданных = ИдентификаторыОбъектовМетаданных.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИзбранныеИнструменты КАК ИзбранныеИнструменты
	|		ПО ИнструментыСистемы.Ссылка = ИзбранныеИнструменты.Инструмент
	|ГДЕ
	|	НЕ ИнструментыСистемы.ЭтоГруппа
	|	И НЕ ИнструментыСистемы.ПометкаУдаления
	|	И НЕ ИдентификаторыОбъектовМетаданных.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнструментыСистемы.Ссылка КАК Ссылка,
	|	ИнструментыСистемы.Иконка КАК Иконка,
	|	ИнструментыСистемы.Наименование КАК Наименование,
	|	ИнструментыСистемы.МетодОпределенияДоступности КАК МетодОпределенияДоступности,
	|	ИнструментыСистемы.Предопределенный КАК Предопределенный
	|ИЗ
	|	Справочник.ИнструментыСистемы КАК ИнструментыСистемы
	|ГДЕ
	|	ИнструментыСистемы.ЭтоГруппа
	|	И НЕ ИнструментыСистемы.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИнструментыСистемы.Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнструментыСистемы.Ссылка КАК Ссылка,
	|	ИнструментыСистемы.Родитель КАК Родитель,
	|	ИнструментыСистемы.Наименование КАК Наименование,
	|	ИнструментыСистемы.БыстрыйДоступ КАК БыстрыйДоступ,
	|	ИнструментыСистемы.ВидОбъекта КАК ВидОбъекта,
	|	ИнструментыСистемы.Иконка КАК Иконка,
	|	ИнструментыСистемы.ИмяДляБыстрогоДоступа КАК ИмяДляБыстрогоДоступа,
	|	ИнструментыСистемы.МетодОпределенияДоступности КАК МетодОпределенияДоступности,
	|	ИнструментыСистемы.Порядок КАК Порядок,
	|	ИнструментыСистемы.ЕстьСчетчик КАК ЕстьСчетчик,
	|	ИнструментыСистемы.ПолноеИмя КАК ПолноеИмя,
	|	ИнструментыСистемы.Избранный КАК Избранный,
	|	ИнструментыСистемы.ПорядокПанели КАК ПорядокПанели
	|ИЗ
	|	ИнструментыСистемы КАК ИнструментыСистемы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИнструментыСистемы КАК ОтчетыИнструменты
	|		ПО (ИнструментыСистемы.Родитель = ЗНАЧЕНИЕ(Справочник.ИнструментыСистемы.Отчеты))
	|			И (ОтчетыИнструменты.Родитель <> ЗНАЧЕНИЕ(Справочник.ИнструментыСистемы.Отчеты))
	|			И ИнструментыСистемы.ОбъектМетаданных = ОтчетыИнструменты.ОбъектМетаданных
	|ГДЕ
	|	ОтчетыИнструменты.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Родитель,
	|	ИнструментыСистемы.Порядок,
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзбранныеИнструменты.Инструмент КАК Инструмент,
	|	ИзбранныеИнструменты.ЭтоОтчет КАК ЭтоОтчет
	|ИЗ
	|	ИзбранныеИнструменты КАК ИзбранныеИнструменты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоОтчет,
	|	ИзбранныеИнструменты.Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзбранныеИнструменты.Инструмент КАК Инструмент
	|ИЗ
	|	ИзбранныеИнструменты КАК ИзбранныеИнструменты
	|ГДЕ
	|	НЕ ИзбранныеИнструменты.ЭтоОтчет
	|	И ИзбранныеИнструменты.ВидОбъекта <> ""Команда""
	|	И ИзбранныеИнструменты.ВидОбъекта <> ""ФормаОбъекта""
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИзбранныеИнструменты.Порядок";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	
	Пакет = Запрос.ВыполнитьПакет();
	
	ВыборкаГрупп = Пакет[2].Выбрать();
	ВыборкаИнструментов = Пакет[3].Выбрать();
	ВыборкаИзбранного = Пакет[4].Выбрать();
	ВозможныеНачальныеСтраницы = Пакет[5].Выгрузить().ВыгрузитьКолонку("Инструмент");
	
	ИзбранныеИнструменты = Новый Массив;
	ИзбранныеОтчеты = Новый Массив;
	
	Пока ВыборкаИзбранного.Следующий() Цикл
		ИдентификаторИнструмента = XMLСтрока(ВыборкаИзбранного.Инструмент);
		
		Если ВыборкаИзбранного.ЭтоОтчет Тогда
			ИзбранныеОтчеты.Добавить(ИдентификаторИнструмента);
		Иначе
			ИзбранныеИнструменты.Добавить(ИдентификаторИнструмента);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеИнструментов = Новый Массив;
	ГруппыИнструментов = Новый Массив;
	
	Пока ВыборкаГрупп.Следующий() Цикл
		ДоступностьГруппы = ИнструментыСервер.ПроверитьДоступность(ВыборкаГрупп, ЭтоАдминистратор, ТекущийПользователь);
		
		Инструменты = Новый Массив;
		ЭтоОтчеты = (ВыборкаГрупп.Ссылка = Справочники.ИнструментыСистемы.Отчеты);
		
		Пока ВыборкаИнструментов.НайтиСледующий(ВыборкаГрупп.Ссылка, "Родитель") Цикл
			ИдентификаторИнструмента = XMLСтрока(ВыборкаИнструментов.Ссылка);
			
			Если ДоступностьГруппы Тогда
				ЭтоНачальнаяСтраница = (ВозможныеНачальныеСтраницы[0] = ВыборкаИнструментов.Ссылка);
				ДанныеИнструмента = ПолучитьДанныеИнструмента(ВыборкаИнструментов, ЭтоОтчеты, ТекущийПользователь, 
					ЭтоАдминистратор, ЭтоНачальнаяСтраница);
			Иначе
				ДанныеИнструмента = Неопределено;
			КонецЕсли;
			
			Если ДанныеИнструмента <> Неопределено Тогда
				ДанныеИнструментов.Добавить(Новый Структура("id, data", ИдентификаторИнструмента, ДанныеИнструмента));
				Инструменты.Добавить(ИдентификаторИнструмента);
			ИначеЕсли ВыборкаИнструментов.Избранный Тогда
				Если ЭтоОтчеты Тогда
					Индекс = ИзбранныеОтчеты.Найти(ИдентификаторИнструмента);
					ИзбранныеОтчеты.Удалить(Индекс);
				Иначе
					Индекс = ИзбранныеИнструменты.Найти(ИдентификаторИнструмента);
					ИзбранныеИнструменты.Удалить(Индекс);
					
					Индекс = ВозможныеНачальныеСтраницы.Найти(ВыборкаИнструментов.Ссылка);
					
					Если Индекс <> Неопределено Тогда
						ВозможныеНачальныеСтраницы.Удалить(Индекс);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ВыборкаИнструментов.Сбросить();
		
		Если Инструменты.Количество() > 0 Тогда
			ДанныеГруппы = Новый Структура;
			ДанныеГруппы.Вставить("name", ВыборкаГрупп.Наименование);
			ДанныеГруппы.Вставить("icon", ВыборкаГрупп.Иконка);
			ДанныеГруппы.Вставить("tools", Инструменты);
			ДанныеГруппы.Вставить("reports", ЭтоОтчеты);
			ДанныеГруппы.Вставить("fixed", (ВыборкаГрупп.Ссылка = Справочники.ИнструментыСистемы.Закрепленные));
			
			ГруппыИнструментов.Добавить(ДанныеГруппы);
		КонецЕсли;
	КонецЦикла;
	
	Данные.Вставить("toolsData", ДанныеИнструментов);
	Данные.Вставить("toolsList", ГруппыИнструментов);
	Данные.Вставить("favoriteTools", ИзбранныеИнструменты);
	Данные.Вставить("favoriteReports", ИзбранныеОтчеты);
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДобавитьИнструмент(ИнструментыСистемы, Родитель, Наименование, ПолноеИмяОбъектаМетаданных, ВидОбъекта, Порядок, Иконка = "", МетодОпределенияДоступности = "", БыстрыйДоступ = Истина, ИмяДляБыстрогоДоступа = "", МетодРасчетаСчетчика = "") Экспорт
	
	ОбъектМетаданных = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("ПолноеИмяФормы", ПолноеИмяОбъектаМетаданных);
	
	СсылкаИнструмент = НайтиПоРеквизиту("ОбъектМетаданных", ОбъектМетаданных, Родитель);
	
	Если ЗначениеЗаполнено(СсылкаИнструмент) Тогда
		Инструмент = СсылкаИнструмент.ПолучитьОбъект();
	Иначе
		Инструмент = Справочники.ИнструментыСистемы.СоздатьЭлемент();
	КонецЕсли;
	
	Инструмент.Родитель = Родитель;
	Инструмент.Наименование = Наименование;
	Инструмент.ОбъектМетаданных = ОбъектМетаданных;
	Инструмент.ВидОбъекта = ВидОбъекта;
	Инструмент.Порядок = Порядок;
	Инструмент.БыстрыйДоступ = БыстрыйДоступ;
	Инструмент.ИмяДляБыстрогоДоступа = ИмяДляБыстрогоДоступа;
	Инструмент.МетодОпределенияДоступности = МетодОпределенияДоступности;
	Инструмент.Иконка = Иконка;
	
	Если ЗначениеЗаполнено(МетодРасчетаСчетчика) Тогда
		Инструмент.ЕстьСчетчик = Истина;
		Инструмент.МетодРасчетаСчетчика = МетодРасчетаСчетчика;
	КонецЕсли;
	
	Инструмент.Записать();
	
	Если БыстрыйДоступ Тогда
		Ключ = ?(ЗначениеЗаполнено(ИмяДляБыстрогоДоступа), ИмяДляБыстрогоДоступа, Наименование);
		ИнструментыСистемы.Вставить(Ключ, Инструмент.Ссылка);
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьПредопределенныйЭлемент(ИмяЭлемента, Наименование, Иконка = "", Порядок = 99, МетодОпределенияДоступности = "")
	
	Попытка
		СсылкаНаОбъект = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ИнструментыСистемы." + ИмяЭлемента);
	Исключение
		Сообщение = НСтр("ru = 'Предопределенный элемент ""%Параметр%"" не найден.'");
		Сообщение = СтрЗаменить(Сообщение, "%Параметр%", "Справочник.ИнструментыСистемы." + ИмяЭлемента);
		ВызватьИсключение Сообщение;
	КонецПопытки;
	
	Если СсылкаНаОбъект = Неопределено Тогда
		Объект = Справочники.ИнструментыСистемы.СоздатьГруппу();
	Иначе
		Объект = СсылкаНаОбъект.ПолучитьОбъект();
	КонецЕсли;
	
	Объект.ИмяПредопределенныхДанных = ИмяЭлемента;
	Объект.Наименование = Наименование;
	Объект.Иконка = Иконка;
	Объект.Порядок = Порядок;
	Объект.МетодОпределенияДоступности = МетодОпределенияДоступности;
	Объект.Записать();
	
	Возврат Объект.Ссылка;
	
КонецФункции

Функция ПолучитьДанныеИнструмента(Выборка, ЭтоОтчеты, ТекущийПользователь, ЭтоАдминистратор, ЭтоНачальнаяСтраница)
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Выборка.ПолноеИмя);
	
	Если ОбъектМетаданных = Неопределено
		ИЛИ НЕ ИнструментыСервер.ПроверитьДоступность(Выборка, ЭтоАдминистратор, ТекущийПользователь, ОбъектМетаданных) Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	
	Если НЕ ЭтоОтчеты Тогда
		Представление = Выборка.Наименование;
		
		Результат.Вставить("icon", Выборка.Иконка);
		Результат.Вставить("quickAccess", Выборка.БыстрыйДоступ);
		Результат.Вставить("quickAccessName", Выборка.ИмяДляБыстрогоДоступа);
		Результат.Вставить("counter", Выборка.ЕстьСчетчик);
	Иначе
		Представление = ОбъектМетаданных.Представление();
	КонецЕсли;
	
	НавигационнаяСсылка = ПолучитьСсылкуМеню(Выборка, ЭтоНачальнаяСтраница);
	
	Результат.Вставить("navLink", НавигационнаяСсылка);
	Результат.Вставить("favorite", Выборка.Избранный);
	Результат.Вставить("name", Представление);
	Результат.Вставить("report", ЭтоОтчеты);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИконку(ИконкиИнструментов, ИмяОбласти)
	
	Возврат ИконкиИнструментов.ПолучитьОбласть(ИмяОбласти).ПолучитьСтроку(2);
	
КонецФункции

Функция ПолучитьСсылкуМеню(ДанныеОбъекта, ЭтоНачальнаяСтраница)
	
	Результат = "";
	
	Если НЕ ЭтоНачальнаяСтраница Тогда
		Если ДанныеОбъекта.ВидОбъекта = "ФормаОбработки" Тогда
			ШаблонСсылки = "e1cib/app/%1";
		ИначеЕсли ДанныеОбъекта.ВидОбъекта = "Команда" Тогда
			ШаблонСсылки = "e1cib/command/%1";
		ИначеЕсли ДанныеОбъекта.ВидОбъекта = "ФормаОбъекта" Тогда
			ШаблонСсылки = "e1cib/command/%1.Создать";
		ИначеЕсли ДанныеОбъекта.ВидОбъекта = "ФормаСписка" Тогда
			ШаблонСсылки = "e1cib/list/%1";
		КонецЕсли;
		
		Результат = СтрШаблон(ШаблонСсылки, ДанныеОбъекта.ПолноеИмя);
	Иначе
		Результат = УправлениеИнструментамиРазработкиКлиентСервер.НавигационнаяСсылкаОткрытьНачальнуюСтраницу();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
