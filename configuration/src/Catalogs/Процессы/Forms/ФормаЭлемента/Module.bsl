///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьДеревоСтатусов();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоАдминистратор = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("Администратор");
	
	НовыйПроцесс = Параметры.Ключ.Пустая();
	
	НастроитьПолеВладельца(НовыйПроцесс);
	
	Если НовыйПроцесс Тогда
		СписокДоступныхФилиалов = Элементы.Филиал.СписокВыбора;
		
		Если СписокДоступныхФилиалов.Количество() > 0 Тогда
			Объект.Филиал = СписокДоступныхФилиалов[0].Значение;
		ИначеЕсли НЕ ЭтоАдминистратор Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет прав на создание процесса");
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.ТипОбъекта = Справочники.ТипыОбъектовВладельцев.Документ_Задача;
		КонецЕсли;   
		
		ЗаполнитьДеревоСтатусов();
	Иначе
		Если НЕ ЗначениеЗаполнено(Объект.Филиал) Тогда
			Элементы.Филиал.Видимость = Ложь;
		Иначе
			ЗаполнитьСписокИcпользуется();
		КонецЕсли;
	КонецЕсли;	
		
	ЗаполнитьДоступныеРоли();
	
	Если НЕ ЭтоАдминистратор И НЕ ЗначениеЗаполнено(Объект.Филиал) Тогда
		ЭтотОбъект.ТолькоПросмотр = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьДоступностьНастройкиСтатусов();
	
	Для Каждого Строка Из ДеревоСтатусов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоСтатусов.Развернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Для Каждого Строка Из ДеревоСтатусов.ПолучитьЭлементы() Цикл
		Для Каждого Подстрока Из Строка.ПолучитьЭлементы() Цикл
			Если НЕ ЗначениеЗаполнено(Подстрока.ВыбранныеРоли) Тогда
				Элементы.ДеревоСтатусов.ТекущаяСтрока = Подстрока.ПолучитьИдентификатор();
				ТекстСообщения = СтрШаблон("Для перехода ""%1 - %2"" не выбрано ни одной роли.", Строка.Статус, Подстрока.Статус);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			КонецЕсли;
		КонецЦикла; 
		
		Если Строка.ПолучитьЭлементы().Количество() = 0 
			И НЕ Строка.Статус = Справочники.СтатусыОбъектов.Решен И НЕ Строка.Статус = Справочники.СтатусыОбъектов.Отклонен Тогда
				Предупреждение = СтрШаблон("Не заполнен переход в статусе ""%1""", Строка.Статус);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Предупреждение, , , , Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	ДатаИзменения = ТекущаяДатаСеанса();
	
	ТаблицаНастроек = ТекущийОбъект.НастройкиСменыСтатусов.Выгрузить();
	НоваяТаблицаНастроек = ТаблицаНастроек.СкопироватьКолонки();
	
	Для Каждого Строка Из ДеревоСтатусов.ПолучитьЭлементы() Цикл
		Для Каждого Подстрока Из Строка.ПолучитьЭлементы() Цикл
			Для Каждого Роль Из Подстрока.ВыбранныеРоли Цикл
				Переход = НоваяТаблицаНастроек.Добавить();
				Переход.ТекущийСтатус = Строка.Статус;
				Переход.СледующийСтатус = Подстрока.Статус;
				Переход.Роль = Роль.Значение;
				Переход.БыстрыйДоступ = Подстрока.БыстрыйДоступ;
				Переход.ИдентификаторПерехода = Подстрока.ИдентификаторПерехода;
				Переход.Автор = ТекущийПользователь;
				Переход.ДатаИзменения = ДатаИзменения;
			КонецЦикла;
		КонецЦикла; 
	КонецЦикла;
	
	Отбор = Новый Структура("ТекущийСтатус, СледующийСтатус, ИдентификаторПерехода, Роль, БыстрыйДоступ");
	
	Для Каждого Строка Из ТаблицаНастроек Цикл
		ЗаполнитьЗначенияСвойств(Отбор, Строка);
		Строки = НоваяТаблицаНастроек.НайтиСтроки(Отбор);
		
		Если Строки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Строка, Строки[0], "Автор, ДатаИзменения");
		КонецЕсли; 
	КонецЦикла;
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого Строка Из ТекущийОбъект.ДействияПриПереходах Цикл
		Переход = НоваяТаблицаНастроек.Найти(Строка.ИдентификаторПерехода, "ИдентификаторПерехода");
		
		Если Переход = Неопределено Тогда
			УдаляемыеСтроки.Добавить(Строка);
		ИначеЕсли НЕ ЗначениеЗаполнено(Строка.Автор) Тогда
			Строка.Автор = ТекущийПользователь;
			Строка.ДатаИзменения = ДатаИзменения;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из УдаляемыеСтроки Цикл
		ТекущийОбъект.ДействияПриПереходах.Удалить(Строка);
	КонецЦикла;
	
	ТекущийОбъект.НастройкиСменыСтатусов.Загрузить(НоваяТаблицаНастроек);
	
	ОбработатьДействияПриПереходах(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДеревоСтатусов.ПолучитьЭлементы().Очистить();
	ЗаполнитьДеревоСтатусов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Для Каждого Элемент Из ДеревоСтатусов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоСтатусов.Развернуть(Элемент.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ФилиалПриИзменении(Элемент)
	
	ОбновитьДоступностьНастройкиСтатусов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПриПереходахОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоСтатусов.ТекущиеДанные;
	
	НоваяСтрока = Объект.ДействияПриПереходах.Добавить();
	НоваяСтрока.Действие = ВыбранноеЗначение;
	НоваяСтрока.ИдентификаторПерехода = ТекущиеДанные.ИдентификаторПерехода;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПриПереходахПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Ссылка", ПолучитьСписокДействий(Объект.ТипОбъекта));
		
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", ПараметрыОтбора);
	
	ОткрытьФорму("Справочник.ДействияПриСменеСтатуса.ФормаВыбора", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПриПереходахПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные.Действие = 
		ПредопределенноеЗначение("Справочник.ДействияПриСменеСтатуса.УдалениеИзОчередиТестирования") Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя удалить служебное действие");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатусовБыстрыйДоступПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоСтатусов.ТекущиеДанные;
	
	ЧастичнаяПометка = 2;
	
	Если ТекущиеДанные.БыстрыйДоступ = ЧастичнаяПометка Тогда
		ТекущиеДанные.БыстрыйДоступ = 0;
	КонецЕсли;
	
	РодительДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если РодительДанные = Неопределено Тогда
		Для Каждого Строка Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			Строка.БыстрыйДоступ = ТекущиеДанные.БыстрыйДоступ;
		КонецЦикла;
	Иначе
		ПересчитатьПометкуБыстрогоДоступаРодителя(РодительДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатусовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ДобавитьСтатус(ДеревоСтатусов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатусовПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ЗапрещеноУдалять Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		УдалитьСтатусСоВторогоУровня(ТекущиеДанные.Статус);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатусовПослеУдаления(Элемент)
	
	Для Каждого Строка Из ДеревоСтатусов.ПолучитьЭлементы() Цикл
		ПересчитатьПометкуБыстрогоДоступаРодителя(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатусовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("ИдентификаторПерехода", ТекущиеДанные.ИдентификаторПерехода);
	Элементы.ДействияПриПереходах.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	
	ЗаполнитьПометкиДоступныхРолей(ТекущиеДанные.ВыбранныеРоли);
	
	ЭтоСтатусПервогоУровня = (ТекущиеДанные.ПолучитьРодителя() = Неопределено);
	
	Элементы.ДоступныеРолиПометка.ТолькоПросмотр = ЭтоСтатусПервогоУровня;
	Элементы.ДействияПриПереходахДобавить.Доступность = НЕ ЭтоСтатусПервогоУровня;
	
	ЭтоКонечныйСтатус = ТекущиеДанные.Статус = ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Решен")
		ИЛИ ТекущиеДанные.Статус = ПредопределенноеЗначение("Справочник.СтатусыОбъектов.Отклонен");
	
	Элементы.ДеревоСтатусовДобавитьСтатус2Уровня.Доступность = НЕ ЭтоКонечныйСтатус;
	Элементы.ДеревоСтатусовКонтекстноеМенюДобавитьСтатус2Уровня.Доступность = НЕ ЭтоКонечныйСтатус;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеРолиПометкаПриИзменении(Элемент)
	
	ДанныеДерево = Элементы.ДеревоСтатусов.ТекущиеДанные;
	
	Если ДанныеДерево = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ДанныеРоли = Элементы.ДоступныеРоли.ТекущиеДанные;
	
	Если ДанныеРоли.Пометка Тогда
		ДанныеДерево.ВыбранныеРоли.Добавить(ДанныеРоли.Роль);
	Иначе
		ЭлементСписка = ДанныеДерево.ВыбранныеРоли.НайтиПоЗначению(ДанныеРоли.Роль);
		ДанныеДерево.ВыбранныеРоли.Удалить(ЭлементСписка);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаПриИзменении(Элемент)
	
	ОбновитьДоступностьНастройкиСтатусов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ДобавитьСтатус2Уровня(Команда)
	
	ТекущиеДанные = Элементы.ДеревоСтатусов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РодительСтроки = ТекущиеДанные.ПолучитьРодителя();
	
	Если РодительСтроки <> Неопределено Тогда
		ТекущиеДанные = РодительСтроки;
	КонецЕсли; 
	
	ДобавитьСтатус(ТекущиеДанные, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ВставитьСтатусПоПорядку(ДанныеСтатуса, Строки)
	
	// Список значений, который будет использован для сортировки
	СписокСортировки = Новый СписокЗначений;
	ФорматнаяСтрокаЧисла = "ЧЦ=3; ЧН=000; ЧВН=";
	СтатусУжеЕстьВСтроках = Ложь;
	
	// Заполнение списка значениями
	Для Каждого Строка Из Строки Цикл
		Если Строка.Статус = ДанныеСтатуса.Статус Тогда
			СтатусУжеЕстьВСтроках = Истина;
			Прервать;
		Иначе
			НомерВФормате = Формат(Строка.Порядок, ФорматнаяСтрокаЧисла);
			СтрокаСортировки = СтрШаблон("%1%2", НомерВФормате, Строка.Наименование);
			СписокСортировки.Добавить(Строка.Статус, СтрокаСортировки);
		КонецЕсли;
	КонецЦикла;
	
	Если СтатусУжеЕстьВСтроках Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Добавление в список нового статуса
	НомерВФормате = Формат(ДанныеСтатуса.Порядок, ФорматнаяСтрокаЧисла);
	СтрокаСортировки = СтрШаблон("%1%2", НомерВФормате, ДанныеСтатуса.Наименование);
	СписокСортировки.Добавить("НовыйСтатус", СтрокаСортировки);
	
	// Сортировка списка по представлению
	СписокСортировки.СортироватьПоПредставлению();
	
	// Итератор
	Индекс = 0;
	
	// Индекс элемента в коллекции, в который требуется вставить новую строку
	ЦелевойИндекс = Неопределено;
	
	// Перебираем строки статусов
	Для Каждого Строка Из Строки Цикл
		
		// Проверяем, если статус в строке отличается от статуса списке
		// сортировки, значит найдена позиция для вставки новой строки.
		НайденныйЭлемент = СписокСортировки.Получить(Индекс);
		Если НайденныйЭлемент <> Неопределено И НайденныйЭлемент.Значение <> Строка.Статус Тогда
			ЦелевойИндекс = Строки.Индекс(Строка);
			Прервать;
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	// Вставляем строку, если найдена позиция для новой строки,
	// или добавляем новую строку, если целевая позиция не найдена
	Если ЦелевойИндекс <> Неопределено Тогда
		НоваяСтрока = Строки.Вставить(ЦелевойИндекс);
	Иначе
		НоваяСтрока = Строки.Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтатуса);
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьСтатус(Родитель, ЭтоСтатусВторогоУровня = Ложь)
	
	СтрокиСтатусы = Родитель.ПолучитьЭлементы();
	ИсключаемыеСтатусы = ПолучитьВыбранныеСтатусы(СтрокиСтатусы);
	
	Если ЭтоСтатусВторогоУровня Тогда
		ИсключаемыеСтатусы.Добавить(Родитель.Статус);
	КонецЕсли; 
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИсключаемыеСтатусы", ИсключаемыеСтатусы);
	ПараметрыОткрытия.Вставить("Филиал", Объект.Филиал);
	ПараметрыОткрытия.Вставить("ВключатьСтатусыОбъектов", Истина);
	ПараметрыОткрытия.Вставить("ОткрытаИзФормыПроцесса", Истина);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Родитель", Родитель);
	ДополнительныеПараметры.Вставить("ЭтоСтатусВторогоУровня", ЭтоСтатусВторогоУровня);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьДобавлениеСтатуса", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Справочник.СтатусыОбъектов.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоСтатусов()
	
	КлючевыеСтатусы = Справочники.СтатусыОбъектов.ПолучитьКлючевыеСтатусы();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПроцессыНастройкиСменыСтатусов.ТекущийСтатус КАК ТекущийСтатус,
	|	ПроцессыНастройкиСменыСтатусов.СледующийСтатус КАК СледующийСтатус,
	|	ПроцессыНастройкиСменыСтатусов.Роль КАК Роль,
	|	ПроцессыНастройкиСменыСтатусов.БыстрыйДоступ КАК БыстрыйДоступ,
	|	ПроцессыНастройкиСменыСтатусов.ИдентификаторПерехода КАК ИдентификаторПерехода
	|ПОМЕСТИТЬ НастройкиСменыСтатуса
	|ИЗ
	|	&ПроцессыНастройкиСменыСтатусов КАК ПроцессыНастройкиСменыСтатусов
	|ГДЕ
	|	ПроцессыНастройкиСменыСтатусов.ТекущийСтатус <> ПроцессыНастройкиСменыСтатусов.СледующийСтатус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиСменыСтатуса.ТекущийСтатус КАК Статус,
	|	СтатусыОбъектов.Наименование КАК Наименование,
	|	СтатусыОбъектов.ИндексКартинки КАК ИндексКартинки,
	|	СтатусыОбъектов.Порядок КАК Порядок,
	|	ЛОЖЬ КАК ЗапрещеноУдалять
	|ПОМЕСТИТЬ ДанныеСтатусов
	|ИЗ
	|	НастройкиСменыСтатуса КАК НастройкиСменыСтатуса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО НастройкиСменыСтатуса.ТекущийСтатус = СтатусыОбъектов.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НастройкиСменыСтатуса.СледующийСтатус,
	|	СтатусыОбъектов.Наименование,
	|	СтатусыОбъектов.ИндексКартинки,
	|	СтатусыОбъектов.Порядок,
	|	ЛОЖЬ
	|ИЗ
	|	НастройкиСменыСтатуса КАК НастройкиСменыСтатуса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|		ПО НастройкиСменыСтатуса.СледующийСтатус = СтатусыОбъектов.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СтатусыОбъектов.Ссылка,
	|	СтатусыОбъектов.Наименование,
	|	СтатусыОбъектов.ИндексКартинки,
	|	СтатусыОбъектов.Порядок,
	|	ИСТИНА
	|ИЗ
	|	Справочник.СтатусыОбъектов КАК СтатусыОбъектов
	|ГДЕ
	|	СтатусыОбъектов.Ссылка В(&КлючевыеСтатусы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСтатусов.Статус КАК Статус,
	|	ДанныеСтатусов.Наименование КАК Наименование,
	|	ДанныеСтатусов.ИндексКартинки КАК ИндексКартинки,
	|	ДанныеСтатусов.Порядок КАК Порядок,
	|	МАКСИМУМ(ДанныеСтатусов.ЗапрещеноУдалять) КАК ЗапрещеноУдалять
	|ИЗ
	|	ДанныеСтатусов КАК ДанныеСтатусов
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеСтатусов.Статус,
	|	ДанныеСтатусов.Наименование,
	|	ДанныеСтатусов.ИндексКартинки,
	|	ДанныеСтатусов.Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиСменыСтатуса.ТекущийСтатус КАК ТекущийСтатус,
	|	НастройкиСменыСтатуса.СледующийСтатус КАК Статус,
	|	НастройкиСменыСтатуса.Роль КАК Роль,
	|	НастройкиСменыСтатуса.БыстрыйДоступ КАК БыстрыйДоступ,
	|	НастройкиСменыСтатуса.ИдентификаторПерехода КАК ИдентификаторПерехода,
	|	ДанныеСтатусов.Наименование КАК Наименование,
	|	ДанныеСтатусов.ИндексКартинки КАК ИндексКартинки,
	|	ДанныеСтатусов.Порядок КАК Порядок
	|ИЗ
	|	НастройкиСменыСтатуса КАК НастройкиСменыСтатуса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеСтатусов КАК ДанныеСтатусов
	|		ПО НастройкиСменыСтатуса.СледующийСтатус = ДанныеСтатусов.Статус";
	
	Запрос = Новый Запрос(ТекстЗапроса);                   
	ЗначениеОбъект = РеквизитФормыВЗначение("Объект");
	Запрос.УстановитьПараметр("КлючевыеСтатусы", КлючевыеСтатусы);
	Запрос.УстановитьПараметр("ПроцессыНастройкиСменыСтатусов", ЗначениеОбъект.НастройкиСменыСтатусов.Выгрузить());
	
	Пакет = Запрос.ВыполнитьПакет();
	МаксимальныйИндексПакета = Пакет.ВГраница();
	
	ДанныеСтатусов = Пакет.Получить(МаксимальныйИндексПакета - 1);
	НастройкиСменыСтатуса = Пакет.Получить(МаксимальныйИндексПакета);
	
	Если НЕ ДанныеСтатусов.Пустой() Тогда
		Дерево = РеквизитФормыВЗначение("ДеревоСтатусов");
		
		ВыборкаСтатусы = ДанныеСтатусов.Выбрать();
		Пока ВыборкаСтатусы.Следующий() Цикл
			НоваяСтрока = Дерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтатусы);
			НоваяСтрока.ЭтоГруппа = Истина;
		КонецЦикла;
		
		ВыборкаНастройки = НастройкиСменыСтатуса.Выбрать();
		Пока ВыборкаНастройки.Следующий() Цикл
			СтрокаРодитель = Дерево.Строки.Найти(ВыборкаНастройки.ТекущийСтатус, "Статус", Ложь);
			
			Переход = СтрокаРодитель.Строки.Найти(ВыборкаНастройки.Статус, "Статус", Ложь);
			Если Переход = Неопределено Тогда
				Переход = СтрокаРодитель.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(Переход, ВыборкаНастройки);
			КонецЕсли;
			
			Переход.ВыбранныеРоли.Добавить(ВыборкаНастройки.Роль);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Строка Из Дерево.Строки Цикл
		КоличествоПометок = Строка.Строки.Итог("БыстрыйДоступ");
		КоличествоСтрок = Строка.Строки.Количество();
		
		Если КоличествоПометок = 0 Тогда
			Строка.БыстрыйДоступ = 0;
		ИначеЕсли КоличествоСтрок = КоличествоПометок Тогда
			Строка.БыстрыйДоступ = 1;
		Иначе
			Строка.БыстрыйДоступ = 2;
		КонецЕсли; 
	КонецЦикла; 
	
	Дерево.Строки.Сортировать("Порядок, Наименование", Истина);
	ЗначениеВРеквизитФормы(Дерево, "ДеревоСтатусов");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеРоли()
	
	Роли = Новый Массив;
	Роли.Добавить(Справочники.РолиУчастников.Автор);
	Роли.Добавить(Справочники.РолиУчастников.Заказчик);
	Роли.Добавить(Справочники.РолиУчастников.Исполнитель); 
	
	Если Объект.ТипОбъекта = Справочники.ТипыОбъектовВладельцев.Документ_Задача Тогда
		Роли.Добавить(Справочники.РолиУчастников.Тестировщик);
		Роли.Добавить(Справочники.РолиУчастников.Ревьюер);                               
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РолиУчастников.Ссылка КАК Роль,
	|	РолиУчастников.Наименование КАК Наименование,
	|	ЛОЖЬ КАК Пометка
	|ИЗ
	|	Справочник.РолиУчастников КАК РолиУчастников
	|ГДЕ
	|	РолиУчастников.Ссылка В(&Роли)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Роли", Роли);
	
	Выборка = Запрос.Выполнить().Выбрать();  
	
	НоваяСтрока = ДоступныеРоли.Добавить();
	НоваяСтрока.Роль = Справочники.РолиУчастников.ВсеРоли;
	НоваяСтрока.Наименование = НоваяСтрока.Роль.Наименование;
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДоступныеРоли.Добавить(), Выборка); 
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПометкиДоступныхРолей(ВыбранныеРоли)
	
	Для Каждого Строка Из ДоступныеРоли Цикл
		Строка.Пометка = (ВыбранныеРоли.НайтиПоЗначению(Строка.Роль) <> Неопределено);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокИcпользуется()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиФилиалов.Филиал КАК Филиал
	|ИЗ
	|	РегистрСведений.НастройкиФилиалов КАК НастройкиФилиалов
	|ГДЕ
	|	НастройкиФилиалов.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.ПроцессУстановкиСтатусов)
	|	И (ВЫРАЗИТЬ(НастройкиФилиалов.Значение КАК Справочник.Процессы)) = &Процесс
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НастройкиФилиалов.Филиал
	|ИЗ
	|	РегистрСведений.НастройкиФилиалов КАК НастройкиФилиалов
	|ГДЕ
	|	НастройкиФилиалов.Настройка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыНастроекФилиалов.ПроцессУстановкиСтатусовВнутреннееЗадание)
	|	И (ВЫРАЗИТЬ(НастройкиФилиалов.Значение КАК Справочник.Процессы)) = &Процесс";
	
	Запрос.УстановитьПараметр("Процесс", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Используется.Добавить(Выборка.Филиал);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПолеВладельца(Знач ЭтоНовыйПроцесс)
	
	Если НЕ ЭтоАдминистратор Тогда
		ПолеВладельца = Элементы.Филиал;
		ПолеВладельца.КнопкаВыбора = Ложь;
				
		ФилиалыРуководителя = ПолучитьФилиалыРуководителя();
		КоличествоФилиалов = ФилиалыРуководителя.Количество();
		
		ВладелецДоступенДляВыбора = (ФилиалыРуководителя.НайтиПоЗначению(Объект.Филиал) <> Неопределено);
		
		Если КоличествоФилиалов > 0 Тогда
			ПолеВладельца.РежимВыбораИзСписка = ЭтоНовыйПроцесс ИЛИ ВладелецДоступенДляВыбора;
			СписокВыбора = ПолеВладельца.СписокВыбора;
			
			Для Каждого ЭлементСписка Из ФилиалыРуководителя Цикл
				ЗаполнитьЗначенияСвойств(СписокВыбора.Добавить(), ЭлементСписка);
			КонецЦикла;
						
			Если КоличествоФилиалов = 1 Тогда
				ПолеВладельца.Доступность = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ПолеВладельца.Доступность = ЭтоНовыйПроцесс ИЛИ ВладелецДоступенДляВыбора;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьНастройкиСтатусов()
	
	Если ЭтоАдминистратор Тогда
		ДоступностьНастройкиСтатусов = Истина;
	Иначе
		ДоступностьНастройкиСтатусов = (ЗначениеЗаполнено(Объект.Филиал) И ЗначениеЗаполнено(Объект.ТипОбъекта));
	КонецЕсли;
	
	Элементы.НастройкиПроцесса.ТолькоПросмотр = НЕ ДоступностьНастройкиСтатусов;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДействияПриПереходах(ТекущийОбъект)
	
	Действие = Справочники.ДействияПриСменеСтатуса.ДобавлениеВОчередьТестирования;
	СписокДействий = Новый СписокЗначений;
	СписокДействий.Добавить(Действие);
	СписокДействий.Добавить(Действие.ОбратноеДействие);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроцессыНастройкиСменыСтатусов.ТекущийСтатус КАК ТекущийСтатус,
	|	ПроцессыНастройкиСменыСтатусов.СледующийСтатус КАК СледующийСтатус,
	|	ПроцессыНастройкиСменыСтатусов.Роль КАК Роль,
	|	ПроцессыНастройкиСменыСтатусов.БыстрыйДоступ КАК БыстрыйДоступ,
	|	ПроцессыНастройкиСменыСтатусов.ИдентификаторПерехода КАК ИдентификаторПерехода
	|ПОМЕСТИТЬ НастройкиСменыСтатуса
	|ИЗ
	|	&ПроцессыНастройкиСменыСтатусов КАК ПроцессыНастройкиСменыСтатусов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроцессыДействияПриПереходах.Действие КАК Действие,
	|	ПроцессыДействияПриПереходах.ИдентификаторПерехода КАК ИдентификаторПерехода
	|ПОМЕСТИТЬ ДействияПриПереходах
	|ИЗ
	|	&ПроцессыДействияПриПереходах КАК ПроцессыДействияПриПереходах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиСменыСтатуса.ТекущийСтатус КАК ТекущийСтатус,
	|	НастройкиСменыСтатуса.СледующийСтатус КАК СледующийСтатус,
	|	НастройкиСменыСтатуса.ИдентификаторПерехода КАК ИдентификаторПерехода,
	|	ДействияПриПереходах.Действие КАК Действие
	|ПОМЕСТИТЬ ОтобранныеДействияДобавления
	|ИЗ
	|	НастройкиСменыСтатуса КАК НастройкиСменыСтатуса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДействияПриПереходах КАК ДействияПриПереходах
	|		ПО НастройкиСменыСтатуса.ИдентификаторПерехода = ДействияПриПереходах.ИдентификаторПерехода
	|			И (ДействияПриПереходах.Действие = ЗНАЧЕНИЕ(Справочник.ДействияПриСменеСтатуса.ДобавлениеВОчередьТестирования))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиСменыСтатуса.ТекущийСтатус КАК ТекущийСтатус,
	|	НастройкиСменыСтатуса.СледующийСтатус КАК СледующийСтатус,
	|	НастройкиСменыСтатуса.ИдентификаторПерехода КАК ИдентификаторПерехода,
	|	ДействияПриПереходах.Действие КАК Действие
	|ПОМЕСТИТЬ ОтобранныеДействияУдаления
	|ИЗ
	|	НастройкиСменыСтатуса КАК НастройкиСменыСтатуса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДействияПриПереходах КАК ДействияПриПереходах
	|		ПО НастройкиСменыСтатуса.ИдентификаторПерехода = ДействияПриПереходах.ИдентификаторПерехода
	|			И (ДействияПриПереходах.Действие = ЗНАЧЕНИЕ(Справочник.ДействияПриСменеСтатуса.УдалениеИзОчередиТестирования))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиСменыСтатуса.ТекущийСтатус КАК ТекущийСтатус,
	|	НастройкиСменыСтатуса.СледующийСтатус КАК СледующийСтатус,
	|	НастройкиСменыСтатуса.ИдентификаторПерехода КАК ИдентификаторПерехода
	|ПОМЕСТИТЬ ПереходыДляДобавления
	|ИЗ
	|	НастройкиСменыСтатуса КАК НастройкиСменыСтатуса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтобранныеДействияДобавления КАК ОтобранныеДействияДобавления
	|		ПО (ОтобранныеДействияДобавления.СледующийСтатус = НастройкиСменыСтатуса.ТекущийСтатус)
	|ГДЕ
	|	НастройкиСменыСтатуса.ТекущийСтатус <> НастройкиСменыСтатуса.СледующийСтатус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПереходыДляДобавления.ТекущийСтатус КАК ТекущийСтатус,
	|	ПереходыДляДобавления.СледующийСтатус КАК СледующийСтатус,
	|	ПереходыДляДобавления.ИдентификаторПерехода КАК ИдентификаторПерехода
	|ИЗ
	|	ПереходыДляДобавления КАК ПереходыДляДобавления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтобранныеДействияУдаления КАК ОтобранныеДействияУдаления
	|		ПО ПереходыДляДобавления.ИдентификаторПерехода = ОтобранныеДействияУдаления.ИдентификаторПерехода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтобранныеДействияДобавления КАК ОтобранныеДействияДобавления
	|		ПО ПереходыДляДобавления.ИдентификаторПерехода = ОтобранныеДействияДобавления.ИдентификаторПерехода
	|ГДЕ
	|	ОтобранныеДействияУдаления.Действие ЕСТЬ NULL
	|	И ОтобранныеДействияДобавления.Действие ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПереходыДляДобавления.ТекущийСтатус КАК ТекущийСтатус
	|ИЗ
	|	ПереходыДляДобавления КАК ПереходыДляДобавления
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиСменыСтатуса КАК НастройкиСменыСтатуса
	|		ПО (НастройкиСменыСтатуса.ТекущийСтатус = ПереходыДляДобавления.ТекущийСтатус)
	|			И (НастройкиСменыСтатуса.ТекущийСтатус = НастройкиСменыСтатуса.СледующийСтатус)
	|ГДЕ
	|	НастройкиСменыСтатуса.ТекущийСтатус ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтобранныеДействияУдаления.ТекущийСтатус КАК ТекущийСтатус,
	|	ОтобранныеДействияУдаления.ИдентификаторПерехода КАК ИдентификаторПерехода,
	|	ОтобранныеДействияУдаления.Действие КАК Действие
	|ИЗ
	|	ОтобранныеДействияУдаления КАК ОтобранныеДействияУдаления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтобранныеДействияДобавления КАК ОтобранныеДействияДобавления
	|		ПО ОтобранныеДействияУдаления.ТекущийСтатус = ОтобранныеДействияДобавления.СледующийСтатус
	|			И (ОтобранныеДействияДобавления.ТекущийСтатус <> ОтобранныеДействияДобавления.СледующийСтатус)
	|ГДЕ
	|	ОтобранныеДействияДобавления.Действие ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтобранныеДействияУдаления.ТекущийСтатус,
	|	ОтобранныеДействияУдаления.ИдентификаторПерехода,
	|	ОтобранныеДействияУдаления.Действие
	|ИЗ
	|	ОтобранныеДействияУдаления КАК ОтобранныеДействияУдаления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтобранныеДействияДобавления КАК ОтобранныеДействияДобавления
	|		ПО ОтобранныеДействияУдаления.ИдентификаторПерехода = ОтобранныеДействияДобавления.ИдентификаторПерехода";
	
	Запрос.УстановитьПараметр("ПроцессыНастройкиСменыСтатусов", ТекущийОбъект.НастройкиСменыСтатусов);
	Запрос.УстановитьПараметр("ПроцессыДействияПриПереходах", ТекущийОбъект.ДействияПриПереходах);
	Запрос.УстановитьПараметр("Действия", СписокДействий);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.ВГраница();
	
	ВыборкаДляДобавления = РезультатЗапроса[КоличествоПакетов - 2].Выбрать();
	Пока ВыборкаДляДобавления.Следующий() Цикл		
		НоваяСтрока = ТекущийОбъект.ДействияПриПереходах.Добавить();
		НоваяСтрока.Действие = Действие.ОбратноеДействие;
		НоваяСтрока.ИдентификаторПерехода = ВыборкаДляДобавления.ИдентификаторПерехода;
	КонецЦикла;
		
	ВыборкаДляДобавленияПерехода = РезультатЗапроса[КоличествоПакетов - 1].Выбрать();
	Пока ВыборкаДляДобавленияПерехода.Следующий() Цикл
		ИдентификаторПерехода = Новый УникальныйИдентификатор;
		
		СтрокаНастроек = ТекущийОбъект.НастройкиСменыСтатусов.Добавить();
		СтрокаНастроек.ТекущийСтатус = ВыборкаДляДобавленияПерехода.ТекущийСтатус;
		СтрокаНастроек.СледующийСтатус = ВыборкаДляДобавленияПерехода.ТекущийСтатус;
		СтрокаНастроек.ИдентификаторПерехода = ИдентификаторПерехода;
		СтрокаНастроек.Роль = Справочники.РолиУчастников.ВсеРоли;
		
		СтрокаДействий = ТекущийОбъект.ДействияПриПереходах.Добавить();
		СтрокаДействий.Действие = Действие;
		СтрокаДействий.ИдентификаторПерехода = ИдентификаторПерехода;
	КонецЦикла;
		
	ВыборкаДляУдаления = РезультатЗапроса[КоличествоПакетов].Выбрать();
	
	Пока ВыборкаДляУдаления.Следующий() Цикл
		СтрокаУдаления = ТекущийОбъект.ДействияПриПереходах.Найти(
			ВыборкаДляУдаления.ИдентификаторПерехода, "ИдентификаторПерехода");
			
		ТекущийОбъект.ДействияПриПереходах.Удалить(СтрокаУдаления);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ТекущийСтатус", ВыборкаДляУдаления.ТекущийСтатус);
		ПараметрыОтбора.Вставить("СледующийСтатус", ВыборкаДляУдаления.ТекущийСтатус);
		СтрокиСтатуса = ТекущийОбъект.НастройкиСменыСтатусов.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого Строка Из СтрокиСтатуса Цикл
			СтрокаДействия = ТекущийОбъект.ДействияПриПереходах.Найти(Строка.ИдентификаторПерехода, "ИдентификаторПерехода");
			ТекущийОбъект.ДействияПриПереходах.Удалить(СтрокаДействия);
			ТекущийОбъект.НастройкиСменыСтатусов.Удалить(Строка);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДобавлениеСтатуса(ДанныеСтатуса, ДополнительныеПараметры) Экспорт
	
	Если ДанныеСтатуса <> Неопределено Тогда   
		
		Модифицированность = Истина;
		НоваяСтрока = ВставитьСтатусПоПорядку(ДанныеСтатуса, ДополнительныеПараметры.Родитель.ПолучитьЭлементы());
		
		Если ДополнительныеПараметры.ЭтоСтатусВторогоУровня Тогда
			НоваяСтрока.ИдентификаторПерехода = Новый УникальныйИдентификатор;
			
			СтрокаПервогоУровня = ВставитьСтатусПоПорядку(ДанныеСтатуса, ДеревоСтатусов.ПолучитьЭлементы());
			Элементы.ДеревоСтатусов.Развернуть(ДополнительныеПараметры.Родитель.ПолучитьИдентификатор());
			
			Если СтрокаПервогоУровня <> Неопределено Тогда
				СтрокаПервогоУровня.ЭтоГруппа = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьПометкуБыстрогоДоступаРодителя(Родитель)
	
	Подчиненные = Родитель.ПолучитьЭлементы();
	КоличествоПометок = 0;
	
	Для Каждого Строка Из Подчиненные Цикл
		Если Строка.БыстрыйДоступ Тогда
			КоличествоПометок = КоличествоПометок + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Если КоличествоПометок = 0 Тогда
		Родитель.БыстрыйДоступ = 0;
	ИначеЕсли КоличествоПометок = Подчиненные.Количество() Тогда 
		Родитель.БыстрыйДоступ = 1;
	Иначе
		Родитель.БыстрыйДоступ = 2;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВыбранныеСтатусы(СтрокиСтатусы)
	
	ВыбранныеСтатусы = Новый Массив;
	
	Для Каждого Строка Из СтрокиСтатусы Цикл
		ВыбранныеСтатусы.Добавить(Строка.Статус);
	КонецЦикла;
	
	Возврат ВыбранныеСтатусы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокДействий(ТипОбъекта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДействияПриСменеСтатусаТипыОбъектов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДействияПриСменеСтатуса КАК ДействияПриСменеСтатуса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДействияПриСменеСтатуса.ТипыОбъектов КАК ДействияПриСменеСтатусаТипыОбъектов
	|		ПО ДействияПриСменеСтатуса.Ссылка = ДействияПриСменеСтатусаТипыОбъектов.Ссылка
	|ГДЕ
	|	ДействияПриСменеСтатусаТипыОбъектов.ТипОбъекта = &ТипОбъекта
	|	И НЕ ДействияПриСменеСтатуса.Служебный";
	
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат Список;
	
КонецФункции

&НаСервере
Функция ПолучитьФилиалыРуководителя()
	
	Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Филиалы.Ссылка КАК Филиал,
	|	Филиалы.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|ГДЕ
	|	НЕ Филиалы.ПометкаУдаления
	|	И Филиалы.Родитель = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
	|	И Филиалы.Руководитель = &Руководитель
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Филиалы.Ссылка,
	|	Филиалы.Наименование
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|ГДЕ
	|	НЕ Филиалы.ПометкаУдаления
	|	И Филиалы.Родитель = ЗНАЧЕНИЕ(Справочник.Филиалы.ПустаяСсылка)
	|	И Филиалы.ЗаместительРуководителя = &Руководитель";
	
	Запрос.УстановитьПараметр("Руководитель", ПараметрыСеанса.ТекущийПользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Филиал, Выборка.Наименование);
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УдалитьСтатусСоВторогоУровня(Знач Статус)
	
	Для Каждого ПервыйУровень Из ДеревоСтатусов.ПолучитьЭлементы() Цикл
		УдаляемыеСтроки = Новый Массив;
		ВторойУровень = ПервыйУровень.ПолучитьЭлементы();
		
		Для Каждого Строка Из ВторойУровень Цикл
			Если Строка.Статус = Статус Тогда
				УдаляемыеСтроки.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Строка Из УдаляемыеСтроки Цикл
			ВторойУровень.Удалить(Строка);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
