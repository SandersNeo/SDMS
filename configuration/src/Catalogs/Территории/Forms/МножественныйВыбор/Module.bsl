///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьДоступные();
	
	ЗаполнитьВыбранные(Параметры.Выбранные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СтрокаПоискаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	 УстановитьВидимостьРекурсивно(Истина, ПолучитьЗначенияПоСтрокеПоиска(Текст), Доступные.ПолучитьЭлементы());	
	
КонецПроцедуры                

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьВидимостьРекурсивно(Ложь, Новый Массив, Доступные.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	 УстановитьВидимостьРекурсивно(Истина, ПолучитьЗначенияПоСтрокеПоиска(СтрокаПоиска), Доступные.ПолучитьЭлементы());
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий таблицы "Выбранные"

&НаКлиенте
Процедура ВыбранныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ВыбранныеИсключить" Тогда
		НайденнаяСтрока = Выбранные.НайтиПоИдентификатору(ВыбраннаяСтрока);
		НайденнаяСтрока = Доступные.НайтиПоИдентификатору(НайденнаяСтрока.ИдентификаторСтрокиСписка);
		ИсключитьВыбранные(Найденнаястрока);
		ПроставитьПометкуРодителямПоПодчиненным(НайденнаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий таблицы "Доступные"

&НаКлиенте
Процедура ДоступныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	НайденнаяСтрока = Доступные.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если НайденнаяСтрока.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;	
	
	Если Поле.Имя = "ДоступныеПредставление" Тогда 
		НайденнаяСтрока.Пометка = НЕ НайденнаяСтрока.Пометка;
		
		ОбработатьИзменениеСтрокиДоступных(НайденнаяСтрока);	
		ПроставитьПометкуРодителямПоПодчиненным(НайденнаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеПометкаПриИзменении(Элемент)
		
	ТекущиеДанные = Элементы.Доступные.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Пометка = 2 Тогда
		ТекущиеДанные.Пометка = 0;
	КонецЕсли;
	
	ОбработатьИзменениеСтрокиДоступных(ТекущиеДанные);
	
	СтрокаДерева = ТекущиеДанные;
	
	ИзменитьПометкуРекурсия(СтрокаДерева.ПолучитьЭлементы(), СтрокаДерева.Пометка); 
	ПроставитьПометкуРодителямПоПодчиненным(СтрокаДерева);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗавершитьВыбор(Команда)
	
	Возвращаемые = Новый СписокЗначений;
	
	Если Выбранные.Количество() > 0 Тогда
		Для Каждого Строка Из Выбранные Цикл
			Возвращаемые.Добавить(Строка.Значение, Строка.Представление);
		КонецЦикла;
		
		Возвращаемые.СортироватьПоПредставлению();
	КонецЕсли;	
		
	ОповеститьОВыборе(Возвращаемые);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкуДоступных(Команда)
	
	Пометка = (Команда.Имя = "ОтметитьВсе");

	ИзменитьПометкуРекурсия(Доступные.ПолучитьЭлементы(), Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПоиск(Команда)
	
	СтрокаПоиска = "";
	
	УстановитьВидимостьРекурсивно(Ложь, Новый Массив, Доступные.ПолучитьЭлементы());  
	
	ПодключитьОбработчикОжидания("ОчиститьТекстРедактирования", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ДобавитьВыбранные(Строка)
	
	НоваяСтрокаВыбранных = Выбранные.Добавить();
	НоваяСтрокаВыбранных.Исключить = БиблиотекаКартинок.УдалитьЗначение;
	ЗаполнитьЗначенияСвойств(НоваяСтрокаВыбранных, Строка, "Значение, Представление");
	НоваяСтрокаВыбранных.ИдентификаторСтрокиСписка = Строка.ПолучитьИдентификатор();
	
	Строка.Пометка = Истина;
	Строка.ИдентификаторСтрокиСписка = НоваяСтрокаВыбранных.ПолучитьИдентификатор();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДерево(Выборка, СтрокиДерева)
	
	Пока Выборка.Следующий() Цикл
		ТипЗаписи = Выборка.ТипЗаписи();
		
		Если ТипЗаписи = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СтрокиДерева.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		ДочерниеСтроки = НоваяСтрока.ПолучитьЭлементы();
		
		Если ТипЗаписи = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			ДочерняяВыборка = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, Выборка.Группировка()); 
			НоваяСтрока.ЭтоГруппа = Истина;
		Иначе    
			ДочерняяВыборка = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);       
		КонецЕсли; 
		
		ЗаполнитьДерево(ДочерняяВыборка, ДочерниеСтроки); 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступные()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ФилиалыИерархияТерриторий.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ФилиалыИерархияТерриторий.Уровень) КАК Уровень
	|ПОМЕСТИТЬ УровеньТерриторииФилиала
	|ИЗ
	|	Справочник.Филиалы КАК Филиалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЮридическиеЛица КАК ЮридическиеЛица
	|		ПО Филиалы.ЮридическоеЛицо = ЮридическиеЛица.Ссылка
	|			И (НЕ Филиалы.ПометкаУдаления)
	|			И (ЮридическиеЛица.ЯвляетсяИТОрганизацией)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы.ИерархияТерриторий КАК ФилиалыИерархияТерриторий
	|		ПО Филиалы.Ссылка = ФилиалыИерархияТерриторий.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ФилиалыИерархияТерриторий.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФилиалыИерархияТерриторий.Территория КАК Значение,
	|	ПРЕДСТАВЛЕНИЕ(ФилиалыИерархияТерриторий.Территория) КАК Представление
	|ИЗ
	|	УровеньТерриторииФилиала КАК УровеньТерриторииФилиала
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Филиалы.ИерархияТерриторий КАК ФилиалыИерархияТерриторий
	|		ПО УровеньТерриторииФилиала.Ссылка = ФилиалыИерархияТерриторий.Ссылка
	|			И УровеньТерриторииФилиала.Уровень = ФилиалыИерархияТерриторий.Уровень
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФилиалыИерархияТерриторий.Территория
	|ИТОГИ ПО
	|	Значение ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ";
	#КонецОбласти
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	// Если в группе только один элемент, то выводить его в дерево не имеет смысла
	Пока Выборка.Количество() = 1 Цикл
		Выборка.Следующий();
		Выборка = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, Выборка.Группировка());
	КонецЦикла;
	
	ЗаполнитьДерево(Выборка, Доступные.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВыбранные(Знач СписокВыбранные)

	ЗаполнитьПометкиДереваРекурсия(Доступные.ПолучитьЭлементы(), СписокВыбранные);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПометкиДереваРекурсия(СтрокиДерева, Знач Список)
	
	Для Каждого Строка Из СтрокиДерева Цикл
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		
		Если ПодчиненныеСтроки.Количество() = 0 Тогда
			ЭлементСписка = Список.НайтиПоЗначению(Строка.Значение);
			
			Если ЭлементСписка <> Неопределено Тогда	
				НоваяСтрокаВыбранных = Выбранные.Добавить();
				НоваяСтрокаВыбранных.Исключить = БиблиотекаКартинок.УдалитьЗначение;
				ЗаполнитьЗначенияСвойств(НоваяСтрокаВыбранных, Строка, "Значение, Представление");
				НоваяСтрокаВыбранных.ИдентификаторСтрокиСписка = Строка.ПолучитьИдентификатор();
				
				Строка.Пометка = Истина;
				Строка.ИдентификаторСтрокиСписка = НоваяСтрокаВыбранных.ПолучитьИдентификатор();
			КонецЕсли;
		Иначе
			ЗаполнитьПометкиДереваРекурсия(ПодчиненныеСтроки, Список);
			ПроставитьПометкуПоПодчиненным(Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкуРекурсия(СтрокиДерева, Знач Пометка)
	
	Для Каждого Строка Из СтрокиДерева Цикл
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		
		Если ПодчиненныеСтроки.Количество() = 0 Тогда
			Если Строка.Пометка <> Пометка Тогда
				Строка.Пометка = Пометка;
				ОбработатьИзменениеСтрокиДоступных(Строка);
			КонецЕсли;
		Иначе
			ИзменитьПометкуРекурсия(ПодчиненныеСтроки, Пометка);
			ПроставитьПометкуПоПодчиненным(Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьВыбранные(Строка)
	
	НайденнаяСтрока = Выбранные.НайтиПоИдентификатору(Строка.ИдентификаторСтрокиСписка);
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Выбранные.Удалить(НайденнаяСтрока);
	КонецЕсли;	
	
	Строка.Пометка = Ложь;
	Строка.ИдентификаторСтрокиСписка = -1;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСтрокиДоступных(Строка)
	
	Если Строка.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если Строка.Пометка = Истина Тогда
		ДобавитьВыбранные(Строка);	
	Иначе
		ИсключитьВыбранные(Строка);	
	КонецЕсли;			
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекстРедактирования() Экспорт 
	
	Элементы.СтрокаПоиска.ОбновитьТекстРедактирования();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначенияПоСтрокеПоиска(СтрокаПоиска) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Справочник.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Территории КАК Справочник
	|ГДЕ
	|	НЕ Справочник.ПометкаУдаления
	|	И Справочник.Наименование ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", СтрШаблон("%%%1%%", СтрокаПоиска)); 
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПроставитьПометкуПоПодчиненным(Строка)   
		
	МаксПометка = 0;
	МинПометка = 1;
	
	Для Каждого Элемент Из Строка.ПолучитьЭлементы() Цикл 
		МаксПометка = Макс(МаксПометка, Элемент.Пометка);
		МинПометка = Мин(МинПометка, Элемент.Пометка);
	КонецЦикла;
	
	Строка.Пометка = ?(МинПометка = МаксПометка, МаксПометка, 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкуРодителямПоПодчиненным(Строка)
	
	СтрокаРодитель = Строка.ПолучитьРодителя();
	
	Пока СтрокаРодитель <> Неопределено Цикл
		ПроставитьПометкуПоПодчиненным(СтрокаРодитель);
		СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьРекурсивно(Скрыть, МассивВидимых, Строки, МаксСкрыть = Ложь)
	
	Для Каждого Строка Из Строки Цикл
		Если Строка.ЭтоГруппа Тогда 
			МаксСкрыть = Скрыть;
			УстановитьВидимостьРекурсивно(Скрыть, МассивВидимых, Строка.ПолучитьЭлементы(), МаксСкрыть);	
			Строка.Скрыть = МаксСкрыть; 
		Иначе           
			Если МассивВидимых.Найти(Строка.Значение) <> Неопределено Тогда 
				Строка.Скрыть = НЕ Скрыть;
				МаксСкрыть = Строка.Скрыть;
			Иначе
				Строка.Скрыть = Скрыть;
			КонецЕсли;	
		КонецЕсли;                       
	КонецЦикла;
	
КонецПроцедуры
		
#КонецОбласти
