///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет обработчики обновления
//
// Параметры:
//  Обработчики	 - ТаблицаЗначений	 - см. ПриложениеВызовСервера.ПолучитьОбработчикиДанных
//
Процедура ДобавлениеОбработчиковОбновления(Обработчики) Экспорт     
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "Справочники.ГруппыДоступа.ПроверитьПредопределенныеЭлементы";
	
КонецПроцедуры

// Проверяет предопределенные настройки
//
Процедура ПроверитьПредопределенныеЭлементы() Экспорт 
	
	Роли = Новый Массив;
	Роли.Добавить("РуководительПодразделения");
	Роли.Добавить("УправлениеПорядкомЗаявокНаРазработку");  
	
	ЗаполнитьПредопределенныйЭлемент("ЗаместителиРуководителейФилиалов", Роли);
	
	Роли = Новый Массив;
	Роли.Добавить("РуководительПодразделения");
	Роли.Добавить("УправлениеГруппамиЗаказчиковНаправлений");  
	Роли.Добавить("УправлениеПорядкомЗаявокНаРазработку");  

	ЗаполнитьПредопределенныйЭлемент("РуководителиФилиалов", Роли); 	
		
	Роли = Новый Массив;
	Роли.Добавить("РуководительГруппыРазработки");
	Роли.Добавить("СтаршийПрограммист");                  

	ЗаполнитьПредопределенныйЭлемент("РуководителиКомандИСтаршиеПрограммисты", Роли);
	
	Роли = Новый Массив;
	Роли.Добавить("ДобавлениеИзменениеОтсутствияНаРабочемМесте");
	Роли.Добавить("ИзменениеПорядкаЗадачВОчередиНаТестирование");                  
	Роли.Добавить("СтаршийПрограммист");                  
	Роли.Добавить("УправлениеГруппамиЗаказчиковНаправлений");                    

	ЗаполнитьПредопределенныйЭлемент("ЗаместителиРуководителейФилиаловIT", Роли);

	Роли = Новый Массив;
	Роли.Добавить("ДобавлениеИзменениеОтсутствияНаРабочемМесте");
	Роли.Добавить("ИзменениеПорядкаЗадачВОчередиНаТестирование");                  
	Роли.Добавить("СтаршийПрограммист");                  
	Роли.Добавить("РуководительГруппыРазработки");                  
	Роли.Добавить("УправлениеГруппамиЗаказчиковНаправлений");                    
    Роли.Добавить("УстановкаОграниченияРедактированияОписанияЗаявки");              
	
	ЗаполнитьПредопределенныйЭлемент("РуководителиФилиаловIT", Роли);    
	
КонецПроцедуры     

// Процедура - Добавить в группу доступа
//
// Параметры:
//  ГруппаДоступа	 - СправочникСсылка.ГруппыДоступа - Ссылка на Группу Доступа ( предопределенный )
//  Ссылка			 - СправочникСсылка - Ссылка на Справочник.Пользователи/Филиал/Должности 
//
Процедура Добавить(Знач ГруппаДоступа, Знач Ссылка) Экспорт
	
	ГруппаДоступаОбъект = ГруппаДоступа.ПолучитьОбъект();
	
	Если ГруппаДоступаОбъект.Участники.Найти(Ссылка) = Неопределено Тогда
		Попытка
			Участник = ГруппаДоступаОбъект.Участники.Добавить();
			Участник.Элемент = Ссылка;
			УстановитьПривилегированныйРежим(Истина);
			ГруппаДоступаОбъект.Записать();
			УстановитьПривилегированныйРежим(Ложь);
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации("ГруппыДоступа.Добавить", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Удалить из группы доступа
//
// Параметры:
//  ГруппаДоступа	 - СправочникСсылка.ГруппыДоступа - Ссылка на Группу Доступа ( предопределенный )
//  Ссылка			 - СправочникСсылка - Ссылка на Справочник.Пользователи/Филиал/Должности  
//
Процедура Удалить(Знач ГруппаДоступа, Знач Ссылка) Экспорт
	
	ГруппаДоступаОбъект = ГруппаДоступа.ПолучитьОбъект();
	ГруппаДоступаУчастники = ГруппаДоступаОбъект.Участники;
	НайденныйУчастник = ГруппаДоступаУчастники.Найти(Ссылка);
	
	Если НайденныйУчастник <> Неопределено Тогда
		Попытка
			ГруппаДоступаУчастники.Удалить(НайденныйУчастник);
			УстановитьПривилегированныйРежим(Истина);
			ГруппаДоступаОбъект.Записать();
			УстановитьПривилегированныйРежим(Ложь);
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации("ГруппыДоступа.Удалить", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Добавить руководителя в группу доступа
//
// Параметры:
//  ГруппаДоступа	 - СправочникСсылка.ГруппыДоступа - Ссылка на группу доступа
//  Пользователь	 - СправочникСсылка.Пользователи - Ссылка на пользователя
//
Процедура ДобавитьРуководителя(Знач ГруппаДоступа, Знач Пользователь) Экспорт
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Добавить(ГруппаДоступа, Пользователь);
	КонецЕсли;

КонецПроцедуры

// Удалить руководителя из группы доступа
//
// Параметры:
//  Филиал			- СправочникСсылка.Филиалы - Ссылка на филиал
//  ГруппаДоступа	- СправочникСсылка.ГруппыДоступа - Ссылка на группу доступа
//  Пользователь	- СправочникСсылка.Пользователи - Ссылка на пользователя 
//  ПолеИзменения	- Строка - Строковое имя поля "Руководитель" или "ЗаместительРуководителя
//  ТолькоИТФилиалы	- Булево - Истина, если в рамках филиалов IT-организаций, Ложь - иначе
//
Процедура УдалитьРуководителя(Знач Филиал, Знач ГруппаДоступа, Знач Пользователь, Знач ПолеИзменения, Знач ТолькоИТФилиалы) Экспорт
	
	Если ЗначениеЗаполнено(Пользователь) Тогда	
		Если ПолеИзменения = "Руководитель" Тогда
			ЭтоРуководитель = Справочники.Филиалы.ЭтоРуководитель(Пользователь, Филиал, ТолькоИТФилиалы);
		ИначеЕсли ПолеИзменения = "ЗаместительРуководителя" Тогда
			ЭтоРуководитель = Справочники.Филиалы.ЭтоЗаместительРуководителя(Пользователь, Филиал, ТолькоИТФилиалы);
		ИначеЕсли ПолеИзменения = "РуководительКоманды" Тогда
			ЭтоРуководитель = Справочники.Филиалы.ЭтоРуководительКоманды(Пользователь, Филиал);
		Иначе
			ЭтоРуководитель = Ложь;
		КонецЕсли;
			
		Если НЕ ЭтоРуководитель Тогда
			Удалить(ГруппаДоступа, Пользователь);
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПредопределенныйЭлемент(ИмяЭлемента, Роли) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрограммныеРоли.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Роли
	|ИЗ
	|	Справочник.ПрограммныеРоли КАК ПрограммныеРоли
	|ГДЕ
	|	ПрограммныеРоли.ЭтоРольКонфигурации
	|	И ПрограммныеРоли.Наименование В(&Роли)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыДоступа.Ссылка КАК Ссылка,
	|	Роли.Ссылка КАК Роль
	|ИЗ
	|	Роли КАК Роли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
	|		ПО (ГруппыДоступа.ИмяПредопределенныхДанных = &ИмяЭлемента)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.РолиКонфигурации КАК ГруппыДоступаРолиКонфигурацииВсего
	|		ПО (ГруппыДоступа.Ссылка = ГруппыДоступаРолиКонфигурацииВсего.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.РолиКонфигурации КАК ГруппыДоступаРолиКонфигурации
	|		ПО (ГруппыДоступа.Ссылка = ГруппыДоступаРолиКонфигурации.Ссылка)
	|			И Роли.Ссылка = ГруппыДоступаРолиКонфигурации.Роль
	|ГДЕ
	|	ГруппыДоступаРолиКонфигурации.Ссылка ЕСТЬ NULL
	|	И ГруппыДоступаРолиКонфигурацииВсего.Ссылка ЕСТЬ NULL
	|ИТОГИ ПО
	|	Ссылка";         
	
	Запрос.УстановитьПараметр("ИмяЭлемента", ИмяЭлемента);
	Запрос.УстановитьПараметр("Роли", Роли);    
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Исключение
		Сообщение = НСтр("ru = 'Предопределенный элемент ""%Параметр%"" не найден.'");
		Сообщение = СтрЗаменить(Сообщение, "%Параметр%", "Справочник.ГруппыДоступа." + ИмяЭлемента);
		ВызватьИсключение Сообщение;
	КонецПопытки;     
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Детали = Выборка.Выбрать();
		
		Пока Детали.Следующий() Цикл
			Новая = Объект.РолиКонфигурации.Добавить();
			Новая.Роль = Детали.Роль;
		КонецЦикла;	
		
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
