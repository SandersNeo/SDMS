///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	ЗаполнитьЗначенияПравДляГруппыДоступа();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Разворачиваем все строки дерева объектов.
	КоллекцияЭлементов = ДеревоОбъектов.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из КоллекцияЭлементов Цикл
		ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
		Элементы.СписокВыбранныхОбъектов.Развернуть(ИдентификаторСтроки, Истина);
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	 	
	// Роли и Участники привязаны к объекту.
	// Обрабатываем только ТаблицаОграниченийДоступа.
	Для Каждого СтрокаТаблицы Из ТаблицаОграниченийДоступа Цикл
		Если СтрокаТаблицы.ЗаписьВРегистре И СтрокаТаблицы.СтрокаУдалена Тогда
			РегистрыСведений.ЗначенияРолейДляГруппДоступа.Удалить(ТекущийОбъект.Ссылка, СтрокаТаблицы.ОбъектМетаданных, СтрокаТаблицы.Право);
			
			// Изменение флагов, для корректного повторного добавления строки.
			СтрокаТаблицы.ЗаписьВРегистре = Ложь;
			СтрокаТаблицы.СтрокаУдалена = Ложь;
		ИначеЕсли НЕ СтрокаТаблицы.ЗаписьВРегистре И СтрокаТаблицы.ВыбраноДляГруппы Тогда
			РегистрыСведений.ЗначенияРолейДляГруппДоступа.Добавить(ТекущийОбъект.Ссылка, СтрокаТаблицы.ОбъектМетаданных, СтрокаТаблицы.Право, 
				СтрокаТаблицы.ЗначениеДляГруппы);
				
			// Аналогично, чтобы такая строка корректно удалялась.
			СтрокаТаблицы.ЗаписьВРегистре = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура РолиКонфигурацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбранныхОбъектовПриАктивизацииСтроки(Элемент)
	
	// Устанавливаем отбор по значению строки в таблице пользователей.
	ТекущиеДанные = Элементы.СписокВыбранныхОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйОбъектМетаданных = ТекущиеДанные.Объект;
	ПараметрыОтбора = Новый Структура("ОбъектМетаданных, ВыбраноДляГруппы", ВыбранныйОбъектМетаданных, Истина);
	Элементы.ТаблицаОграниченийДоступа.ОтборСтрок = Новый ФиксированнаяСтруктура(ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОграниченийДоступаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОграниченийДоступаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьПраво(Команда)
	
	ТекущиеДанные = Элементы.СписокВыбранныхОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйОбъектМетаданных = ТекущиеДанные.Объект;
	МассивПрограммныеРоли = ПолучитьСписокДоступныхПравДляОбъекта(ВыбранныйОбъектМетаданных, ТаблицаОграниченийДоступа);
	
	Если МассивПрограммныеРоли.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Нет доступных прав для этого объекта.");
		Возврат;
	КонецЕсли;
		
	НастройкиКомпоновкиДанных = Новый НастройкиКомпоновкиДанных;
	ДобавитьОтборВКоллекциюКомпоновкиДанных(НастройкиКомпоновкиДанных, "Ссылка", ВидСравненияКомпоновкиДанных.ВСписке, МассивПрограммныеРоли);
	ДобавитьОтборВКоллекциюКомпоновкиДанных(НастройкиКомпоновкиДанных, "ЭтоГруппа", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
	ПараметрыОтбора = Новый Структура("МножественныйВыбор, ФиксированныеНастройки", Ложь, НастройкиКомпоновкиДанных);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораПрограммнойРоли", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ПрограммныеРоли.ФормаВыбора", ПараметрыОтбора, ЭтотОбъект, ЭтотОбъект.УникальныйИдентификатор,,, ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРоль(Команда)
	
	// Отбираем только "Роли конфигурации" и удаляем уже
	// использованные в текущей группе доступа.
		
	// Получаем список ролей группы доступа.
	МассивВыбранныхРолей = Новый Массив;
	РолиКонфигурации = Объект.РолиКонфигурации;
	Для Каждого СтрокаТаблицы Из РолиКонфигурации Цикл
		МассивВыбранныхРолей.Добавить(СтрокаТаблицы.Роль);
	КонецЦикла;
	
	НастройкиКомпоновкиДанных = Новый НастройкиКомпоновкиДанных;
	ДобавитьОтборВКоллекциюКомпоновкиДанных(НастройкиКомпоновкиДанных, "Ссылка", ВидСравненияКомпоновкиДанных.НеВСписке, МассивВыбранныхРолей);
	ДобавитьОтборВКоллекциюКомпоновкиДанных(НастройкиКомпоновкиДанных, "ЭтоРольКонфигурации", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ДобавитьОтборВКоллекциюКомпоновкиДанных(НастройкиКомпоновкиДанных, "ЭтоГруппа", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ПараметрыОтбора = Новый Структура("МножественныйВыбор, ФиксированныеНастройки", Ложь, НастройкиКомпоновкиДанных);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораРолиКонфигурации", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ПрограммныеРоли.ФормаВыбора", ПараметрыОтбора, ЭтотОбъект, ЭтотОбъект.УникальныйИдентификатор,,, ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры
	
&НаКлиенте
Процедура УдалитьПраво(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаОграниченийДоступа.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда	
		Возврат;
	КонецЕсли;
	
	// Изменяем значение флагов.
	// Строки с признаком "СтрокаУдалена" = Истина - не отображаются в списке.
	ТекущиеДанные.ВыбраноДляГруппы = Ложь;
	ТекущиеДанные.СтрокаУдалена = Истина;
	
	// Обновляем отображение списка выбранных объектов.
	СписокВыбранныхОбъектовПриАктивизацииСтроки(Неопределено);
	
	МассивРолей = ПолучитьСписокДоступныхПравДляОбъекта(ТекущиеДанные.ОбъектМетаданных, ТаблицаОграниченийДоступа);
	ТекущиеДанные = Элементы.СписокВыбранныхОбъектов.ТекущиеДанные;

	// Проверяем количество выбранных прав для объекта метаданных.
	// Если = 0, тогда убрать флаг "ВыбраноДляГруппы" - изменить доступность в дереве.
	Если МассивРолей.Количество() = 0
		И ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные.ВыбраноДляГруппы = Ложь;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ДобавитьОтборВКоллекциюКомпоновкиДанных(НастройкиКомпоновки, Знач ИмяПоляКомпоновки, Знач ВидОтбора, Знач ЗначениеОтбора)
	
	ОтборСписка = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ОтборСписка.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляКомпоновки);
    ОтборСписка.ВидСравнения = ВидОтбора;
    ОтборСписка.ПравоеЗначение = ЗначениеОтбора;
    ОтборСписка.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПравДляГруппыДоступа()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СвязьОбъектовИРолей.Объект КАК Объект,
	|	СвязьОбъектовИРолей.Роль КАК Роль,
	|	СвязьОбъектовИРолей.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
	|	СвязьОбъектовИРолей.РассчитыватьПраво КАК РассчитыватьПраво
	|ПОМЕСТИТЬ ЗначенияВсехДоступныхОбъектовРолей
	|ИЗ
	|	РегистрСведений.СвязьОбъектовИРолей КАК СвязьОбъектовИРолей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияРолейДляГруппДоступа.Объект КАК Объект,
	|	ЗначенияРолейДляГруппДоступа.Роль КАК Роль,
	|	ЗначенияРолейДляГруппДоступа.ВидПраваДоступа КАК ВидПраваДоступа
	|ПОМЕСТИТЬ ЗначенияДляТекущейГруппыДоступа
	|ИЗ
	|	РегистрСведений.ЗначенияРолейДляГруппДоступа КАК ЗначенияРолейДляГруппДоступа
	|ГДЕ
	|	ЗначенияРолейДляГруппДоступа.ГруппаДоступа = &ГруппаДоступа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияВсехДоступныхОбъектовРолей.Объект КАК Объект,
	|	ЗначенияВсехДоступныхОбъектовРолей.Объект.ЭтоГруппа КАК ЭтоГруппа,
	|	ЗначенияВсехДоступныхОбъектовРолей.Роль КАК Роль,
	|	ЗначенияВсехДоступныхОбъектовРолей.РассчитыватьПраво КАК РассчитыватьПраво, 
	|	ЗначенияВсехДоступныхОбъектовРолей.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
	|	ЕСТЬNULL(ЗначенияДляТекущейГруппыДоступа.ВидПраваДоступа, ЗНАЧЕНИЕ(Перечисление.ВидыПравДоступа.Разрешено)) КАК ВидПраваДоступа,
	|	ВЫБОР
	|		КОГДА ЗначенияДляТекущейГруппыДоступа.ВидПраваДоступа ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПравоВыбраноДляГруппы
	|ИЗ
	|	ЗначенияВсехДоступныхОбъектовРолей КАК ЗначенияВсехДоступныхОбъектовРолей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияДляТекущейГруппыДоступа КАК ЗначенияДляТекущейГруппыДоступа
	|		ПО ЗначенияВсехДоступныхОбъектовРолей.Объект = ЗначенияДляТекущейГруппыДоступа.Объект
	|			И ЗначенияВсехДоступныхОбъектовРолей.Роль = ЗначенияДляТекущейГруппыДоступа.Роль
	|ИТОГИ
	|	МАКСИМУМ(ЭтоГруппа),
	|	СУММА(ПравоВыбраноДляГруппы)
	|ПО
	|	Объект ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("ГруппаДоступа", Объект.Ссылка);
	
	ВыборкаГруппаМетаданных = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Объект");
	
	Пока ВыборкаГруппаМетаданных.Следующий() Цикл
		// Сначала выбираем все документы.
		КоллекцияМетаданные = ДеревоОбъектов.ПолучитьЭлементы();
		СтрокаГруппаМетаданных = КоллекцияМетаданные.Добавить();
		СтрокаГруппаМетаданных.Объект = ВыборкаГруппаМетаданных.Объект;
		СтрокаГруппаМетаданных.ЭтоГруппа = Истина;
		СтрокаГруппаМетаданных.ВыбраноДляГруппы = Булево(ВыборкаГруппаМетаданных.ПравоВыбраноДляГруппы);
		
		ВыборкаМетаданные = ВыборкаГруппаМетаданных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Объект");
		Пока ВыборкаМетаданные.Следующий() Цикл
			СтрокаМетаданные = СтрокаГруппаМетаданных.ПолучитьЭлементы().Добавить();
			СтрокаМетаданные.Объект = ВыборкаМетаданные.Объект;
			СтрокаМетаданные.ЭтоГруппа = Истина;
			СтрокаМетаданные.ВыбраноДляГруппы = Булево(ВыборкаМетаданные.ПравоВыбраноДляГруппы);
			
			ВыборкаФормы = ВыборкаМетаданные.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Объект");
			
			// Обрабатываем 2-уровень иерархии для общих форм.
			ОбработатьЧастьТаблицыРолей(ТаблицаОграниченийДоступа, ВыборкаМетаданные);
						
			Пока ВыборкаФормы.Следующий() Цикл				
				Если НЕ ВыборкаФормы.ЭтоГруппа Тогда
					СтрокаФорма = СтрокаМетаданные.ПолучитьЭлементы().Добавить();
					СтрокаФорма.Объект = ВыборкаФормы.Объект;
					СтрокаФорма.ВыбраноДляГруппы = Булево(ВыборкаФормы.ПравоВыбраноДляГруппы);
				КонецЕсли;
											
				// На последнем этапе заполняем данные для таблички - право->группа доступа.
				ОбработатьЧастьТаблицыРолей(ТаблицаОграниченийДоступа, ВыборкаФормы);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура ОбработатьЧастьТаблицыРолей(ТаблицаОграниченийДоступа, Знач ТекущаяВыборка)
	
	ВыборкаФормы = ТекущаяВыборка.Выбрать();
	Пока ВыборкаФормы.Следующий() Цикл
		СтрокаТаблицы = ТаблицаОграниченийДоступа.Добавить();
		СтрокаТаблицы.ОбъектМетаданных = ВыборкаФормы.Объект;
		СтрокаТаблицы.Право = ВыборкаФормы.Роль;
		СтрокаТаблицы.ВыбраноДляГруппы = ВыборкаФормы.ПравоВыбраноДляГруппы;
		// Если есть запись в регистре, установим значение соответствующего флага.
		// Понадобится при удалении, чтобы удаляли только записи из регистра.
		СтрокаТаблицы.ЗаписьВРегистре = ?(ВыборкаФормы.ПравоВыбраноДляГруппы, Истина, Ложь);
		
		Если НЕ ВыборкаФормы.РассчитыватьПраво Тогда
			СтрокаТаблицы.ЗначениеПоУмолчаниюЗаполнено = Истина;
			СтрокаТаблицы.ЗначениеПоУмолчаниюПредставление = Строка(ВыборкаФормы.ЗначениеПоУмолчанию);
			ПоУмолчаниюРазрешено = (ВыборкаФормы.ЗначениеПоУмолчанию = Перечисления.ВидыПравДоступа.Разрешено); 
			СтрокаТаблицы.ЗначениеДляГруппы = ?(ПоУмолчаниюРазрешено, Перечисления.ВидыПравДоступа.Запрещено, Перечисления.ВидыПравДоступа.Разрешено);
		Иначе
			СтрокаТаблицы.ЗначениеДляГруппы = Перечисления.ВидыПравДоступа.Разрешено;
			СтрокаТаблицы.ЗначениеПоУмолчаниюПредставление = "<Рассчитывается>";
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораРолиКонфигурации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРолиКонфигурации = Объект.РолиКонфигурации.Добавить();
	СтрокаРолиКонфигурации.Роль = Результат;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПрограммнойРоли(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.СписокВыбранныхОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		ИЛИ Результат = Неопределено Тогда
		
		Возврат;
	КонецЕсли;
		
	ИдентификаторСтроки = ПолучитьИдентификаторСтрокиВТаблице(ТаблицаОграниченийДоступа, ТекущиеДанные.Объект, Результат);
	Если ИдентификаторСтроки <> Неопределено Тогда
		// Обратная операция, по сравнению с тем, что происходит при удалении строк.
		НайденнаяСтрока = ТаблицаОграниченийДоступа.НайтиПоИдентификатору(ИдентификаторСтроки);
		НайденнаяСтрока.ВыбраноДляГруппы = Истина;
		НайденнаяСтрока.СтрокаУдалена = Ложь;
		
		ТекущиеДанные.ВыбраноДляГруппы = Истина;
		
		// Обновляем отображение списка выбранных объектов.
		СписокВыбранныхОбъектовПриАктивизацииСтроки(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИдентификаторСтрокиВТаблице(Знач ТаблицаОграниченийДоступа, Знач ОбъектМетаданных, Знач Право)
	
	ИдентификаторСтроки = Неопределено;
	
	ПараметрыОтбора = Новый Структура("ОбъектМетаданных, Право", ОбъектМетаданных, Право);
	МассивСтрок = ТаблицаОграниченийДоступа.НайтиСтроки(ПараметрыОтбора);
	
	Если МассивСтрок.Количество() <> 0 Тогда
		ИдентификаторСтроки = МассивСтрок[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокДоступныхПравДляОбъекта(Знач ОбъектМетаданных, Знач ТаблицаОграниченийДоступа)
	
	МассивПрограммныеРоли = Новый Массив;
	
	ПараметрыОтбора = Новый Структура("ОбъектМетаданных, ВыбраноДляГруппы", ОбъектМетаданных, Ложь);
	МассивСтрок = ТаблицаОграниченийДоступа.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		МассивПрограммныеРоли.Добавить(СтрокаТаблицы.Право);
	КонецЦикла;
	
	Возврат МассивПрограммныеРоли;
		
КонецФункции

#КонецОбласти
