///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоНовый = Параметры.Ключ.Пустая();
	
	Если НЕ ЭтоНовый Тогда
		ПолныеПрава = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("ПолныеПрава");
		Администратор = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("Администратор");
		Ответственный = ЭтоОтветственныйПоГруппе();
		Куратор = (Объект.Куратор = ПараметрыСеанса.ТекущийПользователь);
				
		ЭтотОбъект.ТолькоПросмотр = НЕ (ПолныеПрава ИЛИ Куратор ИЛИ Ответственный ИЛИ Администратор);
	Иначе
		Объект.Куратор = ПараметрыСеанса.ТекущийПользователь;
		ДобавитьКуратораВСписокОтветственных(Объект.Куратор);
		Элементы.ГруппаПодсказкаКомментария.Видимость = Истина;
	КонецЕсли;
	
	ЗаполнитьСписки();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Заказчики = ТекущийОбъект.Заказчики.Выгрузить(, "Пользователь, Ответственный");                  
	
	Заказчики.Свернуть("Пользователь", "Ответственный");
	
	ТекущийОбъект.Заказчики.Загрузить(Заказчики);

	ТекущийОбъект.Направления.Очистить();
	Для Каждого ЭлементСписка Из Направления Цикл
		Если ЭлементСписка.Пометка Тогда
			ТекущийОбъект.Направления.Добавить().Направление = ЭлементСписка.Значение;
		КонецЕсли;
	КонецЦикла;
	
	ТекущийОбъект.Системы.Очистить();
	Для Каждого ЭлементСписка Из Системы Цикл
		Если ЭлементСписка.Пометка Тогда
			ТекущийОбъект.Системы.Добавить().Система = ЭлементСписка.Значение;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка на Заказчиков у самой табличной части "Выдавать ошибку"
	Если ТекущийОбъект.Направления.Количество() = 0  
		ИЛИ ТекущийОбъект.Системы.Количество() = 0 Тогда
		
		ТекстСообщения = "Должны быть выбраны как минимум одна система и направление";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
		
	Оповестить(СобытияОповещенияКлиент.ИмяСобытияГруппыЗаказчиковНаправлений());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КураторПриИзменении(Элемент)
	
	ДобавитьКуратораВСписокОтветственных(Объект.Куратор);
	Элементы.ГруппаПодсказкаКомментария.Видимость = Истина;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДобавитьКуратораВСписокОтветственных(Знач Пользователь)
	
	СтруктураДляПоиска = Новый Структура("Пользователь", Пользователь);
	РезультатПоиска = Объект.Заказчики.НайтиСтроки(СтруктураДляПоиска);
	
	Если Не ЗначениеЗаполнено(Пользователь) ИЛИ НЕ РезультатПоиска.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	КураторОтветственный = Объект.Заказчики.Добавить();
	КураторОтветственный.Пользователь = Пользователь;
	КураторОтветственный.Ответственный = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписки()
	
	ВыбранныеСистемы = Объект.Системы.Выгрузить(, "Система").ВыгрузитьКолонку("Система");
	ВыбранныеНаправления = Объект.Направления.Выгрузить(, "Направление").ВыгрузитьКолонку("Направление");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СистемыУчета.Ссылка КАК Значение,
	|	СистемыУчета.Наименование КАК Представление,
	|	ВЫБОР
	|		КОГДА СистемыУчета.Ссылка В (&ВыбранныеСистемы)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Пометка
	|ИЗ
	|	Справочник.СистемыУчета КАК СистемыУчета
	|ГДЕ
	|	НЕ СистемыУчета.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Представление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаправленияРазработки.Ссылка КАК Значение,
	|	НаправленияРазработки.Наименование КАК Представление,
	|	ВЫБОР
	|		КОГДА НаправленияРазработки.Ссылка В (&ВыбранныеНаправления)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Пометка
	|ИЗ
	|	Справочник.НаправленияРазработки КАК НаправленияРазработки
	|ГДЕ
	|	НЕ НаправленияРазработки.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Представление";
	
	Запрос.УстановитьПараметр("ВыбранныеСистемы", ВыбранныеСистемы);
	Запрос.УстановитьПараметр("ВыбранныеНаправления", ВыбранныеНаправления);
	
	Пакеты = Запрос.ВыполнитьПакет();
	
	ВыборкаСистем = Пакеты[0].Выбрать();
	Пока ВыборкаСистем.Следующий() Цикл
		Системы.Добавить(ВыборкаСистем.Значение, ВыборкаСистем.Представление, ВыборкаСистем.Пометка);
	КонецЦикла;
	
	ВыборкаНаправлений = Пакеты[1].Выбрать();
	Пока ВыборкаНаправлений.Следующий() Цикл
		Направления.Добавить(ВыборкаНаправлений.Значение, ВыборкаНаправлений.Представление, ВыборкаНаправлений.Пометка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЭтоОтветственныйПоГруппе()

	Ответственный = Ложь;
	
	ПараметрыОтбора = Новый Структура("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	НайденныеСтроки = Объект.Заказчики.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Ответственный = НайденныеСтроки[0].Ответственный;
	КонецЕсли;
	
	Возврат Ответственный;

КонецФункции

#КонецОбласти
