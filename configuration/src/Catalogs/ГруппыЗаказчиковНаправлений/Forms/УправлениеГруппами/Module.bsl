///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПредставлениеМесяца = Формат(ТекущаяДатаСеанса(), "ДФ='MMMM yyyy'");
	
	// Восстановление сохраненных параметров
	СвойстваНастройки = СвойстваСохраняемойНастройки();	
	СохраненныеНастройки = ОбщегоНазначенияВызовСервера.ЗагрузитьНастройкиДанныхФормы(
		СвойстваНастройки.КлючОбъекта, СвойстваНастройки.КлючНастроек);
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда	
		Если СохраненныеНастройки.Свойство("Направление") Тогда
			Направление = СохраненныеНастройки.Направление;
		КонецЕсли;
		
		Если СохраненныеНастройки.Свойство("Система") Тогда
			Система = СохраненныеНастройки.Система;
		КонецЕсли;	
	КонецЕсли;
	
	// Если направление и система были заполнены из сохраненных настроек заполним таблицу
	Если ЗначениеЗаполнено(Направление) И ЗначениеЗаполнено(Система) Тогда
		ЗаполнитьТаблицуГруппыЗаказчиков();
	КонецЕсли;
	
	// Безопасность SDMS. Стандартный блок процедур.
	Безопасность.НастроитьФормуПослеОткрытия(ЭтотОбъект);  
	
	ДоступностьРоли = УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("УправлениеГруппамиЗаказчиковНаправлений") 
		ИЛИ УправлениеДоступомПовтИсп.ПроверитьДоступностьРоли("Администратор");
	Элементы.Скопировать.Доступность = ДоступностьРоли;
	Элементы.Удалить.Доступность = ДоступностьРоли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТаблицаГруппыЗаказчиковПриАктивизацииСтроки(Элементы.ТаблицаГруппыЗаказчиков);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда	
		НастройкиФормы = Новый Структура;
		НастройкиФормы.Вставить("Направление", Направление);
		НастройкиФормы.Вставить("Система", Система);
		
		СвойстваНастройки = СвойстваСохраняемойНастройки();	
		ОбщегоНазначенияВызовСервера.СохранитьНастройкиДанныхФормы(СвойстваНастройки.КлючОбъекта,
			СвойстваНастройки.КлючНастроек, НастройкиФормы);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
				
	Если СобытияОповещенияКлиент.СобытиеГруппыЗаказчиковНаправлений(ИмяСобытия) Тогда
		// После создания, изменения, удаления группы заказчиков необходимо обновить данные в таблице	
		ЗаполнитьТаблицуГруппыЗаказчиков();		
		ТаблицаГруппыЗаказчиковПриАктивизацииСтроки(Элементы.ТаблицаГруппыЗаказчиков);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НаправлениеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Система) Тогда
		// При изменении направления необходимо перезаполнить таблицу
		ЗаполнитьТаблицуГруппыЗаказчиков();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СистемаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Направление) Тогда
		// При изменении направления необходимо перезаполнить таблицу
		ЗаполнитьТаблицуГруппыЗаказчиков();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаГруппыЗаказчиковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;		
	ИзменитьГруппуЗаказчиков(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаГруппыЗаказчиковПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаГруппыЗаказчиков.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаЗаказчиков = ТекущиеДанные.ГруппаЗаказчиков;
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаГруппыЗаказчиковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаГруппыЗаказчиковПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Изменить(Команда)
	
	ИзменитьГруппуЗаказчиков(Элементы.ТаблицаГруппыЗаказчиков.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Скопировать(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаГруппыЗаказчиков.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("ЗначениеКопирования", ТекущиеДанные.ГруппаЗаказчиков);
	ОткрытьФорму("Справочник.ГруппыЗаказчиковНаправлений.Форма.ФормаЭлемента", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаГруппыЗаказчиков.ТекущиеДанные;  
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СообщениеПользователю = УстановитьПометкуУдаления(ТекущиеДанные.ГруппаЗаказчиков);
	
	Если ЗначениеЗаполнено(СообщениеПользователю) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПользователю);
	Иначе	
		// При пометке на удаление одной из групп необходимо перезаполнить таблицу
		ЗаполнитьТаблицуГруппыЗаказчиков();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТаблицуГруппыЗаказчиков()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыЗаказчиковНаправлений.Ссылка КАК ГруппаЗаказчиков,
	|	ГруппыЗаказчиковНаправлений.ПредставлениеОтветственных КАК Ответственный
	|ИЗ
	|	Справочник.ГруппыЗаказчиковНаправлений КАК ГруппыЗаказчиковНаправлений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыЗаказчиковНаправлений.Направления КАК ГруппыЗаказчиковНаправленийНаправления
	|		ПО (ГруппыЗаказчиковНаправленийНаправления.Ссылка = ГруппыЗаказчиковНаправлений.Ссылка)
	|			И (ГруппыЗаказчиковНаправленийНаправления.Направление = &Направление)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыЗаказчиковНаправлений.Системы КАК ГруппыЗаказчиковНаправленийСистемы
	|		ПО (ГруппыЗаказчиковНаправленийСистемы.Ссылка = ГруппыЗаказчиковНаправлений.Ссылка)
	|			И (ГруппыЗаказчиковНаправленийСистемы.Система = &Система)
	|ГДЕ
	|	НЕ ГруппыЗаказчиковНаправлений.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГруппыЗаказчиковНаправлений.Наименование";
	
	ТекущаяДата = ТекущаяДатаСеанса();
	Запрос.УстановитьПараметр("Направление", Направление);
	Запрос.УстановитьПараметр("Система", Система);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ТекущаяДата));
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(), "ТаблицаГруппыЗаказчиков");
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьГруппуЗаказчиков(Знач ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.ГруппаЗаказчиков);
	ОткрытьФорму("Справочник.ГруппыЗаказчиковНаправлений.Форма.ФормаЭлемента", ПараметрыОткрытия);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СвойстваСохраняемойНастройки()
	
	Результат = Новый Структура;
	Результат.Вставить("КлючОбъекта", "Справочник.ГруппыЗаказчиковНаправлений.УправлениеГруппами");
	Результат.Вставить("КлючНастроек", "НастройкиФормы");
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция УстановитьПометкуУдаления(Знач ГруппаЗаказчиков)
	
	СообщениеПользователю = "";
	Объект = ГруппаЗаказчиков.ПолучитьОбъект();
	
	Попытка
		Объект.УстановитьПометкуУдаления(Истина);
	Исключение
		СообщениеПользователю = "Не удалось удалить группу заказчиков.";
		
		Информация = ИнформацияОбОшибке();
		ПодробноеПредставление = ПодробноеПредставлениеОшибки(Информация);
		
		ЗаписьЖурналаРегистрации("Справочник.ГруппыЗаказчиковНаправлений.УправлениеГруппами", УровеньЖурналаРегистрации.Ошибка, , 
			ПараметрыСеанса.ТекущийПользователь, ПодробноеПредставление);
	КонецПопытки;
	
	Возврат СообщениеПользователю;
	
КонецФункции

#КонецОбласти
