///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2025, ООО ДНС Технологии
// SDMS (Software Development Management System) — это корпоративная система учета разработки и управления проектами 
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии General Public License (GNU GPL v3)
// Текст лицензии доступен по ссылке:
// https://www.gnu.org/licenses/gpl-3.0.html
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установка общего условного оформления для окон данного вида
	ИнтерфейсПриложения.УстановитьУсловноеОформлениеСпискаДоступныхЗначений(
		ЭтотОбъект, "ДоступныеГруппыЗаказчиков.Избранное", "ДоступныеГруппыЗаказчиковНаименование");
	
	ЗаполнитьСпискиГруппЗаказчиков();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СтрокаПоискаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	 УстановитьВидимостьРекурсивно(Истина, ПолучитьГруппыЗаказчиковПоСтрокеПоиска(Текст), 
	 	ДоступныеГруппыЗаказчиков.ПолучитьЭлементы());	
	
КонецПроцедуры                

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьВидимостьРекурсивно(Ложь, Новый Массив, 
	 	ДоступныеГруппыЗаказчиков.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	 УстановитьВидимостьРекурсивно(Истина, ПолучитьГруппыЗаказчиковПоСтрокеПоиска(СтрокаПоиска), 
	 	ДоступныеГруппыЗаказчиков.ПолучитьЭлементы());
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий таблицы "ВыбранныеГруппыЗаказчиков"

&НаКлиенте
Процедура ВыбранныеГруппыЗаказчиковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ВыбранныеГруппыЗаказчиковИсключить" Тогда    
		
		НайденнаяСтрока = ВыбранныеГруппыЗаказчиков.НайтиПоИдентификатору(ВыбраннаяСтрока);
		ИсключитьГруппуЗаказчиков(Найденнаястрока);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий таблицы "ДоступныеГруппыЗаказчиков"

&НаКлиенте
Процедура ДоступныеГруппыЗаказчиковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	НайденнаяСтрока = ДоступныеГруппыЗаказчиков.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если НайденнаяСтрока.Избранное = -1 Тогда
		Возврат;
	КонецЕсли;	
	
	Если Поле.Имя = "ДоступныеГруппыЗаказчиковНаименование" Тогда 
		НайденнаяСтрока.Пометка = ?(НайденнаяСтрока.Пометка = 0, 1, 0);
		
		ОбработатьИзменениеСтрокиДоступныхГруппЗаказчиков(НайденнаяСтрока);	
		ПроставитьПометкуПоПодчиненным(НайденнаяСтрока.ПолучитьРодителя());
	ИначеЕсли Поле.Имя = "ДоступныеГруппыЗаказчиковИзбранное" Тогда
		ПриИзмененииПометкиИзбранного(ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеГруппыЗаказчиковПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДоступныеГруппыЗаказчиков.ТекущиеДанные;
	
	Если ТекущиеДанные.Избранное = -1 Тогда
		
		Если ТекущиеДанные.Пометка = 2 Тогда
			ТекущиеДанные.Пометка = 0;
		КонецЕсли;   
		
		Для Каждого Строка Из ТекущиеДанные.ПолучитьЭлементы() Цикл  
			Если НЕ Строка.Скрыть Тогда				
				Строка.Пометка = ТекущиеДанные.Пометка;
				ОбработатьИзменениеСтрокиДоступныхГруппЗаказчиков(Строка, ТекущиеДанные.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОбработатьИзменениеСтрокиДоступныхГруппЗаказчиков(ТекущиеДанные);
		ПроставитьПометкуПоПодчиненным(ТекущиеДанные.ПолучитьРодителя());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗавершитьВыбор(Команда)
	
	ВозвращаемыеГруппыЗаказчиков = Новый СписокЗначений;
	
	Если ВыбранныеГруппыЗаказчиков.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из ВыбранныеГруппыЗаказчиков Цикл
			ВозвращаемыеГруппыЗаказчиков.Добавить(СтрокаТаблицы.ГруппаЗаказчиков, СтрокаТаблицы.Наименование);
		КонецЦикла;
		
		ВозвращаемыеГруппыЗаказчиков.СортироватьПоПредставлению();
	КонецЕсли;	
	
	Закрыть(ВозвращаемыеГруппыЗаказчиков);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкуДоступныхГруппЗаказчиков(Команда)
	
	Пометка = (Команда.Имя = "ОтметитьВсеГруппыЗаказчиков");
	ИзменитьПометкуДоступныхГруппЗаказчиковРекурсия(ДоступныеГруппыЗаказчиков.ПолучитьЭлементы(), Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкуДоступныхГруппЗаказчиковРекурсия(Строки, Пометка)
	
	Для Каждого СтрокаТаблицы Из Строки Цикл  
		Если СтрокаТаблицы.Избранное = -1 Тогда 
			ИзменитьПометкуДоступныхГруппЗаказчиковРекурсия(СтрокаТаблицы.ПолучитьЭлементы(), Пометка); 
			ПроставитьПометкуПоПодчиненным(СтрокаТаблицы);
		Иначе
			Если СтрокаТаблицы.Пометка <> Пометка Тогда
				Если Пометка Тогда
					ДобавитьГруппуЗаказчиков(СтрокаТаблицы);
				Иначе
					ИсключитьГруппуЗаказчиков(СтрокаТаблицы);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьИзбранныеРекурсия(Строки)
	
	Для Каждого СтрокаТаблицы Из Строки Цикл
		Если СтрокаТаблицы.Избранное = -1 Тогда
			ОтметитьИзбранныеРекурсия(СтрокаТаблицы.ПолучитьЭлементы());	
			ПроставитьПометкуПоПодчиненным(СтрокаТаблицы);
		ИначеЕсли СтрокаТаблицы.Избранное = 0 Тогда
			Если НЕ СтрокаТаблицы.Пометка Тогда
				ДобавитьГруппуЗаказчиков(СтрокаТаблицы);
			КонецЕсли;
		Иначе
			Если СтрокаТаблицы.Пометка Тогда
				ИсключитьГруппуЗаказчиков(СтрокаТаблицы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьИзбранные(Команда)
	
	ОтметитьИзбранныеРекурсия(ДоступныеГруппыЗаказчиков.ПолучитьЭлементы());	
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПоиск(Команда)
	
	СтрокаПоиска = "";
	УстановитьВидимостьРекурсивно(Ложь, Новый Массив, 
	 	ДоступныеГруппыЗаказчиков.ПолучитьЭлементы());  
	ПодключитьОбработчикОжидания("ОчиститьТекстРедактирования", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Справка(Команда)
	
	ПерейтиПоНавигационнойСсылке(
		ОбщегоНазначенияВызовСервера.ПолучитьКонстанту("КорневойURL") + "/docs/devrequest/groups-of-customers/"); 

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Управление пользователями в списках

&НаКлиенте
Процедура ДобавитьГруппуЗаказчиков(СтрокаТаблицы, ТекущийРодитель = Неопределено)
	
	НайденныеСтроки = ВыбранныеГруппыЗаказчиков.НайтиСтроки(Новый Структура("ГруппаЗаказчиков", СтрокаТаблицы.ГруппаЗаказчиков));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрокаВыбранных = ВыбранныеГруппыЗаказчиков.Добавить();
		НоваяСтрокаВыбранных.Исключить = БиблиотекаКартинок.УдалитьЗначение; 
		ЗаполнитьЗначенияСвойств(НоваяСтрокаВыбранных, СтрокаТаблицы, "ГруппаЗаказчиков, Наименование");	
		ВыбраннаяСтрока = НоваяСтрокаВыбранных.ПолучитьИдентификатор();                                   
	Иначе
		ВыбраннаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();                                   
	КонецЕсли;
	
	МассивСтрок = КэшСтрок.НайтиСтроки(Новый Структура("Ключ", СтрокаТаблицы.ГруппаЗаказчиков));
	
	Для Каждого Строка Из МассивСтрок Цикл 
		Строка.ИдентификаторСтрокиСписка = ВыбраннаяСтрока;
		СтрокаДоступных = ДоступныеГруппыЗаказчиков.НайтиПоИдентификатору(Строка.Значение);
		СтрокаДоступных.Пометка = Истина;           
		Родитель = СтрокаДоступных.ПолучитьРодителя(); 
		
		// Если указан текущий родитель, значит не нужно пересчитывать.
		Если Родитель <> Неопределено И ТекущийРодитель <> Родитель.ПолучитьИдентификатор() Тогда
			ПроставитьПометкуПоПодчиненным(Родитель);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьГруппуЗаказчиков(СтрокаТаблицы, ТекущийРодитель = Неопределено)
	
	Найденные = ВыбранныеГруппыЗаказчиков.НайтиСтроки(Новый Структура("ГруппаЗаказчиков", СтрокаТаблицы.ГруппаЗаказчиков));
	
	Если Найденные.Количество() > 0 Тогда                                                    
		ВыбраннаяСтрока = Найденные[0].ПолучитьИдентификатор();
		МассивСтрок = КэшСтрок.НайтиСтроки(Новый Структура("ИдентификаторСтрокиСписка", ВыбраннаяСтрока));
		
		Для Каждого Строка Из МассивСтрок Цикл 
			
			Строка.ИдентификаторСтрокиСписка = -1;
			СтрокаДоступных = ДоступныеГруппыЗаказчиков.НайтиПоИдентификатору(Строка.Значение);
			СтрокаДоступных.Пометка = Ложь; 
			Родитель = СтрокаДоступных.ПолучитьРодителя(); 
			
			// Если указан текущий родитель, значит не нужно пересчитывать.
			Если Родитель <> Неопределено И ТекущийРодитель <> Родитель.ПолучитьИдентификатор() Тогда
				ПроставитьПометкуПоПодчиненным(Родитель);
			КонецЕсли;			
		КонецЦикла;			
		
		ВыбранныеГруппыЗаказчиков.Удалить(ВыбранныеГруппыЗаказчиков.НайтиПоИдентификатору(ВыбраннаяСтрока));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСтрокиДоступныхГруппЗаказчиков(СтрокаТаблицы, ТекущийРодитель = Неопределено)
	
	Если СтрокаТаблицы.Пометка = Истина Тогда
		ДобавитьГруппуЗаказчиков(СтрокаТаблицы, ТекущийРодитель);	
	Иначе
		ИсключитьГруппуЗаказчиков(СтрокаТаблицы, ТекущийРодитель);	
	КонецЕсли;			
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВКэш(КэшСтрок, Ключ, Значение, ИдентификаторСтрокиСписка)
	
	НоваяСтрока = КэшСтрок.Добавить();	
	НоваяСтрока.Ключ = Ключ;	
	НоваяСтрока.Значение = Значение;	
	НоваяСтрока.ИдентификаторСтрокиСписка = ИдентификаторСтрокиСписка;

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьСпискиГруппЗаказчиков()
	
	ВыбранныеГруппыЗаказчиков.Очистить();
	ДоступныеГруппыЗаказчиков.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ИзбранныеГруппыЗаказчиков.Объект КАК Справочник.ГруппыЗаказчиковНаправлений) КАК ГруппаЗаказчиков
	|ПОМЕСТИТЬ ИзбранныеГруппыЗаказчиков
	|ИЗ
	|	РегистрСведений.ИзбранныеОбъекты КАК ИзбранныеГруппыЗаказчиков
	|ГДЕ
	|	ИзбранныеГруппыЗаказчиков.Владелец = &ТекущийПользователь
	|	И ИзбранныеГруппыЗаказчиков.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыИзбранныхОбъектов.ГруппыЗаказчиков)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыЗаказчиков.Ссылка КАК ГруппаЗаказчиков,
	|	ГруппыЗаказчиков.Наименование КАК Наименование,
	|	ГруппыЗаказчиков.ПометкаУдаления КАК ПометкаУдаления
	|ПОМЕСТИТЬ ТаблицаГруппЗаказчиков
	|ИЗ
	|	Справочник.ГруппыЗаказчиковНаправлений КАК ГруппыЗаказчиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК Пометка,
	|	ТаблицаГруппЗаказчиков.ГруппаЗаказчиков КАК ГруппаЗаказчиков,
	|	ТаблицаГруппЗаказчиков.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА ИзбранныеГруппыЗаказчиков.ГруппаЗаказчиков ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Избранное
	|ПОМЕСТИТЬ ПолнаяТаблицаГруппЗаказчиковНегруппированная
	|ИЗ
	|	ТаблицаГруппЗаказчиков КАК ТаблицаГруппЗаказчиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИзбранныеГруппыЗаказчиков КАК ИзбранныеГруппыЗаказчиков
	|		ПО ТаблицаГруппЗаказчиков.ГруппаЗаказчиков = ИзбранныеГруппыЗаказчиков.ГруппаЗаказчиков
	|ГДЕ
	|	ТаблицаГруппЗаказчиков.ГруппаЗаказчиков В(&ВыбранныеГруппыЗаказчиков)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	ТаблицаГруппЗаказчиков.ГруппаЗаказчиков,
	|	ТаблицаГруппЗаказчиков.Наименование,
	|	ВЫБОР
	|		КОГДА ИзбранныеГруппыЗаказчиков.ГруппаЗаказчиков ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|ИЗ
	|	ТаблицаГруппЗаказчиков КАК ТаблицаГруппЗаказчиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИзбранныеГруппыЗаказчиков КАК ИзбранныеГруппыЗаказчиков
	|		ПО ТаблицаГруппЗаказчиков.ГруппаЗаказчиков = ИзбранныеГруппыЗаказчиков.ГруппаЗаказчиков
	|ГДЕ
	|	НЕ ТаблицаГруппЗаказчиков.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПолнаяТаблицаГруппЗаказчиковНегруппированная.Пометка) КАК Пометка,
	|	МАКСИМУМ(ПолнаяТаблицаГруппЗаказчиковНегруппированная.Избранное) КАК Избранное,
	|	ПолнаяТаблицаГруппЗаказчиковНегруппированная.ГруппаЗаказчиков КАК ГруппаЗаказчиков,
	|	ПолнаяТаблицаГруппЗаказчиковНегруппированная.Наименование КАК Наименование
	|ПОМЕСТИТЬ ПолнаяТаблицаГруппЗаказчиков
	|ИЗ
	|	ПолнаяТаблицаГруппЗаказчиковНегруппированная КАК ПолнаяТаблицаГруппЗаказчиковНегруппированная
	|
	|СГРУППИРОВАТЬ ПО
	|	ПолнаяТаблицаГруппЗаказчиковНегруппированная.ГруппаЗаказчиков,
	|	ПолнаяТаблицаГруппЗаказчиковНегруппированная.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПолнаяТаблицаГруппЗаказчиков.Пометка) КАК Пометка,
	|	ПолнаяТаблицаГруппЗаказчиков.ГруппаЗаказчиков КАК ГруппаЗаказчиков,
	|	ПолнаяТаблицаГруппЗаказчиков.Наименование КАК Наименование,
	|	МАКСИМУМ(ПолнаяТаблицаГруппЗаказчиков.Избранное) КАК Избранное,
	|	ВЫБОР
	|		КОГДА ПолнаяТаблицаГруппЗаказчиков.Избранное
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЕСТЬNULL(НаправленияРазработки.Ссылка, ЗНАЧЕНИЕ(Справочник.НаправленияРазработки.ПустаяСсылка))
	|	КОНЕЦ КАК НаправлениеГруппировка,
	|	МАКСИМУМ(ЕСТЬNULL(НаправленияРазработки.Ссылка, ЗНАЧЕНИЕ(Справочник.НаправленияРазработки.ПустаяСсылка))) КАК Направление,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПолнаяТаблицаГруппЗаказчиков.Избранное
	|				ТОГДА """"
	|			ИНАЧЕ ЕСТЬNULL(НаправленияРазработки.Наименование, ""Пустое направление"")
	|		КОНЕЦ) КАК НаправлениеНаименование
	|ИЗ
	|	ПолнаяТаблицаГруппЗаказчиков КАК ПолнаяТаблицаГруппЗаказчиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыЗаказчиковНаправлений.Направления КАК ГруппыЗаказчиковНаправленийНаправления
	|		ПО ПолнаяТаблицаГруппЗаказчиков.ГруппаЗаказчиков = ГруппыЗаказчиковНаправленийНаправления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаправленияРазработки КАК НаправленияРазработки
	|		ПО (ГруппыЗаказчиковНаправленийНаправления.Направление = НаправленияРазработки.Ссылка)
	|			И (НЕ НаправленияРазработки.ПометкаУдаления)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПолнаяТаблицаГруппЗаказчиков.ГруппаЗаказчиков,
	|	ПолнаяТаблицаГруппЗаказчиков.Наименование,
	|	ВЫБОР
	|		КОГДА ПолнаяТаблицаГруппЗаказчиков.Избранное
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЕСТЬNULL(НаправленияРазработки.Ссылка, ЗНАЧЕНИЕ(Справочник.НаправленияРазработки.ПустаяСсылка))
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаправлениеНаименование,
	|	Наименование
	|ИТОГИ
	|	МАКСИМУМ(Пометка),
	|	МАКСИМУМ(Направление),
	|	МАКСИМУМ(НаправлениеНаименование)
	|ПО
	|	НаправлениеГруппировка";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ВыбранныеГруппыЗаказчиков", Параметры.ВыбранныеГруппыЗаказчиков);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);		
	ВыборкаНаправление = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНаправление.Следующий() Цикл  
		
		Если ВыборкаНаправление.НаправлениеГруппировка = Неопределено Тогда
			Родитель = ДоступныеГруппыЗаказчиков.ПолучитьЭлементы();
		Иначе
			СтрокаНаправление = ДоступныеГруппыЗаказчиков.ПолучитьЭлементы().Добавить(); 
			СтрокаНаправление.Наименование = ВыборкаНаправление.НаправлениеНаименование;
			СтрокаНаправление.Направление = ВыборкаНаправление.Направление;
			СтрокаНаправление.Избранное = -1;     
			СтрокаНаправление.Пометка = ВыборкаНаправление.Пометка;  
			ДобавитьВКэш(КэшСтрок, ВыборкаНаправление.Направление, СтрокаНаправление.ПолучитьИдентификатор(), -1);
			Родитель = СтрокаНаправление.ПолучитьЭлементы(); 
		КонецЕсли;
		
		Выборка = ВыборкаНаправление.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрокаДоступных = Родитель.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДоступных, Выборка, 
				"Пометка, ГруппаЗаказчиков, Направление, Наименование");
			// Избранное было булево. Теперь - число. Из-за этого меняется логика выбор картинки значений,
			// -1 - картинка не нужна вообще
			// 0  - картинка включен в избранное
			// 1  - картинка не включен в избранное
			НоваяСтрокаДоступных.Избранное = НЕ Выборка.Избранное;
			ИдентификаторСтрокиСписка = -1;
			
			Если Выборка.Пометка Тогда 
				Отбор = Новый Структура("ГруппаЗаказчиков", Выборка.ГруппаЗаказчиков); 
				Найденные = ВыбранныеГруппыЗаказчиков.НайтиСтроки(Отбор);
				
				Если Найденные.Количество() = 0 Тогда
					НоваяСтрокаВыбранных = ВыбранныеГруппыЗаказчиков.Добавить();
					НоваяСтрокаВыбранных.Исключить = БиблиотекаКартинок.УдалитьЗначение;	
					ИдентификаторСтрокиСписка = НоваяСтрокаВыбранных.ПолучитьИдентификатор();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаВыбранных, Выборка, "ГруппаЗаказчиков, Наименование");  
				Иначе
					ИдентификаторСтрокиСписка = Найденные[0].ПолучитьИдентификатор();	
				КонецЕсли;
			КонецЕсли; 
			
			ДобавитьВКэш(КэшСтрок, НоваяСтрокаДоступных.ГруппаЗаказчиков, НоваяСтрокаДоступных.ПолучитьИдентификатор(),
			 	ИдентификаторСтрокиСписка);
		
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьИдентификатор(СтарыйИдентификатор, НовыйИдентификатор) 
	
	НайденныеСтроки = КэшСтрок.НайтиСтроки(Новый Структура("Значение", СтарыйИдентификатор));
	
	Для Каждого Строка Из НайденныеСтроки Цикл  
		Строка.Значение = НовыйИдентификатор;
	КонецЦикла;			
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекстРедактирования() Экспорт 
	
	Элементы.СтрокаПоиска.ОбновитьТекстРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьСтроку(СтрокаКуда, СтрокаОткуда, НайденнаяСтрока) 
	
	СтрокиКуда = СтрокаКуда.ПолучитьЭлементы();
	СтрокиОткуда = СтрокаОткуда.ПолучитьЭлементы();
	Позиция = ПолучитьПозициюВставки(СтрокиКуда, НайденнаяСтрока.Наименование);
	
	Если Позиция = Неопределено Тогда
		НоваяСтрока = СтрокиКуда.Добавить();
	Иначе
		НоваяСтрока = СтрокиКуда.Вставить(Позиция);
	КонецЕсли;
	
	Ключ = ?(НайденнаяСтрока.Избранное = -1, НайденнаяСтрока.Направление, НайденнаяСтрока.ГруппаЗаказчиков); 
	ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);		          
	НоваяСтрокаИдентификатор = НоваяСтрока.ПолучитьИдентификатор();
	ЗаменитьИдентификатор(НайденнаяСтрока.ПолучитьИдентификатор(), НоваяСтрокаИдентификатор);
		
	// Установка фокуса на тот же номер строки.	
	ИндексСтроки = СтрокиОткуда.Индекс(НайденнаяСтрока);
	УдалитьИзКэша(КэшСтрок, Ключ, НайденнаяСтрока.ПолучитьИдентификатор());
	СтрокиОткуда.Удалить(НайденнаяСтрока);
	КоличествоСтрок = СтрокиОткуда.Количество();
	Строки = Неопределено;
	
	// Если были еще такие группы в других направлениях, их нужно удалить
	Если НоваяСтрока.Избранное = 0 Тогда 
		
		Найденные = КэшСтрок.НайтиСтроки(Новый Структура("Ключ", Ключ)); 
		
		Для Счетчик = -Найденные.Количество() + 1 По 0 Цикл  
			
			Найденная = Найденные[-Счетчик];  
			
			Если Найденная.Значение <> НоваяСтрокаИдентификатор Тогда  
				
				Удаляемая = ДоступныеГруппыЗаказчиков.НайтиПоИдентификатору(Найденная.Значение); 
				Родитель = Удаляемая.ПолучитьРодителя(); 
				// Если в направлении не осталось групп, то удалить его
				Родитель.ПолучитьЭлементы().Удалить(Удаляемая);  
				
				Если Родитель.ПолучитьЭлементы().Количество() = 0 Тогда
					УдалитьИзКэша(КэшСтрок, Родитель.Направление, Родитель.ПолучитьИдентификатор());
					ДоступныеГруппыЗаказчиков.ПолучитьЭлементы().Удалить(Родитель);  
				Иначе
					ПроставитьПометкуПоПодчиненным(Родитель); 
				КонецЕсли;  
				
				УдалитьИзКэша(КэшСтрок, Ключ, Найденная.Значение);
			КонецЕсли; 
			
		КонецЦикла;
	КонецЕсли;
		
	Если КоличествоСтрок = 0 Тогда                 
		
		Родитель = СтрокаОткуда.ПолучитьРодителя();		
		
		Если Родитель = Неопределено Тогда
			УдалитьИзКэша(КэшСтрок, СтрокаОткуда.Направление, СтрокаОткуда.ПолучитьИдентификатор());
			Строки = ДоступныеГруппыЗаказчиков.ПолучитьЭлементы();  
			ИндексСтроки = Строки.Индекс(СтрокаОткуда);
			Строки.Удалить(СтрокаОткуда);
			КоличествоСтрок = Строки.Количество();
		КонецЕсли;		
	Иначе
		Строки = СтрокиОткуда;
	КонецЕсли;
	
	Если Строки <> Неопределено Тогда
		Если КоличествоСтрок > ИндексСтроки Тогда
			ИдентификаторСтроки = Строки[ИндексСтроки].ПолучитьИдентификатор();
		Иначе
			ИдентификаторСтроки = Строки[0].ПолучитьИдентификатор();
		КонецЕсли;
		
		Элементы.ДоступныеГруппыЗаказчиков.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПометкиИзбранного(ВыбраннаяСтрока)
	
	НайденнаяСтрока = ДоступныеГруппыЗаказчиков.НайтиПоИдентификатору(ВыбраннаяСтрока);
	НайденнаяСтрока.Избранное = НЕ НайденнаяСтрока.Избранное;
	
	ОбщегоНазначенияВызовСервера.ОбработатьПометкуИзбранного(НайденнаяСтрока.ГруппаЗаказчиков, 
		?(НайденнаяСтрока.Избранное = 1, Ложь, Истина), "ГруппыЗаказчиков");
	
	// Пересортировка таблицы    
	Если НайденнаяСтрока.Избранное = 0 Тогда 	
		// Нужно переместить наверх и удалить из группировки 
		Родитель = НайденнаяСтрока.ПолучитьРодителя();
		ПереместитьСтроку(ДоступныеГруппыЗаказчиков, Родитель, НайденнаяСтрока);
		ПроставитьПометкуПоПодчиненным(Родитель); 
	Иначе 
		// Нужно поместить в нужное направление и удалить сверху
		Строки = ДоступныеГруппыЗаказчиков.ПолучитьЭлементы(); 
		СтрокиНаправлений = КэшСтрок.НайтиСтроки(Новый Структура("Ключ", НайденнаяСтрока.Направление));	
		ИдентификаторНаправления = Неопределено;
		
		Если СтрокиНаправлений.Количество() = 0 Тогда 
			
			Позиция = ПолучитьПозициюВставки(Строки, Строка(НайденнаяСтрока.Направление), Истина);
			
			Если Позиция = Неопределено Тогда
				СтрокаНаправления = Строки.Добавить();
			Иначе
				СтрокаНаправления = Строки.Вставить(Позиция);
			КонецЕсли; 
			
			СтрокаНаправления.ИзбранНое = -1;
			СтрокаНаправления.Наименование = НайденнаяСтрока.Направление;
			СтрокаНаправления.Направление = НайденнаяСтрока.Направление; 
			ИдентификаторНаправления = СтрокаНаправления.ПолучитьИдентификатор();
			ДобавитьВКэш(КэшСтрок, СтрокаНаправления.Направление, ИдентификаторНаправления, -1);
		Иначе 
			СтрокаНаправления = ДоступныеГруппыЗаказчиков.НайтиПоИдентификатору(Число(СтрокиНаправлений[0].Значение));
		КонецЕсли;
		
		ПереместитьСтроку(СтрокаНаправления, ДоступныеГруппыЗаказчиков, НайденнаяСтрока); 
		ПроставитьПометкуПоПодчиненным(СтрокаНаправления);
		
		Если ИдентификаторНаправления <> Неопределено Тогда 
			Элементы.ДоступныеГруппыЗаказчиков.Развернуть(ИдентификаторНаправления);	
		КонецЕсли;		
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьГруппыЗаказчиковПоСтрокеПоиска(СтрокаПоиска) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыЗаказчиков.Ссылка КАК ГруппаЗаказчиков
	|ИЗ
	|	Справочник.ГруппыЗаказчиковНаправлений КАК ГруппыЗаказчиков
	|ГДЕ
	|	НЕ ГруппыЗаказчиков.ПометкаУдаления
	|	И ГруппыЗаказчиков.Наименование ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", "%" + СтрокаПоиска + "%"); 
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ГруппаЗаказчиков");

КонецФункции

&НаКлиенте
Функция ПолучитьПозициюВставки(Строки, Сравнение, ДляНаправления = Ложь) 
	
	Позиция = Неопределено;
	
	Для Каждого Строка Из Строки Цикл
		Если НЕ ДляНаправления И Строка.Избранное < 0 Тогда 
			Позиция = Строки.Индекс(Строка);
			Прервать;
		ИначеЕсли ДляНаправления И Строка.Избранное >= 0 Тогда 
			Продолжить;
		ИначеЕсли Строка.Наименование > Сравнение Тогда
			Позиция = Строки.Индекс(Строка); 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Позиция;
		
КонецФункции	

&НаКлиенте
Процедура ПроставитьПометкуПоПодчиненным(Строка)   
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МаксПометка = 0;
	МинПометка = 1;
	
	Для Каждого Элемент Из Строка.ПолучитьЭлементы() Цикл 
		МаксПометка = Макс(МаксПометка, Элемент.Пометка);
		МинПометка = Мин(МинПометка, Элемент.Пометка);
	КонецЦикла;
	
	Строка.Пометка = ?(МинПометка = МаксПометка, МаксПометка, 2);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьИзКэша(КэшСтрок, Ключ, Значение)
	
	Отбор = Новый Структура("Ключ, Значение", Ключ, Значение);
	Строки = КэшСтрок.НайтиСтроки(Отбор);
	
	Если Строки.Количество() > 0 Тогда 
		КэшСтрок.Удалить(Строки[0]);	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьРекурсивно(Скрыть, МассивВидимых, Строки, МаксСкрыть = Ложь)
	
	Для Каждого Строка Из Строки Цикл
		Если Строка.Избранное = -1 Тогда 
			МаксСкрыть = Скрыть;
			УстановитьВидимостьРекурсивно(Скрыть, МассивВидимых, Строка.ПолучитьЭлементы(), МаксСкрыть);	
			Строка.Скрыть = МаксСкрыть; 
		Иначе           
			Если МассивВидимых.Найти(Строка.ГруппаЗаказчиков) <> Неопределено Тогда 
				Строка.Скрыть = НЕ Скрыть;
				МаксСкрыть = Строка.Скрыть;
			Иначе
				Строка.Скрыть = Скрыть;
			КонецЕсли;	
		КонецЕсли;                       
	КонецЦикла;
	
КонецПроцедуры
		
#КонецОбласти
